                                            Dignus Assembler Option Summary                                                Page    1 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 

Overriding Parameters- -LC:\DIGNUS\MACLIB\&m -oc:../asg/obj/rdkafka_mock.obj ../asg/asm/rdkafka_mock.asm
  Process Statements-       DUPALIAS

Options for this Assembly             Source
-------------------------             -------------------------
   NOADATA                            {Default}
     ALIGN                            {Default}
     BATCH                            {Default}
   NOCOMPATCASE                       {Default}
   NOCOMPATMACROCASE                  {Default}
   NOCOMPATSYSLIST                    {Default}
   NOCOMPATLITTYPE                    {Default}
   NOCOMPATSYSPATH                    {Default}
     DXREF                            {Default}
   NOMAPAT                            {Default}
     DUPALIAS                         {*PROCESS}
   NOVSELIBR                          {Default}
     ESD                              {Default}
     ERRFMT(microsoft)                {Default}
     FLAG(0,ALIGN,CONT,NOEXLITW,NOPAGE0,PUSH,RECORD,NOSUBSTR,NOIMPLEN,USING0)
                                      {Default}
   NOFOLD                             {Default}
   NOGOFF                             {Default}
     LANGUAGE(EN)                     {Default}
     LINECOUNT(55)                    {Default}
     LIST(&d&p&f.lst)                 {Default}
     MACCPYEXT(mac)                   {Default}
     MXREF                            {Default}
     OBJECT(c:..\asg\obj\rdkafka_mock.obj)
                                      CMDLINE
     OPTABLE(UNI,NOLIST)              {Default}
     OPTIONSUMMARY                    {Default}
   NOPCONTROL                         {Default}
   NOPESTOP                           {Default}
   NOPROFILE                          {Default}
   NORA2                              {Default}
     RLD                              {Default}
     RENT                             {Default}
   NORXREF                            {Default}
     SECTALGN(8)                      {Default}
     SIZE(MAX)                        {Default}
   NOSUPRWARN                         {Default}
     SYSPARM()                        {Default}
     TERM(WIDE)                       {Default}
     THREAD                           {Default}
   NOTRANSLATE                        {Default}
     TYPECHECK(MAGNITUDE,REGISTER)    {Default}
     USING(NOLIMIT,MAP,WARN(15))      {Default}
   NONXREF                            {Default}
   NOXREF                             {Default}
     XSD                              {Default}

                                            Dignus Assembler Option Summary                                                Page    2 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
Libraries in Search Order:
       CMDLINE      C:\DIGNUS\MACLIB\&m
                                              External Symbol Dictionary                                                   Page    3 
Symbol   Type   Id     Address  Length   Owner Id Flags Alias-of                                      DASM V1.95.14 2021/04/29 12:43 
@@ZARCH#  WX 00000001                              00
@RDKAFKA_MOCK
          SD 00000002 00000000 00010480            07  @CODE
@@GSKNA   ER 00000003                                  GETSOCKNAME
write     ER 00000004                                  WRITE
##ERROR   ER 00000005                                  __ERROR
listen    ER 00000006                                  LISTEN
rd_buf_write
          ER 00000007                                  RD_BUF_WRITE
@@ASSERT  ER 00000008                                  __ASSERT
rd_buf_write_update
          ER 00000009                                  RD_BUF_WRITE_UPDATE
rd_kafka_op_destroy
          ER 0000000A                                  RD_KAFKA_OP_DESTROY
rd_kafka_thread_cnt_curr
          XD 0000000B 00000003 00000000                RD_KAFKA_THREAD_CNT_CURR
mtx_init  ER 0000000C                                  MTX_INIT
rd_kafka_op_new0
          ER 0000000D                                  RD_KAFKA_OP_NEW0
rd_kafka_set_thread_name
          ER 0000000E                                  RD_KAFKA_SET_THREAD_NAME
mtx_destroy
          ER 0000000F                                  MTX_DESTROY
mtx_lock  ER 00000010                                  MTX_LOCK
rd_kafka_set_thread_sysname
          ER 00000011                                  RD_KAFKA_SET_THREAD_SYSNAME
rd_buf_write_ensure
          ER 00000012                                  RD_BUF_WRITE_ENSURE
rd_kafka_op_reply
          ER 00000013                                  RD_KAFKA_OP_REPLY
mtx_unlock
          ER 00000014                                  MTX_UNLOCK
rd_kafka_op_req
          ER 00000015                                  RD_KAFKA_OP_REQ
cnd_signal
          ER 00000016                                  CND_SIGNAL
rd_kafka_op_req2
          ER 00000017                                  RD_KAFKA_OP_REQ2
rd_kafka_op_err_destroy
          ER 00000018                                  RD_KAFKA_OP_ERR_DESTROY
crc_table XD 00000019 00000003 00000000                CRC_TABLE
thrd_create
          ER 0000001A                                  THRD_CREATE
rd_jitter ER 0000001B                                  RD_JITTER
thrd_join ER 0000001C                                  THRD_JOIN
rd_slice_init
          ER 0000001D                                  RD_SLICE_INIT
rd_slice_init_full
          ER 0000001E                                  RD_SLICE_INIT_FULL
rd_slice_read
          ER 0000001F                                  RD_SLICE_READ
rd_slice_peek
          ER 00000020                                  RD_SLICE_PEEK
                                              External Symbol Dictionary                                                   Page    4 
Symbol   Type   Id     Address  Length   Owner Id Flags Alias-of                                      DASM V1.95.14 2021/04/29 12:43 
rd_kafka_q_new0
          ER 00000021                                  RD_KAFKA_Q_NEW0
rd_slice_read_uvarint
          ER 00000022                                  RD_SLICE_READ_UVARINT
rd_kafka_q_destroy_final
          ER 00000023                                  RD_KAFKA_Q_DESTROY_FINAL
rd_kafka_socket_cb_linux
          ER 00000024                                  RD_KAFKA_SOCKET_CB_LINUX
rd_kafka_interceptors_on_thread_start
          ER 00000025                                  RD_KAFKA_INTERCEPTORS_ON_THREAD_START
rd_kafka_interceptors_on_thread_exit
          ER 00000026                                  RD_KAFKA_INTERCEPTORS_ON_THREAD_EXIT
snprintf  ER 00000027                                  SNPRINTF
rd_kafka_mock_api_handlers
          XD 00000028 00000003 00000000                RD_KAFKA_MOCK_API_HANDLERS
calloc    ER 00000029                                  CALLOC
rd_kafka_q_purge0
          ER 0000002A                                  RD_KAFKA_Q_PURGE0
poll      ER 0000002B                                  POLL
free      ER 0000002C                                  FREE
rd_list_init
          ER 0000002D                                  RD_LIST_INIT
rd_kafka_transport_send
          ER 0000002E                                  RD_KAFKA_TRANSPORT_SEND
rd_kafka_transport_recv
          ER 0000002F                                  RD_KAFKA_TRANSPORT_RECV
malloc    ER 00000030                                  MALLOC
rd_kafka_transport_new
          ER 00000031                                  RD_KAFKA_TRANSPORT_NEW
rd_kafka_transport_post_connect_setup
          ER 00000032                                  RD_KAFKA_TRANSPORT_POST_CONNECT_SETUP
rd_kafka_transport_close
          ER 00000033                                  RD_KAFKA_TRANSPORT_CLOSE
rd_kafka_q_serve
          ER 00000034                                  RD_KAFKA_Q_SERVE
close     ER 00000035                                  CLOSE
realloc   ER 00000036                                  REALLOC
GETTFD@Y  ER 00000037                                  GETTIMEOFDAY
@@PT3ML   ER 00000038                                  PTHREAD_MUTEX_LOCK
rd_list_destroy
          ER 00000039                                  RD_LIST_DESTROY
@@PT3MU   ER 0000003A                                  PTHREAD_MUTEX_UNLOCK
rd_kafka_timer_stop
          ER 0000003B                                  RD_KAFKA_TIMER_STOP
rd_kafka_timer_start0
          ER 0000003C                                  RD_KAFKA_TIMER_START0
rd_kafka_q_io_event_enable
          ER 0000003D                                  RD_KAFKA_Q_IO_EVENT_ENABLE
rd_kafka_broker_destroy_final
          ER 0000003E                                  RD_KAFKA_BROKER_DESTROY_FINAL
rd_kafka_mock_cgrp_destroy
          ER 0000003F                                  RD_KAFKA_MOCK_CGRP_DESTROY
rd_sockaddr2str
                                              External Symbol Dictionary                                                   Page    5 
Symbol   Type   Id     Address  Length   Owner Id Flags Alias-of                                      DASM V1.95.14 2021/04/29 12:43 
          ER 00000040                                  RD_SOCKADDR2STR
rd_kafka_broker_add
          ER 00000041                                  RD_KAFKA_BROKER_ADD
rd_kafka_buf_destroy_final
          ER 00000042                                  RD_KAFKA_BUF_DESTROY_FINAL
rd_kafka_mock_cgrps_connection_closed
          ER 00000043                                  RD_KAFKA_MOCK_CGRPS_CONNECTION_CLOSED
rd_kafka_timers_next
          ER 00000044                                  RD_KAFKA_TIMERS_NEXT
rd_kafka_timers_run
          ER 00000045                                  RD_KAFKA_TIMERS_RUN
rd_kafka_buf_new0
          ER 00000046                                  RD_KAFKA_BUF_NEW0
rd_kafka_timers_destroy
          ER 00000047                                  RD_KAFKA_TIMERS_DESTROY
rd_kafka_buf_new_shadow
          ER 00000048                                  RD_KAFKA_BUF_NEW_SHADOW
rd_kafka_timers_init
          ER 00000049                                  RD_KAFKA_TIMERS_INIT
rd_kafka_bufq_enq
          ER 0000004A                                  RD_KAFKA_BUFQ_ENQ
rd_kafka_bufq_deq
          ER 0000004B                                  RD_KAFKA_BUFQ_DEQ
rd_kafka_bufq_init
          ER 0000004C                                  RD_KAFKA_BUFQ_INIT
memmove   ER 0000004D                                  MEMMOVE
pipe      ER 0000004E                                  PIPE
read      ER 0000004F                                  READ
strdup    ER 00000050                                  STRDUP
rd_kafka_crash
          ER 00000051                                  RD_KAFKA_CRASH
strerror  ER 00000052                                  STRERROR
fcntl     ER 00000053                                  FCNTL
accept    ER 00000054                                  ACCEPT
bind      ER 00000055                                  BIND
rd_kafka_log0
          ER 00000056                                  RD_KAFKA_LOG0
@rdkafka_mock&
          XD 00000057 00000007 000006D8                @@STATIC
@rdkafka_mock
          SD 00000058 00010480 000013A2            07  @DATA
rd_kafka_mock_api_handlers
          ER 00000059                                  @ERD_KAFKA_MOCK_API_HANDLERS
crc_table ER 0000005A                                  @ECRC_TABLE
rd_kafka_thread_cnt_curr
          ER 0000005B                                  @ERD_KAFKA_THREAD_CNT_CURR
rdkafka_mock:
          SD 0000005C 00011828 00001040            07  @@INIT@
@@ALLOCA  ER 0000005D
rd_kafka_mock_msgset_find
          LD          00003D98          00000002   00  RD_KAFKA_MOCK_MSGSET_FIND
rd_kafka_mock_partition_log_append
          LD          00003EB0          00000002   00  RD_KAFKA_MOCK_PARTITION_LOG_APPEND
                                              External Symbol Dictionary                                                   Page    6 
Symbol   Type   Id     Address  Length   Owner Id Flags Alias-of                                      DASM V1.95.14 2021/04/29 12:43 
rd_kafka_mock_committed_offset_find
          LD          00004B50          00000002   00  RD_KAFKA_MOCK_COMMITTED_OFFSET_FIND
rd_kafka_mock_commit_offset
          LD          00004CB0          00000002   00  RD_KAFKA_MOCK_COMMIT_OFFSET
rd_kafka_mock_partition_find
          LD          00005338          00000002   00  RD_KAFKA_MOCK_PARTITION_FIND
rd_kafka_mock_topic_find
          LD          00005898          00000002   00  RD_KAFKA_MOCK_TOPIC_FIND
rd_kafka_mock_topic_find_by_kstr
          LD          00005980          00000002   00  RD_KAFKA_MOCK_TOPIC_FIND_BY_KSTR
rd_kafka_mock_topic_auto_create
          LD          00005AD8          00000002   00  RD_KAFKA_MOCK_TOPIC_AUTO_CREATE
rd_kafka_mock_topic_get
          LD          00005CB8          00000002   00  RD_KAFKA_MOCK_TOPIC_GET
rd_kafka_mock_connection_send_response
          LD          00006DD8          00000002   00  RD_KAFKA_MOCK_CONNECTION_SEND_RESPONSE
rd_kafka_mock_buf_new_response
          LD          000099E8          00000002   00  RD_KAFKA_MOCK_BUF_NEW_RESPONSE
rd_kafka_mock_connection_set_blocking
          LD          0000A7E0          00000002   00  RD_KAFKA_MOCK_CONNECTION_SET_BLOCKING
rd_kafka_mock_cluster_get_coord
          LD          0000C580          00000002   00  RD_KAFKA_MOCK_CLUSTER_GET_COORD
rd_kafka_mock_next_request_error
          LD          0000CE50          00000002   00  RD_KAFKA_MOCK_NEXT_REQUEST_ERROR
rd_kafka_mock_clear_request_errors
          LD          0000D068          00000002   00  RD_KAFKA_MOCK_CLEAR_REQUEST_ERRORS
rd_kafka_mock_push_request_errors_array
          LD          0000D1F0          00000002   00  RD_KAFKA_MOCK_PUSH_REQUEST_ERRORS_ARRAY
rd_kafka_mock_push_request_errors
          LD          0000D428          00000002   00  RD_KAFKA_MOCK_PUSH_REQUEST_ERRORS
rd_kafka_mock_broker_push_request_error_rtts
          LD          0000D5D0          00000002   00  RD_KAFKA_MOCK_BROKER_PUSH_REQUEST_ERROR_RTTS
rd_kafka_mock_topic_set_error
          LD          0000D868          00000002   00  RD_KAFKA_MOCK_TOPIC_SET_ERROR
rd_kafka_mock_topic_create
          LD          0000DA10          00000002   00  RD_KAFKA_MOCK_TOPIC_CREATE
rd_kafka_mock_partition_set_leader
          LD          0000DBD0          00000002   00  RD_KAFKA_MOCK_PARTITION_SET_LEADER
rd_kafka_mock_partition_set_follower
          LD          0000DD90          00000002   00  RD_KAFKA_MOCK_PARTITION_SET_FOLLOWER
rd_kafka_mock_partition_set_follower_wmarks
          LD          0000DF50          00000002   00  RD_KAFKA_MOCK_PARTITION_SET_FOLLOWER_WMARKS
rd_kafka_mock_broker_set_down
          LD          0000E118          00000002   00  RD_KAFKA_MOCK_BROKER_SET_DOWN
rd_kafka_mock_broker_set_up
          LD          0000E298          00000002   00  RD_KAFKA_MOCK_BROKER_SET_UP
rd_kafka_mock_broker_set_rtt
          LD          0000E420          00000002   00  RD_KAFKA_MOCK_BROKER_SET_RTT
rd_kafka_mock_broker_set_rack
          LD          0000E5B0          00000002   00  RD_KAFKA_MOCK_BROKER_SET_RACK
rd_kafka_mock_coordinator_set
          LD          0000E760          00000002   00  RD_KAFKA_MOCK_COORDINATOR_SET
rd_kafka_mock_set_apiversion
                                              External Symbol Dictionary                                                   Page    7 
Symbol   Type   Id     Address  Length   Owner Id Flags Alias-of                                      DASM V1.95.14 2021/04/29 12:43 
          LD          0000E930          00000002   00  RD_KAFKA_MOCK_SET_APIVERSION
rd_kafka_mock_cluster_destroy
          LD          0000F8F8          00000002   00  RD_KAFKA_MOCK_CLUSTER_DESTROY
rd_kafka_mock_cluster_new
          LD          0000FBF0          00000002   00  RD_KAFKA_MOCK_CLUSTER_NEW
rd_kafka_mock_cluster_handle
          LD          00010338          00000002   00  RD_KAFKA_MOCK_CLUSTER_HANDLE
rd_kafka_handle_mock_cluster
          LD          000103C8          00000002   00  RD_KAFKA_HANDLE_MOCK_CLUSTER
rd_kafka_mock_cluster_bootstraps
          LD          00010460          00000002   00  RD_KAFKA_MOCK_CLUSTER_BOOTSTRAPS
                                                                                                                           Page    8 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                               1 *PROCESS DUPALIAS
                                               2 *
                                               3 *  Compiled by DCC Version 2.25.07 Mar  6 2021 08:51:07
                                               4 *           on Thu Apr 29 12:43:06 2021
                                               5 *

                                               7          WXTRN @@ZARCH#
                                               8 *
                                               9 *
                                              10 *
                                              11 *    Code Section
                                              12 *
                                              13 @CODE    ALIAS X'7CD9C4D2C1C6D2C16DD4D6C3D2'
00000000                00000000 00010480     14 @CODE    CSECT
                                              15 @CODE    AMODE ANY
                                              16 @CODE    RMODE ANY
                                              17 @DATA    ALIAS X'7C998492818692816D94968392'
                                              18 getsockname ALIAS C'@@GSKNA'
                                              19          EXTRN getsockname
                                              20 write    ALIAS C'write'
                                              21          EXTRN write
                                              22 __error  ALIAS C'##ERROR'
                                              23          EXTRN __error
                                              24 listen   ALIAS C'listen'
                                              25          EXTRN listen
                                              26 rd_buf_write ALIAS X'99846D82A4866DA69989A385'
                                              27          EXTRN rd_buf_write
                                              28 __assert ALIAS C'@@ASSERT'
                                              29          EXTRN __assert
                                              30 rd_buf_write_update ALIAS X'99846D82A4866DA69989A3856DA4978481A385'
                                              31          EXTRN rd_buf_write_update
                                              32 rd_kafka_op_destroy ALIAS X'99846D92818692816D96976D8485A2A39996A8'
                                              33          EXTRN rd_kafka_op_destroy
                                              34 rd_kafka_thread_cnt_curr ALIAS X'99846D92818692816DA388998581846D8395A3*
                                                                6D83A49999'
                                              35 rd_kafka_thread_cnt_curr DXD   0F
                                              36 mtx_init ALIAS X'94A3A76D899589A3'
                                              37          EXTRN mtx_init
                                              38 rd_kafka_op_new0 ALIAS X'99846D92818692816D96976D9585A6F0'
                                              39          EXTRN rd_kafka_op_new0
                                              40 rd_kafka_set_thread_name ALIAS X'99846D92818692816DA285A36DA38899858184*
                                                                6D95819485'
                                              41          EXTRN rd_kafka_set_thread_name
                                              42 mtx_destroy ALIAS X'94A3A76D8485A2A39996A8'
                                              43          EXTRN mtx_destroy
                                              44 mtx_lock ALIAS X'94A3A76D93968392'
                                              45          EXTRN mtx_lock
                                              46 rd_kafka_set_thread_sysname ALIAS X'99846D92818692816DA285A36DA38899858*
                                                                1846DA2A8A295819485'
                                              47          EXTRN rd_kafka_set_thread_sysname
                                              48 rd_buf_write_ensure ALIAS X'99846D82A4866DA69989A3856D8595A2A49985'
                                              49          EXTRN rd_buf_write_ensure
                                                                                                                           Page    9 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                              50 rd_kafka_op_reply ALIAS X'99846D92818692816D96976D99859793A8'
                                              51          EXTRN rd_kafka_op_reply
                                              52 mtx_unlock ALIAS X'94A3A76DA49593968392'
                                              53          EXTRN mtx_unlock
                                              54 rd_kafka_op_req ALIAS X'99846D92818692816D96976D998598'
                                              55          EXTRN rd_kafka_op_req
                                              56 cnd_signal ALIAS X'8395846DA28987958193'
                                              57          EXTRN cnd_signal
                                              58 rd_kafka_op_req2 ALIAS X'99846D92818692816D96976D998598F2'
                                              59          EXTRN rd_kafka_op_req2
                                              60 rd_kafka_op_err_destroy ALIAS X'99846D92818692816D96976D8599996D8485A2A*
                                                                39996A8'
                                              61          EXTRN rd_kafka_op_err_destroy
                                              62 crc_table ALIAS X'8399836DA381829385'
                                              63 crc_table DXD   0F
                                              64 thrd_create ALIAS X'A38899846D83998581A385'
                                              65          EXTRN thrd_create
                                              66 rd_jitter ALIAS X'99846D9189A3A38599'
                                              67          EXTRN rd_jitter
                                              68 thrd_join ALIAS X'A38899846D91968995'
                                              69          EXTRN thrd_join
                                              70 rd_slice_init ALIAS X'99846DA2938983856D899589A3'
                                              71          EXTRN rd_slice_init
                                              72 rd_slice_init_full ALIAS X'99846DA2938983856D899589A36D86A49393'
                                              73          EXTRN rd_slice_init_full
                                              74 rd_slice_read ALIAS X'99846DA2938983856D99858184'
                                              75          EXTRN rd_slice_read
                                              76 rd_slice_peek ALIAS X'99846DA2938983856D97858592'
                                              77          EXTRN rd_slice_peek
                                              78 rd_kafka_q_new0 ALIAS X'99846D92818692816D986D9585A6F0'
                                              79          EXTRN rd_kafka_q_new0
                                              80 rd_slice_read_uvarint ALIAS X'99846DA2938983856D998581846DA4A581998995A*
                                                                3'
                                              81          EXTRN rd_slice_read_uvarint
                                              82 rd_kafka_q_destroy_final ALIAS X'99846D92818692816D986D8485A2A39996A86D*
                                                                8689958193'
                                              83          EXTRN rd_kafka_q_destroy_final
                                              84 rd_kafka_socket_cb_linux ALIAS X'99846D92818692816DA296839285A36D83826D*
                                                                938995A4A7'
                                              85          EXTRN rd_kafka_socket_cb_linux
                                              86 rd_kafka_interceptors_on_thread_start ALIAS X'99846D92818692816D8995A38*
                                                                599838597A39699A26D96956DA388998581846DA2A38199A3'
                                              87          EXTRN rd_kafka_interceptors_on_thread_start
                                              88 rd_kafka_interceptors_on_thread_exit ALIAS X'99846D92818692816D8995A385*
                                                                99838597A39699A26D96956DA388998581846D85A789A3'
                                              89          EXTRN rd_kafka_interceptors_on_thread_exit
                                              90 snprintf ALIAS C'snprintf'
                                              91          EXTRN snprintf
                                              92 rd_kafka_mock_api_handlers ALIAS X'99846D92818692816D949683926D8197896D*
                                                                88819584938599A2'
                                              93 rd_kafka_mock_api_handlers DXD   0F
                                              94 calloc   ALIAS C'calloc'
                                                                                                                           Page   10 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                              95          EXTRN calloc
                                              96 rd_kafka_q_purge0 ALIAS X'99846D92818692816D986D97A4998785F0'
                                              97          EXTRN rd_kafka_q_purge0
                                              98 poll     ALIAS C'poll'
                                              99          EXTRN poll
                                             100 free     ALIAS C'free'
                                             101          EXTRN free
                                             102 rd_list_init ALIAS X'99846D9389A2A36D899589A3'
                                             103          EXTRN rd_list_init
                                             104 rd_kafka_transport_send ALIAS X'99846D92818692816DA3998195A2979699A36DA*
                                                                2859584'
                                             105          EXTRN rd_kafka_transport_send
                                             106 rd_kafka_transport_recv ALIAS X'99846D92818692816DA3998195A2979699A36D9*
                                                                98583A5'
                                             107          EXTRN rd_kafka_transport_recv
                                             108 malloc   ALIAS C'malloc'
                                             109          EXTRN malloc
                                             110 rd_kafka_transport_new ALIAS X'99846D92818692816DA3998195A2979699A36D95*
                                                                85A6'
                                             111          EXTRN rd_kafka_transport_new
                                             112 rd_kafka_transport_post_connect_setup ALIAS X'99846D92818692816DA399819*
                                                                5A2979699A36D9796A2A36D839695958583A36DA285A3A497'
                                             113          EXTRN rd_kafka_transport_post_connect_setup
                                             114 rd_kafka_transport_close ALIAS X'99846D92818692816DA3998195A2979699A36D*
                                                                839396A285'
                                             115          EXTRN rd_kafka_transport_close
                                             116 rd_kafka_q_serve ALIAS X'99846D92818692816D986DA28599A585'
                                             117          EXTRN rd_kafka_q_serve
                                             118 close    ALIAS C'close'
                                             119          EXTRN close
                                             120 realloc  ALIAS C'realloc'
                                             121          EXTRN realloc
                                             122 gettimeofday ALIAS C'GETTFD@Y'
                                             123          EXTRN gettimeofday
                                             124 pthread_mutex_lock ALIAS C'@@PT3ML'
                                             125          EXTRN pthread_mutex_lock
                                             126 rd_list_destroy ALIAS X'99846D9389A2A36D8485A2A39996A8'
                                             127          EXTRN rd_list_destroy
                                             128 pthread_mutex_unlock ALIAS C'@@PT3MU'
                                             129          EXTRN pthread_mutex_unlock
                                             130 rd_kafka_timer_stop ALIAS X'99846D92818692816DA3899485996DA2A39697'
                                             131          EXTRN rd_kafka_timer_stop
                                             132 rd_kafka_timer_start0 ALIAS X'99846D92818692816DA3899485996DA2A38199A3F*
                                                                0'
                                             133          EXTRN rd_kafka_timer_start0
                                             134 rd_kafka_q_io_event_enable ALIAS X'99846D92818692816D986D89966D85A58595*
                                                                A36D859581829385'
                                             135          EXTRN rd_kafka_q_io_event_enable
                                             136 rd_kafka_broker_destroy_final ALIAS X'99846D92818692816D8299969285996D8*
                                                                485A2A39996A86D8689958193'
                                             137          EXTRN rd_kafka_broker_destroy_final
                                             138 rd_kafka_mock_cgrp_destroy ALIAS X'99846D92818692816D949683926D83879997*
                                                                                                                           Page   11 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                6D8485A2A39996A8'
                                             139          EXTRN rd_kafka_mock_cgrp_destroy
                                             140 rd_sockaddr2str ALIAS X'99846DA296839281848499F2A2A399'
                                             141          EXTRN rd_sockaddr2str
                                             142 rd_kafka_broker_add ALIAS X'99846D92818692816D8299969285996D818484'
                                             143          EXTRN rd_kafka_broker_add
                                             144 rd_kafka_buf_destroy_final ALIAS X'99846D92818692816D82A4866D8485A2A399*
                                                                96A86D8689958193'
                                             145          EXTRN rd_kafka_buf_destroy_final
                                             146 rd_kafka_mock_cgrps_connection_closed ALIAS X'99846D92818692816D9496839*
                                                                26D83879997A26D839695958583A38996956D839396A28584'
                                             147          EXTRN rd_kafka_mock_cgrps_connection_closed
                                             148 rd_kafka_timers_next ALIAS X'99846D92818692816DA389948599A26D9585A7A3'
                                             149          EXTRN rd_kafka_timers_next
                                             150 rd_kafka_timers_run ALIAS X'99846D92818692816DA389948599A26D99A495'
                                             151          EXTRN rd_kafka_timers_run
                                             152 rd_kafka_buf_new0 ALIAS X'99846D92818692816D82A4866D9585A6F0'
                                             153          EXTRN rd_kafka_buf_new0
                                             154 rd_kafka_timers_destroy ALIAS X'99846D92818692816DA389948599A26D8485A2A*
                                                                39996A8'
                                             155          EXTRN rd_kafka_timers_destroy
                                             156 rd_kafka_buf_new_shadow ALIAS X'99846D92818692816D82A4866D9585A66DA2888*
                                                                18496A6'
                                             157          EXTRN rd_kafka_buf_new_shadow
                                             158 rd_kafka_timers_init ALIAS X'99846D92818692816DA389948599A26D899589A3'
                                             159          EXTRN rd_kafka_timers_init
                                             160 rd_kafka_bufq_enq ALIAS X'99846D92818692816D82A486986D859598'
                                             161          EXTRN rd_kafka_bufq_enq
                                             162 rd_kafka_bufq_deq ALIAS X'99846D92818692816D82A486986D848598'
                                             163          EXTRN rd_kafka_bufq_deq
                                             164 rd_kafka_bufq_init ALIAS X'99846D92818692816D82A486986D899589A3'
                                             165          EXTRN rd_kafka_bufq_init
                                             166 memmove  ALIAS C'memmove'
                                             167          EXTRN memmove
                                             168 pipe     ALIAS C'pipe'
                                             169          EXTRN pipe
                                             170 read     ALIAS C'read'
                                             171          EXTRN read
                                             172 strdup   ALIAS C'strdup'
                                             173          EXTRN strdup
                                             174 rd_kafka_crash ALIAS X'99846D92818692816D839981A288'
                                             175          EXTRN rd_kafka_crash
                                             176 strerror ALIAS C'strerror'
                                             177          EXTRN strerror
                                             178 fcntl    ALIAS C'fcntl'
                                             179          EXTRN fcntl
                                             180 accept   ALIAS C'accept'
                                             181          EXTRN accept
                                             182 bind     ALIAS C'bind'
                                             183          EXTRN bind
                                             184 rd_kafka_log0 ALIAS X'99846D92818692816D939687F0'
                                             185          EXTRN rd_kafka_log0
                                                                                                                           Page   12 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                             186 *
                                             187 *
                                             188 *
                                             189 * ....... start of rd_atomic32_add
00000000                                     190 @LNAME1059 DS  0H
00000000 0000000F                            191          DC    X'0000000F'
00000004 99846D81A3969489                    192          DC    C'rd_atomic32_add'
00000013 00                                  193          DC    X'00'
                                             194 rd_atomic32_add DCCPRLG CINDEX=1059,BASER=12,FRAME=184,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1059
                                             195          macro
                                             196          dccextrn &m
                                             197          gblc    &$dccext(1000)
                                             198          gbla    &$dccexti
                                             199          lcla    &i
                                             200 &$dccext(&$dccexti+1) setc    '&m'
                                             201 &i       seta    1
                                             202 .loop    aif    (&i gt &$dccexti).around
                                             203          aif    ('&$dccext(&i)' eq '&m').getout
                                             204 &i       seta    &i+1
                                             205          ago     .loop
                                             206 .around  anop
                                             207 &$dccexti seta &$dccexti+1
                                             208          extrn  &m
                                             209 .getout  anop
                                             210          mend
00000018                                     211+$eye0002    ds    0d                                                    02-DCCCA
00000018 C4C3C3                              212+         dc cl3'DCC'                                                    02-DCCCA
0000001B 01                                  213+         dc xl1'01' format one                                          02-DCCCA
0000001C 00000000                            214+         dc a(0)                                                        02-DCCCA
00000020 000000000000008A                    215+         dc ad(@PER_1059)                                               02-DCCCA
00000028 00000000000000B8                    216+         dc ad(184)                                                     02-DCCCA
00000030 0000000000000000                    217+         dc ad(0)                                                       02-DCCCA
00000038 0000000000001000                    218+         dc ad(4096)                                                    02-DCCCA
00000040 20                                  219+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000041 03                                  220+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00000042 03                                  221+         dc al1(3)                                                      02-DCCCA
00000043 08                                  222+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000044 00                                  223+         dc bl.8'00000000'                                              02-DCCCA
00000045 000000                              224+         dc al3(0)                                                      02-DCCCA
00000048 0000000000000000                    225+         dc ad(@LNAME1059)                                              02-DCCCA
00000050                                     226+         ds 0d                                                          02-DCCCA
00000050 0000000000000018                    227+         dc ad($eye0002)                                                02-DCCCA
00000058 0000000000000000                    228+         dc ad(0)                                                       02-DCCCA
00000060                                     229+         ds    0d                                                       01-DCCPR
00000060                                     230+rd_atomic32_add ds 0d                                                   01-DCCPR
00000060                                     231+@REGION_1059_1 ds 0h                                                    01-DCCPR
00000060 EBEC D008 0024          00000008    232+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000066 E3E0 D088 0004          00000088    233+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000006C E3C0 D090 0004          00000090    234+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000072 B904 002E                           235+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000076 E3B0 C018 0004          00000018    236+         lg    11,24(0,12)         get dvt address                      01-DCCPR
                                                                                                                           Page   13 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000007C A7EB 00B8               000000B8    237+         aghi  14,184              increase by frame size               01-DCCPR
00000080 E3E0 C020 0021          00000020    238+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000086 4720 B020               00000020    239+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000008A                                     240+@PER_1059 ds   0h                                                       01-DCCPR
0000008A EBDE 2080 0024          00000080    241+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000090 E3C0 2090 0024          00000090    242+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000096 B904 00D2                           243+         lgr   13,2                set real frame pointer               01-DCCPR
0000009A B904 00CF                           244+         lgr   12,15               set base reg                         01-DCCPR
                        00000060             245+         using @REGION_1059_1,12                                        01-DCCPR
0000009E B904 0031                           246          LGR   3,1         ; ptr to parm area
                                             247 * ******* End of Prologue
                                             248 * *
000000A2 E320 3000 0004          00000000    249          LG    2,0(0,3)    ; ra
                                             250 * ***
                                             251 * ***      int32_t r;
                                             252 * ***      pthread_mutex_lock(&ra->lock);
000000A8 41F0 2008               00000008    253          LA    15,8(0,2)
000000AC E3F0 D0B0 0024          000000B0    254          STG   15,176(0,13)
000000B2 4110 D0B0               000000B0    255          LA    1,176(0,13)
000000B6 E3F0 C0D8 0004          00000138    256          LG    15,@lit_1059_0 ; pthread_mutex_lock
000000BC                                     257 @@gen_label0 DS    0H
000000BC 05EF                                258          BALR  14,15
000000BE                                     259 @@gen_label1 DS    0H
                                             260 * ***      ra->val += v;
000000BE 58F0 2000               00000000    261          L     15,0(0,2)
000000C2 5AF0 300C               0000000C    262          A     15,12(0,3)
000000C6 50F0 2000               00000000    263          ST    15,0(0,2)
                                             264 * ***      r = ra->val;
000000CA 183F                                265          LR    3,15        ; ra
                                             266 * ***      pthread_mutex_unlock(&ra->lock);
000000CC 41F0 2008               00000008    267          LA    15,8(0,2)
000000D0 E3F0 D0B0 0024          000000B0    268          STG   15,176(0,13)
000000D6 4110 D0B0               000000B0    269          LA    1,176(0,13)
000000DA E3F0 C0E0 0004          00000140    270          LG    15,@lit_1059_1 ; pthread_mutex_unlock
000000E0                                     271 @@gen_label2 DS    0H
000000E0 05EF                                272          BALR  14,15
000000E2                                     273 @@gen_label3 DS    0H
                                             274 * ***      return r;
000000E2 B914 00F3                           275          LGFR  15,3
                                             276 * ***   # 103 "C:\asgkafka\librdkafka\src\rdatomic.h"
                                             277 * ***      return __atomic_add_fetch(&ra->val, v, 6);
                                             278 * ***
                                             279 * ***   }
                                             280 * * **** Start of Epilogue
                                             281          DCCEPIL
000000E6                                     282+         ds 0h                                                          01-DCCEP
                                             283+* Epilog
000000E6 D707 D088 D088 00000088 00000088    284+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
000000EC E3D0 D080 0004          00000080    285+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000000F2 E3C0 D090 0004          00000090    286+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000000F8 E3B0 C018 0004          00000018    287+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
000000FE E3C0 B010 0021          00000010    288+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
                                                                                                                           Page   14 
  Active Usings: @REGION_1059_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000104 E3E0 D008 0004          00000008    289+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000010A EB1C D020 0004          00000020    290+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000110 078E                                291+         bcr 8,14                if same dsab, just return              01-DCCEP
00000112 E3F0 D010 0024          00000010    292+         stg 15,16(0,13)         save return code                       01-DCCEP
00000118 E300 D018 0024          00000018    293+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000011E E3F0 D090 0004          00000090    294+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00000124 E3F0 F018 0004          00000018    295+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000012A 47F0 F040               00000040    296+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                             297+* End of Epilog
                                             298 * * **** End of Epilogue
00000130                                     299          DS    0D
00000130 000000B8                            300 @FRAMESIZE_1059 DC F'184'
00000134 00000000
00000138 0000000000000000                    301 @lit_1059_0 DC AD(pthread_mutex_lock)
00000140 0000000000000000                    302 @lit_1059_1 DC AD(pthread_mutex_unlock)
                                             303          DROP  12
                                             304 *
                                             305 *   DSECT for automatic variables in "rd_atomic32_add"
                                             306 *      (FUNCTION #1059)
                                             307 *
00000000                00000000 000000AC    308 @AUTO#rd_atomic32_add DSECT
00000000                                     309          DS    XL168
000000A8                                     310 rd_atomic32_add#r#0 DS 1F  ; r
                                             311 *
00000148                00000000 00010480    312 @CODE    CSECT
                                             313 *
                                             314 *
                                             315 *
                                             316 * ....... start of rd_atomic32_sub
00000148                                     317 @LNAME1060 DS  0H
00000148 0000000F                            318          DC    X'0000000F'
0000014C 99846D81A3969489                    319          DC    C'rd_atomic32_sub'
0000015B 00                                  320          DC    X'00'
                                             321 rd_atomic32_sub DCCPRLG CINDEX=1060,BASER=12,FRAME=184,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1060
                                             322          macro
                                             323          dccextrn &m
                                             324          gblc    &$dccext(1000)
                                             325          gbla    &$dccexti
                                             326          lcla    &i
                                             327 &$dccext(&$dccexti+1) setc    '&m'
                                             328 &i       seta    1
                                             329 .loop    aif    (&i gt &$dccexti).around
                                             330          aif    ('&$dccext(&i)' eq '&m').getout
                                             331 &i       seta    &i+1
                                             332          ago     .loop
                                             333 .around  anop
                                             334 &$dccexti seta &$dccexti+1
                                             335          extrn  &m
                                             336 .getout  anop
                                             337          mend
00000160                                     338+$eye0005    ds    0d                                                    02-DCCCA
                                                                                                                           Page   15 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000160 C4C3C3                              339+         dc cl3'DCC'                                                    02-DCCCA
00000163 01                                  340+         dc xl1'01' format one                                          02-DCCCA
00000164 00000000                            341+         dc a(0)                                                        02-DCCCA
00000168 00000000000001D2                    342+         dc ad(@PER_1060)                                               02-DCCCA
00000170 00000000000000B8                    343+         dc ad(184)                                                     02-DCCCA
00000178 0000000000000000                    344+         dc ad(0)                                                       02-DCCCA
00000180 0000000000001000                    345+         dc ad(4096)                                                    02-DCCCA
00000188 20                                  346+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000189 03                                  347+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000018A 03                                  348+         dc al1(3)                                                      02-DCCCA
0000018B 08                                  349+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000018C 00                                  350+         dc bl.8'00000000'                                              02-DCCCA
0000018D 000000                              351+         dc al3(0)                                                      02-DCCCA
00000190 0000000000000148                    352+         dc ad(@LNAME1060)                                              02-DCCCA
00000198                                     353+         ds 0d                                                          02-DCCCA
00000198 0000000000000160                    354+         dc ad($eye0005)                                                02-DCCCA
000001A0 0000000000000000                    355+         dc ad(0)                                                       02-DCCCA
000001A8                                     356+         ds    0d                                                       01-DCCPR
000001A8                                     357+rd_atomic32_sub ds 0d                                                   01-DCCPR
000001A8                                     358+@REGION_1060_1 ds 0h                                                    01-DCCPR
000001A8 EBEC D008 0024          00000008    359+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000001AE E3E0 D088 0004          00000088    360+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000001B4 E3C0 D090 0004          00000090    361+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000001BA B904 002E                           362+         lgr   2,14                copy addr of our savearea            01-DCCPR
000001BE E3B0 C018 0004          00000018    363+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000001C4 A7EB 00B8               000000B8    364+         aghi  14,184              increase by frame size               01-DCCPR
000001C8 E3E0 C020 0021          00000020    365+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000001CE 4720 B020               00000020    366+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000001D2                                     367+@PER_1060 ds   0h                                                       01-DCCPR
000001D2 EBDE 2080 0024          00000080    368+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000001D8 E3C0 2090 0024          00000090    369+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000001DE B904 00D2                           370+         lgr   13,2                set real frame pointer               01-DCCPR
000001E2 B904 00CF                           371+         lgr   12,15               set base reg                         01-DCCPR
                        000001A8             372+         using @REGION_1060_1,12                                        01-DCCPR
000001E6 B904 0031                           373          LGR   3,1         ; ptr to parm area
                                             374 * ******* End of Prologue
                                             375 * *
000001EA E320 3000 0004          00000000    376          LG    2,0(0,3)    ; ra
                                             377 * ***
                                             378 * ***      int32_t r;
                                             379 * ***      pthread_mutex_lock(&ra->lock);
000001F0 41F0 2008               00000008    380          LA    15,8(0,2)
000001F4 E3F0 D0B0 0024          000000B0    381          STG   15,176(0,13)
000001FA 4110 D0B0               000000B0    382          LA    1,176(0,13)
000001FE E3F0 C0D8 0004          00000280    383          LG    15,@lit_1060_3 ; pthread_mutex_lock
00000204                                     384 @@gen_label4 DS    0H
00000204 05EF                                385          BALR  14,15
00000206                                     386 @@gen_label5 DS    0H
                                             387 * ***      ra->val -= v;
00000206 58F0 2000               00000000    388          L     15,0(0,2)
0000020A 5BF0 300C               0000000C    389          S     15,12(0,3)
0000020E 50F0 2000               00000000    390          ST    15,0(0,2)
                                                                                                                           Page   16 
  Active Usings: @REGION_1060_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                             391 * ***      r = ra->val;
00000212 183F                                392          LR    3,15        ; ra
                                             393 * ***      pthread_mutex_unlock(&ra->lock);
00000214 41F0 2008               00000008    394          LA    15,8(0,2)
00000218 E3F0 D0B0 0024          000000B0    395          STG   15,176(0,13)
0000021E 4110 D0B0               000000B0    396          LA    1,176(0,13)
00000222 E3F0 C0E0 0004          00000288    397          LG    15,@lit_1060_4 ; pthread_mutex_unlock
00000228                                     398 @@gen_label6 DS    0H
00000228 05EF                                399          BALR  14,15
0000022A                                     400 @@gen_label7 DS    0H
                                             401 * ***      return r;
0000022A B914 00F3                           402          LGFR  15,3
                                             403 * ***   # 128 "C:\asgkafka\librdkafka\src\rdatomic.h"
                                             404 * ***      return __atomic_sub_fetch(&ra->val, v, 6);
                                             405 * ***
                                             406 * ***   }
                                             407 * * **** Start of Epilogue
                                             408          DCCEPIL
0000022E                                     409+         ds 0h                                                          01-DCCEP
                                             410+* Epilog
0000022E D707 D088 D088 00000088 00000088    411+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00000234 E3D0 D080 0004          00000080    412+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000023A E3C0 D090 0004          00000090    413+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000240 E3B0 C018 0004          00000018    414+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000246 E3C0 B010 0021          00000010    415+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000024C E3E0 D008 0004          00000008    416+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000252 EB1C D020 0004          00000020    417+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000258 078E                                418+         bcr 8,14                if same dsab, just return              01-DCCEP
0000025A E3F0 D010 0024          00000010    419+         stg 15,16(0,13)         save return code                       01-DCCEP
00000260 E300 D018 0024          00000018    420+         stg 0,24(0,13)          save more return code                  01-DCCEP
00000266 E3F0 D090 0004          00000090    421+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000026C E3F0 F018 0004          00000018    422+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000272 47F0 F040               00000040    423+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                             424+* End of Epilog
                                             425 * * **** End of Epilogue
00000278                                     426          DS    0D
00000278 000000B8                            427 @FRAMESIZE_1060 DC F'184'
0000027C 00000000
00000280 0000000000000000                    428 @lit_1060_3 DC AD(pthread_mutex_lock)
00000288 0000000000000000                    429 @lit_1060_4 DC AD(pthread_mutex_unlock)
                                             430          DROP  12
                                             431 *
                                             432 *   DSECT for automatic variables in "rd_atomic32_sub"
                                             433 *      (FUNCTION #1060)
                                             434 *
00000000                00000000 000000AC    435 @AUTO#rd_atomic32_sub DSECT
00000000                                     436          DS    XL168
000000A8                                     437 rd_atomic32_sub#r#0 DS 1F  ; r
                                             438 *
00000290                00000000 00010480    439 @CODE    CSECT
                                             440 *
                                             441 *
                                                                                                                           Page   17 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                             442 *
                                             443 * ....... start of rd_atomic32_get
00000290                                     444 @LNAME1061 DS  0H
00000290 0000000F                            445          DC    X'0000000F'
00000294 99846D81A3969489                    446          DC    C'rd_atomic32_get'
000002A3 00                                  447          DC    X'00'
                                             448 rd_atomic32_get DCCPRLG CINDEX=1061,BASER=12,FRAME=184,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1061
                                             449          macro
                                             450          dccextrn &m
                                             451          gblc    &$dccext(1000)
                                             452          gbla    &$dccexti
                                             453          lcla    &i
                                             454 &$dccext(&$dccexti+1) setc    '&m'
                                             455 &i       seta    1
                                             456 .loop    aif    (&i gt &$dccexti).around
                                             457          aif    ('&$dccext(&i)' eq '&m').getout
                                             458 &i       seta    &i+1
                                             459          ago     .loop
                                             460 .around  anop
                                             461 &$dccexti seta &$dccexti+1
                                             462          extrn  &m
                                             463 .getout  anop
                                             464          mend
000002A8                                     465+$eye0008    ds    0d                                                    02-DCCCA
000002A8 C4C3C3                              466+         dc cl3'DCC'                                                    02-DCCCA
000002AB 01                                  467+         dc xl1'01' format one                                          02-DCCCA
000002AC 00000000                            468+         dc a(0)                                                        02-DCCCA
000002B0 000000000000031A                    469+         dc ad(@PER_1061)                                               02-DCCCA
000002B8 00000000000000B8                    470+         dc ad(184)                                                     02-DCCCA
000002C0 0000000000000000                    471+         dc ad(0)                                                       02-DCCCA
000002C8 0000000000001000                    472+         dc ad(4096)                                                    02-DCCCA
000002D0 20                                  473+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000002D1 03                                  474+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000002D2 03                                  475+         dc al1(3)                                                      02-DCCCA
000002D3 08                                  476+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000002D4 00                                  477+         dc bl.8'00000000'                                              02-DCCCA
000002D5 000000                              478+         dc al3(0)                                                      02-DCCCA
000002D8 0000000000000290                    479+         dc ad(@LNAME1061)                                              02-DCCCA
000002E0                                     480+         ds 0d                                                          02-DCCCA
000002E0 00000000000002A8                    481+         dc ad($eye0008)                                                02-DCCCA
000002E8 0000000000000000                    482+         dc ad(0)                                                       02-DCCCA
000002F0                                     483+         ds    0d                                                       01-DCCPR
000002F0                                     484+rd_atomic32_get ds 0d                                                   01-DCCPR
000002F0                                     485+@REGION_1061_1 ds 0h                                                    01-DCCPR
000002F0 EBEC D008 0024          00000008    486+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000002F6 E3E0 D088 0004          00000088    487+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000002FC E3C0 D090 0004          00000090    488+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000302 B904 002E                           489+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000306 E3B0 C018 0004          00000018    490+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000030C A7EB 00B8               000000B8    491+         aghi  14,184              increase by frame size               01-DCCPR
00000310 E3E0 C020 0021          00000020    492+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
                                                                                                                           Page   18 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000316 4720 B020               00000020    493+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000031A                                     494+@PER_1061 ds   0h                                                       01-DCCPR
0000031A EBDE 2080 0024          00000080    495+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000320 E3C0 2090 0024          00000090    496+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000326 B904 00D2                           497+         lgr   13,2                set real frame pointer               01-DCCPR
0000032A B904 00CF                           498+         lgr   12,15               set base reg                         01-DCCPR
                        000002F0             499+         using @REGION_1061_1,12                                        01-DCCPR
                                             500 * ******* End of Prologue
                                             501 * *
0000032E E320 1000 0004          00000000    502          LG    2,0(0,1)    ; ra
                                             503 * ***
                                             504 * ***      int32_t r;
                                             505 * ***      pthread_mutex_lock(&ra->lock);
00000334 41F0 2008               00000008    506          LA    15,8(0,2)
00000338 E3F0 D0B0 0024          000000B0    507          STG   15,176(0,13)
0000033E 4110 D0B0               000000B0    508          LA    1,176(0,13)
00000342 E3F0 C0C8 0004          000003B8    509          LG    15,@lit_1061_6 ; pthread_mutex_lock
00000348                                     510 @@gen_label8 DS    0H
00000348 05EF                                511          BALR  14,15
0000034A                                     512 @@gen_label9 DS    0H
                                             513 * ***      r = ra->val;
0000034A 5830 2000               00000000    514          L     3,0(0,2)    ; ra
                                             515 * ***      pthread_mutex_unlock(&ra->lock);
0000034E 41F0 2008               00000008    516          LA    15,8(0,2)
00000352 E3F0 D0B0 0024          000000B0    517          STG   15,176(0,13)
00000358 4110 D0B0               000000B0    518          LA    1,176(0,13)
0000035C E3F0 C0D0 0004          000003C0    519          LG    15,@lit_1061_7 ; pthread_mutex_unlock
00000362                                     520 @@gen_label10 DS    0H
00000362 05EF                                521          BALR  14,15
00000364                                     522 @@gen_label11 DS    0H
                                             523 * ***      return r;
00000364 B914 00F3                           524          LGFR  15,3
                                             525 * ***   # 157 "C:\asgkafka\librdkafka\src\rdatomic.h"
                                             526 * ***      return __atomic_fetch_add(&ra->val, 0, 6);
                                             527 * ***
                                             528 * ***   }
                                             529 * * **** Start of Epilogue
                                             530          DCCEPIL
00000368                                     531+         ds 0h                                                          01-DCCEP
                                             532+* Epilog
00000368 D707 D088 D088 00000088 00000088    533+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000036E E3D0 D080 0004          00000080    534+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000374 E3C0 D090 0004          00000090    535+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000037A E3B0 C018 0004          00000018    536+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000380 E3C0 B010 0021          00000010    537+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000386 E3E0 D008 0004          00000008    538+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000038C EB1C D020 0004          00000020    539+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000392 078E                                540+         bcr 8,14                if same dsab, just return              01-DCCEP
00000394 E3F0 D010 0024          00000010    541+         stg 15,16(0,13)         save return code                       01-DCCEP
0000039A E300 D018 0024          00000018    542+         stg 0,24(0,13)          save more return code                  01-DCCEP
000003A0 E3F0 D090 0004          00000090    543+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
000003A6 E3F0 F018 0004          00000018    544+         lg  15,24(0,15)         load dvt address                       01-DCCEP
                                                                                                                           Page   19 
  Active Usings: @REGION_1061_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000003AC 47F0 F040               00000040    545+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                             546+* End of Epilog
                                             547 * * **** End of Epilogue
000003B0                                     548          DS    0D
000003B0 000000B8                            549 @FRAMESIZE_1061 DC F'184'
000003B4 00000000
000003B8 0000000000000000                    550 @lit_1061_6 DC AD(pthread_mutex_lock)
000003C0 0000000000000000                    551 @lit_1061_7 DC AD(pthread_mutex_unlock)
                                             552          DROP  12
                                             553 *
                                             554 *   DSECT for automatic variables in "rd_atomic32_get"
                                             555 *      (FUNCTION #1061)
                                             556 *
00000000                00000000 000000AC    557 @AUTO#rd_atomic32_get DSECT
00000000                                     558          DS    XL168
000000A8                                     559 rd_atomic32_get#r#0 DS 1F  ; r
                                             560 *
000003C8                00000000 00010480    561 @CODE    CSECT
                                             562 *
                                             563 *
                                             564 *
                                             565 * ....... start of rd_fd_set_nonblocking
000003C8                                     566 @LNAME1070 DS  0H
000003C8 00000015                            567          DC    X'00000015'
000003CC 99846D86846DA285                    568          DC    C'rd_fd_set_nonblocking'
000003E1 00                                  569          DC    X'00'
                                             570 rd_fd_set_nonblocking DCCPRLG CINDEX=1070,BASER=12,FRAME=200,ENTRY=NO,A*
                                                                RCH=ZARCH,LNAMEADDR=@LNAME1070
                                             571          macro
                                             572          dccextrn &m
                                             573          gblc    &$dccext(1000)
                                             574          gbla    &$dccexti
                                             575          lcla    &i
                                             576 &$dccext(&$dccexti+1) setc    '&m'
                                             577 &i       seta    1
                                             578 .loop    aif    (&i gt &$dccexti).around
                                             579          aif    ('&$dccext(&i)' eq '&m').getout
                                             580 &i       seta    &i+1
                                             581          ago     .loop
                                             582 .around  anop
                                             583 &$dccexti seta &$dccexti+1
                                             584          extrn  &m
                                             585 .getout  anop
                                             586          mend
000003E8                                     587+$eye0011    ds    0d                                                    02-DCCCA
000003E8 C4C3C3                              588+         dc cl3'DCC'                                                    02-DCCCA
000003EB 01                                  589+         dc xl1'01' format one                                          02-DCCCA
000003EC 00000000                            590+         dc a(0)                                                        02-DCCCA
000003F0 000000000000045A                    591+         dc ad(@PER_1070)                                               02-DCCCA
000003F8 00000000000000C8                    592+         dc ad(200)                                                     02-DCCCA
00000400 0000000000000000                    593+         dc ad(0)                                                       02-DCCCA
00000408 0000000000001000                    594+         dc ad(4096)                                                    02-DCCCA
                                                                                                                           Page   20 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000410 20                                  595+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000411 03                                  596+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00000412 03                                  597+         dc al1(3)                                                      02-DCCCA
00000413 08                                  598+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000414 00                                  599+         dc bl.8'00000000'                                              02-DCCCA
00000415 000000                              600+         dc al3(0)                                                      02-DCCCA
00000418 00000000000003C8                    601+         dc ad(@LNAME1070)                                              02-DCCCA
00000420                                     602+         ds 0d                                                          02-DCCCA
00000420 00000000000003E8                    603+         dc ad($eye0011)                                                02-DCCCA
00000428 0000000000000000                    604+         dc ad(0)                                                       02-DCCCA
00000430                                     605+         ds    0d                                                       01-DCCPR
00000430                                     606+rd_fd_set_nonblocking ds 0d                                             01-DCCPR
00000430                                     607+@REGION_1070_1 ds 0h                                                    01-DCCPR
00000430 EBEC D008 0024          00000008    608+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000436 E3E0 D088 0004          00000088    609+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000043C E3C0 D090 0004          00000090    610+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000442 B904 002E                           611+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000446 E3B0 C018 0004          00000018    612+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000044C A7EB 00C8               000000C8    613+         aghi  14,200              increase by frame size               01-DCCPR
00000450 E3E0 C020 0021          00000020    614+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000456 4720 B020               00000020    615+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000045A                                     616+@PER_1070 ds   0h                                                       01-DCCPR
0000045A EBDE 2080 0024          00000080    617+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000460 E3C0 2090 0024          00000090    618+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000466 B904 00D2                           619+         lgr   13,2                set real frame pointer               01-DCCPR
0000046A B904 00CF                           620+         lgr   12,15               set base reg                         01-DCCPR
                        00000430             621+         using @REGION_1070_1,12                                        01-DCCPR
0000046E B904 0021                           622          LGR   2,1         ; ptr to parm area
                                             623 * ******* End of Prologue
                                             624 * *
                                             625 * ***           int fl = fcntl(fd, 3, 0);
00000472 E3F0 2004 0014          00000004    626          LGF   15,4(0,2)   ; fd
00000478 E3F0 D0B0 0024          000000B0    627          STG   15,176(0,13)
0000047E E548 D0B8 0003          000000B8    628          MVGHI 184(13),3
00000484 D707 D0C0 D0C0 000000C0 000000C0    629          XC    192(8,13),192(13)
0000048A 4110 D0B0               000000B0    630          LA    1,176(0,13)
0000048E E330 C0C0 0004          000004F0    631          LG    3,@lit_1070_9 ; fcntl
00000494 B904 00F3                           632          LGR   15,3
00000498                                     633 @@gen_label12 DS    0H
00000498 05EF                                634          BALR  14,15
0000049A                                     635 @@gen_label13 DS    0H
                                             636 * ***           if (fl == -1 ||
0000049A A7FE FFFF               0000FFFF    637          CHI   15,-1
0000049E 4780 C0A4               000004D4    638          BE    @L27
                                             639 * ***               fcntl(fd, 4, fl | 0x0004) == -1)
000004A2 E310 2004 0014          00000004    640          LGF   1,4(0,2)    ; fd
000004A8 E310 D0B0 0024          000000B0    641          STG   1,176(0,13)
000004AE E548 D0B8 0004          000000B8    642          MVGHI 184(13),4
000004B4 A5FB 0004               00000004    643          OILL  15,4
000004B8 B914 00FF                           644          LGFR  15,15
000004BC E3F0 D0C0 0024          000000C0    645          STG   15,192(0,13)
000004C2 4110 D0B0               000000B0    646          LA    1,176(0,13)
                                                                                                                           Page   21 
  Active Usings: @REGION_1070_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000004C6 B904 00F3                           647          LGR   15,3
000004CA                                     648 @@gen_label15 DS    0H
000004CA 05EF                                649          BALR  14,15
000004CC                                     650 @@gen_label16 DS    0H
000004CC A7FE FFFF               0000FFFF    651          CHI   15,-1
000004D0 4770 C0D0               00000500    652          BNE   @L26
000004D4                                     653 @L27     DS    0H
                                             654 * ***                   return (* __error());
000004D4 E3F0 C0C8 0004          000004F8    655          LG    15,@lit_1070_11 ; __error
000004DA                                     656 @@gen_label18 DS    0H
000004DA 05EF                                657          BALR  14,15
000004DC                                     658 @@gen_label19 DS    0H
000004DC E3F0 F000 0014          00000000    659          LGF   15,0(0,15)
000004E2 47F0 C0D4               00000504    660          B     @ret_lab_1070
000004E8                                     661          DS    0D
000004E8 000000C8                            662 @FRAMESIZE_1070 DC F'200'
000004EC 00000000
000004F0 0000000000000000                    663 @lit_1070_9 DC AD(fcntl)
000004F8 0000000000000000                    664 @lit_1070_11 DC AD(__error)
00000500                                     665 @L26     DS    0H
                                             666 * ***           return 0;
00000500 A7F9 0000               00000000    667          LGHI  15,0        ; 0
                                             668 * ***   }
00000504                                     669 @ret_lab_1070 DS 0H
                                             670 * * **** Start of Epilogue
                                             671          DCCEPIL
00000504                                     672+         ds 0h                                                          01-DCCEP
                                             673+* Epilog
00000504 D707 D088 D088 00000088 00000088    674+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000050A E3D0 D080 0004          00000080    675+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000510 E3C0 D090 0004          00000090    676+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000516 E3B0 C018 0004          00000018    677+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000051C E3C0 B010 0021          00000010    678+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000522 E3E0 D008 0004          00000008    679+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000528 EB1C D020 0004          00000020    680+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000052E 078E                                681+         bcr 8,14                if same dsab, just return              01-DCCEP
00000530 E3F0 D010 0024          00000010    682+         stg 15,16(0,13)         save return code                       01-DCCEP
00000536 E300 D018 0024          00000018    683+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000053C E3F0 D090 0004          00000090    684+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00000542 E3F0 F018 0004          00000018    685+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000548 47F0 F040               00000040    686+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                             687+* End of Epilog
                                             688 * * **** End of Epilogue
                                             689          DROP  12
                                             690 *
                                             691 *   DSECT for automatic variables in "rd_fd_set_nonblocking"
                                             692 *      (FUNCTION #1070)
                                             693 *
00000000                00000000 000000AC    694 @AUTO#rd_fd_set_nonblocking DSECT
00000000                                     695          DS    XL168
000000A8                                     696 rd_fd_set_nonblocking#fl#0 DS 1F ; fl
                                             697 *
                                                                                                                           Page   22 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000054C                00000000 00010480    698 @CODE    CSECT
                                             699 *
                                             700 *
                                             701 *
                                             702 * ....... start of rd_pipe_nonblocking
0000054C                                     703 @LNAME1071 DS  0H
0000054C 00000013                            704          DC    X'00000013'
00000550 99846D978997856D                    705          DC    C'rd_pipe_nonblocking'
00000563 00                                  706          DC    X'00'
                                             707 rd_pipe_nonblocking DCCPRLG CINDEX=1071,BASER=12,FRAME=176,ENTRY=NO,ARC*
                                                                H=ZARCH,LNAMEADDR=@LNAME1071
                                             708          macro
                                             709          dccextrn &m
                                             710          gblc    &$dccext(1000)
                                             711          gbla    &$dccexti
                                             712          lcla    &i
                                             713 &$dccext(&$dccexti+1) setc    '&m'
                                             714 &i       seta    1
                                             715 .loop    aif    (&i gt &$dccexti).around
                                             716          aif    ('&$dccext(&i)' eq '&m').getout
                                             717 &i       seta    &i+1
                                             718          ago     .loop
                                             719 .around  anop
                                             720 &$dccexti seta &$dccexti+1
                                             721          extrn  &m
                                             722 .getout  anop
                                             723          mend
00000568                                     724+$eye0014    ds    0d                                                    02-DCCCA
00000568 C4C3C3                              725+         dc cl3'DCC'                                                    02-DCCCA
0000056B 01                                  726+         dc xl1'01' format one                                          02-DCCCA
0000056C 00000000                            727+         dc a(0)                                                        02-DCCCA
00000570 00000000000005DA                    728+         dc ad(@PER_1071)                                               02-DCCCA
00000578 00000000000000B0                    729+         dc ad(176)                                                     02-DCCCA
00000580 0000000000000000                    730+         dc ad(0)                                                       02-DCCCA
00000588 0000000000001000                    731+         dc ad(4096)                                                    02-DCCCA
00000590 20                                  732+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000591 03                                  733+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00000592 03                                  734+         dc al1(3)                                                      02-DCCCA
00000593 08                                  735+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000594 00                                  736+         dc bl.8'00000000'                                              02-DCCCA
00000595 000000                              737+         dc al3(0)                                                      02-DCCCA
00000598 000000000000054C                    738+         dc ad(@LNAME1071)                                              02-DCCCA
000005A0                                     739+         ds 0d                                                          02-DCCCA
000005A0 0000000000000568                    740+         dc ad($eye0014)                                                02-DCCCA
000005A8 0000000000000000                    741+         dc ad(0)                                                       02-DCCCA
000005B0                                     742+         ds    0d                                                       01-DCCPR
000005B0                                     743+rd_pipe_nonblocking ds 0d                                               01-DCCPR
000005B0                                     744+@REGION_1071_1 ds 0h                                                    01-DCCPR
000005B0 EBEC D008 0024          00000008    745+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000005B6 E3E0 D088 0004          00000088    746+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000005BC E3C0 D090 0004          00000090    747+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000005C2 B904 002E                           748+         lgr   2,14                copy addr of our savearea            01-DCCPR
                                                                                                                           Page   23 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000005C6 E3B0 C018 0004          00000018    749+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000005CC A7EB 00B0               000000B0    750+         aghi  14,176              increase by frame size               01-DCCPR
000005D0 E3E0 C020 0021          00000020    751+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000005D6 4720 B020               00000020    752+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000005DA                                     753+@PER_1071 ds   0h                                                       01-DCCPR
000005DA EBDE 2080 0024          00000080    754+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000005E0 E3C0 2090 0024          00000090    755+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000005E6 B904 00D2                           756+         lgr   13,2                set real frame pointer               01-DCCPR
000005EA B904 00CF                           757+         lgr   12,15               set base reg                         01-DCCPR
                        000005B0             758+         using @REGION_1071_1,12                                        01-DCCPR
                                             759 * ******* End of Prologue
                                             760 * *
                                             761 * ***           if (pipe(fds) == -1 ||
000005EE E320 1000 0004          00000000    762          LG    2,0(0,1)    ; fds
000005F4 E320 D0A8 0024          000000A8    763          STG   2,168(0,13)
000005FA 4110 D0A8               000000A8    764          LA    1,168(0,13)
000005FE E3F0 C0B8 0004          00000668    765          LG    15,@lit_1071_14 ; pipe
00000604                                     766 @@gen_label20 DS    0H
00000604 05EF                                767          BALR  14,15
00000606                                     768 @@gen_label21 DS    0H
00000606 A7FE FFFF               0000FFFF    769          CHI   15,-1
0000060A 4780 C09E               0000064E    770          BE    @L30
                                             771 * ***               rd_fd_set_nonblocking(fds[0]) == -1 ||
0000060E E3F0 2000 0014          00000000    772          LGF   15,0(0,2)
00000614 E3F0 D0A8 0024          000000A8    773          STG   15,168(0,13)
0000061A 4110 D0A8               000000A8    774          LA    1,168(0,13)
0000061E E330 C0C0 0004          00000670    775          LG    3,@lit_1071_15 ; rd_fd_set_nonblocking
00000624 B904 00F3                           776          LGR   15,3
00000628                                     777 @@gen_label23 DS    0H
00000628 05EF                                778          BALR  14,15
0000062A                                     779 @@gen_label24 DS    0H
0000062A A7FE FFFF               0000FFFF    780          CHI   15,-1
0000062E 4780 C09E               0000064E    781          BE    @L30
00000632                                     782 @L28     DS    0H
                                             783 * ***               rd_fd_set_nonblocking(fds[1]))
00000632 E3F0 2004 0014          00000004    784          LGF   15,4(0,2)
00000638 E3F0 D0A8 0024          000000A8    785          STG   15,168(0,13)
0000063E 4110 D0A8               000000A8    786          LA    1,168(0,13)
00000642 B904 00F3                           787          LGR   15,3
00000646                                     788 @@gen_label26 DS    0H
00000646 05EF                                789          BALR  14,15
00000648                                     790 @@gen_label27 DS    0H
00000648 12FF                                791          LTR   15,15
0000064A 4780 C0D0               00000680    792          BZ    @L29
0000064E                                     793 @L30     DS    0H
                                             794 * ***                   return (* __error());
0000064E E3F0 C0C8 0004          00000678    795          LG    15,@lit_1071_17 ; __error
00000654                                     796 @@gen_label29 DS    0H
00000654 05EF                                797          BALR  14,15
00000656                                     798 @@gen_label30 DS    0H
00000656 E3F0 F000 0014          00000000    799          LGF   15,0(0,15)
0000065C 47F0 C0D4               00000684    800          B     @ret_lab_1071
                                                                                                                           Page   24 
  Active Usings: @REGION_1071_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000660                                     801          DS    0D
00000660 000000B0                            802 @FRAMESIZE_1071 DC F'176'
00000664 00000000
00000668 0000000000000000                    803 @lit_1071_14 DC AD(pipe)
00000670 0000000000000430                    804 @lit_1071_15 DC AD(rd_fd_set_nonblocking)
00000678 0000000000000000                    805 @lit_1071_17 DC AD(__error)
00000680                                     806 @L29     DS    0H
                                             807 * ***
                                             808 * ***
                                             809 * ***   # 255 "C:\asgkafka\librdkafka\src\rdposix.h"
                                             810 * ***           return 0;
00000680 A7F9 0000               00000000    811          LGHI  15,0        ; 0
                                             812 * ***   }
00000684                                     813 @ret_lab_1071 DS 0H
                                             814 * * **** Start of Epilogue
                                             815          DCCEPIL
00000684                                     816+         ds 0h                                                          01-DCCEP
                                             817+* Epilog
00000684 D707 D088 D088 00000088 00000088    818+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000068A E3D0 D080 0004          00000080    819+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000690 E3C0 D090 0004          00000090    820+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000696 E3B0 C018 0004          00000018    821+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000069C E3C0 B010 0021          00000010    822+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
000006A2 E3E0 D008 0004          00000008    823+         lg  14,8(0,13)          load up return address                 01-DCCEP
000006A8 EB1C D020 0004          00000020    824+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000006AE 078E                                825+         bcr 8,14                if same dsab, just return              01-DCCEP
000006B0 E3F0 D010 0024          00000010    826+         stg 15,16(0,13)         save return code                       01-DCCEP
000006B6 E300 D018 0024          00000018    827+         stg 0,24(0,13)          save more return code                  01-DCCEP
000006BC E3F0 D090 0004          00000090    828+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
000006C2 E3F0 F018 0004          00000018    829+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000006C8 47F0 F040               00000040    830+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                             831+* End of Epilog
                                             832 * * **** End of Epilogue
                                             833          DROP  12
                                             834 *
                                             835 *   DSECT for automatic variables in "rd_pipe_nonblocking"
                                             836 *      (FUNCTION #1071)
                                             837 *
00000000                00000000 000000A8    838 @AUTO#rd_pipe_nonblocking DSECT
00000000                                     839          DS    XL168
                                             840 *
000006CC                00000000 00010480    841 @CODE    CSECT
                                             842 *
                                             843 *
                                             844 *
                                             845 * ....... start of rd_calloc
000006CC                                     846 @LNAME1077 DS  0H
000006CC 00000009                            847          DC    X'00000009'
000006D0 99846D8381939396                    848          DC    C'rd_calloc'
000006D9 00                                  849          DC    X'00'
                                             850 rd_calloc DCCPRLG CINDEX=1077,BASER=12,FRAME=208,ENTRY=NO,ARCH=ZARCH,LN*
                                                                AMEADDR=@LNAME1077
                                                                                                                           Page   25 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                             851          macro
                                             852          dccextrn &m
                                             853          gblc    &$dccext(1000)
                                             854          gbla    &$dccexti
                                             855          lcla    &i
                                             856 &$dccext(&$dccexti+1) setc    '&m'
                                             857 &i       seta    1
                                             858 .loop    aif    (&i gt &$dccexti).around
                                             859          aif    ('&$dccext(&i)' eq '&m').getout
                                             860 &i       seta    &i+1
                                             861          ago     .loop
                                             862 .around  anop
                                             863 &$dccexti seta &$dccexti+1
                                             864          extrn  &m
                                             865 .getout  anop
                                             866          mend
000006E0                                     867+$eye0017    ds    0d                                                    02-DCCCA
000006E0 C4C3C3                              868+         dc cl3'DCC'                                                    02-DCCCA
000006E3 01                                  869+         dc xl1'01' format one                                          02-DCCCA
000006E4 00000000                            870+         dc a(0)                                                        02-DCCCA
000006E8 0000000000000752                    871+         dc ad(@PER_1077)                                               02-DCCCA
000006F0 00000000000000D0                    872+         dc ad(208)                                                     02-DCCCA
000006F8 0000000000000000                    873+         dc ad(0)                                                       02-DCCCA
00000700 0000000000001000                    874+         dc ad(4096)                                                    02-DCCCA
00000708 20                                  875+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000709 03                                  876+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000070A 03                                  877+         dc al1(3)                                                      02-DCCCA
0000070B 08                                  878+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000070C 00                                  879+         dc bl.8'00000000'                                              02-DCCCA
0000070D 000000                              880+         dc al3(0)                                                      02-DCCCA
00000710 00000000000006CC                    881+         dc ad(@LNAME1077)                                              02-DCCCA
00000718                                     882+         ds 0d                                                          02-DCCCA
00000718 00000000000006E0                    883+         dc ad($eye0017)                                                02-DCCCA
00000720 0000000000000000                    884+         dc ad(0)                                                       02-DCCCA
00000728                                     885+         ds    0d                                                       01-DCCPR
00000728                                     886+rd_calloc ds   0d                                                       01-DCCPR
00000728                                     887+@REGION_1077_1 ds 0h                                                    01-DCCPR
00000728 EBEC D008 0024          00000008    888+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000072E E3E0 D088 0004          00000088    889+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00000734 E3C0 D090 0004          00000090    890+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000073A B904 002E                           891+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000073E E3B0 C018 0004          00000018    892+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00000744 A7EB 00D0               000000D0    893+         aghi  14,208              increase by frame size               01-DCCPR
00000748 E3E0 C020 0021          00000020    894+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000074E 4720 B020               00000020    895+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00000752                                     896+@PER_1077 ds   0h                                                       01-DCCPR
00000752 EBDE 2080 0024          00000080    897+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000758 E3C0 2090 0024          00000090    898+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000075E B904 00D2                           899+         lgr   13,2                set real frame pointer               01-DCCPR
00000762 B904 00CF                           900+         lgr   12,15               set base reg                         01-DCCPR
                        00000728             901+         using @REGION_1077_1,12                                        01-DCCPR
                                             902 * ******* End of Prologue
                                                                                                                           Page   26 
  Active Usings: @REGION_1077_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                             903 * *
                                             904 * ***      void *p = calloc(num, sz);
00000766 E3F0 1000 0004          00000000    905          LG    15,0(0,1)   ; num
0000076C E3F0 D0B0 0024          000000B0    906          STG   15,176(0,13)
00000772 E3F0 1008 0004          00000008    907          LG    15,8(0,1)   ; sz
00000778 E3F0 D0B8 0024          000000B8    908          STG   15,184(0,13)
0000077E 4110 D0B0               000000B0    909          LA    1,176(0,13)
00000782 E3F0 C0F8 0004          00000820    910          LG    15,@lit_1077_20 ; calloc
00000788                                     911 @@gen_label31 DS    0H
00000788 05EF                                912          BALR  14,15
0000078A                                     913 @@gen_label32 DS    0H
0000078A B904 002F                           914          LGR   2,15
                                             915 * ***      ((p) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkaf\
                                             916 * ka\\src\\rd.h", 122, "p"));
0000078E B902 00F2                           917          LTGR  15,2
00000792 4770 C0A2               000007CA    918          BNZ   @L32
00000796                                     919 @L31     DS    0H
00000796 E3F0 C110 0004          00000838    920          LG    15,@lit_1077_21
0000079C E3F0 D0B0 0024          000000B0    921          STG   15,176(0,13)
000007A2 E3F0 C108 0004          00000830    922          LG    15,@lit_1077_22
000007A8 E3F0 D0B8 0024          000000B8    923          STG   15,184(0,13)
000007AE E548 D0C0 007A          000000C0    924          MVGHI 192(13),122
000007B4 41F0 F020               00000020    925          LA    15,32(0,15)
000007B8 E3F0 D0C8 0024          000000C8    926          STG   15,200(0,13)
000007BE 4110 D0B0               000000B0    927          LA    1,176(0,13)
000007C2 E3F0 C100 0004          00000828    928          LG    15,@lit_1077_23 ; __assert
000007C8                                     929 @@gen_label34 DS    0H
000007C8 05EF                                930          BALR  14,15
000007CA                                     931 @@gen_label35 DS    0H
000007CA                                     932 @L32     DS    0H
                                             933 * ***      return p;
000007CA B904 00F2                           934          LGR   15,2
                                             935 * ***   }
                                             936 * * **** Start of Epilogue
                                             937          DCCEPIL
000007CE                                     938+         ds 0h                                                          01-DCCEP
                                             939+* Epilog
000007CE D707 D088 D088 00000088 00000088    940+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
000007D4 E3D0 D080 0004          00000080    941+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000007DA E3C0 D090 0004          00000090    942+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000007E0 E3B0 C018 0004          00000018    943+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
000007E6 E3C0 B010 0021          00000010    944+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
000007EC E3E0 D008 0004          00000008    945+         lg  14,8(0,13)          load up return address                 01-DCCEP
000007F2 EB1C D020 0004          00000020    946+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000007F8 078E                                947+         bcr 8,14                if same dsab, just return              01-DCCEP
000007FA E3F0 D010 0024          00000010    948+         stg 15,16(0,13)         save return code                       01-DCCEP
00000800 E300 D018 0024          00000018    949+         stg 0,24(0,13)          save more return code                  01-DCCEP
00000806 E3F0 D090 0004          00000090    950+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000080C E3F0 F018 0004          00000018    951+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000812 47F0 F040               00000040    952+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                             953+* End of Epilog
                                             954 * * **** End of Epilogue
                                                                                                                           Page   27 
  Active Usings: @REGION_1077_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000818                                     955          DS    0D
00000818 000000D0                            956 @FRAMESIZE_1077 DC F'208'
0000081C 00000000
00000820 0000000000000000                    957 @lit_1077_20 DC AD(calloc)
00000828 0000000000000000                    958 @lit_1077_23 DC AD(__assert)
00000830 0000000000010840                    959 @lit_1077_22 DC AD(@strings@)
00000838 0000000000010480                    960 @lit_1077_21 DC AD(@DATA)
                                             961          DROP  12
                                             962 *
                                             963 *   DSECT for automatic variables in "rd_calloc"
                                             964 *      (FUNCTION #1077)
                                             965 *
00000000                00000000 000000A8    966 @AUTO#rd_calloc DSECT
00000000                                     967          DS    XL168
                                             968 *
00000840                00000000 00010480    969 @CODE    CSECT
                                             970 *
                                             971 *
                                             972 *
                                             973 * ....... start of rd_malloc
00000840                                     974 @LNAME1078 DS  0H
00000840 00000009                            975          DC    X'00000009'
00000844 99846D9481939396                    976          DC    C'rd_malloc'
0000084D 00                                  977          DC    X'00'
                                             978 rd_malloc DCCPRLG CINDEX=1078,BASER=12,FRAME=208,ENTRY=NO,ARCH=ZARCH,LN*
                                                                AMEADDR=@LNAME1078
                                             979          macro
                                             980          dccextrn &m
                                             981          gblc    &$dccext(1000)
                                             982          gbla    &$dccexti
                                             983          lcla    &i
                                             984 &$dccext(&$dccexti+1) setc    '&m'
                                             985 &i       seta    1
                                             986 .loop    aif    (&i gt &$dccexti).around
                                             987          aif    ('&$dccext(&i)' eq '&m').getout
                                             988 &i       seta    &i+1
                                             989          ago     .loop
                                             990 .around  anop
                                             991 &$dccexti seta &$dccexti+1
                                             992          extrn  &m
                                             993 .getout  anop
                                             994          mend
00000850                                     995+$eye0020    ds    0d                                                    02-DCCCA
00000850 C4C3C3                              996+         dc cl3'DCC'                                                    02-DCCCA
00000853 01                                  997+         dc xl1'01' format one                                          02-DCCCA
00000854 00000000                            998+         dc a(0)                                                        02-DCCCA
00000858 00000000000008C2                    999+         dc ad(@PER_1078)                                               02-DCCCA
00000860 00000000000000D0                   1000+         dc ad(208)                                                     02-DCCCA
00000868 0000000000000000                   1001+         dc ad(0)                                                       02-DCCCA
00000870 0000000000001000                   1002+         dc ad(4096)                                                    02-DCCCA
00000878 20                                 1003+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000879 03                                 1004+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
                                                                                                                           Page   28 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000087A 03                                 1005+         dc al1(3)                                                      02-DCCCA
0000087B 08                                 1006+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000087C 00                                 1007+         dc bl.8'00000000'                                              02-DCCCA
0000087D 000000                             1008+         dc al3(0)                                                      02-DCCCA
00000880 0000000000000840                   1009+         dc ad(@LNAME1078)                                              02-DCCCA
00000888                                    1010+         ds 0d                                                          02-DCCCA
00000888 0000000000000850                   1011+         dc ad($eye0020)                                                02-DCCCA
00000890 0000000000000000                   1012+         dc ad(0)                                                       02-DCCCA
00000898                                    1013+         ds    0d                                                       01-DCCPR
00000898                                    1014+rd_malloc ds   0d                                                       01-DCCPR
00000898                                    1015+@REGION_1078_1 ds 0h                                                    01-DCCPR
00000898 EBEC D008 0024          00000008   1016+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000089E E3E0 D088 0004          00000088   1017+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000008A4 E3C0 D090 0004          00000090   1018+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000008AA B904 002E                          1019+         lgr   2,14                copy addr of our savearea            01-DCCPR
000008AE E3B0 C018 0004          00000018   1020+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000008B4 A7EB 00D0               000000D0   1021+         aghi  14,208              increase by frame size               01-DCCPR
000008B8 E3E0 C020 0021          00000020   1022+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000008BE 4720 B020               00000020   1023+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000008C2                                    1024+@PER_1078 ds   0h                                                       01-DCCPR
000008C2 EBDE 2080 0024          00000080   1025+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000008C8 E3C0 2090 0024          00000090   1026+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000008CE B904 00D2                          1027+         lgr   13,2                set real frame pointer               01-DCCPR
000008D2 B904 00CF                          1028+         lgr   12,15               set base reg                         01-DCCPR
                        00000898            1029+         using @REGION_1078_1,12                                        01-DCCPR
                                            1030 * ******* End of Prologue
                                            1031 * *
                                            1032 * ***      void *p = malloc(sz);
000008D6 E3F0 1000 0004          00000000   1033          LG    15,0(0,1)   ; sz
000008DC E3F0 D0B0 0024          000000B0   1034          STG   15,176(0,13)
000008E2 4110 D0B0               000000B0   1035          LA    1,176(0,13)
000008E6 E3F0 C0F0 0004          00000988   1036          LG    15,@lit_1078_25 ; malloc
000008EC                                    1037 @@gen_label36 DS    0H
000008EC 05EF                               1038          BALR  14,15
000008EE                                    1039 @@gen_label37 DS    0H
000008EE B904 002F                          1040          LGR   2,15
                                            1041 * ***      ((p) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkaf\
                                            1042 * ka\\src\\rd.h", 128, "p"));
000008F2 B902 00F2                          1043          LTGR  15,2
000008F6 4770 C09A               00000932   1044          BNZ   @L34
000008FA                                    1045 @L33     DS    0H
000008FA E3F0 C108 0004          000009A0   1046          LG    15,@lit_1078_26
00000900 41F0 F00A               0000000A   1047          LA    15,10(0,15)
00000904 E3F0 D0B0 0024          000000B0   1048          STG   15,176(0,13)
0000090A E3F0 C100 0004          00000998   1049          LG    15,@lit_1078_27
00000910 E3F0 D0B8 0024          000000B8   1050          STG   15,184(0,13)
00000916 E548 D0C0 0080          000000C0   1051          MVGHI 192(13),128
0000091C 41F0 F020               00000020   1052          LA    15,32(0,15)
00000920 E3F0 D0C8 0024          000000C8   1053          STG   15,200(0,13)
00000926 4110 D0B0               000000B0   1054          LA    1,176(0,13)
0000092A E3F0 C0F8 0004          00000990   1055          LG    15,@lit_1078_28 ; __assert
00000930                                    1056 @@gen_label39 DS    0H
                                                                                                                           Page   29 
  Active Usings: @REGION_1078_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000930 05EF                               1057          BALR  14,15
00000932                                    1058 @@gen_label40 DS    0H
00000932                                    1059 @L34     DS    0H
                                            1060 * ***      return p;
00000932 B904 00F2                          1061          LGR   15,2
                                            1062 * ***   }
                                            1063 * * **** Start of Epilogue
                                            1064          DCCEPIL
00000936                                    1065+         ds 0h                                                          01-DCCEP
                                            1066+* Epilog
00000936 D707 D088 D088 00000088 00000088   1067+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000093C E3D0 D080 0004          00000080   1068+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000942 E3C0 D090 0004          00000090   1069+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000948 E3B0 C018 0004          00000018   1070+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000094E E3C0 B010 0021          00000010   1071+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000954 E3E0 D008 0004          00000008   1072+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000095A EB1C D020 0004          00000020   1073+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000960 078E                               1074+         bcr 8,14                if same dsab, just return              01-DCCEP
00000962 E3F0 D010 0024          00000010   1075+         stg 15,16(0,13)         save return code                       01-DCCEP
00000968 E300 D018 0024          00000018   1076+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000096E E3F0 D090 0004          00000090   1077+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00000974 E3F0 F018 0004          00000018   1078+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000097A 47F0 F040               00000040   1079+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            1080+* End of Epilog
                                            1081 * * **** End of Epilogue
00000980                                    1082          DS    0D
00000980 000000D0                           1083 @FRAMESIZE_1078 DC F'208'
00000984 00000000
00000988 0000000000000000                   1084 @lit_1078_25 DC AD(malloc)
00000990 0000000000000000                   1085 @lit_1078_28 DC AD(__assert)
00000998 0000000000010840                   1086 @lit_1078_27 DC AD(@strings@)
000009A0 0000000000010480                   1087 @lit_1078_26 DC AD(@DATA)
                                            1088          DROP  12
                                            1089 *
                                            1090 *   DSECT for automatic variables in "rd_malloc"
                                            1091 *      (FUNCTION #1078)
                                            1092 *
00000000                00000000 000000A8   1093 @AUTO#rd_malloc DSECT
00000000                                    1094          DS    XL168
                                            1095 *
000009A8                00000000 00010480   1096 @CODE    CSECT
                                            1097 *
                                            1098 *
                                            1099 *
                                            1100 * ....... start of rd_realloc
000009A8                                    1101 @LNAME1079 DS  0H
000009A8 0000000A                           1102          DC    X'0000000A'
000009AC 99846D9985819393                   1103          DC    C'rd_realloc'
000009B6 00                                 1104          DC    X'00'
                                            1105 rd_realloc DCCPRLG CINDEX=1079,BASER=12,FRAME=208,ENTRY=NO,ARCH=ZARCH,L*
                                                                NAMEADDR=@LNAME1079
                                            1106          macro
                                                                                                                           Page   30 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1107          dccextrn &m
                                            1108          gblc    &$dccext(1000)
                                            1109          gbla    &$dccexti
                                            1110          lcla    &i
                                            1111 &$dccext(&$dccexti+1) setc    '&m'
                                            1112 &i       seta    1
                                            1113 .loop    aif    (&i gt &$dccexti).around
                                            1114          aif    ('&$dccext(&i)' eq '&m').getout
                                            1115 &i       seta    &i+1
                                            1116          ago     .loop
                                            1117 .around  anop
                                            1118 &$dccexti seta &$dccexti+1
                                            1119          extrn  &m
                                            1120 .getout  anop
                                            1121          mend
000009B8                                    1122+$eye0023    ds    0d                                                    02-DCCCA
000009B8 C4C3C3                             1123+         dc cl3'DCC'                                                    02-DCCCA
000009BB 01                                 1124+         dc xl1'01' format one                                          02-DCCCA
000009BC 00000000                           1125+         dc a(0)                                                        02-DCCCA
000009C0 0000000000000A2A                   1126+         dc ad(@PER_1079)                                               02-DCCCA
000009C8 00000000000000D0                   1127+         dc ad(208)                                                     02-DCCCA
000009D0 0000000000000000                   1128+         dc ad(0)                                                       02-DCCCA
000009D8 0000000000001000                   1129+         dc ad(4096)                                                    02-DCCCA
000009E0 20                                 1130+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000009E1 03                                 1131+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000009E2 03                                 1132+         dc al1(3)                                                      02-DCCCA
000009E3 08                                 1133+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000009E4 00                                 1134+         dc bl.8'00000000'                                              02-DCCCA
000009E5 000000                             1135+         dc al3(0)                                                      02-DCCCA
000009E8 00000000000009A8                   1136+         dc ad(@LNAME1079)                                              02-DCCCA
000009F0                                    1137+         ds 0d                                                          02-DCCCA
000009F0 00000000000009B8                   1138+         dc ad($eye0023)                                                02-DCCCA
000009F8 0000000000000000                   1139+         dc ad(0)                                                       02-DCCCA
00000A00                                    1140+         ds    0d                                                       01-DCCPR
00000A00                                    1141+rd_realloc ds  0d                                                       01-DCCPR
00000A00                                    1142+@REGION_1079_1 ds 0h                                                    01-DCCPR
00000A00 EBEC D008 0024          00000008   1143+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000A06 E3E0 D088 0004          00000088   1144+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00000A0C E3C0 D090 0004          00000090   1145+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000A12 B904 002E                          1146+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000A16 E3B0 C018 0004          00000018   1147+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00000A1C A7EB 00D0               000000D0   1148+         aghi  14,208              increase by frame size               01-DCCPR
00000A20 E3E0 C020 0021          00000020   1149+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000A26 4720 B020               00000020   1150+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00000A2A                                    1151+@PER_1079 ds   0h                                                       01-DCCPR
00000A2A EBDE 2080 0024          00000080   1152+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000A30 E3C0 2090 0024          00000090   1153+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000A36 B904 00D2                          1154+         lgr   13,2                set real frame pointer               01-DCCPR
00000A3A B904 00CF                          1155+         lgr   12,15               set base reg                         01-DCCPR
                        00000A00            1156+         using @REGION_1079_1,12                                        01-DCCPR
                                            1157 * ******* End of Prologue
                                            1158 * *
                                                                                                                           Page   31 
  Active Usings: @REGION_1079_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1159 * ***      void *p = realloc(ptr, sz);
00000A3E E3F0 1000 0004          00000000   1160          LG    15,0(0,1)   ; ptr
00000A44 E3F0 D0B0 0024          000000B0   1161          STG   15,176(0,13)
00000A4A E3F0 1008 0004          00000008   1162          LG    15,8(0,1)   ; sz
00000A50 E3F0 D0B8 0024          000000B8   1163          STG   15,184(0,13)
00000A56 4110 D0B0               000000B0   1164          LA    1,176(0,13)
00000A5A E3F0 C100 0004          00000B00   1165          LG    15,@lit_1079_30 ; realloc
00000A60                                    1166 @@gen_label41 DS    0H
00000A60 05EF                               1167          BALR  14,15
00000A62                                    1168 @@gen_label42 DS    0H
00000A62 B904 002F                          1169          LGR   2,15
                                            1170 * ***      ((p) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkaf\
                                            1171 * ka\\src\\rd.h", 134, "p"));
00000A66 B902 00F2                          1172          LTGR  15,2
00000A6A 4770 C0A6               00000AA6   1173          BNZ   @L36
00000A6E                                    1174 @L35     DS    0H
00000A6E E3F0 C118 0004          00000B18   1175          LG    15,@lit_1079_31
00000A74 41F0 F014               00000014   1176          LA    15,20(0,15)
00000A78 E3F0 D0B0 0024          000000B0   1177          STG   15,176(0,13)
00000A7E E3F0 C110 0004          00000B10   1178          LG    15,@lit_1079_32
00000A84 E3F0 D0B8 0024          000000B8   1179          STG   15,184(0,13)
00000A8A E548 D0C0 0086          000000C0   1180          MVGHI 192(13),134
00000A90 41F0 F020               00000020   1181          LA    15,32(0,15)
00000A94 E3F0 D0C8 0024          000000C8   1182          STG   15,200(0,13)
00000A9A 4110 D0B0               000000B0   1183          LA    1,176(0,13)
00000A9E E3F0 C108 0004          00000B08   1184          LG    15,@lit_1079_33 ; __assert
00000AA4                                    1185 @@gen_label44 DS    0H
00000AA4 05EF                               1186          BALR  14,15
00000AA6                                    1187 @@gen_label45 DS    0H
00000AA6                                    1188 @L36     DS    0H
                                            1189 * ***      return p;
00000AA6 B904 00F2                          1190          LGR   15,2
                                            1191 * ***   }
                                            1192 * * **** Start of Epilogue
                                            1193          DCCEPIL
00000AAA                                    1194+         ds 0h                                                          01-DCCEP
                                            1195+* Epilog
00000AAA D707 D088 D088 00000088 00000088   1196+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00000AB0 E3D0 D080 0004          00000080   1197+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000AB6 E3C0 D090 0004          00000090   1198+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000ABC E3B0 C018 0004          00000018   1199+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000AC2 E3C0 B010 0021          00000010   1200+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000AC8 E3E0 D008 0004          00000008   1201+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000ACE EB1C D020 0004          00000020   1202+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000AD4 078E                               1203+         bcr 8,14                if same dsab, just return              01-DCCEP
00000AD6 E3F0 D010 0024          00000010   1204+         stg 15,16(0,13)         save return code                       01-DCCEP
00000ADC E300 D018 0024          00000018   1205+         stg 0,24(0,13)          save more return code                  01-DCCEP
00000AE2 E3F0 D090 0004          00000090   1206+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00000AE8 E3F0 F018 0004          00000018   1207+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000AEE 47F0 F040               00000040   1208+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            1209+* End of Epilog
                                            1210 * * **** End of Epilogue
                                                                                                                           Page   32 
  Active Usings: @REGION_1079_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000AF8                                    1211          DS    0D
00000AF8 000000D0                           1212 @FRAMESIZE_1079 DC F'208'
00000AFC 00000000
00000B00 0000000000000000                   1213 @lit_1079_30 DC AD(realloc)
00000B08 0000000000000000                   1214 @lit_1079_33 DC AD(__assert)
00000B10 0000000000010840                   1215 @lit_1079_32 DC AD(@strings@)
00000B18 0000000000010480                   1216 @lit_1079_31 DC AD(@DATA)
                                            1217          DROP  12
                                            1218 *
                                            1219 *   DSECT for automatic variables in "rd_realloc"
                                            1220 *      (FUNCTION #1079)
                                            1221 *
00000000                00000000 000000A8   1222 @AUTO#rd_realloc DSECT
00000000                                    1223          DS    XL168
                                            1224 *
00000B20                00000000 00010480   1225 @CODE    CSECT
                                            1226 *
                                            1227 *
                                            1228 *
                                            1229 * ....... start of rd_free
00000B20                                    1230 @LNAME1080 DS  0H
00000B20 00000007                           1231          DC    X'00000007'
00000B24 99846D86998585                     1232          DC    C'rd_free'
00000B2B 00                                 1233          DC    X'00'
                                            1234 rd_free  DCCPRLG CINDEX=1080,BASER=12,FRAME=176,ENTRY=NO,ARCH=ZARCH,LNA*
                                                                MEADDR=@LNAME1080
                                            1235          macro
                                            1236          dccextrn &m
                                            1237          gblc    &$dccext(1000)
                                            1238          gbla    &$dccexti
                                            1239          lcla    &i
                                            1240 &$dccext(&$dccexti+1) setc    '&m'
                                            1241 &i       seta    1
                                            1242 .loop    aif    (&i gt &$dccexti).around
                                            1243          aif    ('&$dccext(&i)' eq '&m').getout
                                            1244 &i       seta    &i+1
                                            1245          ago     .loop
                                            1246 .around  anop
                                            1247 &$dccexti seta &$dccexti+1
                                            1248          extrn  &m
                                            1249 .getout  anop
                                            1250          mend
00000B30                                    1251+$eye0026    ds    0d                                                    02-DCCCA
00000B30 C4C3C3                             1252+         dc cl3'DCC'                                                    02-DCCCA
00000B33 01                                 1253+         dc xl1'01' format one                                          02-DCCCA
00000B34 00000000                           1254+         dc a(0)                                                        02-DCCCA
00000B38 0000000000000BA2                   1255+         dc ad(@PER_1080)                                               02-DCCCA
00000B40 00000000000000B0                   1256+         dc ad(176)                                                     02-DCCCA
00000B48 0000000000000000                   1257+         dc ad(0)                                                       02-DCCCA
00000B50 0000000000001000                   1258+         dc ad(4096)                                                    02-DCCCA
00000B58 20                                 1259+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000B59 03                                 1260+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
                                                                                                                           Page   33 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000B5A 03                                 1261+         dc al1(3)                                                      02-DCCCA
00000B5B 08                                 1262+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000B5C 00                                 1263+         dc bl.8'00000000'                                              02-DCCCA
00000B5D 000000                             1264+         dc al3(0)                                                      02-DCCCA
00000B60 0000000000000B20                   1265+         dc ad(@LNAME1080)                                              02-DCCCA
00000B68                                    1266+         ds 0d                                                          02-DCCCA
00000B68 0000000000000B30                   1267+         dc ad($eye0026)                                                02-DCCCA
00000B70 0000000000000000                   1268+         dc ad(0)                                                       02-DCCCA
00000B78                                    1269+         ds    0d                                                       01-DCCPR
00000B78                                    1270+rd_free  ds    0d                                                       01-DCCPR
00000B78                                    1271+@REGION_1080_1 ds 0h                                                    01-DCCPR
00000B78 EBEC D008 0024          00000008   1272+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000B7E E3E0 D088 0004          00000088   1273+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00000B84 E3C0 D090 0004          00000090   1274+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000B8A B904 002E                          1275+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000B8E E3B0 C018 0004          00000018   1276+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00000B94 A7EB 00B0               000000B0   1277+         aghi  14,176              increase by frame size               01-DCCPR
00000B98 E3E0 C020 0021          00000020   1278+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000B9E 4720 B020               00000020   1279+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00000BA2                                    1280+@PER_1080 ds   0h                                                       01-DCCPR
00000BA2 EBDE 2080 0024          00000080   1281+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000BA8 E3C0 2090 0024          00000090   1282+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000BAE B904 00D2                          1283+         lgr   13,2                set real frame pointer               01-DCCPR
00000BB2 B904 00CF                          1284+         lgr   12,15               set base reg                         01-DCCPR
                        00000B78            1285+         using @REGION_1080_1,12                                        01-DCCPR
                                            1286 * ******* End of Prologue
                                            1287 * *
                                            1288 * ***      free(ptr);
00000BB6 E3F0 1000 0004          00000000   1289          LG    15,0(0,1)   ; ptr
00000BBC E3F0 D0A8 0024          000000A8   1290          STG   15,168(0,13)
00000BC2 4110 D0A8               000000A8   1291          LA    1,168(0,13)
00000BC6 E3F0 C0A8 0004          00000C20   1292          LG    15,@lit_1080_35 ; free
00000BCC                                    1293 @@gen_label46 DS    0H
00000BCC 05EF                               1294          BALR  14,15
00000BCE                                    1295 @@gen_label47 DS    0H
                                            1296 * ***   }
00000BCE                                    1297 @ret_lab_1080 DS 0H
                                            1298 * * **** Start of Epilogue
                                            1299          DCCEPIL
00000BCE                                    1300+         ds 0h                                                          01-DCCEP
                                            1301+* Epilog
00000BCE D707 D088 D088 00000088 00000088   1302+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00000BD4 E3D0 D080 0004          00000080   1303+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000BDA E3C0 D090 0004          00000090   1304+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000BE0 E3B0 C018 0004          00000018   1305+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000BE6 E3C0 B010 0021          00000010   1306+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000BEC E3E0 D008 0004          00000008   1307+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000BF2 EB1C D020 0004          00000020   1308+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000BF8 078E                               1309+         bcr 8,14                if same dsab, just return              01-DCCEP
00000BFA E3F0 D010 0024          00000010   1310+         stg 15,16(0,13)         save return code                       01-DCCEP
00000C00 E300 D018 0024          00000018   1311+         stg 0,24(0,13)          save more return code                  01-DCCEP
00000C06 E3F0 D090 0004          00000090   1312+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
                                                                                                                           Page   34 
  Active Usings: @REGION_1080_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000C0C E3F0 F018 0004          00000018   1313+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000C12 47F0 F040               00000040   1314+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            1315+* End of Epilog
                                            1316 * * **** End of Epilogue
00000C18                                    1317          DS    0D
00000C18 000000B0                           1318 @FRAMESIZE_1080 DC F'176'
00000C1C 00000000
00000C20 0000000000000000                   1319 @lit_1080_35 DC AD(free)
                                            1320          DROP  12
                                            1321 *
                                            1322 *   DSECT for automatic variables in "rd_free"
                                            1323 *      (FUNCTION #1080)
                                            1324 *
00000000                00000000 000000A8   1325 @AUTO#rd_free DSECT
00000000                                    1326          DS    XL168
                                            1327 *
00000C28                00000000 00010480   1328 @CODE    CSECT
                                            1329 *
                                            1330 *
                                            1331 *
                                            1332 * ....... start of rd_strdup
00000C28                                    1333 @LNAME1081 DS  0H
00000C28 00000009                           1334          DC    X'00000009'
00000C2C 99846DA2A39984A4                   1335          DC    C'rd_strdup'
00000C35 00                                 1336          DC    X'00'
                                            1337 rd_strdup DCCPRLG CINDEX=1081,BASER=12,FRAME=208,ENTRY=NO,ARCH=ZARCH,LN*
                                                                AMEADDR=@LNAME1081
                                            1338          macro
                                            1339          dccextrn &m
                                            1340          gblc    &$dccext(1000)
                                            1341          gbla    &$dccexti
                                            1342          lcla    &i
                                            1343 &$dccext(&$dccexti+1) setc    '&m'
                                            1344 &i       seta    1
                                            1345 .loop    aif    (&i gt &$dccexti).around
                                            1346          aif    ('&$dccext(&i)' eq '&m').getout
                                            1347 &i       seta    &i+1
                                            1348          ago     .loop
                                            1349 .around  anop
                                            1350 &$dccexti seta &$dccexti+1
                                            1351          extrn  &m
                                            1352 .getout  anop
                                            1353          mend
00000C38                                    1354+$eye0029    ds    0d                                                    02-DCCCA
00000C38 C4C3C3                             1355+         dc cl3'DCC'                                                    02-DCCCA
00000C3B 01                                 1356+         dc xl1'01' format one                                          02-DCCCA
00000C3C 00000000                           1357+         dc a(0)                                                        02-DCCCA
00000C40 0000000000000CAA                   1358+         dc ad(@PER_1081)                                               02-DCCCA
00000C48 00000000000000D0                   1359+         dc ad(208)                                                     02-DCCCA
00000C50 0000000000000000                   1360+         dc ad(0)                                                       02-DCCCA
00000C58 0000000000001000                   1361+         dc ad(4096)                                                    02-DCCCA
00000C60 20                                 1362+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
                                                                                                                           Page   35 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000C61 03                                 1363+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00000C62 03                                 1364+         dc al1(3)                                                      02-DCCCA
00000C63 08                                 1365+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000C64 00                                 1366+         dc bl.8'00000000'                                              02-DCCCA
00000C65 000000                             1367+         dc al3(0)                                                      02-DCCCA
00000C68 0000000000000C28                   1368+         dc ad(@LNAME1081)                                              02-DCCCA
00000C70                                    1369+         ds 0d                                                          02-DCCCA
00000C70 0000000000000C38                   1370+         dc ad($eye0029)                                                02-DCCCA
00000C78 0000000000000000                   1371+         dc ad(0)                                                       02-DCCCA
00000C80                                    1372+         ds    0d                                                       01-DCCPR
00000C80                                    1373+rd_strdup ds   0d                                                       01-DCCPR
00000C80                                    1374+@REGION_1081_1 ds 0h                                                    01-DCCPR
00000C80 EBEC D008 0024          00000008   1375+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000C86 E3E0 D088 0004          00000088   1376+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00000C8C E3C0 D090 0004          00000090   1377+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000C92 B904 002E                          1378+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000C96 E3B0 C018 0004          00000018   1379+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00000C9C A7EB 00D0               000000D0   1380+         aghi  14,208              increase by frame size               01-DCCPR
00000CA0 E3E0 C020 0021          00000020   1381+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000CA6 4720 B020               00000020   1382+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00000CAA                                    1383+@PER_1081 ds   0h                                                       01-DCCPR
00000CAA EBDE 2080 0024          00000080   1384+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000CB0 E3C0 2090 0024          00000090   1385+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000CB6 B904 00D2                          1386+         lgr   13,2                set real frame pointer               01-DCCPR
00000CBA B904 00CF                          1387+         lgr   12,15               set base reg                         01-DCCPR
                        00000C80            1388+         using @REGION_1081_1,12                                        01-DCCPR
                                            1389 * ******* End of Prologue
                                            1390 * *
                                            1391 * ***
                                            1392 * ***      char *n = strdup(s);
00000CBE E3F0 1000 0004          00000000   1393          LG    15,0(0,1)   ; s
00000CC4 E3F0 D0B0 0024          000000B0   1394          STG   15,176(0,13)
00000CCA 4110 D0B0               000000B0   1395          LA    1,176(0,13)
00000CCE E3F0 C0F0 0004          00000D70   1396          LG    15,@lit_1081_37 ; strdup
00000CD4                                    1397 @@gen_label48 DS    0H
00000CD4 05EF                               1398          BALR  14,15
00000CD6                                    1399 @@gen_label49 DS    0H
00000CD6 B904 002F                          1400          LGR   2,15
                                            1401 * ***
                                            1402 * ***
                                            1403 * ***
                                            1404 * ***      ((n) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkaf\
                                            1405 * ka\\src\\rd.h", 148, "n"));
00000CDA B902 00F2                          1406          LTGR  15,2
00000CDE 4770 C09A               00000D1A   1407          BNZ   @L38
00000CE2                                    1408 @L37     DS    0H
00000CE2 E3F0 C108 0004          00000D88   1409          LG    15,@lit_1081_38
00000CE8 41F0 F020               00000020   1410          LA    15,32(0,15)
00000CEC E3F0 D0B0 0024          000000B0   1411          STG   15,176(0,13)
00000CF2 E3F0 C100 0004          00000D80   1412          LG    15,@lit_1081_39
00000CF8 E3F0 D0B8 0024          000000B8   1413          STG   15,184(0,13)
00000CFE E548 D0C0 0094          000000C0   1414          MVGHI 192(13),148
                                                                                                                           Page   36 
  Active Usings: @REGION_1081_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000D04 41F0 F022               00000022   1415          LA    15,34(0,15)
00000D08 E3F0 D0C8 0024          000000C8   1416          STG   15,200(0,13)
00000D0E 4110 D0B0               000000B0   1417          LA    1,176(0,13)
00000D12 E3F0 C0F8 0004          00000D78   1418          LG    15,@lit_1081_40 ; __assert
00000D18                                    1419 @@gen_label51 DS    0H
00000D18 05EF                               1420          BALR  14,15
00000D1A                                    1421 @@gen_label52 DS    0H
00000D1A                                    1422 @L38     DS    0H
                                            1423 * ***      return n;
00000D1A B904 00F2                          1424          LGR   15,2
                                            1425 * ***   }
                                            1426 * * **** Start of Epilogue
                                            1427          DCCEPIL
00000D1E                                    1428+         ds 0h                                                          01-DCCEP
                                            1429+* Epilog
00000D1E D707 D088 D088 00000088 00000088   1430+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00000D24 E3D0 D080 0004          00000080   1431+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000D2A E3C0 D090 0004          00000090   1432+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000D30 E3B0 C018 0004          00000018   1433+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000D36 E3C0 B010 0021          00000010   1434+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000D3C E3E0 D008 0004          00000008   1435+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000D42 EB1C D020 0004          00000020   1436+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000D48 078E                               1437+         bcr 8,14                if same dsab, just return              01-DCCEP
00000D4A E3F0 D010 0024          00000010   1438+         stg 15,16(0,13)         save return code                       01-DCCEP
00000D50 E300 D018 0024          00000018   1439+         stg 0,24(0,13)          save more return code                  01-DCCEP
00000D56 E3F0 D090 0004          00000090   1440+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00000D5C E3F0 F018 0004          00000018   1441+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000D62 47F0 F040               00000040   1442+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            1443+* End of Epilog
                                            1444 * * **** End of Epilogue
00000D68                                    1445          DS    0D
00000D68 000000D0                           1446 @FRAMESIZE_1081 DC F'208'
00000D6C 00000000
00000D70 0000000000000000                   1447 @lit_1081_37 DC AD(strdup)
00000D78 0000000000000000                   1448 @lit_1081_40 DC AD(__assert)
00000D80 0000000000010840                   1449 @lit_1081_39 DC AD(@strings@)
00000D88 0000000000010480                   1450 @lit_1081_38 DC AD(@DATA)
                                            1451          DROP  12
                                            1452 *
                                            1453 *   DSECT for automatic variables in "rd_strdup"
                                            1454 *      (FUNCTION #1081)
                                            1455 *
00000000                00000000 000000A8   1456 @AUTO#rd_strdup DSECT
00000000                                    1457          DS    XL168
                                            1458 *
00000D90                00000000 00010480   1459 @CODE    CSECT
                                            1460 *
                                            1461 *
                                            1462 *
                                            1463 * ....... start of rd_refcnt_sub0
00000D90                                    1464 @LNAME1084 DS  0H
00000D90 0000000E                           1465          DC    X'0000000E'
                                                                                                                           Page   37 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000D94 99846D9985868395                   1466          DC    C'rd_refcnt_sub0'
00000DA2 00                                 1467          DC    X'00'
                                            1468 rd_refcnt_sub0 DCCPRLG CINDEX=1084,BASER=12,FRAME=208,ENTRY=NO,ARCH=ZAR*
                                                                CH,LNAMEADDR=@LNAME1084
                                            1469          macro
                                            1470          dccextrn &m
                                            1471          gblc    &$dccext(1000)
                                            1472          gbla    &$dccexti
                                            1473          lcla    &i
                                            1474 &$dccext(&$dccexti+1) setc    '&m'
                                            1475 &i       seta    1
                                            1476 .loop    aif    (&i gt &$dccexti).around
                                            1477          aif    ('&$dccext(&i)' eq '&m').getout
                                            1478 &i       seta    &i+1
                                            1479          ago     .loop
                                            1480 .around  anop
                                            1481 &$dccexti seta &$dccexti+1
                                            1482          extrn  &m
                                            1483 .getout  anop
                                            1484          mend
00000DA8                                    1485+$eye0032    ds    0d                                                    02-DCCCA
00000DA8 C4C3C3                             1486+         dc cl3'DCC'                                                    02-DCCCA
00000DAB 01                                 1487+         dc xl1'01' format one                                          02-DCCCA
00000DAC 00000000                           1488+         dc a(0)                                                        02-DCCCA
00000DB0 0000000000000E1A                   1489+         dc ad(@PER_1084)                                               02-DCCCA
00000DB8 00000000000000D0                   1490+         dc ad(208)                                                     02-DCCCA
00000DC0 0000000000000000                   1491+         dc ad(0)                                                       02-DCCCA
00000DC8 0000000000001000                   1492+         dc ad(4096)                                                    02-DCCCA
00000DD0 20                                 1493+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000DD1 03                                 1494+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00000DD2 03                                 1495+         dc al1(3)                                                      02-DCCCA
00000DD3 08                                 1496+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000DD4 00                                 1497+         dc bl.8'00000000'                                              02-DCCCA
00000DD5 000000                             1498+         dc al3(0)                                                      02-DCCCA
00000DD8 0000000000000D90                   1499+         dc ad(@LNAME1084)                                              02-DCCCA
00000DE0                                    1500+         ds 0d                                                          02-DCCCA
00000DE0 0000000000000DA8                   1501+         dc ad($eye0032)                                                02-DCCCA
00000DE8 0000000000000000                   1502+         dc ad(0)                                                       02-DCCCA
00000DF0                                    1503+         ds    0d                                                       01-DCCPR
00000DF0                                    1504+rd_refcnt_sub0 ds 0d                                                    01-DCCPR
00000DF0                                    1505+@REGION_1084_1 ds 0h                                                    01-DCCPR
00000DF0 EBEC D008 0024          00000008   1506+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000DF6 E3E0 D088 0004          00000088   1507+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00000DFC E3C0 D090 0004          00000090   1508+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000E02 B904 002E                          1509+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000E06 E3B0 C018 0004          00000018   1510+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00000E0C A7EB 00D0               000000D0   1511+         aghi  14,208              increase by frame size               01-DCCPR
00000E10 E3E0 C020 0021          00000020   1512+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000E16 4720 B020               00000020   1513+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00000E1A                                    1514+@PER_1084 ds   0h                                                       01-DCCPR
00000E1A EBDE 2080 0024          00000080   1515+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000E20 E3C0 2090 0024          00000090   1516+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
                                                                                                                           Page   38 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000E26 B904 00D2                          1517+         lgr   13,2                set real frame pointer               01-DCCPR
00000E2A B904 00CF                          1518+         lgr   12,15               set base reg                         01-DCCPR
                        00000DF0            1519+         using @REGION_1084_1,12                                        01-DCCPR
                                            1520 * ******* End of Prologue
                                            1521 * *
                                            1522 * ***           int r;
                                            1523 * ***   # 332 "C:\asgkafka\librdkafka\src\rd.h"
                                            1524 * ***           r = rd_atomic32_sub(R, 1);
00000E2E E3F0 1000 0004          00000000   1525          LG    15,0(0,1)   ; R
00000E34 E3F0 D0B0 0024          000000B0   1526          STG   15,176(0,13)
00000E3A E548 D0B8 0001          000000B8   1527          MVGHI 184(13),1
00000E40 4110 D0B0               000000B0   1528          LA    1,176(0,13)
00000E44 E3F0 C100 0004          00000EF0   1529          LG    15,@lit_1084_42 ; rd_atomic32_sub
00000E4A                                    1530 @@gen_label53 DS    0H
00000E4A 05EF                               1531          BALR  14,15
00000E4C                                    1532 @@gen_label54 DS    0H
00000E4C 122F                               1533          LTR   2,15
                                            1534 * ***
                                            1535 * ***           if (r < 0)
00000E4E 47B0 C0A6               00000E96   1536          BNL   @L41
                                            1537 * ***                   ((!*"refcnt sub-zero") ? (void)0 : __assert(__\
                                            1538 * func__, "C:\\asgkafka\\librdkafka\\src\\rd.h", 335, "!*\"refcnt sub-\
                                            1539 * zero\""));
00000E52 E3F0 C108 0004          00000EF8   1540          LG    15,@lit_1084_43
00000E58 4110 F024               00000024   1541          LA    1,36(0,15)
00000E5C 9500 1000      00000000 00000000   1542          CLI   0(1),0
00000E60 4780 C0A6               00000E96   1543          BE    @L41
00000E64                                    1544 @L42     DS    0H
00000E64 E310 C118 0004          00000F08   1545          LG    1,@lit_1084_44
00000E6A 4110 1036               00000036   1546          LA    1,54(0,1)
00000E6E E310 D0B0 0024          000000B0   1547          STG   1,176(0,13)
00000E74 E3F0 D0B8 0024          000000B8   1548          STG   15,184(0,13)
00000E7A E548 D0C0 014F          000000C0   1549          MVGHI 192(13),335
00000E80 41F0 F034               00000034   1550          LA    15,52(0,15)
00000E84 E3F0 D0C8 0024          000000C8   1551          STG   15,200(0,13)
00000E8A 4110 D0B0               000000B0   1552          LA    1,176(0,13)
00000E8E E3F0 C110 0004          00000F00   1553          LG    15,@lit_1084_45 ; __assert
00000E94                                    1554 @@gen_label57 DS    0H
00000E94 05EF                               1555          BALR  14,15
00000E96                                    1556 @@gen_label58 DS    0H
00000E96                                    1557 @L43     DS    0H
00000E96                                    1558 @L41     DS    0H
                                            1559 * ***           return r;
00000E96 B914 00F2                          1560          LGFR  15,2
                                            1561 * ***   }
                                            1562 * * **** Start of Epilogue
                                            1563          DCCEPIL
00000E9A                                    1564+         ds 0h                                                          01-DCCEP
                                            1565+* Epilog
00000E9A D707 D088 D088 00000088 00000088   1566+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00000EA0 E3D0 D080 0004          00000080   1567+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000EA6 E3C0 D090 0004          00000090   1568+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
                                                                                                                           Page   39 
  Active Usings: @REGION_1084_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000EAC E3B0 C018 0004          00000018   1569+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000EB2 E3C0 B010 0021          00000010   1570+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000EB8 E3E0 D008 0004          00000008   1571+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000EBE EB1C D020 0004          00000020   1572+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00000EC4 078E                               1573+         bcr 8,14                if same dsab, just return              01-DCCEP
00000EC6 E3F0 D010 0024          00000010   1574+         stg 15,16(0,13)         save return code                       01-DCCEP
00000ECC E300 D018 0024          00000018   1575+         stg 0,24(0,13)          save more return code                  01-DCCEP
00000ED2 E3F0 D090 0004          00000090   1576+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00000ED8 E3F0 F018 0004          00000018   1577+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00000EDE 47F0 F040               00000040   1578+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            1579+* End of Epilog
                                            1580 * * **** End of Epilogue
00000EE8                                    1581          DS    0D
00000EE8 000000D0                           1582 @FRAMESIZE_1084 DC F'208'
00000EEC 00000000
00000EF0 00000000000001A8                   1583 @lit_1084_42 DC AD(rd_atomic32_sub)
00000EF8 0000000000010840                   1584 @lit_1084_43 DC AD(@strings@)
00000F00 0000000000000000                   1585 @lit_1084_45 DC AD(__assert)
00000F08 0000000000010480                   1586 @lit_1084_44 DC AD(@DATA)
                                            1587          DROP  12
                                            1588 *
                                            1589 *   DSECT for automatic variables in "rd_refcnt_sub0"
                                            1590 *      (FUNCTION #1084)
                                            1591 *
00000000                00000000 000000AC   1592 @AUTO#rd_refcnt_sub0 DSECT
00000000                                    1593          DS    XL168
000000A8                                    1594 rd_refcnt_sub0#r#0 DS 1F   ; r
                                            1595 *
00000F10                00000000 00010480   1596 @CODE    CSECT
                                            1597 *
                                            1598 *
                                            1599 *
                                            1600 * ....... start of rd_clock
00000F10                                    1601 @LNAME1088 DS  0H
00000F10 00000008                           1602          DC    X'00000008'
00000F14 99846D8393968392                   1603          DC    C'rd_clock'
00000F1C 00                                 1604          DC    X'00'
                                            1605 rd_clock DCCPRLG CINDEX=1088,BASER=12,FRAME=200,ENTRY=NO,ARCH=ZARCH,LNA*
                                                                MEADDR=@LNAME1088
                                            1606          macro
                                            1607          dccextrn &m
                                            1608          gblc    &$dccext(1000)
                                            1609          gbla    &$dccexti
                                            1610          lcla    &i
                                            1611 &$dccext(&$dccexti+1) setc    '&m'
                                            1612 &i       seta    1
                                            1613 .loop    aif    (&i gt &$dccexti).around
                                            1614          aif    ('&$dccext(&i)' eq '&m').getout
                                            1615 &i       seta    &i+1
                                            1616          ago     .loop
                                            1617 .around  anop
                                            1618 &$dccexti seta &$dccexti+1
                                                                                                                           Page   40 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1619          extrn  &m
                                            1620 .getout  anop
                                            1621          mend
00000F20                                    1622+$eye0035    ds    0d                                                    02-DCCCA
00000F20 C4C3C3                             1623+         dc cl3'DCC'                                                    02-DCCCA
00000F23 01                                 1624+         dc xl1'01' format one                                          02-DCCCA
00000F24 00000000                           1625+         dc a(0)                                                        02-DCCCA
00000F28 0000000000000F92                   1626+         dc ad(@PER_1088)                                               02-DCCCA
00000F30 00000000000000C8                   1627+         dc ad(200)                                                     02-DCCCA
00000F38 0000000000000000                   1628+         dc ad(0)                                                       02-DCCCA
00000F40 0000000000001000                   1629+         dc ad(4096)                                                    02-DCCCA
00000F48 20                                 1630+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00000F49 03                                 1631+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00000F4A 03                                 1632+         dc al1(3)                                                      02-DCCCA
00000F4B 08                                 1633+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00000F4C 00                                 1634+         dc bl.8'00000000'                                              02-DCCCA
00000F4D 000000                             1635+         dc al3(0)                                                      02-DCCCA
00000F50 0000000000000F10                   1636+         dc ad(@LNAME1088)                                              02-DCCCA
00000F58                                    1637+         ds 0d                                                          02-DCCCA
00000F58 0000000000000F20                   1638+         dc ad($eye0035)                                                02-DCCCA
00000F60 0000000000000000                   1639+         dc ad(0)                                                       02-DCCCA
00000F68                                    1640+         ds    0d                                                       01-DCCPR
00000F68                                    1641+rd_clock ds    0d                                                       01-DCCPR
00000F68                                    1642+@REGION_1088_1 ds 0h                                                    01-DCCPR
00000F68 EBEC D008 0024          00000008   1643+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00000F6E E3E0 D088 0004          00000088   1644+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00000F74 E3C0 D090 0004          00000090   1645+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00000F7A B904 002E                          1646+         lgr   2,14                copy addr of our savearea            01-DCCPR
00000F7E E3B0 C018 0004          00000018   1647+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00000F84 A7EB 00C8               000000C8   1648+         aghi  14,200              increase by frame size               01-DCCPR
00000F88 E3E0 C020 0021          00000020   1649+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00000F8E 4720 B020               00000020   1650+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00000F92                                    1651+@PER_1088 ds   0h                                                       01-DCCPR
00000F92 EBDE 2080 0024          00000080   1652+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00000F98 E3C0 2090 0024          00000090   1653+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00000F9E B904 00D2                          1654+         lgr   13,2                set real frame pointer               01-DCCPR
00000FA2 B904 00CF                          1655+         lgr   12,15               set base reg                         01-DCCPR
                        00000F68            1656+         using @REGION_1088_1,12                                        01-DCCPR
                                            1657 * ******* End of Prologue
                                            1658 * *
                                            1659 * ***   # 97 "C:\asgkafka\librdkafka\src\rdtime.h"
                                            1660 * ***       struct timeval tv;
                                            1661 * ***       gettimeofday(&tv, ((void *)0));
00000FA6 41F0 D0A8               000000A8   1662          LA    15,168(0,13)
00000FAA E3F0 D0B8 0024          000000B8   1663          STG   15,184(0,13)
00000FB0 D707 D0C0 D0C0 000000C0 000000C0   1664          XC    192(8,13),192(13)
00000FB6 4110 D0B8               000000B8   1665          LA    1,184(0,13)
00000FBA E3F0 C0C0 0004          00001028   1666          LG    15,@lit_1088_47 ; gettimeofday
00000FC0                                    1667 @@gen_label59 DS    0H
00000FC0 05EF                               1668          BALR  14,15
00000FC2                                    1669 @@gen_label60 DS    0H
                                            1670 * ***       return ((rd_ts_t)tv.tv_sec * 1000000LLU) + (rd_ts_t)tv.tv_\
                                                                                                                           Page   41 
  Active Usings: @REGION_1088_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1671 * usec;
00000FC2 E3F0 D0A8 0004          000000A8   1672          LG    15,168(0,13)
00000FC8 C2F0 000F 4240                     1673          MSGFI 15,X'000F4240'
00000FCE E310 D0B0 0004          000000B0   1674          LG    1,176(0,13) ; offset of tv_usec in timeval
00000FD4 B90A 00F1                          1675          ALGR  15,1
                                            1676 * ***   # 118 "C:\asgkafka\librdkafka\src\rdtime.h"
                                            1677 * ***   }
                                            1678 * * **** Start of Epilogue
                                            1679          DCCEPIL
00000FD8                                    1680+         ds 0h                                                          01-DCCEP
                                            1681+* Epilog
00000FD8 D707 D088 D088 00000088 00000088   1682+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00000FDE E3D0 D080 0004          00000080   1683+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00000FE4 E3C0 D090 0004          00000090   1684+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00000FEA E3B0 C018 0004          00000018   1685+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00000FF0 E3C0 B010 0021          00000010   1686+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00000FF6 E3E0 D008 0004          00000008   1687+         lg  14,8(0,13)          load up return address                 01-DCCEP
00000FFC EB1C D020 0004          00000020   1688+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00001002 078E                               1689+         bcr 8,14                if same dsab, just return              01-DCCEP
00001004 E3F0 D010 0024          00000010   1690+         stg 15,16(0,13)         save return code                       01-DCCEP
0000100A E300 D018 0024          00000018   1691+         stg 0,24(0,13)          save more return code                  01-DCCEP
00001010 E3F0 D090 0004          00000090   1692+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00001016 E3F0 F018 0004          00000018   1693+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000101C 47F0 F040               00000040   1694+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            1695+* End of Epilog
                                            1696 * * **** End of Epilogue
00001020                                    1697          DS    0D
00001020 000000C8                           1698 @FRAMESIZE_1088 DC F'200'
00001024 00000000
00001028 0000000000000000                   1699 @lit_1088_47 DC AD(gettimeofday)
                                            1700          DROP  12
                                            1701 *
                                            1702 *   DSECT for automatic variables in "rd_clock"
                                            1703 *      (FUNCTION #1088)
                                            1704 *
00000000                00000000 000000B8   1705 @AUTO#rd_clock DSECT
00000000                                    1706          DS    XL168
000000A8                                    1707 rd_clock#tv#0 DS 16XL1     ; tv
                                            1708 *
00001030                00000000 00010480   1709 @CODE    CSECT
                                            1710 *
                                            1711 *
                                            1712 *
                                            1713 * ....... start of rd_buf_write_pos
00001030                                    1714 @LNAME1266 DS  0H
00001030 00000010                           1715          DC    X'00000010'
00001034 99846D82A4866DA6                   1716          DC    C'rd_buf_write_pos'
00001044 00                                 1717          DC    X'00'
                                            1718 rd_buf_write_pos DCCPRLG CINDEX=1266,BASER=12,FRAME=176,SAVEAREA=NO,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1266
                                            1719          macro
                                            1720          dccextrn &m
                                                                                                                           Page   42 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1721          gblc    &$dccext(1000)
                                            1722          gbla    &$dccexti
                                            1723          lcla    &i
                                            1724 &$dccext(&$dccexti+1) setc    '&m'
                                            1725 &i       seta    1
                                            1726 .loop    aif    (&i gt &$dccexti).around
                                            1727          aif    ('&$dccext(&i)' eq '&m').getout
                                            1728 &i       seta    &i+1
                                            1729          ago     .loop
                                            1730 .around  anop
                                            1731 &$dccexti seta &$dccexti+1
                                            1732          extrn  &m
                                            1733 .getout  anop
                                            1734          mend
00001048                                    1735+$eye0038    ds    0d                                                    02-DCCCA
00001048 C4C3C3                             1736+         dc cl3'DCC'                                                    02-DCCCA
0000104B 01                                 1737+         dc xl1'01' format one                                          02-DCCCA
0000104C 00000000                           1738+         dc a(0)                                                        02-DCCCA
00001050 0000000000000000                   1739+         dc ad(0)                                                       02-DCCCA
00001058 00000000000000B0                   1740+         dc ad(176)                                                     02-DCCCA
00001060 0000000000000000                   1741+         dc ad(0)                                                       02-DCCCA
00001068 0000000000001000                   1742+         dc ad(4096)                                                    02-DCCCA
00001070 20                                 1743+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001071 03                                 1744+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001072 03                                 1745+         dc al1(3)                                                      02-DCCCA
00001073 08                                 1746+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001074 00                                 1747+         dc bl.8'00000000'                                              02-DCCCA
00001075 000000                             1748+         dc al3(0)                                                      02-DCCCA
00001078 0000000000001030                   1749+         dc ad(@LNAME1266)                                              02-DCCCA
00001080                                    1750+         ds 0d                                                          02-DCCCA
00001080 0000000000001048                   1751+         dc ad($eye0038)                                                02-DCCCA
00001088 0000000000000000                   1752+         dc ad(0)                                                       02-DCCCA
00001090                                    1753+         ds    0d                                                       01-DCCPR
00001090                                    1754+rd_buf_write_pos ds 0d                                                  01-DCCPR
00001090                                    1755+@REGION_1266_1 ds 0h                                                    01-DCCPR
00001090 EBEC D008 0024          00000008   1756+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00001096 B904 00CF                          1757+         lgr   12,15               set base reg                         01-DCCPR
                        00001090            1758+         using @REGION_1266_1,12                                        01-DCCPR
                                            1759 * ******* End of Prologue
                                            1760 * *
                                            1761 * ***           const rd_segment_t *seg = rbuf->rbuf_wpos;
0000109A E3F0 1000 0004          00000000   1762          LG    15,0(0,1)   ; rbuf
000010A0 E3F0 F018 0004          00000018   1763          LG    15,24(0,15) ; offset of rbuf_wpos in rd_buf_s
                                            1764 * ***
                                            1765 * ***           if (((!seg))) {
000010A6 B902 001F                          1766          LTGR  1,15
000010AA 4770 C026               000010B6   1767          BNZ   @L98
                                            1768 * ***
                                            1769 * ***
                                            1770 * ***
                                            1771 * ***                   return 0;
000010AE A7F9 0000               00000000   1772          LGHI  15,0        ; 0
                                                                                                                           Page   43 
  Active Usings: @REGION_1266_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000010B2 47F0 C036               000010C6   1773          B     @ret_lab_1266
                                            1774 * ***           }
000010B6                                    1775 @L98     DS    0H
                                            1776 * ***
                                            1777 * ***
                                            1778 * ***
                                            1779 * ***           return seg->seg_absof + seg->seg_of;
000010B6 E310 F028 0004          00000028   1780          LG    1,40(0,15)  ; offset of seg_absof in rd_segment_s
000010BC E310 F018 000A          00000018   1781          ALG   1,24(0,15)
000010C2 B904 00F1                          1782          LGR   15,1
                                            1783 * ***   }
000010C6                                    1784 @ret_lab_1266 DS 0H
                                            1785 * * **** Start of Epilogue
                                            1786          DCCEPIL
000010C6                                    1787+         ds 0h                                                          01-DCCEP
                                            1788+* Epilog
                                            1789+* Epilog
000010C6 E3E0 D008 0004          00000008   1790+         lg    14,8(,13) restore the reg                                01-DCCEP
000010CC EB1C D020 0004          00000020   1791+         lmg   1,12,32(13)                                              01-DCCEP
000010D2 07FE                               1792+         br   14                                                        01-DCCEP
                                            1793+* End of Epilog
                                            1794 * * **** End of Epilogue
                                            1795          DROP  12
                                            1796 *
                                            1797 *   DSECT for automatic variables in "rd_buf_write_pos"
                                            1798 *      (FUNCTION #1266)
                                            1799 *
00000000                00000000 000000A8   1800 @AUTO#rd_buf_write_pos DSECT
00000000                                    1801          DS    XL168
                                            1802 *
000010D4                00000000 00010480   1803 @CODE    CSECT
                                            1804 *
                                            1805 *
                                            1806 *
                                            1807 * ....... start of rd_buf_len
000010D4                                    1808 @LNAME1270 DS  0H
000010D4 0000000A                           1809          DC    X'0000000A'
000010D8 99846D82A4866D93                   1810          DC    C'rd_buf_len'
000010E2 00                                 1811          DC    X'00'
                                            1812 rd_buf_len DCCPRLG CINDEX=1270,BASER=0,FRAME=168,SAVEAREA=NO,ENTRY=NO,A*
                                                                RCH=ZARCH,LNAMEADDR=@LNAME1270
                                            1813          macro
                                            1814          dccextrn &m
                                            1815          gblc    &$dccext(1000)
                                            1816          gbla    &$dccexti
                                            1817          lcla    &i
                                            1818 &$dccext(&$dccexti+1) setc    '&m'
                                            1819 &i       seta    1
                                            1820 .loop    aif    (&i gt &$dccexti).around
                                            1821          aif    ('&$dccext(&i)' eq '&m').getout
                                            1822 &i       seta    &i+1
                                            1823          ago     .loop
                                                                                                                           Page   44 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1824 .around  anop
                                            1825 &$dccexti seta &$dccexti+1
                                            1826          extrn  &m
                                            1827 .getout  anop
                                            1828          mend
000010E8                                    1829+$eye0041    ds    0d                                                    02-DCCCA
000010E8 C4C3C3                             1830+         dc cl3'DCC'                                                    02-DCCCA
000010EB 01                                 1831+         dc xl1'01' format one                                          02-DCCCA
000010EC 00000000                           1832+         dc a(0)                                                        02-DCCCA
000010F0 0000000000000000                   1833+         dc ad(0)                                                       02-DCCCA
000010F8 00000000000000A8                   1834+         dc ad(168)                                                     02-DCCCA
00001100 0000000000000000                   1835+         dc ad(0)                                                       02-DCCCA
00001108 0000000000001000                   1836+         dc ad(4096)                                                    02-DCCCA
00001110 20                                 1837+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001111 03                                 1838+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001112 03                                 1839+         dc al1(3)                                                      02-DCCCA
00001113 08                                 1840+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001114 00                                 1841+         dc bl.8'00000000'                                              02-DCCCA
00001115 000000                             1842+         dc al3(0)                                                      02-DCCCA
00001118 00000000000010D4                   1843+         dc ad(@LNAME1270)                                              02-DCCCA
00001120                                    1844+         ds 0d                                                          02-DCCCA
00001120 00000000000010E8                   1845+         dc ad($eye0041)                                                02-DCCCA
00001128 0000000000000000                   1846+         dc ad(0)                                                       02-DCCCA
00001130                                    1847+         ds    0d                                                       01-DCCPR
00001130                                    1848+rd_buf_len ds  0d                                                       01-DCCPR
00001130                                    1849+@REGION_1270_1 ds 0h                                                    01-DCCPR
00001130 EBEC D008 0024          00000008   1850+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                            1851 * ******* End of Prologue
                                            1852 * *
                                            1853 * ***           return rbuf->rbuf_len;
00001136 E3F0 1000 0004          00000000   1854          LG    15,0(0,1)   ; rbuf
0000113C E3F0 F020 0004          00000020   1855          LG    15,32(0,15) ; offset of rbuf_len in rd_buf_s
                                            1856 * ***   }
                                            1857 * * **** Start of Epilogue
                                            1858          DCCEPIL
00001142                                    1859+         ds 0h                                                          01-DCCEP
                                            1860+* Epilog
                                            1861+* Epilog
00001142 E3E0 D008 0004          00000008   1862+         lg    14,8(,13) restore the reg                                01-DCCEP
00001148 EB1C D020 0004          00000020   1863+         lmg   1,12,32(13)                                              01-DCCEP
0000114E 07FE                               1864+         br   14                                                        01-DCCEP
                                            1865+* End of Epilog
                                            1866 * * **** End of Epilogue
                                            1867 *
                                            1868 *   DSECT for automatic variables in "rd_buf_len"
                                            1869 *      (FUNCTION #1270)
                                            1870 *
00000000                00000000 000000A8   1871 @AUTO#rd_buf_len DSECT
00000000                                    1872          DS    XL168
                                            1873 *
00001150                00000000 00010480   1874 @CODE    CSECT
                                            1875 *
                                                                                                                           Page   45 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1876 *
                                            1877 *
                                            1878 * ....... start of rd_slice_abs_offset
00001150                                    1879 @LNAME1286 DS  0H
00001150 00000013                           1880          DC    X'00000013'
00001154 99846DA293898385                   1881          DC    C'rd_slice_abs_offset'
00001167 00                                 1882          DC    X'00'
                                            1883 rd_slice_abs_offset DCCPRLG CINDEX=1286,BASER=12,FRAME=168,SAVEAREA=NO,*
                                                                ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1286
                                            1884          macro
                                            1885          dccextrn &m
                                            1886          gblc    &$dccext(1000)
                                            1887          gbla    &$dccexti
                                            1888          lcla    &i
                                            1889 &$dccext(&$dccexti+1) setc    '&m'
                                            1890 &i       seta    1
                                            1891 .loop    aif    (&i gt &$dccexti).around
                                            1892          aif    ('&$dccext(&i)' eq '&m').getout
                                            1893 &i       seta    &i+1
                                            1894          ago     .loop
                                            1895 .around  anop
                                            1896 &$dccexti seta &$dccexti+1
                                            1897          extrn  &m
                                            1898 .getout  anop
                                            1899          mend
00001168                                    1900+$eye0044    ds    0d                                                    02-DCCCA
00001168 C4C3C3                             1901+         dc cl3'DCC'                                                    02-DCCCA
0000116B 01                                 1902+         dc xl1'01' format one                                          02-DCCCA
0000116C 00000000                           1903+         dc a(0)                                                        02-DCCCA
00001170 0000000000000000                   1904+         dc ad(0)                                                       02-DCCCA
00001178 00000000000000A8                   1905+         dc ad(168)                                                     02-DCCCA
00001180 0000000000000000                   1906+         dc ad(0)                                                       02-DCCCA
00001188 0000000000001000                   1907+         dc ad(4096)                                                    02-DCCCA
00001190 20                                 1908+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001191 03                                 1909+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001192 03                                 1910+         dc al1(3)                                                      02-DCCCA
00001193 08                                 1911+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001194 00                                 1912+         dc bl.8'00000000'                                              02-DCCCA
00001195 000000                             1913+         dc al3(0)                                                      02-DCCCA
00001198 0000000000001150                   1914+         dc ad(@LNAME1286)                                              02-DCCCA
000011A0                                    1915+         ds 0d                                                          02-DCCCA
000011A0 0000000000001168                   1916+         dc ad($eye0044)                                                02-DCCCA
000011A8 0000000000000000                   1917+         dc ad(0)                                                       02-DCCCA
000011B0                                    1918+         ds    0d                                                       01-DCCPR
000011B0                                    1919+rd_slice_abs_offset ds 0d                                               01-DCCPR
000011B0                                    1920+@REGION_1286_1 ds 0h                                                    01-DCCPR
000011B0 EBEC D008 0024          00000008   1921+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000011B6 B904 00CF                          1922+         lgr   12,15               set base reg                         01-DCCPR
                        000011B0            1923+         using @REGION_1286_1,12                                        01-DCCPR
                                            1924 * ******* End of Prologue
                                            1925 * *
                                            1926 * ***           if (((!slice->seg)))
                                                                                                                           Page   46 
  Active Usings: @REGION_1286_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000011BA E3F0 1000 0004          00000000   1927          LG    15,0(0,1)   ; slice
000011C0 E310 F008 0002          00000008   1928          LTG   1,8(0,15)   ; offset of seg in rd_slice_s
000011C6 4770 C024               000011D4   1929          BNZ   @L102
                                            1930 * ***                   return slice->end;
000011CA E3F0 F020 0004          00000020   1931          LG    15,32(0,15) ; offset of end in rd_slice_s
000011D0 47F0 C03A               000011EA   1932          B     @ret_lab_1286
000011D4                                    1933 @L102    DS    0H
                                            1934 * ***
                                            1935 * ***           return slice->seg->seg_absof + slice->rof;
000011D4 E310 F008 0004          00000008   1936          LG    1,8(0,15)   ; offset of seg in rd_slice_s
000011DA E310 1028 0004          00000028   1937          LG    1,40(0,1)   ; offset of seg_absof in rd_segment_s
000011E0 E310 F010 000A          00000010   1938          ALG   1,16(0,15)
000011E6 B904 00F1                          1939          LGR   15,1
                                            1940 * ***   }
000011EA                                    1941 @ret_lab_1286 DS 0H
                                            1942 * * **** Start of Epilogue
                                            1943          DCCEPIL
000011EA                                    1944+         ds 0h                                                          01-DCCEP
                                            1945+* Epilog
                                            1946+* Epilog
000011EA E3E0 D008 0004          00000008   1947+         lg    14,8(,13) restore the reg                                01-DCCEP
000011F0 EB1C D020 0004          00000020   1948+         lmg   1,12,32(13)                                              01-DCCEP
000011F6 07FE                               1949+         br   14                                                        01-DCCEP
                                            1950+* End of Epilog
                                            1951 * * **** End of Epilogue
                                            1952          DROP  12
                                            1953 *
                                            1954 *   DSECT for automatic variables in "rd_slice_abs_offset"
                                            1955 *      (FUNCTION #1286)
                                            1956 *
00000000                00000000 000000A8   1957 @AUTO#rd_slice_abs_offset DSECT
00000000                                    1958          DS    XL168
                                            1959 *
000011F8                00000000 00010480   1960 @CODE    CSECT
                                            1961 *
                                            1962 *
                                            1963 *
                                            1964 * ....... start of rd_slice_offset
000011F8                                    1965 @LNAME1287 DS  0H
000011F8 0000000F                           1966          DC    X'0000000F'
000011FC 99846DA293898385                   1967          DC    C'rd_slice_offset'
0000120B 00                                 1968          DC    X'00'
                                            1969 rd_slice_offset DCCPRLG CINDEX=1287,BASER=12,FRAME=168,SAVEAREA=NO,ENTR*
                                                                Y=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1287
                                            1970          macro
                                            1971          dccextrn &m
                                            1972          gblc    &$dccext(1000)
                                            1973          gbla    &$dccexti
                                            1974          lcla    &i
                                            1975 &$dccext(&$dccexti+1) setc    '&m'
                                            1976 &i       seta    1
                                            1977 .loop    aif    (&i gt &$dccexti).around
                                                                                                                           Page   47 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            1978          aif    ('&$dccext(&i)' eq '&m').getout
                                            1979 &i       seta    &i+1
                                            1980          ago     .loop
                                            1981 .around  anop
                                            1982 &$dccexti seta &$dccexti+1
                                            1983          extrn  &m
                                            1984 .getout  anop
                                            1985          mend
00001210                                    1986+$eye0047    ds    0d                                                    02-DCCCA
00001210 C4C3C3                             1987+         dc cl3'DCC'                                                    02-DCCCA
00001213 01                                 1988+         dc xl1'01' format one                                          02-DCCCA
00001214 00000000                           1989+         dc a(0)                                                        02-DCCCA
00001218 0000000000000000                   1990+         dc ad(0)                                                       02-DCCCA
00001220 00000000000000A8                   1991+         dc ad(168)                                                     02-DCCCA
00001228 0000000000000000                   1992+         dc ad(0)                                                       02-DCCCA
00001230 0000000000001000                   1993+         dc ad(4096)                                                    02-DCCCA
00001238 20                                 1994+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001239 03                                 1995+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000123A 03                                 1996+         dc al1(3)                                                      02-DCCCA
0000123B 08                                 1997+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000123C 00                                 1998+         dc bl.8'00000000'                                              02-DCCCA
0000123D 000000                             1999+         dc al3(0)                                                      02-DCCCA
00001240 00000000000011F8                   2000+         dc ad(@LNAME1287)                                              02-DCCCA
00001248                                    2001+         ds 0d                                                          02-DCCCA
00001248 0000000000001210                   2002+         dc ad($eye0047)                                                02-DCCCA
00001250 0000000000000000                   2003+         dc ad(0)                                                       02-DCCCA
00001258                                    2004+         ds    0d                                                       01-DCCPR
00001258                                    2005+rd_slice_offset ds 0d                                                   01-DCCPR
00001258                                    2006+@REGION_1287_1 ds 0h                                                    01-DCCPR
00001258 EBEC D008 0024          00000008   2007+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000125E B904 00CF                          2008+         lgr   12,15               set base reg                         01-DCCPR
                        00001258            2009+         using @REGION_1287_1,12                                        01-DCCPR
                                            2010 * ******* End of Prologue
                                            2011 * *
                                            2012 * ***           if (((!slice->seg)))
00001262 E3F0 1000 0004          00000000   2013          LG    15,0(0,1)   ; slice
00001268 E310 F008 0002          00000008   2014          LTG   1,8(0,15)   ; offset of seg in rd_slice_s
0000126E 4770 C02E               00001286   2015          BNZ   @L103
                                            2016 * ***                   return ((slice)->end - (slice)->start);
00001272 E310 F020 0004          00000020   2017          LG    1,32(0,15)  ; offset of end in rd_slice_s
00001278 E310 F018 000B          00000018   2018          SLG   1,24(0,15)
0000127E B904 00F1                          2019          LGR   15,1
00001282 47F0 C04A               000012A2   2020          B     @ret_lab_1287
00001286                                    2021 @L103    DS    0H
                                            2022 * ***
                                            2023 * ***           return (slice->seg->seg_absof + slice->rof) - slice->s\
                                            2024 * tart;
00001286 E310 F008 0004          00000008   2025          LG    1,8(0,15)   ; offset of seg in rd_slice_s
0000128C E310 1028 0004          00000028   2026          LG    1,40(0,1)   ; offset of seg_absof in rd_segment_s
00001292 E310 F010 000A          00000010   2027          ALG   1,16(0,15)
00001298 E310 F018 000B          00000018   2028          SLG   1,24(0,15)
0000129E B904 00F1                          2029          LGR   15,1
                                                                                                                           Page   48 
  Active Usings: @REGION_1287_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2030 * ***   }
000012A2                                    2031 @ret_lab_1287 DS 0H
                                            2032 * * **** Start of Epilogue
                                            2033          DCCEPIL
000012A2                                    2034+         ds 0h                                                          01-DCCEP
                                            2035+* Epilog
                                            2036+* Epilog
000012A2 E3E0 D008 0004          00000008   2037+         lg    14,8(,13) restore the reg                                01-DCCEP
000012A8 EB1C D020 0004          00000020   2038+         lmg   1,12,32(13)                                              01-DCCEP
000012AE 07FE                               2039+         br   14                                                        01-DCCEP
                                            2040+* End of Epilog
                                            2041 * * **** End of Epilogue
                                            2042          DROP  12
                                            2043 *
                                            2044 *   DSECT for automatic variables in "rd_slice_offset"
                                            2045 *      (FUNCTION #1287)
                                            2046 *
00000000                00000000 000000A8   2047 @AUTO#rd_slice_offset DSECT
00000000                                    2048          DS    XL168
                                            2049 *
000012B0                00000000 00010480   2050 @CODE    CSECT
                                            2051 *
                                            2052 *
                                            2053 *
                                            2054 * ....... start of rd_kafka_ApiKey2str
000012B0                                    2055 @LNAME1314 DS  0H
000012B0 00000013                           2056          DC    X'00000013'
000012B4 99846D9281869281                   2057          DC    C'rd_kafka_ApiKey2str'
000012C7 00                                 2058          DC    X'00'
                                            2059 rd_kafka_$Api$Key2str DCCPRLG CINDEX=1314,BASER=12,FRAME=200,ENTRY=NO,A*
                                                                RCH=ZARCH,LNAMEADDR=@LNAME1314
                                            2060          macro
                                            2061          dccextrn &m
                                            2062          gblc    &$dccext(1000)
                                            2063          gbla    &$dccexti
                                            2064          lcla    &i
                                            2065 &$dccext(&$dccexti+1) setc    '&m'
                                            2066 &i       seta    1
                                            2067 .loop    aif    (&i gt &$dccexti).around
                                            2068          aif    ('&$dccext(&i)' eq '&m').getout
                                            2069 &i       seta    &i+1
                                            2070          ago     .loop
                                            2071 .around  anop
                                            2072 &$dccexti seta &$dccexti+1
                                            2073          extrn  &m
                                            2074 .getout  anop
                                            2075          mend
000012C8                                    2076+$eye0050    ds    0d                                                    02-DCCCA
000012C8 C4C3C3                             2077+         dc cl3'DCC'                                                    02-DCCCA
000012CB 01                                 2078+         dc xl1'01' format one                                          02-DCCCA
000012CC 00000000                           2079+         dc a(0)                                                        02-DCCCA
000012D0 000000000000133A                   2080+         dc ad(@PER_1314)                                               02-DCCCA
                                                                                                                           Page   49 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000012D8 00000000000000C8                   2081+         dc ad(200)                                                     02-DCCCA
000012E0 0000000000000000                   2082+         dc ad(0)                                                       02-DCCCA
000012E8 0000000000001000                   2083+         dc ad(4096)                                                    02-DCCCA
000012F0 20                                 2084+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000012F1 03                                 2085+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000012F2 03                                 2086+         dc al1(3)                                                      02-DCCCA
000012F3 08                                 2087+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000012F4 00                                 2088+         dc bl.8'00000000'                                              02-DCCCA
000012F5 000000                             2089+         dc al3(0)                                                      02-DCCCA
000012F8 00000000000012B0                   2090+         dc ad(@LNAME1314)                                              02-DCCCA
00001300                                    2091+         ds 0d                                                          02-DCCCA
00001300 00000000000012C8                   2092+         dc ad($eye0050)                                                02-DCCCA
00001308 0000000000000000                   2093+         dc ad(0)                                                       02-DCCCA
00001310                                    2094+         ds    0d                                                       01-DCCPR
00001310                                    2095+rd_kafka_$Api$Key2str ds 0d                                             01-DCCPR
00001310                                    2096+@REGION_1314_1 ds 0h                                                    01-DCCPR
00001310 EBEC D008 0024          00000008   2097+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00001316 E3E0 D088 0004          00000088   2098+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000131C E3C0 D090 0004          00000090   2099+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00001322 B904 002E                          2100+         lgr   2,14                copy addr of our savearea            01-DCCPR
00001326 E3B0 C018 0004          00000018   2101+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000132C A7EB 00C8               000000C8   2102+         aghi  14,200              increase by frame size               01-DCCPR
00001330 E3E0 C020 0021          00000020   2103+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00001336 4720 B020               00000020   2104+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000133A                                    2105+@PER_1314 ds   0h                                                       01-DCCPR
0000133A EBDE 2080 0024          00000080   2106+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00001340 E3C0 2090 0024          00000090   2107+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00001346 B904 00D2                          2108+         lgr   13,2                set real frame pointer               01-DCCPR
0000134A B904 00CF                          2109+         lgr   12,15               set base reg                         01-DCCPR
                        00001310            2110+         using @REGION_1314_1,12                                        01-DCCPR
                                            2111          DCCPRV REG=15     ; Get PRV from DVT
0000134E E3F0 B008 0004          00000008   2112+         LG 15,8(0,11)                                                  01-DCCPR
                                            2113 * ******* End of Prologue
                                            2114 * *
                                            2115 * ***           static const char *names[] = {
                                            2116 * ***                   [0] = "Produce",
                                            2117 * ***                   [1] = "Fetch",
                                            2118 * ***                   [2] = "Offset",
                                            2119 * ***                   [3] = "Metadata",
                                            2120 * ***                   [4] = "LeaderAndIsr",
                                            2121 * ***                   [5] = "StopReplica",
                                            2122 * ***                   [6] = "UpdateMetadata",
                                            2123 * ***                   [7] = "ControlledShutdown",
                                            2124 * ***                   [8] = "OffsetCommit",
                                            2125 * ***                   [9] = "OffsetFetch",
                                            2126 * ***                   [10] = "FindCoordinator",
                                            2127 * ***                   [11] = "JoinGroup",
                                            2128 * ***                   [12] = "Heartbeat",
                                            2129 * ***                   [13] = "LeaveGroup",
                                            2130 * ***                   [14] = "SyncGroup",
                                            2131 * ***                   [15] = "DescribeGroups",
                                            2132 * ***                   [16] = "ListGroups",
                                                                                                                           Page   50 
  Active Usings: @REGION_1314_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2133 * ***                   [17] = "SaslHandshake",
                                            2134 * ***                   [18] = "ApiVersion",
                                            2135 * ***                   [19] = "CreateTopics",
                                            2136 * ***                   [20] = "DeleteTopics",
                                            2137 * ***                   [21] = "DeleteRecords",
                                            2138 * ***                   [22] = "InitProducerId",
                                            2139 * ***                   [23] = "OffsetForLeaderEpoch",
                                            2140 * ***                   [24] = "AddPartitionsToTxn",
                                            2141 * ***                   [25] = "AddOffsetsToTxn",
                                            2142 * ***                   [26] = "EndTxn",
                                            2143 * ***                   [27] = "WriteTxnMarkers",
                                            2144 * ***                   [28] = "TxnOffsetCommit",
                                            2145 * ***                   [29] = "DescribeAcls",
                                            2146 * ***                   [30] = "CreateAcls",
                                            2147 * ***                   [31] = "DeleteAcls",
                                            2148 * ***                   [32] = "DescribeConfigs",
                                            2149 * ***                   [33] = "AlterConfigs",
                                            2150 * ***                   [34] = "AlterReplicaLogDirs",
                                            2151 * ***                   [35] = "DescribeLogDirs",
                                            2152 * ***                   [36] = "SaslAuthenticate",
                                            2153 * ***                   [37] = "CreatePartitions",
                                            2154 * ***                   [38] = "CreateDelegationToken",
                                            2155 * ***                   [39] = "RenewDelegationToken",
                                            2156 * ***                   [40] = "ExpireDelegationToken",
                                            2157 * ***                   [41] = "DescribeDelegationToken",
                                            2158 * ***                   [42] = "DeleteGroups",
                                            2159 * ***                   [43] = "ElectLeadersRequest",
                                            2160 * ***                   [44] =
                                            2161 * ***                   "IncrementalAlterConfigsRequest",
                                            2162 * ***                   [45] =
                                            2163 * ***                   "AlterPartitionReassignmentsRequest",
                                            2164 * ***                   [46] =
                                            2165 * ***                   "ListPartitionReassignmentsRequest",
                                            2166 * ***                   [47] = "OffsetDeleteRequest",
                                            2167 * ***                   [48] =
                                            2168 * ***                   "DescribeClientQuotasRequest",
                                            2169 * ***                   [49] =
                                            2170 * ***                   "AlterClientQuotasRequest",
                                            2171 * ***                   [50] =
                                            2172 * ***                   "DescribeUserScramCredentialsRequest",
                                            2173 * ***                   [51] =
                                            2174 * ***                   "AlterUserScramCredentialsRequest",
                                            2175 * ***                   [52] = "VoteRequest",
                                            2176 * ***                   [53] = "BeginQuorumEpochRequest",
                                            2177 * ***                   [54] = "EndQuorumEpochRequest",
                                            2178 * ***                   [55] = "DescribeQuorumRequest",
                                            2179 * ***                   [56] = "AlterIsrRequest",
                                            2180 * ***                   [57] = "UpdateFeaturesRequest",
                                            2181 * ***                   [58] = "EnvelopeRequest",
                                            2182 * ***           };
                                            2183 * ***           static  char ret[64];
                                            2184 * ***
                                                                                                                           Page   51 
  Active Usings: @REGION_1314_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2185 * ***           if (ApiKey < 0 || ApiKey >= (int)(sizeof((names)) / si\
                                            2186 * zeof(*(names))) ||
00001354 4820 1006               00000006   2187          LH    2,6(0,1)    ; ApiKey
00001358 1222                               2188          LTR   2,2
0000135A 4740 C07A               0000138A   2189          BL    @L119
0000135E 4820 1006               00000006   2190          LH    2,6(0,1)    ; ApiKey
00001362 A72E 003B               0000003B   2191          CHI   2,59
00001366 47B0 C07A               0000138A   2192          BNL   @L119
0000136A                                    2193 @L117    DS    0H
                                            2194 * ***               !names[ApiKey]) {
0000136A E320 1006 0015          00000006   2195          LGH   2,6(0,1)    ; ApiKey
00001370 E330 C0CC 0014          000013DC   2196          LGF   3,@lit_1314_50
00001376 4133 F000               00000000   2197          LA    3,0(3,15)
0000137A EB22 0003 000D          00000003   2198          SLLG  2,2,3(0)    ; *0x8
00001380 E322 3220 0002          00000220   2199          LTG   2,544(2,3)
00001386 4770 C0E0               000013F0   2200          BNZ   @L118
0000138A                                    2201 @L119    DS    0H
                                            2202 * ***                   snprintf(ret, sizeof(ret), "Unknown-%hd?", Api\
                                            2203 * Key);
0000138A E320 C0CC 0014          000013DC   2204          LGF   2,@lit_1314_50
00001390 4122 F000               00000000   2205          LA    2,0(2,15)
00001394 41F0 23F8               000003F8   2206          LA    15,1016(0,2)
00001398 E3F0 D0A8 0024          000000A8   2207          STG   15,168(0,13)
0000139E E548 D0B0 0040          000000B0   2208          MVGHI 176(13),64
000013A4 E3F0 C0D8 0004          000013E8   2209          LG    15,@lit_1314_52
000013AA 41F0 F048               00000048   2210          LA    15,72(0,15)
000013AE E3F0 D0B8 0024          000000B8   2211          STG   15,184(0,13)
000013B4 48F0 1006               00000006   2212          LH    15,6(0,1)   ; ApiKey
000013B8 B914 00FF                          2213          LGFR  15,15
000013BC E3F0 D0C0 0024          000000C0   2214          STG   15,192(0,13)
000013C2 4110 D0A8               000000A8   2215          LA    1,168(0,13)
000013C6 E3F0 C0D0 0004          000013E0   2216          LG    15,@lit_1314_53 ; snprintf
000013CC                                    2217 @@gen_label67 DS    0H
000013CC 05EF                               2218          BALR  14,15
000013CE                                    2219 @@gen_label68 DS    0H
                                            2220 * ***                   return ret;
000013CE 41F0 23F8               000003F8   2221          LA    15,1016(0,2)
000013D2 47F0 C0F2               00001402   2222          B     @ret_lab_1314
000013D8                                    2223          DS    0D
000013D8 000000C8                           2224 @FRAMESIZE_1314 DC F'200'
000013DC 00000000                           2225 @lit_1314_50 DC Q(@@STATIC)
000013E0 0000000000000000                   2226 @lit_1314_53 DC AD(snprintf)
000013E8 0000000000010840                   2227 @lit_1314_52 DC AD(@strings@)
                                            2228 * ***           }
000013F0                                    2229 @L118    DS    0H
                                            2230 * ***
                                            2231 * ***           return names[ApiKey];
000013F0 E3F0 1006 0015          00000006   2232          LGH   15,6(0,1)   ; ApiKey
000013F6 EBFF 0003 000D          00000003   2233          SLLG  15,15,3(0)  ; *0x8
000013FC E3FF 3220 0004          00000220   2234          LG    15,544(15,3)
                                            2235 * ***   }
00001402                                    2236 @ret_lab_1314 DS 0H
                                                                                                                           Page   52 
  Active Usings: @REGION_1314_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2237 * * **** Start of Epilogue
                                            2238          DCCEPIL
00001402                                    2239+         ds 0h                                                          01-DCCEP
                                            2240+* Epilog
00001402 D707 D088 D088 00000088 00000088   2241+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00001408 E3D0 D080 0004          00000080   2242+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000140E E3C0 D090 0004          00000090   2243+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001414 E3B0 C018 0004          00000018   2244+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000141A E3C0 B010 0021          00000010   2245+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00001420 E3E0 D008 0004          00000008   2246+         lg  14,8(0,13)          load up return address                 01-DCCEP
00001426 EB1C D020 0004          00000020   2247+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000142C 078E                               2248+         bcr 8,14                if same dsab, just return              01-DCCEP
0000142E E3F0 D010 0024          00000010   2249+         stg 15,16(0,13)         save return code                       01-DCCEP
00001434 E300 D018 0024          00000018   2250+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000143A E3F0 D090 0004          00000090   2251+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00001440 E3F0 F018 0004          00000018   2252+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00001446 47F0 F040               00000040   2253+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            2254+* End of Epilog
                                            2255 * * **** End of Epilogue
                                            2256          DROP  12
                                            2257 *
                                            2258 *   DSECT for automatic variables in "rd_kafka_ApiKey2str"
                                            2259 *      (FUNCTION #1314)
                                            2260 *
00000000                00000000 000000A8   2261 @AUTO#rd_kafka_$Api$Key2str DSECT
00000000                                    2262          DS    XL168
                                            2263 *
0000144A                00000000 00010480   2264 @CODE    CSECT
                                            2265 *
                                            2266 *
                                            2267 *
                                            2268 * ....... start of rd_kafkap_str_destroy
0000144A                                    2269 @LNAME1316 DS  0H
0000144A 00000015                           2270          DC    X'00000015'
0000144E 99846D9281869281                   2271          DC    C'rd_kafkap_str_destroy'
00001463 00                                 2272          DC    X'00'
                                            2273 rd_kafkap_str_destroy DCCPRLG CINDEX=1316,BASER=12,FRAME=176,ENTRY=NO,A*
                                                                RCH=ZARCH,LNAMEADDR=@LNAME1316
                                            2274          macro
                                            2275          dccextrn &m
                                            2276          gblc    &$dccext(1000)
                                            2277          gbla    &$dccexti
                                            2278          lcla    &i
                                            2279 &$dccext(&$dccexti+1) setc    '&m'
                                            2280 &i       seta    1
                                            2281 .loop    aif    (&i gt &$dccexti).around
                                            2282          aif    ('&$dccext(&i)' eq '&m').getout
                                            2283 &i       seta    &i+1
                                            2284          ago     .loop
                                            2285 .around  anop
                                            2286 &$dccexti seta &$dccexti+1
                                            2287          extrn  &m
                                                                                                                           Page   53 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2288 .getout  anop
                                            2289          mend
00001468                                    2290+$eye0054    ds    0d                                                    02-DCCCA
00001468 C4C3C3                             2291+         dc cl3'DCC'                                                    02-DCCCA
0000146B 01                                 2292+         dc xl1'01' format one                                          02-DCCCA
0000146C 00000000                           2293+         dc a(0)                                                        02-DCCCA
00001470 00000000000014DA                   2294+         dc ad(@PER_1316)                                               02-DCCCA
00001478 00000000000000B0                   2295+         dc ad(176)                                                     02-DCCCA
00001480 0000000000000000                   2296+         dc ad(0)                                                       02-DCCCA
00001488 0000000000001000                   2297+         dc ad(4096)                                                    02-DCCCA
00001490 20                                 2298+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001491 03                                 2299+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001492 03                                 2300+         dc al1(3)                                                      02-DCCCA
00001493 08                                 2301+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001494 00                                 2302+         dc bl.8'00000000'                                              02-DCCCA
00001495 000000                             2303+         dc al3(0)                                                      02-DCCCA
00001498 000000000000144A                   2304+         dc ad(@LNAME1316)                                              02-DCCCA
000014A0                                    2305+         ds 0d                                                          02-DCCCA
000014A0 0000000000001468                   2306+         dc ad($eye0054)                                                02-DCCCA
000014A8 0000000000000000                   2307+         dc ad(0)                                                       02-DCCCA
000014B0                                    2308+         ds    0d                                                       01-DCCPR
000014B0                                    2309+rd_kafkap_str_destroy ds 0d                                             01-DCCPR
000014B0                                    2310+@REGION_1316_1 ds 0h                                                    01-DCCPR
000014B0 EBEC D008 0024          00000008   2311+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000014B6 E3E0 D088 0004          00000088   2312+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000014BC E3C0 D090 0004          00000090   2313+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000014C2 B904 002E                          2314+         lgr   2,14                copy addr of our savearea            01-DCCPR
000014C6 E3B0 C018 0004          00000018   2315+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000014CC A7EB 00B0               000000B0   2316+         aghi  14,176              increase by frame size               01-DCCPR
000014D0 E3E0 C020 0021          00000020   2317+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000014D6 4720 B020               00000020   2318+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000014DA                                    2319+@PER_1316 ds   0h                                                       01-DCCPR
000014DA EBDE 2080 0024          00000080   2320+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000014E0 E3C0 2090 0024          00000090   2321+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000014E6 B904 00D2                          2322+         lgr   13,2                set real frame pointer               01-DCCPR
000014EA B904 00CF                          2323+         lgr   12,15               set base reg                         01-DCCPR
                        000014B0            2324+         using @REGION_1316_1,12                                        01-DCCPR
                                            2325 * ******* End of Prologue
                                            2326 * *
                                            2327 * ***      rd_free(kstr);
000014EE E3F0 1000 0004          00000000   2328          LG    15,0(0,1)   ; kstr
000014F4 E3F0 D0A8 0024          000000A8   2329          STG   15,168(0,13)
000014FA 4110 D0A8               000000A8   2330          LA    1,168(0,13)
000014FE E3F0 C0A8 0004          00001558   2331          LG    15,@lit_1316_55 ; rd_free
00001504                                    2332 @@gen_label69 DS    0H
00001504 05EF                               2333          BALR  14,15
00001506                                    2334 @@gen_label70 DS    0H
                                            2335 * ***   }
00001506                                    2336 @ret_lab_1316 DS 0H
                                            2337 * * **** Start of Epilogue
                                            2338          DCCEPIL
00001506                                    2339+         ds 0h                                                          01-DCCEP
                                                                                                                           Page   54 
  Active Usings: @REGION_1316_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2340+* Epilog
00001506 D707 D088 D088 00000088 00000088   2341+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000150C E3D0 D080 0004          00000080   2342+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00001512 E3C0 D090 0004          00000090   2343+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001518 E3B0 C018 0004          00000018   2344+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000151E E3C0 B010 0021          00000010   2345+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00001524 E3E0 D008 0004          00000008   2346+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000152A EB1C D020 0004          00000020   2347+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00001530 078E                               2348+         bcr 8,14                if same dsab, just return              01-DCCEP
00001532 E3F0 D010 0024          00000010   2349+         stg 15,16(0,13)         save return code                       01-DCCEP
00001538 E300 D018 0024          00000018   2350+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000153E E3F0 D090 0004          00000090   2351+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00001544 E3F0 F018 0004          00000018   2352+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000154A 47F0 F040               00000040   2353+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            2354+* End of Epilog
                                            2355 * * **** End of Epilogue
00001550                                    2356          DS    0D
00001550 000000B0                           2357 @FRAMESIZE_1316 DC F'176'
00001554 00000000
00001558 0000000000000B78                   2358 @lit_1316_55 DC AD(rd_free)
                                            2359          DROP  12
                                            2360 *
                                            2361 *   DSECT for automatic variables in "rd_kafkap_str_destroy"
                                            2362 *      (FUNCTION #1316)
                                            2363 *
00000000                00000000 000000A8   2364 @AUTO#rd_kafkap_str_destroy DSECT
00000000                                    2365          DS    XL168
                                            2366 *
00001560                00000000 00010480   2367 @CODE    CSECT
                                            2368 *
                                            2369 *
                                            2370 *
                                            2371 * ....... start of rd_kafkap_str_new
00001560                                    2372 @LNAME1317 DS  0H
00001560 00000011                           2373          DC    X'00000011'
00001564 99846D9281869281                   2374          DC    C'rd_kafkap_str_new'
00001575 00                                 2375          DC    X'00'
                                            2376 rd_kafkap_str_new DCCPRLG CINDEX=1317,BASER=12,FRAME=184,ENTRY=NO,ARCH=*
                                                                ZARCH,LNAMEADDR=@LNAME1317
                                            2377          macro
                                            2378          dccextrn &m
                                            2379          gblc    &$dccext(1000)
                                            2380          gbla    &$dccexti
                                            2381          lcla    &i
                                            2382 &$dccext(&$dccexti+1) setc    '&m'
                                            2383 &i       seta    1
                                            2384 .loop    aif    (&i gt &$dccexti).around
                                            2385          aif    ('&$dccext(&i)' eq '&m').getout
                                            2386 &i       seta    &i+1
                                            2387          ago     .loop
                                            2388 .around  anop
                                            2389 &$dccexti seta &$dccexti+1
                                                                                                                           Page   55 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2390          extrn  &m
                                            2391 .getout  anop
                                            2392          mend
00001578                                    2393+$eye0057    ds    0d                                                    02-DCCCA
00001578 C4C3C3                             2394+         dc cl3'DCC'                                                    02-DCCCA
0000157B 01                                 2395+         dc xl1'01' format one                                          02-DCCCA
0000157C 00000000                           2396+         dc a(0)                                                        02-DCCCA
00001580 00000000000015EA                   2397+         dc ad(@PER_1317)                                               02-DCCCA
00001588 00000000000000B8                   2398+         dc ad(184)                                                     02-DCCCA
00001590 0000000000000000                   2399+         dc ad(0)                                                       02-DCCCA
00001598 0000000000001000                   2400+         dc ad(4096)                                                    02-DCCCA
000015A0 20                                 2401+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000015A1 03                                 2402+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000015A2 03                                 2403+         dc al1(3)                                                      02-DCCCA
000015A3 08                                 2404+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000015A4 00                                 2405+         dc bl.8'00000000'                                              02-DCCCA
000015A5 000000                             2406+         dc al3(0)                                                      02-DCCCA
000015A8 0000000000001560                   2407+         dc ad(@LNAME1317)                                              02-DCCCA
000015B0                                    2408+         ds 0d                                                          02-DCCCA
000015B0 0000000000001578                   2409+         dc ad($eye0057)                                                02-DCCCA
000015B8 0000000000000000                   2410+         dc ad(0)                                                       02-DCCCA
000015C0                                    2411+         ds    0d                                                       01-DCCPR
000015C0                                    2412+rd_kafkap_str_new ds 0d                                                 01-DCCPR
000015C0                                    2413+@REGION_1317_1 ds 0h                                                    01-DCCPR
000015C0 EBEC D008 0024          00000008   2414+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000015C6 E3E0 D088 0004          00000088   2415+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000015CC E3C0 D090 0004          00000090   2416+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000015D2 B904 002E                          2417+         lgr   2,14                copy addr of our savearea            01-DCCPR
000015D6 E3B0 C018 0004          00000018   2418+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000015DC A7EB 00B8               000000B8   2419+         aghi  14,184              increase by frame size               01-DCCPR
000015E0 E3E0 C020 0021          00000020   2420+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000015E6 4720 B020               00000020   2421+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000015EA                                    2422+@PER_1317 ds   0h                                                       01-DCCPR
000015EA EBDE 2080 0024          00000080   2423+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000015F0 E3C0 2090 0024          00000090   2424+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000015F6 B904 00D2                          2425+         lgr   13,2                set real frame pointer               01-DCCPR
000015FA B904 00CF                          2426+         lgr   12,15               set base reg                         01-DCCPR
                        000015C0            2427+         using @REGION_1317_1,12                                        01-DCCPR
                                            2428 * ******* End of Prologue
                                            2429 * *
000015FE E330 1000 0004          00000000   2430          LG    3,0(0,1)    ; str
00001604 5820 100C               0000000C   2431          L     2,12(0,1)   ; len
                                            2432 * ***      rd_kafkap_str_t *kstr;
                                            2433 * ***      int16_t klen;
                                            2434 * ***
                                            2435 * ***      if (!str)
00001608 B902 00F3                          2436          LTGR  15,3
0000160C 4770 C06E               0000162E   2437          BNZ   @L122
                                            2438 * ***         len = -1;
00001610 A728 FFFF               0000FFFF   2439          LHI   2,-1        ; -1
00001614 47F0 C08C               0000164C   2440          B     @L123
00001618                                    2441          DS    0D
                                                                                                                           Page   56 
  Active Usings: @REGION_1317_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001618 000000B8                           2442 @FRAMESIZE_1317 DC F'184'
0000161C 00000000
00001620 0000000000000898                   2443 @lit_1317_59 DC AD(rd_malloc)
00001628 D200 4000 3000 00000000 00000000   2444 @lit_1317_61          MVC 0(1,4),0(3)
                                            2445 * ***      else if (len == -1)
0000162E                                    2446 @L122    DS    0H
0000162E A72E FFFF               0000FFFF   2447          CHI   2,-1
00001632 4770 C08C               0000164C   2448          BNE   @L123
                                            2449 * ***         len = (int)__strlen(str);
00001636 B904 00F3                          2450          LGR   15,3
0000163A A709 0000               00000000   2451          LGHI  0,0
0000163E                                    2452 @@gen_label73 DS 0H
0000163E B25E 000F                          2453          SRST  0,15
00001642 4710 C07E               0000163E   2454          BC  1,@@gen_label73
00001646 B90B 0003                          2455          SLGR  0,3
0000164A 1820                               2456          LR    2,0         ; len
0000164C                                    2457 @L124    DS    0H
                                            2458 * ***
                                            2459 * ***      kstr = (rd_kafkap_str_t *)rd_malloc(sizeof(*kstr) + 2 +
0000164C                                    2460 @L123    DS    0H
                                            2461 * ***            (len == -1 ? 0 : len + 1));
0000164C A72E FFFF               0000FFFF   2462          CHI   2,-1
00001650 4770 C09C               0000165C   2463          BNE   @L125
00001654 A7F8 0000               00000000   2464          LHI   15,0        ; 0
00001658 47F0 C0A2               00001662   2465          B     @L126
0000165C                                    2466 @L125    DS    0H
0000165C 18F2                               2467          LR    15,2
0000165E A7FA 0001               00000001   2468          AHI   15,1
00001662                                    2469 @L126    DS    0H
00001662 B914 00FF                          2470          LGFR  15,15
00001666 A7FB 0012               00000012   2471          AGHI  15,18
0000166A E3F0 D0B0 0024          000000B0   2472          STG   15,176(0,13)
00001670 4110 D0B0               000000B0   2473          LA    1,176(0,13)
00001674 E3F0 C060 0004          00001620   2474          LG    15,@lit_1317_59 ; rd_malloc
0000167A                                    2475 @@gen_label75 DS    0H
0000167A 05EF                               2476          BALR  14,15
0000167C                                    2477 @@gen_label76 DS    0H
                                            2478 * ***      kstr->len = len;
0000167C 5020 F000               00000000   2479          ST    2,0(0,15)   ; kstr
                                            2480 * ***
                                            2481 * ***
                                            2482 * ***      klen = (len);
00001680 4020 D0A8               000000A8   2483          STH   2,168(0,13) ; klen
                                            2484 * ***      __memcpy(kstr+1,&klen,2);
00001684 4110 D0A8               000000A8   2485          LA    1,168(0,13)
00001688 4140 F010               00000010   2486          LA    4,16(0,15)
0000168C D201 4000 1000 00000000 00000000   2487          MVC   0(2,4),0(1)
                                            2488 * ***
                                            2489 * ***
                                            2490 * ***      if (len == -1)
00001692 A72E FFFF               0000FFFF   2491          CHI   2,-1
00001696 4770 C0E8               000016A8   2492          BNE   @L127
                                                                                                                           Page   57 
  Active Usings: @REGION_1317_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2493 * ***         kstr->str = ((void *)0);
0000169A A719 0000               00000000   2494          LGHI  1,0         ; 0
0000169E E310 F008 0024          00000008   2495          STG   1,8(0,15)   ; offset of str in rd_kafkap_str_s
000016A4 47F0 C140               00001700   2496          B     @L128
                                            2497 * ***      else {
000016A8                                    2498 @L127    DS    0H
                                            2499 * ***         kstr->str = ((const char *)(kstr+1))+2;
000016A8 4110 F012               00000012   2500          LA    1,18(0,15)
000016AC E310 F008 0024          00000008   2501          STG   1,8(0,15)   ; offset of str in rd_kafkap_str_s
                                            2502 * ***         __memcpy((void *)kstr->str,str,len);
000016B2 B914 0012                          2503          LGFR  1,2
000016B6 E340 F008 0004          00000008   2504          LG    4,8(0,15)
000016BC B902 0011                          2505          LTGR  1,1
000016C0 4780 C12E               000016EE   2506          BZ    @@gen_label80
000016C4 A71B FFFF               0000FFFF   2507          AGHI  1,-1
000016C8 EB51 0008 000A          00000008   2508          SRAG  5,1,8(0)
000016CE B902 0055                          2509          LTGR  5,5
000016D2 4780 C12A               000016EA   2510          BZ    @@gen_label79
000016D6                                    2511 @@gen_label78 DS 0H
000016D6 D2FF 4000 3000 00000000 00000000   2512          MVC   0(256,4),0(3)
000016DC 4140 4100               00000100   2513          LA    4,256(0,4)
000016E0 4130 3100               00000100   2514          LA    3,256(0,3)
000016E4 E350 C116 0046          000016D6   2515          BCTG  5,@@gen_label78
000016EA                                    2516 @@gen_label79 DS 0H
000016EA 4410 C068               00001628   2517          EX    1,@lit_1317_61
000016EE                                    2518 @@gen_label80 DS 0H
                                            2519 * ***         ((char *)kstr->str)[len] = '\0';
000016EE E310 F008 0004          00000008   2520          LG    1,8(0,15)   ; offset of str in rd_kafkap_str_s
000016F4 B914 0022                          2521          LGFR  2,2
000016F8 4112 1000               00000000   2522          LA    1,0(2,1)
000016FC 9200 1000      00000000 00000000   2523          MVI   0(1),0
                                            2524 * ***      }
00001700                                    2525 @L128    DS    0H
                                            2526 * ***
                                            2527 * ***      return kstr;
                                            2528 * ***   }
                                            2529 * * **** Start of Epilogue
                                            2530          DCCEPIL
00001700                                    2531+         ds 0h                                                          01-DCCEP
                                            2532+* Epilog
00001700 D707 D088 D088 00000088 00000088   2533+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00001706 E3D0 D080 0004          00000080   2534+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000170C E3C0 D090 0004          00000090   2535+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001712 E3B0 C018 0004          00000018   2536+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00001718 E3C0 B010 0021          00000010   2537+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000171E E3E0 D008 0004          00000008   2538+         lg  14,8(0,13)          load up return address                 01-DCCEP
00001724 EB1C D020 0004          00000020   2539+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000172A 078E                               2540+         bcr 8,14                if same dsab, just return              01-DCCEP
0000172C E3F0 D010 0024          00000010   2541+         stg 15,16(0,13)         save return code                       01-DCCEP
00001732 E300 D018 0024          00000018   2542+         stg 0,24(0,13)          save more return code                  01-DCCEP
00001738 E3F0 D090 0004          00000090   2543+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000173E E3F0 F018 0004          00000018   2544+         lg  15,24(0,15)         load dvt address                       01-DCCEP
                                                                                                                           Page   58 
  Active Usings: @REGION_1317_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001744 47F0 F040               00000040   2545+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            2546+* End of Epilog
                                            2547 * * **** End of Epilogue
                                            2548          DROP  12
                                            2549 *
                                            2550 *   DSECT for automatic variables in "rd_kafkap_str_new"
                                            2551 *      (FUNCTION #1317)
                                            2552 *
00000000                00000000 000000AA   2553 @AUTO#rd_kafkap_str_new DSECT
00000000                                    2554          DS    XL168
000000A8                                    2555 rd_kafkap_str_new#klen#0 DS 2XL1 ; klen
                                            2556 *
00001748                00000000 00010480   2557 @CODE    CSECT
                                            2558 *
                                            2559 *
                                            2560 *
                                            2561 * ....... start of rd_kafkap_str_copy
00001748                                    2562 @LNAME1318 DS  0H
00001748 00000012                           2563          DC    X'00000012'
0000174C 99846D9281869281                   2564          DC    C'rd_kafkap_str_copy'
0000175E 00                                 2565          DC    X'00'
                                            2566 rd_kafkap_str_copy DCCPRLG CINDEX=1318,BASER=12,FRAME=184,ENTRY=NO,ARCH*
                                                                =ZARCH,LNAMEADDR=@LNAME1318
                                            2567          macro
                                            2568          dccextrn &m
                                            2569          gblc    &$dccext(1000)
                                            2570          gbla    &$dccexti
                                            2571          lcla    &i
                                            2572 &$dccext(&$dccexti+1) setc    '&m'
                                            2573 &i       seta    1
                                            2574 .loop    aif    (&i gt &$dccexti).around
                                            2575          aif    ('&$dccext(&i)' eq '&m').getout
                                            2576 &i       seta    &i+1
                                            2577          ago     .loop
                                            2578 .around  anop
                                            2579 &$dccexti seta &$dccexti+1
                                            2580          extrn  &m
                                            2581 .getout  anop
                                            2582          mend
00001760                                    2583+$eye0060    ds    0d                                                    02-DCCCA
00001760 C4C3C3                             2584+         dc cl3'DCC'                                                    02-DCCCA
00001763 01                                 2585+         dc xl1'01' format one                                          02-DCCCA
00001764 00000000                           2586+         dc a(0)                                                        02-DCCCA
00001768 00000000000017D2                   2587+         dc ad(@PER_1318)                                               02-DCCCA
00001770 00000000000000B8                   2588+         dc ad(184)                                                     02-DCCCA
00001778 0000000000000000                   2589+         dc ad(0)                                                       02-DCCCA
00001780 0000000000001000                   2590+         dc ad(4096)                                                    02-DCCCA
00001788 20                                 2591+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001789 03                                 2592+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000178A 03                                 2593+         dc al1(3)                                                      02-DCCCA
0000178B 08                                 2594+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000178C 00                                 2595+         dc bl.8'00000000'                                              02-DCCCA
                                                                                                                           Page   59 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000178D 000000                             2596+         dc al3(0)                                                      02-DCCCA
00001790 0000000000001748                   2597+         dc ad(@LNAME1318)                                              02-DCCCA
00001798                                    2598+         ds 0d                                                          02-DCCCA
00001798 0000000000001760                   2599+         dc ad($eye0060)                                                02-DCCCA
000017A0 0000000000000000                   2600+         dc ad(0)                                                       02-DCCCA
000017A8                                    2601+         ds    0d                                                       01-DCCPR
000017A8                                    2602+rd_kafkap_str_copy ds 0d                                                01-DCCPR
000017A8                                    2603+@REGION_1318_1 ds 0h                                                    01-DCCPR
000017A8 EBEC D008 0024          00000008   2604+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000017AE E3E0 D088 0004          00000088   2605+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000017B4 E3C0 D090 0004          00000090   2606+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000017BA B904 002E                          2607+         lgr   2,14                copy addr of our savearea            01-DCCPR
000017BE E3B0 C018 0004          00000018   2608+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000017C4 A7EB 00B8               000000B8   2609+         aghi  14,184              increase by frame size               01-DCCPR
000017C8 E3E0 C020 0021          00000020   2610+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000017CE 4720 B020               00000020   2611+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000017D2                                    2612+@PER_1318 ds   0h                                                       01-DCCPR
000017D2 EBDE 2080 0024          00000080   2613+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000017D8 E3C0 2090 0024          00000090   2614+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000017DE B904 00D2                          2615+         lgr   13,2                set real frame pointer               01-DCCPR
000017E2 B904 00CF                          2616+         lgr   12,15               set base reg                         01-DCCPR
                        000017A8            2617+         using @REGION_1318_1,12                                        01-DCCPR
                                            2618 * ******* End of Prologue
                                            2619 * *
                                            2620 * ***           return rd_kafkap_str_new(src->str, src->len);
000017E6 E3F0 1000 0004          00000000   2621          LG    15,0(0,1)   ; src
000017EC E310 F008 0004          00000008   2622          LG    1,8(0,15)
000017F2 E310 D0A8 0024          000000A8   2623          STG   1,168(0,13)
000017F8 E3F0 F000 0014          00000000   2624          LGF   15,0(0,15)
000017FE E3F0 D0B0 0024          000000B0   2625          STG   15,176(0,13)
00001804 4110 D0A8               000000A8   2626          LA    1,168(0,13)
00001808 E3F0 C0B8 0004          00001860   2627          LG    15,@lit_1318_63 ; rd_kafkap_str_new
0000180E                                    2628 @@gen_label81 DS    0H
0000180E 05EF                               2629          BALR  14,15
00001810                                    2630 @@gen_label82 DS    0H
                                            2631 * ***   }
                                            2632 * * **** Start of Epilogue
                                            2633          DCCEPIL
00001810                                    2634+         ds 0h                                                          01-DCCEP
                                            2635+* Epilog
00001810 D707 D088 D088 00000088 00000088   2636+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00001816 E3D0 D080 0004          00000080   2637+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000181C E3C0 D090 0004          00000090   2638+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001822 E3B0 C018 0004          00000018   2639+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00001828 E3C0 B010 0021          00000010   2640+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000182E E3E0 D008 0004          00000008   2641+         lg  14,8(0,13)          load up return address                 01-DCCEP
00001834 EB1C D020 0004          00000020   2642+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000183A 078E                               2643+         bcr 8,14                if same dsab, just return              01-DCCEP
0000183C E3F0 D010 0024          00000010   2644+         stg 15,16(0,13)         save return code                       01-DCCEP
00001842 E300 D018 0024          00000018   2645+         stg 0,24(0,13)          save more return code                  01-DCCEP
00001848 E3F0 D090 0004          00000090   2646+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000184E E3F0 F018 0004          00000018   2647+         lg  15,24(0,15)         load dvt address                       01-DCCEP
                                                                                                                           Page   60 
  Active Usings: @REGION_1318_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001854 47F0 F040               00000040   2648+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            2649+* End of Epilog
                                            2650 * * **** End of Epilogue
00001858                                    2651          DS    0D
00001858 000000B8                           2652 @FRAMESIZE_1318 DC F'184'
0000185C 00000000
00001860 00000000000015C0                   2653 @lit_1318_63 DC AD(rd_kafkap_str_new)
                                            2654          DROP  12
                                            2655 *
                                            2656 *   DSECT for automatic variables in "rd_kafkap_str_copy"
                                            2657 *      (FUNCTION #1318)
                                            2658 *
00000000                00000000 000000A8   2659 @AUTO#rd_kafkap_str_copy DSECT
00000000                                    2660          DS    XL168
                                            2661 *
00001868                00000000 00010480   2662 @CODE    CSECT
                                            2663 *
                                            2664 *
                                            2665 *
                                            2666 * ....... start of rd_kafkap_str_cmp_str
00001868                                    2667 @LNAME1320 DS  0H
00001868 00000015                           2668          DC    X'00000015'
0000186C 99846D9281869281                   2669          DC    C'rd_kafkap_str_cmp_str'
00001881 00                                 2670          DC    X'00'
                                            2671 rd_kafkap_str_cmp_str DCCPRLG CINDEX=1320,BASER=12,FRAME=176,SAVEAREA=N*
                                                                O,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1320
                                            2672          macro
                                            2673          dccextrn &m
                                            2674          gblc    &$dccext(1000)
                                            2675          gbla    &$dccexti
                                            2676          lcla    &i
                                            2677 &$dccext(&$dccexti+1) setc    '&m'
                                            2678 &i       seta    1
                                            2679 .loop    aif    (&i gt &$dccexti).around
                                            2680          aif    ('&$dccext(&i)' eq '&m').getout
                                            2681 &i       seta    &i+1
                                            2682          ago     .loop
                                            2683 .around  anop
                                            2684 &$dccexti seta &$dccexti+1
                                            2685          extrn  &m
                                            2686 .getout  anop
                                            2687          mend
00001888                                    2688+$eye0063    ds    0d                                                    02-DCCCA
00001888 C4C3C3                             2689+         dc cl3'DCC'                                                    02-DCCCA
0000188B 01                                 2690+         dc xl1'01' format one                                          02-DCCCA
0000188C 00000000                           2691+         dc a(0)                                                        02-DCCCA
00001890 0000000000000000                   2692+         dc ad(0)                                                       02-DCCCA
00001898 00000000000000B0                   2693+         dc ad(176)                                                     02-DCCCA
000018A0 0000000000000000                   2694+         dc ad(0)                                                       02-DCCCA
000018A8 0000000000001000                   2695+         dc ad(4096)                                                    02-DCCCA
000018B0 20                                 2696+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000018B1 03                                 2697+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
                                                                                                                           Page   61 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000018B2 03                                 2698+         dc al1(3)                                                      02-DCCCA
000018B3 08                                 2699+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000018B4 00                                 2700+         dc bl.8'00000000'                                              02-DCCCA
000018B5 000000                             2701+         dc al3(0)                                                      02-DCCCA
000018B8 0000000000001868                   2702+         dc ad(@LNAME1320)                                              02-DCCCA
000018C0                                    2703+         ds 0d                                                          02-DCCCA
000018C0 0000000000001888                   2704+         dc ad($eye0063)                                                02-DCCCA
000018C8 0000000000000000                   2705+         dc ad(0)                                                       02-DCCCA
000018D0                                    2706+         ds    0d                                                       01-DCCPR
000018D0                                    2707+rd_kafkap_str_cmp_str ds 0d                                             01-DCCPR
000018D0                                    2708+@REGION_1320_1 ds 0h                                                    01-DCCPR
000018D0 EBEC D008 0024          00000008   2709+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000018D6 B904 00CF                          2710+         lgr   12,15               set base reg                         01-DCCPR
                        000018D0            2711+         using @REGION_1320_1,12                                        01-DCCPR
                                            2712 * ******* End of Prologue
                                            2713 * *
                                            2714 * ***      int len = (int)__strlen(str);
000018DA E3F0 1000 0004          00000000   2715          LG    15,0(0,1)   ; a
000018E0 E320 1008 0004          00000008   2716          LG    2,8(0,1)
000018E6 B904 0032                          2717          LGR   3,2
000018EA A709 0000               00000000   2718          LGHI  0,0
000018EE                                    2719 @@gen_label83 DS 0H
000018EE B25E 0002                          2720          SRST  0,2
000018F2 4710 C01E               000018EE   2721          BC  1,@@gen_label83
000018F6 B90B 0003                          2722          SLGR  0,3
                                            2723 * ***      int minlen = ((a->len) < (len) ? (a->len) : (len));
000018FA 5820 F000               00000000   2724          L     2,0(0,15)   ; a
000018FE 1920                               2725          CR    2,0
00001900 47B0 C03C               0000190C   2726          BNL   @L135
00001904 5820 F000               00000000   2727          L     2,0(0,15)   ; a
00001908 47F0 C03E               0000190E   2728          B     @L136
0000190C                                    2729 @L135    DS    0H
0000190C 1820                               2730          LR    2,0
0000190E                                    2731 @L136    DS    0H
                                            2732 * ***      int r = __memcmp(a->str,str,minlen);
0000190E B914 0022                          2733          LGFR  2,2
00001912 E330 F008 0004          00000008   2734          LG    3,8(0,15)
00001918 E310 1008 0004          00000008   2735          LG    1,8(0,1)
0000191E A749 0000               00000000   2736          LGHI  4,0
00001922 B902 0022                          2737          LTGR  2,2
00001926 4780 C086               00001956   2738          BZ    @@gen_label85
0000192A                                    2739 @@gen_label87 DS 0H
0000192A D500 3000 1000 00000000 00000000   2740          CLC   0(1,3),0(1)
00001930 4770 C076               00001946   2741          BNZ   @@gen_label86
00001934 4130 3001               00000001   2742          LA    3,1(0,3)
00001938 4110 1001               00000001   2743          LA    1,1(0,1)
0000193C E320 C05A 0046          0000192A   2744          BCTG  2,@@gen_label87
00001942 47F0 C086               00001956   2745          B     @@gen_label85
00001946                                    2746 @@gen_label86 DS 0H
00001946 4340 3000               00000000   2747          IC    4,0(0,3)
0000194A A739 0000               00000000   2748          LGHI  3,0
0000194E 4330 1000               00000000   2749          IC    3,0(0,1)
                                                                                                                           Page   62 
  Active Usings: @REGION_1320_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001952 B90B 0043                          2750          SLGR  4,3
00001956                                    2751 @@gen_label85 DS 0H
                                            2752 * ***      if (r)
00001956 1244                               2753          LTR   4,4
00001958 4780 C094               00001964   2754          BZ    @L137
                                            2755 * ***         return r;
0000195C B914 00F4                          2756          LGFR  15,4
00001960 47F0 C0C0               00001990   2757          B     @ret_lab_1320
                                            2758 * ***      else
00001964                                    2759 @L137    DS    0H
                                            2760 * ***                   return (int)((a->len) < (len) ? -1 : ((a->len)\
                                            2761 *  > (len)));
00001964 5810 F000               00000000   2762          L     1,0(0,15)   ; a
00001968 1910                               2763          CR    1,0
0000196A 47B0 C0A6               00001976   2764          BNL   @L139
0000196E A7F8 FFFF               0000FFFF   2765          LHI   15,-1       ; -1
00001972 47F0 C0BC               0000198C   2766          B     @L140
00001976                                    2767 @L139    DS    0H
00001976 58F0 F000               00000000   2768          L     15,0(0,15)  ; a
0000197A 19F0                               2769          CR    15,0
0000197C 47D0 C0B8               00001988   2770          BNH   @@gen_label90
00001980 A7F8 0001               00000001   2771          LHI   15,1
00001984 47F0 C0BC               0000198C   2772          B     @@gen_label91
00001988                                    2773 @@gen_label90 DS 0H
00001988 A7F8 0000               00000000   2774          LHI   15,0
0000198C                                    2775 @@gen_label91 DS 0H
0000198C                                    2776 @L140    DS    0H
0000198C B914 00FF                          2777          LGFR  15,15
                                            2778 * ***   }
00001990                                    2779 @ret_lab_1320 DS 0H
                                            2780 * * **** Start of Epilogue
                                            2781          DCCEPIL
00001990                                    2782+         ds 0h                                                          01-DCCEP
                                            2783+* Epilog
                                            2784+* Epilog
00001990 E3E0 D008 0004          00000008   2785+         lg    14,8(,13) restore the reg                                01-DCCEP
00001996 EB1C D020 0004          00000020   2786+         lmg   1,12,32(13)                                              01-DCCEP
0000199C 07FE                               2787+         br   14                                                        01-DCCEP
                                            2788+* End of Epilog
                                            2789 * * **** End of Epilogue
                                            2790          DROP  12
                                            2791 *
                                            2792 *   DSECT for automatic variables in "rd_kafkap_str_cmp_str"
                                            2793 *      (FUNCTION #1320)
                                            2794 *
00000000                00000000 000000AC   2795 @AUTO#rd_kafkap_str_cmp_str DSECT
00000000                                    2796          DS    XL168
000000A8                                    2797 rd_kafkap_str_cmp_str#r#0 DS 1F ; r
000000AC                000000AC 000000A8   2798          ORG   @AUTO#rd_kafkap_str_cmp_str+168
000000A8                                    2799 rd_kafkap_str_cmp_str#minlen#0 DS 1F ; minlen
000000AC                000000AC 000000A8   2800          ORG   @AUTO#rd_kafkap_str_cmp_str+168
000000A8                                    2801 rd_kafkap_str_cmp_str#len#0 DS 1F ; len
                                                                                                                           Page   63 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2802 *
0000199E                00000000 00010480   2803 @CODE    CSECT
                                            2804 *
                                            2805 *
                                            2806 *
                                            2807 * ....... start of rd_strlcpy
0000199E                                    2808 @LNAME1384 DS  0H
0000199E 0000000A                           2809          DC    X'0000000A'
000019A2 99846DA2A3999383                   2810          DC    C'rd_strlcpy'
000019AC 00                                 2811          DC    X'00'
                                            2812 rd_strlcpy DCCPRLG CINDEX=1384,BASER=12,FRAME=176,SAVEAREA=NO,ENTRY=NO,*
                                                                ARCH=ZARCH,LNAMEADDR=@LNAME1384
                                            2813          macro
                                            2814          dccextrn &m
                                            2815          gblc    &$dccext(1000)
                                            2816          gbla    &$dccexti
                                            2817          lcla    &i
                                            2818 &$dccext(&$dccexti+1) setc    '&m'
                                            2819 &i       seta    1
                                            2820 .loop    aif    (&i gt &$dccexti).around
                                            2821          aif    ('&$dccext(&i)' eq '&m').getout
                                            2822 &i       seta    &i+1
                                            2823          ago     .loop
                                            2824 .around  anop
                                            2825 &$dccexti seta &$dccexti+1
                                            2826          extrn  &m
                                            2827 .getout  anop
                                            2828          mend
000019B0                                    2829+$eye0066    ds    0d                                                    02-DCCCA
000019B0 C4C3C3                             2830+         dc cl3'DCC'                                                    02-DCCCA
000019B3 01                                 2831+         dc xl1'01' format one                                          02-DCCCA
000019B4 00000000                           2832+         dc a(0)                                                        02-DCCCA
000019B8 0000000000000000                   2833+         dc ad(0)                                                       02-DCCCA
000019C0 00000000000000B0                   2834+         dc ad(176)                                                     02-DCCCA
000019C8 0000000000000000                   2835+         dc ad(0)                                                       02-DCCCA
000019D0 0000000000001000                   2836+         dc ad(4096)                                                    02-DCCCA
000019D8 20                                 2837+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000019D9 03                                 2838+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000019DA 03                                 2839+         dc al1(3)                                                      02-DCCCA
000019DB 08                                 2840+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000019DC 00                                 2841+         dc bl.8'00000000'                                              02-DCCCA
000019DD 000000                             2842+         dc al3(0)                                                      02-DCCCA
000019E0 000000000000199E                   2843+         dc ad(@LNAME1384)                                              02-DCCCA
000019E8                                    2844+         ds 0d                                                          02-DCCCA
000019E8 00000000000019B0                   2845+         dc ad($eye0066)                                                02-DCCCA
000019F0 0000000000000000                   2846+         dc ad(0)                                                       02-DCCCA
000019F8                                    2847+         ds    0d                                                       01-DCCPR
000019F8                                    2848+rd_strlcpy ds  0d                                                       01-DCCPR
000019F8                                    2849+@REGION_1384_1 ds 0h                                                    01-DCCPR
000019F8 EBEC D008 0024          00000008   2850+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000019FE B904 00CF                          2851+         lgr   12,15               set base reg                         01-DCCPR
                        000019F8            2852+         using @REGION_1384_1,12                                        01-DCCPR
                                                                                                                           Page   64 
  Active Usings: @REGION_1384_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            2853 * ******* End of Prologue
                                            2854 * *
00001A02 E3F0 1010 0004          00000010   2855          LG    15,16(0,1)  ; dstsize
                                            2856 * ***
                                            2857 * ***
                                            2858 * ***
                                            2859 * ***           if (((dstsize > 0))) {
00001A08 C2FE 0000 0000                     2860          CLGFI 15,X'00000000'
00001A0E 47D0 C0A6               00001A9E   2861          BNH   @ret_lab_1384
                                            2862 * ***                   size_t srclen = __strlen(src);
00001A12 E320 1008 0004          00000008   2863          LG    2,8(0,1)
00001A18 B904 0032                          2864          LGR   3,2
00001A1C A709 0000               00000000   2865          LGHI  0,0
00001A20                                    2866 @@gen_label93 DS 0H
00001A20 B25E 0002                          2867          SRST  0,2
00001A24 4710 C028               00001A20   2868          BC  1,@@gen_label93
00001A28 B90B 0003                          2869          SLGR  0,3
                                            2870 * ***                   size_t copylen = ((srclen) < (dstsize-1) ? (sr\
                                            2871 * clen) : (dstsize-1));
00001A2C B904 002F                          2872          LGR   2,15
00001A30 A72B FFFF               0000FFFF   2873          AGHI  2,-1
00001A34 B921 0002                          2874          CLGR  0,2
00001A38 47B0 C056               00001A4E   2875          BNL   @L252
00001A3C B904 00F0                          2876          LGR   15,0
00001A40 47F0 C05A               00001A52   2877          B     @L253
00001A48                                    2878          DS    0D
00001A48 D200 4000 3000 00000000 00000000   2879 @lit_1384_66          MVC 0(1,4),0(3)
00001A4E                                    2880 @L252    DS    0H
00001A4E A7FB FFFF               0000FFFF   2881          AGHI  15,-1
00001A52                                    2882 @L253    DS    0H
                                            2883 * ***                   __memcpy(dst,src,copylen);
00001A52 E330 1008 0004          00000008   2884          LG    3,8(0,1)
00001A58 E340 1000 0004          00000000   2885          LG    4,0(0,1)
00001A5E B902 002F                          2886          LTGR  2,15
00001A62 4780 C098               00001A90   2887          BZ    @@gen_label97
00001A66 A72B FFFF               0000FFFF   2888          AGHI  2,-1
00001A6A EB52 0008 000A          00000008   2889          SRAG  5,2,8(0)
00001A70 B902 0055                          2890          LTGR  5,5
00001A74 4780 C094               00001A8C   2891          BZ    @@gen_label96
00001A78                                    2892 @@gen_label95 DS 0H
00001A78 D2FF 4000 3000 00000000 00000000   2893          MVC   0(256,4),0(3)
00001A7E 4140 4100               00000100   2894          LA    4,256(0,4)
00001A82 4130 3100               00000100   2895          LA    3,256(0,3)
00001A86 E350 C080 0046          00001A78   2896          BCTG  5,@@gen_label95
00001A8C                                    2897 @@gen_label96 DS 0H
00001A8C 4420 C050               00001A48   2898          EX    2,@lit_1384_66
00001A90                                    2899 @@gen_label97 DS 0H
                                            2900 * ***                   dst[copylen] = '\0';
00001A90 E310 1000 0004          00000000   2901          LG    1,0(0,1)    ; dst
00001A96 41FF 1000               00000000   2902          LA    15,0(15,1)
00001A9A 9200 F000      00000000 00000000   2903          MVI   0(15),0
                                            2904 * ***           }
                                                                                                                           Page   65 
  Active Usings: @REGION_1384_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001A9E                                    2905 @L251    DS    0H
                                            2906 * ***
                                            2907 * ***   }
00001A9E                                    2908 @ret_lab_1384 DS 0H
                                            2909 * * **** Start of Epilogue
                                            2910          DCCEPIL
00001A9E                                    2911+         ds 0h                                                          01-DCCEP
                                            2912+* Epilog
                                            2913+* Epilog
00001A9E E3E0 D008 0004          00000008   2914+         lg    14,8(,13) restore the reg                                01-DCCEP
00001AA4 EB1C D020 0004          00000020   2915+         lmg   1,12,32(13)                                              01-DCCEP
00001AAA 07FE                               2916+         br   14                                                        01-DCCEP
                                            2917+* End of Epilog
                                            2918 * * **** End of Epilogue
                                            2919          DROP  12
                                            2920 *
                                            2921 *   DSECT for automatic variables in "rd_strlcpy"
                                            2922 *      (FUNCTION #1384)
                                            2923 *
00000000                00000000 000000B0   2924 @AUTO#rd_strlcpy DSECT
00000000                                    2925          DS    XL168
000000A8                                    2926 rd_strlcpy#copylen#1 DS 8XL1 ; copylen
000000B0                000000B0 000000A8   2927          ORG   @AUTO#rd_strlcpy+168
000000A8                                    2928 rd_strlcpy#srclen#1 DS 8XL1 ; srclen
                                            2929 *
00001AAC                00000000 00010480   2930 @CODE    CSECT
                                            2931 *
                                            2932 *
                                            2933 *
                                            2934 * ....... start of rd_kafka_q_keep
00001AAC                                    2935 @LNAME1428 DS  0H
00001AAC 0000000F                           2936          DC    X'0000000F'
00001AB0 99846D9281869281                   2937          DC    C'rd_kafka_q_keep'
00001ABF 00                                 2938          DC    X'00'
                                            2939 rd_kafka_q_keep DCCPRLG CINDEX=1428,BASER=12,FRAME=176,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1428
                                            2940          macro
                                            2941          dccextrn &m
                                            2942          gblc    &$dccext(1000)
                                            2943          gbla    &$dccexti
                                            2944          lcla    &i
                                            2945 &$dccext(&$dccexti+1) setc    '&m'
                                            2946 &i       seta    1
                                            2947 .loop    aif    (&i gt &$dccexti).around
                                            2948          aif    ('&$dccext(&i)' eq '&m').getout
                                            2949 &i       seta    &i+1
                                            2950          ago     .loop
                                            2951 .around  anop
                                            2952 &$dccexti seta &$dccexti+1
                                            2953          extrn  &m
                                            2954 .getout  anop
                                            2955          mend
                                                                                                                           Page   66 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001AC0                                    2956+$eye0069    ds    0d                                                    02-DCCCA
00001AC0 C4C3C3                             2957+         dc cl3'DCC'                                                    02-DCCCA
00001AC3 01                                 2958+         dc xl1'01' format one                                          02-DCCCA
00001AC4 00000000                           2959+         dc a(0)                                                        02-DCCCA
00001AC8 0000000000001B32                   2960+         dc ad(@PER_1428)                                               02-DCCCA
00001AD0 00000000000000B0                   2961+         dc ad(176)                                                     02-DCCCA
00001AD8 0000000000000000                   2962+         dc ad(0)                                                       02-DCCCA
00001AE0 0000000000001000                   2963+         dc ad(4096)                                                    02-DCCCA
00001AE8 20                                 2964+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001AE9 03                                 2965+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001AEA 03                                 2966+         dc al1(3)                                                      02-DCCCA
00001AEB 08                                 2967+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001AEC 00                                 2968+         dc bl.8'00000000'                                              02-DCCCA
00001AED 000000                             2969+         dc al3(0)                                                      02-DCCCA
00001AF0 0000000000001AAC                   2970+         dc ad(@LNAME1428)                                              02-DCCCA
00001AF8                                    2971+         ds 0d                                                          02-DCCCA
00001AF8 0000000000001AC0                   2972+         dc ad($eye0069)                                                02-DCCCA
00001B00 0000000000000000                   2973+         dc ad(0)                                                       02-DCCCA
00001B08                                    2974+         ds    0d                                                       01-DCCPR
00001B08                                    2975+rd_kafka_q_keep ds 0d                                                   01-DCCPR
00001B08                                    2976+@REGION_1428_1 ds 0h                                                    01-DCCPR
00001B08 EBEC D008 0024          00000008   2977+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00001B0E E3E0 D088 0004          00000088   2978+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00001B14 E3C0 D090 0004          00000090   2979+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00001B1A B904 002E                          2980+         lgr   2,14                copy addr of our savearea            01-DCCPR
00001B1E E3B0 C018 0004          00000018   2981+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00001B24 A7EB 00B0               000000B0   2982+         aghi  14,176              increase by frame size               01-DCCPR
00001B28 E3E0 C020 0021          00000020   2983+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00001B2E 4720 B020               00000020   2984+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00001B32                                    2985+@PER_1428 ds   0h                                                       01-DCCPR
00001B32 EBDE 2080 0024          00000080   2986+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00001B38 E3C0 2090 0024          00000090   2987+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00001B3E B904 00D2                          2988+         lgr   13,2                set real frame pointer               01-DCCPR
00001B42 B904 00CF                          2989+         lgr   12,15               set base reg                         01-DCCPR
                        00001B08            2990+         using @REGION_1428_1,12                                        01-DCCPR
                                            2991 * ******* End of Prologue
                                            2992 * *
                                            2993 * ***           mtx_lock(&rkq->rkq_lock);
00001B46 E320 1000 0004          00000000   2994          LG    2,0(0,1)    ; rkq
00001B4C E320 D0A8 0024          000000A8   2995          STG   2,168(0,13)
00001B52 4110 D0A8               000000A8   2996          LA    1,168(0,13)
00001B56 E3F0 C0C8 0004          00001BD0   2997          LG    15,@lit_1428_67 ; mtx_lock
00001B5C                                    2998 @@gen_label98 DS    0H
00001B5C 05EF                               2999          BALR  14,15
00001B5E                                    3000 @@gen_label99 DS    0H
                                            3001 * ***           rkq->rkq_refcnt++;
00001B5E 58F0 2080               00000080   3002          L     15,128(0,2)
00001B62 A7FA 0001               00000001   3003          AHI   15,1
00001B66 50F0 2080               00000080   3004          ST    15,128(0,2)
                                            3005 * ***           mtx_unlock(&rkq->rkq_lock);
00001B6A E320 D0A8 0024          000000A8   3006          STG   2,168(0,13)
00001B70 4110 D0A8               000000A8   3007          LA    1,168(0,13)
                                                                                                                           Page   67 
  Active Usings: @REGION_1428_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001B74 E3F0 C0D0 0004          00001BD8   3008          LG    15,@lit_1428_68 ; mtx_unlock
00001B7A                                    3009 @@gen_label100 DS    0H
00001B7A 05EF                               3010          BALR  14,15
00001B7C                                    3011 @@gen_label101 DS    0H
                                            3012 * ***      return rkq;
00001B7C B904 00F2                          3013          LGR   15,2
                                            3014 * ***   }
                                            3015 * * **** Start of Epilogue
                                            3016          DCCEPIL
00001B80                                    3017+         ds 0h                                                          01-DCCEP
                                            3018+* Epilog
00001B80 D707 D088 D088 00000088 00000088   3019+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00001B86 E3D0 D080 0004          00000080   3020+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00001B8C E3C0 D090 0004          00000090   3021+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001B92 E3B0 C018 0004          00000018   3022+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00001B98 E3C0 B010 0021          00000010   3023+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00001B9E E3E0 D008 0004          00000008   3024+         lg  14,8(0,13)          load up return address                 01-DCCEP
00001BA4 EB1C D020 0004          00000020   3025+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00001BAA 078E                               3026+         bcr 8,14                if same dsab, just return              01-DCCEP
00001BAC E3F0 D010 0024          00000010   3027+         stg 15,16(0,13)         save return code                       01-DCCEP
00001BB2 E300 D018 0024          00000018   3028+         stg 0,24(0,13)          save more return code                  01-DCCEP
00001BB8 E3F0 D090 0004          00000090   3029+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00001BBE E3F0 F018 0004          00000018   3030+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00001BC4 47F0 F040               00000040   3031+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            3032+* End of Epilog
                                            3033 * * **** End of Epilogue
00001BC8                                    3034          DS    0D
00001BC8 000000B0                           3035 @FRAMESIZE_1428 DC F'176'
00001BCC 00000000
00001BD0 0000000000000000                   3036 @lit_1428_67 DC AD(mtx_lock)
00001BD8 0000000000000000                   3037 @lit_1428_68 DC AD(mtx_unlock)
                                            3038          DROP  12
                                            3039 *
                                            3040 *   DSECT for automatic variables in "rd_kafka_q_keep"
                                            3041 *      (FUNCTION #1428)
                                            3042 *
00000000                00000000 000000A8   3043 @AUTO#rd_kafka_q_keep DSECT
00000000                                    3044          DS    XL168
                                            3045 *
00001BE0                00000000 00010480   3046 @CODE    CSECT
                                            3047 *
                                            3048 *
                                            3049 *
                                            3050 * ....... start of rd_kafka_q_disable0
00001BE0                                    3051 @LNAME1432 DS  0H
00001BE0 00000013                           3052          DC    X'00000013'
00001BE4 99846D9281869281                   3053          DC    C'rd_kafka_q_disable0'
00001BF7 00                                 3054          DC    X'00'
                                            3055 rd_kafka_q_disable0 DCCPRLG CINDEX=1432,BASER=12,FRAME=176,ENTRY=NO,ARC*
                                                                H=ZARCH,LNAMEADDR=@LNAME1432
                                            3056          macro
                                            3057          dccextrn &m
                                                                                                                           Page   68 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3058          gblc    &$dccext(1000)
                                            3059          gbla    &$dccexti
                                            3060          lcla    &i
                                            3061 &$dccext(&$dccexti+1) setc    '&m'
                                            3062 &i       seta    1
                                            3063 .loop    aif    (&i gt &$dccexti).around
                                            3064          aif    ('&$dccext(&i)' eq '&m').getout
                                            3065 &i       seta    &i+1
                                            3066          ago     .loop
                                            3067 .around  anop
                                            3068 &$dccexti seta &$dccexti+1
                                            3069          extrn  &m
                                            3070 .getout  anop
                                            3071          mend
00001BF8                                    3072+$eye0072    ds    0d                                                    02-DCCCA
00001BF8 C4C3C3                             3073+         dc cl3'DCC'                                                    02-DCCCA
00001BFB 01                                 3074+         dc xl1'01' format one                                          02-DCCCA
00001BFC 00000000                           3075+         dc a(0)                                                        02-DCCCA
00001C00 0000000000001C6A                   3076+         dc ad(@PER_1432)                                               02-DCCCA
00001C08 00000000000000B0                   3077+         dc ad(176)                                                     02-DCCCA
00001C10 0000000000000000                   3078+         dc ad(0)                                                       02-DCCCA
00001C18 0000000000001000                   3079+         dc ad(4096)                                                    02-DCCCA
00001C20 20                                 3080+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001C21 03                                 3081+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001C22 03                                 3082+         dc al1(3)                                                      02-DCCCA
00001C23 08                                 3083+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001C24 00                                 3084+         dc bl.8'00000000'                                              02-DCCCA
00001C25 000000                             3085+         dc al3(0)                                                      02-DCCCA
00001C28 0000000000001BE0                   3086+         dc ad(@LNAME1432)                                              02-DCCCA
00001C30                                    3087+         ds 0d                                                          02-DCCCA
00001C30 0000000000001BF8                   3088+         dc ad($eye0072)                                                02-DCCCA
00001C38 0000000000000000                   3089+         dc ad(0)                                                       02-DCCCA
00001C40                                    3090+         ds    0d                                                       01-DCCPR
00001C40                                    3091+rd_kafka_q_disable0 ds 0d                                               01-DCCPR
00001C40                                    3092+@REGION_1432_1 ds 0h                                                    01-DCCPR
00001C40 EBEC D008 0024          00000008   3093+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00001C46 E3E0 D088 0004          00000088   3094+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00001C4C E3C0 D090 0004          00000090   3095+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00001C52 B904 002E                          3096+         lgr   2,14                copy addr of our savearea            01-DCCPR
00001C56 E3B0 C018 0004          00000018   3097+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00001C5C A7EB 00B0               000000B0   3098+         aghi  14,176              increase by frame size               01-DCCPR
00001C60 E3E0 C020 0021          00000020   3099+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00001C66 4720 B020               00000020   3100+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00001C6A                                    3101+@PER_1432 ds   0h                                                       01-DCCPR
00001C6A EBDE 2080 0024          00000080   3102+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00001C70 E3C0 2090 0024          00000090   3103+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00001C76 B904 00D2                          3104+         lgr   13,2                set real frame pointer               01-DCCPR
00001C7A B904 00CF                          3105+         lgr   12,15               set base reg                         01-DCCPR
                        00001C40            3106+         using @REGION_1432_1,12                                        01-DCCPR
                                            3107 * ******* End of Prologue
                                            3108 * *
                                            3109 * ***           if (do_lock)
                                                                                                                           Page   69 
  Active Usings: @REGION_1432_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001C7E E320 1000 0004          00000000   3110          LG    2,0(0,1)    ; rkq
00001C84 E330 100C 0012          0000000C   3111          LT    3,12(0,1)   ; do_lock
00001C8A 4780 C060               00001CA0   3112          BZ    @L256
                                            3113 * ***                   mtx_lock(&rkq->rkq_lock);
00001C8E E320 D0A8 0024          000000A8   3114          STG   2,168(0,13)
00001C94 4110 D0A8               000000A8   3115          LA    1,168(0,13)
00001C98 E3F0 C0D8 0004          00001D18   3116          LG    15,@lit_1432_70 ; mtx_lock
00001C9E                                    3117 @@gen_label103 DS    0H
00001C9E 05EF                               3118          BALR  14,15
00001CA0                                    3119 @@gen_label104 DS    0H
00001CA0                                    3120 @L256    DS    0H
                                            3121 * ***           rkq->rkq_flags &= ~0x2;
00001CA0 58F0 2084               00000084   3122          L     15,132(0,2)
00001CA4 A5F7 FFFD               0000FFFD   3123          NILL  15,65533
00001CA8 50F0 2084               00000084   3124          ST    15,132(0,2)
                                            3125 * ***           if (do_lock)
00001CAC 1233                               3126          LTR   3,3
00001CAE 4780 C084               00001CC4   3127          BZ    @ret_lab_1432
                                            3128 * ***                   mtx_unlock(&rkq->rkq_lock);
00001CB2 E320 D0A8 0024          000000A8   3129          STG   2,168(0,13)
00001CB8 4110 D0A8               000000A8   3130          LA    1,168(0,13)
00001CBC E3F0 C0E0 0004          00001D20   3131          LG    15,@lit_1432_71 ; mtx_unlock
00001CC2                                    3132 @@gen_label106 DS    0H
00001CC2 05EF                               3133          BALR  14,15
00001CC4                                    3134 @@gen_label107 DS    0H
00001CC4                                    3135 @L257    DS    0H
                                            3136 * ***   }
00001CC4                                    3137 @ret_lab_1432 DS 0H
                                            3138 * * **** Start of Epilogue
                                            3139          DCCEPIL
00001CC4                                    3140+         ds 0h                                                          01-DCCEP
                                            3141+* Epilog
00001CC4 D707 D088 D088 00000088 00000088   3142+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00001CCA E3D0 D080 0004          00000080   3143+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00001CD0 E3C0 D090 0004          00000090   3144+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001CD6 E3B0 C018 0004          00000018   3145+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00001CDC E3C0 B010 0021          00000010   3146+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00001CE2 E3E0 D008 0004          00000008   3147+         lg  14,8(0,13)          load up return address                 01-DCCEP
00001CE8 EB1C D020 0004          00000020   3148+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00001CEE 078E                               3149+         bcr 8,14                if same dsab, just return              01-DCCEP
00001CF0 E3F0 D010 0024          00000010   3150+         stg 15,16(0,13)         save return code                       01-DCCEP
00001CF6 E300 D018 0024          00000018   3151+         stg 0,24(0,13)          save more return code                  01-DCCEP
00001CFC E3F0 D090 0004          00000090   3152+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00001D02 E3F0 F018 0004          00000018   3153+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00001D08 47F0 F040               00000040   3154+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            3155+* End of Epilog
                                            3156 * * **** End of Epilogue
00001D10                                    3157          DS    0D
00001D10 000000B0                           3158 @FRAMESIZE_1432 DC F'176'
00001D14 00000000
00001D18 0000000000000000                   3159 @lit_1432_70 DC AD(mtx_lock)
00001D20 0000000000000000                   3160 @lit_1432_71 DC AD(mtx_unlock)
                                                                                                                           Page   70 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3161          DROP  12
                                            3162 *
                                            3163 *   DSECT for automatic variables in "rd_kafka_q_disable0"
                                            3164 *      (FUNCTION #1432)
                                            3165 *
00000000                00000000 000000A8   3166 @AUTO#rd_kafka_q_disable0 DSECT
00000000                                    3167          DS    XL168
                                            3168 *
00001D28                00000000 00010480   3169 @CODE    CSECT
                                            3170 *
                                            3171 *
                                            3172 *
                                            3173 * ....... start of rd_kafka_q_destroy0
00001D28                                    3174 @LNAME1435 DS  0H
00001D28 00000013                           3175          DC    X'00000013'
00001D2C 99846D9281869281                   3176          DC    C'rd_kafka_q_destroy0'
00001D3F 00                                 3177          DC    X'00'
                                            3178 rd_kafka_q_destroy0 DCCPRLG CINDEX=1435,BASER=12,FRAME=216,ENTRY=NO,ARC*
                                                                H=ZARCH,LNAMEADDR=@LNAME1435
                                            3179          macro
                                            3180          dccextrn &m
                                            3181          gblc    &$dccext(1000)
                                            3182          gbla    &$dccexti
                                            3183          lcla    &i
                                            3184 &$dccext(&$dccexti+1) setc    '&m'
                                            3185 &i       seta    1
                                            3186 .loop    aif    (&i gt &$dccexti).around
                                            3187          aif    ('&$dccext(&i)' eq '&m').getout
                                            3188 &i       seta    &i+1
                                            3189          ago     .loop
                                            3190 .around  anop
                                            3191 &$dccexti seta &$dccexti+1
                                            3192          extrn  &m
                                            3193 .getout  anop
                                            3194          mend
00001D40                                    3195+$eye0075    ds    0d                                                    02-DCCCA
00001D40 C4C3C3                             3196+         dc cl3'DCC'                                                    02-DCCCA
00001D43 01                                 3197+         dc xl1'01' format one                                          02-DCCCA
00001D44 00000000                           3198+         dc a(0)                                                        02-DCCCA
00001D48 0000000000001DB2                   3199+         dc ad(@PER_1435)                                               02-DCCCA
00001D50 00000000000000D8                   3200+         dc ad(216)                                                     02-DCCCA
00001D58 0000000000000000                   3201+         dc ad(0)                                                       02-DCCCA
00001D60 0000000000001000                   3202+         dc ad(4096)                                                    02-DCCCA
00001D68 20                                 3203+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001D69 03                                 3204+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001D6A 03                                 3205+         dc al1(3)                                                      02-DCCCA
00001D6B 08                                 3206+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001D6C 00                                 3207+         dc bl.8'00000000'                                              02-DCCCA
00001D6D 000000                             3208+         dc al3(0)                                                      02-DCCCA
00001D70 0000000000001D28                   3209+         dc ad(@LNAME1435)                                              02-DCCCA
00001D78                                    3210+         ds 0d                                                          02-DCCCA
00001D78 0000000000001D40                   3211+         dc ad($eye0075)                                                02-DCCCA
                                                                                                                           Page   71 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001D80 0000000000000000                   3212+         dc ad(0)                                                       02-DCCCA
00001D88                                    3213+         ds    0d                                                       01-DCCPR
00001D88                                    3214+rd_kafka_q_destroy0 ds 0d                                               01-DCCPR
00001D88                                    3215+@REGION_1435_1 ds 0h                                                    01-DCCPR
00001D88 EBEC D008 0024          00000008   3216+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00001D8E E3E0 D088 0004          00000088   3217+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00001D94 E3C0 D090 0004          00000090   3218+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00001D9A B904 002E                          3219+         lgr   2,14                copy addr of our savearea            01-DCCPR
00001D9E E3B0 C018 0004          00000018   3220+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00001DA4 A7EB 00D8               000000D8   3221+         aghi  14,216              increase by frame size               01-DCCPR
00001DA8 E3E0 C020 0021          00000020   3222+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00001DAE 4720 B020               00000020   3223+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00001DB2                                    3224+@PER_1435 ds   0h                                                       01-DCCPR
00001DB2 EBDE 2080 0024          00000080   3225+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00001DB8 E3C0 2090 0024          00000090   3226+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00001DBE B904 00D2                          3227+         lgr   13,2                set real frame pointer               01-DCCPR
00001DC2 B904 00CF                          3228+         lgr   12,15               set base reg                         01-DCCPR
                        00001D88            3229+         using @REGION_1435_1,12                                        01-DCCPR
                                            3230 * ******* End of Prologue
                                            3231 * *
                                            3232 * ***           int do_delete = 0;
00001DC6 E320 1000 0004          00000000   3233          LG    2,0(0,1)    ; rkq
                                            3234 * ***
                                            3235 * ***           if (disable) {
00001DCC E3F0 100C 0012          0000000C   3236          LT    15,12(0,1)  ; disable
00001DD2 4780 C07E               00001E06   3237          BZ    @L258
                                            3238 * ***
                                            3239 * ***
                                            3240 * ***
                                            3241 * ***
                                            3242 * ***                   rd_kafka_q_disable0(rkq, 1);
00001DD6 E320 D0B0 0024          000000B0   3243          STG   2,176(0,13)
00001DDC E548 D0B8 0001          000000B8   3244          MVGHI 184(13),1
00001DE2 4110 D0B0               000000B0   3245          LA    1,176(0,13)
00001DE6 E3F0 C170 0004          00001EF8   3246          LG    15,@lit_1435_74 ; rd_kafka_q_disable0
00001DEC                                    3247 @@gen_label109 DS    0H
00001DEC 05EF                               3248          BALR  14,15
00001DEE                                    3249 @@gen_label110 DS    0H
                                            3250 * ***                   rd_kafka_q_purge0(rkq, 1);
00001DEE E320 D0B0 0024          000000B0   3251          STG   2,176(0,13)
00001DF4 E548 D0B8 0001          000000B8   3252          MVGHI 184(13),1
00001DFA 4110 D0B0               000000B0   3253          LA    1,176(0,13)
00001DFE E3F0 C178 0004          00001F00   3254          LG    15,@lit_1435_75 ; rd_kafka_q_purge0
00001E04                                    3255 @@gen_label111 DS    0H
00001E04 05EF                               3256          BALR  14,15
00001E06                                    3257 @@gen_label112 DS    0H
                                            3258 * ***           }
00001E06                                    3259 @L258    DS    0H
                                            3260 * ***
                                            3261 * ***           mtx_lock(&rkq->rkq_lock);
00001E06 E320 D0B0 0024          000000B0   3262          STG   2,176(0,13)
00001E0C 4110 D0B0               000000B0   3263          LA    1,176(0,13)
                                                                                                                           Page   72 
  Active Usings: @REGION_1435_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00001E10 E3F0 C180 0004          00001F08   3264          LG    15,@lit_1435_76 ; mtx_lock
00001E16                                    3265 @@gen_label113 DS    0H
00001E16 05EF                               3266          BALR  14,15
00001E18                                    3267 @@gen_label114 DS    0H
                                            3268 * ***           do { if (((!(rkq->rkq_refcnt > 0)))) rd_kafka_crash("C\
                                            3269 * :\\asgkafka\\librdkafka\\src\\rdkafka_queue.h",211, __FUNCTION__, ((\
                                            3270 * (void *)0)), "assert: " "rkq->rkq_refcnt > 0"); } while (0);
00001E18                                    3271 @L259    DS    0H
00001E18 E55C 2080 0000          00000080   3272          CHSI  128(2),0
00001E1E 4720 C0DC               00001E64   3273          BH    @L262
00001E22 E3F0 C198 0004          00001F20   3274          LG    15,@lit_1435_77
00001E28 4110 F056               00000056   3275          LA    1,86(0,15)
00001E2C E310 D0B0 0024          000000B0   3276          STG   1,176(0,13)
00001E32 E548 D0B8 00D3          000000B8   3277          MVGHI 184(13),211
00001E38 E310 C190 0004          00001F18   3278          LG    1,@lit_1435_78
00001E3E 4110 1072               00000072   3279          LA    1,114(0,1)
00001E42 E310 D0C0 0024          000000C0   3280          STG   1,192(0,13)
00001E48 D707 D0C8 D0C8 000000C8 000000C8   3281          XC    200(8,13),200(13)
00001E4E 41F0 F082               00000082   3282          LA    15,130(0,15)
00001E52 E3F0 D0D0 0024          000000D0   3283          STG   15,208(0,13)
00001E58 4110 D0B0               000000B0   3284          LA    1,176(0,13)
00001E5C E3F0 C188 0004          00001F10   3285          LG    15,@lit_1435_79 ; rd_kafka_crash
00001E62                                    3286 @@gen_label116 DS    0H
00001E62 05EF                               3287          BALR  14,15
00001E64                                    3288 @@gen_label117 DS    0H
00001E64                                    3289 @L262    DS    0H
                                            3290 * ***           do_delete = !--rkq->rkq_refcnt;
00001E64 58F0 2080               00000080   3291          L     15,128(0,2)
00001E68 A7FA FFFF               0000FFFF   3292          AHI   15,-1
00001E6C 50F0 2080               00000080   3293          ST    15,128(0,2)
00001E70 103F                               3294          LPR   3,15
00001E72 A73A FFFF               0000FFFF   3295          AHI   3,-1
00001E76 8830 001F               0000001F   3296          SRL   3,31(0)
                                            3297 * ***           mtx_unlock(&rkq->rkq_lock);
00001E7A E320 D0B0 0024          000000B0   3298          STG   2,176(0,13)
00001E80 4110 D0B0               000000B0   3299          LA    1,176(0,13)
00001E84 E3F0 C1A0 0004          00001F28   3300          LG    15,@lit_1435_80 ; mtx_unlock
00001E8A                                    3301 @@gen_label118 DS    0H
00001E8A 05EF                               3302          BALR  14,15
00001E8C                                    3303 @@gen_label119 DS    0H
                                            3304 * ***
                                            3305 * ***           if (((do_delete)))
00001E8C 1233                               3306          LTR   3,3
00001E8E 4780 C11C               00001EA4   3307          BZ    @L263
                                            3308 * ***                   rd_kafka_q_destroy_final(rkq);
00001E92 E320 D0B0 0024          000000B0   3309          STG   2,176(0,13)
00001E98 4110 D0B0               000000B0   3310          LA    1,176(0,13)
00001E9C E3F0 C1A8 0004          00001F30   3311          LG    15,@lit_1435_81 ; rd_kafka_q_destroy_final
00001EA2                                    3312 @@gen_label121 DS    0H
00001EA2 05EF                               3313          BALR  14,15
00001EA4                                    3314 @@gen_label122 DS    0H
00001EA4                                    3315 @L263    DS    0H
                                                                                                                           Page   73 
  Active Usings: @REGION_1435_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3316 * ***   }
00001EA4                                    3317 @ret_lab_1435 DS 0H
                                            3318 * * **** Start of Epilogue
                                            3319          DCCEPIL
00001EA4                                    3320+         ds 0h                                                          01-DCCEP
                                            3321+* Epilog
00001EA4 D707 D088 D088 00000088 00000088   3322+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00001EAA E3D0 D080 0004          00000080   3323+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00001EB0 E3C0 D090 0004          00000090   3324+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00001EB6 E3B0 C018 0004          00000018   3325+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00001EBC E3C0 B010 0021          00000010   3326+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00001EC2 E3E0 D008 0004          00000008   3327+         lg  14,8(0,13)          load up return address                 01-DCCEP
00001EC8 EB1C D020 0004          00000020   3328+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00001ECE 078E                               3329+         bcr 8,14                if same dsab, just return              01-DCCEP
00001ED0 E3F0 D010 0024          00000010   3330+         stg 15,16(0,13)         save return code                       01-DCCEP
00001ED6 E300 D018 0024          00000018   3331+         stg 0,24(0,13)          save more return code                  01-DCCEP
00001EDC E3F0 D090 0004          00000090   3332+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00001EE2 E3F0 F018 0004          00000018   3333+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00001EE8 47F0 F040               00000040   3334+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            3335+* End of Epilog
                                            3336 * * **** End of Epilogue
00001EF0                                    3337          DS    0D
00001EF0 000000D8                           3338 @FRAMESIZE_1435 DC F'216'
00001EF4 00000000
00001EF8 0000000000001C40                   3339 @lit_1435_74 DC AD(rd_kafka_q_disable0)
00001F00 0000000000000000                   3340 @lit_1435_75 DC AD(rd_kafka_q_purge0)
00001F08 0000000000000000                   3341 @lit_1435_76 DC AD(mtx_lock)
00001F10 0000000000000000                   3342 @lit_1435_79 DC AD(rd_kafka_crash)
00001F18 0000000000010480                   3343 @lit_1435_78 DC AD(@DATA)
00001F20 0000000000010840                   3344 @lit_1435_77 DC AD(@strings@)
00001F28 0000000000000000                   3345 @lit_1435_80 DC AD(mtx_unlock)
00001F30 0000000000000000                   3346 @lit_1435_81 DC AD(rd_kafka_q_destroy_final)
                                            3347          DROP  12
                                            3348 *
                                            3349 *   DSECT for automatic variables in "rd_kafka_q_destroy0"
                                            3350 *      (FUNCTION #1435)
                                            3351 *
00000000                00000000 000000AC   3352 @AUTO#rd_kafka_q_destroy0 DSECT
00000000                                    3353          DS    XL168
000000A8                                    3354 rd_kafka_q_destroy0#do_delete#0 DS 1F ; do_delete
                                            3355 *
00001F38                00000000 00010480   3356 @CODE    CSECT
                                            3357 *
                                            3358 *
                                            3359 *
                                            3360 * ....... start of rd_kafka_q_destroy_owner
00001F38                                    3361 @LNAME1436 DS  0H
00001F38 00000018                           3362          DC    X'00000018'
00001F3C 99846D9281869281                   3363          DC    C'rd_kafka_q_destroy_owner'
00001F54 00                                 3364          DC    X'00'
                                            3365 rd_kafka_q_destroy_owner DCCPRLG CINDEX=1436,BASER=12,FRAME=184,ENTRY=N*
                                                                O,ARCH=ZARCH,LNAMEADDR=@LNAME1436
                                                                                                                           Page   74 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3366          macro
                                            3367          dccextrn &m
                                            3368          gblc    &$dccext(1000)
                                            3369          gbla    &$dccexti
                                            3370          lcla    &i
                                            3371 &$dccext(&$dccexti+1) setc    '&m'
                                            3372 &i       seta    1
                                            3373 .loop    aif    (&i gt &$dccexti).around
                                            3374          aif    ('&$dccext(&i)' eq '&m').getout
                                            3375 &i       seta    &i+1
                                            3376          ago     .loop
                                            3377 .around  anop
                                            3378 &$dccexti seta &$dccexti+1
                                            3379          extrn  &m
                                            3380 .getout  anop
                                            3381          mend
00001F58                                    3382+$eye0078    ds    0d                                                    02-DCCCA
00001F58 C4C3C3                             3383+         dc cl3'DCC'                                                    02-DCCCA
00001F5B 01                                 3384+         dc xl1'01' format one                                          02-DCCCA
00001F5C 00000000                           3385+         dc a(0)                                                        02-DCCCA
00001F60 0000000000001FCA                   3386+         dc ad(@PER_1436)                                               02-DCCCA
00001F68 00000000000000B8                   3387+         dc ad(184)                                                     02-DCCCA
00001F70 0000000000000000                   3388+         dc ad(0)                                                       02-DCCCA
00001F78 0000000000001000                   3389+         dc ad(4096)                                                    02-DCCCA
00001F80 20                                 3390+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00001F81 03                                 3391+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00001F82 03                                 3392+         dc al1(3)                                                      02-DCCCA
00001F83 08                                 3393+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00001F84 00                                 3394+         dc bl.8'00000000'                                              02-DCCCA
00001F85 000000                             3395+         dc al3(0)                                                      02-DCCCA
00001F88 0000000000001F38                   3396+         dc ad(@LNAME1436)                                              02-DCCCA
00001F90                                    3397+         ds 0d                                                          02-DCCCA
00001F90 0000000000001F58                   3398+         dc ad($eye0078)                                                02-DCCCA
00001F98 0000000000000000                   3399+         dc ad(0)                                                       02-DCCCA
00001FA0                                    3400+         ds    0d                                                       01-DCCPR
00001FA0                                    3401+rd_kafka_q_destroy_owner ds 0d                                          01-DCCPR
00001FA0                                    3402+@REGION_1436_1 ds 0h                                                    01-DCCPR
00001FA0 EBEC D008 0024          00000008   3403+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00001FA6 E3E0 D088 0004          00000088   3404+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00001FAC E3C0 D090 0004          00000090   3405+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00001FB2 B904 002E                          3406+         lgr   2,14                copy addr of our savearea            01-DCCPR
00001FB6 E3B0 C018 0004          00000018   3407+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00001FBC A7EB 00B8               000000B8   3408+         aghi  14,184              increase by frame size               01-DCCPR
00001FC0 E3E0 C020 0021          00000020   3409+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00001FC6 4720 B020               00000020   3410+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00001FCA                                    3411+@PER_1436 ds   0h                                                       01-DCCPR
00001FCA EBDE 2080 0024          00000080   3412+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00001FD0 E3C0 2090 0024          00000090   3413+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00001FD6 B904 00D2                          3414+         lgr   13,2                set real frame pointer               01-DCCPR
00001FDA B904 00CF                          3415+         lgr   12,15               set base reg                         01-DCCPR
                        00001FA0            3416+         using @REGION_1436_1,12                                        01-DCCPR
                                            3417 * ******* End of Prologue
                                                                                                                           Page   75 
  Active Usings: @REGION_1436_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3418 * *
                                            3419 * ***           rd_kafka_q_destroy0(rkq, 1);
00001FDE E3F0 1000 0004          00000000   3420          LG    15,0(0,1)   ; rkq
00001FE4 E3F0 D0A8 0024          000000A8   3421          STG   15,168(0,13)
00001FEA E548 D0B0 0001          000000B0   3422          MVGHI 176(13),1
00001FF0 4110 D0A8               000000A8   3423          LA    1,168(0,13)
00001FF4 E3F0 C0B0 0004          00002050   3424          LG    15,@lit_1436_83 ; rd_kafka_q_destroy0
00001FFA                                    3425 @@gen_label123 DS    0H
00001FFA 05EF                               3426          BALR  14,15
00001FFC                                    3427 @@gen_label124 DS    0H
                                            3428 * ***   }
00001FFC                                    3429 @ret_lab_1436 DS 0H
                                            3430 * * **** Start of Epilogue
                                            3431          DCCEPIL
00001FFC                                    3432+         ds 0h                                                          01-DCCEP
                                            3433+* Epilog
00001FFC D707 D088 D088 00000088 00000088   3434+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002002 E3D0 D080 0004          00000080   3435+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002008 E3C0 D090 0004          00000090   3436+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000200E E3B0 C018 0004          00000018   3437+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002014 E3C0 B010 0021          00000010   3438+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000201A E3E0 D008 0004          00000008   3439+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002020 EB1C D020 0004          00000020   3440+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00002026 078E                               3441+         bcr 8,14                if same dsab, just return              01-DCCEP
00002028 E3F0 D010 0024          00000010   3442+         stg 15,16(0,13)         save return code                       01-DCCEP
0000202E E300 D018 0024          00000018   3443+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002034 E3F0 D090 0004          00000090   3444+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000203A E3F0 F018 0004          00000018   3445+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002040 47F0 F040               00000040   3446+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            3447+* End of Epilog
                                            3448 * * **** End of Epilogue
00002048                                    3449          DS    0D
00002048 000000B8                           3450 @FRAMESIZE_1436 DC F'184'
0000204C 00000000
00002050 0000000000001D88                   3451 @lit_1436_83 DC AD(rd_kafka_q_destroy0)
                                            3452          DROP  12
                                            3453 *
                                            3454 *   DSECT for automatic variables in "rd_kafka_q_destroy_owner"
                                            3455 *      (FUNCTION #1436)
                                            3456 *
00000000                00000000 000000A8   3457 @AUTO#rd_kafka_q_destroy_owner DSECT
00000000                                    3458          DS    XL168
                                            3459 *
00002058                00000000 00010480   3460 @CODE    CSECT
                                            3461 *
                                            3462 *
                                            3463 *
                                            3464 * ....... start of rd_kafka_q_fwd_get
00002058                                    3465 @LNAME1439 DS  0H
00002058 00000012                           3466          DC    X'00000012'
0000205C 99846D9281869281                   3467          DC    C'rd_kafka_q_fwd_get'
0000206E 00                                 3468          DC    X'00'
                                                                                                                           Page   76 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3469 rd_kafka_q_fwd_get DCCPRLG CINDEX=1439,BASER=12,FRAME=184,ENTRY=NO,ARCH*
                                                                =ZARCH,LNAMEADDR=@LNAME1439
                                            3470          macro
                                            3471          dccextrn &m
                                            3472          gblc    &$dccext(1000)
                                            3473          gbla    &$dccexti
                                            3474          lcla    &i
                                            3475 &$dccext(&$dccexti+1) setc    '&m'
                                            3476 &i       seta    1
                                            3477 .loop    aif    (&i gt &$dccexti).around
                                            3478          aif    ('&$dccext(&i)' eq '&m').getout
                                            3479 &i       seta    &i+1
                                            3480          ago     .loop
                                            3481 .around  anop
                                            3482 &$dccexti seta &$dccexti+1
                                            3483          extrn  &m
                                            3484 .getout  anop
                                            3485          mend
00002070                                    3486+$eye0081    ds    0d                                                    02-DCCCA
00002070 C4C3C3                             3487+         dc cl3'DCC'                                                    02-DCCCA
00002073 01                                 3488+         dc xl1'01' format one                                          02-DCCCA
00002074 00000000                           3489+         dc a(0)                                                        02-DCCCA
00002078 00000000000020E2                   3490+         dc ad(@PER_1439)                                               02-DCCCA
00002080 00000000000000B8                   3491+         dc ad(184)                                                     02-DCCCA
00002088 0000000000000000                   3492+         dc ad(0)                                                       02-DCCCA
00002090 0000000000001000                   3493+         dc ad(4096)                                                    02-DCCCA
00002098 20                                 3494+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002099 03                                 3495+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000209A 03                                 3496+         dc al1(3)                                                      02-DCCCA
0000209B 08                                 3497+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000209C 00                                 3498+         dc bl.8'00000000'                                              02-DCCCA
0000209D 000000                             3499+         dc al3(0)                                                      02-DCCCA
000020A0 0000000000002058                   3500+         dc ad(@LNAME1439)                                              02-DCCCA
000020A8                                    3501+         ds 0d                                                          02-DCCCA
000020A8 0000000000002070                   3502+         dc ad($eye0081)                                                02-DCCCA
000020B0 0000000000000000                   3503+         dc ad(0)                                                       02-DCCCA
000020B8                                    3504+         ds    0d                                                       01-DCCPR
000020B8                                    3505+rd_kafka_q_fwd_get ds 0d                                                01-DCCPR
000020B8                                    3506+@REGION_1439_1 ds 0h                                                    01-DCCPR
000020B8 EBEC D008 0024          00000008   3507+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000020BE E3E0 D088 0004          00000088   3508+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000020C4 E3C0 D090 0004          00000090   3509+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000020CA B904 002E                          3510+         lgr   2,14                copy addr of our savearea            01-DCCPR
000020CE E3B0 C018 0004          00000018   3511+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000020D4 A7EB 00B8               000000B8   3512+         aghi  14,184              increase by frame size               01-DCCPR
000020D8 E3E0 C020 0021          00000020   3513+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000020DE 4720 B020               00000020   3514+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000020E2                                    3515+@PER_1439 ds   0h                                                       01-DCCPR
000020E2 EBDE 2080 0024          00000080   3516+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000020E8 E3C0 2090 0024          00000090   3517+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000020EE B904 00D2                          3518+         lgr   13,2                set real frame pointer               01-DCCPR
000020F2 B904 00CF                          3519+         lgr   12,15               set base reg                         01-DCCPR
                                                                                                                           Page   77 
  Active Usings: @REGION_1439_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                        000020B8            3520+         using @REGION_1439_1,12                                        01-DCCPR
                                            3521 * ******* End of Prologue
                                            3522 * *
000020F6 E320 1000 0004          00000000   3523          LG    2,0(0,1)    ; rkq
                                            3524 * ***           rd_kafka_q_t *fwdq;
                                            3525 * ***           if (do_lock)
000020FC E340 100C 0012          0000000C   3526          LT    4,12(0,1)   ; do_lock
00002102 4780 C060               00002118   3527          BZ    @L270
                                            3528 * ***                   mtx_lock(&rkq->rkq_lock);
00002106 E320 D0B0 0024          000000B0   3529          STG   2,176(0,13)
0000210C 4110 D0B0               000000B0   3530          LA    1,176(0,13)
00002110 E3F0 C0F0 0004          000021A8   3531          LG    15,@lit_1439_85 ; mtx_lock
00002116                                    3532 @@gen_label126 DS    0H
00002116 05EF                               3533          BALR  14,15
00002118                                    3534 @@gen_label127 DS    0H
00002118                                    3535 @L270    DS    0H
                                            3536 * ***
                                            3537 * ***           if ((fwdq = rkq->rkq_fwdq))
00002118 E330 2058 0004          00000058   3538          LG    3,88(0,2)   ; offset of rkq_fwdq in rd_kafka_q_s
0000211E B902 00F3                          3539          LTGR  15,3
00002122 4780 C080               00002138   3540          BZ    @L271
                                            3541 * ***                   rd_kafka_q_keep(fwdq);
00002126 E330 D0B0 0024          000000B0   3542          STG   3,176(0,13)
0000212C 4110 D0B0               000000B0   3543          LA    1,176(0,13)
00002130 E3F0 C0F8 0004          000021B0   3544          LG    15,@lit_1439_86 ; rd_kafka_q_keep
00002136                                    3545 @@gen_label129 DS    0H
00002136 05EF                               3546          BALR  14,15
00002138                                    3547 @@gen_label130 DS    0H
00002138                                    3548 @L271    DS    0H
                                            3549 * ***
                                            3550 * ***           if (do_lock)
00002138 1244                               3551          LTR   4,4
0000213A 4780 C098               00002150   3552          BZ    @L272
                                            3553 * ***                   mtx_unlock(&rkq->rkq_lock);
0000213E E320 D0B0 0024          000000B0   3554          STG   2,176(0,13)
00002144 4110 D0B0               000000B0   3555          LA    1,176(0,13)
00002148 E3F0 C100 0004          000021B8   3556          LG    15,@lit_1439_87 ; mtx_unlock
0000214E                                    3557 @@gen_label132 DS    0H
0000214E 05EF                               3558          BALR  14,15
00002150                                    3559 @@gen_label133 DS    0H
00002150                                    3560 @L272    DS    0H
                                            3561 * ***
                                            3562 * ***           return fwdq;
00002150 B904 00F3                          3563          LGR   15,3
                                            3564 * ***   }
                                            3565 * * **** Start of Epilogue
                                            3566          DCCEPIL
00002154                                    3567+         ds 0h                                                          01-DCCEP
                                            3568+* Epilog
00002154 D707 D088 D088 00000088 00000088   3569+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000215A E3D0 D080 0004          00000080   3570+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002160 E3C0 D090 0004          00000090   3571+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
                                                                                                                           Page   78 
  Active Usings: @REGION_1439_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002166 E3B0 C018 0004          00000018   3572+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000216C E3C0 B010 0021          00000010   3573+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002172 E3E0 D008 0004          00000008   3574+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002178 EB1C D020 0004          00000020   3575+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000217E 078E                               3576+         bcr 8,14                if same dsab, just return              01-DCCEP
00002180 E3F0 D010 0024          00000010   3577+         stg 15,16(0,13)         save return code                       01-DCCEP
00002186 E300 D018 0024          00000018   3578+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000218C E3F0 D090 0004          00000090   3579+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002192 E3F0 F018 0004          00000018   3580+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002198 47F0 F040               00000040   3581+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            3582+* End of Epilog
                                            3583 * * **** End of Epilogue
000021A0                                    3584          DS    0D
000021A0 000000B8                           3585 @FRAMESIZE_1439 DC F'184'
000021A4 00000000
000021A8 0000000000000000                   3586 @lit_1439_85 DC AD(mtx_lock)
000021B0 0000000000001B08                   3587 @lit_1439_86 DC AD(rd_kafka_q_keep)
000021B8 0000000000000000                   3588 @lit_1439_87 DC AD(mtx_unlock)
                                            3589          DROP  12
                                            3590 *
                                            3591 *   DSECT for automatic variables in "rd_kafka_q_fwd_get"
                                            3592 *      (FUNCTION #1439)
                                            3593 *
00000000                00000000 000000A8   3594 @AUTO#rd_kafka_q_fwd_get DSECT
00000000                                    3595          DS    XL168
                                            3596 *
000021C0                00000000 00010480   3597 @CODE    CSECT
                                            3598 *
                                            3599 *
                                            3600 *
                                            3601 * ....... start of rd_kafka_q_io_event
000021C0                                    3602 @LNAME1441 DS  0H
000021C0 00000013                           3603          DC    X'00000013'
000021C4 99846D9281869281                   3604          DC    C'rd_kafka_q_io_event'
000021D7 00                                 3605          DC    X'00'
                                            3606 rd_kafka_q_io_event DCCPRLG CINDEX=1441,BASER=12,FRAME=192,ENTRY=NO,ARC*
                                                                H=ZARCH,LNAMEADDR=@LNAME1441
                                            3607          macro
                                            3608          dccextrn &m
                                            3609          gblc    &$dccext(1000)
                                            3610          gbla    &$dccexti
                                            3611          lcla    &i
                                            3612 &$dccext(&$dccexti+1) setc    '&m'
                                            3613 &i       seta    1
                                            3614 .loop    aif    (&i gt &$dccexti).around
                                            3615          aif    ('&$dccext(&i)' eq '&m').getout
                                            3616 &i       seta    &i+1
                                            3617          ago     .loop
                                            3618 .around  anop
                                            3619 &$dccexti seta &$dccexti+1
                                            3620          extrn  &m
                                            3621 .getout  anop
                                                                                                                           Page   79 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3622          mend
000021D8                                    3623+$eye0084    ds    0d                                                    02-DCCCA
000021D8 C4C3C3                             3624+         dc cl3'DCC'                                                    02-DCCCA
000021DB 01                                 3625+         dc xl1'01' format one                                          02-DCCCA
000021DC 00000000                           3626+         dc a(0)                                                        02-DCCCA
000021E0 000000000000224A                   3627+         dc ad(@PER_1441)                                               02-DCCCA
000021E8 00000000000000C0                   3628+         dc ad(192)                                                     02-DCCCA
000021F0 0000000000000000                   3629+         dc ad(0)                                                       02-DCCCA
000021F8 0000000000001000                   3630+         dc ad(4096)                                                    02-DCCCA
00002200 20                                 3631+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002201 03                                 3632+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002202 03                                 3633+         dc al1(3)                                                      02-DCCCA
00002203 08                                 3634+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002204 00                                 3635+         dc bl.8'00000000'                                              02-DCCCA
00002205 000000                             3636+         dc al3(0)                                                      02-DCCCA
00002208 00000000000021C0                   3637+         dc ad(@LNAME1441)                                              02-DCCCA
00002210                                    3638+         ds 0d                                                          02-DCCCA
00002210 00000000000021D8                   3639+         dc ad($eye0084)                                                02-DCCCA
00002218 0000000000000000                   3640+         dc ad(0)                                                       02-DCCCA
00002220                                    3641+         ds    0d                                                       01-DCCPR
00002220                                    3642+rd_kafka_q_io_event ds 0d                                               01-DCCPR
00002220                                    3643+@REGION_1441_1 ds 0h                                                    01-DCCPR
00002220 EBEC D008 0024          00000008   3644+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00002226 E3E0 D088 0004          00000088   3645+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000222C E3C0 D090 0004          00000090   3646+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00002232 B904 002E                          3647+         lgr   2,14                copy addr of our savearea            01-DCCPR
00002236 E3B0 C018 0004          00000018   3648+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000223C A7EB 00C0               000000C0   3649+         aghi  14,192              increase by frame size               01-DCCPR
00002240 E3E0 C020 0021          00000020   3650+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00002246 4720 B020               00000020   3651+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000224A                                    3652+@PER_1441 ds   0h                                                       01-DCCPR
0000224A EBDE 2080 0024          00000080   3653+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00002250 E3C0 2090 0024          00000090   3654+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00002256 B904 00D2                          3655+         lgr   13,2                set real frame pointer               01-DCCPR
0000225A B904 00CF                          3656+         lgr   12,15               set base reg                         01-DCCPR
                        00002220            3657+         using @REGION_1441_1,12                                        01-DCCPR
                                            3658 * ******* End of Prologue
                                            3659 * *
0000225E E3F0 1000 0004          00000000   3660          LG    15,0(0,1)   ; rkq
                                            3661 * ***
                                            3662 * ***      if (((!rkq->rkq_qio)))
00002264 E310 F090 0002          00000090   3663          LTG   1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
0000226A 4780 C102               00002322   3664          BZ    @ret_lab_1441
                                            3665 * ***         return;
0000226E                                    3666 @L275    DS    0H
                                            3667 * ***
                                            3668 * ***           if (rkq->rkq_qio->event_cb) {
0000226E E310 F090 0004          00000090   3669          LG    1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
00002274 E310 1020 0002          00000020   3670          LTG   1,32(0,1)   ; offset of event_cb in rd_kafka_q_io
0000227A 4780 C0A8               000022C8   3671          BZ    @L276
                                            3672 * ***                   rkq->rkq_qio->event_cb(rkq->rkq_rk,
                                            3673 * ***                                          rkq->rkq_qio->event_cb_\
                                                                                                                           Page   80 
  Active Usings: @REGION_1441_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3674 * opaque);
0000227E E310 F088 0004          00000088   3675          LG    1,136(0,15)
00002284 E310 D0A8 0024          000000A8   3676          STG   1,168(0,13)
0000228A E310 F090 0004          00000090   3677          LG    1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
00002290 E310 1028 0004          00000028   3678          LG    1,40(0,1)
00002296 E310 D0B0 0024          000000B0   3679          STG   1,176(0,13)
0000229C E3F0 F090 0004          00000090   3680          LG    15,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
000022A2 E3F0 F020 0004          00000020   3681          LG    15,32(0,15) ; offset of event_cb in rd_kafka_q_io
000022A8 4110 D0A8               000000A8   3682          LA    1,168(0,13)
000022AC                                    3683 @@gen_label136 DS    0H
000022AC 05EF                               3684          BALR  14,15
000022AE                                    3685 @@gen_label137 DS    0H
                                            3686 * ***                   return;
000022AE 47F0 C102               00002322   3687          B     @ret_lab_1441
000022B8                                    3688          DS    0D
000022B8 000000C0                           3689 @FRAMESIZE_1441 DC F'192'
000022BC 00000000
000022C0 0000000000000000                   3690 @lit_1441_89 DC AD(write)
                                            3691 * ***           }
000022C8                                    3692 @L276    DS    0H
                                            3693 * ***
                                            3694 * ***
                                            3695 * ***
                                            3696 * ***
                                            3697 * ***
                                            3698 * ***
                                            3699 * ***           if (rkq->rkq_qio->sent)
000022C8 E310 F090 0004          00000090   3700          LG    1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
000022CE 9500 1018      00000018 00000000   3701          CLI   24(1),0
000022D2 4770 C102               00002322   3702          BNE   @ret_lab_1441
                                            3703 * ***                   return;
000022D6                                    3704 @L277    DS    0H
                                            3705 * ***
                                            3706 * ***           rkq->rkq_qio->sent = 1;
000022D6 E310 F090 0004          00000090   3707          LG    1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
000022DC 9201 1018      00000018 00000001   3708          MVI   24(1),1     ; offset of sent in rd_kafka_q_io
                                            3709 * ***
                                            3710 * ***
                                            3711 * ***
                                            3712 * ***           if (write(rkq->rkq_qio->fd,rkq->rkq_qio->payload,(int)\
                                            3713 * rkq->rkq_qio->size) == -1)
000022E0 E310 F090 0004          00000090   3714          LG    1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
000022E6 E310 1000 0014          00000000   3715          LGF   1,0(0,1)
000022EC E310 D0A8 0024          000000A8   3716          STG   1,168(0,13)
000022F2 E310 F090 0004          00000090   3717          LG    1,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
000022F8 E310 1008 0004          00000008   3718          LG    1,8(0,1)
000022FE E310 D0B0 0024          000000B0   3719          STG   1,176(0,13)
00002304 E3F0 F090 0004          00000090   3720          LG    15,144(0,15) ; offset of rkq_qio in rd_kafka_q_s
0000230A E3F0 F014 0014          00000014   3721          LGF   15,20(0,15)
00002310 E3F0 D0B8 0024          000000B8   3722          STG   15,184(0,13)
00002316 4110 D0A8               000000A8   3723          LA    1,168(0,13)
0000231A E3F0 C0A0 0004          000022C0   3724          LG    15,@lit_1441_89 ; write
                                                                                                                           Page   81 
  Active Usings: @REGION_1441_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002320                                    3725 @@gen_label139 DS    0H
00002320 05EF                               3726          BALR  14,15
00002322                                    3727 @@gen_label140 DS    0H
                                            3728 * ***
                                            3729 * ***                   ;
00002322                                    3730 @L278    DS    0H
                                            3731 * ***   }
00002322                                    3732 @ret_lab_1441 DS 0H
                                            3733 * * **** Start of Epilogue
                                            3734          DCCEPIL
00002322                                    3735+         ds 0h                                                          01-DCCEP
                                            3736+* Epilog
00002322 D707 D088 D088 00000088 00000088   3737+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002328 E3D0 D080 0004          00000080   3738+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000232E E3C0 D090 0004          00000090   3739+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00002334 E3B0 C018 0004          00000018   3740+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000233A E3C0 B010 0021          00000010   3741+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002340 E3E0 D008 0004          00000008   3742+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002346 EB1C D020 0004          00000020   3743+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000234C 078E                               3744+         bcr 8,14                if same dsab, just return              01-DCCEP
0000234E E3F0 D010 0024          00000010   3745+         stg 15,16(0,13)         save return code                       01-DCCEP
00002354 E300 D018 0024          00000018   3746+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000235A E3F0 D090 0004          00000090   3747+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002360 E3F0 F018 0004          00000018   3748+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002366 47F0 F040               00000040   3749+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            3750+* End of Epilog
                                            3751 * * **** End of Epilogue
                                            3752          DROP  12
                                            3753 *
                                            3754 *   DSECT for automatic variables in "rd_kafka_q_io_event"
                                            3755 *      (FUNCTION #1441)
                                            3756 *
00000000                00000000 000000A8   3757 @AUTO#rd_kafka_q_io_event DSECT
00000000                                    3758          DS    XL168
                                            3759 *
0000236A                00000000 00010480   3760 @CODE    CSECT
                                            3761 *
                                            3762 *
                                            3763 *
                                            3764 * ....... start of rd_kafka_op_cmp_prio
0000236A                                    3765 @LNAME1442 DS  0H
0000236A 00000014                           3766          DC    X'00000014'
0000236E 99846D9281869281                   3767          DC    C'rd_kafka_op_cmp_prio'
00002382 00                                 3768          DC    X'00'
                                            3769 rd_kafka_op_cmp_prio DCCPRLG CINDEX=1442,BASER=12,FRAME=176,SAVEAREA=NO*
                                                                ,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1442
                                            3770          macro
                                            3771          dccextrn &m
                                            3772          gblc    &$dccext(1000)
                                            3773          gbla    &$dccexti
                                            3774          lcla    &i
                                            3775 &$dccext(&$dccexti+1) setc    '&m'
                                                                                                                           Page   82 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            3776 &i       seta    1
                                            3777 .loop    aif    (&i gt &$dccexti).around
                                            3778          aif    ('&$dccext(&i)' eq '&m').getout
                                            3779 &i       seta    &i+1
                                            3780          ago     .loop
                                            3781 .around  anop
                                            3782 &$dccexti seta &$dccexti+1
                                            3783          extrn  &m
                                            3784 .getout  anop
                                            3785          mend
00002388                                    3786+$eye0087    ds    0d                                                    02-DCCCA
00002388 C4C3C3                             3787+         dc cl3'DCC'                                                    02-DCCCA
0000238B 01                                 3788+         dc xl1'01' format one                                          02-DCCCA
0000238C 00000000                           3789+         dc a(0)                                                        02-DCCCA
00002390 0000000000000000                   3790+         dc ad(0)                                                       02-DCCCA
00002398 00000000000000B0                   3791+         dc ad(176)                                                     02-DCCCA
000023A0 0000000000000000                   3792+         dc ad(0)                                                       02-DCCCA
000023A8 0000000000001000                   3793+         dc ad(4096)                                                    02-DCCCA
000023B0 20                                 3794+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000023B1 03                                 3795+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000023B2 03                                 3796+         dc al1(3)                                                      02-DCCCA
000023B3 08                                 3797+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000023B4 00                                 3798+         dc bl.8'00000000'                                              02-DCCCA
000023B5 000000                             3799+         dc al3(0)                                                      02-DCCCA
000023B8 000000000000236A                   3800+         dc ad(@LNAME1442)                                              02-DCCCA
000023C0                                    3801+         ds 0d                                                          02-DCCCA
000023C0 0000000000002388                   3802+         dc ad($eye0087)                                                02-DCCCA
000023C8 0000000000000000                   3803+         dc ad(0)                                                       02-DCCCA
000023D0                                    3804+         ds    0d                                                       01-DCCPR
000023D0                                    3805+rd_kafka_op_cmp_prio ds 0d                                              01-DCCPR
000023D0                                    3806+@REGION_1442_1 ds 0h                                                    01-DCCPR
000023D0 EBEC D008 0024          00000008   3807+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000023D6 B904 00CF                          3808+         lgr   12,15               set base reg                         01-DCCPR
                        000023D0            3809+         using @REGION_1442_1,12                                        01-DCCPR
                                            3810 * ******* End of Prologue
                                            3811 * *
                                            3812 * ***           const rd_kafka_op_t *a = _a, *b = _b;
000023DA E3F0 1000 0004          00000000   3813          LG    15,0(0,1)   ; _a
000023E0 E310 1008 0004          00000008   3814          LG    1,8(0,1)    ; _b
                                            3815 * ***
                                            3816 * ***           return (int)((b->rko_prio) < (a->rko_prio) ? -1 : ((b-\
                                            3817 * >rko_prio) > (a->rko_prio)));
000023E6 5820 1034               00000034   3818          L     2,52(0,1)   ; offset of rko_prio in rd_kafka_op_s
000023EA 5920 F034               00000034   3819          C     2,52(0,15)
000023EE 47B0 C02A               000023FA   3820          BNL   @L279
000023F2 A7F8 FFFF               0000FFFF   3821          LHI   15,-1       ; -1
000023F6 47F0 C042               00002412   3822          B     @L280
000023FA                                    3823 @L279    DS    0H
000023FA 5810 1034               00000034   3824          L     1,52(0,1)   ; offset of rko_prio in rd_kafka_op_s
000023FE 5910 F034               00000034   3825          C     1,52(0,15)
00002402 47D0 C03E               0000240E   3826          BNH   @@gen_label142
00002406 A7F8 0001               00000001   3827          LHI   15,1
                                                                                                                           Page   83 
  Active Usings: @REGION_1442_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000240A 47F0 C042               00002412   3828          B     @@gen_label143
0000240E                                    3829 @@gen_label142 DS 0H
0000240E A7F8 0000               00000000   3830          LHI   15,0
00002412                                    3831 @@gen_label143 DS 0H
00002412                                    3832 @L280    DS    0H
00002412 B914 00FF                          3833          LGFR  15,15
                                            3834 * ***   }
                                            3835 * * **** Start of Epilogue
                                            3836          DCCEPIL
00002416                                    3837+         ds 0h                                                          01-DCCEP
                                            3838+* Epilog
                                            3839+* Epilog
00002416 E3E0 D008 0004          00000008   3840+         lg    14,8(,13) restore the reg                                01-DCCEP
0000241C EB1C D020 0004          00000020   3841+         lmg   1,12,32(13)                                              01-DCCEP
00002422 07FE                               3842+         br   14                                                        01-DCCEP
                                            3843+* End of Epilog
                                            3844 * * **** End of Epilogue
                                            3845          DROP  12
                                            3846 *
                                            3847 *   DSECT for automatic variables in "rd_kafka_op_cmp_prio"
                                            3848 *      (FUNCTION #1442)
                                            3849 *
00000000                00000000 000000A8   3850 @AUTO#rd_kafka_op_cmp_prio DSECT
00000000                                    3851          DS    XL168
                                            3852 *
00002424                00000000 00010480   3853 @CODE    CSECT
                                            3854 *
                                            3855 *
                                            3856 *
                                            3857 * ....... start of rd_kafka_q_enq0
00002424                                    3858 @LNAME1444 DS  0H
00002424 0000000F                           3859          DC    X'0000000F'
00002428 99846D9281869281                   3860          DC    C'rd_kafka_q_enq0'
00002437 00                                 3861          DC    X'00'
                                            3862 rd_kafka_q_enq0 DCCPRLG CINDEX=1444,BASER=12,FRAME=192,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1444
                                            3863          macro
                                            3864          dccextrn &m
                                            3865          gblc    &$dccext(1000)
                                            3866          gbla    &$dccexti
                                            3867          lcla    &i
                                            3868 &$dccext(&$dccexti+1) setc    '&m'
                                            3869 &i       seta    1
                                            3870 .loop    aif    (&i gt &$dccexti).around
                                            3871          aif    ('&$dccext(&i)' eq '&m').getout
                                            3872 &i       seta    &i+1
                                            3873          ago     .loop
                                            3874 .around  anop
                                            3875 &$dccexti seta &$dccexti+1
                                            3876          extrn  &m
                                            3877 .getout  anop
                                            3878          mend
                                                                                                                           Page   84 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002438                                    3879+$eye0090    ds    0d                                                    02-DCCCA
00002438 C4C3C3                             3880+         dc cl3'DCC'                                                    02-DCCCA
0000243B 01                                 3881+         dc xl1'01' format one                                          02-DCCCA
0000243C 00000000                           3882+         dc a(0)                                                        02-DCCCA
00002440 00000000000024AA                   3883+         dc ad(@PER_1444)                                               02-DCCCA
00002448 00000000000000C0                   3884+         dc ad(192)                                                     02-DCCCA
00002450 0000000000000000                   3885+         dc ad(0)                                                       02-DCCCA
00002458 0000000000001000                   3886+         dc ad(4096)                                                    02-DCCCA
00002460 20                                 3887+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002461 03                                 3888+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002462 03                                 3889+         dc al1(3)                                                      02-DCCCA
00002463 08                                 3890+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002464 00                                 3891+         dc bl.8'00000000'                                              02-DCCCA
00002465 000000                             3892+         dc al3(0)                                                      02-DCCCA
00002468 0000000000002424                   3893+         dc ad(@LNAME1444)                                              02-DCCCA
00002470                                    3894+         ds 0d                                                          02-DCCCA
00002470 0000000000002438                   3895+         dc ad($eye0090)                                                02-DCCCA
00002478 0000000000000000                   3896+         dc ad(0)                                                       02-DCCCA
00002480                                    3897+         ds    0d                                                       01-DCCPR
00002480                                    3898+rd_kafka_q_enq0 ds 0d                                                   01-DCCPR
00002480                                    3899+@REGION_1444_1 ds 0h                                                    01-DCCPR
00002480 EBEC D008 0024          00000008   3900+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00002486 E3E0 D088 0004          00000088   3901+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000248C E3C0 D090 0004          00000090   3902+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00002492 B904 002E                          3903+         lgr   2,14                copy addr of our savearea            01-DCCPR
00002496 E3B0 C018 0004          00000018   3904+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000249C A7EB 00C0               000000C0   3905+         aghi  14,192              increase by frame size               01-DCCPR
000024A0 E3E0 C020 0021          00000020   3906+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000024A6 4720 B020               00000020   3907+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000024AA                                    3908+@PER_1444 ds   0h                                                       01-DCCPR
000024AA EBDE 2080 0024          00000080   3909+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000024B0 E3C0 2090 0024          00000090   3910+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000024B6 B904 00D2                          3911+         lgr   13,2                set real frame pointer               01-DCCPR
000024BA B904 00CF                          3912+         lgr   12,15               set base reg                         01-DCCPR
                        00002480            3913+         using @REGION_1444_1,12                                        01-DCCPR
                                            3914 * ******* End of Prologue
                                            3915 * *
                                            3916 * ***       if (((!rko->rko_prio)))
000024BE EB34 1000 0004          00000000   3917          LMG   3,4,0(1)    ; rkq
000024C4 E3F0 4034 0012          00000034   3918          LT    15,52(0,4)  ; offset of rko_prio in rd_kafka_op_s
000024CA 4770 C090               00002510   3919          BNZ   @L288
                                            3920 * ***           do {  (rko)->rko_link .tqe_next = (((void *)0)); (rko)\
                                            3921 * ->rko_link .tqe_prev = (&rkq->rkq_q)->tqh_last; *(&rkq->rkq_q)->tqh_\
                                            3922 * last = (rko); (&rkq->rkq_q)->tqh_last = &(rko)->rko_link .tqe_next; \
                                            3923 * } while ( 0);
000024CE                                    3924 @L289    DS    0H
000024CE A7F9 0000               00000000   3925          LGHI  15,0        ; 0
000024D2 E3F0 4000 0024          00000000   3926          STG   15,0(0,4)   ; rko
000024D8 E3F0 3068 0004          00000068   3927          LG    15,104(0,3) ; offset of tqh_last in rd_kafka_op_tailq
000024DE E3F0 4008 0024          00000008   3928          STG   15,8(0,4)   ; offset of tqe_prev in 0000055
000024E4 E3F0 3068 0004          00000068   3929          LG    15,104(0,3) ; offset of tqh_last in rd_kafka_op_tailq
000024EA E340 F000 0024          00000000   3930          STG   4,0(0,15)
                                                                                                                           Page   85 
  Active Usings: @REGION_1444_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000024F0 E340 3068 0024          00000068   3931          STG   4,104(0,3)  ; offset of tqh_last in rd_kafka_op_tailq
                                            3932 * ***       else if (at_head)
000024F6 47F0 C1C2               00002642   3933          B     @L292
00002500                                    3934          DS    0D
00002500 000000C0                           3935 @FRAMESIZE_1444 DC F'192'
00002504 00000000
00002508 00000000000023D0                   3936 @lit_1444_93 DC AD(rd_kafka_op_cmp_prio)
00002510                                    3937 @L288    DS    0H
00002510 E3F0 1014 0012          00000014   3938          LT    15,20(0,1)  ; at_head
00002516 4780 C0D8               00002558   3939          BZ    @L300
                                            3940 * ***               do {  if (((rko)->rko_link .tqe_next = (&rkq->rkq_\
                                            3941 * q)->tqh_first) != (((void *)0))) (&rkq->rkq_q)->tqh_first->rko_link \
                                            3942 * .tqe_prev = &(rko)->rko_link .tqe_next; else (&rkq->rkq_q)->tqh_last\
                                            3943 *  = &(rko)->rko_link .tqe_next; (&rkq->rkq_q)->tqh_first = (rko); (rk\
                                            3944 * o)->rko_link .tqe_prev = &(&rkq->rkq_q)->tqh_first; } while ( 0);
0000251A                                    3945 @L294    DS    0H
0000251A E3F0 3060 0004          00000060   3946          LG    15,96(0,3)  ; offset of rkq_q in rd_kafka_q_s
00002520 E3F0 4000 0024          00000000   3947          STG   15,0(0,4)
00002526 B902 00FF                          3948          LTGR  15,15
0000252A 4780 C0BE               0000253E   3949          BE    @L297
0000252E E3F0 3060 0004          00000060   3950          LG    15,96(0,3)  ; offset of rkq_q in rd_kafka_q_s
00002534 E340 F008 0024          00000008   3951          STG   4,8(0,15)   ; offset of tqe_prev in 0000055
0000253A 47F0 C0C4               00002544   3952          B     @L298
0000253E                                    3953 @L297    DS    0H
0000253E E340 3068 0024          00000068   3954          STG   4,104(0,3)  ; offset of tqh_last in rd_kafka_op_tailq
00002544                                    3955 @L298    DS    0H
00002544 E340 3060 0024          00000060   3956          STG   4,96(0,3)   ; offset of rkq_q in rd_kafka_q_s
0000254A 41F0 3060               00000060   3957          LA    15,96(0,3)
0000254E E3F0 4008 0024          00000008   3958          STG   15,8(0,4)   ; offset of tqe_prev in 0000055
                                            3959 * ***       else
00002554 47F0 C1C2               00002642   3960          B     @L292
                                            3961 * ***           do { if(((&rkq->rkq_q)->tqh_first) == ((void *)0)) { d\
                                            3962 * o {  if (((rko)->rko_link .tqe_next = (&rkq->rkq_q)->tqh_first) != (\
                                            3963 * ((void *)0))) (&rkq->rkq_q)->tqh_first->rko_link .tqe_prev = &(rko)-\
                                            3964 * >rko_link .tqe_next; else (&rkq->rkq_q)->tqh_last = &(rko)->rko_link\
                                            3965 *  .tqe_next; (&rkq->rkq_q)->tqh_first = (rko); (rko)->rko_link .tqe_p\
                                            3966 * rev = &(&rkq->rkq_q)->tqh_first; } while ( 0); } else { rd_kafka_op_\
                                            3967 * t * _tmp; for ((_tmp) = ((&rkq->rkq_q)->tqh_first); (_tmp) != (((voi\
                                            3968 * d *)0)); (_tmp) = ((_tmp)->rko_link .tqe_next)) { if(rd_kafka_op_cmp\
                                            3969 * _prio(rko,_tmp) < 0) { do {  (rko)->rko_link .tqe_prev = (_tmp)->rko\
                                            3970 * _link .tqe_prev; (rko)->rko_link .tqe_next = (_tmp); *(_tmp)->rko_li\
                                            3971 * nk .tqe_prev = (rko); (_tmp)->rko_link .tqe_prev = &(rko)->rko_link \
                                            3972 * .tqe_next; } while ( 0); break; } if(!((_tmp)->rko_link .tqe_next)) \
                                            3973 * { do {  if (((rko)->rko_link .tqe_next = (_tmp)->rko_link .tqe_next)\
                                            3974 *  != (((void *)0))) (rko)->rko_link .tqe_next->rko_link .tqe_prev = &\
                                            3975 * (rko)->rko_link .tqe_next; else (&rkq->rkq_q)->tqh_last = &(rko)->rk\
                                            3976 * o_link .tqe_next; (_tmp)->rko_link .tqe_next = (rko); (rko)->rko_lin\
                                            3977 * k .tqe_prev = &(_tmp)->rko_link .tqe_next; } while ( 0); break; } } \
                                            3978 * } } while(0);
00002558                                    3979 @L300    DS    0H
00002558 E3F0 3060 0002          00000060   3980          LTG   15,96(0,3)  ; offset of rkq_q in rd_kafka_q_s
0000255E 4770 C120               000025A0   3981          BNE   @L303
                                                                                                                           Page   86 
  Active Usings: @REGION_1444_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002562                                    3982 @L304    DS    0H
00002562 E3F0 3060 0004          00000060   3983          LG    15,96(0,3)  ; offset of rkq_q in rd_kafka_q_s
00002568 E3F0 4000 0024          00000000   3984          STG   15,0(0,4)
0000256E B902 00FF                          3985          LTGR  15,15
00002572 4780 C106               00002586   3986          BE    @L307
00002576 E3F0 3060 0004          00000060   3987          LG    15,96(0,3)  ; offset of rkq_q in rd_kafka_q_s
0000257C E340 F008 0024          00000008   3988          STG   4,8(0,15)   ; offset of tqe_prev in 0000055
00002582 47F0 C10C               0000258C   3989          B     @L308
00002586                                    3990 @L307    DS    0H
00002586 E340 3068 0024          00000068   3991          STG   4,104(0,3)  ; offset of tqh_last in rd_kafka_op_tailq
0000258C                                    3992 @L308    DS    0H
0000258C E340 3060 0024          00000060   3993          STG   4,96(0,3)   ; offset of rkq_q in rd_kafka_q_s
00002592 41F0 3060               00000060   3994          LA    15,96(0,3)
00002596 E3F0 4008 0024          00000008   3995          STG   15,8(0,4)   ; offset of tqe_prev in 0000055
0000259C 47F0 C1C2               00002642   3996          B     @L309
000025A0                                    3997 @L303    DS    0H
000025A0 E320 3060 0004          00000060   3998          LG    2,96(0,3)   ; offset of rkq_q in rd_kafka_q_s
000025A6 47F0 C1BA               0000263A   3999          B     @L311
000025AA                                    4000 @L310    DS    0H
000025AA E340 D0B0 0024          000000B0   4001          STG   4,176(0,13)
000025B0 E320 D0B8 0024          000000B8   4002          STG   2,184(0,13)
000025B6 4110 D0B0               000000B0   4003          LA    1,176(0,13)
000025BA E3F0 C088 0004          00002508   4004          LG    15,@lit_1444_93 ; rd_kafka_op_cmp_prio
000025C0                                    4005 @@gen_label149 DS    0H
000025C0 05EF                               4006          BALR  14,15
000025C2                                    4007 @@gen_label150 DS    0H
000025C2 12FF                               4008          LTR   15,15
000025C4 47B0 C170               000025F0   4009          BNL   @L314
000025C8                                    4010 @L315    DS    0H
000025C8 E3F0 2008 0004          00000008   4011          LG    15,8(0,2)   ; offset of tqe_prev in 0000055
000025CE E3F0 4008 0024          00000008   4012          STG   15,8(0,4)   ; offset of tqe_prev in 0000055
000025D4 E320 4000 0024          00000000   4013          STG   2,0(0,4)    ; rko
000025DA E3F0 2008 0004          00000008   4014          LG    15,8(0,2)   ; offset of tqe_prev in 0000055
000025E0 E340 F000 0024          00000000   4015          STG   4,0(0,15)
000025E6 E340 2008 0024          00000008   4016          STG   4,8(0,2)    ; offset of tqe_prev in 0000055
000025EC 47F0 C1C2               00002642   4017          B     @L312
000025F0                                    4018 @L314    DS    0H
000025F0 E3F0 2000 0002          00000000   4019          LTG   15,0(0,2)   ; _tmp
000025F6 4770 C1B4               00002634   4020          BNZ   @L318
000025FA                                    4021 @L319    DS    0H
000025FA E3F0 2000 0004          00000000   4022          LG    15,0(0,2)   ; _tmp
00002600 E3F0 4000 0024          00000000   4023          STG   15,0(0,4)
00002606 B902 00FF                          4024          LTGR  15,15
0000260A 4780 C19E               0000261E   4025          BE    @L322
0000260E E3F0 4000 0004          00000000   4026          LG    15,0(0,4)   ; rko
00002614 E340 F008 0024          00000008   4027          STG   4,8(0,15)   ; offset of tqe_prev in 0000055
0000261A 47F0 C1A4               00002624   4028          B     @L323
0000261E                                    4029 @L322    DS    0H
0000261E E340 3068 0024          00000068   4030          STG   4,104(0,3)  ; offset of tqh_last in rd_kafka_op_tailq
00002624                                    4031 @L323    DS    0H
00002624 E340 2000 0024          00000000   4032          STG   4,0(0,2)    ; _tmp
0000262A E320 4008 0024          00000008   4033          STG   2,8(0,4)    ; offset of tqe_prev in 0000055
                                                                                                                           Page   87 
  Active Usings: @REGION_1444_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002630 47F0 C1C2               00002642   4034          B     @L312
00002634                                    4035 @L318    DS    0H
00002634 E320 2000 0004          00000000   4036          LG    2,0(0,2)    ; _tmp
0000263A                                    4037 @L311    DS    0H
0000263A B902 00F2                          4038          LTGR  15,2
0000263E 4770 C12A               000025AA   4039          BNE   @L310
00002642                                    4040 @L312    DS    0H
00002642                                    4041 @L309    DS    0H
                                            4042 * ***
                                            4043 * ***       rkq->rkq_qlen++;
00002642                                    4044 @L299    DS    0H
00002642                                    4045 @L292    DS    0H
00002642 58F0 3070               00000070   4046          L     15,112(0,3)
00002646 A7FA 0001               00000001   4047          AHI   15,1
0000264A 50F0 3070               00000070   4048          ST    15,112(0,3)
                                            4049 * ***       rkq->rkq_qsize += rko->rko_len;
0000264E E3F0 3078 0004          00000078   4050          LG    15,120(0,3)
00002654 E3F0 4030 0018          00000030   4051          AGF   15,48(0,4)
0000265A E3F0 3078 0024          00000078   4052          STG   15,120(0,3)
                                            4053 * ***   }
00002660                                    4054 @ret_lab_1444 DS 0H
                                            4055 * * **** Start of Epilogue
                                            4056          DCCEPIL
00002660                                    4057+         ds 0h                                                          01-DCCEP
                                            4058+* Epilog
00002660 D707 D088 D088 00000088 00000088   4059+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002666 E3D0 D080 0004          00000080   4060+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000266C E3C0 D090 0004          00000090   4061+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00002672 E3B0 C018 0004          00000018   4062+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002678 E3C0 B010 0021          00000010   4063+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000267E E3E0 D008 0004          00000008   4064+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002684 EB1C D020 0004          00000020   4065+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000268A 078E                               4066+         bcr 8,14                if same dsab, just return              01-DCCEP
0000268C E3F0 D010 0024          00000010   4067+         stg 15,16(0,13)         save return code                       01-DCCEP
00002692 E300 D018 0024          00000018   4068+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002698 E3F0 D090 0004          00000090   4069+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000269E E3F0 F018 0004          00000018   4070+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000026A4 47F0 F040               00000040   4071+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            4072+* End of Epilog
                                            4073 * * **** End of Epilogue
                                            4074          DROP  12
                                            4075 *
                                            4076 *   DSECT for automatic variables in "rd_kafka_q_enq0"
                                            4077 *      (FUNCTION #1444)
                                            4078 *
00000000                00000000 000000A8   4079 @AUTO#rd_kafka_q_enq0 DSECT
00000000                                    4080          DS    XL168
                                            4081 *
000026A8                00000000 00010480   4082 @CODE    CSECT
                                            4083 *
                                            4084 *
                                            4085 *
                                                                                                                           Page   88 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4086 * ....... start of rd_kafka_q_enq1
000026A8                                    4087 @LNAME1445 DS  0H
000026A8 0000000F                           4088          DC    X'0000000F'
000026AC 99846D9281869281                   4089          DC    C'rd_kafka_q_enq1'
000026BB 00                                 4090          DC    X'00'
                                            4091 rd_kafka_q_enq1 DCCPRLG CINDEX=1445,BASER=12,FRAME=216,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1445
                                            4092          macro
                                            4093          dccextrn &m
                                            4094          gblc    &$dccext(1000)
                                            4095          gbla    &$dccexti
                                            4096          lcla    &i
                                            4097 &$dccext(&$dccexti+1) setc    '&m'
                                            4098 &i       seta    1
                                            4099 .loop    aif    (&i gt &$dccexti).around
                                            4100          aif    ('&$dccext(&i)' eq '&m').getout
                                            4101 &i       seta    &i+1
                                            4102          ago     .loop
                                            4103 .around  anop
                                            4104 &$dccexti seta &$dccexti+1
                                            4105          extrn  &m
                                            4106 .getout  anop
                                            4107          mend
000026C0                                    4108+$eye0093    ds    0d                                                    02-DCCCA
000026C0 C4C3C3                             4109+         dc cl3'DCC'                                                    02-DCCCA
000026C3 01                                 4110+         dc xl1'01' format one                                          02-DCCCA
000026C4 00000000                           4111+         dc a(0)                                                        02-DCCCA
000026C8 0000000000002732                   4112+         dc ad(@PER_1445)                                               02-DCCCA
000026D0 00000000000000D8                   4113+         dc ad(216)                                                     02-DCCCA
000026D8 0000000000000000                   4114+         dc ad(0)                                                       02-DCCCA
000026E0 0000000000001000                   4115+         dc ad(4096)                                                    02-DCCCA
000026E8 20                                 4116+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000026E9 03                                 4117+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000026EA 03                                 4118+         dc al1(3)                                                      02-DCCCA
000026EB 08                                 4119+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000026EC 00                                 4120+         dc bl.8'00000000'                                              02-DCCCA
000026ED 000000                             4121+         dc al3(0)                                                      02-DCCCA
000026F0 00000000000026A8                   4122+         dc ad(@LNAME1445)                                              02-DCCCA
000026F8                                    4123+         ds 0d                                                          02-DCCCA
000026F8 00000000000026C0                   4124+         dc ad($eye0093)                                                02-DCCCA
00002700 0000000000000000                   4125+         dc ad(0)                                                       02-DCCCA
00002708                                    4126+         ds    0d                                                       01-DCCPR
00002708                                    4127+rd_kafka_q_enq1 ds 0d                                                   01-DCCPR
00002708                                    4128+@REGION_1445_1 ds 0h                                                    01-DCCPR
00002708 EBEC D008 0024          00000008   4129+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000270E E3E0 D088 0004          00000088   4130+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00002714 E3C0 D090 0004          00000090   4131+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000271A B904 002E                          4132+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000271E E3B0 C018 0004          00000018   4133+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00002724 A7EB 00D8               000000D8   4134+         aghi  14,216              increase by frame size               01-DCCPR
00002728 E3E0 C020 0021          00000020   4135+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000272E 4720 B020               00000020   4136+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
                                                                                                                           Page   89 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002732                                    4137+@PER_1445 ds   0h                                                       01-DCCPR
00002732 EBDE 2080 0024          00000080   4138+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00002738 E3C0 2090 0024          00000090   4139+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000273E B904 00D2                          4140+         lgr   13,2                set real frame pointer               01-DCCPR
00002742 B904 00CF                          4141+         lgr   12,15               set base reg                         01-DCCPR
                        00002708            4142+         using @REGION_1445_1,12                                        01-DCCPR
00002746 B904 0071                          4143          LGR   7,1         ; ptr to parm area
                                            4144 * ******* End of Prologue
                                            4145 * *
0000274A EB24 7000 0004          00000000   4146          LMG   2,4,0(7)    ; rkq
00002750 E350 7024 0012          00000024   4147          LT    5,36(0,7)   ; do_lock
                                            4148 * ***           rd_kafka_q_t *fwdq;
                                            4149 * ***
                                            4150 * ***           if (do_lock)
00002756 4780 C064               0000276C   4151          BZ    @L325
                                            4152 * ***                   mtx_lock(&rkq->rkq_lock);
0000275A E320 D0B0 0024          000000B0   4153          STG   2,176(0,13)
00002760 4110 D0B0               000000B0   4154          LA    1,176(0,13)
00002764 E3F0 C0B0 0004          000027B8   4155          LG    15,@lit_1445_95 ; mtx_lock
0000276A                                    4156 @@gen_label156 DS    0H
0000276A 05EF                               4157          BALR  14,15
0000276C                                    4158 @@gen_label157 DS    0H
0000276C                                    4159 @L324    DS    0H
                                            4160 * ***
                                            4161 * ***           do {} while (0);
0000276C                                    4162 @L325    DS    0H
                                            4163 * ***
                                            4164 * ***           if (((!(rkq->rkq_flags & 0x2)))) {
0000276C 9102 2087      00000087 00000002   4165          TM    135(2),2
00002770 4770 C0F8               00002800   4166          BNZ   @L328
                                            4167 * ***
                                            4168 * ***                   if (do_lock)
00002774 1255                               4169          LTR   5,5
00002776 4780 C084               0000278C   4170          BZ    @L329
                                            4171 * ***                           mtx_unlock(&rkq->rkq_lock);
0000277A E320 D0B0 0024          000000B0   4172          STG   2,176(0,13)
00002780 4110 D0B0               000000B0   4173          LA    1,176(0,13)
00002784 E3F0 C0B8 0004          000027C0   4174          LG    15,@lit_1445_96 ; mtx_unlock
0000278A                                    4175 @@gen_label160 DS    0H
0000278A 05EF                               4176          BALR  14,15
0000278C                                    4177 @@gen_label161 DS    0H
0000278C                                    4178 @L329    DS    0H
                                            4179 * ***
                                            4180 * ***                   return rd_kafka_op_reply(rko, RD_KAFKA_RESP_ER\
                                            4181 * R__DESTROY);
0000278C E330 D0B0 0024          000000B0   4182          STG   3,176(0,13)
00002792 E548 D0B8 FF3B          000000B8   4183          MVGHI 184(13),-197
00002798 4110 D0B0               000000B0   4184          LA    1,176(0,13)
0000279C E3F0 C0C0 0004          000027C8   4185          LG    15,@lit_1445_97 ; rd_kafka_op_reply
000027A2                                    4186 @@gen_label162 DS    0H
000027A2 05EF                               4187          BALR  14,15
000027A4                                    4188 @@gen_label163 DS    0H
                                                                                                                           Page   90 
  Active Usings: @REGION_1445_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000027A4 B914 00FF                          4189          LGFR  15,15
000027A8 47F0 C212               0000291A   4190          B     @ret_lab_1445
000027B0                                    4191          DS    0D
000027B0 000000D8                           4192 @FRAMESIZE_1445 DC F'216'
000027B4 00000000
000027B8 0000000000000000                   4193 @lit_1445_95 DC AD(mtx_lock)
000027C0 0000000000000000                   4194 @lit_1445_96 DC AD(mtx_unlock)
000027C8 0000000000000000                   4195 @lit_1445_97 DC AD(rd_kafka_op_reply)
000027D0 00000000000020B8                   4196 @lit_1445_98 DC AD(rd_kafka_q_fwd_get)
000027D8 0000000000002480                   4197 @lit_1445_99 DC AD(rd_kafka_q_enq0)
000027E0 0000000000000000                   4198 @lit_1445_100 DC AD(cnd_signal)
000027E8 0000000000002220                   4199 @lit_1445_101 DC AD(rd_kafka_q_io_event)
000027F0 0000000000002708                   4200 @lit_1445_104 DC AD(rd_kafka_q_enq1)
000027F8 0000000000001D88                   4201 @lit_1445_105 DC AD(rd_kafka_q_destroy0)
                                            4202 * ***           }
00002800                                    4203 @L328    DS    0H
                                            4204 * ***
                                            4205 * ***           if (!(fwdq = rd_kafka_q_fwd_get(rkq, 0))) {
00002800 E320 D0B0 0024          000000B0   4206          STG   2,176(0,13)
00002806 D707 D0B8 D0B8 000000B8 000000B8   4207          XC    184(8,13),184(13)
0000280C 4110 D0B0               000000B0   4208          LA    1,176(0,13)
00002810 E3F0 C0C8 0004          000027D0   4209          LG    15,@lit_1445_98 ; rd_kafka_q_fwd_get
00002816                                    4210 @@gen_label164 DS    0H
00002816 05EF                               4211          BALR  14,15
00002818                                    4212 @@gen_label165 DS    0H
00002818 B904 006F                          4213          LGR   6,15
0000281C B902 00F6                          4214          LTGR  15,6
00002820 4770 C1B4               000028BC   4215          BNZ   @L330
                                            4216 * ***                   if (!rko->rko_serve && orig_destq->rkq_serve) \
                                            4217 * {
00002824 E3F0 3050 0002          00000050   4218          LTG   15,80(0,3)  ; offset of rko_serve in rd_kafka_op_s
0000282A 4770 C148               00002850   4219          BNZ   @L331
0000282E E3F0 4098 0002          00000098   4220          LTG   15,152(0,4) ; offset of rkq_serve in rd_kafka_q_s
00002834 4780 C148               00002850   4221          BZ    @L331
                                            4222 * ***
                                            4223 * ***
                                            4224 * ***                           rko->rko_serve = orig_destq->rkq_serve\
                                            4225 * ;
00002838 E3F0 4098 0004          00000098   4226          LG    15,152(0,4) ; offset of rkq_serve in rd_kafka_q_s
0000283E E3F0 3050 0024          00000050   4227          STG   15,80(0,3)  ; offset of rko_serve in rd_kafka_op_s
                                            4228 * ***                           rko->rko_serve_opaque = orig_destq->rk\
                                            4229 * q_opaque;
00002844 E3F0 40A0 0004          000000A0   4230          LG    15,160(0,4) ; offset of rkq_opaque in rd_kafka_q_s
0000284A E3F0 3058 0024          00000058   4231          STG   15,88(0,3)  ; offset of rko_serve_opaque in rd_kafka_op_*
                                                                s
                                            4232 * ***                   }
00002850                                    4233 @L331    DS    0H
                                            4234 * ***
                                            4235 * ***                   rd_kafka_q_enq0(rkq, rko, at_head);
00002850 EB23 D0B0 0024          000000B0   4236          STMG  2,3,176(13)
00002856 E3F0 701C 0014          0000001C   4237          LGF   15,28(0,7)  ; at_head
0000285C E3F0 D0C0 0024          000000C0   4238          STG   15,192(0,13)
                                                                                                                           Page   91 
  Active Usings: @REGION_1445_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002862 4110 D0B0               000000B0   4239          LA    1,176(0,13)
00002866 E3F0 C0D0 0004          000027D8   4240          LG    15,@lit_1445_99 ; rd_kafka_q_enq0
0000286C                                    4241 @@gen_label169 DS    0H
0000286C 05EF                               4242          BALR  14,15
0000286E                                    4243 @@gen_label170 DS    0H
                                            4244 * ***                   cnd_signal(&rkq->rkq_cond);
0000286E 41F0 2028               00000028   4245          LA    15,40(0,2)
00002872 E3F0 D0B0 0024          000000B0   4246          STG   15,176(0,13)
00002878 4110 D0B0               000000B0   4247          LA    1,176(0,13)
0000287C E3F0 C0D8 0004          000027E0   4248          LG    15,@lit_1445_100 ; cnd_signal
00002882                                    4249 @@gen_label171 DS    0H
00002882 05EF                               4250          BALR  14,15
00002884                                    4251 @@gen_label172 DS    0H
                                            4252 * ***                   if (rkq->rkq_qlen == 1)
00002884 E55C 2070 0001          00000070   4253          CHSI  112(2),1
0000288A 4770 C198               000028A0   4254          BNE   @L332
                                            4255 * ***                           rd_kafka_q_io_event(rkq);
0000288E E320 D0B0 0024          000000B0   4256          STG   2,176(0,13)
00002894 4110 D0B0               000000B0   4257          LA    1,176(0,13)
00002898 E3F0 C0E0 0004          000027E8   4258          LG    15,@lit_1445_101 ; rd_kafka_q_io_event
0000289E                                    4259 @@gen_label174 DS    0H
0000289E 05EF                               4260          BALR  14,15
000028A0                                    4261 @@gen_label175 DS    0H
000028A0                                    4262 @L332    DS    0H
                                            4263 * ***
                                            4264 * ***                   if (do_lock)
000028A0 1255                               4265          LTR   5,5
000028A2 4780 C20E               00002916   4266          BZ    @L334
                                            4267 * ***                           mtx_unlock(&rkq->rkq_lock);
000028A6 E320 D0B0 0024          000000B0   4268          STG   2,176(0,13)
000028AC 4110 D0B0               000000B0   4269          LA    1,176(0,13)
000028B0 E3F0 C0B8 0004          000027C0   4270          LG    15,@lit_1445_96 ; mtx_unlock
000028B6                                    4271 @@gen_label177 DS    0H
000028B6 05EF                               4272          BALR  14,15
000028B8                                    4273 @@gen_label178 DS    0H
000028B8                                    4274 @L333    DS    0H
                                            4275 * ***           } else {
000028B8 47F0 C20E               00002916   4276          B     @L334
000028BC                                    4277 @L330    DS    0H
                                            4278 * ***                   if (do_lock)
000028BC 1255                               4279          LTR   5,5
000028BE 4780 C1CC               000028D4   4280          BZ    @L335
                                            4281 * ***                           mtx_unlock(&rkq->rkq_lock);
000028C2 E320 D0B0 0024          000000B0   4282          STG   2,176(0,13)
000028C8 4110 D0B0               000000B0   4283          LA    1,176(0,13)
000028CC E3F0 C0B8 0004          000027C0   4284          LG    15,@lit_1445_96 ; mtx_unlock
000028D2                                    4285 @@gen_label180 DS    0H
000028D2 05EF                               4286          BALR  14,15
000028D4                                    4287 @@gen_label181 DS    0H
000028D4                                    4288 @L335    DS    0H
                                            4289 * ***                   rd_kafka_q_enq1(fwdq, rko, orig_destq, at_head\
                                            4290 * , 1);
                                                                                                                           Page   92 
  Active Usings: @REGION_1445_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000028D4 E360 D0B0 0024          000000B0   4291          STG   6,176(0,13)
000028DA EB34 D0B8 0024          000000B8   4292          STMG  3,4,184(13)
000028E0 E3F0 701C 0014          0000001C   4293          LGF   15,28(0,7)  ; at_head
000028E6 E3F0 D0C8 0024          000000C8   4294          STG   15,200(0,13)
000028EC E548 D0D0 0001          000000D0   4295          MVGHI 208(13),1
000028F2 4110 D0B0               000000B0   4296          LA    1,176(0,13)
000028F6 E3F0 C0E8 0004          000027F0   4297          LG    15,@lit_1445_104 ; rd_kafka_q_enq1
000028FC                                    4298 @@gen_label182 DS    0H
000028FC 05EF                               4299          BALR  14,15
000028FE                                    4300 @@gen_label183 DS    0H
                                            4301 * ***                   rd_kafka_q_destroy0(fwdq, 0 );
000028FE E360 D0B0 0024          000000B0   4302          STG   6,176(0,13)
00002904 D707 D0B8 D0B8 000000B8 000000B8   4303          XC    184(8,13),184(13)
0000290A 4110 D0B0               000000B0   4304          LA    1,176(0,13)
0000290E E3F0 C0F0 0004          000027F8   4305          LG    15,@lit_1445_105 ; rd_kafka_q_destroy0
00002914                                    4306 @@gen_label184 DS    0H
00002914 05EF                               4307          BALR  14,15
00002916                                    4308 @@gen_label185 DS    0H
                                            4309 * ***           }
00002916                                    4310 @L334    DS    0H
                                            4311 * ***
                                            4312 * ***           return 1;
00002916 A7F9 0001               00000001   4313          LGHI  15,1        ; 1
                                            4314 * ***   }
0000291A                                    4315 @ret_lab_1445 DS 0H
                                            4316 * * **** Start of Epilogue
                                            4317          DCCEPIL
0000291A                                    4318+         ds 0h                                                          01-DCCEP
                                            4319+* Epilog
0000291A D707 D088 D088 00000088 00000088   4320+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002920 E3D0 D080 0004          00000080   4321+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002926 E3C0 D090 0004          00000090   4322+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000292C E3B0 C018 0004          00000018   4323+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002932 E3C0 B010 0021          00000010   4324+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002938 E3E0 D008 0004          00000008   4325+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000293E EB1C D020 0004          00000020   4326+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00002944 078E                               4327+         bcr 8,14                if same dsab, just return              01-DCCEP
00002946 E3F0 D010 0024          00000010   4328+         stg 15,16(0,13)         save return code                       01-DCCEP
0000294C E300 D018 0024          00000018   4329+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002952 E3F0 D090 0004          00000090   4330+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002958 E3F0 F018 0004          00000018   4331+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000295E 47F0 F040               00000040   4332+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            4333+* End of Epilog
                                            4334 * * **** End of Epilogue
                                            4335          DROP  12
                                            4336 *
                                            4337 *   DSECT for automatic variables in "rd_kafka_q_enq1"
                                            4338 *      (FUNCTION #1445)
                                            4339 *
00000000                00000000 000000A8   4340 @AUTO#rd_kafka_q_enq1 DSECT
00000000                                    4341          DS    XL168
                                            4342 *
                                                                                                                           Page   93 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002962                00000000 00010480   4343 @CODE    CSECT
                                            4344 *
                                            4345 *
                                            4346 *
                                            4347 * ....... start of rd_kafka_q_enq
00002962                                    4348 @LNAME1446 DS  0H
00002962 0000000E                           4349          DC    X'0000000E'
00002966 99846D9281869281                   4350          DC    C'rd_kafka_q_enq'
00002974 00                                 4351          DC    X'00'
                                            4352 rd_kafka_q_enq DCCPRLG CINDEX=1446,BASER=12,FRAME=208,ENTRY=NO,ARCH=ZAR*
                                                                CH,LNAMEADDR=@LNAME1446
                                            4353          macro
                                            4354          dccextrn &m
                                            4355          gblc    &$dccext(1000)
                                            4356          gbla    &$dccexti
                                            4357          lcla    &i
                                            4358 &$dccext(&$dccexti+1) setc    '&m'
                                            4359 &i       seta    1
                                            4360 .loop    aif    (&i gt &$dccexti).around
                                            4361          aif    ('&$dccext(&i)' eq '&m').getout
                                            4362 &i       seta    &i+1
                                            4363          ago     .loop
                                            4364 .around  anop
                                            4365 &$dccexti seta &$dccexti+1
                                            4366          extrn  &m
                                            4367 .getout  anop
                                            4368          mend
00002978                                    4369+$eye0096    ds    0d                                                    02-DCCCA
00002978 C4C3C3                             4370+         dc cl3'DCC'                                                    02-DCCCA
0000297B 01                                 4371+         dc xl1'01' format one                                          02-DCCCA
0000297C 00000000                           4372+         dc a(0)                                                        02-DCCCA
00002980 00000000000029EA                   4373+         dc ad(@PER_1446)                                               02-DCCCA
00002988 00000000000000D0                   4374+         dc ad(208)                                                     02-DCCCA
00002990 0000000000000000                   4375+         dc ad(0)                                                       02-DCCCA
00002998 0000000000001000                   4376+         dc ad(4096)                                                    02-DCCCA
000029A0 20                                 4377+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000029A1 03                                 4378+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000029A2 03                                 4379+         dc al1(3)                                                      02-DCCCA
000029A3 08                                 4380+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000029A4 00                                 4381+         dc bl.8'00000000'                                              02-DCCCA
000029A5 000000                             4382+         dc al3(0)                                                      02-DCCCA
000029A8 0000000000002962                   4383+         dc ad(@LNAME1446)                                              02-DCCCA
000029B0                                    4384+         ds 0d                                                          02-DCCCA
000029B0 0000000000002978                   4385+         dc ad($eye0096)                                                02-DCCCA
000029B8 0000000000000000                   4386+         dc ad(0)                                                       02-DCCCA
000029C0                                    4387+         ds    0d                                                       01-DCCPR
000029C0                                    4388+rd_kafka_q_enq ds 0d                                                    01-DCCPR
000029C0                                    4389+@REGION_1446_1 ds 0h                                                    01-DCCPR
000029C0 EBEC D008 0024          00000008   4390+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000029C6 E3E0 D088 0004          00000088   4391+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000029CC E3C0 D090 0004          00000090   4392+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000029D2 B904 002E                          4393+         lgr   2,14                copy addr of our savearea            01-DCCPR
                                                                                                                           Page   94 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000029D6 E3B0 C018 0004          00000018   4394+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000029DC A7EB 00D0               000000D0   4395+         aghi  14,208              increase by frame size               01-DCCPR
000029E0 E3E0 C020 0021          00000020   4396+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000029E6 4720 B020               00000020   4397+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000029EA                                    4398+@PER_1446 ds   0h                                                       01-DCCPR
000029EA EBDE 2080 0024          00000080   4399+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000029F0 E3C0 2090 0024          00000090   4400+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000029F6 B904 00D2                          4401+         lgr   13,2                set real frame pointer               01-DCCPR
000029FA B904 00CF                          4402+         lgr   12,15               set base reg                         01-DCCPR
                        000029C0            4403+         using @REGION_1446_1,12                                        01-DCCPR
                                            4404 * ******* End of Prologue
                                            4405 * *
                                            4406 * ***           return rd_kafka_q_enq1(rkq, rko, rkq, 0, 1);
000029FE E3F0 1000 0004          00000000   4407          LG    15,0(0,1)   ; rkq
00002A04 E3F0 D0A8 0024          000000A8   4408          STG   15,168(0,13)
00002A0A E3F0 1008 0004          00000008   4409          LG    15,8(0,1)   ; rko
00002A10 E3F0 D0B0 0024          000000B0   4410          STG   15,176(0,13)
00002A16 E3F0 1000 0004          00000000   4411          LG    15,0(0,1)   ; rkq
00002A1C E3F0 D0B8 0024          000000B8   4412          STG   15,184(0,13)
00002A22 D707 D0C0 D0C0 000000C0 000000C0   4413          XC    192(8,13),192(13)
00002A28 E548 D0C8 0001          000000C8   4414          MVGHI 200(13),1
00002A2E 4110 D0A8               000000A8   4415          LA    1,168(0,13)
00002A32 E3F0 C0D0 0004          00002A90   4416          LG    15,@lit_1446_108 ; rd_kafka_q_enq1
00002A38                                    4417 @@gen_label186 DS    0H
00002A38 05EF                               4418          BALR  14,15
00002A3A                                    4419 @@gen_label187 DS    0H
00002A3A B914 00FF                          4420          LGFR  15,15
                                            4421 * ***   }
                                            4422 * * **** Start of Epilogue
                                            4423          DCCEPIL
00002A3E                                    4424+         ds 0h                                                          01-DCCEP
                                            4425+* Epilog
00002A3E D707 D088 D088 00000088 00000088   4426+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002A44 E3D0 D080 0004          00000080   4427+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002A4A E3C0 D090 0004          00000090   4428+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00002A50 E3B0 C018 0004          00000018   4429+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002A56 E3C0 B010 0021          00000010   4430+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002A5C E3E0 D008 0004          00000008   4431+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002A62 EB1C D020 0004          00000020   4432+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00002A68 078E                               4433+         bcr 8,14                if same dsab, just return              01-DCCEP
00002A6A E3F0 D010 0024          00000010   4434+         stg 15,16(0,13)         save return code                       01-DCCEP
00002A70 E300 D018 0024          00000018   4435+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002A76 E3F0 D090 0004          00000090   4436+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002A7C E3F0 F018 0004          00000018   4437+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002A82 47F0 F040               00000040   4438+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            4439+* End of Epilog
                                            4440 * * **** End of Epilogue
00002A88                                    4441          DS    0D
00002A88 000000D0                           4442 @FRAMESIZE_1446 DC F'208'
00002A8C 00000000
00002A90 0000000000002708                   4443 @lit_1446_108 DC AD(rd_kafka_q_enq1)
                                            4444          DROP  12
                                                                                                                           Page   95 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4445 *
                                            4446 *   DSECT for automatic variables in "rd_kafka_q_enq"
                                            4447 *      (FUNCTION #1446)
                                            4448 *
00000000                00000000 000000A8   4449 @AUTO#rd_kafka_q_enq DSECT
00000000                                    4450          DS    XL168
                                            4451 *
00002A98                00000000 00010480   4452 @CODE    CSECT
                                            4453 *
                                            4454 *
                                            4455 *
                                            4456 * ....... start of rd_crc32_init
00002A98                                    4457 @LNAME1484 DS  0H
00002A98 0000000D                           4458          DC    X'0000000D'
00002A9C 99846D839983F3F2                   4459          DC    C'rd_crc32_init'
00002AA9 00                                 4460          DC    X'00'
                                            4461 rd_crc32_init DCCPRLG CINDEX=1484,BASER=0,FRAME=168,SAVEAREA=NO,ENTRY=N*
                                                                O,ARCH=ZARCH,LNAMEADDR=@LNAME1484
                                            4462          macro
                                            4463          dccextrn &m
                                            4464          gblc    &$dccext(1000)
                                            4465          gbla    &$dccexti
                                            4466          lcla    &i
                                            4467 &$dccext(&$dccexti+1) setc    '&m'
                                            4468 &i       seta    1
                                            4469 .loop    aif    (&i gt &$dccexti).around
                                            4470          aif    ('&$dccext(&i)' eq '&m').getout
                                            4471 &i       seta    &i+1
                                            4472          ago     .loop
                                            4473 .around  anop
                                            4474 &$dccexti seta &$dccexti+1
                                            4475          extrn  &m
                                            4476 .getout  anop
                                            4477          mend
00002AB0                                    4478+$eye0099    ds    0d                                                    02-DCCCA
00002AB0 C4C3C3                             4479+         dc cl3'DCC'                                                    02-DCCCA
00002AB3 01                                 4480+         dc xl1'01' format one                                          02-DCCCA
00002AB4 00000000                           4481+         dc a(0)                                                        02-DCCCA
00002AB8 0000000000000000                   4482+         dc ad(0)                                                       02-DCCCA
00002AC0 00000000000000A8                   4483+         dc ad(168)                                                     02-DCCCA
00002AC8 0000000000000000                   4484+         dc ad(0)                                                       02-DCCCA
00002AD0 0000000000001000                   4485+         dc ad(4096)                                                    02-DCCCA
00002AD8 20                                 4486+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002AD9 03                                 4487+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002ADA 03                                 4488+         dc al1(3)                                                      02-DCCCA
00002ADB 08                                 4489+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002ADC 00                                 4490+         dc bl.8'00000000'                                              02-DCCCA
00002ADD 000000                             4491+         dc al3(0)                                                      02-DCCCA
00002AE0 0000000000002A98                   4492+         dc ad(@LNAME1484)                                              02-DCCCA
00002AE8                                    4493+         ds 0d                                                          02-DCCCA
00002AE8 0000000000002AB0                   4494+         dc ad($eye0099)                                                02-DCCCA
00002AF0 0000000000000000                   4495+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page   96 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002AF8                                    4496+         ds    0d                                                       01-DCCPR
00002AF8                                    4497+rd_crc32_init ds 0d                                                     01-DCCPR
00002AF8                                    4498+@REGION_1484_1 ds 0h                                                    01-DCCPR
00002AF8 EBEC D008 0024          00000008   4499+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                            4500 * ******* End of Prologue
                                            4501 * *
                                            4502 * ***
                                            4503 * ***
                                            4504 * ***
                                            4505 * ***       return 0xffffffff;
00002AFE C0FF FFFF FFFF                     4506          LLILF 15,X'FFFFFFFF' ; 4294967295
                                            4507 * ***
                                            4508 * ***   }
                                            4509 * * **** Start of Epilogue
                                            4510          DCCEPIL
00002B04                                    4511+         ds 0h                                                          01-DCCEP
                                            4512+* Epilog
                                            4513+* Epilog
00002B04 E3E0 D008 0004          00000008   4514+         lg    14,8(,13) restore the reg                                01-DCCEP
00002B0A EB1C D020 0004          00000020   4515+         lmg   1,12,32(13)                                              01-DCCEP
00002B10 07FE                               4516+         br   14                                                        01-DCCEP
                                            4517+* End of Epilog
                                            4518 * * **** End of Epilogue
                                            4519 *
                                            4520 *   DSECT for automatic variables in "rd_crc32_init"
                                            4521 *      (FUNCTION #1484)
                                            4522 *
00000000                00000000 000000A8   4523 @AUTO#rd_crc32_init DSECT
00000000                                    4524          DS    XL168
                                            4525 *
00002B12                00000000 00010480   4526 @CODE    CSECT
                                            4527 *
                                            4528 *
                                            4529 *
                                            4530 * ....... start of rd_crc32_update
00002B12                                    4531 @LNAME1485 DS  0H
00002B12 0000000F                           4532          DC    X'0000000F'
00002B16 99846D839983F3F2                   4533          DC    C'rd_crc32_update'
00002B25 00                                 4534          DC    X'00'
                                            4535 rd_crc32_update DCCPRLG CINDEX=1485,BASER=12,FRAME=176,ENTRY=NO,ARCH=ZA*
                                                                RCH,LNAMEADDR=@LNAME1485
                                            4536          macro
                                            4537          dccextrn &m
                                            4538          gblc    &$dccext(1000)
                                            4539          gbla    &$dccexti
                                            4540          lcla    &i
                                            4541 &$dccext(&$dccexti+1) setc    '&m'
                                            4542 &i       seta    1
                                            4543 .loop    aif    (&i gt &$dccexti).around
                                            4544          aif    ('&$dccext(&i)' eq '&m').getout
                                            4545 &i       seta    &i+1
                                            4546          ago     .loop
                                                                                                                           Page   97 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4547 .around  anop
                                            4548 &$dccexti seta &$dccexti+1
                                            4549          extrn  &m
                                            4550 .getout  anop
                                            4551          mend
00002B28                                    4552+$eye0102    ds    0d                                                    02-DCCCA
00002B28 C4C3C3                             4553+         dc cl3'DCC'                                                    02-DCCCA
00002B2B 01                                 4554+         dc xl1'01' format one                                          02-DCCCA
00002B2C 00000000                           4555+         dc a(0)                                                        02-DCCCA
00002B30 0000000000002B9A                   4556+         dc ad(@PER_1485)                                               02-DCCCA
00002B38 00000000000000B0                   4557+         dc ad(176)                                                     02-DCCCA
00002B40 0000000000000000                   4558+         dc ad(0)                                                       02-DCCCA
00002B48 0000000000001000                   4559+         dc ad(4096)                                                    02-DCCCA
00002B50 20                                 4560+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002B51 03                                 4561+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002B52 03                                 4562+         dc al1(3)                                                      02-DCCCA
00002B53 08                                 4563+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002B54 00                                 4564+         dc bl.8'00000000'                                              02-DCCCA
00002B55 000000                             4565+         dc al3(0)                                                      02-DCCCA
00002B58 0000000000002B12                   4566+         dc ad(@LNAME1485)                                              02-DCCCA
00002B60                                    4567+         ds 0d                                                          02-DCCCA
00002B60 0000000000002B28                   4568+         dc ad($eye0102)                                                02-DCCCA
00002B68 0000000000000000                   4569+         dc ad(0)                                                       02-DCCCA
00002B70                                    4570+         ds    0d                                                       01-DCCPR
00002B70                                    4571+rd_crc32_update ds 0d                                                   01-DCCPR
00002B70                                    4572+@REGION_1485_1 ds 0h                                                    01-DCCPR
00002B70 EBEC D008 0024          00000008   4573+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00002B76 E3E0 D088 0004          00000088   4574+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00002B7C E3C0 D090 0004          00000090   4575+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00002B82 B904 002E                          4576+         lgr   2,14                copy addr of our savearea            01-DCCPR
00002B86 E3B0 C018 0004          00000018   4577+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00002B8C A7EB 00B0               000000B0   4578+         aghi  14,176              increase by frame size               01-DCCPR
00002B90 E3E0 C020 0021          00000020   4579+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00002B96 4720 B020               00000020   4580+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00002B9A                                    4581+@PER_1485 ds   0h                                                       01-DCCPR
00002B9A EBDE 2080 0024          00000080   4582+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00002BA0 E3C0 2090 0024          00000090   4583+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00002BA6 B904 00D2                          4584+         lgr   13,2                set real frame pointer               01-DCCPR
00002BAA B904 00CF                          4585+         lgr   12,15               set base reg                         01-DCCPR
                        00002B70            4586+         using @REGION_1485_1,12                                        01-DCCPR
                                            4587          DCCPRV REG=2      ; Get PRV from DVT
00002BAE E320 B008 0004          00000008   4588+         LG 2,8(0,11)                                                   01-DCCPR
00002BB4 B904 0031                          4589          LGR   3,1         ; ptr to parm area
                                            4590 * ******* End of Prologue
                                            4591 * *
00002BB8 58F0 3004               00000004   4592          L     15,4(0,3)   ; crc
00002BBC E310 3008 0004          00000008   4593          LG    1,8(0,3)    ; data
                                            4594 * ***
                                            4595 * ***
                                            4596 * ***
                                            4597 * ***
                                            4598 * ***       unsigned int tbl_idx;
                                                                                                                           Page   98 
  Active Usings: @REGION_1485_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4599 * ***
                                            4600 * ***       while (data_len--) {
00002BC2 47F0 C090               00002C00   4601          B     @L483
00002BC8                                    4602          DS    0D
00002BC8 000000B0                           4603 @FRAMESIZE_1485 DC F'176'
00002BCC 00000000                           4604 @lit_1485_111 DC Q(crc_table)
00002BD0                                    4605 @L482    DS    0H
                                            4606 * ***           tbl_idx = (crc ^ *data) & 0xff;
00002BD0 E340 1000 0094          00000000   4607          LLC   4,0(0,1)
00002BD6 185F                               4608          LR    5,15
00002BD8 1754                               4609          XR    5,4
00002BDA C05B 0000 00FF                     4610          NILF  5,X'000000FF'
                                            4611 * ***           crc = (crc_table[tbl_idx] ^ (crc >> 8)) & 0xffffffff;
00002BE0 B916 0045                          4612          LLGFR 4,5
00002BE4 E350 C05C 0016          00002BCC   4613          LLGF  5,@lit_1485_111 ; crc_table
00002BEA EB44 0002 000D          00000002   4614          SLLG  4,4,2(0)    ; *0x4
00002BF0 4145 4000               00000000   4615          LA    4,0(5,4)
00002BF4 88F0 0008               00000008   4616          SRL   15,8(0)
00002BF8 57F4 2000               00000000   4617          X     15,0(4,2)
                                            4618 * ***
                                            4619 * ***           data++;
00002BFC 4110 1001               00000001   4620          LA    1,1(0,1)
                                            4621 * ***       }
00002C00                                    4622 @L483    DS    0H
00002C00 E340 3010 0004          00000010   4623          LG    4,16(0,3)   ; data_len
00002C06 B904 0054                          4624          LGR   5,4
00002C0A A75B FFFF               0000FFFF   4625          AGHI  5,-1
00002C0E E350 3010 0024          00000010   4626          STG   5,16(0,3)   ; data_len
00002C14 B902 0044                          4627          LTGR  4,4
00002C18 4770 C060               00002BD0   4628          BNZ   @L482
                                            4629 * ***       return crc & 0xffffffff;
00002C1C B916 00FF                          4630          LLGFR 15,15
                                            4631 * ***
                                            4632 * ***   }
                                            4633 * * **** Start of Epilogue
                                            4634          DCCEPIL
00002C20                                    4635+         ds 0h                                                          01-DCCEP
                                            4636+* Epilog
00002C20 D707 D088 D088 00000088 00000088   4637+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002C26 E3D0 D080 0004          00000080   4638+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002C2C E3C0 D090 0004          00000090   4639+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00002C32 E3B0 C018 0004          00000018   4640+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002C38 E3C0 B010 0021          00000010   4641+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002C3E E3E0 D008 0004          00000008   4642+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002C44 EB1C D020 0004          00000020   4643+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00002C4A 078E                               4644+         bcr 8,14                if same dsab, just return              01-DCCEP
00002C4C E3F0 D010 0024          00000010   4645+         stg 15,16(0,13)         save return code                       01-DCCEP
00002C52 E300 D018 0024          00000018   4646+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002C58 E3F0 D090 0004          00000090   4647+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002C5E E3F0 F018 0004          00000018   4648+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002C64 47F0 F040               00000040   4649+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            4650+* End of Epilog
                                                                                                                           Page   99 
  Active Usings: @REGION_1485_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4651 * * **** End of Epilogue
                                            4652          DROP  12
                                            4653 *
                                            4654 *   DSECT for automatic variables in "rd_crc32_update"
                                            4655 *      (FUNCTION #1485)
                                            4656 *
00000000                00000000 000000AC   4657 @AUTO#rd_crc32_update DSECT
00000000                                    4658          DS    XL168
000000A8                                    4659 rd_crc32_update#tbl_idx#0 DS 1F ; tbl_idx
                                            4660 *
00002C68                00000000 00010480   4661 @CODE    CSECT
                                            4662 *
                                            4663 *
                                            4664 *
                                            4665 * ....... start of rd_crc32_finalize
00002C68                                    4666 @LNAME1486 DS  0H
00002C68 00000011                           4667          DC    X'00000011'
00002C6C 99846D839983F3F2                   4668          DC    C'rd_crc32_finalize'
00002C7D 00                                 4669          DC    X'00'
                                            4670 rd_crc32_finalize DCCPRLG CINDEX=1486,BASER=0,FRAME=168,SAVEAREA=NO,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1486
                                            4671          macro
                                            4672          dccextrn &m
                                            4673          gblc    &$dccext(1000)
                                            4674          gbla    &$dccexti
                                            4675          lcla    &i
                                            4676 &$dccext(&$dccexti+1) setc    '&m'
                                            4677 &i       seta    1
                                            4678 .loop    aif    (&i gt &$dccexti).around
                                            4679          aif    ('&$dccext(&i)' eq '&m').getout
                                            4680 &i       seta    &i+1
                                            4681          ago     .loop
                                            4682 .around  anop
                                            4683 &$dccexti seta &$dccexti+1
                                            4684          extrn  &m
                                            4685 .getout  anop
                                            4686          mend
00002C80                                    4687+$eye0106    ds    0d                                                    02-DCCCA
00002C80 C4C3C3                             4688+         dc cl3'DCC'                                                    02-DCCCA
00002C83 01                                 4689+         dc xl1'01' format one                                          02-DCCCA
00002C84 00000000                           4690+         dc a(0)                                                        02-DCCCA
00002C88 0000000000000000                   4691+         dc ad(0)                                                       02-DCCCA
00002C90 00000000000000A8                   4692+         dc ad(168)                                                     02-DCCCA
00002C98 0000000000000000                   4693+         dc ad(0)                                                       02-DCCCA
00002CA0 0000000000001000                   4694+         dc ad(4096)                                                    02-DCCCA
00002CA8 20                                 4695+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002CA9 03                                 4696+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002CAA 03                                 4697+         dc al1(3)                                                      02-DCCCA
00002CAB 08                                 4698+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002CAC 00                                 4699+         dc bl.8'00000000'                                              02-DCCCA
00002CAD 000000                             4700+         dc al3(0)                                                      02-DCCCA
00002CB0 0000000000002C68                   4701+         dc ad(@LNAME1486)                                              02-DCCCA
                                                                                                                           Page  100 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002CB8                                    4702+         ds 0d                                                          02-DCCCA
00002CB8 0000000000002C80                   4703+         dc ad($eye0106)                                                02-DCCCA
00002CC0 0000000000000000                   4704+         dc ad(0)                                                       02-DCCCA
00002CC8                                    4705+         ds    0d                                                       01-DCCPR
00002CC8                                    4706+rd_crc32_finalize ds 0d                                                 01-DCCPR
00002CC8                                    4707+@REGION_1486_1 ds 0h                                                    01-DCCPR
00002CC8 EBEC D008 0024          00000008   4708+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                            4709 * ******* End of Prologue
                                            4710 * *
                                            4711 * ***
                                            4712 * ***
                                            4713 * ***
                                            4714 * ***       return crc ^ 0xffffffff;
00002CCE 58F0 1004               00000004   4715          L     15,4(0,1)   ; crc
00002CD2 C0F7 FFFF FFFF                     4716          XILF  15,X'FFFFFFFF'
00002CD8 B916 00FF                          4717          LLGFR 15,15
                                            4718 * ***
                                            4719 * ***   }
                                            4720 * * **** Start of Epilogue
                                            4721          DCCEPIL
00002CDC                                    4722+         ds 0h                                                          01-DCCEP
                                            4723+* Epilog
                                            4724+* Epilog
00002CDC E3E0 D008 0004          00000008   4725+         lg    14,8(,13) restore the reg                                01-DCCEP
00002CE2 EB1C D020 0004          00000020   4726+         lmg   1,12,32(13)                                              01-DCCEP
00002CE8 07FE                               4727+         br   14                                                        01-DCCEP
                                            4728+* End of Epilog
                                            4729 * * **** End of Epilogue
                                            4730 *
                                            4731 *   DSECT for automatic variables in "rd_crc32_finalize"
                                            4732 *      (FUNCTION #1486)
                                            4733 *
00000000                00000000 000000A8   4734 @AUTO#rd_crc32_finalize DSECT
00000000                                    4735          DS    XL168
                                            4736 *
00002CEA                00000000 00010480   4737 @CODE    CSECT
                                            4738 *
                                            4739 *
                                            4740 *
                                            4741 * ....... start of rd_crc32
00002CEA                                    4742 @LNAME1487 DS  0H
00002CEA 00000008                           4743          DC    X'00000008'
00002CEE 99846D839983F3F2                   4744          DC    C'rd_crc32'
00002CF6 00                                 4745          DC    X'00'
                                            4746 rd_crc32 DCCPRLG CINDEX=1487,BASER=12,FRAME=192,ENTRY=NO,ARCH=ZARCH,LNA*
                                                                MEADDR=@LNAME1487
                                            4747          macro
                                            4748          dccextrn &m
                                            4749          gblc    &$dccext(1000)
                                            4750          gbla    &$dccexti
                                            4751          lcla    &i
                                            4752 &$dccext(&$dccexti+1) setc    '&m'
                                                                                                                           Page  101 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4753 &i       seta    1
                                            4754 .loop    aif    (&i gt &$dccexti).around
                                            4755          aif    ('&$dccext(&i)' eq '&m').getout
                                            4756 &i       seta    &i+1
                                            4757          ago     .loop
                                            4758 .around  anop
                                            4759 &$dccexti seta &$dccexti+1
                                            4760          extrn  &m
                                            4761 .getout  anop
                                            4762          mend
00002CF8                                    4763+$eye0109    ds    0d                                                    02-DCCCA
00002CF8 C4C3C3                             4764+         dc cl3'DCC'                                                    02-DCCCA
00002CFB 01                                 4765+         dc xl1'01' format one                                          02-DCCCA
00002CFC 00000000                           4766+         dc a(0)                                                        02-DCCCA
00002D00 0000000000002D6A                   4767+         dc ad(@PER_1487)                                               02-DCCCA
00002D08 00000000000000C0                   4768+         dc ad(192)                                                     02-DCCCA
00002D10 0000000000000000                   4769+         dc ad(0)                                                       02-DCCCA
00002D18 0000000000001000                   4770+         dc ad(4096)                                                    02-DCCCA
00002D20 20                                 4771+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002D21 03                                 4772+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002D22 03                                 4773+         dc al1(3)                                                      02-DCCCA
00002D23 08                                 4774+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002D24 00                                 4775+         dc bl.8'00000000'                                              02-DCCCA
00002D25 000000                             4776+         dc al3(0)                                                      02-DCCCA
00002D28 0000000000002CEA                   4777+         dc ad(@LNAME1487)                                              02-DCCCA
00002D30                                    4778+         ds 0d                                                          02-DCCCA
00002D30 0000000000002CF8                   4779+         dc ad($eye0109)                                                02-DCCCA
00002D38 0000000000000000                   4780+         dc ad(0)                                                       02-DCCCA
00002D40                                    4781+         ds    0d                                                       01-DCCPR
00002D40                                    4782+rd_crc32 ds    0d                                                       01-DCCPR
00002D40                                    4783+@REGION_1487_1 ds 0h                                                    01-DCCPR
00002D40 EBEC D008 0024          00000008   4784+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00002D46 E3E0 D088 0004          00000088   4785+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00002D4C E3C0 D090 0004          00000090   4786+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00002D52 B904 002E                          4787+         lgr   2,14                copy addr of our savearea            01-DCCPR
00002D56 E3B0 C018 0004          00000018   4788+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00002D5C A7EB 00C0               000000C0   4789+         aghi  14,192              increase by frame size               01-DCCPR
00002D60 E3E0 C020 0021          00000020   4790+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00002D66 4720 B020               00000020   4791+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00002D6A                                    4792+@PER_1487 ds   0h                                                       01-DCCPR
00002D6A EBDE 2080 0024          00000080   4793+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00002D70 E3C0 2090 0024          00000090   4794+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00002D76 B904 00D2                          4795+         lgr   13,2                set real frame pointer               01-DCCPR
00002D7A B904 00CF                          4796+         lgr   12,15               set base reg                         01-DCCPR
                        00002D40            4797+         using @REGION_1487_1,12                                        01-DCCPR
00002D7E B904 0021                          4798          LGR   2,1         ; ptr to parm area
                                            4799 * ******* End of Prologue
                                            4800 * *
                                            4801 * ***      return rd_crc32_finalize(rd_crc32_update(rd_crc32_init(),
                                            4802 * ***                      (const unsigned char *)data,
                                            4803 * ***                      data_len));
00002D82 E3F0 C0E8 0004          00002E28   4804          LG    15,@lit_1487_113 ; rd_crc32_init
                                                                                                                           Page  102 
  Active Usings: @REGION_1487_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002D88                                    4805 @@gen_label189 DS    0H
00002D88 05EF                               4806          BALR  14,15
00002D8A                                    4807 @@gen_label190 DS    0H
00002D8A B916 00FF                          4808          LLGFR 15,15
00002D8E E3F0 D0A8 0024          000000A8   4809          STG   15,168(0,13)
00002D94 E3F0 2000 0004          00000000   4810          LG    15,0(0,2)   ; data
00002D9A E3F0 D0B0 0024          000000B0   4811          STG   15,176(0,13)
00002DA0 E3F0 2008 0004          00000008   4812          LG    15,8(0,2)   ; data_len
00002DA6 E3F0 D0B8 0024          000000B8   4813          STG   15,184(0,13)
00002DAC 4110 D0A8               000000A8   4814          LA    1,168(0,13)
00002DB0 E3F0 C0F0 0004          00002E30   4815          LG    15,@lit_1487_114 ; rd_crc32_update
00002DB6                                    4816 @@gen_label191 DS    0H
00002DB6 05EF                               4817          BALR  14,15
00002DB8                                    4818 @@gen_label192 DS    0H
00002DB8 B916 00FF                          4819          LLGFR 15,15
00002DBC E3F0 D0A8 0024          000000A8   4820          STG   15,168(0,13)
00002DC2 4110 D0A8               000000A8   4821          LA    1,168(0,13)
00002DC6 E3F0 C0F8 0004          00002E38   4822          LG    15,@lit_1487_115 ; rd_crc32_finalize
00002DCC                                    4823 @@gen_label193 DS    0H
00002DCC 05EF                               4824          BALR  14,15
00002DCE                                    4825 @@gen_label194 DS    0H
00002DCE B916 00FF                          4826          LLGFR 15,15
                                            4827 * ***   }
                                            4828 * * **** Start of Epilogue
                                            4829          DCCEPIL
00002DD2                                    4830+         ds 0h                                                          01-DCCEP
                                            4831+* Epilog
00002DD2 D707 D088 D088 00000088 00000088   4832+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002DD8 E3D0 D080 0004          00000080   4833+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002DDE E3C0 D090 0004          00000090   4834+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00002DE4 E3B0 C018 0004          00000018   4835+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002DEA E3C0 B010 0021          00000010   4836+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002DF0 E3E0 D008 0004          00000008   4837+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002DF6 EB1C D020 0004          00000020   4838+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00002DFC 078E                               4839+         bcr 8,14                if same dsab, just return              01-DCCEP
00002DFE E3F0 D010 0024          00000010   4840+         stg 15,16(0,13)         save return code                       01-DCCEP
00002E04 E300 D018 0024          00000018   4841+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002E0A E3F0 D090 0004          00000090   4842+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002E10 E3F0 F018 0004          00000018   4843+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002E16 47F0 F040               00000040   4844+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            4845+* End of Epilog
                                            4846 * * **** End of Epilogue
00002E20                                    4847          DS    0D
00002E20 000000C0                           4848 @FRAMESIZE_1487 DC F'192'
00002E24 00000000
00002E28 0000000000002AF8                   4849 @lit_1487_113 DC AD(rd_crc32_init)
00002E30 0000000000002B70                   4850 @lit_1487_114 DC AD(rd_crc32_update)
00002E38 0000000000002CC8                   4851 @lit_1487_115 DC AD(rd_crc32_finalize)
                                            4852          DROP  12
                                            4853 *
                                            4854 *   DSECT for automatic variables in "rd_crc32"
                                            4855 *      (FUNCTION #1487)
                                                                                                                           Page  103 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4856 *
00000000                00000000 000000A8   4857 @AUTO#rd_crc32 DSECT
00000000                                    4858          DS    XL168
                                            4859 *
00002E40                00000000 00010480   4860 @CODE    CSECT
                                            4861 *
                                            4862 *
                                            4863 *
                                            4864 * ....... start of rd_kafka_buf_write
00002E40                                    4865 @LNAME1517 DS  0H
00002E40 00000012                           4866          DC    X'00000012'
00002E44 99846D9281869281                   4867          DC    C'rd_kafka_buf_write'
00002E56 00                                 4868          DC    X'00'
                                            4869 rd_kafka_buf_write DCCPRLG CINDEX=1517,BASER=12,FRAME=200,ENTRY=NO,ARCH*
                                                                =ZARCH,LNAMEADDR=@LNAME1517
                                            4870          macro
                                            4871          dccextrn &m
                                            4872          gblc    &$dccext(1000)
                                            4873          gbla    &$dccexti
                                            4874          lcla    &i
                                            4875 &$dccext(&$dccexti+1) setc    '&m'
                                            4876 &i       seta    1
                                            4877 .loop    aif    (&i gt &$dccexti).around
                                            4878          aif    ('&$dccext(&i)' eq '&m').getout
                                            4879 &i       seta    &i+1
                                            4880          ago     .loop
                                            4881 .around  anop
                                            4882 &$dccexti seta &$dccexti+1
                                            4883          extrn  &m
                                            4884 .getout  anop
                                            4885          mend
00002E58                                    4886+$eye0112    ds    0d                                                    02-DCCCA
00002E58 C4C3C3                             4887+         dc cl3'DCC'                                                    02-DCCCA
00002E5B 01                                 4888+         dc xl1'01' format one                                          02-DCCCA
00002E5C 00000000                           4889+         dc a(0)                                                        02-DCCCA
00002E60 0000000000002ECA                   4890+         dc ad(@PER_1517)                                               02-DCCCA
00002E68 00000000000000C8                   4891+         dc ad(200)                                                     02-DCCCA
00002E70 0000000000000000                   4892+         dc ad(0)                                                       02-DCCCA
00002E78 0000000000001000                   4893+         dc ad(4096)                                                    02-DCCCA
00002E80 20                                 4894+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00002E81 03                                 4895+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00002E82 03                                 4896+         dc al1(3)                                                      02-DCCCA
00002E83 08                                 4897+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00002E84 00                                 4898+         dc bl.8'00000000'                                              02-DCCCA
00002E85 000000                             4899+         dc al3(0)                                                      02-DCCCA
00002E88 0000000000002E40                   4900+         dc ad(@LNAME1517)                                              02-DCCCA
00002E90                                    4901+         ds 0d                                                          02-DCCCA
00002E90 0000000000002E58                   4902+         dc ad($eye0112)                                                02-DCCCA
00002E98 0000000000000000                   4903+         dc ad(0)                                                       02-DCCCA
00002EA0                                    4904+         ds    0d                                                       01-DCCPR
00002EA0                                    4905+rd_kafka_buf_write ds 0d                                                01-DCCPR
00002EA0                                    4906+@REGION_1517_1 ds 0h                                                    01-DCCPR
                                                                                                                           Page  104 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00002EA0 EBEC D008 0024          00000008   4907+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00002EA6 E3E0 D088 0004          00000088   4908+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00002EAC E3C0 D090 0004          00000090   4909+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00002EB2 B904 002E                          4910+         lgr   2,14                copy addr of our savearea            01-DCCPR
00002EB6 E3B0 C018 0004          00000018   4911+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00002EBC A7EB 00C8               000000C8   4912+         aghi  14,200              increase by frame size               01-DCCPR
00002EC0 E3E0 C020 0021          00000020   4913+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00002EC6 4720 B020               00000020   4914+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00002ECA                                    4915+@PER_1517 ds   0h                                                       01-DCCPR
00002ECA EBDE 2080 0024          00000080   4916+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00002ED0 E3C0 2090 0024          00000090   4917+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00002ED6 B904 00D2                          4918+         lgr   13,2                set real frame pointer               01-DCCPR
00002EDA B904 00CF                          4919+         lgr   12,15               set base reg                         01-DCCPR
                        00002EA0            4920+         using @REGION_1517_1,12                                        01-DCCPR
00002EDE B904 0041                          4921          LGR   4,1         ; ptr to parm area
                                            4922 * ******* End of Prologue
                                            4923 * *
00002EE2 E320 4000 0004          00000000   4924          LG    2,0(0,4)    ; rkbuf
                                            4925 * ***       size_t r;
                                            4926 * ***
                                            4927 * ***       r = rd_buf_write(&rkbuf->rkbuf_buf, data, len);
00002EE8 41F0 2028               00000028   4928          LA    15,40(0,2)
00002EEC E3F0 D0B0 0024          000000B0   4929          STG   15,176(0,13)
00002EF2 E3F0 4008 0004          00000008   4930          LG    15,8(0,4)   ; data
00002EF8 E3F0 D0B8 0024          000000B8   4931          STG   15,184(0,13)
00002EFE E3F0 4010 0004          00000010   4932          LG    15,16(0,4)  ; len
00002F04 E3F0 D0C0 0024          000000C0   4933          STG   15,192(0,13)
00002F0A 4110 D0B0               000000B0   4934          LA    1,176(0,13)
00002F0E E3F0 C110 0004          00002FB0   4935          LG    15,@lit_1517_117 ; rd_buf_write
00002F14                                    4936 @@gen_label195 DS    0H
00002F14 05EF                               4937          BALR  14,15
00002F16                                    4938 @@gen_label196 DS    0H
00002F16 B904 003F                          4939          LGR   3,15
                                            4940 * ***
                                            4941 * ***       if (rkbuf->rkbuf_flags & 0x4)
00002F1A 9104 2023      00000023 00000004   4942          TM    35(2),4
00002F1E 4780 C0B6               00002F56   4943          BZ    @L492
                                            4944 * ***           rkbuf->rkbuf_crc = rd_crc32_update(rkbuf->rkbuf_crc, d\
                                            4945 * ata, len);
00002F22 E3F0 20B0 0016          000000B0   4946          LLGF  15,176(0,2)
00002F28 E3F0 D0B0 0024          000000B0   4947          STG   15,176(0,13)
00002F2E E3F0 4008 0004          00000008   4948          LG    15,8(0,4)   ; data
00002F34 E3F0 D0B8 0024          000000B8   4949          STG   15,184(0,13)
00002F3A E3F0 4010 0004          00000010   4950          LG    15,16(0,4)  ; len
00002F40 E3F0 D0C0 0024          000000C0   4951          STG   15,192(0,13)
00002F46 4110 D0B0               000000B0   4952          LA    1,176(0,13)
00002F4A E3F0 C118 0004          00002FB8   4953          LG    15,@lit_1517_118 ; rd_crc32_update
00002F50                                    4954 @@gen_label198 DS    0H
00002F50 05EF                               4955          BALR  14,15
00002F52                                    4956 @@gen_label199 DS    0H
00002F52 50F0 20B0               000000B0   4957          ST    15,176(0,2)
00002F56                                    4958 @L492    DS    0H
                                                                                                                           Page  105 
  Active Usings: @REGION_1517_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            4959 * ***
                                            4960 * ***       return r;
00002F56 B904 00F3                          4961          LGR   15,3
                                            4962 * ***   }
                                            4963 * * **** Start of Epilogue
                                            4964          DCCEPIL
00002F5A                                    4965+         ds 0h                                                          01-DCCEP
                                            4966+* Epilog
00002F5A D707 D088 D088 00000088 00000088   4967+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00002F60 E3D0 D080 0004          00000080   4968+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00002F66 E3C0 D090 0004          00000090   4969+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00002F6C E3B0 C018 0004          00000018   4970+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00002F72 E3C0 B010 0021          00000010   4971+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00002F78 E3E0 D008 0004          00000008   4972+         lg  14,8(0,13)          load up return address                 01-DCCEP
00002F7E EB1C D020 0004          00000020   4973+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00002F84 078E                               4974+         bcr 8,14                if same dsab, just return              01-DCCEP
00002F86 E3F0 D010 0024          00000010   4975+         stg 15,16(0,13)         save return code                       01-DCCEP
00002F8C E300 D018 0024          00000018   4976+         stg 0,24(0,13)          save more return code                  01-DCCEP
00002F92 E3F0 D090 0004          00000090   4977+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00002F98 E3F0 F018 0004          00000018   4978+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00002F9E 47F0 F040               00000040   4979+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            4980+* End of Epilog
                                            4981 * * **** End of Epilogue
00002FA8                                    4982          DS    0D
00002FA8 000000C8                           4983 @FRAMESIZE_1517 DC F'200'
00002FAC 00000000
00002FB0 0000000000000000                   4984 @lit_1517_117 DC AD(rd_buf_write)
00002FB8 0000000000002B70                   4985 @lit_1517_118 DC AD(rd_crc32_update)
                                            4986          DROP  12
                                            4987 *
                                            4988 *   DSECT for automatic variables in "rd_kafka_buf_write"
                                            4989 *      (FUNCTION #1517)
                                            4990 *
00000000                00000000 000000B0   4991 @AUTO#rd_kafka_buf_write DSECT
00000000                                    4992          DS    XL168
000000A8                                    4993 rd_kafka_buf_write#r#0 DS 8XL1 ; r
                                            4994 *
00002FC0                00000000 00010480   4995 @CODE    CSECT
                                            4996 *
                                            4997 *
                                            4998 *
                                            4999 * ....... start of rd_kafka_buf_update
00002FC0                                    5000 @LNAME1518 DS  0H
00002FC0 00000013                           5001          DC    X'00000013'
00002FC4 99846D9281869281                   5002          DC    C'rd_kafka_buf_update'
00002FD7 00                                 5003          DC    X'00'
                                            5004 rd_kafka_buf_update DCCPRLG CINDEX=1518,BASER=12,FRAME=208,ENTRY=NO,ARC*
                                                                H=ZARCH,LNAMEADDR=@LNAME1518
                                            5005          macro
                                            5006          dccextrn &m
                                            5007          gblc    &$dccext(1000)
                                            5008          gbla    &$dccexti
                                                                                                                           Page  106 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            5009          lcla    &i
                                            5010 &$dccext(&$dccexti+1) setc    '&m'
                                            5011 &i       seta    1
                                            5012 .loop    aif    (&i gt &$dccexti).around
                                            5013          aif    ('&$dccext(&i)' eq '&m').getout
                                            5014 &i       seta    &i+1
                                            5015          ago     .loop
                                            5016 .around  anop
                                            5017 &$dccexti seta &$dccexti+1
                                            5018          extrn  &m
                                            5019 .getout  anop
                                            5020          mend
00002FD8                                    5021+$eye0115    ds    0d                                                    02-DCCCA
00002FD8 C4C3C3                             5022+         dc cl3'DCC'                                                    02-DCCCA
00002FDB 01                                 5023+         dc xl1'01' format one                                          02-DCCCA
00002FDC 00000000                           5024+         dc a(0)                                                        02-DCCCA
00002FE0 000000000000304A                   5025+         dc ad(@PER_1518)                                               02-DCCCA
00002FE8 00000000000000D0                   5026+         dc ad(208)                                                     02-DCCCA
00002FF0 0000000000000000                   5027+         dc ad(0)                                                       02-DCCCA
00002FF8 0000000000001000                   5028+         dc ad(4096)                                                    02-DCCCA
00003000 20                                 5029+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003001 03                                 5030+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00003002 03                                 5031+         dc al1(3)                                                      02-DCCCA
00003003 08                                 5032+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00003004 00                                 5033+         dc bl.8'00000000'                                              02-DCCCA
00003005 000000                             5034+         dc al3(0)                                                      02-DCCCA
00003008 0000000000002FC0                   5035+         dc ad(@LNAME1518)                                              02-DCCCA
00003010                                    5036+         ds 0d                                                          02-DCCCA
00003010 0000000000002FD8                   5037+         dc ad($eye0115)                                                02-DCCCA
00003018 0000000000000000                   5038+         dc ad(0)                                                       02-DCCCA
00003020                                    5039+         ds    0d                                                       01-DCCPR
00003020                                    5040+rd_kafka_buf_update ds 0d                                               01-DCCPR
00003020                                    5041+@REGION_1518_1 ds 0h                                                    01-DCCPR
00003020 EBEC D008 0024          00000008   5042+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00003026 E3E0 D088 0004          00000088   5043+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000302C E3C0 D090 0004          00000090   5044+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00003032 B904 002E                          5045+         lgr   2,14                copy addr of our savearea            01-DCCPR
00003036 E3B0 C018 0004          00000018   5046+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000303C A7EB 00D0               000000D0   5047+         aghi  14,208              increase by frame size               01-DCCPR
00003040 E3E0 C020 0021          00000020   5048+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00003046 4720 B020               00000020   5049+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000304A                                    5050+@PER_1518 ds   0h                                                       01-DCCPR
0000304A EBDE 2080 0024          00000080   5051+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00003050 E3C0 2090 0024          00000090   5052+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00003056 B904 00D2                          5053+         lgr   13,2                set real frame pointer               01-DCCPR
0000305A B904 00CF                          5054+         lgr   12,15               set base reg                         01-DCCPR
                        00003020            5055+         using @REGION_1518_1,12                                        01-DCCPR
0000305E B904 0021                          5056          LGR   2,1         ; ptr to parm area
                                            5057 * ******* End of Prologue
                                            5058 * *
                                            5059 * ***       do { if (((!(!(rkbuf->rkbuf_flags & 0x4))))) rd_kafka_cras\
                                            5060 * h("C:\\asgkafka\\librdkafka\\src\\rdkafka_buf.h",944, __FUNCTION__, \
                                                                                                                           Page  107 
  Active Usings: @REGION_1518_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            5061 * (((void *)0)), "assert: " "!(rkbuf->rkbuf_flags & RD_KAFKA_OP_F_CRC)\
                                            5062 * "); } while (0);
00003062                                    5063 @L493    DS    0H
00003062 E330 2000 0004          00000000   5064          LG    3,0(0,2)    ; rkbuf
00003068 9104 3023      00000023 00000004   5065          TM    35(3),4
0000306C 4780 C092               000030B2   5066          BZ    @L496
00003070 E3F0 C130 0004          00003150   5067          LG    15,@lit_1518_120
00003076 4110 F09E               0000009E   5068          LA    1,158(0,15)
0000307A E310 D0A8 0024          000000A8   5069          STG   1,168(0,13)
00003080 E548 D0B0 03B0          000000B0   5070          MVGHI 176(13),944
00003086 E310 C128 0004          00003148   5071          LG    1,@lit_1518_121
0000308C 4110 1144               00000144   5072          LA    1,324(0,1)
00003090 E310 D0B8 0024          000000B8   5073          STG   1,184(0,13)
00003096 D707 D0C0 D0C0 000000C0 000000C0   5074          XC    192(8,13),192(13)
0000309C 41F0 F0C8               000000C8   5075          LA    15,200(0,15)
000030A0 E3F0 D0C8 0024          000000C8   5076          STG   15,200(0,13)
000030A6 4110 D0A8               000000A8   5077          LA    1,168(0,13)
000030AA E3F0 C120 0004          00003140   5078          LG    15,@lit_1518_122 ; rd_kafka_crash
000030B0                                    5079 @@gen_label201 DS    0H
000030B0 05EF                               5080          BALR  14,15
000030B2                                    5081 @@gen_label202 DS    0H
000030B2                                    5082 @L496    DS    0H
                                            5083 * ***       rd_buf_write_update(&rkbuf->rkbuf_buf, of, data, len);
000030B2 41F0 3028               00000028   5084          LA    15,40(0,3)
000030B6 E3F0 D0A8 0024          000000A8   5085          STG   15,168(0,13)
000030BC E3F0 2008 0004          00000008   5086          LG    15,8(0,2)   ; of
000030C2 E3F0 D0B0 0024          000000B0   5087          STG   15,176(0,13)
000030C8 E3F0 2010 0004          00000010   5088          LG    15,16(0,2)  ; data
000030CE E3F0 D0B8 0024          000000B8   5089          STG   15,184(0,13)
000030D4 E3F0 2018 0004          00000018   5090          LG    15,24(0,2)  ; len
000030DA E3F0 D0C0 0024          000000C0   5091          STG   15,192(0,13)
000030E0 4110 D0A8               000000A8   5092          LA    1,168(0,13)
000030E4 E3F0 C138 0004          00003158   5093          LG    15,@lit_1518_123 ; rd_buf_write_update
000030EA                                    5094 @@gen_label203 DS    0H
000030EA 05EF                               5095          BALR  14,15
000030EC                                    5096 @@gen_label204 DS    0H
                                            5097 * ***   }
000030EC                                    5098 @ret_lab_1518 DS 0H
                                            5099 * * **** Start of Epilogue
                                            5100          DCCEPIL
000030EC                                    5101+         ds 0h                                                          01-DCCEP
                                            5102+* Epilog
000030EC D707 D088 D088 00000088 00000088   5103+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
000030F2 E3D0 D080 0004          00000080   5104+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000030F8 E3C0 D090 0004          00000090   5105+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000030FE E3B0 C018 0004          00000018   5106+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00003104 E3C0 B010 0021          00000010   5107+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000310A E3E0 D008 0004          00000008   5108+         lg  14,8(0,13)          load up return address                 01-DCCEP
00003110 EB1C D020 0004          00000020   5109+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00003116 078E                               5110+         bcr 8,14                if same dsab, just return              01-DCCEP
00003118 E3F0 D010 0024          00000010   5111+         stg 15,16(0,13)         save return code                       01-DCCEP
0000311E E300 D018 0024          00000018   5112+         stg 0,24(0,13)          save more return code                  01-DCCEP
                                                                                                                           Page  108 
  Active Usings: @REGION_1518_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003124 E3F0 D090 0004          00000090   5113+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000312A E3F0 F018 0004          00000018   5114+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00003130 47F0 F040               00000040   5115+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            5116+* End of Epilog
                                            5117 * * **** End of Epilogue
00003138                                    5118          DS    0D
00003138 000000D0                           5119 @FRAMESIZE_1518 DC F'208'
0000313C 00000000
00003140 0000000000000000                   5120 @lit_1518_122 DC AD(rd_kafka_crash)
00003148 0000000000010480                   5121 @lit_1518_121 DC AD(@DATA)
00003150 0000000000010840                   5122 @lit_1518_120 DC AD(@strings@)
00003158 0000000000000000                   5123 @lit_1518_123 DC AD(rd_buf_write_update)
                                            5124          DROP  12
                                            5125 *
                                            5126 *   DSECT for automatic variables in "rd_kafka_buf_update"
                                            5127 *      (FUNCTION #1518)
                                            5128 *
00000000                00000000 000000A8   5129 @AUTO#rd_kafka_buf_update DSECT
00000000                                    5130          DS    XL168
                                            5131 *
00003160                00000000 00010480   5132 @CODE    CSECT
                                            5133 *
                                            5134 *
                                            5135 *
                                            5136 * ....... start of rd_kafka_buf_write_i8
00003160                                    5137 @LNAME1519 DS  0H
00003160 00000015                           5138          DC    X'00000015'
00003164 99846D9281869281                   5139          DC    C'rd_kafka_buf_write_i8'
00003179 00                                 5140          DC    X'00'
                                            5141 rd_kafka_buf_write_i8 DCCPRLG CINDEX=1519,BASER=12,FRAME=192,ENTRY=NO,A*
                                                                RCH=ZARCH,LNAMEADDR=@LNAME1519
                                            5142          macro
                                            5143          dccextrn &m
                                            5144          gblc    &$dccext(1000)
                                            5145          gbla    &$dccexti
                                            5146          lcla    &i
                                            5147 &$dccext(&$dccexti+1) setc    '&m'
                                            5148 &i       seta    1
                                            5149 .loop    aif    (&i gt &$dccexti).around
                                            5150          aif    ('&$dccext(&i)' eq '&m').getout
                                            5151 &i       seta    &i+1
                                            5152          ago     .loop
                                            5153 .around  anop
                                            5154 &$dccexti seta &$dccexti+1
                                            5155          extrn  &m
                                            5156 .getout  anop
                                            5157          mend
00003180                                    5158+$eye0118    ds    0d                                                    02-DCCCA
00003180 C4C3C3                             5159+         dc cl3'DCC'                                                    02-DCCCA
00003183 01                                 5160+         dc xl1'01' format one                                          02-DCCCA
00003184 00000000                           5161+         dc a(0)                                                        02-DCCCA
00003188 00000000000031F2                   5162+         dc ad(@PER_1519)                                               02-DCCCA
                                                                                                                           Page  109 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003190 00000000000000C0                   5163+         dc ad(192)                                                     02-DCCCA
00003198 0000000000000000                   5164+         dc ad(0)                                                       02-DCCCA
000031A0 0000000000001000                   5165+         dc ad(4096)                                                    02-DCCCA
000031A8 20                                 5166+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000031A9 03                                 5167+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000031AA 03                                 5168+         dc al1(3)                                                      02-DCCCA
000031AB 08                                 5169+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000031AC 00                                 5170+         dc bl.8'00000000'                                              02-DCCCA
000031AD 000000                             5171+         dc al3(0)                                                      02-DCCCA
000031B0 0000000000003160                   5172+         dc ad(@LNAME1519)                                              02-DCCCA
000031B8                                    5173+         ds 0d                                                          02-DCCCA
000031B8 0000000000003180                   5174+         dc ad($eye0118)                                                02-DCCCA
000031C0 0000000000000000                   5175+         dc ad(0)                                                       02-DCCCA
000031C8                                    5176+         ds    0d                                                       01-DCCPR
000031C8                                    5177+rd_kafka_buf_write_i8 ds 0d                                             01-DCCPR
000031C8                                    5178+@REGION_1519_1 ds 0h                                                    01-DCCPR
000031C8 EBEC D008 0024          00000008   5179+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000031CE E3E0 D088 0004          00000088   5180+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000031D4 E3C0 D090 0004          00000090   5181+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000031DA B904 002E                          5182+         lgr   2,14                copy addr of our savearea            01-DCCPR
000031DE E3B0 C018 0004          00000018   5183+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000031E4 A7EB 00C0               000000C0   5184+         aghi  14,192              increase by frame size               01-DCCPR
000031E8 E3E0 C020 0021          00000020   5185+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000031EE 4720 B020               00000020   5186+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000031F2                                    5187+@PER_1519 ds   0h                                                       01-DCCPR
000031F2 EBDE 2080 0024          00000080   5188+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000031F8 E3C0 2090 0024          00000090   5189+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000031FE B904 00D2                          5190+         lgr   13,2                set real frame pointer               01-DCCPR
00003202 B904 00CF                          5191+         lgr   12,15               set base reg                         01-DCCPR
                        000031C8            5192+         using @REGION_1519_1,12                                        01-DCCPR
                                            5193 * ******* End of Prologue
                                            5194 * *
                                            5195 * ***       return rd_kafka_buf_write(rkbuf, &v, sizeof(v));
00003206 E3F0 1000 0004          00000000   5196          LG    15,0(0,1)   ; rkbuf
0000320C E3F0 D0A8 0024          000000A8   5197          STG   15,168(0,13)
00003212 41F0 100F               0000000F   5198          LA    15,15(0,1)
00003216 E3F0 D0B0 0024          000000B0   5199          STG   15,176(0,13)
0000321C E548 D0B8 0001          000000B8   5200          MVGHI 184(13),1
00003222 4110 D0A8               000000A8   5201          LA    1,168(0,13)
00003226 E3F0 C0B8 0004          00003280   5202          LG    15,@lit_1519_125 ; rd_kafka_buf_write
0000322C                                    5203 @@gen_label205 DS    0H
0000322C 05EF                               5204          BALR  14,15
0000322E                                    5205 @@gen_label206 DS    0H
                                            5206 * ***   }
                                            5207 * * **** Start of Epilogue
                                            5208          DCCEPIL
0000322E                                    5209+         ds 0h                                                          01-DCCEP
                                            5210+* Epilog
0000322E D707 D088 D088 00000088 00000088   5211+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00003234 E3D0 D080 0004          00000080   5212+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000323A E3C0 D090 0004          00000090   5213+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00003240 E3B0 C018 0004          00000018   5214+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
                                                                                                                           Page  110 
  Active Usings: @REGION_1519_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003246 E3C0 B010 0021          00000010   5215+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000324C E3E0 D008 0004          00000008   5216+         lg  14,8(0,13)          load up return address                 01-DCCEP
00003252 EB1C D020 0004          00000020   5217+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00003258 078E                               5218+         bcr 8,14                if same dsab, just return              01-DCCEP
0000325A E3F0 D010 0024          00000010   5219+         stg 15,16(0,13)         save return code                       01-DCCEP
00003260 E300 D018 0024          00000018   5220+         stg 0,24(0,13)          save more return code                  01-DCCEP
00003266 E3F0 D090 0004          00000090   5221+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000326C E3F0 F018 0004          00000018   5222+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00003272 47F0 F040               00000040   5223+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            5224+* End of Epilog
                                            5225 * * **** End of Epilogue
00003278                                    5226          DS    0D
00003278 000000C0                           5227 @FRAMESIZE_1519 DC F'192'
0000327C 00000000
00003280 0000000000002EA0                   5228 @lit_1519_125 DC AD(rd_kafka_buf_write)
                                            5229          DROP  12
                                            5230 *
                                            5231 *   DSECT for automatic variables in "rd_kafka_buf_write_i8"
                                            5232 *      (FUNCTION #1519)
                                            5233 *
00000000                00000000 000000A8   5234 @AUTO#rd_kafka_buf_write_i8 DSECT
00000000                                    5235          DS    XL168
                                            5236 *
00003288                00000000 00010480   5237 @CODE    CSECT
                                            5238 *
                                            5239 *
                                            5240 *
                                            5241 * ....... start of rd_kafka_buf_write_i32
00003288                                    5242 @LNAME1523 DS  0H
00003288 00000016                           5243          DC    X'00000016'
0000328C 99846D9281869281                   5244          DC    C'rd_kafka_buf_write_i32'
000032A2 00                                 5245          DC    X'00'
                                            5246 rd_kafka_buf_write_i32 DCCPRLG CINDEX=1523,BASER=12,FRAME=192,ENTRY=NO,*
                                                                ARCH=ZARCH,LNAMEADDR=@LNAME1523
                                            5247          macro
                                            5248          dccextrn &m
                                            5249          gblc    &$dccext(1000)
                                            5250          gbla    &$dccexti
                                            5251          lcla    &i
                                            5252 &$dccext(&$dccexti+1) setc    '&m'
                                            5253 &i       seta    1
                                            5254 .loop    aif    (&i gt &$dccexti).around
                                            5255          aif    ('&$dccext(&i)' eq '&m').getout
                                            5256 &i       seta    &i+1
                                            5257          ago     .loop
                                            5258 .around  anop
                                            5259 &$dccexti seta &$dccexti+1
                                            5260          extrn  &m
                                            5261 .getout  anop
                                            5262          mend
000032A8                                    5263+$eye0121    ds    0d                                                    02-DCCCA
000032A8 C4C3C3                             5264+         dc cl3'DCC'                                                    02-DCCCA
                                                                                                                           Page  111 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000032AB 01                                 5265+         dc xl1'01' format one                                          02-DCCCA
000032AC 00000000                           5266+         dc a(0)                                                        02-DCCCA
000032B0 000000000000331A                   5267+         dc ad(@PER_1523)                                               02-DCCCA
000032B8 00000000000000C0                   5268+         dc ad(192)                                                     02-DCCCA
000032C0 0000000000000000                   5269+         dc ad(0)                                                       02-DCCCA
000032C8 0000000000001000                   5270+         dc ad(4096)                                                    02-DCCCA
000032D0 20                                 5271+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000032D1 03                                 5272+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000032D2 03                                 5273+         dc al1(3)                                                      02-DCCCA
000032D3 08                                 5274+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000032D4 00                                 5275+         dc bl.8'00000000'                                              02-DCCCA
000032D5 000000                             5276+         dc al3(0)                                                      02-DCCCA
000032D8 0000000000003288                   5277+         dc ad(@LNAME1523)                                              02-DCCCA
000032E0                                    5278+         ds 0d                                                          02-DCCCA
000032E0 00000000000032A8                   5279+         dc ad($eye0121)                                                02-DCCCA
000032E8 0000000000000000                   5280+         dc ad(0)                                                       02-DCCCA
000032F0                                    5281+         ds    0d                                                       01-DCCPR
000032F0                                    5282+rd_kafka_buf_write_i32 ds 0d                                            01-DCCPR
000032F0                                    5283+@REGION_1523_1 ds 0h                                                    01-DCCPR
000032F0 EBEC D008 0024          00000008   5284+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000032F6 E3E0 D088 0004          00000088   5285+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000032FC E3C0 D090 0004          00000090   5286+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00003302 B904 002E                          5287+         lgr   2,14                copy addr of our savearea            01-DCCPR
00003306 E3B0 C018 0004          00000018   5288+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000330C A7EB 00C0               000000C0   5289+         aghi  14,192              increase by frame size               01-DCCPR
00003310 E3E0 C020 0021          00000020   5290+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00003316 4720 B020               00000020   5291+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000331A                                    5292+@PER_1523 ds   0h                                                       01-DCCPR
0000331A EBDE 2080 0024          00000080   5293+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00003320 E3C0 2090 0024          00000090   5294+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00003326 B904 00D2                          5295+         lgr   13,2                set real frame pointer               01-DCCPR
0000332A B904 00CF                          5296+         lgr   12,15               set base reg                         01-DCCPR
                        000032F0            5297+         using @REGION_1523_1,12                                        01-DCCPR
                                            5298 * ******* End of Prologue
                                            5299 * *
                                            5300 * ***       v = (int32_t)(v);
0000332E 58F0 100C               0000000C   5301          L     15,12(0,1)  ; v
                                            5302 * ***       return rd_kafka_buf_write(rkbuf, &v, sizeof(v));
00003332 E3F0 1000 0004          00000000   5303          LG    15,0(0,1)   ; rkbuf
00003338 E3F0 D0A8 0024          000000A8   5304          STG   15,168(0,13)
0000333E 41F0 100C               0000000C   5305          LA    15,12(0,1)
00003342 E3F0 D0B0 0024          000000B0   5306          STG   15,176(0,13)
00003348 E548 D0B8 0004          000000B8   5307          MVGHI 184(13),4
0000334E 4110 D0A8               000000A8   5308          LA    1,168(0,13)
00003352 E3F0 C0C0 0004          000033B0   5309          LG    15,@lit_1523_127 ; rd_kafka_buf_write
00003358                                    5310 @@gen_label207 DS    0H
00003358 05EF                               5311          BALR  14,15
0000335A                                    5312 @@gen_label208 DS    0H
                                            5313 * ***   }
                                            5314 * * **** Start of Epilogue
                                            5315          DCCEPIL
0000335A                                    5316+         ds 0h                                                          01-DCCEP
                                                                                                                           Page  112 
  Active Usings: @REGION_1523_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            5317+* Epilog
0000335A D707 D088 D088 00000088 00000088   5318+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00003360 E3D0 D080 0004          00000080   5319+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00003366 E3C0 D090 0004          00000090   5320+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000336C E3B0 C018 0004          00000018   5321+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00003372 E3C0 B010 0021          00000010   5322+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00003378 E3E0 D008 0004          00000008   5323+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000337E EB1C D020 0004          00000020   5324+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00003384 078E                               5325+         bcr 8,14                if same dsab, just return              01-DCCEP
00003386 E3F0 D010 0024          00000010   5326+         stg 15,16(0,13)         save return code                       01-DCCEP
0000338C E300 D018 0024          00000018   5327+         stg 0,24(0,13)          save more return code                  01-DCCEP
00003392 E3F0 D090 0004          00000090   5328+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00003398 E3F0 F018 0004          00000018   5329+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000339E 47F0 F040               00000040   5330+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            5331+* End of Epilog
                                            5332 * * **** End of Epilogue
000033A8                                    5333          DS    0D
000033A8 000000C0                           5334 @FRAMESIZE_1523 DC F'192'
000033AC 00000000
000033B0 0000000000002EA0                   5335 @lit_1523_127 DC AD(rd_kafka_buf_write)
                                            5336          DROP  12
                                            5337 *
                                            5338 *   DSECT for automatic variables in "rd_kafka_buf_write_i32"
                                            5339 *      (FUNCTION #1523)
                                            5340 *
00000000                00000000 000000A8   5341 @AUTO#rd_kafka_buf_write_i32 DSECT
00000000                                    5342          DS    XL168
                                            5343 *
000033B8                00000000 00010480   5344 @CODE    CSECT
                                            5345 *
                                            5346 *
                                            5347 *
                                            5348 * ....... start of rd_kafka_buf_update_i32
000033B8                                    5349 @LNAME1524 DS  0H
000033B8 00000017                           5350          DC    X'00000017'
000033BC 99846D9281869281                   5351          DC    C'rd_kafka_buf_update_i32'
000033D3 00                                 5352          DC    X'00'
                                            5353 rd_kafka_buf_update_i32 DCCPRLG CINDEX=1524,BASER=12,FRAME=200,ENTRY=NO*
                                                                ,ARCH=ZARCH,LNAMEADDR=@LNAME1524
                                            5354          macro
                                            5355          dccextrn &m
                                            5356          gblc    &$dccext(1000)
                                            5357          gbla    &$dccexti
                                            5358          lcla    &i
                                            5359 &$dccext(&$dccexti+1) setc    '&m'
                                            5360 &i       seta    1
                                            5361 .loop    aif    (&i gt &$dccexti).around
                                            5362          aif    ('&$dccext(&i)' eq '&m').getout
                                            5363 &i       seta    &i+1
                                            5364          ago     .loop
                                            5365 .around  anop
                                            5366 &$dccexti seta &$dccexti+1
                                                                                                                           Page  113 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            5367          extrn  &m
                                            5368 .getout  anop
                                            5369          mend
000033D8                                    5370+$eye0124    ds    0d                                                    02-DCCCA
000033D8 C4C3C3                             5371+         dc cl3'DCC'                                                    02-DCCCA
000033DB 01                                 5372+         dc xl1'01' format one                                          02-DCCCA
000033DC 00000000                           5373+         dc a(0)                                                        02-DCCCA
000033E0 000000000000344A                   5374+         dc ad(@PER_1524)                                               02-DCCCA
000033E8 00000000000000C8                   5375+         dc ad(200)                                                     02-DCCCA
000033F0 0000000000000000                   5376+         dc ad(0)                                                       02-DCCCA
000033F8 0000000000001000                   5377+         dc ad(4096)                                                    02-DCCCA
00003400 20                                 5378+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003401 03                                 5379+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00003402 03                                 5380+         dc al1(3)                                                      02-DCCCA
00003403 08                                 5381+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00003404 00                                 5382+         dc bl.8'00000000'                                              02-DCCCA
00003405 000000                             5383+         dc al3(0)                                                      02-DCCCA
00003408 00000000000033B8                   5384+         dc ad(@LNAME1524)                                              02-DCCCA
00003410                                    5385+         ds 0d                                                          02-DCCCA
00003410 00000000000033D8                   5386+         dc ad($eye0124)                                                02-DCCCA
00003418 0000000000000000                   5387+         dc ad(0)                                                       02-DCCCA
00003420                                    5388+         ds    0d                                                       01-DCCPR
00003420                                    5389+rd_kafka_buf_update_i32 ds 0d                                           01-DCCPR
00003420                                    5390+@REGION_1524_1 ds 0h                                                    01-DCCPR
00003420 EBEC D008 0024          00000008   5391+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00003426 E3E0 D088 0004          00000088   5392+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000342C E3C0 D090 0004          00000090   5393+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00003432 B904 002E                          5394+         lgr   2,14                copy addr of our savearea            01-DCCPR
00003436 E3B0 C018 0004          00000018   5395+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000343C A7EB 00C8               000000C8   5396+         aghi  14,200              increase by frame size               01-DCCPR
00003440 E3E0 C020 0021          00000020   5397+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00003446 4720 B020               00000020   5398+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000344A                                    5399+@PER_1524 ds   0h                                                       01-DCCPR
0000344A EBDE 2080 0024          00000080   5400+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00003450 E3C0 2090 0024          00000090   5401+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00003456 B904 00D2                          5402+         lgr   13,2                set real frame pointer               01-DCCPR
0000345A B904 00CF                          5403+         lgr   12,15               set base reg                         01-DCCPR
                        00003420            5404+         using @REGION_1524_1,12                                        01-DCCPR
                                            5405 * ******* End of Prologue
                                            5406 * *
                                            5407 * ***       v = (v);
0000345E 58F0 1014               00000014   5408          L     15,20(0,1)  ; v
                                            5409 * ***       rd_kafka_buf_update(rkbuf, of, &v, sizeof(v));
00003462 E3F0 1000 0004          00000000   5410          LG    15,0(0,1)   ; rkbuf
00003468 E3F0 D0A8 0024          000000A8   5411          STG   15,168(0,13)
0000346E E3F0 1008 0004          00000008   5412          LG    15,8(0,1)   ; of
00003474 E3F0 D0B0 0024          000000B0   5413          STG   15,176(0,13)
0000347A 41F0 1014               00000014   5414          LA    15,20(0,1)
0000347E E3F0 D0B8 0024          000000B8   5415          STG   15,184(0,13)
00003484 E548 D0C0 0004          000000C0   5416          MVGHI 192(13),4
0000348A 4110 D0A8               000000A8   5417          LA    1,168(0,13)
0000348E E3F0 C0C8 0004          000034E8   5418          LG    15,@lit_1524_129 ; rd_kafka_buf_update
                                                                                                                           Page  114 
  Active Usings: @REGION_1524_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003494                                    5419 @@gen_label209 DS    0H
00003494 05EF                               5420          BALR  14,15
00003496                                    5421 @@gen_label210 DS    0H
                                            5422 * ***   }
00003496                                    5423 @ret_lab_1524 DS 0H
                                            5424 * * **** Start of Epilogue
                                            5425          DCCEPIL
00003496                                    5426+         ds 0h                                                          01-DCCEP
                                            5427+* Epilog
00003496 D707 D088 D088 00000088 00000088   5428+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000349C E3D0 D080 0004          00000080   5429+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000034A2 E3C0 D090 0004          00000090   5430+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000034A8 E3B0 C018 0004          00000018   5431+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
000034AE E3C0 B010 0021          00000010   5432+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
000034B4 E3E0 D008 0004          00000008   5433+         lg  14,8(0,13)          load up return address                 01-DCCEP
000034BA EB1C D020 0004          00000020   5434+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000034C0 078E                               5435+         bcr 8,14                if same dsab, just return              01-DCCEP
000034C2 E3F0 D010 0024          00000010   5436+         stg 15,16(0,13)         save return code                       01-DCCEP
000034C8 E300 D018 0024          00000018   5437+         stg 0,24(0,13)          save more return code                  01-DCCEP
000034CE E3F0 D090 0004          00000090   5438+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
000034D4 E3F0 F018 0004          00000018   5439+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000034DA 47F0 F040               00000040   5440+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            5441+* End of Epilog
                                            5442 * * **** End of Epilogue
000034E0                                    5443          DS    0D
000034E0 000000C8                           5444 @FRAMESIZE_1524 DC F'200'
000034E4 00000000
000034E8 0000000000003020                   5445 @lit_1524_129 DC AD(rd_kafka_buf_update)
                                            5446          DROP  12
                                            5447 *
                                            5448 *   DSECT for automatic variables in "rd_kafka_buf_update_i32"
                                            5449 *      (FUNCTION #1524)
                                            5450 *
00000000                00000000 000000A8   5451 @AUTO#rd_kafka_buf_update_i32 DSECT
00000000                                    5452          DS    XL168
                                            5453 *
000034F0                00000000 00010480   5454 @CODE    CSECT
                                            5455 *
                                            5456 *
                                            5457 *
                                            5458 * ....... start of rd_kafka_mock_cluster_ApiVersion_check
000034F0                                    5459 @LNAME1950 DS  0H
000034F0 00000026                           5460          DC    X'00000026'
000034F4 99846D9281869281                   5461          DC    C'rd_kafka_mock_cluster_ApiVersion'
00003514 6D8388858392                       5462          DC    C'_check'
0000351A 00                                 5463          DC    X'00'
                                            5464 rd_kafka_mock_cluster_$Api$Version_check DCCPRLG CINDEX=1950,BASER=12,F*
                                                                RAME=168,SAVEAREA=NO,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAM*
                                                                E1950
                                            5465          macro
                                            5466          dccextrn &m
                                            5467          gblc    &$dccext(1000)
                                                                                                                           Page  115 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            5468          gbla    &$dccexti
                                            5469          lcla    &i
                                            5470 &$dccext(&$dccexti+1) setc    '&m'
                                            5471 &i       seta    1
                                            5472 .loop    aif    (&i gt &$dccexti).around
                                            5473          aif    ('&$dccext(&i)' eq '&m').getout
                                            5474 &i       seta    &i+1
                                            5475          ago     .loop
                                            5476 .around  anop
                                            5477 &$dccexti seta &$dccexti+1
                                            5478          extrn  &m
                                            5479 .getout  anop
                                            5480          mend
00003520                                    5481+$eye0127    ds    0d                                                    02-DCCCA
00003520 C4C3C3                             5482+         dc cl3'DCC'                                                    02-DCCCA
00003523 01                                 5483+         dc xl1'01' format one                                          02-DCCCA
00003524 00000000                           5484+         dc a(0)                                                        02-DCCCA
00003528 0000000000000000                   5485+         dc ad(0)                                                       02-DCCCA
00003530 00000000000000A8                   5486+         dc ad(168)                                                     02-DCCCA
00003538 0000000000000000                   5487+         dc ad(0)                                                       02-DCCCA
00003540 0000000000001000                   5488+         dc ad(4096)                                                    02-DCCCA
00003548 20                                 5489+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003549 03                                 5490+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000354A 03                                 5491+         dc al1(3)                                                      02-DCCCA
0000354B 08                                 5492+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000354C 00                                 5493+         dc bl.8'00000000'                                              02-DCCCA
0000354D 000000                             5494+         dc al3(0)                                                      02-DCCCA
00003550 00000000000034F0                   5495+         dc ad(@LNAME1950)                                              02-DCCCA
00003558                                    5496+         ds 0d                                                          02-DCCCA
00003558 0000000000003520                   5497+         dc ad($eye0127)                                                02-DCCCA
00003560 0000000000000000                   5498+         dc ad(0)                                                       02-DCCCA
00003568                                    5499+         ds    0d                                                       01-DCCPR
00003568                                    5500+rd_kafka_mock_cluster_$Api$Version_check ds 0d                          01-DCCPR
00003568                                    5501+@REGION_1950_1 ds 0h                                                    01-DCCPR
00003568 EBEC D008 0024          00000008   5502+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000356E B904 00CF                          5503+         lgr   12,15               set base reg                         01-DCCPR
                        00003568            5504+         using @REGION_1950_1,12                                        01-DCCPR
                                            5505 * ******* End of Prologue
                                            5506 * *
                                            5507 * ***           return (ApiVersion >= mcluster->api_handlers[ApiKey].M\
                                            5508 * inVersion &&
00003572 48F0 1016               00000016   5509          LH    15,22(0,1)  ; ApiVersion
00003576 E320 100E 0015          0000000E   5510          LGH   2,14(0,1)   ; ApiKey
0000357C E330 1000 0004          00000000   5511          LG    3,0(0,1)    ; mcluster
00003582 EB22 0004 000D          00000004   5512          SLLG  2,2,4(0)    ; *0x10
00003588 49F2 3108               00000108   5513          CH    15,264(2,3)
0000358C 4740 C050               000035B8   5514          BL    @L631
                                            5515 * ***                   ApiVersion <= mcluster->api_handlers[ApiKey].M\
                                            5516 * axVersion);
00003590 48F0 1016               00000016   5517          LH    15,22(0,1)  ; ApiVersion
00003594 E310 100E 0015          0000000E   5518          LGH   1,14(0,1)   ; ApiKey
0000359A EB11 0004 000D          00000004   5519          SLLG  1,1,4(0)    ; *0x10
                                                                                                                           Page  116 
  Active Usings: @REGION_1950_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000035A0 49F1 310A               0000010A   5520          CH    15,266(1,3)
000035A4 4720 C050               000035B8   5521          BH    @L631
000035A8 A7F8 0001               00000001   5522          LHI   15,1        ; 1
000035AC 47F0 C054               000035BC   5523          B     @L630
000035B0                                    5524          DS    0D
000035B0 00000000000000FF                   5525 @lit_1950_133 DC FD'255' 0x00000000000000ff
000035B8                                    5526 @L631    DS    0H
000035B8 A7F8 0000               00000000   5527          LHI   15,0        ; 0
000035BC                                    5528 @L630    DS    0H
000035BC E3F0 C048 0080          000035B0   5529          NG    15,@lit_1950_133
                                            5530 * ***   }
                                            5531 * * **** Start of Epilogue
                                            5532          DCCEPIL
000035C2                                    5533+         ds 0h                                                          01-DCCEP
                                            5534+* Epilog
                                            5535+* Epilog
000035C2 E3E0 D008 0004          00000008   5536+         lg    14,8(,13) restore the reg                                01-DCCEP
000035C8 EB1C D020 0004          00000020   5537+         lmg   1,12,32(13)                                              01-DCCEP
000035CE 07FE                               5538+         br   14                                                        01-DCCEP
                                            5539+* End of Epilog
                                            5540 * * **** End of Epilogue
                                            5541          DROP  12
                                            5542 *
                                            5543 *   DSECT for automatic variables in "rd_kafka_mock_cluster_ApiVersion
                                            5544 *           _check"
                                            5545 *      (FUNCTION #1950)
                                            5546 *
00000000                00000000 000000A8   5547 @AUTO#rd_kafka_mock_cluster_$Api$Version_check DSECT
00000000                                    5548          DS    XL168
                                            5549 *
000035D0                00000000 00010480   5550 @CODE    CSECT
                                            5551 *
                                            5552 *
                                            5553 *
                                            5554 * ....... start of rd_kafka_mock_broker_find
000035D0                                    5555 @LNAME1976 DS  0H
000035D0 00000019                           5556          DC    X'00000019'
000035D4 99846D9281869281                   5557          DC    C'rd_kafka_mock_broker_find'
000035ED 00                                 5558          DC    X'00'
                                            5559 rd_kafka_mock_broker_find DCCPRLG CINDEX=1976,BASER=12,FRAME=176,SAVEAR*
                                                                EA=NO,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1976
                                            5560          macro
                                            5561          dccextrn &m
                                            5562          gblc    &$dccext(1000)
                                            5563          gbla    &$dccexti
                                            5564          lcla    &i
                                            5565 &$dccext(&$dccexti+1) setc    '&m'
                                            5566 &i       seta    1
                                            5567 .loop    aif    (&i gt &$dccexti).around
                                            5568          aif    ('&$dccext(&i)' eq '&m').getout
                                            5569 &i       seta    &i+1
                                            5570          ago     .loop
                                                                                                                           Page  117 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            5571 .around  anop
                                            5572 &$dccexti seta &$dccexti+1
                                            5573          extrn  &m
                                            5574 .getout  anop
                                            5575          mend
000035F0                                    5576+$eye0130    ds    0d                                                    02-DCCCA
000035F0 C4C3C3                             5577+         dc cl3'DCC'                                                    02-DCCCA
000035F3 01                                 5578+         dc xl1'01' format one                                          02-DCCCA
000035F4 00000000                           5579+         dc a(0)                                                        02-DCCCA
000035F8 0000000000000000                   5580+         dc ad(0)                                                       02-DCCCA
00003600 00000000000000B0                   5581+         dc ad(176)                                                     02-DCCCA
00003608 0000000000000000                   5582+         dc ad(0)                                                       02-DCCCA
00003610 0000000000001000                   5583+         dc ad(4096)                                                    02-DCCCA
00003618 20                                 5584+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003619 03                                 5585+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000361A 03                                 5586+         dc al1(3)                                                      02-DCCCA
0000361B 08                                 5587+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000361C 00                                 5588+         dc bl.8'00000000'                                              02-DCCCA
0000361D 000000                             5589+         dc al3(0)                                                      02-DCCCA
00003620 00000000000035D0                   5590+         dc ad(@LNAME1976)                                              02-DCCCA
00003628                                    5591+         ds 0d                                                          02-DCCCA
00003628 00000000000035F0                   5592+         dc ad($eye0130)                                                02-DCCCA
00003630 0000000000000000                   5593+         dc ad(0)                                                       02-DCCCA
00003638                                    5594+         ds    0d                                                       01-DCCPR
00003638                                    5595+rd_kafka_mock_broker_find ds 0d                                         01-DCCPR
00003638                                    5596+@REGION_1976_1 ds 0h                                                    01-DCCPR
00003638 EBEC D008 0024          00000008   5597+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000363E B904 00CF                          5598+         lgr   12,15               set base reg                         01-DCCPR
                        00003638            5599+         using @REGION_1976_1,12                                        01-DCCPR
                                            5600 * ******* End of Prologue
                                            5601 * *
                                            5602 * ***           const rd_kafka_mock_broker_t *mrkb;
                                            5603 * ***
                                            5604 * ***           for ((mrkb) = ((&mcluster->brokers)->tqh_first); (mrkb\
                                            5605 * ) != (((void *)0)); (mrkb) = ((mrkb)->link .tqe_next))
00003642 E3F0 1000 0004          00000000   5606          LG    15,0(0,1)   ; mcluster
00003648 E3F0 F030 0004          00000030   5607          LG    15,48(0,15) ; offset of brokers in rd_kafka_mock_cluster*
                                                                _s
0000364E 47F0 C030               00003668   5608          B     @L633
00003652                                    5609 @L632    DS    0H
                                            5610 * ***                   if (mrkb->id == broker_id)
00003652 5820 F010               00000010   5611          L     2,16(0,15)  ; offset of id in rd_kafka_mock_broker_s
00003656 5920 100C               0000000C   5612          C     2,12(0,1)
0000365A 4770 C02A               00003662   5613          BNE   @L636
                                            5614 * ***                           return (rd_kafka_mock_broker_t *)mrkb;
0000365E 47F0 C03C               00003674   5615          B     @ret_lab_1976
00003662                                    5616 @L636    DS    0H
                                            5617 * ***
                                            5618 * ***           return ((void *)0);
00003662 E3F0 F000 0004          00000000   5619          LG    15,0(0,15)  ; mrkb
00003668                                    5620 @L633    DS    0H
00003668 B902 002F                          5621          LTGR  2,15
                                                                                                                           Page  118 
  Active Usings: @REGION_1976_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000366C 4770 C01A               00003652   5622          BNE   @L632
00003670 A7F9 0000               00000000   5623          LGHI  15,0        ; 0
                                            5624 * ***   }
00003674                                    5625 @ret_lab_1976 DS 0H
                                            5626 * * **** Start of Epilogue
                                            5627          DCCEPIL
00003674                                    5628+         ds 0h                                                          01-DCCEP
                                            5629+* Epilog
                                            5630+* Epilog
00003674 E3E0 D008 0004          00000008   5631+         lg    14,8(,13) restore the reg                                01-DCCEP
0000367A EB1C D020 0004          00000020   5632+         lmg   1,12,32(13)                                              01-DCCEP
00003680 07FE                               5633+         br   14                                                        01-DCCEP
                                            5634+* End of Epilog
                                            5635 * * **** End of Epilogue
                                            5636          DROP  12
                                            5637 *
                                            5638 *   DSECT for automatic variables in "rd_kafka_mock_broker_find"
                                            5639 *      (FUNCTION #1976)
                                            5640 *
00000000                00000000 000000A8   5641 @AUTO#rd_kafka_mock_broker_find DSECT
00000000                                    5642          DS    XL168
                                            5643 *
00003682                00000000 00010480   5644 @CODE    CSECT
                                            5645 *
                                            5646 *
                                            5647 *
                                            5648 * ....... start of rd_kafka_mock_msgset_destroy
00003682                                    5649 @LNAME1977 DS  0H
00003682 0000001C                           5650          DC    X'0000001C'
00003686 99846D9281869281                   5651          DC    C'rd_kafka_mock_msgset_destroy'
000036A2 00                                 5652          DC    X'00'
                                            5653 rd_kafka_mock_msgset_destroy DCCPRLG CINDEX=1977,BASER=12,FRAME=208,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1977
                                            5654          macro
                                            5655          dccextrn &m
                                            5656          gblc    &$dccext(1000)
                                            5657          gbla    &$dccexti
                                            5658          lcla    &i
                                            5659 &$dccext(&$dccexti+1) setc    '&m'
                                            5660 &i       seta    1
                                            5661 .loop    aif    (&i gt &$dccexti).around
                                            5662          aif    ('&$dccext(&i)' eq '&m').getout
                                            5663 &i       seta    &i+1
                                            5664          ago     .loop
                                            5665 .around  anop
                                            5666 &$dccexti seta &$dccexti+1
                                            5667          extrn  &m
                                            5668 .getout  anop
                                            5669          mend
000036A8                                    5670+$eye0133    ds    0d                                                    02-DCCCA
000036A8 C4C3C3                             5671+         dc cl3'DCC'                                                    02-DCCCA
000036AB 01                                 5672+         dc xl1'01' format one                                          02-DCCCA
                                                                                                                           Page  119 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000036AC 00000000                           5673+         dc a(0)                                                        02-DCCCA
000036B0 000000000000371A                   5674+         dc ad(@PER_1977)                                               02-DCCCA
000036B8 00000000000000D0                   5675+         dc ad(208)                                                     02-DCCCA
000036C0 0000000000000000                   5676+         dc ad(0)                                                       02-DCCCA
000036C8 0000000000001000                   5677+         dc ad(4096)                                                    02-DCCCA
000036D0 20                                 5678+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000036D1 03                                 5679+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000036D2 03                                 5680+         dc al1(3)                                                      02-DCCCA
000036D3 08                                 5681+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000036D4 00                                 5682+         dc bl.8'00000000'                                              02-DCCCA
000036D5 000000                             5683+         dc al3(0)                                                      02-DCCCA
000036D8 0000000000003682                   5684+         dc ad(@LNAME1977)                                              02-DCCCA
000036E0                                    5685+         ds 0d                                                          02-DCCCA
000036E0 00000000000036A8                   5686+         dc ad($eye0133)                                                02-DCCCA
000036E8 0000000000000000                   5687+         dc ad(0)                                                       02-DCCCA
000036F0                                    5688+         ds    0d                                                       01-DCCPR
000036F0                                    5689+rd_kafka_mock_msgset_destroy ds 0d                                      01-DCCPR
000036F0                                    5690+@REGION_1977_1 ds 0h                                                    01-DCCPR
000036F0 EBEC D008 0024          00000008   5691+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000036F6 E3E0 D088 0004          00000088   5692+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000036FC E3C0 D090 0004          00000090   5693+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00003702 B904 002E                          5694+         lgr   2,14                copy addr of our savearea            01-DCCPR
00003706 E3B0 C018 0004          00000018   5695+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000370C A7EB 00D0               000000D0   5696+         aghi  14,208              increase by frame size               01-DCCPR
00003710 E3E0 C020 0021          00000020   5697+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00003716 4720 B020               00000020   5698+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000371A                                    5699+@PER_1977 ds   0h                                                       01-DCCPR
0000371A EBDE 2080 0024          00000080   5700+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00003720 E3C0 2090 0024          00000090   5701+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00003726 B904 00D2                          5702+         lgr   13,2                set real frame pointer               01-DCCPR
0000372A B904 00CF                          5703+         lgr   12,15               set base reg                         01-DCCPR
                        000036F0            5704+         using @REGION_1977_1,12                                        01-DCCPR
                                            5705 * ******* End of Prologue
                                            5706 * *
                                            5707 * ***           const rd_kafka_mock_msgset_t *next = ((mset)->link .tq\
                                            5708 * e_next);
0000372E EB23 1000 0004          00000000   5709          LMG   2,3,0(1)    ; mpart
00003734 E3F0 3000 0004          00000000   5710          LG    15,0(0,3)   ; mset
                                            5711 * ***
                                            5712 * ***
                                            5713 * ***           if (!next)
0000373A B902 001F                          5714          LTGR  1,15
0000373E 4770 C090               00003780   5715          BNZ   @L637
                                            5716 * ***                   mpart->start_offset = mpart->end_offset;
00003742 E3F0 2020 0004          00000020   5717          LG    15,32(0,2)  ; offset of end_offset in rd_kafka_mock_part*
                                                                ition_s
00003748 E3F0 2018 0024          00000018   5718          STG   15,24(0,2)  ; offset of start_offset in rd_kafka_mock_pa*
                                                                rtition_s
0000374E 47F0 C0AA               0000379A   5719          B     @L638
00003758                                    5720          DS    0D
00003758 000000D0                           5721 @FRAMESIZE_1977 DC F'208'
0000375C 00000000
                                                                                                                           Page  120 
  Active Usings: @REGION_1977_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003760 0000000000000000                   5722 @lit_1977_137 DC AD(__assert)
00003768 0000000000010840                   5723 @lit_1977_136 DC AD(@strings@)
00003770 0000000000010480                   5724 @lit_1977_135 DC AD(@DATA)
00003778 0000000000000B78                   5725 @lit_1977_139 DC AD(rd_free)
                                            5726 * ***           else if (mset == ((&mpart->msgsets)->tqh_first))
00003780                                    5727 @L637    DS    0H
00003780 E310 2040 0004          00000040   5728          LG    1,64(0,2)   ; offset of msgsets in rd_kafka_mock_partiti*
                                                                on_s
00003786 B920 0031                          5729          CGR   3,1
0000378A 4770 C0AA               0000379A   5730          BNE   @L638
                                            5731 * ***
                                            5732 * ***                   mpart->start_offset = next->first_offset;
0000378E E3F0 F010 0004          00000010   5733          LG    15,16(0,15) ; offset of first_offset in rd_kafka_mock_ms*
                                                                gset_s
00003794 E3F0 2018 0024          00000018   5734          STG   15,24(0,2)  ; offset of start_offset in rd_kafka_mock_pa*
                                                                rtition_s
0000379A                                    5735 @L639    DS    0H
                                            5736 * ***
                                            5737 * ***           if (mpart->update_follower_start_offset)
0000379A                                    5738 @L638    DS    0H
0000379A 9500 2038      00000038 00000000   5739          CLI   56(2),0
0000379E 4780 C0BE               000037AE   5740          BE    @L640
                                            5741 * ***                   mpart->follower_start_offset = mpart->start_of\
                                            5742 * fset;
000037A2 E3F0 2018 0004          00000018   5743          LG    15,24(0,2)  ; offset of start_offset in rd_kafka_mock_pa*
                                                                rtition_s
000037A8 E3F0 2028 0024          00000028   5744          STG   15,40(0,2)  ; offset of follower_start_offset in rd_kafk*
                                                                a_mock_partition_s
000037AE                                    5745 @L640    DS    0H
                                            5746 * ***
                                            5747 * ***           ((mpart->cnt > 0) ? (void)0 : __assert(__func__, "C:\\\
                                            5748 * asgkafka\\librdkafka\\src\\rdkafka_mock.c", 79, "mpart->cnt > 0"));
000037AE E559 2058 0000          00000058   5749          CLGHSI 88(2),0
000037B4 4720 C104               000037F4   5750          BH    @L642
000037B8                                    5751 @L641    DS    0H
000037B8 E3F0 C080 0004          00003770   5752          LG    15,@lit_1977_135
000037BE 41F0 F1A6               000001A6   5753          LA    15,422(0,15)
000037C2 E3F0 D0B0 0024          000000B0   5754          STG   15,176(0,13)
000037C8 E3F0 C078 0004          00003768   5755          LG    15,@lit_1977_136
000037CE 4110 F0FA               000000FA   5756          LA    1,250(0,15)
000037D2 E310 D0B8 0024          000000B8   5757          STG   1,184(0,13)
000037D8 E548 D0C0 004F          000000C0   5758          MVGHI 192(13),79
000037DE 41F0 F124               00000124   5759          LA    15,292(0,15)
000037E2 E3F0 D0C8 0024          000000C8   5760          STG   15,200(0,13)
000037E8 4110 D0B0               000000B0   5761          LA    1,176(0,13)
000037EC E3F0 C070 0004          00003760   5762          LG    15,@lit_1977_137 ; __assert
000037F2                                    5763 @@gen_label219 DS    0H
000037F2 05EF                               5764          BALR  14,15
000037F4                                    5765 @@gen_label220 DS    0H
000037F4                                    5766 @L642    DS    0H
                                            5767 * ***           mpart->cnt--;
000037F4 E3F0 2058 0004          00000058   5768          LG    15,88(0,2)
                                                                                                                           Page  121 
  Active Usings: @REGION_1977_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000037FA A7FB FFFF               0000FFFF   5769          AGHI  15,-1
000037FE E3F0 2058 0024          00000058   5770          STG   15,88(0,2)
                                            5771 * ***           mpart->size -= (((&mset->bytes)->len) == -1 ? 0:((&mse\
                                            5772 * t->bytes)->len));
00003804 E3F0 2050 0004          00000050   5773          LG    15,80(0,2)
0000380A E55C 3020 FFFF          00000020   5774          CHSI  32(3),-1
00003810 4770 C12C               0000381C   5775          BNE   @L643
00003814 A718 0000               00000000   5776          LHI   1,0         ; 0
00003818 47F0 C130               00003820   5777          B     @L644
0000381C                                    5778 @L643    DS    0H
0000381C 5810 3020               00000020   5779          L     1,32(0,3)   ; offset of bytes in rd_kafka_mock_msgset_s
00003820                                    5780 @L644    DS    0H
00003820 B914 0011                          5781          LGFR  1,1
00003824 B90B 00F1                          5782          SLGR  15,1
00003828 E3F0 2050 0024          00000050   5783          STG   15,80(0,2)
                                            5784 * ***           do {   if (((mset)->link .tqe_next) != (((void *)0))) \
                                            5785 * (mset)->link .tqe_next->link .tqe_prev = (mset)->link .tqe_prev; els\
                                            5786 * e (&mpart->msgsets)->tqh_last = (mset)->link .tqe_prev; *(mset)->lin\
                                            5787 * k .tqe_prev = (mset)->link .tqe_next; ; } while ( 0);
0000382E                                    5788 @L645    DS    0H
0000382E E3F0 3000 0002          00000000   5789          LTG   15,0(0,3)   ; mset
00003834 4780 C15E               0000384E   5790          BE    @L648
00003838 E3F0 3000 0004          00000000   5791          LG    15,0(0,3)   ; mset
0000383E E310 3008 0004          00000008   5792          LG    1,8(0,3)    ; offset of tqe_prev in 0000163
00003844 E310 F008 0024          00000008   5793          STG   1,8(0,15)   ; offset of tqe_prev in 0000163
0000384A 47F0 C16A               0000385A   5794          B     @L649
0000384E                                    5795 @L648    DS    0H
0000384E E3F0 3008 0004          00000008   5796          LG    15,8(0,3)   ; offset of tqe_prev in 0000163
00003854 E3F0 2048 0024          00000048   5797          STG   15,72(0,2)  ; offset of tqh_last in 0000166
0000385A                                    5798 @L649    DS    0H
0000385A E3F0 3008 0004          00000008   5799          LG    15,8(0,3)   ; offset of tqe_prev in 0000163
00003860 E310 3000 0004          00000000   5800          LG    1,0(0,3)    ; mset
00003866 E310 F000 0024          00000000   5801          STG   1,0(0,15)
                                            5802 * ***           rd_free(mset);
0000386C E330 D0B0 0024          000000B0   5803          STG   3,176(0,13)
00003872 4110 D0B0               000000B0   5804          LA    1,176(0,13)
00003876 E3F0 C088 0004          00003778   5805          LG    15,@lit_1977_139 ; rd_free
0000387C                                    5806 @@gen_label223 DS    0H
0000387C 05EF                               5807          BALR  14,15
0000387E                                    5808 @@gen_label224 DS    0H
                                            5809 * ***   }
0000387E                                    5810 @ret_lab_1977 DS 0H
                                            5811 * * **** Start of Epilogue
                                            5812          DCCEPIL
0000387E                                    5813+         ds 0h                                                          01-DCCEP
                                            5814+* Epilog
0000387E D707 D088 D088 00000088 00000088   5815+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00003884 E3D0 D080 0004          00000080   5816+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000388A E3C0 D090 0004          00000090   5817+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00003890 E3B0 C018 0004          00000018   5818+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00003896 E3C0 B010 0021          00000010   5819+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000389C E3E0 D008 0004          00000008   5820+         lg  14,8(0,13)          load up return address                 01-DCCEP
                                                                                                                           Page  122 
  Active Usings: @REGION_1977_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000038A2 EB1C D020 0004          00000020   5821+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000038A8 078E                               5822+         bcr 8,14                if same dsab, just return              01-DCCEP
000038AA E3F0 D010 0024          00000010   5823+         stg 15,16(0,13)         save return code                       01-DCCEP
000038B0 E300 D018 0024          00000018   5824+         stg 0,24(0,13)          save more return code                  01-DCCEP
000038B6 E3F0 D090 0004          00000090   5825+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
000038BC E3F0 F018 0004          00000018   5826+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000038C2 47F0 F040               00000040   5827+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            5828+* End of Epilog
                                            5829 * * **** End of Epilogue
                                            5830          DROP  12
                                            5831 *
                                            5832 *   DSECT for automatic variables in "rd_kafka_mock_msgset_destroy"
                                            5833 *      (FUNCTION #1977)
                                            5834 *
00000000                00000000 000000A8   5835 @AUTO#rd_kafka_mock_msgset_destroy DSECT
00000000                                    5836          DS    XL168
                                            5837 *
000038C6                00000000 00010480   5838 @CODE    CSECT
                                            5839 *
                                            5840 *
                                            5841 *
                                            5842 * ....... start of rd_kafka_mock_msgset_new
000038C6                                    5843 @LNAME1978 DS  0H
000038C6 00000018                           5844          DC    X'00000018'
000038CA 99846D9281869281                   5845          DC    C'rd_kafka_mock_msgset_new'
000038E2 00                                 5846          DC    X'00'
                                            5847 rd_kafka_mock_msgset_new DCCPRLG CINDEX=1978,BASER=12,FRAME=304,ENTRY=N*
                                                                O,ARCH=ZARCH,LNAMEADDR=@LNAME1978
                                            5848          macro
                                            5849          dccextrn &m
                                            5850          gblc    &$dccext(1000)
                                            5851          gbla    &$dccexti
                                            5852          lcla    &i
                                            5853 &$dccext(&$dccexti+1) setc    '&m'
                                            5854 &i       seta    1
                                            5855 .loop    aif    (&i gt &$dccexti).around
                                            5856          aif    ('&$dccext(&i)' eq '&m').getout
                                            5857 &i       seta    &i+1
                                            5858          ago     .loop
                                            5859 .around  anop
                                            5860 &$dccexti seta &$dccexti+1
                                            5861          extrn  &m
                                            5862 .getout  anop
                                            5863          mend
000038E8                                    5864+$eye0136    ds    0d                                                    02-DCCCA
000038E8 C4C3C3                             5865+         dc cl3'DCC'                                                    02-DCCCA
000038EB 01                                 5866+         dc xl1'01' format one                                          02-DCCCA
000038EC 00000000                           5867+         dc a(0)                                                        02-DCCCA
000038F0 000000000000395A                   5868+         dc ad(@PER_1978)                                               02-DCCCA
000038F8 0000000000000130                   5869+         dc ad(304)                                                     02-DCCCA
00003900 0000000000000000                   5870+         dc ad(0)                                                       02-DCCCA
00003908 0000000000001000                   5871+         dc ad(4096)                                                    02-DCCCA
                                                                                                                           Page  123 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003910 20                                 5872+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003911 03                                 5873+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00003912 03                                 5874+         dc al1(3)                                                      02-DCCCA
00003913 08                                 5875+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00003914 00                                 5876+         dc bl.8'00000000'                                              02-DCCCA
00003915 000000                             5877+         dc al3(0)                                                      02-DCCCA
00003918 00000000000038C6                   5878+         dc ad(@LNAME1978)                                              02-DCCCA
00003920                                    5879+         ds 0d                                                          02-DCCCA
00003920 00000000000038E8                   5880+         dc ad($eye0136)                                                02-DCCCA
00003928 0000000000000000                   5881+         dc ad(0)                                                       02-DCCCA
00003930                                    5882+         ds    0d                                                       01-DCCPR
00003930                                    5883+rd_kafka_mock_msgset_new ds 0d                                          01-DCCPR
00003930                                    5884+@REGION_1978_1 ds 0h                                                    01-DCCPR
00003930 EBEC D008 0024          00000008   5885+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00003936 E3E0 D088 0004          00000088   5886+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000393C E3C0 D090 0004          00000090   5887+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00003942 B904 002E                          5888+         lgr   2,14                copy addr of our savearea            01-DCCPR
00003946 E3B0 C018 0004          00000018   5889+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000394C A7EB 0130               00000130   5890+         aghi  14,304              increase by frame size               01-DCCPR
00003950 E3E0 C020 0021          00000020   5891+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00003956 4720 B020               00000020   5892+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000395A                                    5893+@PER_1978 ds   0h                                                       01-DCCPR
0000395A EBDE 2080 0024          00000080   5894+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00003960 E3C0 2090 0024          00000090   5895+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00003966 B904 00D2                          5896+         lgr   13,2                set real frame pointer               01-DCCPR
0000396A B904 00CF                          5897+         lgr   12,15               set base reg                         01-DCCPR
                        00003930            5898+         using @REGION_1978_1,12                                        01-DCCPR
0000396E B904 0061                          5899          LGR   6,1         ; ptr to parm area
                                            5900 * ******* End of Prologue
                                            5901 * *
00003972 EB23 6000 0004          00000000   5902          LMG   2,3,0(6)    ; mpart
                                            5903 * ***           rd_kafka_mock_msgset_t *mset;
                                            5904 * ***           size_t totsize = sizeof(*mset) + (((bytes)->len) == -1\
                                            5905 *  ? 0:((bytes)->len));
00003978 E55C 3000 FFFF          00000000   5906          CHSI  0(3),-1
0000397E 4770 C0A0               000039D0   5907          BNE   @L650
00003982 A7F8 0000               00000000   5908          LHI   15,0        ; 0
00003986 47F0 C0A4               000039D4   5909          B     @L651
00003990                                    5910          DS    0D
00003990 00000130                           5911 @FRAMESIZE_1978 DC F'304'
00003994 00000000
00003998 0000000000000000                   5912 @lit_1978_144 DC AD(__assert)
000039A0 0000000000010840                   5913 @lit_1978_143 DC AD(@strings@)
000039A8 0000000000010480                   5914 @lit_1978_142 DC AD(@DATA)
000039B0 0000000000000898                   5915 @lit_1978_145 DC AD(rd_malloc)
000039B8 D200 3000 1000 00000000 00000000   5916 @lit_1978_150          MVC 0(1,3),0(1)
000039BE 0000
000039C0 00000000000036F0                   5917 @lit_1978_151 DC AD(rd_kafka_mock_msgset_destroy)
000039C8 0000000000000000                   5918 @lit_1978_156 DC AD(rd_kafka_log0)
000039D0                                    5919 @L650    DS    0H
000039D0 58F0 3000               00000000   5920          L     15,0(0,3)   ; bytes
000039D4                                    5921 @L651    DS    0H
                                                                                                                           Page  124 
  Active Usings: @REGION_1978_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000039D4 B914 004F                          5922          LGFR  4,15
000039D8 A74B 0038               00000038   5923          AGHI  4,56
                                            5924 * ***           int64_t BaseOffset;
                                            5925 * ***           int64_t orig_start_offset = mpart->start_offset;
000039DC E350 2018 0004          00000018   5926          LG    5,24(0,2)   ; offset of start_offset in rd_kafka_mock_pa*
                                                                rtition_s
                                            5927 * ***
                                            5928 * ***           ((!((bytes)->len == -1)) ? (void)0 : __assert(__func__\
                                            5929 * , "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 99, "!((bytes)->l\
                                            5930 * en == -1)"));
000039E2 E55C 3000 FFFF          00000000   5931          CHSI  0(3),-1
000039E8 4770 C0F8               00003A28   5932          BNE   @L653
000039EC                                    5933 @L652    DS    0H
000039EC E3F0 C078 0004          000039A8   5934          LG    15,@lit_1978_142
000039F2 41F0 F1C4               000001C4   5935          LA    15,452(0,15)
000039F6 E3F0 D0B0 0024          000000B0   5936          STG   15,176(0,13)
000039FC E3F0 C070 0004          000039A0   5937          LG    15,@lit_1978_143
00003A02 4110 F0FA               000000FA   5938          LA    1,250(0,15)
00003A06 E310 D0B8 0024          000000B8   5939          STG   1,184(0,13)
00003A0C E548 D0C0 0063          000000C0   5940          MVGHI 192(13),99
00003A12 41F0 F134               00000134   5941          LA    15,308(0,15)
00003A16 E3F0 D0C8 0024          000000C8   5942          STG   15,200(0,13)
00003A1C 4110 D0B0               000000B0   5943          LA    1,176(0,13)
00003A20 E3F0 C068 0004          00003998   5944          LG    15,@lit_1978_144 ; __assert
00003A26                                    5945 @@gen_label227 DS    0H
00003A26 05EF                               5946          BALR  14,15
00003A28                                    5947 @@gen_label228 DS    0H
00003A28                                    5948 @L653    DS    0H
                                            5949 * ***
                                            5950 * ***           mset = rd_malloc(totsize);
00003A28 E340 D0B0 0024          000000B0   5951          STG   4,176(0,13)
00003A2E 4110 D0B0               000000B0   5952          LA    1,176(0,13)
00003A32 E3F0 C080 0004          000039B0   5953          LG    15,@lit_1978_145 ; rd_malloc
00003A38                                    5954 @@gen_label229 DS    0H
00003A38 05EF                               5955          BALR  14,15
00003A3A                                    5956 @@gen_label230 DS    0H
00003A3A B904 004F                          5957          LGR   4,15
                                            5958 * ***           ((mset != ((void *)0)) ? (void)0 : __assert(__func__, \
                                            5959 * "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 102, "mset != ((voi\
                                            5960 * d *)0)"));
00003A3E B902 00F4                          5961          LTGR  15,4
00003A42 4770 C152               00003A82   5962          BNE   @L655
00003A46                                    5963 @L654    DS    0H
00003A46 E3F0 C078 0004          000039A8   5964          LG    15,@lit_1978_142
00003A4C 41F0 F1C4               000001C4   5965          LA    15,452(0,15)
00003A50 E3F0 D0B0 0024          000000B0   5966          STG   15,176(0,13)
00003A56 E3F0 C070 0004          000039A0   5967          LG    15,@lit_1978_143
00003A5C 4110 F0FA               000000FA   5968          LA    1,250(0,15)
00003A60 E310 D0B8 0024          000000B8   5969          STG   1,184(0,13)
00003A66 E548 D0C0 0066          000000C0   5970          MVGHI 192(13),102
00003A6C 41F0 F14A               0000014A   5971          LA    15,330(0,15)
00003A70 E3F0 D0C8 0024          000000C8   5972          STG   15,200(0,13)
                                                                                                                           Page  125 
  Active Usings: @REGION_1978_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003A76 4110 D0B0               000000B0   5973          LA    1,176(0,13)
00003A7A E3F0 C068 0004          00003998   5974          LG    15,@lit_1978_144 ; __assert
00003A80                                    5975 @@gen_label232 DS    0H
00003A80 05EF                               5976          BALR  14,15
00003A82                                    5977 @@gen_label233 DS    0H
00003A82                                    5978 @L655    DS    0H
                                            5979 * ***
                                            5980 * ***           mset->first_offset = mpart->end_offset;
00003A82 E3F0 2020 0004          00000020   5981          LG    15,32(0,2)  ; offset of end_offset in rd_kafka_mock_part*
                                                                ition_s
00003A88 E3F0 4010 0024          00000010   5982          STG   15,16(0,4)  ; offset of first_offset in rd_kafka_mock_ms*
                                                                gset_s
                                            5983 * ***           mset->last_offset = mset->first_offset + msgcnt - 1;
00003A8E E3F0 6010 000A          00000010   5984          ALG   15,16(0,6)
00003A94 A7FB FFFF               0000FFFF   5985          AGHI  15,-1
00003A98 E3F0 4018 0024          00000018   5986          STG   15,24(0,4)  ; offset of last_offset in rd_kafka_mock_msg*
                                                                set_s
                                            5987 * ***           mpart->end_offset = mset->last_offset + 1;
00003A9E A7F9 0001               00000001   5988          LGHI  15,1        ; 1
00003AA2 E3F0 4018 0008          00000018   5989          AG    15,24(0,4)
00003AA8 E3F0 2020 0024          00000020   5990          STG   15,32(0,2)  ; offset of end_offset in rd_kafka_mock_part*
                                                                ition_s
                                            5991 * ***           if (mpart->update_follower_end_offset)
00003AAE 9500 2039      00000039 00000000   5992          CLI   57(2),0
00003AB2 4780 C192               00003AC2   5993          BE    @L656
                                            5994 * ***                   mpart->follower_end_offset = mpart->end_offset\
                                            5995 * ;
00003AB6 E3F0 2020 0004          00000020   5996          LG    15,32(0,2)  ; offset of end_offset in rd_kafka_mock_part*
                                                                ition_s
00003ABC E3F0 2030 0024          00000030   5997          STG   15,48(0,2)  ; offset of follower_end_offset in rd_kafka_*
                                                                mock_partition_s
00003AC2                                    5998 @L656    DS    0H
                                            5999 * ***           mpart->cnt++;
00003AC2 E3F0 2058 0004          00000058   6000          LG    15,88(0,2)
00003AC8 A7FB 0001               00000001   6001          AGHI  15,1
00003ACC E3F0 2058 0024          00000058   6002          STG   15,88(0,2)
                                            6003 * ***
                                            6004 * ***           mset->bytes.len = bytes->len;
00003AD2 58F0 3000               00000000   6005          L     15,0(0,3)   ; bytes
00003AD6 50F0 4020               00000020   6006          ST    15,32(0,4)  ; offset of bytes in rd_kafka_mock_msgset_s
                                            6007 * ***
                                            6008 * ***
                                            6009 * ***           mset->bytes.data = (void *)(mset+1);
00003ADA 41F0 4038               00000038   6010          LA    15,56(0,4)
00003ADE E3F0 4028 0024          00000028   6011          STG   15,40(0,4)  ; offset of data in rd_kafkap_bytes_s
                                            6012 * ***           __memcpy((void *)mset->bytes.data,bytes->data,mset->by\
                                            6013 * tes.len);
00003AE4 E3F0 4020 0014          00000020   6014          LGF   15,32(0,4)
00003AEA E310 3008 0004          00000008   6015          LG    1,8(0,3)
00003AF0 E330 4028 0004          00000028   6016          LG    3,40(0,4)
00003AF6 B902 00FF                          6017          LTGR  15,15
00003AFA 4780 C1F8               00003B28   6018          BZ    @@gen_label237
                                                                                                                           Page  126 
  Active Usings: @REGION_1978_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003AFE A7FB FFFF               0000FFFF   6019          AGHI  15,-1
00003B02 EB7F 0008 000A          00000008   6020          SRAG  7,15,8(0)
00003B08 B902 0077                          6021          LTGR  7,7
00003B0C 4780 C1F4               00003B24   6022          BZ    @@gen_label236
00003B10                                    6023 @@gen_label235 DS 0H
00003B10 D2FF 3000 1000 00000000 00000000   6024          MVC   0(256,3),0(1)
00003B16 4130 3100               00000100   6025          LA    3,256(0,3)
00003B1A 4110 1100               00000100   6026          LA    1,256(0,1)
00003B1E E370 C1E0 0046          00003B10   6027          BCTG  7,@@gen_label235
00003B24                                    6028 @@gen_label236 DS 0H
00003B24 44F0 C088               000039B8   6029          EX    15,@lit_1978_150
00003B28                                    6030 @@gen_label237 DS 0H
                                            6031 * ***           mpart->size += mset->bytes.len;
00003B28 E3F0 4020 0014          00000020   6032          LGF   15,32(0,4)
00003B2E E3F0 2050 000A          00000050   6033          ALG   15,80(0,2)
00003B34 E3F0 2050 0024          00000050   6034          STG   15,80(0,2)
                                            6035 * ***
                                            6036 * ***
                                            6037 * ***
                                            6038 * ***           BaseOffset = (mset->first_offset);
00003B3A E3F0 4010 0004          00000010   6039          LG    15,16(0,4)  ; offset of first_offset in rd_kafka_mock_ms*
                                                                gset_s
00003B40 E3F0 D0A8 0024          000000A8   6040          STG   15,168(0,13) ; BaseOffset
                                            6041 * ***           __memcpy((void *)mset->bytes.data,&BaseOffset,sizeof(B\
                                            6042 * aseOffset));
00003B46 41F0 D0A8               000000A8   6043          LA    15,168(0,13)
00003B4A E310 4028 0004          00000028   6044          LG    1,40(0,4)
00003B50 D207 1000 F000 00000000 00000000   6045          MVC   0(8,1),0(15)
                                            6046 * ***
                                            6047 * ***
                                            6048 * ***
                                            6049 * ***           while (mpart->cnt > 1 &&
00003B56 47F0 C248               00003B78   6050          B     @L660
00003B5A                                    6051 @L659    DS    0H
                                            6052 * ***                   rd_kafka_mock_msgset_destroy(mpart,
                                            6053 * ***                                                ((&mpart->msgsets\
                                            6054 * )->tqh_first));
00003B5A E320 D0B0 0024          000000B0   6055          STG   2,176(0,13)
00003B60 E3F0 2040 0004          00000040   6056          LG    15,64(0,2)
00003B66 E3F0 D0B8 0024          000000B8   6057          STG   15,184(0,13)
00003B6C 4110 D0B0               000000B0   6058          LA    1,176(0,13)
00003B70 E3F0 C090 0004          000039C0   6059          LG    15,@lit_1978_151 ; rd_kafka_mock_msgset_destroy
00003B76                                    6060 @@gen_label238 DS    0H
00003B76 05EF                               6061          BALR  14,15
00003B78                                    6062 @@gen_label239 DS    0H
00003B78                                    6063 @L660    DS    0H
00003B78 E559 2058 0001          00000058   6064          CLGHSI 88(2),1
00003B7E 47D0 C276               00003BA6   6065          BNH   @L662
                                            6066 * ***                  (mpart->cnt > mpart->max_cnt ||
00003B82 E3F0 2058 0004          00000058   6067          LG    15,88(0,2)  ; offset of cnt in rd_kafka_mock_partition_s
00003B88 E3F0 2068 0021          00000068   6068          CLG   15,104(0,2)
00003B8E 4720 C22A               00003B5A   6069          BH    @L659
                                                                                                                           Page  127 
  Active Usings: @REGION_1978_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            6070 * ***                   mpart->size > mpart->max_size))
00003B92 E3F0 2050 0004          00000050   6071          LG    15,80(0,2)  ; offset of size in rd_kafka_mock_partition_*
                                                                s
00003B98 E3F0 2060 0021          00000060   6072          CLG   15,96(0,2)
00003B9E 47D0 C276               00003BA6   6073          BNH   @L662
00003BA2 47F0 C22A               00003B5A   6074          B     @L659
                                            6075 * ***
                                            6076 * ***           do {  (mset)->link .tqe_next = (((void *)0)); (mset)->\
                                            6077 * link .tqe_prev = (&mpart->msgsets)->tqh_last; *(&mpart->msgsets)->tq\
                                            6078 * h_last = (mset); (&mpart->msgsets)->tqh_last = &(mset)->link .tqe_ne\
                                            6079 * xt; } while ( 0);
00003BA6                                    6080 @L662    DS    0H
00003BA6 A7F9 0000               00000000   6081          LGHI  15,0        ; 0
00003BAA E3F0 4000 0024          00000000   6082          STG   15,0(0,4)   ; mset
00003BB0 E3F0 2048 0004          00000048   6083          LG    15,72(0,2)  ; offset of tqh_last in 0000166
00003BB6 E3F0 4008 0024          00000008   6084          STG   15,8(0,4)   ; offset of tqe_prev in 0000163
00003BBC E3F0 2048 0004          00000048   6085          LG    15,72(0,2)  ; offset of tqh_last in 0000166
00003BC2 E340 F000 0024          00000000   6086          STG   4,0(0,15)
00003BC8 E340 2048 0024          00000048   6087          STG   4,72(0,2)   ; offset of tqh_last in 0000166
                                            6088 * ***
                                            6089 * ***           do { if ((((mpart->topic->cluster->rk)->rk_conf.debug \
                                            6090 * & (0x10000)))) rd_kafka_log0(&mpart->topic->cluster->rk->rk_conf,mpa\
                                            6091 * rt->topic->cluster->rk,((void *)0), 7,(0x10000), "MOCK","Broker %" "\
                                            6092 * d" ": Log append %s [%" "d" "] " "%" "zu" " messages, %" "d" " bytes\
                                            6093 *  at offset %" "lld" " (log now %" "lld" "..%" "lld" ", " "original s\
                                            6094 * tart %" "lld" ")", mpart->leader->id, mpart->topic->name, mpart->id,\
                                            6095 *  msgcnt, (((&mset->bytes)->len) == -1 ? 0:((&mset->bytes)->len)), ms\
                                            6096 * et->first_offset, mpart->start_offset, mpart->end_offset, orig_start\
                                            6097 * _offset); } while (0);
00003BCE                                    6098 @L665    DS    0H
00003BCE E3F0 2098 0004          00000098   6099          LG    15,152(0,2) ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00003BD4 E3F0 F028 0004          00000028   6100          LG    15,40(0,15) ; offset of cluster in rd_kafka_mock_topic_s
00003BDA E3F0 F020 0004          00000020   6101          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
00003BE0 9101 F321      00000321 00000001   6102          TM    801(15),1
00003BE4 4780 C3B0               00003CE0   6103          BZ    @L668
00003BE8 E55C 4020 FFFF          00000020   6104          CHSI  32(4),-1
00003BEE 4770 C2CA               00003BFA   6105          BNE   @L669
00003BF2 A7F8 0000               00000000   6106          LHI   15,0        ; 0
00003BF6 47F0 C2CE               00003BFE   6107          B     @L670
00003BFA                                    6108 @L669    DS    0H
00003BFA 58F0 4020               00000020   6109          L     15,32(0,4)  ; offset of bytes in rd_kafka_mock_msgset_s
00003BFE                                    6110 @L670    DS    0H
00003BFE E310 2098 0004          00000098   6111          LG    1,152(0,2)  ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00003C04 E310 1028 0004          00000028   6112          LG    1,40(0,1)   ; offset of cluster in rd_kafka_mock_topic_s
00003C0A E310 1020 0004          00000020   6113          LG    1,32(0,1)   ; offset of rk in rd_kafka_mock_cluster_s
00003C10 4110 1210               00000210   6114          LA    1,528(0,1)
00003C14 E310 D0B0 0024          000000B0   6115          STG   1,176(0,13)
00003C1A E310 2098 0004          00000098   6116          LG    1,152(0,2)  ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00003C20 E310 1028 0004          00000028   6117          LG    1,40(0,1)   ; offset of cluster in rd_kafka_mock_topic_s
                                                                                                                           Page  128 
  Active Usings: @REGION_1978_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003C26 E310 1020 0004          00000020   6118          LG    1,32(0,1)
00003C2C E310 D0B8 0024          000000B8   6119          STG   1,184(0,13)
00003C32 D707 D0C0 D0C0 000000C0 000000C0   6120          XC    192(8,13),192(13)
00003C38 E548 D0C8 0007          000000C8   6121          MVGHI 200(13),7
00003C3E C01F 0001 0000                     6122          LLILF 1,X'00010000' ; 65536
00003C44 E310 D0D0 0024          000000D0   6123          STG   1,208(0,13)
00003C4A E310 C070 0004          000039A0   6124          LG    1,@lit_1978_143
00003C50 4130 115E               0000015E   6125          LA    3,350(0,1)
00003C54 E330 D0D8 0024          000000D8   6126          STG   3,216(0,13)
00003C5A 4110 1164               00000164   6127          LA    1,356(0,1)
00003C5E E310 D0E0 0024          000000E0   6128          STG   1,224(0,13)
00003C64 E310 2080 0004          00000080   6129          LG    1,128(0,2)  ; offset of leader in rd_kafka_mock_partitio*
                                                                n_s
00003C6A E310 1010 0014          00000010   6130          LGF   1,16(0,1)
00003C70 E310 D0E8 0024          000000E8   6131          STG   1,232(0,13)
00003C76 E310 2098 0004          00000098   6132          LG    1,152(0,2)  ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00003C7C E310 1010 0004          00000010   6133          LG    1,16(0,1)
00003C82 E310 D0F0 0024          000000F0   6134          STG   1,240(0,13)
00003C88 E310 2010 0014          00000010   6135          LGF   1,16(0,2)
00003C8E E310 D0F8 0024          000000F8   6136          STG   1,248(0,13)
00003C94 E310 6010 0004          00000010   6137          LG    1,16(0,6)   ; msgcnt
00003C9A E310 D100 0024          00000100   6138          STG   1,256(0,13)
00003CA0 B914 00FF                          6139          LGFR  15,15
00003CA4 E3F0 D108 0024          00000108   6140          STG   15,264(0,13)
00003CAA E3F0 4010 0004          00000010   6141          LG    15,16(0,4)
00003CB0 E3F0 D110 0024          00000110   6142          STG   15,272(0,13)
00003CB6 E3F0 2018 0004          00000018   6143          LG    15,24(0,2)
00003CBC E3F0 D118 0024          00000118   6144          STG   15,280(0,13)
00003CC2 E3F0 2020 0004          00000020   6145          LG    15,32(0,2)
00003CC8 E3F0 D120 0024          00000120   6146          STG   15,288(0,13)
00003CCE E350 D128 0024          00000128   6147          STG   5,296(0,13)
00003CD4 4110 D0B0               000000B0   6148          LA    1,176(0,13)
00003CD8 E3F0 C098 0004          000039C8   6149          LG    15,@lit_1978_156 ; rd_kafka_log0
00003CDE                                    6150 @@gen_label245 DS    0H
00003CDE 05EF                               6151          BALR  14,15
00003CE0                                    6152 @@gen_label246 DS    0H
00003CE0                                    6153 @L668    DS    0H
                                            6154 * ***
                                            6155 * ***   # 144 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                            6156 * ***           return mset;
00003CE0 B904 00F4                          6157          LGR   15,4
                                            6158 * ***   }
                                            6159 * * **** Start of Epilogue
                                            6160          DCCEPIL
00003CE4                                    6161+         ds 0h                                                          01-DCCEP
                                            6162+* Epilog
00003CE4 D707 D088 D088 00000088 00000088   6163+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00003CEA E3D0 D080 0004          00000080   6164+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00003CF0 E3C0 D090 0004          00000090   6165+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00003CF6 E3B0 C018 0004          00000018   6166+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00003CFC E3C0 B010 0021          00000010   6167+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
                                                                                                                           Page  129 
  Active Usings: @REGION_1978_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003D02 E3E0 D008 0004          00000008   6168+         lg  14,8(0,13)          load up return address                 01-DCCEP
00003D08 EB1C D020 0004          00000020   6169+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00003D0E 078E                               6170+         bcr 8,14                if same dsab, just return              01-DCCEP
00003D10 E3F0 D010 0024          00000010   6171+         stg 15,16(0,13)         save return code                       01-DCCEP
00003D16 E300 D018 0024          00000018   6172+         stg 0,24(0,13)          save more return code                  01-DCCEP
00003D1C E3F0 D090 0004          00000090   6173+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00003D22 E3F0 F018 0004          00000018   6174+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00003D28 47F0 F040               00000040   6175+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            6176+* End of Epilog
                                            6177 * * **** End of Epilogue
                                            6178          DROP  12
                                            6179 *
                                            6180 *   DSECT for automatic variables in "rd_kafka_mock_msgset_new"
                                            6181 *      (FUNCTION #1978)
                                            6182 *
00000000                00000000 000000B0   6183 @AUTO#rd_kafka_mock_msgset_new DSECT
00000000                                    6184          DS    XL168
000000A8                                    6185 rd_kafka_mock_msgset_new#orig_start_offset#0 DS 8XL1 ; orig_start_offse*
                                                                t
000000B0                000000B0 000000A8   6186          ORG   @AUTO#rd_kafka_mock_msgset_new+168
000000A8                                    6187 rd_kafka_mock_msgset_new#$Base$Offset#0 DS 8XL1 ; BaseOffset
000000B0                000000B0 000000A8   6188          ORG   @AUTO#rd_kafka_mock_msgset_new+168
000000A8                                    6189 rd_kafka_mock_msgset_new#totsize#0 DS 8XL1 ; totsize
                                            6190 *
00003D2C                00000000 00010480   6191 @CODE    CSECT
                                            6192 *
                                            6193 *
                                            6194 *
                                            6195 * ....... start of rd_kafka_mock_msgset_find
                                            6196 rd_kafka_mock_msgset_find ALIAS X'99846D92818692816D949683926D94A287A28*
                                                                5A36D86899584'
00003D2C                                    6197 @LNAME1947 DS  0H
00003D2C 00000019                           6198          DC    X'00000019'
00003D30 99846D9281869281                   6199          DC    C'rd_kafka_mock_msgset_find'
00003D49 00                                 6200          DC    X'00'
                                            6201 rd_kafka_mock_msgset_find DCCPRLG CINDEX=1947,BASER=12,FRAME=176,SAVEAR*
                                                                EA=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1947
                                            6202          macro
                                            6203          dccextrn &m
                                            6204          gblc    &$dccext(1000)
                                            6205          gbla    &$dccexti
                                            6206          lcla    &i
                                            6207 &$dccext(&$dccexti+1) setc    '&m'
                                            6208 &i       seta    1
                                            6209 .loop    aif    (&i gt &$dccexti).around
                                            6210          aif    ('&$dccext(&i)' eq '&m').getout
                                            6211 &i       seta    &i+1
                                            6212          ago     .loop
                                            6213 .around  anop
                                            6214 &$dccexti seta &$dccexti+1
                                            6215          extrn  &m
                                            6216 .getout  anop
                                                                                                                           Page  130 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            6217          mend
00003D50                                    6218+$eye0139    ds    0d                                                    02-DCCCA
00003D50 C4C3C3                             6219+         dc cl3'DCC'                                                    02-DCCCA
00003D53 01                                 6220+         dc xl1'01' format one                                          02-DCCCA
00003D54 00000000                           6221+         dc a(0)                                                        02-DCCCA
00003D58 0000000000000000                   6222+         dc ad(0)                                                       02-DCCCA
00003D60 00000000000000B0                   6223+         dc ad(176)                                                     02-DCCCA
00003D68 0000000000000000                   6224+         dc ad(0)                                                       02-DCCCA
00003D70 0000000000001000                   6225+         dc ad(4096)                                                    02-DCCCA
00003D78 20                                 6226+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003D79 03                                 6227+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00003D7A 03                                 6228+         dc al1(3)                                                      02-DCCCA
00003D7B 08                                 6229+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00003D7C 00                                 6230+         dc bl.8'00000000'                                              02-DCCCA
00003D7D 000000                             6231+         dc al3(0)                                                      02-DCCCA
00003D80 0000000000003D2C                   6232+         dc ad(@LNAME1947)                                              02-DCCCA
00003D88                                    6233+         ds 0d                                                          02-DCCCA
00003D88 0000000000003D50                   6234+         dc ad($eye0139)                                                02-DCCCA
00003D90 0000000000000000                   6235+         dc ad(0)                                                       02-DCCCA
00003D98                                    6236+         ds    0d                                                       01-DCCPR
                                            6237+         entry rd_kafka_mock_msgset_find                                01-DCCPR
00003D98                                    6238+rd_kafka_mock_msgset_find ds 0d                                         01-DCCPR
00003D98                                    6239+@REGION_1947_1 ds 0h                                                    01-DCCPR
00003D98 EBEC D008 0024          00000008   6240+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00003D9E B904 00CF                          6241+         lgr   12,15               set base reg                         01-DCCPR
                        00003D98            6242+         using @REGION_1947_1,12                                        01-DCCPR
00003DA2 B904 0021                          6243          LGR   2,1         ; ptr to parm area
                                            6244 * ******* End of Prologue
                                            6245 * *
00003DA6 E3F0 2000 0004          00000000   6246          LG    15,0(0,2)   ; mpart
00003DAC E310 2008 0004          00000008   6247          LG    1,8(0,2)    ; offset
                                            6248 * ***           const rd_kafka_mock_msgset_t *mset;
                                            6249 * ***
                                            6250 * ***           if (!on_follower &&
00003DB2 9500 2017      00000017 00000000   6251          CLI   23(2),0
00003DB6 4770 C03E               00003DD6   6252          BNE   @L671
                                            6253 * ***               (offset < mpart->start_offset ||
00003DBA E310 F018 0020          00000018   6254          CG    1,24(0,15)
00003DC0 4740 C036               00003DCE   6255          BL    @L672
                                            6256 * ***                offset > mpart->end_offset))
00003DC4 E310 F020 0020          00000020   6257          CG    1,32(0,15)
00003DCA 47D0 C03E               00003DD6   6258          BNH   @L671
00003DCE                                    6259 @L672    DS    0H
                                            6260 * ***                   return ((void *)0);
00003DCE A7F9 0000               00000000   6261          LGHI  15,0        ; 0
00003DD2 47F0 C09A               00003E32   6262          B     @ret_lab_1947
00003DD6                                    6263 @L671    DS    0H
                                            6264 * ***
                                            6265 * ***           if (on_follower &&
00003DD6 9500 2017      00000017 00000000   6266          CLI   23(2),0
00003DDA 4780 C062               00003DFA   6267          BE    @L673
                                            6268 * ***               (offset < mpart->follower_start_offset ||
                                                                                                                           Page  131 
  Active Usings: @REGION_1947_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003DDE E310 F028 0020          00000028   6269          CG    1,40(0,15)
00003DE4 4740 C05A               00003DF2   6270          BL    @L674
                                            6271 * ***                offset > mpart->follower_end_offset))
00003DE8 E310 F030 0020          00000030   6272          CG    1,48(0,15)
00003DEE 47D0 C062               00003DFA   6273          BNH   @L673
00003DF2                                    6274 @L674    DS    0H
                                            6275 * ***                   return ((void *)0);
00003DF2 A7F9 0000               00000000   6276          LGHI  15,0        ; 0
00003DF6 47F0 C09A               00003E32   6277          B     @ret_lab_1947
00003DFA                                    6278 @L673    DS    0H
                                            6279 * ***
                                            6280 * ***
                                            6281 * ***
                                            6282 * ***           for ((mset) = ((&mpart->msgsets)->tqh_first); (mset) !\
                                            6283 * = (((void *)0)); (mset) = ((mset)->link .tqe_next)) {
00003DFA E3F0 F040 0004          00000040   6284          LG    15,64(0,15) ; offset of msgsets in rd_kafka_mock_partiti*
                                                                on_s
00003E00 47F0 C08E               00003E26   6285          B     @L676
00003E04                                    6286 @L675    DS    0H
                                            6287 * ***                   if (mset->first_offset <= offset &&
00003E04 E320 F010 0004          00000010   6288          LG    2,16(0,15)  ; offset of first_offset in rd_kafka_mock_ms*
                                                                gset_s
00003E0A B920 0021                          6289          CGR   2,1
00003E0E 4720 C088               00003E20   6290          BH    @L679
                                            6291 * ***                       offset <= mset->last_offset)
00003E12 E310 F018 0020          00000018   6292          CG    1,24(0,15)
00003E18 4720 C088               00003E20   6293          BH    @L679
                                            6294 * ***                           return mset;
00003E1C 47F0 C09A               00003E32   6295          B     @ret_lab_1947
00003E20                                    6296 @L679    DS    0H
                                            6297 * ***           }
00003E20 E3F0 F000 0004          00000000   6298          LG    15,0(0,15)  ; mset
00003E26                                    6299 @L676    DS    0H
00003E26 B902 002F                          6300          LTGR  2,15
00003E2A 4770 C06C               00003E04   6301          BNE   @L675
                                            6302 * ***
                                            6303 * ***           return ((void *)0);
00003E2E A7F9 0000               00000000   6304          LGHI  15,0        ; 0
                                            6305 * ***   }
00003E32                                    6306 @ret_lab_1947 DS 0H
                                            6307 * * **** Start of Epilogue
                                            6308          DCCEPIL
00003E32                                    6309+         ds 0h                                                          01-DCCEP
                                            6310+* Epilog
                                            6311+* Epilog
00003E32 E3E0 D008 0004          00000008   6312+         lg    14,8(,13) restore the reg                                01-DCCEP
00003E38 EB1C D020 0004          00000020   6313+         lmg   1,12,32(13)                                              01-DCCEP
00003E3E 07FE                               6314+         br   14                                                        01-DCCEP
                                            6315+* End of Epilog
                                            6316 * * **** End of Epilogue
                                            6317          DROP  12
                                            6318 *
                                                                                                                           Page  132 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            6319 *   DSECT for automatic variables in "rd_kafka_mock_msgset_find"
                                            6320 *      (FUNCTION #1947)
                                            6321 *
00000000                00000000 000000A8   6322 @AUTO#rd_kafka_mock_msgset_find DSECT
00000000                                    6323          DS    XL168
                                            6324 *
00003E40                00000000 00010480   6325 @CODE    CSECT
                                            6326 *
                                            6327 *
                                            6328 *
                                            6329 * ....... start of rd_kafka_mock_partition_log_append
                                            6330 rd_kafka_mock_partition_log_append ALIAS X'99846D92818692816D949683926D*
                                                                978199A389A38996956D9396876D819797859584'
00003E40                                    6331 @LNAME1949 DS  0H
00003E40 00000022                           6332          DC    X'00000022'
00003E44 99846D9281869281                   6333          DC    C'rd_kafka_mock_partition_log_appe'
00003E64 9584                               6334          DC    C'nd'
00003E66 00                                 6335          DC    X'00'
                                            6336 rd_kafka_mock_partition_log_append DCCPRLG CINDEX=1949,BASER=12,FRAME=8*
                                                                32,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1949
                                            6337          macro
                                            6338          dccextrn &m
                                            6339          gblc    &$dccext(1000)
                                            6340          gbla    &$dccexti
                                            6341          lcla    &i
                                            6342 &$dccext(&$dccexti+1) setc    '&m'
                                            6343 &i       seta    1
                                            6344 .loop    aif    (&i gt &$dccexti).around
                                            6345          aif    ('&$dccext(&i)' eq '&m').getout
                                            6346 &i       seta    &i+1
                                            6347          ago     .loop
                                            6348 .around  anop
                                            6349 &$dccexti seta &$dccexti+1
                                            6350          extrn  &m
                                            6351 .getout  anop
                                            6352          mend
00003E68                                    6353+$eye0142    ds    0d                                                    02-DCCCA
00003E68 C4C3C3                             6354+         dc cl3'DCC'                                                    02-DCCCA
00003E6B 01                                 6355+         dc xl1'01' format one                                          02-DCCCA
00003E6C 00000000                           6356+         dc a(0)                                                        02-DCCCA
00003E70 0000000000003EDA                   6357+         dc ad(@PER_1949)                                               02-DCCCA
00003E78 0000000000000340                   6358+         dc ad(832)                                                     02-DCCCA
00003E80 0000000000000000                   6359+         dc ad(0)                                                       02-DCCCA
00003E88 0000000000001000                   6360+         dc ad(4096)                                                    02-DCCCA
00003E90 20                                 6361+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00003E91 03                                 6362+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00003E92 03                                 6363+         dc al1(3)                                                      02-DCCCA
00003E93 08                                 6364+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00003E94 00                                 6365+         dc bl.8'00000000'                                              02-DCCCA
00003E95 000000                             6366+         dc al3(0)                                                      02-DCCCA
00003E98 0000000000003E40                   6367+         dc ad(@LNAME1949)                                              02-DCCCA
00003EA0                                    6368+         ds 0d                                                          02-DCCCA
                                                                                                                           Page  133 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003EA0 0000000000003E68                   6369+         dc ad($eye0142)                                                02-DCCCA
00003EA8 0000000000000000                   6370+         dc ad(0)                                                       02-DCCCA
00003EB0                                    6371+         ds    0d                                                       01-DCCPR
                                            6372+         entry rd_kafka_mock_partition_log_append                       01-DCCPR
00003EB0                                    6373+rd_kafka_mock_partition_log_append ds 0d                                01-DCCPR
00003EB0                                    6374+@REGION_1949_1 ds 0h                                                    01-DCCPR
00003EB0 EBEC D008 0024          00000008   6375+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00003EB6 E3E0 D088 0004          00000088   6376+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00003EBC E3C0 D090 0004          00000090   6377+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00003EC2 B904 002E                          6378+         lgr   2,14                copy addr of our savearea            01-DCCPR
00003EC6 E3B0 C018 0004          00000018   6379+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00003ECC A7EB 0340               00000340   6380+         aghi  14,832              increase by frame size               01-DCCPR
00003ED0 E3E0 C020 0021          00000020   6381+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00003ED6 4720 B020               00000020   6382+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00003EDA                                    6383+@PER_1949 ds   0h                                                       01-DCCPR
00003EDA EBDE 2080 0024          00000080   6384+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00003EE0 E3C0 2090 0024          00000090   6385+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00003EE6 B904 00D2                          6386+         lgr   13,2                set real frame pointer               01-DCCPR
00003EEA B904 00CF                          6387+         lgr   12,15               set base reg                         01-DCCPR
                        00003EB0            6388+         using @REGION_1949_1,12                                        01-DCCPR
00003EEE B904 0061                          6389          LGR   6,1         ; ptr to parm area
                                            6390 * ******* End of Prologue
                                            6391 * *
                                            6392 * ***           const int log_decode_errors = 3;
00003EF2 E320 6008 0004          00000008   6393          LG    2,8(0,6)    ; bytes
00003EF8 A738 0003               00000003   6394          LHI   3,3         ; 3
                                            6395 * ***           rd_kafka_buf_t *rkbuf;
                                            6396 * ***           rd_kafka_resp_err_t err = RD_KAFKA_RESP_ERR_NO_ERROR;
00003EFC A7F8 0000               00000000   6397          LHI   15,0        ; 0
                                            6398 * ***           int8_t MagicByte;
                                            6399 * ***           int32_t RecordCount;
                                            6400 * ***           rd_kafka_mock_msgset_t *mset;
                                            6401 * ***
                                            6402 * ***
                                            6403 * ***
                                            6404 * ***           rkbuf = rd_kafka_buf_new_shadow(bytes->data,
                                            6405 * ***                                           (((bytes)->len) == -1 \
                                            6406 * ? 0:((bytes)->len)), ((void *)0));
00003F00 E55C 2000 FFFF          00000000   6407          CHSI  0(2),-1
00003F06 4770 C0F4               00003FA4   6408          BNE   @L680
00003F0A 47F0 C0F8               00003FA8   6409          B     @L681
00003F10                                    6410          DS    0D
00003F10 00000340                           6411 @FRAMESIZE_1949 DC F'832'
00003F14 00000000
00003F18 0000000000000000                   6412 @lit_1949_164 DC AD(rd_kafka_buf_new_shadow)
00003F20 0000000000000000                   6413 @lit_1949_166 DC AD(rd_slice_peek)
00003F28 00000000000011B0                   6414 @lit_1949_167 DC AD(rd_slice_abs_offset)
00003F30 0000000000000000                   6415 @lit_1949_170 DC AD(rd_kafka_crash)
00003F38 0000000000010480                   6416 @lit_1949_169 DC AD(@DATA)
00003F40 0000000000010840                   6417 @lit_1949_168 DC AD(@strings@)
00003F48 0000000000000000                   6418 @lit_1949_172 DC AD(snprintf)
00003F50 0000000000000000                   6419 @lit_1949_174 DC AD(mtx_lock)
                                                                                                                           Page  134 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003F58 00000000000019F8                   6420 @lit_1949_176 DC AD(rd_strlcpy)
00003F60 0000000000000000                   6421 @lit_1949_178 DC AD(mtx_unlock)
00003F68 0000000000001310                   6422 @lit_1949_179 DC AD(rd_kafka_$Api$Key2str)
00003F70 0000000000001258                   6423 @lit_1949_180 DC AD(rd_slice_offset)
00003F78 0000000000000000                   6424 @lit_1949_185 DC AD(rd_kafka_log0)
00003F80 0000000000000007                   6425 @lit_1949_209 DC FD'7' 0x0000000000000007
00003F88 0000000000000DF0                   6426 @lit_1949_211 DC AD(rd_refcnt_sub0)
00003F90 0000000000000000                   6427 @lit_1949_212 DC AD(rd_kafka_buf_destroy_final)
00003F98 0000000000003930                   6428 @lit_1949_213 DC AD(rd_kafka_mock_msgset_new)
00003FA0 00000798                           6429 @lit_region_diff_1949_1_2  DC A(@REGION_1949_2-@REGION_1949_1)
00003FA4                                    6430 @L680    DS    0H
00003FA4 58F0 2000               00000000   6431          L     15,0(0,2)   ; bytes
00003FA8                                    6432 @L681    DS    0H
00003FA8 B914 00FF                          6433          LGFR  15,15
00003FAC E310 2008 0004          00000008   6434          LG    1,8(0,2)
00003FB2 E310 D2B8 0024          000002B8   6435          STG   1,696(0,13)
00003FB8 E3F0 D2C0 0024          000002C0   6436          STG   15,704(0,13)
00003FBE D707 D2C8 D2C8 000002C8 000002C8   6437          XC    712(8,13),712(13)
00003FC4 4110 D2B8               000002B8   6438          LA    1,696(0,13)
00003FC8 E3F0 C068 0004          00003F18   6439          LG    15,@lit_1949_164 ; rd_kafka_buf_new_shadow
00003FCE                                    6440 @@gen_label257 DS    0H
00003FCE 05EF                               6441          BALR  14,15
00003FD0                                    6442 @@gen_label258 DS    0H
00003FD0 B904 004F                          6443          LGR   4,15
                                            6444 * ***
                                            6445 * ***           do { size_t __len2 = (size_t)(1); if (!rd_slice_peek(&\
                                            6446 * (rkbuf)->rkbuf_reader, 8+4+4, &MagicByte, __len2)) do { size_t __len\
                                            6447 * 0 = (size_t)((8+4+4)+(__len2)); if (((__len0 > ((&(rkbuf)->rkbuf_rea\
                                            6448 * der)->end - rd_slice_abs_offset(&(rkbuf)->rkbuf_reader))))) { do { i\
                                            6449 * f (log_decode_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)))) rd_kaf\
                                            6450 * ka_crash("C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",198, __FUNC\
                                            6451 * TION__, (((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } while (0); \
                                            6452 * char __tmpstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), ": "); if (\
                                            6453 * __strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; do { char _logname[256]\
                                            6454 * ; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strlcpy(_logna\
                                            6455 * me, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_unlock(&(r\
                                            6456 * kbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf->rkbuf_rk\
                                            6457 * b)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_decod\
                                            6458 * e_errors, 0x0, "PROTOUFLOW", "Protocol read buffer underflow " "for \
                                            6459 * %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " "expected %" "zu" " byt\
                                            6460 * es > " "%" "zu" " remaining bytes (%s)%s", rd_kafka_ApiKey2str(rkbuf\
                                            6461 * ->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, rd_slice_of\
                                            6462 * fset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end - (&rkbuf->\
                                            6463 * rkbuf_reader)->start), __FUNCTION__, 198, __len0, ((&rkbuf->rkbuf_re\
                                            6464 * ader)->end - rd_slice_abs_offset(&rkbuf->rkbuf_reader)), rkbuf->rkbu\
                                            6465 * f_uflow_mitigation ? rkbuf->rkbuf_uflow_mitigation : "incorrect brok\
                                            6466 * er.version.fallback?", __tmpstr); } while (0); } (rkbuf)->rkbuf_err \
                                            6467 * = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_parse; } while (0); } } whi\
                                            6468 * le (0); } while (0);
00003FD4                                    6469 @L682    DS    0H
00003FD4 A759 0001               00000001   6470          LGHI  5,1         ; 1
00003FD8 41F0 4078               00000078   6471          LA    15,120(0,4)
                                                                                                                           Page  135 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00003FDC E3F0 D2B8 0024          000002B8   6472          STG   15,696(0,13)
00003FE2 E548 D2C0 0010          000002C0   6473          MVGHI 704(13),16
00003FE8 41F0 D0AC               000000AC   6474          LA    15,172(0,13)
00003FEC E3F0 D2C8 0024          000002C8   6475          STG   15,712(0,13)
00003FF2 E350 D2D0 0024          000002D0   6476          STG   5,720(0,13)
00003FF8 4110 D2B8               000002B8   6477          LA    1,696(0,13)
00003FFC E3F0 C070 0004          00003F20   6478          LG    15,@lit_1949_166 ; rd_slice_peek
00004002                                    6479 @@gen_label259 DS    0H
00004002 05EF                               6480          BALR  14,15
00004004                                    6481 @@gen_label260 DS    0H
00004004 B902 00FF                          6482          LTGR  15,15
00004008 4770 C3D6               00004286   6483          BNZ   @L685
0000400C                                    6484 @L686    DS    0H
0000400C A75B 0010               00000010   6485          AGHI  5,16
00004010 E370 4098 0004          00000098   6486          LG    7,152(0,4)  ; offset of end in rd_slice_s
00004016 41F0 4078               00000078   6487          LA    15,120(0,4)
0000401A E3F0 D2B8 0024          000002B8   6488          STG   15,696(0,13)
00004020 4110 D2B8               000002B8   6489          LA    1,696(0,13)
00004024 E3F0 C078 0004          00003F28   6490          LG    15,@lit_1949_167 ; rd_slice_abs_offset
0000402A                                    6491 @@gen_label262 DS    0H
0000402A 05EF                               6492          BALR  14,15
0000402C                                    6493 @@gen_label263 DS    0H
0000402C B90B 007F                          6494          SLGR  7,15
00004030 B921 0057                          6495          CLGR  5,7
00004034 47D0 C3D6               00004286   6496          BNH   @L689
00004038                                    6497 @L690    DS    0H
00004038 1233                               6498          LTR   3,3
0000403A 47D0 C3CC               0000427C   6499          BNH   @L693
0000403E                                    6500 @L694    DS    0H
0000403E E3F0 4100 0002          00000100   6501          LTG   15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
00004044 4770 C1DA               0000408A   6502          BNZ   @L697
00004048 E3F0 C090 0004          00003F40   6503          LG    15,@lit_1949_168
0000404E 4110 F0FA               000000FA   6504          LA    1,250(0,15)
00004052 E310 D2B8 0024          000002B8   6505          STG   1,696(0,13)
00004058 E548 D2C0 00C6          000002C0   6506          MVGHI 704(13),198
0000405E E310 C088 0004          00003F38   6507          LG    1,@lit_1949_169
00004064 4110 11DE               000001DE   6508          LA    1,478(0,1)
00004068 E310 D2C8 0024          000002C8   6509          STG   1,712(0,13)
0000406E D707 D2D0 D2D0 000002D0 000002D0   6510          XC    720(8,13),720(13)
00004074 41F0 F1D2               000001D2   6511          LA    15,466(0,15)
00004078 E3F0 D2D8 0024          000002D8   6512          STG   15,728(0,13)
0000407E 4110 D2B8               000002B8   6513          LA    1,696(0,13)
00004082 E3F0 C080 0004          00003F30   6514          LG    15,@lit_1949_170 ; rd_kafka_crash
00004088                                    6515 @@gen_label267 DS    0H
00004088 05EF                               6516          BALR  14,15
0000408A                                    6517 @@gen_label268 DS    0H
0000408A                                    6518 @L697    DS    0H
0000408A 41F0 D0B4               000000B4   6519          LA    15,180(0,13)
0000408E E3F0 D2B8 0024          000002B8   6520          STG   15,696(0,13)
00004094 E548 D2C0 0100          000002C0   6521          MVGHI 704(13),256
0000409A E3F0 C090 0004          00003F40   6522          LG    15,@lit_1949_168
000040A0 41F0 F1EC               000001EC   6523          LA    15,492(0,15)
                                                                                                                           Page  136 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000040A4 E3F0 D2C8 0024          000002C8   6524          STG   15,712(0,13)
000040AA 4110 D2B8               000002B8   6525          LA    1,696(0,13)
000040AE E3F0 C098 0004          00003F48   6526          LG    15,@lit_1949_172 ; snprintf
000040B4                                    6527 @@gen_label269 DS    0H
000040B4 05EF                               6528          BALR  14,15
000040B6                                    6529 @@gen_label270 DS    0H
000040B6 41F0 D0B4               000000B4   6530          LA    15,180(0,13)
000040BA B904 001F                          6531          LGR   1,15
000040BE A709 0000               00000000   6532          LGHI  0,0
000040C2                                    6533 @@gen_label271 DS 0H
000040C2 B25E 000F                          6534          SRST  0,15
000040C6 4710 C212               000040C2   6535          BC  1,@@gen_label271
000040CA B90B 0001                          6536          SLGR  0,1
000040CE A70F 0002               00000002   6537          CGHI  0,2
000040D2 4770 C22A               000040DA   6538          BNE   @L699
000040D6 9200 D0B4      000000B4 00000000   6539          MVI   180(13),0
000040DA                                    6540 @L698    DS    0H
000040DA                                    6541 @L699    DS    0H
000040DA E3F0 4100 0004          00000100   6542          LG    15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
000040E0 A729 1638               00001638   6543          LGHI  2,5688      ; 5688
000040E4 41F2 F000               00000000   6544          LA    15,0(2,15)
000040E8 E3F0 D2B8 0024          000002B8   6545          STG   15,696(0,13)
000040EE 4110 D2B8               000002B8   6546          LA    1,696(0,13)
000040F2 E3F0 C0A0 0004          00003F50   6547          LG    15,@lit_1949_174 ; mtx_lock
000040F8                                    6548 @@gen_label273 DS    0H
000040F8 05EF                               6549          BALR  14,15
000040FA                                    6550 @@gen_label274 DS    0H
000040FA 41F0 D1B4               000001B4   6551          LA    15,436(0,13)
000040FE E3F0 D2B8 0024          000002B8   6552          STG   15,696(0,13)
00004104 E3F0 4100 0004          00000100   6553          LG    15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000410A A719 1630               00001630   6554          LGHI  1,5680      ; 5680
0000410E E3F1 F000 0004          00000000   6555          LG    15,0(1,15)
00004114 E3F0 D2C0 0024          000002C0   6556          STG   15,704(0,13)
0000411A E548 D2C8 0100          000002C8   6557          MVGHI 712(13),256
00004120 4110 D2B8               000002B8   6558          LA    1,696(0,13)
00004124 E3F0 C0A8 0004          00003F58   6559          LG    15,@lit_1949_176 ; rd_strlcpy
0000412A                                    6560 @@gen_label275 DS    0H
0000412A 05EF                               6561          BALR  14,15
0000412C                                    6562 @@gen_label276 DS    0H
0000412C E3F0 4100 0004          00000100   6563          LG    15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
00004132 41F2 F000               00000000   6564          LA    15,0(2,15)
00004136 E3F0 D2B8 0024          000002B8   6565          STG   15,696(0,13)
0000413C 4110 D2B8               000002B8   6566          LA    1,696(0,13)
00004140 E3F0 C0B0 0004          00003F60   6567          LG    15,@lit_1949_178 ; mtx_unlock
00004146                                    6568 @@gen_label277 DS    0H
00004146 05EF                               6569          BALR  14,15
00004148                                    6570 @@gen_label278 DS    0H
00004148 E3F0 40B8 0015          000000B8   6571          LGH   15,184(0,4)
0000414E E3F0 D2B8 0024          000002B8   6572          STG   15,696(0,13)
00004154 4110 D2B8               000002B8   6573          LA    1,696(0,13)
00004158 E3F0 C0B8 0004          00003F68   6574          LG    15,@lit_1949_179 ; rd_kafka_ApiKey2str
0000415E                                    6575 @@gen_label279 DS    0H
                                                                                                                           Page  137 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000415E 05EF                               6576          BALR  14,15
00004160                                    6577 @@gen_label280 DS    0H
00004160 B904 002F                          6578          LGR   2,15
00004164 41F0 4078               00000078   6579          LA    15,120(0,4)
00004168 E3F0 D2B8 0024          000002B8   6580          STG   15,696(0,13)
0000416E 4110 D2B8               000002B8   6581          LA    1,696(0,13)
00004172 E3F0 C0C0 0004          00003F70   6582          LG    15,@lit_1949_180 ; rd_slice_offset
00004178                                    6583 @@gen_label281 DS    0H
00004178 05EF                               6584          BALR  14,15
0000417A                                    6585 @@gen_label282 DS    0H
0000417A B904 006F                          6586          LGR   6,15
0000417E E370 4098 0004          00000098   6587          LG    7,152(0,4)  ; offset of end in rd_slice_s
00004184 41F0 4078               00000078   6588          LA    15,120(0,4)
00004188 E3F0 D2B8 0024          000002B8   6589          STG   15,696(0,13)
0000418E 4110 D2B8               000002B8   6590          LA    1,696(0,13)
00004192 E3F0 C078 0004          00003F28   6591          LG    15,@lit_1949_167 ; rd_slice_abs_offset
00004198                                    6592 @@gen_label283 DS    0H
00004198 05EF                               6593          BALR  14,15
0000419A                                    6594 @@gen_label284 DS    0H
0000419A B90B 007F                          6595          SLGR  7,15
0000419E E3F0 41E8 0002          000001E8   6596          LTG   15,488(0,4) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000041A4 4780 C302               000041B2   6597          BZ    @L702
000041A8 E3F0 41E8 0004          000001E8   6598          LG    15,488(0,4) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000041AE 47F0 C30C               000041BC   6599          B     @L703
000041B2                                    6600 @L702    DS    0H
000041B2 E3F0 C090 0004          00003F40   6601          LG    15,@lit_1949_168
000041B8 41F0 F1F0               000001F0   6602          LA    15,496(0,15)
000041BC                                    6603 @L703    DS    0H
000041BC E310 4100 0004          00000100   6604          LG    1,256(0,4)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000041C2 E310 1FD0 0004          00000FD0   6605          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
000041C8 4110 1210               00000210   6606          LA    1,528(0,1)
000041CC E310 D2B8 0024          000002B8   6607          STG   1,696(0,13)
000041D2 E310 4100 0004          00000100   6608          LG    1,256(0,4)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000041D8 E310 1FD0 0004          00000FD0   6609          LG    1,4048(0,1)
000041DE E310 D2C0 0024          000002C0   6610          STG   1,704(0,13)
000041E4 4110 D1B4               000001B4   6611          LA    1,436(0,13)
000041E8 E310 D2C8 0024          000002C8   6612          STG   1,712(0,13)
000041EE B914 0013                          6613          LGFR  1,3
000041F2 E310 D2D0 0024          000002D0   6614          STG   1,720(0,13)
000041F8 D707 D2D8 D2D8 000002D8 000002D8   6615          XC    728(8,13),728(13)
000041FE E310 C090 0004          00003F40   6616          LG    1,@lit_1949_168
00004204 4130 1214               00000214   6617          LA    3,532(0,1)
00004208 E330 D2E0 0024          000002E0   6618          STG   3,736(0,13)
0000420E 4110 1220               00000220   6619          LA    1,544(0,1)
00004212 EB12 D2E8 0024          000002E8   6620          STMG  1,2,744(13)
00004218 4810 40BA               000000BA   6621          LH    1,186(0,4)
0000421C B914 0011                          6622          LGFR  1,1
00004220 E310 D2F8 0024          000002F8   6623          STG   1,760(0,13)
00004226 E360 D300 0024          00000300   6624          STG   6,768(0,13)
0000422C E310 4098 0004          00000098   6625          LG    1,152(0,4)  ; offset of end in rd_slice_s
                                                                                                                           Page  138 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004232 E310 4090 000B          00000090   6626          SLG   1,144(0,4)
00004238 E310 D308 0024          00000308   6627          STG   1,776(0,13)
0000423E E310 C088 0004          00003F38   6628          LG    1,@lit_1949_169
00004244 4110 11DE               000001DE   6629          LA    1,478(0,1)
00004248 E310 D310 0024          00000310   6630          STG   1,784(0,13)
0000424E E548 D318 00C6          00000318   6631          MVGHI 792(13),198
00004254 E350 D320 0024          00000320   6632          STG   5,800(0,13)
0000425A E370 D328 0024          00000328   6633          STG   7,808(0,13)
00004260 E3F0 D330 0024          00000330   6634          STG   15,816(0,13)
00004266 41F0 D0B4               000000B4   6635          LA    15,180(0,13)
0000426A E3F0 D338 0024          00000338   6636          STG   15,824(0,13)
00004270 4110 D2B8               000002B8   6637          LA    1,696(0,13)
00004274 E3F0 C0C8 0004          00003F78   6638          LG    15,@lit_1949_185 ; rd_kafka_log0
0000427A                                    6639 @@gen_label286 DS    0H
0000427A 05EF                               6640          BALR  14,15
0000427C                                    6641 @@gen_label287 DS    0H
0000427C                                    6642 @L693    DS    0H
0000427C E54C 4188 FF65          00000188   6643          MVHI  392(4),-155 ; offset of rkbuf_err in rd_kafka_buf_s
00004282 47F0 C75C               0000460C   6644          B     @_err_parse@1949@0
00004286                                    6645 @L689    DS    0H
00004286                                    6646 @L685    DS    0H
                                            6647 * ***           if (MagicByte != 2) {
00004286 E3F0 D0AC 0076          000000AC   6648          LB    15,172(0,13) ; MagicByte
0000428C A7FE 0002               00000002   6649          CHI   15,2
00004290 4780 C3EC               0000429C   6650          BE    @L708
                                            6651 * ***
                                            6652 * ***                   err = RD_KAFKA_RESP_ERR_UNSUPPORTED_VERSION;
00004294 A728 0023               00000023   6653          LHI   2,35        ; 35
                                            6654 * ***                   goto err;
00004298 47F0 C760               00004610   6655          B     @L738
                                            6656 * ***           }
                                            6657 * ***
                                            6658 * ***           do { int32_t _v; do { size_t __len2 = (size_t)(sizeof(\
                                            6659 * _v)); if (!rd_slice_peek(&(rkbuf)->rkbuf_reader, (8+4+4+1+4+2+4+8+8+\
                                            6660 * 8+2+4), &_v, __len2)) do { size_t __len0 = (size_t)(((8+4+4+1+4+2+4+\
                                            6661 * 8+8+8+2+4))+(__len2)); if (((__len0 > ((&(rkbuf)->rkbuf_reader)->end\
                                            6662 *  - rd_slice_abs_offset(&(rkbuf)->rkbuf_reader))))) { do { if (log_de\
                                            6663 * code_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)))) rd_kafka_crash(\
                                            6664 * "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",205, __FUNCTION__, (\
                                            6665 * ((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } while (0); char __tm\
                                            6666 * pstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), ": "); if (__strlen(\
                                            6667 * __tmpstr) == 2) __tmpstr[0] = '\0'; do { char _logname[256]; mtx_loc\
                                            6668 * k(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strlcpy(_logname, rkbuf\
                                            6669 * ->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_unlock(&(rkbuf->rkb\
                                            6670 * uf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf->rkbuf_rkb)->rkb_r\
                                            6671 * k->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_decode_errors,\
                                            6672 *  0x0, "PROTOUFLOW", "Protocol read buffer underflow " "for %s v%hd "\
                                            6673 *  "at %" "zu" "/%" "zu" " (%s:%i): " "expected %" "zu" " bytes > " "%\
                                            6674 * " "zu" " remaining bytes (%s)%s", rd_kafka_ApiKey2str(rkbuf->rkbuf_r\
                                            6675 * eqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, rd_slice_offset(&rkb\
                                            6676 * uf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end - (&rkbuf->rkbuf_rea\
                                            6677 * der)->start), __FUNCTION__, 205, __len0, ((&rkbuf->rkbuf_reader)->en\
                                                                                                                           Page  139 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            6678 * d - rd_slice_abs_offset(&rkbuf->rkbuf_reader)), rkbuf->rkbuf_uflow_m\
                                            6679 * itigation ? rkbuf->rkbuf_uflow_mitigation : "incorrect broker.versio\
                                            6680 * n.fallback?", __tmpstr); } while (0); } (rkbuf)->rkbuf_err = RD_KAFK\
                                            6681 * A_RESP_ERR__UNDERFLOW; goto err_parse; } while (0); } } while (0); }\
                                            6682 *  while (0); *(&RecordCount) = (_v); } while (0);
0000429C                                    6683 @L708    DS    0H
0000429C A759 0004               00000004   6684          LGHI  5,4         ; 4
000042A0 41F0 4078               00000078   6685          LA    15,120(0,4)
000042A4 E3F0 D2B8 0024          000002B8   6686          STG   15,696(0,13)
000042AA E548 D2C0 0039          000002C0   6687          MVGHI 704(13),57
000042B0 41F0 D0A8               000000A8   6688          LA    15,168(0,13)
000042B4 E3F0 D2C8 0024          000002C8   6689          STG   15,712(0,13)
000042BA E350 D2D0 0024          000002D0   6690          STG   5,720(0,13)
000042C0 4110 D2B8               000002B8   6691          LA    1,696(0,13)
000042C4 E3F0 C070 0004          00003F20   6692          LG    15,@lit_1949_166 ; rd_slice_peek
000042CA                                    6693 @@gen_label289 DS    0H
000042CA 05EF                               6694          BALR  14,15
000042CC                                    6695 @@gen_label290 DS    0H
000042CC B902 00FF                          6696          LTGR  15,15
000042D0 4770 C69E               0000454E   6697          BNZ   @L711
000042D4                                    6698 @L712    DS    0H
000042D4 A75B 0039               00000039   6699          AGHI  5,57
000042D8 E370 4098 0004          00000098   6700          LG    7,152(0,4)  ; offset of end in rd_slice_s
000042DE 41F0 4078               00000078   6701          LA    15,120(0,4)
000042E2 E3F0 D2B8 0024          000002B8   6702          STG   15,696(0,13)
000042E8 4110 D2B8               000002B8   6703          LA    1,696(0,13)
000042EC E3F0 C078 0004          00003F28   6704          LG    15,@lit_1949_167 ; rd_slice_abs_offset
000042F2                                    6705 @@gen_label292 DS    0H
000042F2 05EF                               6706          BALR  14,15
000042F4                                    6707 @@gen_label293 DS    0H
000042F4 B90B 007F                          6708          SLGR  7,15
000042F8 B921 0057                          6709          CLGR  5,7
000042FC 47D0 C69E               0000454E   6710          BNH   @L715
00004300                                    6711 @L716    DS    0H
00004300 1233                               6712          LTR   3,3
00004302 47D0 C694               00004544   6713          BNH   @L719
00004306                                    6714 @L720    DS    0H
00004306 E3F0 4100 0002          00000100   6715          LTG   15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000430C 4770 C4A2               00004352   6716          BNZ   @L723
00004310 E3F0 C090 0004          00003F40   6717          LG    15,@lit_1949_168
00004316 4110 F0FA               000000FA   6718          LA    1,250(0,15)
0000431A E310 D2B8 0024          000002B8   6719          STG   1,696(0,13)
00004320 E548 D2C0 00CD          000002C0   6720          MVGHI 704(13),205
00004326 E310 C088 0004          00003F38   6721          LG    1,@lit_1949_169
0000432C 4110 11DE               000001DE   6722          LA    1,478(0,1)
00004330 E310 D2C8 0024          000002C8   6723          STG   1,712(0,13)
00004336 D707 D2D0 D2D0 000002D0 000002D0   6724          XC    720(8,13),720(13)
0000433C 41F0 F1D2               000001D2   6725          LA    15,466(0,15)
00004340 E3F0 D2D8 0024          000002D8   6726          STG   15,728(0,13)
00004346 4110 D2B8               000002B8   6727          LA    1,696(0,13)
0000434A E3F0 C080 0004          00003F30   6728          LG    15,@lit_1949_170 ; rd_kafka_crash
00004350                                    6729 @@gen_label297 DS    0H
                                                                                                                           Page  140 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004350 05EF                               6730          BALR  14,15
00004352                                    6731 @@gen_label298 DS    0H
00004352                                    6732 @L723    DS    0H
00004352 41F0 D0B4               000000B4   6733          LA    15,180(0,13)
00004356 E3F0 D2B8 0024          000002B8   6734          STG   15,696(0,13)
0000435C E548 D2C0 0100          000002C0   6735          MVGHI 704(13),256
00004362 E3F0 C090 0004          00003F40   6736          LG    15,@lit_1949_168
00004368 41F0 F1EC               000001EC   6737          LA    15,492(0,15)
0000436C E3F0 D2C8 0024          000002C8   6738          STG   15,712(0,13)
00004372 4110 D2B8               000002B8   6739          LA    1,696(0,13)
00004376 E3F0 C098 0004          00003F48   6740          LG    15,@lit_1949_172 ; snprintf
0000437C                                    6741 @@gen_label299 DS    0H
0000437C 05EF                               6742          BALR  14,15
0000437E                                    6743 @@gen_label300 DS    0H
0000437E 41F0 D0B4               000000B4   6744          LA    15,180(0,13)
00004382 B904 001F                          6745          LGR   1,15
00004386 A709 0000               00000000   6746          LGHI  0,0
0000438A                                    6747 @@gen_label301 DS 0H
0000438A B25E 000F                          6748          SRST  0,15
0000438E 4710 C4DA               0000438A   6749          BC  1,@@gen_label301
00004392 B90B 0001                          6750          SLGR  0,1
00004396 A70F 0002               00000002   6751          CGHI  0,2
0000439A 4770 C4F2               000043A2   6752          BNE   @L725
0000439E 9200 D0B4      000000B4 00000000   6753          MVI   180(13),0
000043A2                                    6754 @L724    DS    0H
000043A2                                    6755 @L725    DS    0H
000043A2 E3F0 4100 0004          00000100   6756          LG    15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
000043A8 A729 1638               00001638   6757          LGHI  2,5688      ; 5688
000043AC 41F2 F000               00000000   6758          LA    15,0(2,15)
000043B0 E3F0 D2B8 0024          000002B8   6759          STG   15,696(0,13)
000043B6 4110 D2B8               000002B8   6760          LA    1,696(0,13)
000043BA E3F0 C0A0 0004          00003F50   6761          LG    15,@lit_1949_174 ; mtx_lock
000043C0                                    6762 @@gen_label303 DS    0H
000043C0 05EF                               6763          BALR  14,15
000043C2                                    6764 @@gen_label304 DS    0H
000043C2 41F0 D1B4               000001B4   6765          LA    15,436(0,13)
000043C6 E3F0 D2B8 0024          000002B8   6766          STG   15,696(0,13)
000043CC E3F0 4100 0004          00000100   6767          LG    15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
000043D2 A719 1630               00001630   6768          LGHI  1,5680      ; 5680
000043D6 E3F1 F000 0004          00000000   6769          LG    15,0(1,15)
000043DC E3F0 D2C0 0024          000002C0   6770          STG   15,704(0,13)
000043E2 E548 D2C8 0100          000002C8   6771          MVGHI 712(13),256
000043E8 4110 D2B8               000002B8   6772          LA    1,696(0,13)
000043EC E3F0 C0A8 0004          00003F58   6773          LG    15,@lit_1949_176 ; rd_strlcpy
000043F2                                    6774 @@gen_label305 DS    0H
000043F2 05EF                               6775          BALR  14,15
000043F4                                    6776 @@gen_label306 DS    0H
000043F4 E3F0 4100 0004          00000100   6777          LG    15,256(0,4) ; offset of rkbuf_rkb in rd_kafka_buf_s
000043FA 41F2 F000               00000000   6778          LA    15,0(2,15)
000043FE E3F0 D2B8 0024          000002B8   6779          STG   15,696(0,13)
00004404 4110 D2B8               000002B8   6780          LA    1,696(0,13)
00004408 E3F0 C0B0 0004          00003F60   6781          LG    15,@lit_1949_178 ; mtx_unlock
                                                                                                                           Page  141 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000440E                                    6782 @@gen_label307 DS    0H
0000440E 05EF                               6783          BALR  14,15
00004410                                    6784 @@gen_label308 DS    0H
00004410 E3F0 40B8 0015          000000B8   6785          LGH   15,184(0,4)
00004416 E3F0 D2B8 0024          000002B8   6786          STG   15,696(0,13)
0000441C 4110 D2B8               000002B8   6787          LA    1,696(0,13)
00004420 E3F0 C0B8 0004          00003F68   6788          LG    15,@lit_1949_179 ; rd_kafka_ApiKey2str
00004426                                    6789 @@gen_label309 DS    0H
00004426 05EF                               6790          BALR  14,15
00004428                                    6791 @@gen_label310 DS    0H
00004428 B904 002F                          6792          LGR   2,15
0000442C 41F0 4078               00000078   6793          LA    15,120(0,4)
00004430 E3F0 D2B8 0024          000002B8   6794          STG   15,696(0,13)
00004436 4110 D2B8               000002B8   6795          LA    1,696(0,13)
0000443A E3F0 C0C0 0004          00003F70   6796          LG    15,@lit_1949_180 ; rd_slice_offset
00004440                                    6797 @@gen_label311 DS    0H
00004440 05EF                               6798          BALR  14,15
00004442                                    6799 @@gen_label312 DS    0H
00004442 B904 006F                          6800          LGR   6,15
00004446 E370 4098 0004          00000098   6801          LG    7,152(0,4)  ; offset of end in rd_slice_s
0000444C 41F0 4078               00000078   6802          LA    15,120(0,4)
00004450 E3F0 D2B8 0024          000002B8   6803          STG   15,696(0,13)
00004456 4110 D2B8               000002B8   6804          LA    1,696(0,13)
0000445A E3F0 C078 0004          00003F28   6805          LG    15,@lit_1949_167 ; rd_slice_abs_offset
00004460                                    6806 @@gen_label313 DS    0H
00004460 05EF                               6807          BALR  14,15
00004462                                    6808 @@gen_label314 DS    0H
00004462 B90B 007F                          6809          SLGR  7,15
00004466 E3F0 41E8 0002          000001E8   6810          LTG   15,488(0,4) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
0000446C 4780 C5CA               0000447A   6811          BZ    @L728
00004470 E3F0 41E8 0004          000001E8   6812          LG    15,488(0,4) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00004476 47F0 C5D4               00004484   6813          B     @L729
0000447A                                    6814 @L728    DS    0H
0000447A E3F0 C090 0004          00003F40   6815          LG    15,@lit_1949_168
00004480 41F0 F1F0               000001F0   6816          LA    15,496(0,15)
00004484                                    6817 @L729    DS    0H
00004484 E310 4100 0004          00000100   6818          LG    1,256(0,4)  ; offset of rkbuf_rkb in rd_kafka_buf_s
0000448A E310 1FD0 0004          00000FD0   6819          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00004490 4110 1210               00000210   6820          LA    1,528(0,1)
00004494 E310 D2B8 0024          000002B8   6821          STG   1,696(0,13)
0000449A E310 4100 0004          00000100   6822          LG    1,256(0,4)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000044A0 E310 1FD0 0004          00000FD0   6823          LG    1,4048(0,1)
000044A6 E310 D2C0 0024          000002C0   6824          STG   1,704(0,13)
000044AC 4110 D1B4               000001B4   6825          LA    1,436(0,13)
000044B0 E310 D2C8 0024          000002C8   6826          STG   1,712(0,13)
000044B6 B914 0013                          6827          LGFR  1,3
000044BA E310 D2D0 0024          000002D0   6828          STG   1,720(0,13)
000044C0 D707 D2D8 D2D8 000002D8 000002D8   6829          XC    728(8,13),728(13)
000044C6 E310 C090 0004          00003F40   6830          LG    1,@lit_1949_168
000044CC 4130 1214               00000214   6831          LA    3,532(0,1)
                                                                                                                           Page  142 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000044D0 E330 D2E0 0024          000002E0   6832          STG   3,736(0,13)
000044D6 4110 1220               00000220   6833          LA    1,544(0,1)
000044DA EB12 D2E8 0024          000002E8   6834          STMG  1,2,744(13)
000044E0 4810 40BA               000000BA   6835          LH    1,186(0,4)
000044E4 B914 0011                          6836          LGFR  1,1
000044E8 E310 D2F8 0024          000002F8   6837          STG   1,760(0,13)
000044EE E360 D300 0024          00000300   6838          STG   6,768(0,13)
000044F4 E310 4098 0004          00000098   6839          LG    1,152(0,4)  ; offset of end in rd_slice_s
000044FA E310 4090 000B          00000090   6840          SLG   1,144(0,4)
00004500 E310 D308 0024          00000308   6841          STG   1,776(0,13)
00004506 E310 C088 0004          00003F38   6842          LG    1,@lit_1949_169
0000450C 4110 11DE               000001DE   6843          LA    1,478(0,1)
00004510 E310 D310 0024          00000310   6844          STG   1,784(0,13)
00004516 E548 D318 00CD          00000318   6845          MVGHI 792(13),205
0000451C E350 D320 0024          00000320   6846          STG   5,800(0,13)
00004522 E370 D328 0024          00000328   6847          STG   7,808(0,13)
00004528 E3F0 D330 0024          00000330   6848          STG   15,816(0,13)
0000452E 41F0 D0B4               000000B4   6849          LA    15,180(0,13)
00004532 E3F0 D338 0024          00000338   6850          STG   15,824(0,13)
00004538 4110 D2B8               000002B8   6851          LA    1,696(0,13)
0000453C E3F0 C0C8 0004          00003F78   6852          LG    15,@lit_1949_185 ; rd_kafka_log0
00004542                                    6853 @@gen_label316 DS    0H
00004542 05EF                               6854          BALR  14,15
00004544                                    6855 @@gen_label317 DS    0H
00004544                                    6856 @L719    DS    0H
00004544 E54C 4188 FF65          00000188   6857          MVHI  392(4),-155 ; offset of rkbuf_err in rd_kafka_buf_s
0000454A 47F0 C75C               0000460C   6858          B     @_err_parse@1949@0
0000454E                                    6859 @L715    DS    0H
0000454E                                    6860 @L711    DS    0H
0000454E 58F0 D0A8               000000A8   6861          L     15,168(0,13) ; _v
00004552 50F0 D0B0               000000B0   6862          ST    15,176(0,13)
                                            6863 * ***
                                            6864 * ***
                                            6865 * ***           if (RecordCount < 1 ||
00004556 E55C D0B0 0001          000000B0   6866          CHSI  176(13),1
0000455C 4740 C6E2               00004592   6867          BL    @L733
                                            6868 * ***               (size_t)RecordCount >
00004560 E3F0 D0B0 0014          000000B0   6869          LGF   15,176(0,13) ; RecordCount
                                            6870 * ***               (((bytes)->len) == -1 ? 0:((bytes)->len)) / ( ((si\
                                            6871 * ze_t)1) + 1 + ((size_t)1) + ((size_t)1) + ((size_t)1) + ((size_t)1) \
                                            6872 * + ((size_t)1) )) {
00004566 E55C 2000 FFFF          00000000   6873          CHSI  0(2),-1
0000456C 4770 C6C8               00004578   6874          BNE   @L730
00004570 A718 0000               00000000   6875          LHI   1,0         ; 0
00004574 47F0 C6CC               0000457C   6876          B     @L731
00004578                                    6877 @L730    DS    0H
00004578 5810 2000               00000000   6878          L     1,0(0,2)    ; bytes
0000457C                                    6879 @L731    DS    0H
0000457C B914 0091                          6880          LGFR  9,1
00004580 A789 0000               00000000   6881          LGHI  8,0
00004584 E380 C0D0 0087          00003F80   6882          DLG   8,@lit_1949_209
0000458A B921 00F9                          6883          CLGR  15,9
                                                                                                                           Page  143 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000458E 47D0 C6EA               0000459A   6884          BNH   @L734
00004592                                    6885 @L733    DS    0H
                                            6886 * ***                   err = RD_KAFKA_RESP_ERR_INVALID_MSG_SIZE;
00004592 A728 0004               00000004   6887          LHI   2,4         ; 4
                                            6888 * ***                   goto err;
00004596 47F0 C760               00004610   6889          B     @L738
                                            6890 * ***           }
                                            6891 * ***
                                            6892 * ***           do { if (rd_refcnt_sub0(&(rkbuf)->rkbuf_refcnt) > 0) b\
                                            6893 * reak; rd_kafka_buf_destroy_final(rkbuf); } while (0);
0000459A                                    6894 @L734    DS    0H
0000459A 41F0 4108               00000108   6895          LA    15,264(0,4)
0000459E E3F0 D2B8 0024          000002B8   6896          STG   15,696(0,13)
000045A4 4110 D2B8               000002B8   6897          LA    1,696(0,13)
000045A8 E3F0 C0D8 0004          00003F88   6898          LG    15,@lit_1949_211 ; rd_refcnt_sub0
000045AE                                    6899 @@gen_label321 DS    0H
000045AE 05EF                               6900          BALR  14,15
000045B0                                    6901 @@gen_label322 DS    0H
000045B0 12FF                               6902          LTR   15,15
000045B2 4720 C718               000045C8   6903          BH    @L735
000045B6                                    6904 @L737    DS    0H
000045B6 E340 D2B8 0024          000002B8   6905          STG   4,696(0,13)
000045BC 4110 D2B8               000002B8   6906          LA    1,696(0,13)
000045C0 E3F0 C0E0 0004          00003F90   6907          LG    15,@lit_1949_212 ; rd_kafka_buf_destroy_final
000045C6                                    6908 @@gen_label324 DS    0H
000045C6 05EF                               6909          BALR  14,15
000045C8                                    6910 @@gen_label325 DS    0H
000045C8                                    6911 @L735    DS    0H
                                            6912 * ***
                                            6913 * ***           mset = rd_kafka_mock_msgset_new(mpart, bytes, (size_t)\
                                            6914 * RecordCount);
000045C8 E3F0 6000 0004          00000000   6915          LG    15,0(0,6)   ; mpart
000045CE E3F0 D2B8 0024          000002B8   6916          STG   15,696(0,13)
000045D4 E320 D2C0 0024          000002C0   6917          STG   2,704(0,13)
000045DA E3F0 D0B0 0014          000000B0   6918          LGF   15,176(0,13) ; RecordCount
000045E0 E3F0 D2C8 0024          000002C8   6919          STG   15,712(0,13)
000045E6 4110 D2B8               000002B8   6920          LA    1,696(0,13)
000045EA E3F0 C0E8 0004          00003F98   6921          LG    15,@lit_1949_213 ; rd_kafka_mock_msgset_new
000045F0                                    6922 @@gen_label326 DS    0H
000045F0 05EF                               6923          BALR  14,15
000045F2                                    6924 @@gen_label327 DS    0H
                                            6925 * ***
                                            6926 * ***           *BaseOffset = mset->first_offset;
000045F2 E310 6010 0004          00000010   6927          LG    1,16(0,6)   ; BaseOffset
000045F8 E3F0 F010 0004          00000010   6928          LG    15,16(0,15) ; offset of first_offset in rd_kafka_mock_ms*
                                                                gset_s
000045FE E3F0 1000 0024          00000000   6929          STG   15,0(0,1)   ; BaseOffset
                                            6930 * ***
                                            6931 * ***           return RD_KAFKA_RESP_ERR_NO_ERROR;
00004604 A7F9 0000               00000000   6932          LGHI  15,0        ; 0
00004608 47F0 C792               00004642   6933          B     @ret_lab_1949
                                            6934 * ***
                                                                                                                           Page  144 
  Active Usings: @REGION_1949_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            6935 * ***    err_parse:
                                            6936 * ***           err = rkbuf->rkbuf_err;
0000460C                                    6937 @_err_parse@1949@0 DS 0H
0000460C 5820 4188               00000188   6938          L     2,392(0,4)  ; offset of rkbuf_err in rd_kafka_buf_s
                                            6939 * ***    err:
                                            6940 * ***           do { if (rd_refcnt_sub0(&(rkbuf)->rkbuf_refcnt) > 0) b\
                                            6941 * reak; rd_kafka_buf_destroy_final(rkbuf); } while (0);
00004610                                    6942 @_err@1949@1 DS 0H
00004610                                    6943 @L738    DS    0H
00004610 41F0 4108               00000108   6944          LA    15,264(0,4)
00004614 E3F0 D2B8 0024          000002B8   6945          STG   15,696(0,13)
0000461A 4110 D2B8               000002B8   6946          LA    1,696(0,13)
0000461E E3F0 C0D8 0004          00003F88   6947          LG    15,@lit_1949_211 ; rd_refcnt_sub0
00004624                                    6948 @@gen_label328 DS    0H
00004624 05EF                               6949          BALR  14,15
00004626                                    6950 @@gen_label329 DS    0H
00004626 12FF                               6951          LTR   15,15
00004628 4720 C78E               0000463E   6952          BH    @L739
0000462C                                    6953 @L741    DS    0H
0000462C E340 D2B8 0024          000002B8   6954          STG   4,696(0,13)
00004632 4110 D2B8               000002B8   6955          LA    1,696(0,13)
00004636 E3F0 C0E0 0004          00003F90   6956          LG    15,@lit_1949_212 ; rd_kafka_buf_destroy_final
0000463C                                    6957 @@gen_label331 DS    0H
0000463C 05EF                               6958          BALR  14,15
0000463E                                    6959 @@gen_label332 DS    0H
0000463E                                    6960 @L739    DS    0H
                                            6961 * ***           return err;
0000463E B914 00F2                          6962          LGFR  15,2
                                            6963 * ***   }
00004642                                    6964 @ret_lab_1949 DS 0H
00004642 E3C0 C0F0 001A          00003FA0   6965          ALGF  12,@lit_region_diff_1949_1_2
00004648                                    6966 @REGION_1949_2 DS 0H
                                            6967          DROP  12
                        00004648            6968          USING @REGION_1949_2,12
                                            6969 * * **** Start of Epilogue
                                            6970          DCCEPIL
00004648                                    6971+         ds 0h                                                          01-DCCEP
                                            6972+* Epilog
00004648 D707 D088 D088 00000088 00000088   6973+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000464E E3D0 D080 0004          00000080   6974+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00004654 E3C0 D090 0004          00000090   6975+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000465A E3B0 C018 0004          00000018   6976+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00004660 E3C0 B010 0021          00000010   6977+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00004666 E3E0 D008 0004          00000008   6978+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000466C EB1C D020 0004          00000020   6979+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00004672 078E                               6980+         bcr 8,14                if same dsab, just return              01-DCCEP
00004674 E3F0 D010 0024          00000010   6981+         stg 15,16(0,13)         save return code                       01-DCCEP
0000467A E300 D018 0024          00000018   6982+         stg 0,24(0,13)          save more return code                  01-DCCEP
00004680 E3F0 D090 0004          00000090   6983+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00004686 E3F0 F018 0004          00000018   6984+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000468C 47F0 F040               00000040   6985+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            6986+* End of Epilog
                                                                                                                           Page  145 
  Active Usings: @REGION_1949_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            6987 * * **** End of Epilogue
                                            6988          DROP  12
                                            6989 *
                                            6990 *   DSECT for automatic variables in "rd_kafka_mock_partition_log_appe
                                            6991 *           nd"
                                            6992 *      (FUNCTION #1949)
                                            6993 *
00000000                00000000 000002B4   6994 @AUTO#rd_kafka_mock_partition_log_append DSECT
00000000                                    6995          DS    XL168
000000A8                                    6996 rd_kafka_mock_partition_log_append#__len0#11 DS 8XL1 ; __len0
000000B0                000000B0 000000A8   6997          ORG   @AUTO#rd_kafka_mock_partition_log_append+168
000000A8                                    6998 rd_kafka_mock_partition_log_append#__len2#10 DS 8XL1 ; __len2
000000B0                000000B0 000000A8   6999          ORG   @AUTO#rd_kafka_mock_partition_log_append+168
000000A8                                    7000 rd_kafka_mock_partition_log_append#_v#9 DS 1F ; _v
000000AC                000000AC 000000A8   7001          ORG   @AUTO#rd_kafka_mock_partition_log_append+168
000000A8                                    7002 rd_kafka_mock_partition_log_append#__len0#2 DS 8XL1 ; __len0
000000B0                000000B0 000000A8   7003          ORG   @AUTO#rd_kafka_mock_partition_log_append+168
000000A8                                    7004 rd_kafka_mock_partition_log_append#__len2#1 DS 8XL1 ; __len2
000000B0                000000B0 000000A8   7005          ORG   @AUTO#rd_kafka_mock_partition_log_append+168
000000A8                                    7006 rd_kafka_mock_partition_log_append#err#0 DS 1F ; err
000000AC                000000AC 000000A8   7007          ORG   @AUTO#rd_kafka_mock_partition_log_append+168
000000A8                                    7008 rd_kafka_mock_partition_log_append#log_decode_errors#0 DS 1F ; log_deco*
                                                                de_errors
000000AC                000000AC 000000AC   7009          ORG   @AUTO#rd_kafka_mock_partition_log_append+172
000000AC                                    7010 rd_kafka_mock_partition_log_append#$Magic$Byte#0 DS 1CL1 ; MagicByte
000000AD                000000AD 000000B0   7011          ORG   @AUTO#rd_kafka_mock_partition_log_append+176
000000B0                                    7012 rd_kafka_mock_partition_log_append#$Record$Count#0 DS 1F ; RecordCount
000000B4                000000B4 000000B4   7013          ORG   @AUTO#rd_kafka_mock_partition_log_append+180
000000B4                                    7014 rd_kafka_mock_partition_log_append#__tmpstr#15 DS 256XL1 ; __tmpstr
000001B4                000001B4 000000B4   7015          ORG   @AUTO#rd_kafka_mock_partition_log_append+180
000000B4                                    7016 rd_kafka_mock_partition_log_append#__tmpstr#6 DS 256XL1 ; __tmpstr
000001B4                000001B4 000001B4   7017          ORG   @AUTO#rd_kafka_mock_partition_log_append+436
000001B4                                    7018 rd_kafka_mock_partition_log_append#_logname#16 DS 256XL1 ; _logname
000002B4                000002B4 000001B4   7019          ORG   @AUTO#rd_kafka_mock_partition_log_append+436
000001B4                                    7020 rd_kafka_mock_partition_log_append#_logname#7 DS 256XL1 ; _logname
                                            7021 *
00004690                00000000 00010480   7022 @CODE    CSECT
                                            7023 *
                                            7024 *
                                            7025 *
                                            7026 * ....... start of rd_kafka_mock_partition_set_leader0
00004690                                    7027 @LNAME1979 DS  0H
00004690 00000023                           7028          DC    X'00000023'
00004694 99846D9281869281                   7029          DC    C'rd_kafka_mock_partition_set_lead'
000046B4 8599F0                             7030          DC    C'er0'
000046B7 00                                 7031          DC    X'00'
                                            7032 rd_kafka_mock_partition_set_leader0 DCCPRLG CINDEX=1979,BASER=0,FRAME=1*
                                                                68,SAVEAREA=NO,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1979
                                            7033          macro
                                            7034          dccextrn &m
                                            7035          gblc    &$dccext(1000)
                                            7036          gbla    &$dccexti
                                                                                                                           Page  146 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7037          lcla    &i
                                            7038 &$dccext(&$dccexti+1) setc    '&m'
                                            7039 &i       seta    1
                                            7040 .loop    aif    (&i gt &$dccexti).around
                                            7041          aif    ('&$dccext(&i)' eq '&m').getout
                                            7042 &i       seta    &i+1
                                            7043          ago     .loop
                                            7044 .around  anop
                                            7045 &$dccexti seta &$dccexti+1
                                            7046          extrn  &m
                                            7047 .getout  anop
                                            7048          mend
000046B8                                    7049+$eye0145    ds    0d                                                    02-DCCCA
000046B8 C4C3C3                             7050+         dc cl3'DCC'                                                    02-DCCCA
000046BB 01                                 7051+         dc xl1'01' format one                                          02-DCCCA
000046BC 00000000                           7052+         dc a(0)                                                        02-DCCCA
000046C0 0000000000000000                   7053+         dc ad(0)                                                       02-DCCCA
000046C8 00000000000000A8                   7054+         dc ad(168)                                                     02-DCCCA
000046D0 0000000000000000                   7055+         dc ad(0)                                                       02-DCCCA
000046D8 0000000000001000                   7056+         dc ad(4096)                                                    02-DCCCA
000046E0 20                                 7057+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000046E1 03                                 7058+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000046E2 03                                 7059+         dc al1(3)                                                      02-DCCCA
000046E3 08                                 7060+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000046E4 00                                 7061+         dc bl.8'00000000'                                              02-DCCCA
000046E5 000000                             7062+         dc al3(0)                                                      02-DCCCA
000046E8 0000000000004690                   7063+         dc ad(@LNAME1979)                                              02-DCCCA
000046F0                                    7064+         ds 0d                                                          02-DCCCA
000046F0 00000000000046B8                   7065+         dc ad($eye0145)                                                02-DCCCA
000046F8 0000000000000000                   7066+         dc ad(0)                                                       02-DCCCA
00004700                                    7067+         ds    0d                                                       01-DCCPR
00004700                                    7068+rd_kafka_mock_partition_set_leader0 ds 0d                               01-DCCPR
00004700                                    7069+@REGION_1979_1 ds 0h                                                    01-DCCPR
00004700 EBEC D008 0024          00000008   7070+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                            7071 * ******* End of Prologue
                                            7072 * *
                                            7073 * ***           mpart->leader = mrkb;
00004706 E3F0 1000 0004          00000000   7074          LG    15,0(0,1)   ; mpart
0000470C E310 1008 0004          00000008   7075          LG    1,8(0,1)    ; mrkb
00004712 E310 F080 0024          00000080   7076          STG   1,128(0,15) ; offset of leader in rd_kafka_mock_partitio*
                                                                n_s
                                            7077 * ***   }
00004718                                    7078 @ret_lab_1979 DS 0H
                                            7079 * * **** Start of Epilogue
                                            7080          DCCEPIL
00004718                                    7081+         ds 0h                                                          01-DCCEP
                                            7082+* Epilog
                                            7083+* Epilog
00004718 E3E0 D008 0004          00000008   7084+         lg    14,8(,13) restore the reg                                01-DCCEP
0000471E EB1C D020 0004          00000020   7085+         lmg   1,12,32(13)                                              01-DCCEP
00004724 07FE                               7086+         br   14                                                        01-DCCEP
                                            7087+* End of Epilog
                                                                                                                           Page  147 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7088 * * **** End of Epilogue
                                            7089 *
                                            7090 *   DSECT for automatic variables in "rd_kafka_mock_partition_set_lead
                                            7091 *           er0"
                                            7092 *      (FUNCTION #1979)
                                            7093 *
00000000                00000000 000000A8   7094 @AUTO#rd_kafka_mock_partition_set_leader0 DSECT
00000000                                    7095          DS    XL168
                                            7096 *
00004726                00000000 00010480   7097 @CODE    CSECT
                                            7098 *
                                            7099 *
                                            7100 *
                                            7101 * ....... start of rd_kafka_mock_partition_assign_replicas
00004726                                    7102 @LNAME1980 DS  0H
00004726 00000027                           7103          DC    X'00000027'
0000472A 99846D9281869281                   7104          DC    C'rd_kafka_mock_partition_assign_r'
0000474A 859793898381A2                     7105          DC    C'eplicas'
00004751 00                                 7106          DC    X'00'
                                            7107 rd_kafka_mock_partition_assign_replicas DCCPRLG CINDEX=1980,BASER=12,FR*
                                                                AME=192,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1980
                                            7108          macro
                                            7109          dccextrn &m
                                            7110          gblc    &$dccext(1000)
                                            7111          gbla    &$dccexti
                                            7112          lcla    &i
                                            7113 &$dccext(&$dccexti+1) setc    '&m'
                                            7114 &i       seta    1
                                            7115 .loop    aif    (&i gt &$dccexti).around
                                            7116          aif    ('&$dccext(&i)' eq '&m').getout
                                            7117 &i       seta    &i+1
                                            7118          ago     .loop
                                            7119 .around  anop
                                            7120 &$dccexti seta &$dccexti+1
                                            7121          extrn  &m
                                            7122 .getout  anop
                                            7123          mend
00004758                                    7124+$eye0148    ds    0d                                                    02-DCCCA
00004758 C4C3C3                             7125+         dc cl3'DCC'                                                    02-DCCCA
0000475B 01                                 7126+         dc xl1'01' format one                                          02-DCCCA
0000475C 00000000                           7127+         dc a(0)                                                        02-DCCCA
00004760 00000000000047CA                   7128+         dc ad(@PER_1980)                                               02-DCCCA
00004768 00000000000000C0                   7129+         dc ad(192)                                                     02-DCCCA
00004770 0000000000000000                   7130+         dc ad(0)                                                       02-DCCCA
00004778 0000000000001000                   7131+         dc ad(4096)                                                    02-DCCCA
00004780 20                                 7132+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00004781 03                                 7133+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00004782 03                                 7134+         dc al1(3)                                                      02-DCCCA
00004783 08                                 7135+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00004784 00                                 7136+         dc bl.8'00000000'                                              02-DCCCA
00004785 000000                             7137+         dc al3(0)                                                      02-DCCCA
00004788 0000000000004726                   7138+         dc ad(@LNAME1980)                                              02-DCCCA
                                                                                                                           Page  148 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004790                                    7139+         ds 0d                                                          02-DCCCA
00004790 0000000000004758                   7140+         dc ad($eye0148)                                                02-DCCCA
00004798 0000000000000000                   7141+         dc ad(0)                                                       02-DCCCA
000047A0                                    7142+         ds    0d                                                       01-DCCPR
000047A0                                    7143+rd_kafka_mock_partition_assign_replicas ds 0d                           01-DCCPR
000047A0                                    7144+@REGION_1980_1 ds 0h                                                    01-DCCPR
000047A0 EBEC D008 0024          00000008   7145+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000047A6 E3E0 D088 0004          00000088   7146+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000047AC E3C0 D090 0004          00000090   7147+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000047B2 B904 002E                          7148+         lgr   2,14                copy addr of our savearea            01-DCCPR
000047B6 E3B0 C018 0004          00000018   7149+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000047BC A7EB 00C0               000000C0   7150+         aghi  14,192              increase by frame size               01-DCCPR
000047C0 E3E0 C020 0021          00000020   7151+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000047C6 4720 B020               00000020   7152+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000047CA                                    7153+@PER_1980 ds   0h                                                       01-DCCPR
000047CA EBDE 2080 0024          00000080   7154+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000047D0 E3C0 2090 0024          00000090   7155+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000047D6 B904 00D2                          7156+         lgr   13,2                set real frame pointer               01-DCCPR
000047DA B904 00CF                          7157+         lgr   12,15               set base reg                         01-DCCPR
                        000047A0            7158+         using @REGION_1980_1,12                                        01-DCCPR
                                            7159 * ******* End of Prologue
                                            7160 * *
                                            7161 * ***           rd_kafka_mock_cluster_t *mcluster = mpart->topic->clus\
                                            7162 * ter;
000047DE E330 1000 0004          00000000   7163          LG    3,0(0,1)    ; mpart
000047E4 E3F0 3098 0004          00000098   7164          LG    15,152(0,3) ; offset of topic in rd_kafka_mock_partition*
                                                                _s
000047EA E340 F028 0004          00000028   7165          LG    4,40(0,15)  ; offset of cluster in rd_kafka_mock_topic_s
                                            7166 * ***           int replica_cnt = ((mcluster->defaults.replication_fac\
                                            7167 * tor) < (mcluster->broker_cnt) ? (mcluster->defaults.replication_fact\
                                            7168 * or) : (mcluster->broker_cnt));
000047F0 58F0 40EC               000000EC   7169          L     15,236(0,4) ; offset of replication_factor in 0000174
000047F4 59F0 4040               00000040   7170          C     15,64(0,4)
000047F8 47B0 C090               00004830   7171          BNL   @L742
000047FC 5850 40EC               000000EC   7172          L     5,236(0,4)  ; offset of replication_factor in 0000174
00004800 47F0 C094               00004834   7173          B     @L743
00004808                                    7174          DS    0D
00004808 000000C0                           7175 @FRAMESIZE_1980 DC F'192'
0000480C 00000000
00004810 0000000000000B78                   7176 @lit_1980_220 DC AD(rd_free)
00004818 0000000000000728                   7177 @lit_1980_221 DC AD(rd_calloc)
00004820 0000000000000000                   7178 @lit_1980_222 DC AD(rd_jitter)
00004828 0000000000004700                   7179 @lit_1980_223 DC AD(rd_kafka_mock_partition_set_leader0)
00004830                                    7180 @L742    DS    0H
00004830 5850 4040               00000040   7181          L     5,64(0,4)   ; offset of broker_cnt in rd_kafka_mock_clus*
                                                                ter_s
00004834                                    7182 @L743    DS    0H
                                            7183 * ***
                                            7184 * ***           rd_kafka_mock_broker_t *mrkb;
                                            7185 * ***           int i = 0;
00004834 A728 0000               00000000   7186          LHI   2,0         ; 0
                                            7187 * ***
                                                                                                                           Page  149 
  Active Usings: @REGION_1980_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7188 * ***           if (mpart->replicas)
00004838 E3F0 3088 0002          00000088   7189          LTG   15,136(0,3) ; offset of replicas in rd_kafka_mock_partit*
                                                                ion_s
0000483E 4780 C0BA               0000485A   7190          BZ    @L744
                                            7191 * ***                   rd_free(mpart->replicas);
00004842 E3F0 3088 0004          00000088   7192          LG    15,136(0,3)
00004848 E3F0 D0B0 0024          000000B0   7193          STG   15,176(0,13)
0000484E 4110 D0B0               000000B0   7194          LA    1,176(0,13)
00004852 E3F0 C070 0004          00004810   7195          LG    15,@lit_1980_220 ; rd_free
00004858                                    7196 @@gen_label335 DS    0H
00004858 05EF                               7197          BALR  14,15
0000485A                                    7198 @@gen_label336 DS    0H
0000485A                                    7199 @L744    DS    0H
                                            7200 * ***
                                            7201 * ***           mpart->replicas = rd_calloc(replica_cnt, sizeof(*mpart\
                                            7202 * ->replicas));
0000485A B914 00F5                          7203          LGFR  15,5
0000485E E3F0 D0B0 0024          000000B0   7204          STG   15,176(0,13)
00004864 E548 D0B8 0008          000000B8   7205          MVGHI 184(13),8
0000486A 4110 D0B0               000000B0   7206          LA    1,176(0,13)
0000486E E3F0 C078 0004          00004818   7207          LG    15,@lit_1980_221 ; rd_calloc
00004874                                    7208 @@gen_label337 DS    0H
00004874 05EF                               7209          BALR  14,15
00004876                                    7210 @@gen_label338 DS    0H
00004876 E3F0 3088 0024          00000088   7211          STG   15,136(0,3)
                                            7212 * ***           mpart->replica_cnt = replica_cnt;
0000487C 5050 3090               00000090   7213          ST    5,144(0,3)  ; offset of replica_cnt in rd_kafka_mock_par*
                                                                tition_s
                                            7214 * ***
                                            7215 * ***
                                            7216 * ***           for ((mrkb) = ((&mcluster->brokers)->tqh_first); (mrkb\
                                            7217 * ) != (((void *)0)); (mrkb) = ((mrkb)->link .tqe_next)) {
00004880 E3F0 4030 0004          00000030   7218          LG    15,48(0,4)  ; offset of brokers in rd_kafka_mock_cluster*
                                                                _s
00004886 47F0 C114               000048B4   7219          B     @L746
0000488A                                    7220 @L745    DS    0H
                                            7221 * ***                   if (i == mpart->replica_cnt)
0000488A 5920 3090               00000090   7222          C     2,144(0,3)
0000488E 4780 C11C               000048BC   7223          BE    @L747
                                            7224 * ***                           break;
00004892                                    7225 @L749    DS    0H
                                            7226 * ***                   mpart->replicas[i++] = mrkb;
00004892 E310 3088 0004          00000088   7227          LG    1,136(0,3)  ; offset of replicas in rd_kafka_mock_partit*
                                                                ion_s
00004898 1842                               7228          LR    4,2
0000489A A72A 0001               00000001   7229          AHI   2,1
0000489E B914 0044                          7230          LGFR  4,4
000048A2 EB44 0003 000D          00000003   7231          SLLG  4,4,3(0)    ; *0x8
000048A8 E3F4 1000 0024          00000000   7232          STG   15,0(4,1)
                                            7233 * ***           }
000048AE E3F0 F000 0004          00000000   7234          LG    15,0(0,15)  ; mrkb
000048B4                                    7235 @L746    DS    0H
                                                                                                                           Page  150 
  Active Usings: @REGION_1980_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000048B4 B902 001F                          7236          LTGR  1,15
000048B8 4770 C0EA               0000488A   7237          BNE   @L745
000048BC                                    7238 @L747    DS    0H
                                            7239 * ***
                                            7240 * ***
                                            7241 * ***           rd_kafka_mock_partition_set_leader0(
                                            7242 * ***                   mpart, mpart->replicas[rd_jitter(0, replica_cn\
                                            7243 * t-1)]);
000048BC E320 3088 0004          00000088   7244          LG    2,136(0,3)  ; offset of replicas in rd_kafka_mock_partit*
                                                                ion_s
000048C2 D707 D0B0 D0B0 000000B0 000000B0   7245          XC    176(8,13),176(13)
000048C8 A75A FFFF               0000FFFF   7246          AHI   5,-1
000048CC B914 00F5                          7247          LGFR  15,5
000048D0 E3F0 D0B8 0024          000000B8   7248          STG   15,184(0,13)
000048D6 4110 D0B0               000000B0   7249          LA    1,176(0,13)
000048DA E3F0 C080 0004          00004820   7250          LG    15,@lit_1980_222 ; rd_jitter
000048E0                                    7251 @@gen_label341 DS    0H
000048E0 05EF                               7252          BALR  14,15
000048E2                                    7253 @@gen_label342 DS    0H
000048E2 B914 00FF                          7254          LGFR  15,15
000048E6 EBFF 0003 000D          00000003   7255          SLLG  15,15,3(0)  ; *0x8
000048EC E3FF 2000 0004          00000000   7256          LG    15,0(15,2)
000048F2 E330 D0B0 0024          000000B0   7257          STG   3,176(0,13)
000048F8 E3F0 D0B8 0024          000000B8   7258          STG   15,184(0,13)
000048FE 4110 D0B0               000000B0   7259          LA    1,176(0,13)
00004902 E3F0 C088 0004          00004828   7260          LG    15,@lit_1980_223 ; rd_kafka_mock_partition_set_leader0
00004908                                    7261 @@gen_label343 DS    0H
00004908 05EF                               7262          BALR  14,15
0000490A                                    7263 @@gen_label344 DS    0H
                                            7264 * ***   }
0000490A                                    7265 @ret_lab_1980 DS 0H
                                            7266 * * **** Start of Epilogue
                                            7267          DCCEPIL
0000490A                                    7268+         ds 0h                                                          01-DCCEP
                                            7269+* Epilog
0000490A D707 D088 D088 00000088 00000088   7270+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00004910 E3D0 D080 0004          00000080   7271+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00004916 E3C0 D090 0004          00000090   7272+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000491C E3B0 C018 0004          00000018   7273+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00004922 E3C0 B010 0021          00000010   7274+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00004928 E3E0 D008 0004          00000008   7275+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000492E EB1C D020 0004          00000020   7276+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00004934 078E                               7277+         bcr 8,14                if same dsab, just return              01-DCCEP
00004936 E3F0 D010 0024          00000010   7278+         stg 15,16(0,13)         save return code                       01-DCCEP
0000493C E300 D018 0024          00000018   7279+         stg 0,24(0,13)          save more return code                  01-DCCEP
00004942 E3F0 D090 0004          00000090   7280+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00004948 E3F0 F018 0004          00000018   7281+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000494E 47F0 F040               00000040   7282+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            7283+* End of Epilog
                                            7284 * * **** End of Epilogue
                                            7285          DROP  12
                                            7286 *
                                                                                                                           Page  151 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7287 *   DSECT for automatic variables in "rd_kafka_mock_partition_assign_r
                                            7288 *           eplicas"
                                            7289 *      (FUNCTION #1980)
                                            7290 *
00000000                00000000 000000AC   7291 @AUTO#rd_kafka_mock_partition_assign_replicas DSECT
00000000                                    7292          DS    XL168
000000A8                                    7293 rd_kafka_mock_partition_assign_replicas#i#0 DS 1F ; i
000000AC                000000AC 000000A8   7294          ORG   @AUTO#rd_kafka_mock_partition_assign_replicas+168
000000A8                                    7295 rd_kafka_mock_partition_assign_replicas#replica_cnt#0 DS 1F ; replica_c*
                                                                nt
                                            7296 *
00004952                00000000 00010480   7297 @CODE    CSECT
                                            7298 *
                                            7299 *
                                            7300 *
                                            7301 * ....... start of rd_kafka_mock_committed_offset_destroy
00004952                                    7302 @LNAME1981 DS  0H
00004952 00000026                           7303          DC    X'00000026'
00004956 99846D9281869281                   7304          DC    C'rd_kafka_mock_committed_offset_d'
00004976 85A2A39996A8                       7305          DC    C'estroy'
0000497C 00                                 7306          DC    X'00'
                                            7307 rd_kafka_mock_committed_offset_destroy DCCPRLG CINDEX=1981,BASER=12,FRA*
                                                                ME=176,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1981
                                            7308          macro
                                            7309          dccextrn &m
                                            7310          gblc    &$dccext(1000)
                                            7311          gbla    &$dccexti
                                            7312          lcla    &i
                                            7313 &$dccext(&$dccexti+1) setc    '&m'
                                            7314 &i       seta    1
                                            7315 .loop    aif    (&i gt &$dccexti).around
                                            7316          aif    ('&$dccext(&i)' eq '&m').getout
                                            7317 &i       seta    &i+1
                                            7318          ago     .loop
                                            7319 .around  anop
                                            7320 &$dccexti seta &$dccexti+1
                                            7321          extrn  &m
                                            7322 .getout  anop
                                            7323          mend
00004980                                    7324+$eye0151    ds    0d                                                    02-DCCCA
00004980 C4C3C3                             7325+         dc cl3'DCC'                                                    02-DCCCA
00004983 01                                 7326+         dc xl1'01' format one                                          02-DCCCA
00004984 00000000                           7327+         dc a(0)                                                        02-DCCCA
00004988 00000000000049F2                   7328+         dc ad(@PER_1981)                                               02-DCCCA
00004990 00000000000000B0                   7329+         dc ad(176)                                                     02-DCCCA
00004998 0000000000000000                   7330+         dc ad(0)                                                       02-DCCCA
000049A0 0000000000001000                   7331+         dc ad(4096)                                                    02-DCCCA
000049A8 20                                 7332+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000049A9 03                                 7333+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000049AA 03                                 7334+         dc al1(3)                                                      02-DCCCA
000049AB 08                                 7335+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000049AC 00                                 7336+         dc bl.8'00000000'                                              02-DCCCA
                                                                                                                           Page  152 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000049AD 000000                             7337+         dc al3(0)                                                      02-DCCCA
000049B0 0000000000004952                   7338+         dc ad(@LNAME1981)                                              02-DCCCA
000049B8                                    7339+         ds 0d                                                          02-DCCCA
000049B8 0000000000004980                   7340+         dc ad($eye0151)                                                02-DCCCA
000049C0 0000000000000000                   7341+         dc ad(0)                                                       02-DCCCA
000049C8                                    7342+         ds    0d                                                       01-DCCPR
000049C8                                    7343+rd_kafka_mock_committed_offset_destroy ds 0d                            01-DCCPR
000049C8                                    7344+@REGION_1981_1 ds 0h                                                    01-DCCPR
000049C8 EBEC D008 0024          00000008   7345+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000049CE E3E0 D088 0004          00000088   7346+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000049D4 E3C0 D090 0004          00000090   7347+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000049DA B904 002E                          7348+         lgr   2,14                copy addr of our savearea            01-DCCPR
000049DE E3B0 C018 0004          00000018   7349+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000049E4 A7EB 00B0               000000B0   7350+         aghi  14,176              increase by frame size               01-DCCPR
000049E8 E3E0 C020 0021          00000020   7351+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000049EE 4720 B020               00000020   7352+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000049F2                                    7353+@PER_1981 ds   0h                                                       01-DCCPR
000049F2 EBDE 2080 0024          00000080   7354+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000049F8 E3C0 2090 0024          00000090   7355+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000049FE B904 00D2                          7356+         lgr   13,2                set real frame pointer               01-DCCPR
00004A02 B904 00CF                          7357+         lgr   12,15               set base reg                         01-DCCPR
                        000049C8            7358+         using @REGION_1981_1,12                                        01-DCCPR
00004A06 B904 0031                          7359          LGR   3,1         ; ptr to parm area
                                            7360 * ******* End of Prologue
                                            7361 * *
                                            7362 * ***           rd_kafkap_str_destroy(coff->metadata);
00004A0A E320 3008 0004          00000008   7363          LG    2,8(0,3)    ; coff
00004A10 E3F0 2020 0004          00000020   7364          LG    15,32(0,2)
00004A16 E3F0 D0A8 0024          000000A8   7365          STG   15,168(0,13)
00004A1C 4110 D0A8               000000A8   7366          LA    1,168(0,13)
00004A20 E3F0 C088 0004          00004A50   7367          LG    15,@lit_1981_225 ; rd_kafkap_str_destroy
00004A26                                    7368 @@gen_label345 DS    0H
00004A26 05EF                               7369          BALR  14,15
00004A28                                    7370 @@gen_label346 DS    0H
                                            7371 * ***           do {   if (((coff)->link .tqe_next) != (((void *)0))) \
                                            7372 * (coff)->link .tqe_next->link .tqe_prev = (coff)->link .tqe_prev; els\
                                            7373 * e (&mpart->committed_offsets)->tqh_last = (coff)->link .tqe_prev; *(\
                                            7374 * coff)->link .tqe_prev = (coff)->link .tqe_next; ; } while ( 0);
00004A28                                    7375 @L750    DS    0H
00004A28 E3F0 2000 0002          00000000   7376          LTG   15,0(0,2)   ; coff
00004A2E 4780 C098               00004A60   7377          BE    @L753
00004A32 E3F0 2000 0004          00000000   7378          LG    15,0(0,2)   ; coff
00004A38 E310 2008 0004          00000008   7379          LG    1,8(0,2)    ; offset of tqe_prev in 0000164
00004A3E E310 F008 0024          00000008   7380          STG   1,8(0,15)   ; offset of tqe_prev in 0000164
00004A44 47F0 C0AA               00004A72   7381          B     @L754
00004A48                                    7382          DS    0D
00004A48 000000B0                           7383 @FRAMESIZE_1981 DC F'176'
00004A4C 00000000
00004A50 00000000000014B0                   7384 @lit_1981_225 DC AD(rd_kafkap_str_destroy)
00004A58 0000000000000B78                   7385 @lit_1981_226 DC AD(rd_free)
00004A60                                    7386 @L753    DS    0H
00004A60 E3F0 3000 0004          00000000   7387          LG    15,0(0,3)   ; mpart
                                                                                                                           Page  153 
  Active Usings: @REGION_1981_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004A66 E310 2008 0004          00000008   7388          LG    1,8(0,2)    ; offset of tqe_prev in 0000164
00004A6C E310 F078 0024          00000078   7389          STG   1,120(0,15) ; offset of tqh_last in 0000167
00004A72                                    7390 @L754    DS    0H
00004A72 E3F0 2008 0004          00000008   7391          LG    15,8(0,2)   ; offset of tqe_prev in 0000164
00004A78 E310 2000 0004          00000000   7392          LG    1,0(0,2)    ; coff
00004A7E E310 F000 0024          00000000   7393          STG   1,0(0,15)
                                            7394 * ***           rd_free(coff);
00004A84 E320 D0A8 0024          000000A8   7395          STG   2,168(0,13)
00004A8A 4110 D0A8               000000A8   7396          LA    1,168(0,13)
00004A8E E3F0 C090 0004          00004A58   7397          LG    15,@lit_1981_226 ; rd_free
00004A94                                    7398 @@gen_label348 DS    0H
00004A94 05EF                               7399          BALR  14,15
00004A96                                    7400 @@gen_label349 DS    0H
                                            7401 * ***   }
00004A96                                    7402 @ret_lab_1981 DS 0H
                                            7403 * * **** Start of Epilogue
                                            7404          DCCEPIL
00004A96                                    7405+         ds 0h                                                          01-DCCEP
                                            7406+* Epilog
00004A96 D707 D088 D088 00000088 00000088   7407+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00004A9C E3D0 D080 0004          00000080   7408+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00004AA2 E3C0 D090 0004          00000090   7409+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00004AA8 E3B0 C018 0004          00000018   7410+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00004AAE E3C0 B010 0021          00000010   7411+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00004AB4 E3E0 D008 0004          00000008   7412+         lg  14,8(0,13)          load up return address                 01-DCCEP
00004ABA EB1C D020 0004          00000020   7413+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00004AC0 078E                               7414+         bcr 8,14                if same dsab, just return              01-DCCEP
00004AC2 E3F0 D010 0024          00000010   7415+         stg 15,16(0,13)         save return code                       01-DCCEP
00004AC8 E300 D018 0024          00000018   7416+         stg 0,24(0,13)          save more return code                  01-DCCEP
00004ACE E3F0 D090 0004          00000090   7417+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00004AD4 E3F0 F018 0004          00000018   7418+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00004ADA 47F0 F040               00000040   7419+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            7420+* End of Epilog
                                            7421 * * **** End of Epilogue
                                            7422          DROP  12
                                            7423 *
                                            7424 *   DSECT for automatic variables in "rd_kafka_mock_committed_offset_d
                                            7425 *           estroy"
                                            7426 *      (FUNCTION #1981)
                                            7427 *
00000000                00000000 000000A8   7428 @AUTO#rd_kafka_mock_committed_offset_destroy DSECT
00000000                                    7429          DS    XL168
                                            7430 *
00004ADE                00000000 00010480   7431 @CODE    CSECT
                                            7432 *
                                            7433 *
                                            7434 *
                                            7435 * ....... start of rd_kafka_mock_committed_offset_find
                                            7436 rd_kafka_mock_committed_offset_find ALIAS X'99846D92818692816D949683926*
                                                                D8396949489A3A385846D968686A285A36D86899584'
00004ADE                                    7437 @LNAME1945 DS  0H
00004ADE 00000023                           7438          DC    X'00000023'
                                                                                                                           Page  154 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004AE2 99846D9281869281                   7439          DC    C'rd_kafka_mock_committed_offset_f'
00004B02 899584                             7440          DC    C'ind'
00004B05 00                                 7441          DC    X'00'
                                            7442 rd_kafka_mock_committed_offset_find DCCPRLG CINDEX=1945,BASER=12,FRAME=*
                                                                192,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1945
                                            7443          macro
                                            7444          dccextrn &m
                                            7445          gblc    &$dccext(1000)
                                            7446          gbla    &$dccexti
                                            7447          lcla    &i
                                            7448 &$dccext(&$dccexti+1) setc    '&m'
                                            7449 &i       seta    1
                                            7450 .loop    aif    (&i gt &$dccexti).around
                                            7451          aif    ('&$dccext(&i)' eq '&m').getout
                                            7452 &i       seta    &i+1
                                            7453          ago     .loop
                                            7454 .around  anop
                                            7455 &$dccexti seta &$dccexti+1
                                            7456          extrn  &m
                                            7457 .getout  anop
                                            7458          mend
00004B08                                    7459+$eye0154    ds    0d                                                    02-DCCCA
00004B08 C4C3C3                             7460+         dc cl3'DCC'                                                    02-DCCCA
00004B0B 01                                 7461+         dc xl1'01' format one                                          02-DCCCA
00004B0C 00000000                           7462+         dc a(0)                                                        02-DCCCA
00004B10 0000000000004B7A                   7463+         dc ad(@PER_1945)                                               02-DCCCA
00004B18 00000000000000C0                   7464+         dc ad(192)                                                     02-DCCCA
00004B20 0000000000000000                   7465+         dc ad(0)                                                       02-DCCCA
00004B28 0000000000001000                   7466+         dc ad(4096)                                                    02-DCCCA
00004B30 20                                 7467+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00004B31 03                                 7468+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00004B32 03                                 7469+         dc al1(3)                                                      02-DCCCA
00004B33 08                                 7470+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00004B34 00                                 7471+         dc bl.8'00000000'                                              02-DCCCA
00004B35 000000                             7472+         dc al3(0)                                                      02-DCCCA
00004B38 0000000000004ADE                   7473+         dc ad(@LNAME1945)                                              02-DCCCA
00004B40                                    7474+         ds 0d                                                          02-DCCCA
00004B40 0000000000004B08                   7475+         dc ad($eye0154)                                                02-DCCCA
00004B48 0000000000000000                   7476+         dc ad(0)                                                       02-DCCCA
00004B50                                    7477+         ds    0d                                                       01-DCCPR
                                            7478+         entry rd_kafka_mock_committed_offset_find                      01-DCCPR
00004B50                                    7479+rd_kafka_mock_committed_offset_find ds 0d                               01-DCCPR
00004B50                                    7480+@REGION_1945_1 ds 0h                                                    01-DCCPR
00004B50 EBEC D008 0024          00000008   7481+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00004B56 E3E0 D088 0004          00000088   7482+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00004B5C E3C0 D090 0004          00000090   7483+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00004B62 B904 002E                          7484+         lgr   2,14                copy addr of our savearea            01-DCCPR
00004B66 E3B0 C018 0004          00000018   7485+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00004B6C A7EB 00C0               000000C0   7486+         aghi  14,192              increase by frame size               01-DCCPR
00004B70 E3E0 C020 0021          00000020   7487+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00004B76 4720 B020               00000020   7488+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00004B7A                                    7489+@PER_1945 ds   0h                                                       01-DCCPR
                                                                                                                           Page  155 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004B7A EBDE 2080 0024          00000080   7490+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00004B80 E3C0 2090 0024          00000090   7491+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00004B86 B904 00D2                          7492+         lgr   13,2                set real frame pointer               01-DCCPR
00004B8A B904 00CF                          7493+         lgr   12,15               set base reg                         01-DCCPR
                        00004B50            7494+         using @REGION_1945_1,12                                        01-DCCPR
00004B8E B904 0031                          7495          LGR   3,1         ; ptr to parm area
                                            7496 * ******* End of Prologue
                                            7497 * *
                                            7498 * ***           const rd_kafka_mock_committed_offset_t *coff;
                                            7499 * ***
                                            7500 * ***           for ((coff) = ((&mpart->committed_offsets)->tqh_first)\
                                            7501 * ; (coff) != (((void *)0)); (coff) = ((coff)->link .tqe_next)) {
00004B92 E3F0 3000 0004          00000000   7502          LG    15,0(0,3)   ; mpart
00004B98 E320 F070 0004          00000070   7503          LG    2,112(0,15) ; offset of committed_offsets in rd_kafka_mo*
                                                                ck_partition_s
00004B9E 47F0 C0A0               00004BF0   7504          B     @L756
00004BA8                                    7505          DS    0D
00004BA8 000000C0                           7506 @FRAMESIZE_1945 DC F'192'
00004BAC 00000000
00004BB0 00000000000018D0                   7507 @lit_1945_228 DC AD(rd_kafkap_str_cmp_str)
00004BB8                                    7508 @L755    DS    0H
                                            7509 * ***                   if (!rd_kafkap_str_cmp_str(group, coff->group)\
                                            7510 * )
00004BB8 E3F0 3008 0004          00000008   7511          LG    15,8(0,3)   ; group
00004BBE E3F0 D0B0 0024          000000B0   7512          STG   15,176(0,13)
00004BC4 E3F0 2010 0004          00000010   7513          LG    15,16(0,2)
00004BCA E3F0 D0B8 0024          000000B8   7514          STG   15,184(0,13)
00004BD0 4110 D0B0               000000B0   7515          LA    1,176(0,13)
00004BD4 E3F0 C060 0004          00004BB0   7516          LG    15,@lit_1945_228 ; rd_kafkap_str_cmp_str
00004BDA                                    7517 @@gen_label350 DS    0H
00004BDA 05EF                               7518          BALR  14,15
00004BDC                                    7519 @@gen_label351 DS    0H
00004BDC 12FF                               7520          LTR   15,15
00004BDE 4770 C09A               00004BEA   7521          BNZ   @L759
                                            7522 * ***                           return (rd_kafka_mock_committed_offset\
                                            7523 * _t *)coff;
00004BE2 B904 00F2                          7524          LGR   15,2
00004BE6 47F0 C0AC               00004BFC   7525          B     @ret_lab_1945
00004BEA                                    7526 @L759    DS    0H
                                            7527 * ***           }
00004BEA E320 2000 0004          00000000   7528          LG    2,0(0,2)    ; coff
00004BF0                                    7529 @L756    DS    0H
00004BF0 B902 00F2                          7530          LTGR  15,2
00004BF4 4770 C068               00004BB8   7531          BNE   @L755
                                            7532 * ***
                                            7533 * ***           return ((void *)0);
00004BF8 A7F9 0000               00000000   7534          LGHI  15,0        ; 0
                                            7535 * ***   }
00004BFC                                    7536 @ret_lab_1945 DS 0H
                                            7537 * * **** Start of Epilogue
                                            7538          DCCEPIL
00004BFC                                    7539+         ds 0h                                                          01-DCCEP
                                                                                                                           Page  156 
  Active Usings: @REGION_1945_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7540+* Epilog
00004BFC D707 D088 D088 00000088 00000088   7541+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00004C02 E3D0 D080 0004          00000080   7542+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00004C08 E3C0 D090 0004          00000090   7543+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00004C0E E3B0 C018 0004          00000018   7544+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00004C14 E3C0 B010 0021          00000010   7545+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00004C1A E3E0 D008 0004          00000008   7546+         lg  14,8(0,13)          load up return address                 01-DCCEP
00004C20 EB1C D020 0004          00000020   7547+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00004C26 078E                               7548+         bcr 8,14                if same dsab, just return              01-DCCEP
00004C28 E3F0 D010 0024          00000010   7549+         stg 15,16(0,13)         save return code                       01-DCCEP
00004C2E E300 D018 0024          00000018   7550+         stg 0,24(0,13)          save more return code                  01-DCCEP
00004C34 E3F0 D090 0004          00000090   7551+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00004C3A E3F0 F018 0004          00000018   7552+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00004C40 47F0 F040               00000040   7553+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            7554+* End of Epilog
                                            7555 * * **** End of Epilogue
                                            7556          DROP  12
                                            7557 *
                                            7558 *   DSECT for automatic variables in "rd_kafka_mock_committed_offset_f
                                            7559 *           ind"
                                            7560 *      (FUNCTION #1945)
                                            7561 *
00000000                00000000 000000A8   7562 @AUTO#rd_kafka_mock_committed_offset_find DSECT
00000000                                    7563          DS    XL168
                                            7564 *
00004C44                00000000 00010480   7565 @CODE    CSECT
                                            7566 *
                                            7567 *
                                            7568 *
                                            7569 * ....... start of rd_kafka_mock_commit_offset
                                            7570 rd_kafka_mock_commit_offset ALIAS X'99846D92818692816D949683926D8396949*
                                                                489A36D968686A285A3'
00004C44                                    7571 @LNAME1946 DS  0H
00004C44 0000001B                           7572          DC    X'0000001B'
00004C48 99846D9281869281                   7573          DC    C'rd_kafka_mock_commit_offset'
00004C63 00                                 7574          DC    X'00'
                                            7575 rd_kafka_mock_commit_offset DCCPRLG CINDEX=1946,BASER=12,FRAME=272,ENTR*
                                                                Y=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1946
                                            7576          macro
                                            7577          dccextrn &m
                                            7578          gblc    &$dccext(1000)
                                            7579          gbla    &$dccexti
                                            7580          lcla    &i
                                            7581 &$dccext(&$dccexti+1) setc    '&m'
                                            7582 &i       seta    1
                                            7583 .loop    aif    (&i gt &$dccexti).around
                                            7584          aif    ('&$dccext(&i)' eq '&m').getout
                                            7585 &i       seta    &i+1
                                            7586          ago     .loop
                                            7587 .around  anop
                                            7588 &$dccexti seta &$dccexti+1
                                            7589          extrn  &m
                                                                                                                           Page  157 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7590 .getout  anop
                                            7591          mend
00004C68                                    7592+$eye0157    ds    0d                                                    02-DCCCA
00004C68 C4C3C3                             7593+         dc cl3'DCC'                                                    02-DCCCA
00004C6B 01                                 7594+         dc xl1'01' format one                                          02-DCCCA
00004C6C 00000000                           7595+         dc a(0)                                                        02-DCCCA
00004C70 0000000000004CDA                   7596+         dc ad(@PER_1946)                                               02-DCCCA
00004C78 0000000000000110                   7597+         dc ad(272)                                                     02-DCCCA
00004C80 0000000000000000                   7598+         dc ad(0)                                                       02-DCCCA
00004C88 0000000000001000                   7599+         dc ad(4096)                                                    02-DCCCA
00004C90 20                                 7600+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00004C91 03                                 7601+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00004C92 03                                 7602+         dc al1(3)                                                      02-DCCCA
00004C93 08                                 7603+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00004C94 00                                 7604+         dc bl.8'00000000'                                              02-DCCCA
00004C95 000000                             7605+         dc al3(0)                                                      02-DCCCA
00004C98 0000000000004C44                   7606+         dc ad(@LNAME1946)                                              02-DCCCA
00004CA0                                    7607+         ds 0d                                                          02-DCCCA
00004CA0 0000000000004C68                   7608+         dc ad($eye0157)                                                02-DCCCA
00004CA8 0000000000000000                   7609+         dc ad(0)                                                       02-DCCCA
00004CB0                                    7610+         ds    0d                                                       01-DCCPR
                                            7611+         entry rd_kafka_mock_commit_offset                              01-DCCPR
00004CB0                                    7612+rd_kafka_mock_commit_offset ds 0d                                       01-DCCPR
00004CB0                                    7613+@REGION_1946_1 ds 0h                                                    01-DCCPR
00004CB0 EBEC D008 0024          00000008   7614+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00004CB6 E3E0 D088 0004          00000088   7615+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00004CBC E3C0 D090 0004          00000090   7616+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00004CC2 B904 002E                          7617+         lgr   2,14                copy addr of our savearea            01-DCCPR
00004CC6 E3B0 C018 0004          00000018   7618+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00004CCC A7EB 0110               00000110   7619+         aghi  14,272              increase by frame size               01-DCCPR
00004CD0 E3E0 C020 0021          00000020   7620+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00004CD6 4720 B020               00000020   7621+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00004CDA                                    7622+@PER_1946 ds   0h                                                       01-DCCPR
00004CDA EBDE 2080 0024          00000080   7623+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00004CE0 E3C0 2090 0024          00000090   7624+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00004CE6 B904 00D2                          7625+         lgr   13,2                set real frame pointer               01-DCCPR
00004CEA B904 00CF                          7626+         lgr   12,15               set base reg                         01-DCCPR
                        00004CB0            7627+         using @REGION_1946_1,12                                        01-DCCPR
00004CEE B904 0061                          7628          LGR   6,1         ; ptr to parm area
                                            7629 * ******* End of Prologue
                                            7630 * *
00004CF2 EB34 6000 0004          00000000   7631          LMG   3,4,0(6)    ; mpart
                                            7632 * ***           rd_kafka_mock_committed_offset_t *coff;
                                            7633 * ***
                                            7634 * ***           if (!(coff = rd_kafka_mock_committed_offset_find(mpart\
                                            7635 * , group))) {
00004CF8 EB34 D0B0 0024          000000B0   7636          STMG  3,4,176(13)
00004CFE 4110 D0B0               000000B0   7637          LA    1,176(0,13)
00004D02 E3F0 C080 0004          00004D30   7638          LG    15,@lit_1946_231 ; rd_kafka_mock_committed_offset_find
00004D08                                    7639 @@gen_label354 DS    0H
00004D08 05EF                               7640          BALR  14,15
00004D0A                                    7641 @@gen_label355 DS    0H
                                                                                                                           Page  158 
  Active Usings: @REGION_1946_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004D0A B902 002F                          7642          LTGR  2,15        ; coff
00004D0E 4770 C17C               00004E2C   7643          BNZ   @L760
                                            7644 * ***                   size_t slen = (size_t)(((group)->len) == -1 ? \
                                            7645 * 0 : ((group)->len));
00004D12 E55C 4000 FFFF          00000000   7646          CHSI  0(4),-1
00004D18 4770 C0B8               00004D68   7647          BNE   @L761
00004D1C A7F8 0000               00000000   7648          LHI   15,0        ; 0
00004D20 47F0 C0BC               00004D6C   7649          B     @L762
00004D28                                    7650          DS    0D
00004D28 00000110                           7651 @FRAMESIZE_1946 DC F'272'
00004D2C 00000000
00004D30 0000000000004B50                   7652 @lit_1946_231 DC AD(rd_kafka_mock_committed_offset_find)
00004D38 0000000000000898                   7653 @lit_1946_233 DC AD(rd_malloc)
00004D40 D200 7000 1000 00000000 00000000   7654 @lit_1946_234          MVC 0(1,7),0(1)
00004D46 0000
00004D48 00000000000014B0                   7655 @lit_1946_236 DC AD(rd_kafkap_str_destroy)
00004D50 00000000000017A8                   7656 @lit_1946_237 DC AD(rd_kafkap_str_copy)
00004D58 0000000000000000                   7657 @lit_1946_241 DC AD(rd_kafka_log0)
00004D60 0000000000010840                   7658 @lit_1946_240 DC AD(@strings@)
00004D68                                    7659 @L761    DS    0H
00004D68 58F0 4000               00000000   7660          L     15,0(0,4)   ; group
00004D6C                                    7661 @L762    DS    0H
00004D6C B914 005F                          7662          LGFR  5,15
                                            7663 * ***
                                            7664 * ***                   coff = rd_malloc(sizeof(*coff) + slen + 1);
00004D70 B904 00F5                          7665          LGR   15,5
00004D74 A7FB 0028               00000028   7666          AGHI  15,40
00004D78 A7FB 0001               00000001   7667          AGHI  15,1
00004D7C E3F0 D0B0 0024          000000B0   7668          STG   15,176(0,13)
00004D82 4110 D0B0               000000B0   7669          LA    1,176(0,13)
00004D86 E3F0 C088 0004          00004D38   7670          LG    15,@lit_1946_233 ; rd_malloc
00004D8C                                    7671 @@gen_label358 DS    0H
00004D8C 05EF                               7672          BALR  14,15
00004D8E                                    7673 @@gen_label359 DS    0H
00004D8E B904 002F                          7674          LGR   2,15        ; coff
                                            7675 * ***
                                            7676 * ***                   coff->group = (char *)(coff + 1);
00004D92 4110 F028               00000028   7677          LA    1,40(0,15)
00004D96 E310 F010 0024          00000010   7678          STG   1,16(0,15)  ; offset of group in rd_kafka_mock_committed*
                                                                _offset_s
                                            7679 * ***                   __memcpy(coff->group,group->str,slen);
00004D9C E310 4008 0004          00000008   7680          LG    1,8(0,4)
00004DA2 E370 F010 0004          00000010   7681          LG    7,16(0,15)
00004DA8 B902 00F5                          7682          LTGR  15,5
00004DAC 4780 C12A               00004DDA   7683          BZ    @@gen_label362
00004DB0 A7FB FFFF               0000FFFF   7684          AGHI  15,-1
00004DB4 EB8F 0008 000A          00000008   7685          SRAG  8,15,8(0)
00004DBA B902 0088                          7686          LTGR  8,8
00004DBE 4780 C126               00004DD6   7687          BZ    @@gen_label361
00004DC2                                    7688 @@gen_label360 DS 0H
00004DC2 D2FF 7000 1000 00000000 00000000   7689          MVC   0(256,7),0(1)
00004DC8 4170 7100               00000100   7690          LA    7,256(0,7)
                                                                                                                           Page  159 
  Active Usings: @REGION_1946_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004DCC 4110 1100               00000100   7691          LA    1,256(0,1)
00004DD0 E380 C112 0046          00004DC2   7692          BCTG  8,@@gen_label360
00004DD6                                    7693 @@gen_label361 DS 0H
00004DD6 44F0 C090               00004D40   7694          EX    15,@lit_1946_234
00004DDA                                    7695 @@gen_label362 DS 0H
                                            7696 * ***                   coff->group[slen] = '\0';
00004DDA E3F0 2010 0004          00000010   7697          LG    15,16(0,2)  ; offset of group in rd_kafka_mock_committed*
                                                                _offset_s
00004DE0 41F5 F000               00000000   7698          LA    15,0(5,15)
00004DE4 9200 F000      00000000 00000000   7699          MVI   0(15),0
                                            7700 * ***
                                            7701 * ***                   coff->metadata = ((void *)0);
00004DE8 A7F9 0000               00000000   7702          LGHI  15,0        ; 0
00004DEC E3F0 2020 0024          00000020   7703          STG   15,32(0,2)  ; offset of metadata in rd_kafka_mock_commit*
                                                                ted_offset_s
                                            7704 * ***
                                            7705 * ***                   do {  if (((coff)->link .tqe_next = (&mpart->c\
                                            7706 * ommitted_offsets)->tqh_first) != (((void *)0))) (&mpart->committed_o\
                                            7707 * ffsets)->tqh_first->link .tqe_prev = &(coff)->link .tqe_next; else (\
                                            7708 * &mpart->committed_offsets)->tqh_last = &(coff)->link .tqe_next; (&mp\
                                            7709 * art->committed_offsets)->tqh_first = (coff); (coff)->link .tqe_prev \
                                            7710 * = &(&mpart->committed_offsets)->tqh_first; } while ( 0);
00004DF2                                    7711 @L763    DS    0H
00004DF2 E3F0 3070 0004          00000070   7712          LG    15,112(0,3) ; offset of committed_offsets in rd_kafka_mo*
                                                                ck_partition_s
00004DF8 E3F0 2000 0024          00000000   7713          STG   15,0(0,2)
00004DFE B902 00FF                          7714          LTGR  15,15
00004E02 4780 C166               00004E16   7715          BE    @L766
00004E06 E3F0 3070 0004          00000070   7716          LG    15,112(0,3) ; offset of committed_offsets in rd_kafka_mo*
                                                                ck_partition_s
00004E0C E320 F008 0024          00000008   7717          STG   2,8(0,15)   ; offset of tqe_prev in 0000164
00004E12 47F0 C16C               00004E1C   7718          B     @L767
00004E16                                    7719 @L766    DS    0H
00004E16 E320 3078 0024          00000078   7720          STG   2,120(0,3)  ; offset of tqh_last in 0000167
00004E1C                                    7721 @L767    DS    0H
00004E1C E320 3070 0024          00000070   7722          STG   2,112(0,3)  ; offset of committed_offsets in rd_kafka_mo*
                                                                ck_partition_s
00004E22 41F0 3070               00000070   7723          LA    15,112(0,3)
00004E26 E3F0 2008 0024          00000008   7724          STG   15,8(0,2)   ; offset of tqe_prev in 0000164
                                            7725 * ***           }
00004E2C                                    7726 @L760    DS    0H
                                            7727 * ***
                                            7728 * ***           if (coff->metadata)
00004E2C E3F0 2020 0002          00000020   7729          LTG   15,32(0,2)  ; offset of metadata in rd_kafka_mock_commit*
                                                                ted_offset_s
00004E32 4780 C19E               00004E4E   7730          BZ    @L768
                                            7731 * ***                   rd_kafkap_str_destroy(coff->metadata);
00004E36 E3F0 2020 0004          00000020   7732          LG    15,32(0,2)
00004E3C E3F0 D0B0 0024          000000B0   7733          STG   15,176(0,13)
00004E42 4110 D0B0               000000B0   7734          LA    1,176(0,13)
00004E46 E3F0 C098 0004          00004D48   7735          LG    15,@lit_1946_236 ; rd_kafkap_str_destroy
00004E4C                                    7736 @@gen_label365 DS    0H
                                                                                                                           Page  160 
  Active Usings: @REGION_1946_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004E4C 05EF                               7737          BALR  14,15
00004E4E                                    7738 @@gen_label366 DS    0H
00004E4E                                    7739 @L768    DS    0H
                                            7740 * ***
                                            7741 * ***           coff->metadata = rd_kafkap_str_copy(metadata);
00004E4E E3F0 6018 0004          00000018   7742          LG    15,24(0,6)  ; metadata
00004E54 E3F0 D0B0 0024          000000B0   7743          STG   15,176(0,13)
00004E5A 4110 D0B0               000000B0   7744          LA    1,176(0,13)
00004E5E E3F0 C0A0 0004          00004D50   7745          LG    15,@lit_1946_237 ; rd_kafkap_str_copy
00004E64                                    7746 @@gen_label367 DS    0H
00004E64 05EF                               7747          BALR  14,15
00004E66                                    7748 @@gen_label368 DS    0H
00004E66 E3F0 2020 0024          00000020   7749          STG   15,32(0,2)
                                            7750 * ***
                                            7751 * ***           coff->offset = offset;
00004E6C E3F0 6010 0004          00000010   7752          LG    15,16(0,6)  ; offset
00004E72 E3F0 2018 0024          00000018   7753          STG   15,24(0,2)  ; offset of offset in rd_kafka_mock_committe*
                                                                d_offset_s
                                            7754 * ***
                                            7755 * ***           do { if ((((mpart->topic->cluster->rk)->rk_conf.debug \
                                            7756 * & (0x10000)))) rd_kafka_log0(&mpart->topic->cluster->rk->rk_conf,mpa\
                                            7757 * rt->topic->cluster->rk,((void *)0), 7,(0x10000), "MOCK","Topic %s [%\
                                            7758 * " "d" "] committing offset %" "lld" " for group %.*s", mpart->topic-\
                                            7759 * >name, mpart->id, offset, (int)((group)->len == -1 ? 0 : (group)->le\
                                            7760 * n), (group)->str); } while (0);
00004E78                                    7761 @L769    DS    0H
00004E78 E3F0 3098 0004          00000098   7762          LG    15,152(0,3) ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00004E7E E3F0 F028 0004          00000028   7763          LG    15,40(0,15) ; offset of cluster in rd_kafka_mock_topic_s
00004E84 E3F0 F020 0004          00000020   7764          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
00004E8A 9101 F321      00000321 00000001   7765          TM    801(15),1
00004E8E 4780 C2AA               00004F5A   7766          BZ    @L772
00004E92 E55C 4000 FFFF          00000000   7767          CHSI  0(4),-1
00004E98 4770 C1F4               00004EA4   7768          BNE   @L773
00004E9C A7F8 0000               00000000   7769          LHI   15,0        ; 0
00004EA0 47F0 C1F8               00004EA8   7770          B     @L774
00004EA4                                    7771 @L773    DS    0H
00004EA4 58F0 4000               00000000   7772          L     15,0(0,4)   ; group
00004EA8                                    7773 @L774    DS    0H
00004EA8 E310 3098 0004          00000098   7774          LG    1,152(0,3)  ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00004EAE E310 1028 0004          00000028   7775          LG    1,40(0,1)   ; offset of cluster in rd_kafka_mock_topic_s
00004EB4 E310 1020 0004          00000020   7776          LG    1,32(0,1)   ; offset of rk in rd_kafka_mock_cluster_s
00004EBA 4110 1210               00000210   7777          LA    1,528(0,1)
00004EBE E310 D0B0 0024          000000B0   7778          STG   1,176(0,13)
00004EC4 E310 3098 0004          00000098   7779          LG    1,152(0,3)  ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00004ECA E310 1028 0004          00000028   7780          LG    1,40(0,1)   ; offset of cluster in rd_kafka_mock_topic_s
00004ED0 E310 1020 0004          00000020   7781          LG    1,32(0,1)
00004ED6 E310 D0B8 0024          000000B8   7782          STG   1,184(0,13)
00004EDC D707 D0C0 D0C0 000000C0 000000C0   7783          XC    192(8,13),192(13)
00004EE2 E548 D0C8 0007          000000C8   7784          MVGHI 200(13),7
                                                                                                                           Page  161 
  Active Usings: @REGION_1946_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00004EE8 C01F 0001 0000                     7785          LLILF 1,X'00010000' ; 65536
00004EEE E310 D0D0 0024          000000D0   7786          STG   1,208(0,13)
00004EF4 E310 C0B0 0004          00004D60   7787          LG    1,@lit_1946_240
00004EFA 4150 115E               0000015E   7788          LA    5,350(0,1)
00004EFE E350 D0D8 0024          000000D8   7789          STG   5,216(0,13)
00004F04 4110 1290               00000290   7790          LA    1,656(0,1)
00004F08 E310 D0E0 0024          000000E0   7791          STG   1,224(0,13)
00004F0E E310 3098 0004          00000098   7792          LG    1,152(0,3)  ; offset of topic in rd_kafka_mock_partition*
                                                                _s
00004F14 E310 1010 0004          00000010   7793          LG    1,16(0,1)
00004F1A E310 D0E8 0024          000000E8   7794          STG   1,232(0,13)
00004F20 E310 3010 0014          00000010   7795          LGF   1,16(0,3)
00004F26 E310 D0F0 0024          000000F0   7796          STG   1,240(0,13)
00004F2C E310 6010 0004          00000010   7797          LG    1,16(0,6)   ; offset
00004F32 E310 D0F8 0024          000000F8   7798          STG   1,248(0,13)
00004F38 B914 00FF                          7799          LGFR  15,15
00004F3C E3F0 D100 0024          00000100   7800          STG   15,256(0,13)
00004F42 E3F0 4008 0004          00000008   7801          LG    15,8(0,4)
00004F48 E3F0 D108 0024          00000108   7802          STG   15,264(0,13)
00004F4E 4110 D0B0               000000B0   7803          LA    1,176(0,13)
00004F52 E3F0 C0A8 0004          00004D58   7804          LG    15,@lit_1946_241 ; rd_kafka_log0
00004F58                                    7805 @@gen_label371 DS    0H
00004F58 05EF                               7806          BALR  14,15
00004F5A                                    7807 @@gen_label372 DS    0H
00004F5A                                    7808 @L772    DS    0H
                                            7809 * ***
                                            7810 * ***
                                            7811 * ***
                                            7812 * ***
                                            7813 * ***
                                            7814 * ***           return coff;
00004F5A B904 00F2                          7815          LGR   15,2
                                            7816 * ***   }
                                            7817 * * **** Start of Epilogue
                                            7818          DCCEPIL
00004F5E                                    7819+         ds 0h                                                          01-DCCEP
                                            7820+* Epilog
00004F5E D707 D088 D088 00000088 00000088   7821+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00004F64 E3D0 D080 0004          00000080   7822+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00004F6A E3C0 D090 0004          00000090   7823+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00004F70 E3B0 C018 0004          00000018   7824+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00004F76 E3C0 B010 0021          00000010   7825+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00004F7C E3E0 D008 0004          00000008   7826+         lg  14,8(0,13)          load up return address                 01-DCCEP
00004F82 EB1C D020 0004          00000020   7827+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00004F88 078E                               7828+         bcr 8,14                if same dsab, just return              01-DCCEP
00004F8A E3F0 D010 0024          00000010   7829+         stg 15,16(0,13)         save return code                       01-DCCEP
00004F90 E300 D018 0024          00000018   7830+         stg 0,24(0,13)          save more return code                  01-DCCEP
00004F96 E3F0 D090 0004          00000090   7831+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00004F9C E3F0 F018 0004          00000018   7832+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00004FA2 47F0 F040               00000040   7833+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            7834+* End of Epilog
                                            7835 * * **** End of Epilogue
                                                                                                                           Page  162 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            7836          DROP  12
                                            7837 *
                                            7838 *   DSECT for automatic variables in "rd_kafka_mock_commit_offset"
                                            7839 *      (FUNCTION #1946)
                                            7840 *
00000000                00000000 000000B0   7841 @AUTO#rd_kafka_mock_commit_offset DSECT
00000000                                    7842          DS    XL168
000000A8                                    7843 rd_kafka_mock_commit_offset#slen#1 DS 8XL1 ; slen
                                            7844 *
00004FA6                00000000 00010480   7845 @CODE    CSECT
                                            7846 *
                                            7847 *
                                            7848 *
                                            7849 * ....... start of rd_kafka_mock_partition_destroy
00004FA6                                    7850 @LNAME1982 DS  0H
00004FA6 0000001F                           7851          DC    X'0000001F'
00004FAA 99846D9281869281                   7852          DC    C'rd_kafka_mock_partition_destroy'
00004FC9 00                                 7853          DC    X'00'
                                            7854 rd_kafka_mock_partition_destroy DCCPRLG CINDEX=1982,BASER=12,FRAME=192,*
                                                                ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1982
                                            7855          macro
                                            7856          dccextrn &m
                                            7857          gblc    &$dccext(1000)
                                            7858          gbla    &$dccexti
                                            7859          lcla    &i
                                            7860 &$dccext(&$dccexti+1) setc    '&m'
                                            7861 &i       seta    1
                                            7862 .loop    aif    (&i gt &$dccexti).around
                                            7863          aif    ('&$dccext(&i)' eq '&m').getout
                                            7864 &i       seta    &i+1
                                            7865          ago     .loop
                                            7866 .around  anop
                                            7867 &$dccexti seta &$dccexti+1
                                            7868          extrn  &m
                                            7869 .getout  anop
                                            7870          mend
00004FD0                                    7871+$eye0160    ds    0d                                                    02-DCCCA
00004FD0 C4C3C3                             7872+         dc cl3'DCC'                                                    02-DCCCA
00004FD3 01                                 7873+         dc xl1'01' format one                                          02-DCCCA
00004FD4 00000000                           7874+         dc a(0)                                                        02-DCCCA
00004FD8 0000000000005042                   7875+         dc ad(@PER_1982)                                               02-DCCCA
00004FE0 00000000000000C0                   7876+         dc ad(192)                                                     02-DCCCA
00004FE8 0000000000000000                   7877+         dc ad(0)                                                       02-DCCCA
00004FF0 0000000000001000                   7878+         dc ad(4096)                                                    02-DCCCA
00004FF8 20                                 7879+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00004FF9 03                                 7880+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00004FFA 03                                 7881+         dc al1(3)                                                      02-DCCCA
00004FFB 08                                 7882+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00004FFC 00                                 7883+         dc bl.8'00000000'                                              02-DCCCA
00004FFD 000000                             7884+         dc al3(0)                                                      02-DCCCA
00005000 0000000000004FA6                   7885+         dc ad(@LNAME1982)                                              02-DCCCA
00005008                                    7886+         ds 0d                                                          02-DCCCA
                                                                                                                           Page  163 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005008 0000000000004FD0                   7887+         dc ad($eye0160)                                                02-DCCCA
00005010 0000000000000000                   7888+         dc ad(0)                                                       02-DCCCA
00005018                                    7889+         ds    0d                                                       01-DCCPR
00005018                                    7890+rd_kafka_mock_partition_destroy ds 0d                                   01-DCCPR
00005018                                    7891+@REGION_1982_1 ds 0h                                                    01-DCCPR
00005018 EBEC D008 0024          00000008   7892+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000501E E3E0 D088 0004          00000088   7893+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00005024 E3C0 D090 0004          00000090   7894+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000502A B904 002E                          7895+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000502E E3B0 C018 0004          00000018   7896+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00005034 A7EB 00C0               000000C0   7897+         aghi  14,192              increase by frame size               01-DCCPR
00005038 E3E0 C020 0021          00000020   7898+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000503E 4720 B020               00000020   7899+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00005042                                    7900+@PER_1982 ds   0h                                                       01-DCCPR
00005042 EBDE 2080 0024          00000080   7901+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00005048 E3C0 2090 0024          00000090   7902+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000504E B904 00D2                          7903+         lgr   13,2                set real frame pointer               01-DCCPR
00005052 B904 00CF                          7904+         lgr   12,15               set base reg                         01-DCCPR
                        00005018            7905+         using @REGION_1982_1,12                                        01-DCCPR
                                            7906 * ******* End of Prologue
                                            7907 * *
00005056 E320 1000 0004          00000000   7908          LG    2,0(0,1)    ; mpart
                                            7909 * ***           rd_kafka_mock_msgset_t *mset, *tmp;
                                            7910 * ***           rd_kafka_mock_committed_offset_t *coff, *tmpcoff;
                                            7911 * ***
                                            7912 * ***           for ((mset) = ((&mpart->msgsets)->tqh_first); (mset) !\
                                            7913 * = (((void *)0)) && ((tmp) = ((mset)->link .tqe_next), 1); (mset) = (\
                                            7914 * tmp))
0000505C E3F0 2040 0004          00000040   7915          LG    15,64(0,2)  ; offset of msgsets in rd_kafka_mock_partiti*
                                                                on_s
00005062 47F0 C08C               000050A4   7916          B     @L776
00005068                                    7917          DS    0D
00005068 000000C0                           7918 @FRAMESIZE_1982 DC F'192'
0000506C 00000000
00005070 00000000000036F0                   7919 @lit_1982_243 DC AD(rd_kafka_mock_msgset_destroy)
00005078 00000000000049C8                   7920 @lit_1982_244 DC AD(rd_kafka_mock_committed_offset_destroy)
00005080 0000000000000B78                   7921 @lit_1982_245 DC AD(rd_free)
00005088                                    7922 @L775    DS    0H
                                            7923 * ***                   rd_kafka_mock_msgset_destroy(mpart, mset);
00005088 E320 D0B0 0024          000000B0   7924          STG   2,176(0,13)
0000508E E3F0 D0B8 0024          000000B8   7925          STG   15,184(0,13)
00005094 4110 D0B0               000000B0   7926          LA    1,176(0,13)
00005098 E3F0 C058 0004          00005070   7927          LG    15,@lit_1982_243 ; rd_kafka_mock_msgset_destroy
0000509E                                    7928 @@gen_label373 DS    0H
0000509E 05EF                               7929          BALR  14,15
000050A0                                    7930 @@gen_label374 DS    0H
000050A0 B904 00F3                          7931          LGR   15,3        ; mset
000050A4                                    7932 @L776    DS    0H
000050A4 B902 001F                          7933          LTGR  1,15
000050A8 4780 C09E               000050B6   7934          BE    @L777
000050AC E330 F000 0004          00000000   7935          LG    3,0(0,15)   ; mset
000050B2 47F0 C070               00005088   7936          B     @L775
                                                                                                                           Page  164 
  Active Usings: @REGION_1982_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000050B6                                    7937 @L777    DS    0H
                                            7938 * ***
                                            7939 * ***           for ((coff) = ((&mpart->committed_offsets)->tqh_first)\
                                            7940 * ; (coff) != (((void *)0)) && ((tmpcoff) = ((coff)->link .tqe_next), \
                                            7941 * 1); (coff) = (tmpcoff))
000050B6 E3F0 2070 0004          00000070   7942          LG    15,112(0,2) ; offset of committed_offsets in rd_kafka_mo*
                                                                ck_partition_s
000050BC 47F0 C0C4               000050DC   7943          B     @L781
000050C0                                    7944 @L780    DS    0H
                                            7945 * ***                   rd_kafka_mock_committed_offset_destroy(mpart, \
                                            7946 * coff);
000050C0 E320 D0B0 0024          000000B0   7947          STG   2,176(0,13)
000050C6 E3F0 D0B8 0024          000000B8   7948          STG   15,184(0,13)
000050CC 4110 D0B0               000000B0   7949          LA    1,176(0,13)
000050D0 E3F0 C060 0004          00005078   7950          LG    15,@lit_1982_244 ; rd_kafka_mock_committed_offset_destro*
                                                                y
000050D6                                    7951 @@gen_label376 DS    0H
000050D6 05EF                               7952          BALR  14,15
000050D8                                    7953 @@gen_label377 DS    0H
000050D8 B904 00F3                          7954          LGR   15,3        ; coff
000050DC                                    7955 @L781    DS    0H
000050DC B902 001F                          7956          LTGR  1,15
000050E0 4780 C0D6               000050EE   7957          BE    @L782
000050E4 E330 F000 0004          00000000   7958          LG    3,0(0,15)   ; coff
000050EA 47F0 C0A8               000050C0   7959          B     @L780
000050EE                                    7960 @L782    DS    0H
                                            7961 * ***
                                            7962 * ***           rd_free(mpart->replicas);
000050EE E3F0 2088 0004          00000088   7963          LG    15,136(0,2)
000050F4 E3F0 D0B0 0024          000000B0   7964          STG   15,176(0,13)
000050FA 4110 D0B0               000000B0   7965          LA    1,176(0,13)
000050FE E3F0 C068 0004          00005080   7966          LG    15,@lit_1982_245 ; rd_free
00005104                                    7967 @@gen_label379 DS    0H
00005104 05EF                               7968          BALR  14,15
00005106                                    7969 @@gen_label380 DS    0H
                                            7970 * ***   }
00005106                                    7971 @ret_lab_1982 DS 0H
                                            7972 * * **** Start of Epilogue
                                            7973          DCCEPIL
00005106                                    7974+         ds 0h                                                          01-DCCEP
                                            7975+* Epilog
00005106 D707 D088 D088 00000088 00000088   7976+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000510C E3D0 D080 0004          00000080   7977+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00005112 E3C0 D090 0004          00000090   7978+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00005118 E3B0 C018 0004          00000018   7979+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000511E E3C0 B010 0021          00000010   7980+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00005124 E3E0 D008 0004          00000008   7981+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000512A EB1C D020 0004          00000020   7982+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00005130 078E                               7983+         bcr 8,14                if same dsab, just return              01-DCCEP
00005132 E3F0 D010 0024          00000010   7984+         stg 15,16(0,13)         save return code                       01-DCCEP
00005138 E300 D018 0024          00000018   7985+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000513E E3F0 D090 0004          00000090   7986+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
                                                                                                                           Page  165 
  Active Usings: @REGION_1982_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005144 E3F0 F018 0004          00000018   7987+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000514A 47F0 F040               00000040   7988+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            7989+* End of Epilog
                                            7990 * * **** End of Epilogue
                                            7991          DROP  12
                                            7992 *
                                            7993 *   DSECT for automatic variables in "rd_kafka_mock_partition_destroy"
                                            7994 *      (FUNCTION #1982)
                                            7995 *
00000000                00000000 000000A8   7996 @AUTO#rd_kafka_mock_partition_destroy DSECT
00000000                                    7997          DS    XL168
                                            7998 *
0000514E                00000000 00010480   7999 @CODE    CSECT
                                            8000 *
                                            8001 *
                                            8002 *
                                            8003 * ....... start of rd_kafka_mock_partition_init
0000514E                                    8004 @LNAME1983 DS  0H
0000514E 0000001C                           8005          DC    X'0000001C'
00005152 99846D9281869281                   8006          DC    C'rd_kafka_mock_partition_init'
0000516E 00                                 8007          DC    X'00'
                                            8008 rd_kafka_mock_partition_init DCCPRLG CINDEX=1983,BASER=12,FRAME=176,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1983
                                            8009          macro
                                            8010          dccextrn &m
                                            8011          gblc    &$dccext(1000)
                                            8012          gbla    &$dccexti
                                            8013          lcla    &i
                                            8014 &$dccext(&$dccexti+1) setc    '&m'
                                            8015 &i       seta    1
                                            8016 .loop    aif    (&i gt &$dccexti).around
                                            8017          aif    ('&$dccext(&i)' eq '&m').getout
                                            8018 &i       seta    &i+1
                                            8019          ago     .loop
                                            8020 .around  anop
                                            8021 &$dccexti seta &$dccexti+1
                                            8022          extrn  &m
                                            8023 .getout  anop
                                            8024          mend
00005170                                    8025+$eye0163    ds    0d                                                    02-DCCCA
00005170 C4C3C3                             8026+         dc cl3'DCC'                                                    02-DCCCA
00005173 01                                 8027+         dc xl1'01' format one                                          02-DCCCA
00005174 00000000                           8028+         dc a(0)                                                        02-DCCCA
00005178 00000000000051E2                   8029+         dc ad(@PER_1983)                                               02-DCCCA
00005180 00000000000000B0                   8030+         dc ad(176)                                                     02-DCCCA
00005188 0000000000000000                   8031+         dc ad(0)                                                       02-DCCCA
00005190 0000000000001000                   8032+         dc ad(4096)                                                    02-DCCCA
00005198 20                                 8033+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005199 03                                 8034+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000519A 03                                 8035+         dc al1(3)                                                      02-DCCCA
0000519B 08                                 8036+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000519C 00                                 8037+         dc bl.8'00000000'                                              02-DCCCA
                                                                                                                           Page  166 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000519D 000000                             8038+         dc al3(0)                                                      02-DCCCA
000051A0 000000000000514E                   8039+         dc ad(@LNAME1983)                                              02-DCCCA
000051A8                                    8040+         ds 0d                                                          02-DCCCA
000051A8 0000000000005170                   8041+         dc ad($eye0163)                                                02-DCCCA
000051B0 0000000000000000                   8042+         dc ad(0)                                                       02-DCCCA
000051B8                                    8043+         ds    0d                                                       01-DCCPR
000051B8                                    8044+rd_kafka_mock_partition_init ds 0d                                      01-DCCPR
000051B8                                    8045+@REGION_1983_1 ds 0h                                                    01-DCCPR
000051B8 EBEC D008 0024          00000008   8046+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000051BE E3E0 D088 0004          00000088   8047+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000051C4 E3C0 D090 0004          00000090   8048+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000051CA B904 002E                          8049+         lgr   2,14                copy addr of our savearea            01-DCCPR
000051CE E3B0 C018 0004          00000018   8050+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000051D4 A7EB 00B0               000000B0   8051+         aghi  14,176              increase by frame size               01-DCCPR
000051D8 E3E0 C020 0021          00000020   8052+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000051DE 4720 B020               00000020   8053+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000051E2                                    8054+@PER_1983 ds   0h                                                       01-DCCPR
000051E2 EBDE 2080 0024          00000080   8055+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000051E8 E3C0 2090 0024          00000090   8056+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000051EE B904 00D2                          8057+         lgr   13,2                set real frame pointer               01-DCCPR
000051F2 B904 00CF                          8058+         lgr   12,15               set base reg                         01-DCCPR
                        000051B8            8059+         using @REGION_1983_1,12                                        01-DCCPR
                                            8060 * ******* End of Prologue
                                            8061 * *
                                            8062 * ***           mpart->topic = mtopic;
000051F6 E3F0 1008 0004          00000008   8063          LG    15,8(0,1)   ; mpart
000051FC E320 1000 0004          00000000   8064          LG    2,0(0,1)    ; mtopic
00005202 E320 F098 0024          00000098   8065          STG   2,152(0,15) ; offset of topic in rd_kafka_mock_partition*
                                                                _s
                                            8066 * ***           mpart->id = id;
00005208 5810 1014               00000014   8067          L     1,20(0,1)   ; id
0000520C 5010 F010               00000010   8068          ST    1,16(0,15)  ; offset of id in rd_kafka_mock_partition_s
                                            8069 * ***
                                            8070 * ***           mpart->follower_id = -1;
00005210 E54C F094 FFFF          00000094   8071          MVHI  148(15),-1  ; offset of follower_id in rd_kafka_mock_par*
                                                                tition_s
                                            8072 * ***
                                            8073 * ***           do { (&mpart->msgsets)->tqh_first = (((void *)0)); (&m\
                                            8074 * part->msgsets)->tqh_last = &(&mpart->msgsets)->tqh_first; } while ( \
                                            8075 * 0);
00005216                                    8076 @L785    DS    0H
00005216 A719 0000               00000000   8077          LGHI  1,0         ; 0
0000521A E310 F040 0024          00000040   8078          STG   1,64(0,15)  ; offset of msgsets in rd_kafka_mock_partiti*
                                                                on_s
00005220 4110 F040               00000040   8079          LA    1,64(0,15)
00005224 E310 F048 0024          00000048   8080          STG   1,72(0,15)  ; offset of tqh_last in 0000166
                                            8081 * ***
                                            8082 * ***           mpart->max_size = 1024*1024*5;
0000522A C01F 0050 0000                     8083          LLILF 1,X'00500000' ; 5242880
00005230 E310 F060 0024          00000060   8084          STG   1,96(0,15)  ; offset of max_size in rd_kafka_mock_partit*
                                                                ion_s
                                            8085 * ***           mpart->max_cnt = 100000;
                                                                                                                           Page  167 
  Active Usings: @REGION_1983_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005236 C01F 0001 86A0                     8086          LLILF 1,X'000186A0' ; 100000
0000523C E310 F068 0024          00000068   8087          STG   1,104(0,15) ; offset of max_cnt in rd_kafka_mock_partiti*
                                                                on_s
                                            8088 * ***
                                            8089 * ***           mpart->update_follower_start_offset = 1;
00005242 9201 F038      00000038 00000001   8090          MVI   56(15),1    ; offset of update_follower_start_offset in *
                                                                rd_kafka_mock_partition_s
                                            8091 * ***           mpart->update_follower_end_offset = 1;
00005246 9201 F039      00000039 00000001   8092          MVI   57(15),1    ; offset of update_follower_end_offset in rd*
                                                                _kafka_mock_partition_s
                                            8093 * ***
                                            8094 * ***           do { (&mpart->committed_offsets)->tqh_first = (((void \
                                            8095 * *)0)); (&mpart->committed_offsets)->tqh_last = &(&mpart->committed_o\
                                            8096 * ffsets)->tqh_first; } while ( 0);
0000524A                                    8097 @L788    DS    0H
0000524A A719 0000               00000000   8098          LGHI  1,0         ; 0
0000524E E310 F070 0024          00000070   8099          STG   1,112(0,15) ; offset of committed_offsets in rd_kafka_mo*
                                                                ck_partition_s
00005254 4110 F070               00000070   8100          LA    1,112(0,15)
00005258 E310 F078 0024          00000078   8101          STG   1,120(0,15) ; offset of tqh_last in 0000167
                                            8102 * ***
                                            8103 * ***           rd_kafka_mock_partition_assign_replicas(mpart);
0000525E E3F0 D0A8 0024          000000A8   8104          STG   15,168(0,13)
00005264 4110 D0A8               000000A8   8105          LA    1,168(0,13)
00005268 E3F0 C108 0004          000052C0   8106          LG    15,@lit_1983_251 ; rd_kafka_mock_partition_assign_replic*
                                                                as
0000526E                                    8107 @@gen_label381 DS    0H
0000526E 05EF                               8108          BALR  14,15
00005270                                    8109 @@gen_label382 DS    0H
                                            8110 * ***   }
00005270                                    8111 @ret_lab_1983 DS 0H
                                            8112 * * **** Start of Epilogue
                                            8113          DCCEPIL
00005270                                    8114+         ds 0h                                                          01-DCCEP
                                            8115+* Epilog
00005270 D707 D088 D088 00000088 00000088   8116+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00005276 E3D0 D080 0004          00000080   8117+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000527C E3C0 D090 0004          00000090   8118+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00005282 E3B0 C018 0004          00000018   8119+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00005288 E3C0 B010 0021          00000010   8120+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000528E E3E0 D008 0004          00000008   8121+         lg  14,8(0,13)          load up return address                 01-DCCEP
00005294 EB1C D020 0004          00000020   8122+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000529A 078E                               8123+         bcr 8,14                if same dsab, just return              01-DCCEP
0000529C E3F0 D010 0024          00000010   8124+         stg 15,16(0,13)         save return code                       01-DCCEP
000052A2 E300 D018 0024          00000018   8125+         stg 0,24(0,13)          save more return code                  01-DCCEP
000052A8 E3F0 D090 0004          00000090   8126+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
000052AE E3F0 F018 0004          00000018   8127+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000052B4 47F0 F040               00000040   8128+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            8129+* End of Epilog
                                            8130 * * **** End of Epilogue
000052B8                                    8131          DS    0D
000052B8 000000B0                           8132 @FRAMESIZE_1983 DC F'176'
                                                                                                                           Page  168 
  Active Usings: @REGION_1983_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000052BC 00000000
000052C0 00000000000047A0                   8133 @lit_1983_251 DC AD(rd_kafka_mock_partition_assign_replicas)
                                            8134          DROP  12
                                            8135 *
                                            8136 *   DSECT for automatic variables in "rd_kafka_mock_partition_init"
                                            8137 *      (FUNCTION #1983)
                                            8138 *
00000000                00000000 000000A8   8139 @AUTO#rd_kafka_mock_partition_init DSECT
00000000                                    8140          DS    XL168
                                            8141 *
000052C8                00000000 00010480   8142 @CODE    CSECT
                                            8143 *
                                            8144 *
                                            8145 *
                                            8146 * ....... start of rd_kafka_mock_partition_find
                                            8147 rd_kafka_mock_partition_find ALIAS X'99846D92818692816D949683926D978199*
                                                                A389A38996956D86899584'
000052C8                                    8148 @LNAME1940 DS  0H
000052C8 0000001C                           8149          DC    X'0000001C'
000052CC 99846D9281869281                   8150          DC    C'rd_kafka_mock_partition_find'
000052E8 00                                 8151          DC    X'00'
                                            8152 rd_kafka_mock_partition_find DCCPRLG CINDEX=1940,BASER=12,FRAME=168,SAV*
                                                                EAREA=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1940
                                            8153          macro
                                            8154          dccextrn &m
                                            8155          gblc    &$dccext(1000)
                                            8156          gbla    &$dccexti
                                            8157          lcla    &i
                                            8158 &$dccext(&$dccexti+1) setc    '&m'
                                            8159 &i       seta    1
                                            8160 .loop    aif    (&i gt &$dccexti).around
                                            8161          aif    ('&$dccext(&i)' eq '&m').getout
                                            8162 &i       seta    &i+1
                                            8163          ago     .loop
                                            8164 .around  anop
                                            8165 &$dccexti seta &$dccexti+1
                                            8166          extrn  &m
                                            8167 .getout  anop
                                            8168          mend
000052F0                                    8169+$eye0166    ds    0d                                                    02-DCCCA
000052F0 C4C3C3                             8170+         dc cl3'DCC'                                                    02-DCCCA
000052F3 01                                 8171+         dc xl1'01' format one                                          02-DCCCA
000052F4 00000000                           8172+         dc a(0)                                                        02-DCCCA
000052F8 0000000000000000                   8173+         dc ad(0)                                                       02-DCCCA
00005300 00000000000000A8                   8174+         dc ad(168)                                                     02-DCCCA
00005308 0000000000000000                   8175+         dc ad(0)                                                       02-DCCCA
00005310 0000000000001000                   8176+         dc ad(4096)                                                    02-DCCCA
00005318 20                                 8177+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005319 03                                 8178+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000531A 03                                 8179+         dc al1(3)                                                      02-DCCCA
0000531B 08                                 8180+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000531C 00                                 8181+         dc bl.8'00000000'                                              02-DCCCA
                                                                                                                           Page  169 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000531D 000000                             8182+         dc al3(0)                                                      02-DCCCA
00005320 00000000000052C8                   8183+         dc ad(@LNAME1940)                                              02-DCCCA
00005328                                    8184+         ds 0d                                                          02-DCCCA
00005328 00000000000052F0                   8185+         dc ad($eye0166)                                                02-DCCCA
00005330 0000000000000000                   8186+         dc ad(0)                                                       02-DCCCA
00005338                                    8187+         ds    0d                                                       01-DCCPR
                                            8188+         entry rd_kafka_mock_partition_find                             01-DCCPR
00005338                                    8189+rd_kafka_mock_partition_find ds 0d                                      01-DCCPR
00005338                                    8190+@REGION_1940_1 ds 0h                                                    01-DCCPR
00005338 EBEC D008 0024          00000008   8191+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000533E B904 00CF                          8192+         lgr   12,15               set base reg                         01-DCCPR
                        00005338            8193+         using @REGION_1940_1,12                                        01-DCCPR
                                            8194 * ******* End of Prologue
                                            8195 * *
                                            8196 * ***           if (partition < 0 || partition >= mtopic->partition_cn\
                                            8197 * t)
00005342 E3F0 100C 0012          0000000C   8198          LT    15,12(0,1)  ; partition
00005348 4740 C022               0000535A   8199          BL    @L792
0000534C E310 1000 0004          00000000   8200          LG    1,0(0,1)    ; mtopic
00005352 59F0 1020               00000020   8201          C     15,32(0,1)
00005356 4740 C02A               00005362   8202          BL    @L791
0000535A                                    8203 @L792    DS    0H
                                            8204 * ***                   return ((void *)0);
0000535A A7F9 0000               00000000   8205          LGHI  15,0        ; 0
0000535E 47F0 C048               00005380   8206          B     @ret_lab_1940
00005362                                    8207 @L791    DS    0H
                                            8208 * ***
                                            8209 * ***           return (rd_kafka_mock_partition_t *)&mtopic->partition\
                                            8210 * s[partition];
00005362 B914 00FF                          8211          LGFR  15,15
00005366 E310 1018 0004          00000018   8212          LG    1,24(0,1)   ; offset of partitions in rd_kafka_mock_topi*
                                                                c_s
0000536C EB2F 0002 000D          00000002   8213          SLLG  2,15,2(0)   ;   .
00005372 B90A 002F                          8214          ALGR  2,15        ;   .
00005376 EB22 0005 000D          00000005   8215          SLLG  2,2,5(0)    ;   .
0000537C 41F2 1000               00000000   8216          LA    15,0(2,1)
                                            8217 * ***   }
00005380                                    8218 @ret_lab_1940 DS 0H
                                            8219 * * **** Start of Epilogue
                                            8220          DCCEPIL
00005380                                    8221+         ds 0h                                                          01-DCCEP
                                            8222+* Epilog
                                            8223+* Epilog
00005380 E3E0 D008 0004          00000008   8224+         lg    14,8(,13) restore the reg                                01-DCCEP
00005386 EB1C D020 0004          00000020   8225+         lmg   1,12,32(13)                                              01-DCCEP
0000538C 07FE                               8226+         br   14                                                        01-DCCEP
                                            8227+* End of Epilog
                                            8228 * * **** End of Epilogue
                                            8229          DROP  12
                                            8230 *
                                            8231 *   DSECT for automatic variables in "rd_kafka_mock_partition_find"
                                            8232 *      (FUNCTION #1940)
                                                                                                                           Page  170 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8233 *
00000000                00000000 000000A8   8234 @AUTO#rd_kafka_mock_partition_find DSECT
00000000                                    8235          DS    XL168
                                            8236 *
0000538E                00000000 00010480   8237 @CODE    CSECT
                                            8238 *
                                            8239 *
                                            8240 *
                                            8241 * ....... start of rd_kafka_mock_topic_destroy
0000538E                                    8242 @LNAME1984 DS  0H
0000538E 0000001B                           8243          DC    X'0000001B'
00005392 99846D9281869281                   8244          DC    C'rd_kafka_mock_topic_destroy'
000053AD 00                                 8245          DC    X'00'
                                            8246 rd_kafka_mock_topic_destroy DCCPRLG CINDEX=1984,BASER=12,FRAME=184,ENTR*
                                                                Y=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1984
                                            8247          macro
                                            8248          dccextrn &m
                                            8249          gblc    &$dccext(1000)
                                            8250          gbla    &$dccexti
                                            8251          lcla    &i
                                            8252 &$dccext(&$dccexti+1) setc    '&m'
                                            8253 &i       seta    1
                                            8254 .loop    aif    (&i gt &$dccexti).around
                                            8255          aif    ('&$dccext(&i)' eq '&m').getout
                                            8256 &i       seta    &i+1
                                            8257          ago     .loop
                                            8258 .around  anop
                                            8259 &$dccexti seta &$dccexti+1
                                            8260          extrn  &m
                                            8261 .getout  anop
                                            8262          mend
000053B0                                    8263+$eye0169    ds    0d                                                    02-DCCCA
000053B0 C4C3C3                             8264+         dc cl3'DCC'                                                    02-DCCCA
000053B3 01                                 8265+         dc xl1'01' format one                                          02-DCCCA
000053B4 00000000                           8266+         dc a(0)                                                        02-DCCCA
000053B8 0000000000005422                   8267+         dc ad(@PER_1984)                                               02-DCCCA
000053C0 00000000000000B8                   8268+         dc ad(184)                                                     02-DCCCA
000053C8 0000000000000000                   8269+         dc ad(0)                                                       02-DCCCA
000053D0 0000000000001000                   8270+         dc ad(4096)                                                    02-DCCCA
000053D8 20                                 8271+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000053D9 03                                 8272+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000053DA 03                                 8273+         dc al1(3)                                                      02-DCCCA
000053DB 08                                 8274+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000053DC 00                                 8275+         dc bl.8'00000000'                                              02-DCCCA
000053DD 000000                             8276+         dc al3(0)                                                      02-DCCCA
000053E0 000000000000538E                   8277+         dc ad(@LNAME1984)                                              02-DCCCA
000053E8                                    8278+         ds 0d                                                          02-DCCCA
000053E8 00000000000053B0                   8279+         dc ad($eye0169)                                                02-DCCCA
000053F0 0000000000000000                   8280+         dc ad(0)                                                       02-DCCCA
000053F8                                    8281+         ds    0d                                                       01-DCCPR
000053F8                                    8282+rd_kafka_mock_topic_destroy ds 0d                                       01-DCCPR
000053F8                                    8283+@REGION_1984_1 ds 0h                                                    01-DCCPR
                                                                                                                           Page  171 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000053F8 EBEC D008 0024          00000008   8284+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000053FE E3E0 D088 0004          00000088   8285+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00005404 E3C0 D090 0004          00000090   8286+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000540A B904 002E                          8287+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000540E E3B0 C018 0004          00000018   8288+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00005414 A7EB 00B8               000000B8   8289+         aghi  14,184              increase by frame size               01-DCCPR
00005418 E3E0 C020 0021          00000020   8290+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000541E 4720 B020               00000020   8291+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00005422                                    8292+@PER_1984 ds   0h                                                       01-DCCPR
00005422 EBDE 2080 0024          00000080   8293+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00005428 E3C0 2090 0024          00000090   8294+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000542E B904 00D2                          8295+         lgr   13,2                set real frame pointer               01-DCCPR
00005432 B904 00CF                          8296+         lgr   12,15               set base reg                         01-DCCPR
                        000053F8            8297+         using @REGION_1984_1,12                                        01-DCCPR
                                            8298 * ******* End of Prologue
                                            8299 * *
00005436 E330 1000 0004          00000000   8300          LG    3,0(0,1)    ; mtopic
                                            8301 * ***           int i;
                                            8302 * ***
                                            8303 * ***           for (i = 0 ; i < mtopic->partition_cnt ; i++)
0000543C A728 0000               00000000   8304          LHI   2,0         ; 0
00005440 47F0 C09C               00005494   8305          B     @L794
00005448                                    8306          DS    0D
00005448 000000B8                           8307 @FRAMESIZE_1984 DC F'184'
0000544C 00000000
00005450 0000000000005018                   8308 @lit_1984_255 DC AD(rd_kafka_mock_partition_destroy)
00005458 0000000000000B78                   8309 @lit_1984_256 DC AD(rd_free)
00005460                                    8310 @L793    DS    0H
                                            8311 * ***                   rd_kafka_mock_partition_destroy(&mtopic->parti\
                                            8312 * tions[i]);
00005460 B914 00F2                          8313          LGFR  15,2
00005464 E310 3018 0004          00000018   8314          LG    1,24(0,3)   ; offset of partitions in rd_kafka_mock_topi*
                                                                c_s
0000546A EB4F 0002 000D          00000002   8315          SLLG  4,15,2(0)   ;   .
00005470 B90A 004F                          8316          ALGR  4,15        ;   .
00005474 EB44 0005 000D          00000005   8317          SLLG  4,4,5(0)    ;   .
0000547A 41F4 1000               00000000   8318          LA    15,0(4,1)
0000547E E3F0 D0B0 0024          000000B0   8319          STG   15,176(0,13)
00005484 4110 D0B0               000000B0   8320          LA    1,176(0,13)
00005488 E3F0 C058 0004          00005450   8321          LG    15,@lit_1984_255 ; rd_kafka_mock_partition_destroy
0000548E                                    8322 @@gen_label385 DS    0H
0000548E 05EF                               8323          BALR  14,15
00005490                                    8324 @@gen_label386 DS    0H
00005490 A72A 0001               00000001   8325          AHI   2,1
00005494                                    8326 @L794    DS    0H
00005494 5920 3020               00000020   8327          C     2,32(0,3)
00005498 4740 C068               00005460   8328          BL    @L793
                                            8329 * ***
                                            8330 * ***           do {   if (((mtopic)->link .tqe_next) != (((void *)0))\
                                            8331 * ) (mtopic)->link .tqe_next->link .tqe_prev = (mtopic)->link .tqe_pre\
                                            8332 * v; else (&mtopic->cluster->topics)->tqh_last = (mtopic)->link .tqe_p\
                                            8333 * rev; *(mtopic)->link .tqe_prev = (mtopic)->link .tqe_next; ; } while\
                                                                                                                           Page  172 
  Active Usings: @REGION_1984_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8334 *  ( 0);
0000549C                                    8335 @L797    DS    0H
0000549C E3F0 3000 0002          00000000   8336          LTG   15,0(0,3)   ; mtopic
000054A2 4780 C0C4               000054BC   8337          BE    @L800
000054A6 E3F0 3000 0004          00000000   8338          LG    15,0(0,3)   ; mtopic
000054AC E310 3008 0004          00000008   8339          LG    1,8(0,3)    ; offset of tqe_prev in 0000168
000054B2 E310 F008 0024          00000008   8340          STG   1,8(0,15)   ; offset of tqe_prev in 0000168
000054B8 47F0 C0D6               000054CE   8341          B     @L801
000054BC                                    8342 @L800    DS    0H
000054BC E3F0 3028 0004          00000028   8343          LG    15,40(0,3)  ; offset of cluster in rd_kafka_mock_topic_s
000054C2 E310 3008 0004          00000008   8344          LG    1,8(0,3)    ; offset of tqe_prev in 0000168
000054C8 E310 F050 0024          00000050   8345          STG   1,80(0,15)  ; offset of tqh_last in 0000171
000054CE                                    8346 @L801    DS    0H
000054CE E3F0 3008 0004          00000008   8347          LG    15,8(0,3)   ; offset of tqe_prev in 0000168
000054D4 E310 3000 0004          00000000   8348          LG    1,0(0,3)    ; mtopic
000054DA E310 F000 0024          00000000   8349          STG   1,0(0,15)
                                            8350 * ***           mtopic->cluster->topic_cnt--;
000054E0 E3F0 3028 0004          00000028   8351          LG    15,40(0,3)  ; offset of cluster in rd_kafka_mock_topic_s
000054E6 5810 F058               00000058   8352          L     1,88(0,15)
000054EA A71A FFFF               0000FFFF   8353          AHI   1,-1
000054EE 5010 F058               00000058   8354          ST    1,88(0,15)
                                            8355 * ***
                                            8356 * ***           rd_free(mtopic->partitions);
000054F2 E3F0 3018 0004          00000018   8357          LG    15,24(0,3)
000054F8 E3F0 D0B0 0024          000000B0   8358          STG   15,176(0,13)
000054FE 4110 D0B0               000000B0   8359          LA    1,176(0,13)
00005502 E320 C060 0004          00005458   8360          LG    2,@lit_1984_256 ; rd_free
00005508 B904 00F2                          8361          LGR   15,2
0000550C                                    8362 @@gen_label389 DS    0H
0000550C 05EF                               8363          BALR  14,15
0000550E                                    8364 @@gen_label390 DS    0H
                                            8365 * ***           rd_free(mtopic->name);
0000550E E3F0 3010 0004          00000010   8366          LG    15,16(0,3)
00005514 E3F0 D0B0 0024          000000B0   8367          STG   15,176(0,13)
0000551A 4110 D0B0               000000B0   8368          LA    1,176(0,13)
0000551E B904 00F2                          8369          LGR   15,2
00005522                                    8370 @@gen_label391 DS    0H
00005522 05EF                               8371          BALR  14,15
00005524                                    8372 @@gen_label392 DS    0H
                                            8373 * ***           rd_free(mtopic);
00005524 E330 D0B0 0024          000000B0   8374          STG   3,176(0,13)
0000552A 4110 D0B0               000000B0   8375          LA    1,176(0,13)
0000552E B904 00F2                          8376          LGR   15,2
00005532                                    8377 @@gen_label393 DS    0H
00005532 05EF                               8378          BALR  14,15
00005534                                    8379 @@gen_label394 DS    0H
                                            8380 * ***   }
00005534                                    8381 @ret_lab_1984 DS 0H
                                            8382 * * **** Start of Epilogue
                                            8383          DCCEPIL
00005534                                    8384+         ds 0h                                                          01-DCCEP
                                            8385+* Epilog
                                                                                                                           Page  173 
  Active Usings: @REGION_1984_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005534 D707 D088 D088 00000088 00000088   8386+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000553A E3D0 D080 0004          00000080   8387+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00005540 E3C0 D090 0004          00000090   8388+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00005546 E3B0 C018 0004          00000018   8389+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000554C E3C0 B010 0021          00000010   8390+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00005552 E3E0 D008 0004          00000008   8391+         lg  14,8(0,13)          load up return address                 01-DCCEP
00005558 EB1C D020 0004          00000020   8392+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000555E 078E                               8393+         bcr 8,14                if same dsab, just return              01-DCCEP
00005560 E3F0 D010 0024          00000010   8394+         stg 15,16(0,13)         save return code                       01-DCCEP
00005566 E300 D018 0024          00000018   8395+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000556C E3F0 D090 0004          00000090   8396+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00005572 E3F0 F018 0004          00000018   8397+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00005578 47F0 F040               00000040   8398+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            8399+* End of Epilog
                                            8400 * * **** End of Epilogue
                                            8401          DROP  12
                                            8402 *
                                            8403 *   DSECT for automatic variables in "rd_kafka_mock_topic_destroy"
                                            8404 *      (FUNCTION #1984)
                                            8405 *
00000000                00000000 000000AC   8406 @AUTO#rd_kafka_mock_topic_destroy DSECT
00000000                                    8407          DS    XL168
000000A8                                    8408 rd_kafka_mock_topic_destroy#i#0 DS 1F ; i
                                            8409 *
0000557C                00000000 00010480   8410 @CODE    CSECT
                                            8411 *
                                            8412 *
                                            8413 *
                                            8414 * ....... start of rd_kafka_mock_topic_new
0000557C                                    8415 @LNAME1985 DS  0H
0000557C 00000017                           8416          DC    X'00000017'
00005580 99846D9281869281                   8417          DC    C'rd_kafka_mock_topic_new'
00005597 00                                 8418          DC    X'00'
                                            8419 rd_kafka_mock_topic_new DCCPRLG CINDEX=1985,BASER=12,FRAME=256,ENTRY=NO*
                                                                ,ARCH=ZARCH,LNAMEADDR=@LNAME1985
                                            8420          macro
                                            8421          dccextrn &m
                                            8422          gblc    &$dccext(1000)
                                            8423          gbla    &$dccexti
                                            8424          lcla    &i
                                            8425 &$dccext(&$dccexti+1) setc    '&m'
                                            8426 &i       seta    1
                                            8427 .loop    aif    (&i gt &$dccexti).around
                                            8428          aif    ('&$dccext(&i)' eq '&m').getout
                                            8429 &i       seta    &i+1
                                            8430          ago     .loop
                                            8431 .around  anop
                                            8432 &$dccexti seta &$dccexti+1
                                            8433          extrn  &m
                                            8434 .getout  anop
                                            8435          mend
00005598                                    8436+$eye0172    ds    0d                                                    02-DCCCA
                                                                                                                           Page  174 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005598 C4C3C3                             8437+         dc cl3'DCC'                                                    02-DCCCA
0000559B 01                                 8438+         dc xl1'01' format one                                          02-DCCCA
0000559C 00000000                           8439+         dc a(0)                                                        02-DCCCA
000055A0 000000000000560A                   8440+         dc ad(@PER_1985)                                               02-DCCCA
000055A8 0000000000000100                   8441+         dc ad(256)                                                     02-DCCCA
000055B0 0000000000000000                   8442+         dc ad(0)                                                       02-DCCCA
000055B8 0000000000001000                   8443+         dc ad(4096)                                                    02-DCCCA
000055C0 20                                 8444+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000055C1 03                                 8445+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000055C2 03                                 8446+         dc al1(3)                                                      02-DCCCA
000055C3 08                                 8447+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000055C4 00                                 8448+         dc bl.8'00000000'                                              02-DCCCA
000055C5 000000                             8449+         dc al3(0)                                                      02-DCCCA
000055C8 000000000000557C                   8450+         dc ad(@LNAME1985)                                              02-DCCCA
000055D0                                    8451+         ds 0d                                                          02-DCCCA
000055D0 0000000000005598                   8452+         dc ad($eye0172)                                                02-DCCCA
000055D8 0000000000000000                   8453+         dc ad(0)                                                       02-DCCCA
000055E0                                    8454+         ds    0d                                                       01-DCCPR
000055E0                                    8455+rd_kafka_mock_topic_new ds 0d                                           01-DCCPR
000055E0                                    8456+@REGION_1985_1 ds 0h                                                    01-DCCPR
000055E0 EBEC D008 0024          00000008   8457+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000055E6 E3E0 D088 0004          00000088   8458+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000055EC E3C0 D090 0004          00000090   8459+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000055F2 B904 002E                          8460+         lgr   2,14                copy addr of our savearea            01-DCCPR
000055F6 E3B0 C018 0004          00000018   8461+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000055FC A7EB 0100               00000100   8462+         aghi  14,256              increase by frame size               01-DCCPR
00005600 E3E0 C020 0021          00000020   8463+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00005606 4720 B020               00000020   8464+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000560A                                    8465+@PER_1985 ds   0h                                                       01-DCCPR
0000560A EBDE 2080 0024          00000080   8466+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00005610 E3C0 2090 0024          00000090   8467+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00005616 B904 00D2                          8468+         lgr   13,2                set real frame pointer               01-DCCPR
0000561A B904 00CF                          8469+         lgr   12,15               set base reg                         01-DCCPR
                        000055E0            8470+         using @REGION_1985_1,12                                        01-DCCPR
0000561E B904 0061                          8471          LGR   6,1         ; ptr to parm area
                                            8472 * ******* End of Prologue
                                            8473 * *
00005622 E330 6000 0004          00000000   8474          LG    3,0(0,6)    ; mcluster
00005628 5840 6014               00000014   8475          L     4,20(0,6)   ; partition_cnt
                                            8476 * ***           rd_kafka_mock_topic_t *mtopic;
                                            8477 * ***           int i;
                                            8478 * ***
                                            8479 * ***           mtopic = rd_calloc(1, sizeof(*mtopic));
0000562C E548 D0B0 0001          000000B0   8480          MVGHI 176(13),1
00005632 E548 D0B8 0030          000000B8   8481          MVGHI 184(13),48
00005638 4110 D0B0               000000B0   8482          LA    1,176(0,13)
0000563C E320 C0C8 0004          000056A8   8483          LG    2,@lit_1985_260 ; rd_calloc
00005642 B904 00F2                          8484          LGR   15,2
00005646                                    8485 @@gen_label395 DS    0H
00005646 05EF                               8486          BALR  14,15
00005648                                    8487 @@gen_label396 DS    0H
00005648 B904 005F                          8488          LGR   5,15
                                                                                                                           Page  175 
  Active Usings: @REGION_1985_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8489 * ***           mtopic->name = rd_strdup(topic);
0000564C E3F0 6008 0004          00000008   8490          LG    15,8(0,6)   ; topic
00005652 E3F0 D0B0 0024          000000B0   8491          STG   15,176(0,13)
00005658 4110 D0B0               000000B0   8492          LA    1,176(0,13)
0000565C E3F0 C0D0 0004          000056B0   8493          LG    15,@lit_1985_261 ; rd_strdup
00005662                                    8494 @@gen_label397 DS    0H
00005662 05EF                               8495          BALR  14,15
00005664                                    8496 @@gen_label398 DS    0H
00005664 E3F0 5010 0024          00000010   8497          STG   15,16(0,5)
                                            8498 * ***           mtopic->cluster = mcluster;
0000566A E330 5028 0024          00000028   8499          STG   3,40(0,5)   ; offset of cluster in rd_kafka_mock_topic_s
                                            8500 * ***
                                            8501 * ***           mtopic->partition_cnt = partition_cnt;
00005670 5040 5020               00000020   8502          ST    4,32(0,5)   ; offset of partition_cnt in rd_kafka_mock_t*
                                                                opic_s
                                            8503 * ***           mtopic->partitions = rd_calloc(partition_cnt,
                                            8504 * ***                                          sizeof(*mtopic->partiti\
                                            8505 * ons));
00005674 B914 00F4                          8506          LGFR  15,4
00005678 E3F0 D0B0 0024          000000B0   8507          STG   15,176(0,13)
0000567E E548 D0B8 00A0          000000B8   8508          MVGHI 184(13),160
00005684 4110 D0B0               000000B0   8509          LA    1,176(0,13)
00005688 B904 00F2                          8510          LGR   15,2
0000568C                                    8511 @@gen_label399 DS    0H
0000568C 05EF                               8512          BALR  14,15
0000568E                                    8513 @@gen_label400 DS    0H
0000568E E3F0 5018 0024          00000018   8514          STG   15,24(0,5)
                                            8515 * ***
                                            8516 * ***           for (i = 0 ; i < partition_cnt ; i++)
00005694 A728 0000               00000000   8517          LHI   2,0         ; 0
00005698 47F0 C140               00005720   8518          B     @L803
000056A0                                    8519          DS    0D
000056A0 00000100                           8520 @FRAMESIZE_1985 DC F'256'
000056A4 00000000
000056A8 0000000000000728                   8521 @lit_1985_260 DC AD(rd_calloc)
000056B0 0000000000000C80                   8522 @lit_1985_261 DC AD(rd_strdup)
000056B8 00000000000051B8                   8523 @lit_1985_264 DC AD(rd_kafka_mock_partition_init)
000056C0 0000000000000000                   8524 @lit_1985_268 DC AD(rd_kafka_log0)
000056C8 0000000000010840                   8525 @lit_1985_267 DC AD(@strings@)
000056D0                                    8526 @L802    DS    0H
                                            8527 * ***                   rd_kafka_mock_partition_init(mtopic, &mtopic->\
                                            8528 * partitions[i],
                                            8529 * ***                                                i, replication_fa\
                                            8530 * ctor);
000056D0 E350 D0B0 0024          000000B0   8531          STG   5,176(0,13)
000056D6 B914 00F2                          8532          LGFR  15,2
000056DA E310 5018 0004          00000018   8533          LG    1,24(0,5)   ; offset of partitions in rd_kafka_mock_topi*
                                                                c_s
000056E0 EB7F 0002 000D          00000002   8534          SLLG  7,15,2(0)   ;   .
000056E6 B90A 007F                          8535          ALGR  7,15        ;   .
000056EA EB77 0005 000D          00000005   8536          SLLG  7,7,5(0)    ;   .
000056F0 41F7 1000               00000000   8537          LA    15,0(7,1)
                                                                                                                           Page  176 
  Active Usings: @REGION_1985_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000056F4 E3F0 D0B8 0024          000000B8   8538          STG   15,184(0,13)
000056FA B914 00F2                          8539          LGFR  15,2
000056FE E3F0 D0C0 0024          000000C0   8540          STG   15,192(0,13)
00005704 E3F0 601C 0014          0000001C   8541          LGF   15,28(0,6)  ; replication_factor
0000570A E3F0 D0C8 0024          000000C8   8542          STG   15,200(0,13)
00005710 4110 D0B0               000000B0   8543          LA    1,176(0,13)
00005714 E3F0 C0D8 0004          000056B8   8544          LG    15,@lit_1985_264 ; rd_kafka_mock_partition_init
0000571A                                    8545 @@gen_label401 DS    0H
0000571A 05EF                               8546          BALR  14,15
0000571C                                    8547 @@gen_label402 DS    0H
0000571C A72A 0001               00000001   8548          AHI   2,1
00005720                                    8549 @L803    DS    0H
00005720 1924                               8550          CR    2,4
00005722 4740 C0F0               000056D0   8551          BL    @L802
                                            8552 * ***
                                            8553 * ***           do {  (mtopic)->link .tqe_next = (((void *)0)); (mtopi\
                                            8554 * c)->link .tqe_prev = (&mcluster->topics)->tqh_last; *(&mcluster->top\
                                            8555 * ics)->tqh_last = (mtopic); (&mcluster->topics)->tqh_last = &(mtopic)\
                                            8556 * ->link .tqe_next; } while ( 0);
00005726                                    8557 @L806    DS    0H
00005726 A7F9 0000               00000000   8558          LGHI  15,0        ; 0
0000572A E3F0 5000 0024          00000000   8559          STG   15,0(0,5)   ; mtopic
00005730 E3F0 3050 0004          00000050   8560          LG    15,80(0,3)  ; offset of tqh_last in 0000171
00005736 E3F0 5008 0024          00000008   8561          STG   15,8(0,5)   ; offset of tqe_prev in 0000168
0000573C E3F0 3050 0004          00000050   8562          LG    15,80(0,3)  ; offset of tqh_last in 0000171
00005742 E350 F000 0024          00000000   8563          STG   5,0(0,15)
00005748 E350 3050 0024          00000050   8564          STG   5,80(0,3)   ; offset of tqh_last in 0000171
                                            8565 * ***           mcluster->topic_cnt++;
0000574E 58F0 3058               00000058   8566          L     15,88(0,3)
00005752 A7FA 0001               00000001   8567          AHI   15,1
00005756 50F0 3058               00000058   8568          ST    15,88(0,3)
                                            8569 * ***
                                            8570 * ***           do { if ((((mcluster->rk)->rk_conf.debug & (0x10000)))\
                                            8571 * ) rd_kafka_log0(&mcluster->rk->rk_conf,mcluster->rk,((void *)0), 7,(\
                                            8572 * 0x10000), "MOCK","Created topic \"%s\" with %d partition(s) and " "r\
                                            8573 * eplication-factor %d", mtopic->name, mtopic->partition_cnt, replicat\
                                            8574 * ion_factor); } while (0);
0000575A                                    8575 @L809    DS    0H
0000575A E3F0 3020 0004          00000020   8576          LG    15,32(0,3)  ; offset of rk in rd_kafka_mock_cluster_s
00005760 9101 F321      00000321 00000001   8577          TM    801(15),1
00005764 4780 C206               000057E6   8578          BZ    @L812
00005768 E3F0 3020 0004          00000020   8579          LG    15,32(0,3)  ; offset of rk in rd_kafka_mock_cluster_s
0000576E 41F0 F210               00000210   8580          LA    15,528(0,15)
00005772 E3F0 D0B0 0024          000000B0   8581          STG   15,176(0,13)
00005778 E3F0 3020 0004          00000020   8582          LG    15,32(0,3)
0000577E E3F0 D0B8 0024          000000B8   8583          STG   15,184(0,13)
00005784 D707 D0C0 D0C0 000000C0 000000C0   8584          XC    192(8,13),192(13)
0000578A E548 D0C8 0007          000000C8   8585          MVGHI 200(13),7
00005790 C0FF 0001 0000                     8586          LLILF 15,X'00010000' ; 65536
00005796 E3F0 D0D0 0024          000000D0   8587          STG   15,208(0,13)
0000579C E3F0 C0E8 0004          000056C8   8588          LG    15,@lit_1985_267
000057A2 4110 F15E               0000015E   8589          LA    1,350(0,15)
                                                                                                                           Page  177 
  Active Usings: @REGION_1985_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000057A6 E310 D0D8 0024          000000D8   8590          STG   1,216(0,13)
000057AC 41F0 F2C4               000002C4   8591          LA    15,708(0,15)
000057B0 E3F0 D0E0 0024          000000E0   8592          STG   15,224(0,13)
000057B6 E3F0 5010 0004          00000010   8593          LG    15,16(0,5)
000057BC E3F0 D0E8 0024          000000E8   8594          STG   15,232(0,13)
000057C2 E3F0 5020 0014          00000020   8595          LGF   15,32(0,5)
000057C8 E3F0 D0F0 0024          000000F0   8596          STG   15,240(0,13)
000057CE E3F0 601C 0014          0000001C   8597          LGF   15,28(0,6)  ; replication_factor
000057D4 E3F0 D0F8 0024          000000F8   8598          STG   15,248(0,13)
000057DA 4110 D0B0               000000B0   8599          LA    1,176(0,13)
000057DE E3F0 C0E0 0004          000056C0   8600          LG    15,@lit_1985_268 ; rd_kafka_log0
000057E4                                    8601 @@gen_label405 DS    0H
000057E4 05EF                               8602          BALR  14,15
000057E6                                    8603 @@gen_label406 DS    0H
000057E6                                    8604 @L812    DS    0H
                                            8605 * ***
                                            8606 * ***
                                            8607 * ***
                                            8608 * ***
                                            8609 * ***           return mtopic;
000057E6 B904 00F5                          8610          LGR   15,5
                                            8611 * ***   }
                                            8612 * * **** Start of Epilogue
                                            8613          DCCEPIL
000057EA                                    8614+         ds 0h                                                          01-DCCEP
                                            8615+* Epilog
000057EA D707 D088 D088 00000088 00000088   8616+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
000057F0 E3D0 D080 0004          00000080   8617+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000057F6 E3C0 D090 0004          00000090   8618+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000057FC E3B0 C018 0004          00000018   8619+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00005802 E3C0 B010 0021          00000010   8620+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00005808 E3E0 D008 0004          00000008   8621+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000580E EB1C D020 0004          00000020   8622+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00005814 078E                               8623+         bcr 8,14                if same dsab, just return              01-DCCEP
00005816 E3F0 D010 0024          00000010   8624+         stg 15,16(0,13)         save return code                       01-DCCEP
0000581C E300 D018 0024          00000018   8625+         stg 0,24(0,13)          save more return code                  01-DCCEP
00005822 E3F0 D090 0004          00000090   8626+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00005828 E3F0 F018 0004          00000018   8627+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000582E 47F0 F040               00000040   8628+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            8629+* End of Epilog
                                            8630 * * **** End of Epilogue
                                            8631          DROP  12
                                            8632 *
                                            8633 *   DSECT for automatic variables in "rd_kafka_mock_topic_new"
                                            8634 *      (FUNCTION #1985)
                                            8635 *
00000000                00000000 000000AC   8636 @AUTO#rd_kafka_mock_topic_new DSECT
00000000                                    8637          DS    XL168
000000A8                                    8638 rd_kafka_mock_topic_new#i#0 DS 1F ; i
                                            8639 *
00005832                00000000 00010480   8640 @CODE    CSECT
                                            8641 *
                                                                                                                           Page  178 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8642 *
                                            8643 *
                                            8644 * ....... start of rd_kafka_mock_topic_find
                                            8645 rd_kafka_mock_topic_find ALIAS X'99846D92818692816D949683926DA396978983*
                                                                6D86899584'
00005832                                    8646 @LNAME1942 DS  0H
00005832 00000018                           8647          DC    X'00000018'
00005836 99846D9281869281                   8648          DC    C'rd_kafka_mock_topic_find'
0000584E 00                                 8649          DC    X'00'
                                            8650 rd_kafka_mock_topic_find DCCPRLG CINDEX=1942,BASER=12,FRAME=176,SAVEARE*
                                                                A=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1942
                                            8651          macro
                                            8652          dccextrn &m
                                            8653          gblc    &$dccext(1000)
                                            8654          gbla    &$dccexti
                                            8655          lcla    &i
                                            8656 &$dccext(&$dccexti+1) setc    '&m'
                                            8657 &i       seta    1
                                            8658 .loop    aif    (&i gt &$dccexti).around
                                            8659          aif    ('&$dccext(&i)' eq '&m').getout
                                            8660 &i       seta    &i+1
                                            8661          ago     .loop
                                            8662 .around  anop
                                            8663 &$dccexti seta &$dccexti+1
                                            8664          extrn  &m
                                            8665 .getout  anop
                                            8666          mend
00005850                                    8667+$eye0175    ds    0d                                                    02-DCCCA
00005850 C4C3C3                             8668+         dc cl3'DCC'                                                    02-DCCCA
00005853 01                                 8669+         dc xl1'01' format one                                          02-DCCCA
00005854 00000000                           8670+         dc a(0)                                                        02-DCCCA
00005858 0000000000000000                   8671+         dc ad(0)                                                       02-DCCCA
00005860 00000000000000B0                   8672+         dc ad(176)                                                     02-DCCCA
00005868 0000000000000000                   8673+         dc ad(0)                                                       02-DCCCA
00005870 0000000000001000                   8674+         dc ad(4096)                                                    02-DCCCA
00005878 20                                 8675+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005879 03                                 8676+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000587A 03                                 8677+         dc al1(3)                                                      02-DCCCA
0000587B 08                                 8678+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000587C 00                                 8679+         dc bl.8'00000000'                                              02-DCCCA
0000587D 000000                             8680+         dc al3(0)                                                      02-DCCCA
00005880 0000000000005832                   8681+         dc ad(@LNAME1942)                                              02-DCCCA
00005888                                    8682+         ds 0d                                                          02-DCCCA
00005888 0000000000005850                   8683+         dc ad($eye0175)                                                02-DCCCA
00005890 0000000000000000                   8684+         dc ad(0)                                                       02-DCCCA
00005898                                    8685+         ds    0d                                                       01-DCCPR
                                            8686+         entry rd_kafka_mock_topic_find                                 01-DCCPR
00005898                                    8687+rd_kafka_mock_topic_find ds 0d                                          01-DCCPR
00005898                                    8688+@REGION_1942_1 ds 0h                                                    01-DCCPR
00005898 EBEC D008 0024          00000008   8689+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000589E B904 00CF                          8690+         lgr   12,15               set base reg                         01-DCCPR
                        00005898            8691+         using @REGION_1942_1,12                                        01-DCCPR
                                                                                                                           Page  179 
  Active Usings: @REGION_1942_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8692 * ******* End of Prologue
                                            8693 * *
                                            8694 * ***           const rd_kafka_mock_topic_t *mtopic;
                                            8695 * ***
                                            8696 * ***           for ((mtopic) = ((&mcluster->topics)->tqh_first); (mto\
                                            8697 * pic) != (((void *)0)); (mtopic) = ((mtopic)->link .tqe_next)) {
000058A2 E3F0 1000 0004          00000000   8698          LG    15,0(0,1)   ; mcluster
000058A8 E3F0 F048 0004          00000048   8699          LG    15,72(0,15) ; offset of topics in rd_kafka_mock_cluster_*
                                                                s
000058AE 47F0 C05A               000058F2   8700          B     @L814
000058B2                                    8701 @L813    DS    0H
                                            8702 * ***                   if (!__strcmp(mtopic->name,name))
000058B2 E320 F010 0004          00000010   8703          LG    2,16(0,15)
000058B8 E330 1008 0004          00000008   8704          LG    3,8(0,1)
000058BE 4100 0000               00000000   8705          LA    0,0(0,0)
000058C2 A749 0000               00000000   8706          LGHI  4,0
000058C6                                    8707 @@gen_label407 DS 0H
000058C6 B25D 0023                          8708          CLST  2,3
000058CA 4710 C02E               000058C6   8709          BC  1,@@gen_label407
000058CE 4780 C04A               000058E2   8710          BE    @@gen_label408
000058D2 E340 2000 0090          00000000   8711          LLGC  4,0(0,2)
000058D8 E320 3000 0090          00000000   8712          LLGC  2,0(0,3)
000058DE B90B 0042                          8713          SLGR  4,2
000058E2                                    8714 @@gen_label408 DS 0H
000058E2 1244                               8715          LTR   4,4
000058E4 4770 C054               000058EC   8716          BNZ   @L817
                                            8717 * ***                           return (rd_kafka_mock_topic_t *)mtopic\
                                            8718 * ;
000058E8 47F0 C066               000058FE   8719          B     @ret_lab_1942
000058EC                                    8720 @L817    DS    0H
                                            8721 * ***           }
000058EC E3F0 F000 0004          00000000   8722          LG    15,0(0,15)  ; mtopic
000058F2                                    8723 @L814    DS    0H
000058F2 B902 002F                          8724          LTGR  2,15
000058F6 4770 C01A               000058B2   8725          BNE   @L813
                                            8726 * ***
                                            8727 * ***           return ((void *)0);
000058FA A7F9 0000               00000000   8728          LGHI  15,0        ; 0
                                            8729 * ***   }
000058FE                                    8730 @ret_lab_1942 DS 0H
                                            8731 * * **** Start of Epilogue
                                            8732          DCCEPIL
000058FE                                    8733+         ds 0h                                                          01-DCCEP
                                            8734+* Epilog
                                            8735+* Epilog
000058FE E3E0 D008 0004          00000008   8736+         lg    14,8(,13) restore the reg                                01-DCCEP
00005904 EB1C D020 0004          00000020   8737+         lmg   1,12,32(13)                                              01-DCCEP
0000590A 07FE                               8738+         br   14                                                        01-DCCEP
                                            8739+* End of Epilog
                                            8740 * * **** End of Epilogue
                                            8741          DROP  12
                                            8742 *
                                                                                                                           Page  180 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8743 *   DSECT for automatic variables in "rd_kafka_mock_topic_find"
                                            8744 *      (FUNCTION #1942)
                                            8745 *
00000000                00000000 000000A8   8746 @AUTO#rd_kafka_mock_topic_find DSECT
00000000                                    8747          DS    XL168
                                            8748 *
0000590C                00000000 00010480   8749 @CODE    CSECT
                                            8750 *
                                            8751 *
                                            8752 *
                                            8753 * ....... start of rd_kafka_mock_topic_find_by_kstr
                                            8754 rd_kafka_mock_topic_find_by_kstr ALIAS X'99846D92818692816D949683926DA3*
                                                                969789836D868995846D82A86D92A2A399'
0000590C                                    8755 @LNAME1943 DS  0H
0000590C 00000020                           8756          DC    X'00000020'
00005910 99846D9281869281                   8757          DC    C'rd_kafka_mock_topic_find_by_kstr'
00005930 00                                 8758          DC    X'00'
                                            8759 rd_kafka_mock_topic_find_by_kstr DCCPRLG CINDEX=1943,BASER=12,FRAME=176*
                                                                ,SAVEAREA=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1943
                                            8760          macro
                                            8761          dccextrn &m
                                            8762          gblc    &$dccext(1000)
                                            8763          gbla    &$dccexti
                                            8764          lcla    &i
                                            8765 &$dccext(&$dccexti+1) setc    '&m'
                                            8766 &i       seta    1
                                            8767 .loop    aif    (&i gt &$dccexti).around
                                            8768          aif    ('&$dccext(&i)' eq '&m').getout
                                            8769 &i       seta    &i+1
                                            8770          ago     .loop
                                            8771 .around  anop
                                            8772 &$dccexti seta &$dccexti+1
                                            8773          extrn  &m
                                            8774 .getout  anop
                                            8775          mend
00005938                                    8776+$eye0178    ds    0d                                                    02-DCCCA
00005938 C4C3C3                             8777+         dc cl3'DCC'                                                    02-DCCCA
0000593B 01                                 8778+         dc xl1'01' format one                                          02-DCCCA
0000593C 00000000                           8779+         dc a(0)                                                        02-DCCCA
00005940 0000000000000000                   8780+         dc ad(0)                                                       02-DCCCA
00005948 00000000000000B0                   8781+         dc ad(176)                                                     02-DCCCA
00005950 0000000000000000                   8782+         dc ad(0)                                                       02-DCCCA
00005958 0000000000001000                   8783+         dc ad(4096)                                                    02-DCCCA
00005960 20                                 8784+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005961 03                                 8785+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00005962 03                                 8786+         dc al1(3)                                                      02-DCCCA
00005963 08                                 8787+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00005964 00                                 8788+         dc bl.8'00000000'                                              02-DCCCA
00005965 000000                             8789+         dc al3(0)                                                      02-DCCCA
00005968 000000000000590C                   8790+         dc ad(@LNAME1943)                                              02-DCCCA
00005970                                    8791+         ds 0d                                                          02-DCCCA
00005970 0000000000005938                   8792+         dc ad($eye0178)                                                02-DCCCA
                                                                                                                           Page  181 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005978 0000000000000000                   8793+         dc ad(0)                                                       02-DCCCA
00005980                                    8794+         ds    0d                                                       01-DCCPR
                                            8795+         entry rd_kafka_mock_topic_find_by_kstr                         01-DCCPR
00005980                                    8796+rd_kafka_mock_topic_find_by_kstr ds 0d                                  01-DCCPR
00005980                                    8797+@REGION_1943_1 ds 0h                                                    01-DCCPR
00005980 EBEC D008 0024          00000008   8798+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00005986 B904 00CF                          8799+         lgr   12,15               set base reg                         01-DCCPR
                        00005980            8800+         using @REGION_1943_1,12                                        01-DCCPR
                                            8801 * ******* End of Prologue
                                            8802 * *
0000598A E3F0 1008 0004          00000008   8803          LG    15,8(0,1)   ; kname
                                            8804 * ***           const rd_kafka_mock_topic_t *mtopic;
                                            8805 * ***
                                            8806 * ***           for ((mtopic) = ((&mcluster->topics)->tqh_first); (mto\
                                            8807 * pic) != (((void *)0)); (mtopic) = ((mtopic)->link .tqe_next)) {
00005990 E310 1000 0004          00000000   8808          LG    1,0(0,1)    ; mcluster
00005996 E310 1048 0004          00000048   8809          LG    1,72(0,1)   ; offset of topics in rd_kafka_mock_cluster_*
                                                                s
0000599C 47F0 C0CC               00005A4C   8810          B     @L819
000059A0                                    8811 @L818    DS    0H
                                            8812 * ***                   if (!__strncmp(mtopic->name,kname->str,(((knam\
                                            8813 * e)->len) == -1 ? 0 : ((kname)->len))) &&
000059A0 E55C F000 FFFF          00000000   8814          CHSI  0(15),-1
000059A6 4770 C032               000059B2   8815          BNE   @L822
000059AA A728 0000               00000000   8816          LHI   2,0         ; 0
000059AE 47F0 C036               000059B6   8817          B     @L823
000059B2                                    8818 @L822    DS    0H
000059B2 5820 F000               00000000   8819          L     2,0(0,15)   ; kname
000059B6                                    8820 @L823    DS    0H
000059B6 B914 0022                          8821          LGFR  2,2
000059BA E330 1010 0004          00000010   8822          LG    3,16(0,1)
000059C0 E340 F008 0004          00000008   8823          LG    4,8(0,15)
000059C6 A759 0000               00000000   8824          LGHI  5,0
000059CA B902 0022                          8825          LTGR  2,2
000059CE 4780 C08C               00005A0C   8826          BZ    @@gen_label412
000059D2                                    8827 @@gen_label413 DS 0H
000059D2 D500 3000 4000 00000000 00000000   8828          CLC   0(1,3),0(4)
000059D8 4780 C06E               000059EE   8829          BE    @@gen_label414
000059DC 4350 3000               00000000   8830          IC    5,0(0,3)
000059E0 E330 4000 0090          00000000   8831          LLGC  3,0(0,4)
000059E6 B90B 0053                          8832          SLGR  5,3
000059EA 47F0 C08C               00005A0C   8833          B     @@gen_label412
000059EE                                    8834 @@gen_label414 DS 0H
000059EE 4140 4001               00000001   8835          LA    4,1(0,4)
000059F2 4350 3000               00000000   8836          IC    5,0(0,3)
000059F6 4130 3001               00000001   8837          LA    3,1(0,3)
000059FA B902 0055                          8838          LTGR  5,5
000059FE 4780 C08C               00005A0C   8839          BZ    @@gen_label412
00005A02 E320 C052 0046          000059D2   8840          BCTG  2,@@gen_label413
00005A08 A759 0000               00000000   8841          LGHI  5,0
00005A0C                                    8842 @@gen_label412 DS 0H
00005A0C 1255                               8843          LTR   5,5
                                                                                                                           Page  182 
  Active Usings: @REGION_1943_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005A0E 4770 C0C6               00005A46   8844          BNZ   @L826
                                            8845 * ***
                                            8846 * ***                       mtopic->name[(((kname)->len) == -1 ? 0 : (\
                                            8847 * (kname)->len))] == '\0')
00005A12 E320 1010 0004          00000010   8848          LG    2,16(0,1)   ; offset of name in rd_kafka_mock_topic_s
00005A18 E55C F000 FFFF          00000000   8849          CHSI  0(15),-1
00005A1E 4770 C0AA               00005A2A   8850          BNE   @L824
00005A22 A738 0000               00000000   8851          LHI   3,0         ; 0
00005A26 47F0 C0AE               00005A2E   8852          B     @L825
00005A2A                                    8853 @L824    DS    0H
00005A2A 5830 F000               00000000   8854          L     3,0(0,15)   ; kname
00005A2E                                    8855 @L825    DS    0H
00005A2E B914 0033                          8856          LGFR  3,3
00005A32 4123 2000               00000000   8857          LA    2,0(3,2)
00005A36 9500 2000      00000000 00000000   8858          CLI   0(2),0
00005A3A 4770 C0C6               00005A46   8859          BNE   @L826
                                            8860 * ***                           return (rd_kafka_mock_topic_t *)mtopic\
                                            8861 * ;
00005A3E B904 00F1                          8862          LGR   15,1
00005A42 47F0 C0D8               00005A58   8863          B     @ret_lab_1943
00005A46                                    8864 @L826    DS    0H
                                            8865 * ***           }
00005A46 E310 1000 0004          00000000   8866          LG    1,0(0,1)    ; mtopic
00005A4C                                    8867 @L819    DS    0H
00005A4C B902 0021                          8868          LTGR  2,1
00005A50 4770 C020               000059A0   8869          BNE   @L818
                                            8870 * ***
                                            8871 * ***           return ((void *)0);
00005A54 A7F9 0000               00000000   8872          LGHI  15,0        ; 0
                                            8873 * ***   }
00005A58                                    8874 @ret_lab_1943 DS 0H
                                            8875 * * **** Start of Epilogue
                                            8876          DCCEPIL
00005A58                                    8877+         ds 0h                                                          01-DCCEP
                                            8878+* Epilog
                                            8879+* Epilog
00005A58 E3E0 D008 0004          00000008   8880+         lg    14,8(,13) restore the reg                                01-DCCEP
00005A5E EB1C D020 0004          00000020   8881+         lmg   1,12,32(13)                                              01-DCCEP
00005A64 07FE                               8882+         br   14                                                        01-DCCEP
                                            8883+* End of Epilog
                                            8884 * * **** End of Epilogue
                                            8885          DROP  12
                                            8886 *
                                            8887 *   DSECT for automatic variables in "rd_kafka_mock_topic_find_by_kstr"
                                            8888 *      (FUNCTION #1943)
                                            8889 *
00000000                00000000 000000A8   8890 @AUTO#rd_kafka_mock_topic_find_by_kstr DSECT
00000000                                    8891          DS    XL168
                                            8892 *
00005A66                00000000 00010480   8893 @CODE    CSECT
                                            8894 *
                                            8895 *
                                                                                                                           Page  183 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8896 *
                                            8897 * ....... start of rd_kafka_mock_topic_auto_create
                                            8898 rd_kafka_mock_topic_auto_create ALIAS X'99846D92818692816D949683926DA39*
                                                                69789836D81A4A3966D83998581A385'
00005A66                                    8899 @LNAME1941 DS  0H
00005A66 0000001F                           8900          DC    X'0000001F'
00005A6A 99846D9281869281                   8901          DC    C'rd_kafka_mock_topic_auto_create'
00005A89 00                                 8902          DC    X'00'
                                            8903 rd_kafka_mock_topic_auto_create DCCPRLG CINDEX=1941,BASER=12,FRAME=200,*
                                                                ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1941
                                            8904          macro
                                            8905          dccextrn &m
                                            8906          gblc    &$dccext(1000)
                                            8907          gbla    &$dccexti
                                            8908          lcla    &i
                                            8909 &$dccext(&$dccexti+1) setc    '&m'
                                            8910 &i       seta    1
                                            8911 .loop    aif    (&i gt &$dccexti).around
                                            8912          aif    ('&$dccext(&i)' eq '&m').getout
                                            8913 &i       seta    &i+1
                                            8914          ago     .loop
                                            8915 .around  anop
                                            8916 &$dccexti seta &$dccexti+1
                                            8917          extrn  &m
                                            8918 .getout  anop
                                            8919          mend
00005A90                                    8920+$eye0181    ds    0d                                                    02-DCCCA
00005A90 C4C3C3                             8921+         dc cl3'DCC'                                                    02-DCCCA
00005A93 01                                 8922+         dc xl1'01' format one                                          02-DCCCA
00005A94 00000000                           8923+         dc a(0)                                                        02-DCCCA
00005A98 0000000000005B02                   8924+         dc ad(@PER_1941)                                               02-DCCCA
00005AA0 00000000000000C8                   8925+         dc ad(200)                                                     02-DCCCA
00005AA8 0000000000000000                   8926+         dc ad(0)                                                       02-DCCCA
00005AB0 0000000000001000                   8927+         dc ad(4096)                                                    02-DCCCA
00005AB8 20                                 8928+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005AB9 03                                 8929+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00005ABA 03                                 8930+         dc al1(3)                                                      02-DCCCA
00005ABB 08                                 8931+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00005ABC 00                                 8932+         dc bl.8'00000000'                                              02-DCCCA
00005ABD 000000                             8933+         dc al3(0)                                                      02-DCCCA
00005AC0 0000000000005A66                   8934+         dc ad(@LNAME1941)                                              02-DCCCA
00005AC8                                    8935+         ds 0d                                                          02-DCCCA
00005AC8 0000000000005A90                   8936+         dc ad($eye0181)                                                02-DCCCA
00005AD0 0000000000000000                   8937+         dc ad(0)                                                       02-DCCCA
00005AD8                                    8938+         ds    0d                                                       01-DCCPR
                                            8939+         entry rd_kafka_mock_topic_auto_create                          01-DCCPR
00005AD8                                    8940+rd_kafka_mock_topic_auto_create ds 0d                                   01-DCCPR
00005AD8                                    8941+@REGION_1941_1 ds 0h                                                    01-DCCPR
00005AD8 EBEC D008 0024          00000008   8942+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00005ADE E3E0 D088 0004          00000088   8943+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00005AE4 E3C0 D090 0004          00000090   8944+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00005AEA B904 002E                          8945+         lgr   2,14                copy addr of our savearea            01-DCCPR
                                                                                                                           Page  184 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005AEE E3B0 C018 0004          00000018   8946+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00005AF4 A7EB 00C8               000000C8   8947+         aghi  14,200              increase by frame size               01-DCCPR
00005AF8 E3E0 C020 0021          00000020   8948+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00005AFE 4720 B020               00000020   8949+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00005B02                                    8950+@PER_1941 ds   0h                                                       01-DCCPR
00005B02 EBDE 2080 0024          00000080   8951+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00005B08 E3C0 2090 0024          00000090   8952+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00005B0E B904 00D2                          8953+         lgr   13,2                set real frame pointer               01-DCCPR
00005B12 B904 00CF                          8954+         lgr   12,15               set base reg                         01-DCCPR
                        00005AD8            8955+         using @REGION_1941_1,12                                        01-DCCPR
00005B16 B904 0031                          8956          LGR   3,1         ; ptr to parm area
                                            8957 * ******* End of Prologue
                                            8958 * *
                                            8959 * ***           ((!rd_kafka_mock_topic_find(mcluster, topic)) ? (void)\
                                            8960 * 0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.\
                                            8961 * c", 474, "!rd_kafka_mock_topic_find(mcluster, topic)"));
00005B1A E320 3000 0004          00000000   8962          LG    2,0(0,3)    ; mcluster
00005B20 E320 D0A8 0024          000000A8   8963          STG   2,168(0,13)
00005B26 E3F0 3008 0004          00000008   8964          LG    15,8(0,3)   ; topic
00005B2C E3F0 D0B0 0024          000000B0   8965          STG   15,176(0,13)
00005B32 4110 D0A8               000000A8   8966          LA    1,168(0,13)
00005B36 E3F0 C0D0 0004          00005BA8   8967          LG    15,@lit_1941_274 ; rd_kafka_mock_topic_find
00005B3C                                    8968 @@gen_label419 DS    0H
00005B3C 05EF                               8969          BALR  14,15
00005B3E                                    8970 @@gen_label420 DS    0H
00005B3E B902 00FF                          8971          LTGR  15,15
00005B42 4780 C0AA               00005B82   8972          BZ    @L828
00005B46                                    8973 @L827    DS    0H
00005B46 E3F0 C0E8 0004          00005BC0   8974          LG    15,@lit_1941_275
00005B4C 41F0 F202               00000202   8975          LA    15,514(0,15)
00005B50 E3F0 D0A8 0024          000000A8   8976          STG   15,168(0,13)
00005B56 E3F0 C0E0 0004          00005BB8   8977          LG    15,@lit_1941_276
00005B5C 4110 F0FA               000000FA   8978          LA    1,250(0,15)
00005B60 E310 D0B0 0024          000000B0   8979          STG   1,176(0,13)
00005B66 E548 D0B8 01DA          000000B8   8980          MVGHI 184(13),474
00005B6C 41F0 F306               00000306   8981          LA    15,774(0,15)
00005B70 E3F0 D0C0 0024          000000C0   8982          STG   15,192(0,13)
00005B76 4110 D0A8               000000A8   8983          LA    1,168(0,13)
00005B7A E3F0 C0D8 0004          00005BB0   8984          LG    15,@lit_1941_277 ; __assert
00005B80                                    8985 @@gen_label422 DS    0H
00005B80 05EF                               8986          BALR  14,15
00005B82                                    8987 @@gen_label423 DS    0H
00005B82                                    8988 @L828    DS    0H
                                            8989 * ***           *errp = 0;
00005B82 E3F0 3018 0004          00000018   8990          LG    15,24(0,3)  ; errp
00005B88 E54C F000 0000          00000000   8991          MVHI  0(15),0     ; errp
                                            8992 * ***           return rd_kafka_mock_topic_new(mcluster, topic,
                                            8993 * ***                                          partition_cnt == -1 ?
                                            8994 * ***                                          mcluster->defaults.repl\
                                            8995 * ication_factor);
00005B8E E55C 3014 FFFF          00000014   8996          CHSI  20(3),-1
00005B94 4770 C0F8               00005BD0   8997          BNE   @L829
                                                                                                                           Page  185 
  Active Usings: @REGION_1941_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            8998 * ***                                          mcluster->defaults.part\
                                            8999 * ition_cnt :
00005B98 58F0 20E8               000000E8   9000          L     15,232(0,2) ; offset of defaults in rd_kafka_mock_cluste*
                                                                r_s
00005B9C 47F0 C0FC               00005BD4   9001          B     @L830
00005BA0                                    9002          DS    0D
00005BA0 000000C8                           9003 @FRAMESIZE_1941 DC F'200'
00005BA4 00000000
00005BA8 0000000000005898                   9004 @lit_1941_274 DC AD(rd_kafka_mock_topic_find)
00005BB0 0000000000000000                   9005 @lit_1941_277 DC AD(__assert)
00005BB8 0000000000010840                   9006 @lit_1941_276 DC AD(@strings@)
00005BC0 0000000000010480                   9007 @lit_1941_275 DC AD(@DATA)
00005BC8 00000000000055E0                   9008 @lit_1941_278 DC AD(rd_kafka_mock_topic_new)
00005BD0                                    9009 @L829    DS    0H
                                            9010 * ***                                          partition_cnt,
00005BD0 58F0 3014               00000014   9011          L     15,20(0,3)  ; partition_cnt
00005BD4                                    9012 @L830    DS    0H
00005BD4 E320 D0A8 0024          000000A8   9013          STG   2,168(0,13)
00005BDA E310 3008 0004          00000008   9014          LG    1,8(0,3)    ; topic
00005BE0 E310 D0B0 0024          000000B0   9015          STG   1,176(0,13)
00005BE6 B914 00FF                          9016          LGFR  15,15
00005BEA E3F0 D0B8 0024          000000B8   9017          STG   15,184(0,13)
00005BF0 E3F0 20EC 0014          000000EC   9018          LGF   15,236(0,2)
00005BF6 E3F0 D0C0 0024          000000C0   9019          STG   15,192(0,13)
00005BFC 4110 D0A8               000000A8   9020          LA    1,168(0,13)
00005C00 E3F0 C0F0 0004          00005BC8   9021          LG    15,@lit_1941_278 ; rd_kafka_mock_topic_new
00005C06                                    9022 @@gen_label425 DS    0H
00005C06 05EF                               9023          BALR  14,15
00005C08                                    9024 @@gen_label426 DS    0H
                                            9025 * ***   }
                                            9026 * * **** Start of Epilogue
                                            9027          DCCEPIL
00005C08                                    9028+         ds 0h                                                          01-DCCEP
                                            9029+* Epilog
00005C08 D707 D088 D088 00000088 00000088   9030+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00005C0E E3D0 D080 0004          00000080   9031+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00005C14 E3C0 D090 0004          00000090   9032+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00005C1A E3B0 C018 0004          00000018   9033+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00005C20 E3C0 B010 0021          00000010   9034+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00005C26 E3E0 D008 0004          00000008   9035+         lg  14,8(0,13)          load up return address                 01-DCCEP
00005C2C EB1C D020 0004          00000020   9036+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00005C32 078E                               9037+         bcr 8,14                if same dsab, just return              01-DCCEP
00005C34 E3F0 D010 0024          00000010   9038+         stg 15,16(0,13)         save return code                       01-DCCEP
00005C3A E300 D018 0024          00000018   9039+         stg 0,24(0,13)          save more return code                  01-DCCEP
00005C40 E3F0 D090 0004          00000090   9040+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00005C46 E3F0 F018 0004          00000018   9041+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00005C4C 47F0 F040               00000040   9042+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            9043+* End of Epilog
                                            9044 * * **** End of Epilogue
                                            9045          DROP  12
                                            9046 *
                                            9047 *   DSECT for automatic variables in "rd_kafka_mock_topic_auto_create"
                                                                                                                           Page  186 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9048 *      (FUNCTION #1941)
                                            9049 *
00000000                00000000 000000A8   9050 @AUTO#rd_kafka_mock_topic_auto_create DSECT
00000000                                    9051          DS    XL168
                                            9052 *
00005C50                00000000 00010480   9053 @CODE    CSECT
                                            9054 *
                                            9055 *
                                            9056 *
                                            9057 * ....... start of rd_kafka_mock_topic_get
                                            9058 rd_kafka_mock_topic_get ALIAS X'99846D92818692816D949683926DA3969789836*
                                                                D8785A3'
00005C50                                    9059 @LNAME1986 DS  0H
00005C50 00000017                           9060          DC    X'00000017'
00005C54 99846D9281869281                   9061          DC    C'rd_kafka_mock_topic_get'
00005C6B 00                                 9062          DC    X'00'
                                            9063 rd_kafka_mock_topic_get DCCPRLG CINDEX=1986,BASER=12,FRAME=208,ENTRY=YE*
                                                                S,ARCH=ZARCH,LNAMEADDR=@LNAME1986
                                            9064          macro
                                            9065          dccextrn &m
                                            9066          gblc    &$dccext(1000)
                                            9067          gbla    &$dccexti
                                            9068          lcla    &i
                                            9069 &$dccext(&$dccexti+1) setc    '&m'
                                            9070 &i       seta    1
                                            9071 .loop    aif    (&i gt &$dccexti).around
                                            9072          aif    ('&$dccext(&i)' eq '&m').getout
                                            9073 &i       seta    &i+1
                                            9074          ago     .loop
                                            9075 .around  anop
                                            9076 &$dccexti seta &$dccexti+1
                                            9077          extrn  &m
                                            9078 .getout  anop
                                            9079          mend
00005C70                                    9080+$eye0184    ds    0d                                                    02-DCCCA
00005C70 C4C3C3                             9081+         dc cl3'DCC'                                                    02-DCCCA
00005C73 01                                 9082+         dc xl1'01' format one                                          02-DCCCA
00005C74 00000000                           9083+         dc a(0)                                                        02-DCCCA
00005C78 0000000000005CE2                   9084+         dc ad(@PER_1986)                                               02-DCCCA
00005C80 00000000000000D0                   9085+         dc ad(208)                                                     02-DCCCA
00005C88 0000000000000000                   9086+         dc ad(0)                                                       02-DCCCA
00005C90 0000000000001000                   9087+         dc ad(4096)                                                    02-DCCCA
00005C98 20                                 9088+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005C99 03                                 9089+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00005C9A 03                                 9090+         dc al1(3)                                                      02-DCCCA
00005C9B 08                                 9091+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00005C9C 00                                 9092+         dc bl.8'00000000'                                              02-DCCCA
00005C9D 000000                             9093+         dc al3(0)                                                      02-DCCCA
00005CA0 0000000000005C50                   9094+         dc ad(@LNAME1986)                                              02-DCCCA
00005CA8                                    9095+         ds 0d                                                          02-DCCCA
00005CA8 0000000000005C70                   9096+         dc ad($eye0184)                                                02-DCCCA
00005CB0 0000000000000000                   9097+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page  187 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005CB8                                    9098+         ds    0d                                                       01-DCCPR
                                            9099+         entry rd_kafka_mock_topic_get                                  01-DCCPR
00005CB8                                    9100+rd_kafka_mock_topic_get ds 0d                                           01-DCCPR
00005CB8                                    9101+@REGION_1986_1 ds 0h                                                    01-DCCPR
00005CB8 EBEC D008 0024          00000008   9102+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00005CBE E3E0 D088 0004          00000088   9103+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00005CC4 E3C0 D090 0004          00000090   9104+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00005CCA B904 002E                          9105+         lgr   2,14                copy addr of our savearea            01-DCCPR
00005CCE E3B0 C018 0004          00000018   9106+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00005CD4 A7EB 00D0               000000D0   9107+         aghi  14,208              increase by frame size               01-DCCPR
00005CD8 E3E0 C020 0021          00000020   9108+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00005CDE 4720 B020               00000020   9109+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00005CE2                                    9110+@PER_1986 ds   0h                                                       01-DCCPR
00005CE2 EBDE 2080 0024          00000080   9111+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00005CE8 E3C0 2090 0024          00000090   9112+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00005CEE B904 00D2                          9113+         lgr   13,2                set real frame pointer               01-DCCPR
00005CF2 B904 00CF                          9114+         lgr   12,15               set base reg                         01-DCCPR
                        00005CB8            9115+         using @REGION_1986_1,12                                        01-DCCPR
00005CF6 B904 0021                          9116          LGR   2,1         ; ptr to parm area
                                            9117 * ******* End of Prologue
                                            9118 * *
                                            9119 * ***           rd_kafka_mock_topic_t *mtopic;
                                            9120 * ***           rd_kafka_resp_err_t err;
                                            9121 * ***
                                            9122 * ***           if ((mtopic = rd_kafka_mock_topic_find(mcluster, topic\
                                            9123 * )))
00005CFA E3F0 2000 0004          00000000   9124          LG    15,0(0,2)   ; mcluster
00005D00 E3F0 D0B0 0024          000000B0   9125          STG   15,176(0,13)
00005D06 E3F0 2008 0004          00000008   9126          LG    15,8(0,2)   ; topic
00005D0C E3F0 D0B8 0024          000000B8   9127          STG   15,184(0,13)
00005D12 4110 D0B0               000000B0   9128          LA    1,176(0,13)
00005D16 E3F0 C080 0004          00005D38   9129          LG    15,@lit_1986_280 ; rd_kafka_mock_topic_find
00005D1C                                    9130 @@gen_label427 DS    0H
00005D1C 05EF                               9131          BALR  14,15
00005D1E                                    9132 @@gen_label428 DS    0H
00005D1E B902 001F                          9133          LTGR  1,15
00005D22 4780 C090               00005D48   9134          BZ    @L831
                                            9135 * ***                   return mtopic;
00005D26 47F0 C0CA               00005D82   9136          B     @ret_lab_1986
00005D30                                    9137          DS    0D
00005D30 000000D0                           9138 @FRAMESIZE_1986 DC F'208'
00005D34 00000000
00005D38 0000000000005898                   9139 @lit_1986_280 DC AD(rd_kafka_mock_topic_find)
00005D40 0000000000005AD8                   9140 @lit_1986_281 DC AD(rd_kafka_mock_topic_auto_create)
00005D48                                    9141 @L831    DS    0H
                                            9142 * ***
                                            9143 * ***           return rd_kafka_mock_topic_auto_create(mcluster, topic\
                                            9144 * ,
                                            9145 * ***                                                  partition_cnt, \
                                            9146 * &err);
00005D48 E3F0 2000 0004          00000000   9147          LG    15,0(0,2)   ; mcluster
00005D4E E3F0 D0B0 0024          000000B0   9148          STG   15,176(0,13)
                                                                                                                           Page  188 
  Active Usings: @REGION_1986_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00005D54 E3F0 2008 0004          00000008   9149          LG    15,8(0,2)   ; topic
00005D5A E3F0 D0B8 0024          000000B8   9150          STG   15,184(0,13)
00005D60 E3F0 2014 0014          00000014   9151          LGF   15,20(0,2)  ; partition_cnt
00005D66 E3F0 D0C0 0024          000000C0   9152          STG   15,192(0,13)
00005D6C 41F0 D0A8               000000A8   9153          LA    15,168(0,13)
00005D70 E3F0 D0C8 0024          000000C8   9154          STG   15,200(0,13)
00005D76 4110 D0B0               000000B0   9155          LA    1,176(0,13)
00005D7A E3F0 C088 0004          00005D40   9156          LG    15,@lit_1986_281 ; rd_kafka_mock_topic_auto_create
00005D80                                    9157 @@gen_label430 DS    0H
00005D80 05EF                               9158          BALR  14,15
00005D82                                    9159 @@gen_label431 DS    0H
                                            9160 * ***   }
00005D82                                    9161 @ret_lab_1986 DS 0H
                                            9162 * * **** Start of Epilogue
                                            9163          DCCEPIL
00005D82                                    9164+         ds 0h                                                          01-DCCEP
                                            9165+* Epilog
00005D82 D707 D088 D088 00000088 00000088   9166+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00005D88 E3D0 D080 0004          00000080   9167+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00005D8E E3C0 D090 0004          00000090   9168+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00005D94 E3B0 C018 0004          00000018   9169+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00005D9A E3C0 B010 0021          00000010   9170+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00005DA0 E3E0 D008 0004          00000008   9171+         lg  14,8(0,13)          load up return address                 01-DCCEP
00005DA6 EB1C D020 0004          00000020   9172+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00005DAC 078E                               9173+         bcr 8,14                if same dsab, just return              01-DCCEP
00005DAE E3F0 D010 0024          00000010   9174+         stg 15,16(0,13)         save return code                       01-DCCEP
00005DB4 E300 D018 0024          00000018   9175+         stg 0,24(0,13)          save more return code                  01-DCCEP
00005DBA E3F0 D090 0004          00000090   9176+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00005DC0 E3F0 F018 0004          00000018   9177+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00005DC6 47F0 F040               00000040   9178+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            9179+* End of Epilog
                                            9180 * * **** End of Epilogue
                                            9181          DROP  12
                                            9182 *
                                            9183 *   DSECT for automatic variables in "rd_kafka_mock_topic_get"
                                            9184 *      (FUNCTION #1986)
                                            9185 *
00000000                00000000 000000AC   9186 @AUTO#rd_kafka_mock_topic_get DSECT
00000000                                    9187          DS    XL168
000000A8                                    9188 rd_kafka_mock_topic_get#err#0 DS 1F ; err
                                            9189 *
00005DCA                00000000 00010480   9190 @CODE    CSECT
                                            9191 *
                                            9192 *
                                            9193 *
                                            9194 * ....... start of rd_kafka_mock_partition_get
00005DCA                                    9195 @LNAME1987 DS  0H
00005DCA 0000001B                           9196          DC    X'0000001B'
00005DCE 99846D9281869281                   9197          DC    C'rd_kafka_mock_partition_get'
00005DE9 00                                 9198          DC    X'00'
                                            9199 rd_kafka_mock_partition_get DCCPRLG CINDEX=1987,BASER=12,FRAME=208,ENTR*
                                                                Y=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1987
                                                                                                                           Page  189 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9200          macro
                                            9201          dccextrn &m
                                            9202          gblc    &$dccext(1000)
                                            9203          gbla    &$dccexti
                                            9204          lcla    &i
                                            9205 &$dccext(&$dccexti+1) setc    '&m'
                                            9206 &i       seta    1
                                            9207 .loop    aif    (&i gt &$dccexti).around
                                            9208          aif    ('&$dccext(&i)' eq '&m').getout
                                            9209 &i       seta    &i+1
                                            9210          ago     .loop
                                            9211 .around  anop
                                            9212 &$dccexti seta &$dccexti+1
                                            9213          extrn  &m
                                            9214 .getout  anop
                                            9215          mend
00005DF0                                    9216+$eye0187    ds    0d                                                    02-DCCCA
00005DF0 C4C3C3                             9217+         dc cl3'DCC'                                                    02-DCCCA
00005DF3 01                                 9218+         dc xl1'01' format one                                          02-DCCCA
00005DF4 00000000                           9219+         dc a(0)                                                        02-DCCCA
00005DF8 0000000000005E62                   9220+         dc ad(@PER_1987)                                               02-DCCCA
00005E00 00000000000000D0                   9221+         dc ad(208)                                                     02-DCCCA
00005E08 0000000000000000                   9222+         dc ad(0)                                                       02-DCCCA
00005E10 0000000000001000                   9223+         dc ad(4096)                                                    02-DCCCA
00005E18 20                                 9224+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005E19 03                                 9225+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00005E1A 03                                 9226+         dc al1(3)                                                      02-DCCCA
00005E1B 08                                 9227+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00005E1C 00                                 9228+         dc bl.8'00000000'                                              02-DCCCA
00005E1D 000000                             9229+         dc al3(0)                                                      02-DCCCA
00005E20 0000000000005DCA                   9230+         dc ad(@LNAME1987)                                              02-DCCCA
00005E28                                    9231+         ds 0d                                                          02-DCCCA
00005E28 0000000000005DF0                   9232+         dc ad($eye0187)                                                02-DCCCA
00005E30 0000000000000000                   9233+         dc ad(0)                                                       02-DCCCA
00005E38                                    9234+         ds    0d                                                       01-DCCPR
00005E38                                    9235+rd_kafka_mock_partition_get ds 0d                                       01-DCCPR
00005E38                                    9236+@REGION_1987_1 ds 0h                                                    01-DCCPR
00005E38 EBEC D008 0024          00000008   9237+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00005E3E E3E0 D088 0004          00000088   9238+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00005E44 E3C0 D090 0004          00000090   9239+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00005E4A B904 002E                          9240+         lgr   2,14                copy addr of our savearea            01-DCCPR
00005E4E E3B0 C018 0004          00000018   9241+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00005E54 A7EB 00D0               000000D0   9242+         aghi  14,208              increase by frame size               01-DCCPR
00005E58 E3E0 C020 0021          00000020   9243+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00005E5E 4720 B020               00000020   9244+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00005E62                                    9245+@PER_1987 ds   0h                                                       01-DCCPR
00005E62 EBDE 2080 0024          00000080   9246+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00005E68 E3C0 2090 0024          00000090   9247+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00005E6E B904 00D2                          9248+         lgr   13,2                set real frame pointer               01-DCCPR
00005E72 B904 00CF                          9249+         lgr   12,15               set base reg                         01-DCCPR
                        00005E38            9250+         using @REGION_1987_1,12                                        01-DCCPR
00005E76 B904 0031                          9251          LGR   3,1         ; ptr to parm area
                                                                                                                           Page  190 
  Active Usings: @REGION_1987_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9252 * ******* End of Prologue
                                            9253 * *
00005E7A 5820 3014               00000014   9254          L     2,20(0,3)   ; partition
                                            9255 * ***           rd_kafka_mock_topic_t *mtopic;
                                            9256 * ***           rd_kafka_resp_err_t err;
                                            9257 * ***
                                            9258 * ***           if (!(mtopic = rd_kafka_mock_topic_find(mcluster, topi\
                                            9259 * c)))
00005E7E E3F0 3000 0004          00000000   9260          LG    15,0(0,3)   ; mcluster
00005E84 E3F0 D0B0 0024          000000B0   9261          STG   15,176(0,13)
00005E8A E3F0 3008 0004          00000008   9262          LG    15,8(0,3)   ; topic
00005E90 E3F0 D0B8 0024          000000B8   9263          STG   15,184(0,13)
00005E96 4110 D0B0               000000B0   9264          LA    1,176(0,13)
00005E9A E3F0 C0C8 0004          00005F00   9265          LG    15,@lit_1987_283 ; rd_kafka_mock_topic_find
00005EA0                                    9266 @@gen_label432 DS    0H
00005EA0 05EF                               9267          BALR  14,15
00005EA2                                    9268 @@gen_label433 DS    0H
00005EA2 B902 001F                          9269          LTGR  1,15
00005EA6 4770 C0B0               00005EE8   9270          BNZ   @L832
                                            9271 * ***                   mtopic = rd_kafka_mock_topic_auto_create(mclus\
                                            9272 * ter, topic,
                                            9273 * ***                                                            parti\
                                            9274 * tion+1, &err);
00005EAA E3F0 3000 0004          00000000   9275          LG    15,0(0,3)   ; mcluster
00005EB0 E3F0 D0B0 0024          000000B0   9276          STG   15,176(0,13)
00005EB6 E3F0 3008 0004          00000008   9277          LG    15,8(0,3)   ; topic
00005EBC E3F0 D0B8 0024          000000B8   9278          STG   15,184(0,13)
00005EC2 18F2                               9279          LR    15,2
00005EC4 A7FA 0001               00000001   9280          AHI   15,1
00005EC8 B914 00FF                          9281          LGFR  15,15
00005ECC E3F0 D0C0 0024          000000C0   9282          STG   15,192(0,13)
00005ED2 41F0 D0A8               000000A8   9283          LA    15,168(0,13)
00005ED6 E3F0 D0C8 0024          000000C8   9284          STG   15,200(0,13)
00005EDC 4110 D0B0               000000B0   9285          LA    1,176(0,13)
00005EE0 E3F0 C0D0 0004          00005F08   9286          LG    15,@lit_1987_284 ; rd_kafka_mock_topic_auto_create
00005EE6                                    9287 @@gen_label435 DS    0H
00005EE6 05EF                               9288          BALR  14,15
00005EE8                                    9289 @@gen_label436 DS    0H
00005EE8                                    9290 @L832    DS    0H
                                            9291 * ***
                                            9292 * ***           if (partition >= mtopic->partition_cnt)
00005EE8 5920 F020               00000020   9293          C     2,32(0,15)
00005EEC 4740 C0D8               00005F10   9294          BL    @L833
                                            9295 * ***                   return ((void *)0);
00005EF0 A7F9 0000               00000000   9296          LGHI  15,0        ; 0
00005EF4 47F0 C0F6               00005F2E   9297          B     @ret_lab_1987
00005EF8                                    9298          DS    0D
00005EF8 000000D0                           9299 @FRAMESIZE_1987 DC F'208'
00005EFC 00000000
00005F00 0000000000005898                   9300 @lit_1987_283 DC AD(rd_kafka_mock_topic_find)
00005F08 0000000000005AD8                   9301 @lit_1987_284 DC AD(rd_kafka_mock_topic_auto_create)
00005F10                                    9302 @L833    DS    0H
                                                                                                                           Page  191 
  Active Usings: @REGION_1987_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9303 * ***
                                            9304 * ***           return &mtopic->partitions[partition];
00005F10 B914 0012                          9305          LGFR  1,2
00005F14 E3F0 F018 0004          00000018   9306          LG    15,24(0,15) ; offset of partitions in rd_kafka_mock_topi*
                                                                c_s
00005F1A EB21 0002 000D          00000002   9307          SLLG  2,1,2(0)    ;   .
00005F20 B90A 0021                          9308          ALGR  2,1         ;   .
00005F24 EB22 0005 000D          00000005   9309          SLLG  2,2,5(0)    ;   .
00005F2A 41F2 F000               00000000   9310          LA    15,0(2,15)
                                            9311 * ***   }
00005F2E                                    9312 @ret_lab_1987 DS 0H
                                            9313 * * **** Start of Epilogue
                                            9314          DCCEPIL
00005F2E                                    9315+         ds 0h                                                          01-DCCEP
                                            9316+* Epilog
00005F2E D707 D088 D088 00000088 00000088   9317+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00005F34 E3D0 D080 0004          00000080   9318+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00005F3A E3C0 D090 0004          00000090   9319+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00005F40 E3B0 C018 0004          00000018   9320+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00005F46 E3C0 B010 0021          00000010   9321+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00005F4C E3E0 D008 0004          00000008   9322+         lg  14,8(0,13)          load up return address                 01-DCCEP
00005F52 EB1C D020 0004          00000020   9323+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00005F58 078E                               9324+         bcr 8,14                if same dsab, just return              01-DCCEP
00005F5A E3F0 D010 0024          00000010   9325+         stg 15,16(0,13)         save return code                       01-DCCEP
00005F60 E300 D018 0024          00000018   9326+         stg 0,24(0,13)          save more return code                  01-DCCEP
00005F66 E3F0 D090 0004          00000090   9327+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00005F6C E3F0 F018 0004          00000018   9328+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00005F72 47F0 F040               00000040   9329+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            9330+* End of Epilog
                                            9331 * * **** End of Epilogue
                                            9332          DROP  12
                                            9333 *
                                            9334 *   DSECT for automatic variables in "rd_kafka_mock_partition_get"
                                            9335 *      (FUNCTION #1987)
                                            9336 *
00000000                00000000 000000AC   9337 @AUTO#rd_kafka_mock_partition_get DSECT
00000000                                    9338          DS    XL168
000000A8                                    9339 rd_kafka_mock_partition_get#err#0 DS 1F ; err
                                            9340 *
00005F76                00000000 00010480   9341 @CODE    CSECT
                                            9342 *
                                            9343 *
                                            9344 *
                                            9345 * ....... start of rd_kafka_mock_cluster_io_set_events
00005F76                                    9346 @LNAME1988 DS  0H
00005F76 00000023                           9347          DC    X'00000023'
00005F7A 99846D9281869281                   9348          DC    C'rd_kafka_mock_cluster_io_set_eve'
00005F9A 95A3A2                             9349          DC    C'nts'
00005F9D 00                                 9350          DC    X'00'
                                            9351 rd_kafka_mock_cluster_io_set_events DCCPRLG CINDEX=1988,BASER=12,FRAME=*
                                                                208,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1988
                                            9352          macro
                                                                                                                           Page  192 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9353          dccextrn &m
                                            9354          gblc    &$dccext(1000)
                                            9355          gbla    &$dccexti
                                            9356          lcla    &i
                                            9357 &$dccext(&$dccexti+1) setc    '&m'
                                            9358 &i       seta    1
                                            9359 .loop    aif    (&i gt &$dccexti).around
                                            9360          aif    ('&$dccext(&i)' eq '&m').getout
                                            9361 &i       seta    &i+1
                                            9362          ago     .loop
                                            9363 .around  anop
                                            9364 &$dccexti seta &$dccexti+1
                                            9365          extrn  &m
                                            9366 .getout  anop
                                            9367          mend
00005FA0                                    9368+$eye0190    ds    0d                                                    02-DCCCA
00005FA0 C4C3C3                             9369+         dc cl3'DCC'                                                    02-DCCCA
00005FA3 01                                 9370+         dc xl1'01' format one                                          02-DCCCA
00005FA4 00000000                           9371+         dc a(0)                                                        02-DCCCA
00005FA8 0000000000006012                   9372+         dc ad(@PER_1988)                                               02-DCCCA
00005FB0 00000000000000D0                   9373+         dc ad(208)                                                     02-DCCCA
00005FB8 0000000000000000                   9374+         dc ad(0)                                                       02-DCCCA
00005FC0 0000000000001000                   9375+         dc ad(4096)                                                    02-DCCCA
00005FC8 20                                 9376+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00005FC9 03                                 9377+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00005FCA 03                                 9378+         dc al1(3)                                                      02-DCCCA
00005FCB 08                                 9379+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00005FCC 00                                 9380+         dc bl.8'00000000'                                              02-DCCCA
00005FCD 000000                             9381+         dc al3(0)                                                      02-DCCCA
00005FD0 0000000000005F76                   9382+         dc ad(@LNAME1988)                                              02-DCCCA
00005FD8                                    9383+         ds 0d                                                          02-DCCCA
00005FD8 0000000000005FA0                   9384+         dc ad($eye0190)                                                02-DCCCA
00005FE0 0000000000000000                   9385+         dc ad(0)                                                       02-DCCCA
00005FE8                                    9386+         ds    0d                                                       01-DCCPR
00005FE8                                    9387+rd_kafka_mock_cluster_io_set_events ds 0d                               01-DCCPR
00005FE8                                    9388+@REGION_1988_1 ds 0h                                                    01-DCCPR
00005FE8 EBEC D008 0024          00000008   9389+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00005FEE E3E0 D088 0004          00000088   9390+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00005FF4 E3C0 D090 0004          00000090   9391+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00005FFA B904 002E                          9392+         lgr   2,14                copy addr of our savearea            01-DCCPR
00005FFE E3B0 C018 0004          00000018   9393+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00006004 A7EB 00D0               000000D0   9394+         aghi  14,208              increase by frame size               01-DCCPR
00006008 E3E0 C020 0021          00000020   9395+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000600E 4720 B020               00000020   9396+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00006012                                    9397+@PER_1988 ds   0h                                                       01-DCCPR
00006012 EBDE 2080 0024          00000080   9398+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00006018 E3C0 2090 0024          00000090   9399+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000601E B904 00D2                          9400+         lgr   13,2                set real frame pointer               01-DCCPR
00006022 B904 00CF                          9401+         lgr   12,15               set base reg                         01-DCCPR
                        00005FE8            9402+         using @REGION_1988_1,12                                        01-DCCPR
00006026 B904 0021                          9403          LGR   2,1         ; ptr to parm area
                                            9404 * ******* End of Prologue
                                                                                                                           Page  193 
  Active Usings: @REGION_1988_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9405 * *
0000602A E3F0 2000 0004          00000000   9406          LG    15,0(0,2)   ; mcluster
                                            9407 * ***           int i;
                                            9408 * ***
                                            9409 * ***           for (i = 0 ; i < mcluster->fd_cnt ; i++) {
00006030 A718 0000               00000000   9410          LHI   1,0         ; 0
00006034 47F0 C0B0               00006098   9411          B     @L835
00006038                                    9412          DS    0D
00006038 000000D0                           9413 @FRAMESIZE_1988 DC F'208'
0000603C 00000000
00006040 0000000000010840                   9414 @lit_1988_288 DC AD(@strings@)
00006048 0000000000000000                   9415 @lit_1988_290 DC AD(__assert)
00006050 0000000000010480                   9416 @lit_1988_289 DC AD(@DATA)
00006058                                    9417 @L834    DS    0H
                                            9418 * ***                   if (mcluster->fds[i].fd == fd) {
00006058 B914 0031                          9419          LGFR  3,1
0000605C E340 F0D8 0004          000000D8   9420          LG    4,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
00006062 EB33 0003 000D          00000003   9421          SLLG  3,3,3(0)    ; *0x8
00006068 5833 4000               00000000   9422          L     3,0(3,4)
0000606C 5930 200C               0000000C   9423          C     3,12(0,2)
00006070 4770 C0AC               00006094   9424          BNE   @L838
                                            9425 * ***                           mcluster->fds[i].events |= events;
00006074 B914 0011                          9426          LGFR  1,1
00006078 E3F0 F0D8 0004          000000D8   9427          LG    15,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
0000607E EB11 0003 000D          00000003   9428          SLLG  1,1,3(0)    ; *0x8
00006084 4831 F004               00000004   9429          LH    3,4(1,15)
00006088 5630 2014               00000014   9430          O     3,20(0,2)
0000608C 4031 F004               00000004   9431          STH   3,4(1,15)
                                            9432 * ***                           return;
00006090 47F0 C100               000060E8   9433          B     @ret_lab_1988
                                            9434 * ***                   }
00006094                                    9435 @L838    DS    0H
                                            9436 * ***           }
00006094 A71A 0001               00000001   9437          AHI   1,1
00006098                                    9438 @L835    DS    0H
00006098 5910 F0CC               000000CC   9439          C     1,204(0,15)
0000609C 4740 C070               00006058   9440          BL    @L834
                                            9441 * ***
                                            9442 * ***           ((!*"mock_cluster_io_set_events: fd not found") ? (voi\
                                            9443 * d)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_moc\
                                            9444 * k.c", 541, "!*\"mock_cluster_io_set_events: fd not found\""));
000060A0 E3F0 C058 0004          00006040   9445          LG    15,@lit_1988_288
000060A6 4110 F332               00000332   9446          LA    1,818(0,15)
000060AA 9500 1000      00000000 00000000   9447          CLI   0(1),0
000060AE 4780 C100               000060E8   9448          BE    @L840
000060B2                                    9449 @L839    DS    0H
000060B2 E310 C068 0004          00006050   9450          LG    1,@lit_1988_289
000060B8 4110 1222               00000222   9451          LA    1,546(0,1)
000060BC E310 D0B0 0024          000000B0   9452          STG   1,176(0,13)
000060C2 4110 F0FA               000000FA   9453          LA    1,250(0,15)
000060C6 E310 D0B8 0024          000000B8   9454          STG   1,184(0,13)
000060CC E548 D0C0 021D          000000C0   9455          MVGHI 192(13),541
                                                                                                                           Page  194 
  Active Usings: @REGION_1988_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000060D2 41F0 F35C               0000035C   9456          LA    15,860(0,15)
000060D6 E3F0 D0C8 0024          000000C8   9457          STG   15,200(0,13)
000060DC 4110 D0B0               000000B0   9458          LA    1,176(0,13)
000060E0 E3F0 C060 0004          00006048   9459          LG    15,@lit_1988_290 ; __assert
000060E6                                    9460 @@gen_label441 DS    0H
000060E6 05EF                               9461          BALR  14,15
000060E8                                    9462 @@gen_label442 DS    0H
000060E8                                    9463 @L840    DS    0H
                                            9464 * ***   }
000060E8                                    9465 @ret_lab_1988 DS 0H
                                            9466 * * **** Start of Epilogue
                                            9467          DCCEPIL
000060E8                                    9468+         ds 0h                                                          01-DCCEP
                                            9469+* Epilog
000060E8 D707 D088 D088 00000088 00000088   9470+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
000060EE E3D0 D080 0004          00000080   9471+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000060F4 E3C0 D090 0004          00000090   9472+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000060FA E3B0 C018 0004          00000018   9473+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00006100 E3C0 B010 0021          00000010   9474+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00006106 E3E0 D008 0004          00000008   9475+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000610C EB1C D020 0004          00000020   9476+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00006112 078E                               9477+         bcr 8,14                if same dsab, just return              01-DCCEP
00006114 E3F0 D010 0024          00000010   9478+         stg 15,16(0,13)         save return code                       01-DCCEP
0000611A E300 D018 0024          00000018   9479+         stg 0,24(0,13)          save more return code                  01-DCCEP
00006120 E3F0 D090 0004          00000090   9480+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00006126 E3F0 F018 0004          00000018   9481+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000612C 47F0 F040               00000040   9482+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            9483+* End of Epilog
                                            9484 * * **** End of Epilogue
                                            9485          DROP  12
                                            9486 *
                                            9487 *   DSECT for automatic variables in "rd_kafka_mock_cluster_io_set_eve
                                            9488 *           nts"
                                            9489 *      (FUNCTION #1988)
                                            9490 *
00000000                00000000 000000AC   9491 @AUTO#rd_kafka_mock_cluster_io_set_events DSECT
00000000                                    9492          DS    XL168
000000A8                                    9493 rd_kafka_mock_cluster_io_set_events#i#0 DS 1F ; i
                                            9494 *
00006130                00000000 00010480   9495 @CODE    CSECT
                                            9496 *
                                            9497 *
                                            9498 *
                                            9499 * ....... start of rd_kafka_mock_cluster_io_set_event
00006130                                    9500 @LNAME1989 DS  0H
00006130 00000022                           9501          DC    X'00000022'
00006134 99846D9281869281                   9502          DC    C'rd_kafka_mock_cluster_io_set_eve'
00006154 95A3                               9503          DC    C'nt'
00006156 00                                 9504          DC    X'00'
                                            9505 rd_kafka_mock_cluster_io_set_event DCCPRLG CINDEX=1989,BASER=12,FRAME=2*
                                                                08,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1989
                                            9506          macro
                                                                                                                           Page  195 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9507          dccextrn &m
                                            9508          gblc    &$dccext(1000)
                                            9509          gbla    &$dccexti
                                            9510          lcla    &i
                                            9511 &$dccext(&$dccexti+1) setc    '&m'
                                            9512 &i       seta    1
                                            9513 .loop    aif    (&i gt &$dccexti).around
                                            9514          aif    ('&$dccext(&i)' eq '&m').getout
                                            9515 &i       seta    &i+1
                                            9516          ago     .loop
                                            9517 .around  anop
                                            9518 &$dccexti seta &$dccexti+1
                                            9519          extrn  &m
                                            9520 .getout  anop
                                            9521          mend
00006158                                    9522+$eye0193    ds    0d                                                    02-DCCCA
00006158 C4C3C3                             9523+         dc cl3'DCC'                                                    02-DCCCA
0000615B 01                                 9524+         dc xl1'01' format one                                          02-DCCCA
0000615C 00000000                           9525+         dc a(0)                                                        02-DCCCA
00006160 00000000000061CA                   9526+         dc ad(@PER_1989)                                               02-DCCCA
00006168 00000000000000D0                   9527+         dc ad(208)                                                     02-DCCCA
00006170 0000000000000000                   9528+         dc ad(0)                                                       02-DCCCA
00006178 0000000000001000                   9529+         dc ad(4096)                                                    02-DCCCA
00006180 20                                 9530+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00006181 03                                 9531+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00006182 03                                 9532+         dc al1(3)                                                      02-DCCCA
00006183 08                                 9533+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00006184 00                                 9534+         dc bl.8'00000000'                                              02-DCCCA
00006185 000000                             9535+         dc al3(0)                                                      02-DCCCA
00006188 0000000000006130                   9536+         dc ad(@LNAME1989)                                              02-DCCCA
00006190                                    9537+         ds 0d                                                          02-DCCCA
00006190 0000000000006158                   9538+         dc ad($eye0193)                                                02-DCCCA
00006198 0000000000000000                   9539+         dc ad(0)                                                       02-DCCCA
000061A0                                    9540+         ds    0d                                                       01-DCCPR
000061A0                                    9541+rd_kafka_mock_cluster_io_set_event ds 0d                                01-DCCPR
000061A0                                    9542+@REGION_1989_1 ds 0h                                                    01-DCCPR
000061A0 EBEC D008 0024          00000008   9543+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000061A6 E3E0 D088 0004          00000088   9544+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000061AC E3C0 D090 0004          00000090   9545+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000061B2 B904 002E                          9546+         lgr   2,14                copy addr of our savearea            01-DCCPR
000061B6 E3B0 C018 0004          00000018   9547+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000061BC A7EB 00D0               000000D0   9548+         aghi  14,208              increase by frame size               01-DCCPR
000061C0 E3E0 C020 0021          00000020   9549+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000061C6 4720 B020               00000020   9550+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000061CA                                    9551+@PER_1989 ds   0h                                                       01-DCCPR
000061CA EBDE 2080 0024          00000080   9552+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000061D0 E3C0 2090 0024          00000090   9553+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000061D6 B904 00D2                          9554+         lgr   13,2                set real frame pointer               01-DCCPR
000061DA B904 00CF                          9555+         lgr   12,15               set base reg                         01-DCCPR
                        000061A0            9556+         using @REGION_1989_1,12                                        01-DCCPR
000061DE B904 0021                          9557          LGR   2,1         ; ptr to parm area
                                            9558 * ******* End of Prologue
                                                                                                                           Page  196 
  Active Usings: @REGION_1989_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9559 * *
000061E2 E3F0 2000 0004          00000000   9560          LG    15,0(0,2)   ; mcluster
                                            9561 * ***           int i;
                                            9562 * ***
                                            9563 * ***           for (i = 0 ; i < mcluster->fd_cnt ; i++) {
000061E8 A718 0000               00000000   9564          LHI   1,0         ; 0
000061EC 47F0 C0E0               00006280   9565          B     @L842
000061F0                                    9566          DS    0D
000061F0 000000D0                           9567 @FRAMESIZE_1989 DC F'208'
000061F4 00000000
000061F8 0000000000010840                   9568 @lit_1989_293 DC AD(@strings@)
00006200 0000000000000000                   9569 @lit_1989_295 DC AD(__assert)
00006208 0000000000010480                   9570 @lit_1989_294 DC AD(@DATA)
00006210                                    9571 @L841    DS    0H
                                            9572 * ***                   if (mcluster->fds[i].fd == fd) {
00006210 B914 0031                          9573          LGFR  3,1
00006214 E340 F0D8 0004          000000D8   9574          LG    4,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
0000621A EB33 0003 000D          00000003   9575          SLLG  3,3,3(0)    ; *0x8
00006220 5833 4000               00000000   9576          L     3,0(3,4)
00006224 5930 200C               0000000C   9577          C     3,12(0,2)
00006228 4770 C0DC               0000627C   9578          BNE   @L845
                                            9579 * ***                           if (set)
0000622C 9500 2017      00000017 00000000   9580          CLI   23(2),0
00006230 4780 C0B4               00006254   9581          BE    @L846
                                            9582 * ***                                   mcluster->fds[i].events |= eve\
                                            9583 * nt;
00006234 B914 0011                          9584          LGFR  1,1
00006238 E3F0 F0D8 0004          000000D8   9585          LG    15,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
0000623E EB11 0003 000D          00000003   9586          SLLG  1,1,3(0)    ; *0x8
00006244 4831 F004               00000004   9587          LH    3,4(1,15)
00006248 5630 201C               0000001C   9588          O     3,28(0,2)
0000624C 4031 F004               00000004   9589          STH   3,4(1,15)
00006250 47F0 C130               000062D0   9590          B     @ret_lab_1989
                                            9591 * ***                           else
00006254                                    9592 @L846    DS    0H
                                            9593 * ***                                   mcluster->fds[i].events &= ~ev\
                                            9594 * ent;
00006254 B914 0011                          9595          LGFR  1,1
00006258 E3F0 F0D8 0004          000000D8   9596          LG    15,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
0000625E EB11 0003 000D          00000003   9597          SLLG  1,1,3(0)    ; *0x8
00006264 4831 F004               00000004   9598          LH    3,4(1,15)
00006268 5820 201C               0000001C   9599          L     2,28(0,2)   ; event
0000626C C027 FFFF FFFF                     9600          XILF  2,X'FFFFFFFF'
00006272 1432                               9601          NR    3,2
00006274 4031 F004               00000004   9602          STH   3,4(1,15)
00006278                                    9603 @L847    DS    0H
                                            9604 * ***                           return;
00006278 47F0 C130               000062D0   9605          B     @ret_lab_1989
                                            9606 * ***                   }
0000627C                                    9607 @L845    DS    0H
                                            9608 * ***           }
0000627C A71A 0001               00000001   9609          AHI   1,1
                                                                                                                           Page  197 
  Active Usings: @REGION_1989_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006280                                    9610 @L842    DS    0H
00006280 5910 F0CC               000000CC   9611          C     1,204(0,15)
00006284 4740 C070               00006210   9612          BL    @L841
                                            9613 * ***
                                            9614 * ***           ((!*"mock_cluster_io_set_event: fd not found") ? (void\
                                            9615 * )0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock\
                                            9616 * .c", 562, "!*\"mock_cluster_io_set_event: fd not found\""));
00006288 E3F0 C058 0004          000061F8   9617          LG    15,@lit_1989_293
0000628E 4110 F38A               0000038A   9618          LA    1,906(0,15)
00006292 9500 1000      00000000 00000000   9619          CLI   0(1),0
00006296 4780 C130               000062D0   9620          BE    @L849
0000629A                                    9621 @L848    DS    0H
0000629A E310 C068 0004          00006208   9622          LG    1,@lit_1989_294
000062A0 4110 1246               00000246   9623          LA    1,582(0,1)
000062A4 E310 D0B0 0024          000000B0   9624          STG   1,176(0,13)
000062AA 4110 F0FA               000000FA   9625          LA    1,250(0,15)
000062AE E310 D0B8 0024          000000B8   9626          STG   1,184(0,13)
000062B4 E548 D0C0 0232          000000C0   9627          MVGHI 192(13),562
000062BA 41F0 F3B2               000003B2   9628          LA    15,946(0,15)
000062BE E3F0 D0C8 0024          000000C8   9629          STG   15,200(0,13)
000062C4 4110 D0B0               000000B0   9630          LA    1,176(0,13)
000062C8 E3F0 C060 0004          00006200   9631          LG    15,@lit_1989_295 ; __assert
000062CE                                    9632 @@gen_label447 DS    0H
000062CE 05EF                               9633          BALR  14,15
000062D0                                    9634 @@gen_label448 DS    0H
000062D0                                    9635 @L849    DS    0H
                                            9636 * ***   }
000062D0                                    9637 @ret_lab_1989 DS 0H
                                            9638 * * **** Start of Epilogue
                                            9639          DCCEPIL
000062D0                                    9640+         ds 0h                                                          01-DCCEP
                                            9641+* Epilog
000062D0 D707 D088 D088 00000088 00000088   9642+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
000062D6 E3D0 D080 0004          00000080   9643+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000062DC E3C0 D090 0004          00000090   9644+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000062E2 E3B0 C018 0004          00000018   9645+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
000062E8 E3C0 B010 0021          00000010   9646+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
000062EE E3E0 D008 0004          00000008   9647+         lg  14,8(0,13)          load up return address                 01-DCCEP
000062F4 EB1C D020 0004          00000020   9648+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000062FA 078E                               9649+         bcr 8,14                if same dsab, just return              01-DCCEP
000062FC E3F0 D010 0024          00000010   9650+         stg 15,16(0,13)         save return code                       01-DCCEP
00006302 E300 D018 0024          00000018   9651+         stg 0,24(0,13)          save more return code                  01-DCCEP
00006308 E3F0 D090 0004          00000090   9652+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000630E E3F0 F018 0004          00000018   9653+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00006314 47F0 F040               00000040   9654+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            9655+* End of Epilog
                                            9656 * * **** End of Epilogue
                                            9657          DROP  12
                                            9658 *
                                            9659 *   DSECT for automatic variables in "rd_kafka_mock_cluster_io_set_eve
                                            9660 *           nt"
                                            9661 *      (FUNCTION #1989)
                                                                                                                           Page  198 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9662 *
00000000                00000000 000000AC   9663 @AUTO#rd_kafka_mock_cluster_io_set_event DSECT
00000000                                    9664          DS    XL168
000000A8                                    9665 rd_kafka_mock_cluster_io_set_event#i#0 DS 1F ; i
                                            9666 *
00006318                00000000 00010480   9667 @CODE    CSECT
                                            9668 *
                                            9669 *
                                            9670 *
                                            9671 * ....... start of rd_kafka_mock_cluster_io_clear_events
00006318                                    9672 @LNAME1990 DS  0H
00006318 00000025                           9673          DC    X'00000025'
0000631C 99846D9281869281                   9674          DC    C'rd_kafka_mock_cluster_io_clear_e'
0000633C A58595A3A2                         9675          DC    C'vents'
00006341 00                                 9676          DC    X'00'
                                            9677 rd_kafka_mock_cluster_io_clear_events DCCPRLG CINDEX=1990,BASER=12,FRAM*
                                                                E=208,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1990
                                            9678          macro
                                            9679          dccextrn &m
                                            9680          gblc    &$dccext(1000)
                                            9681          gbla    &$dccexti
                                            9682          lcla    &i
                                            9683 &$dccext(&$dccexti+1) setc    '&m'
                                            9684 &i       seta    1
                                            9685 .loop    aif    (&i gt &$dccexti).around
                                            9686          aif    ('&$dccext(&i)' eq '&m').getout
                                            9687 &i       seta    &i+1
                                            9688          ago     .loop
                                            9689 .around  anop
                                            9690 &$dccexti seta &$dccexti+1
                                            9691          extrn  &m
                                            9692 .getout  anop
                                            9693          mend
00006348                                    9694+$eye0196    ds    0d                                                    02-DCCCA
00006348 C4C3C3                             9695+         dc cl3'DCC'                                                    02-DCCCA
0000634B 01                                 9696+         dc xl1'01' format one                                          02-DCCCA
0000634C 00000000                           9697+         dc a(0)                                                        02-DCCCA
00006350 00000000000063BA                   9698+         dc ad(@PER_1990)                                               02-DCCCA
00006358 00000000000000D0                   9699+         dc ad(208)                                                     02-DCCCA
00006360 0000000000000000                   9700+         dc ad(0)                                                       02-DCCCA
00006368 0000000000001000                   9701+         dc ad(4096)                                                    02-DCCCA
00006370 20                                 9702+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00006371 03                                 9703+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00006372 03                                 9704+         dc al1(3)                                                      02-DCCCA
00006373 08                                 9705+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00006374 00                                 9706+         dc bl.8'00000000'                                              02-DCCCA
00006375 000000                             9707+         dc al3(0)                                                      02-DCCCA
00006378 0000000000006318                   9708+         dc ad(@LNAME1990)                                              02-DCCCA
00006380                                    9709+         ds 0d                                                          02-DCCCA
00006380 0000000000006348                   9710+         dc ad($eye0196)                                                02-DCCCA
00006388 0000000000000000                   9711+         dc ad(0)                                                       02-DCCCA
00006390                                    9712+         ds    0d                                                       01-DCCPR
                                                                                                                           Page  199 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006390                                    9713+rd_kafka_mock_cluster_io_clear_events ds 0d                             01-DCCPR
00006390                                    9714+@REGION_1990_1 ds 0h                                                    01-DCCPR
00006390 EBEC D008 0024          00000008   9715+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00006396 E3E0 D088 0004          00000088   9716+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000639C E3C0 D090 0004          00000090   9717+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000063A2 B904 002E                          9718+         lgr   2,14                copy addr of our savearea            01-DCCPR
000063A6 E3B0 C018 0004          00000018   9719+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000063AC A7EB 00D0               000000D0   9720+         aghi  14,208              increase by frame size               01-DCCPR
000063B0 E3E0 C020 0021          00000020   9721+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000063B6 4720 B020               00000020   9722+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000063BA                                    9723+@PER_1990 ds   0h                                                       01-DCCPR
000063BA EBDE 2080 0024          00000080   9724+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000063C0 E3C0 2090 0024          00000090   9725+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000063C6 B904 00D2                          9726+         lgr   13,2                set real frame pointer               01-DCCPR
000063CA B904 00CF                          9727+         lgr   12,15               set base reg                         01-DCCPR
                        00006390            9728+         using @REGION_1990_1,12                                        01-DCCPR
000063CE B904 0021                          9729          LGR   2,1         ; ptr to parm area
                                            9730 * ******* End of Prologue
                                            9731 * *
000063D2 E3F0 2000 0004          00000000   9732          LG    15,0(0,2)   ; mcluster
                                            9733 * ***           int i;
                                            9734 * ***
                                            9735 * ***           for (i = 0 ; i < mcluster->fd_cnt ; i++) {
000063D8 A718 0000               00000000   9736          LHI   1,0         ; 0
000063DC 47F0 C0B8               00006448   9737          B     @L851
000063E0                                    9738          DS    0D
000063E0 000000D0                           9739 @FRAMESIZE_1990 DC F'208'
000063E4 00000000
000063E8 0000000000010840                   9740 @lit_1990_298 DC AD(@strings@)
000063F0 0000000000000000                   9741 @lit_1990_300 DC AD(__assert)
000063F8 0000000000010480                   9742 @lit_1990_299 DC AD(@DATA)
00006400                                    9743 @L850    DS    0H
                                            9744 * ***                   if (mcluster->fds[i].fd == fd) {
00006400 B914 0031                          9745          LGFR  3,1
00006404 E340 F0D8 0004          000000D8   9746          LG    4,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
0000640A EB33 0003 000D          00000003   9747          SLLG  3,3,3(0)    ; *0x8
00006410 5833 4000               00000000   9748          L     3,0(3,4)
00006414 5930 200C               0000000C   9749          C     3,12(0,2)
00006418 4770 C0B4               00006444   9750          BNE   @L854
                                            9751 * ***                           mcluster->fds[i].events &= ~events;
0000641C B914 0011                          9752          LGFR  1,1
00006420 E3F0 F0D8 0004          000000D8   9753          LG    15,216(0,15) ; offset of fds in rd_kafka_mock_cluster_s
00006426 EB11 0003 000D          00000003   9754          SLLG  1,1,3(0)    ; *0x8
0000642C 4831 F004               00000004   9755          LH    3,4(1,15)
00006430 5820 2014               00000014   9756          L     2,20(0,2)   ; events
00006434 C027 FFFF FFFF                     9757          XILF  2,X'FFFFFFFF'
0000643A 1432                               9758          NR    3,2
0000643C 4031 F004               00000004   9759          STH   3,4(1,15)
                                            9760 * ***                           return;
00006440 47F0 C108               00006498   9761          B     @ret_lab_1990
                                            9762 * ***                   }
00006444                                    9763 @L854    DS    0H
                                                                                                                           Page  200 
  Active Usings: @REGION_1990_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9764 * ***           }
00006444 A71A 0001               00000001   9765          AHI   1,1
00006448                                    9766 @L851    DS    0H
00006448 5910 F0CC               000000CC   9767          C     1,204(0,15)
0000644C 4740 C070               00006400   9768          BL    @L850
                                            9769 * ***
                                            9770 * ***           ((!*"mock_cluster_io_set_events: fd not found") ? (voi\
                                            9771 * d)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_moc\
                                            9772 * k.c", 581, "!*\"mock_cluster_io_set_events: fd not found\""));
00006450 E3F0 C058 0004          000063E8   9773          LG    15,@lit_1990_298
00006456 4110 F332               00000332   9774          LA    1,818(0,15)
0000645A 9500 1000      00000000 00000000   9775          CLI   0(1),0
0000645E 4780 C108               00006498   9776          BE    @L856
00006462                                    9777 @L855    DS    0H
00006462 E310 C068 0004          000063F8   9778          LG    1,@lit_1990_299
00006468 4110 126A               0000026A   9779          LA    1,618(0,1)
0000646C E310 D0B0 0024          000000B0   9780          STG   1,176(0,13)
00006472 4110 F0FA               000000FA   9781          LA    1,250(0,15)
00006476 E310 D0B8 0024          000000B8   9782          STG   1,184(0,13)
0000647C E548 D0C0 0245          000000C0   9783          MVGHI 192(13),581
00006482 41F0 F35C               0000035C   9784          LA    15,860(0,15)
00006486 E3F0 D0C8 0024          000000C8   9785          STG   15,200(0,13)
0000648C 4110 D0B0               000000B0   9786          LA    1,176(0,13)
00006490 E3F0 C060 0004          000063F0   9787          LG    15,@lit_1990_300 ; __assert
00006496                                    9788 @@gen_label452 DS    0H
00006496 05EF                               9789          BALR  14,15
00006498                                    9790 @@gen_label453 DS    0H
00006498                                    9791 @L856    DS    0H
                                            9792 * ***   }
00006498                                    9793 @ret_lab_1990 DS 0H
                                            9794 * * **** Start of Epilogue
                                            9795          DCCEPIL
00006498                                    9796+         ds 0h                                                          01-DCCEP
                                            9797+* Epilog
00006498 D707 D088 D088 00000088 00000088   9798+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000649E E3D0 D080 0004          00000080   9799+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
000064A4 E3C0 D090 0004          00000090   9800+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
000064AA E3B0 C018 0004          00000018   9801+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
000064B0 E3C0 B010 0021          00000010   9802+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
000064B6 E3E0 D008 0004          00000008   9803+         lg  14,8(0,13)          load up return address                 01-DCCEP
000064BC EB1C D020 0004          00000020   9804+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000064C2 078E                               9805+         bcr 8,14                if same dsab, just return              01-DCCEP
000064C4 E3F0 D010 0024          00000010   9806+         stg 15,16(0,13)         save return code                       01-DCCEP
000064CA E300 D018 0024          00000018   9807+         stg 0,24(0,13)          save more return code                  01-DCCEP
000064D0 E3F0 D090 0004          00000090   9808+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
000064D6 E3F0 F018 0004          00000018   9809+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000064DC 47F0 F040               00000040   9810+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                            9811+* End of Epilog
                                            9812 * * **** End of Epilogue
                                            9813          DROP  12
                                            9814 *
                                            9815 *   DSECT for automatic variables in "rd_kafka_mock_cluster_io_clear_e
                                                                                                                           Page  201 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                            9816 *           vents"
                                            9817 *      (FUNCTION #1990)
                                            9818 *
00000000                00000000 000000AC   9819 @AUTO#rd_kafka_mock_cluster_io_clear_events DSECT
00000000                                    9820          DS    XL168
000000A8                                    9821 rd_kafka_mock_cluster_io_clear_events#i#0 DS 1F ; i
                                            9822 *
000064E0                00000000 00010480   9823 @CODE    CSECT
                                            9824 *
                                            9825 *
                                            9826 *
                                            9827 * ....... start of rd_kafka_mock_cluster_io_del
000064E0                                    9828 @LNAME1991 DS  0H
000064E0 0000001C                           9829          DC    X'0000001C'
000064E4 99846D9281869281                   9830          DC    C'rd_kafka_mock_cluster_io_del'
00006500 00                                 9831          DC    X'00'
                                            9832 rd_kafka_mock_cluster_io_del DCCPRLG CINDEX=1991,BASER=12,FRAME=208,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1991
                                            9833          macro
                                            9834          dccextrn &m
                                            9835          gblc    &$dccext(1000)
                                            9836          gbla    &$dccexti
                                            9837          lcla    &i
                                            9838 &$dccext(&$dccexti+1) setc    '&m'
                                            9839 &i       seta    1
                                            9840 .loop    aif    (&i gt &$dccexti).around
                                            9841          aif    ('&$dccext(&i)' eq '&m').getout
                                            9842 &i       seta    &i+1
                                            9843          ago     .loop
                                            9844 .around  anop
                                            9845 &$dccexti seta &$dccexti+1
                                            9846          extrn  &m
                                            9847 .getout  anop
                                            9848          mend
00006508                                    9849+$eye0199    ds    0d                                                    02-DCCCA
00006508 C4C3C3                             9850+         dc cl3'DCC'                                                    02-DCCCA
0000650B 01                                 9851+         dc xl1'01' format one                                          02-DCCCA
0000650C 00000000                           9852+         dc a(0)                                                        02-DCCCA
00006510 000000000000657A                   9853+         dc ad(@PER_1991)                                               02-DCCCA
00006518 00000000000000D0                   9854+         dc ad(208)                                                     02-DCCCA
00006520 0000000000000000                   9855+         dc ad(0)                                                       02-DCCCA
00006528 0000000000001000                   9856+         dc ad(4096)                                                    02-DCCCA
00006530 20                                 9857+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00006531 03                                 9858+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00006532 03                                 9859+         dc al1(3)                                                      02-DCCCA
00006533 08                                 9860+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00006534 00                                 9861+         dc bl.8'00000000'                                              02-DCCCA
00006535 000000                             9862+         dc al3(0)                                                      02-DCCCA
00006538 00000000000064E0                   9863+         dc ad(@LNAME1991)                                              02-DCCCA
00006540                                    9864+         ds 0d                                                          02-DCCCA
00006540 0000000000006508                   9865+         dc ad($eye0199)                                                02-DCCCA
00006548 0000000000000000                   9866+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page  202 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006550                                    9867+         ds    0d                                                       01-DCCPR
00006550                                    9868+rd_kafka_mock_cluster_io_del ds 0d                                      01-DCCPR
00006550                                    9869+@REGION_1991_1 ds 0h                                                    01-DCCPR
00006550 EBEC D008 0024          00000008   9870+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00006556 E3E0 D088 0004          00000088   9871+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000655C E3C0 D090 0004          00000090   9872+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00006562 B904 002E                          9873+         lgr   2,14                copy addr of our savearea            01-DCCPR
00006566 E3B0 C018 0004          00000018   9874+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000656C A7EB 00D0               000000D0   9875+         aghi  14,208              increase by frame size               01-DCCPR
00006570 E3E0 C020 0021          00000020   9876+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00006576 4720 B020               00000020   9877+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000657A                                    9878+@PER_1991 ds   0h                                                       01-DCCPR
0000657A EBDE 2080 0024          00000080   9879+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00006580 E3C0 2090 0024          00000090   9880+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00006586 B904 00D2                          9881+         lgr   13,2                set real frame pointer               01-DCCPR
0000658A B904 00CF                          9882+         lgr   12,15               set base reg                         01-DCCPR
                        00006550            9883+         using @REGION_1991_1,12                                        01-DCCPR
                                            9884 * ******* End of Prologue
                                            9885 * *
0000658E E330 1000 0004          00000000   9886          LG    3,0(0,1)    ; mcluster
                                            9887 * ***           int i;
                                            9888 * ***
                                            9889 * ***           for (i = 0 ; i < mcluster->fd_cnt ; i++) {
00006594 A728 0000               00000000   9890          LHI   2,0         ; 0
00006598 47F0 C170               000066C0   9891          B     @L858
000065A0                                    9892          DS    0D
000065A0 000000D0                           9893 @FRAMESIZE_1991 DC F'208'
000065A4 00000000
000065A8 0000000000000000                   9894 @lit_1991_303 DC AD(memmove)
000065B0 0000000000010840                   9895 @lit_1991_305 DC AD(@strings@)
000065B8 0000000000000000                   9896 @lit_1991_307 DC AD(__assert)
000065C0 0000000000010480                   9897 @lit_1991_306 DC AD(@DATA)
000065C8                                    9898 @L857    DS    0H
                                            9899 * ***                   if (mcluster->fds[i].fd == fd) {
000065C8 B914 00F2                          9900          LGFR  15,2
000065CC E340 30D8 0004          000000D8   9901          LG    4,216(0,3)  ; offset of fds in rd_kafka_mock_cluster_s
000065D2 EBFF 0003 000D          00000003   9902          SLLG  15,15,3(0)  ; *0x8
000065D8 58FF 4000               00000000   9903          L     15,0(15,4)
000065DC 59F0 100C               0000000C   9904          C     15,12(0,1)
000065E0 4770 C16C               000066BC   9905          BNE   @L861
                                            9906 * ***                           if (i + 1 < mcluster->fd_cnt) {
000065E4 18F2                               9907          LR    15,2
000065E6 A7FA 0001               00000001   9908          AHI   15,1
000065EA 59F0 30CC               000000CC   9909          C     15,204(0,3)
000065EE 47B0 C15C               000066AC   9910          BNL   @L862
                                            9911 * ***                                   memmove(&mcluster->fds[i],
                                            9912 * ***                                           &mcluster->fds[i+1],
                                            9913 * ***                                           sizeof(*mcluster->fds)\
                                            9914 *  *
000065F2 B914 00F2                          9915          LGFR  15,2
000065F6 E310 30D8 0004          000000D8   9916          LG    1,216(0,3)  ; offset of fds in rd_kafka_mock_cluster_s
000065FC EBFF 0003 000D          00000003   9917          SLLG  15,15,3(0)  ; *0x8
                                                                                                                           Page  203 
  Active Usings: @REGION_1991_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006602 41FF 1000               00000000   9918          LA    15,0(15,1)
00006606 E3F0 D0B0 0024          000000B0   9919          STG   15,176(0,13)
0000660C 18F2                               9920          LR    15,2
0000660E A7FA 0001               00000001   9921          AHI   15,1
00006612 B914 00FF                          9922          LGFR  15,15
00006616 E310 30D8 0004          000000D8   9923          LG    1,216(0,3)  ; offset of fds in rd_kafka_mock_cluster_s
0000661C EBFF 0003 000D          00000003   9924          SLLG  15,15,3(0)  ; *0x8
00006622 41FF 1000               00000000   9925          LA    15,0(15,1)
00006626 E3F0 D0B8 0024          000000B8   9926          STG   15,184(0,13)
                                            9927 * ***                                           (mcluster->fd_cnt - i)\
                                            9928 * );
0000662C 58F0 30CC               000000CC   9929          L     15,204(0,3) ; offset of fd_cnt in rd_kafka_mock_cluster_*
                                                                s
00006630 1BF2                               9930          SR    15,2
00006632 B914 00FF                          9931          LGFR  15,15
00006636 EBFF 0003 000D          00000003   9932          SLLG  15,15,3(0)  ; *0x8
0000663C E3F0 D0C0 0024          000000C0   9933          STG   15,192(0,13)
00006642 4110 D0B0               000000B0   9934          LA    1,176(0,13)
00006646 E340 C058 0004          000065A8   9935          LG    4,@lit_1991_303 ; memmove
0000664C B904 00F4                          9936          LGR   15,4
00006650                                    9937 @@gen_label456 DS    0H
00006650 05EF                               9938          BALR  14,15
00006652                                    9939 @@gen_label457 DS    0H
                                            9940 * ***                                   memmove(&mcluster->handlers[i]\
                                            9941 * ,
                                            9942 * ***                                           &mcluster->handlers[i+\
                                            9943 * 1],
                                            9944 * ***                                           sizeof(*mcluster->hand\
                                            9945 * lers) *
00006652 B914 00F2                          9946          LGFR  15,2
00006656 E310 30F0 0004          000000F0   9947          LG    1,240(0,3)  ; offset of handlers in rd_kafka_mock_cluste*
                                                                r_s
0000665C EBFF 0004 000D          00000004   9948          SLLG  15,15,4(0)  ; *0x10
00006662 41FF 1000               00000000   9949          LA    15,0(15,1)
00006666 E3F0 D0B0 0024          000000B0   9950          STG   15,176(0,13)
0000666C 18F2                               9951          LR    15,2
0000666E A7FA 0001               00000001   9952          AHI   15,1
00006672 B914 00FF                          9953          LGFR  15,15
00006676 E310 30F0 0004          000000F0   9954          LG    1,240(0,3)  ; offset of handlers in rd_kafka_mock_cluste*
                                                                r_s
0000667C EBFF 0004 000D          00000004   9955          SLLG  15,15,4(0)  ; *0x10
00006682 41FF 1000               00000000   9956          LA    15,0(15,1)
00006686 E3F0 D0B8 0024          000000B8   9957          STG   15,184(0,13)
                                            9958 * ***                                           (mcluster->fd_cnt - i)\
                                            9959 * );
0000668C 58F0 30CC               000000CC   9960          L     15,204(0,3) ; offset of fd_cnt in rd_kafka_mock_cluster_*
                                                                s
00006690 1BF2                               9961          SR    15,2
00006692 B914 00FF                          9962          LGFR  15,15
00006696 EBFF 0004 000D          00000004   9963          SLLG  15,15,4(0)  ; *0x10
0000669C E3F0 D0C0 0024          000000C0   9964          STG   15,192(0,13)
000066A2 4110 D0B0               000000B0   9965          LA    1,176(0,13)
                                                                                                                           Page  204 
  Active Usings: @REGION_1991_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000066A6 B904 00F4                          9966          LGR   15,4
000066AA                                    9967 @@gen_label458 DS    0H
000066AA 05EF                               9968          BALR  14,15
000066AC                                    9969 @@gen_label459 DS    0H
                                            9970 * ***                           }
000066AC                                    9971 @L862    DS    0H
                                            9972 * ***
                                            9973 * ***                           mcluster->fd_cnt--;
000066AC 58F0 30CC               000000CC   9974          L     15,204(0,3)
000066B0 A7FA FFFF               0000FFFF   9975          AHI   15,-1
000066B4 50F0 30CC               000000CC   9976          ST    15,204(0,3)
                                            9977 * ***                           return;
000066B8 47F0 C1C0               00006710   9978          B     @ret_lab_1991
                                            9979 * ***                   }
000066BC                                    9980 @L861    DS    0H
                                            9981 * ***           }
000066BC A72A 0001               00000001   9982          AHI   2,1
000066C0                                    9983 @L858    DS    0H
000066C0 5920 30CC               000000CC   9984          C     2,204(0,3)
000066C4 4740 C078               000065C8   9985          BL    @L857
                                            9986 * ***
                                            9987 * ***           ((!*"mock_cluster_io_del: fd not found") ? (void)0 : _\
                                            9988 * _assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 6\
                                            9989 * 07, "!*\"mock_cluster_io_del: fd not found\""));
000066C8 E3F0 C060 0004          000065B0   9990          LG    15,@lit_1991_305
000066CE 4110 F3DE               000003DE   9991          LA    1,990(0,15)
000066D2 9500 1000      00000000 00000000   9992          CLI   0(1),0
000066D6 4780 C1C0               00006710   9993          BE    @L864
000066DA                                    9994 @L863    DS    0H
000066DA E310 C070 0004          000065C0   9995          LG    1,@lit_1991_306
000066E0 4110 1290               00000290   9996          LA    1,656(0,1)
000066E4 E310 D0B0 0024          000000B0   9997          STG   1,176(0,13)
000066EA 4110 F0FA               000000FA   9998          LA    1,250(0,15)
000066EE E310 D0B8 0024          000000B8   9999          STG   1,184(0,13)
000066F4 E548 D0C0 025F          000000C0  10000          MVGHI 192(13),607
000066FA 41F0 F400               00000400  10001          LA    15,1024(0,15)
000066FE E3F0 D0C8 0024          000000C8  10002          STG   15,200(0,13)
00006704 4110 D0B0               000000B0  10003          LA    1,176(0,13)
00006708 E3F0 C068 0004          000065B8  10004          LG    15,@lit_1991_307 ; __assert
0000670E                                   10005 @@gen_label462 DS    0H
0000670E 05EF                              10006          BALR  14,15
00006710                                   10007 @@gen_label463 DS    0H
00006710                                   10008 @L864    DS    0H
                                           10009 * ***   }
00006710                                   10010 @ret_lab_1991 DS 0H
                                           10011 * * **** Start of Epilogue
                                           10012          DCCEPIL
00006710                                   10013+         ds 0h                                                          01-DCCEP
                                           10014+* Epilog
00006710 D707 D088 D088 00000088 00000088  10015+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00006716 E3D0 D080 0004          00000080  10016+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000671C E3C0 D090 0004          00000090  10017+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
                                                                                                                           Page  205 
  Active Usings: @REGION_1991_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006722 E3B0 C018 0004          00000018  10018+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00006728 E3C0 B010 0021          00000010  10019+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000672E E3E0 D008 0004          00000008  10020+         lg  14,8(0,13)          load up return address                 01-DCCEP
00006734 EB1C D020 0004          00000020  10021+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000673A 078E                              10022+         bcr 8,14                if same dsab, just return              01-DCCEP
0000673C E3F0 D010 0024          00000010  10023+         stg 15,16(0,13)         save return code                       01-DCCEP
00006742 E300 D018 0024          00000018  10024+         stg 0,24(0,13)          save more return code                  01-DCCEP
00006748 E3F0 D090 0004          00000090  10025+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000674E E3F0 F018 0004          00000018  10026+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00006754 47F0 F040               00000040  10027+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           10028+* End of Epilog
                                           10029 * * **** End of Epilogue
                                           10030          DROP  12
                                           10031 *
                                           10032 *   DSECT for automatic variables in "rd_kafka_mock_cluster_io_del"
                                           10033 *      (FUNCTION #1991)
                                           10034 *
00000000                00000000 000000AC  10035 @AUTO#rd_kafka_mock_cluster_io_del DSECT
00000000                                   10036          DS    XL168
000000A8                                   10037 rd_kafka_mock_cluster_io_del#i#0 DS 1F ; i
                                           10038 *
00006758                00000000 00010480  10039 @CODE    CSECT
                                           10040 *
                                           10041 *
                                           10042 *
                                           10043 * ....... start of rd_kafka_mock_cluster_io_add
00006758                                   10044 @LNAME1992 DS  0H
00006758 0000001C                          10045          DC    X'0000001C'
0000675C 99846D9281869281                  10046          DC    C'rd_kafka_mock_cluster_io_add'
00006778 00                                10047          DC    X'00'
                                           10048 rd_kafka_mock_cluster_io_add DCCPRLG CINDEX=1992,BASER=12,FRAME=184,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1992
                                           10049          macro
                                           10050          dccextrn &m
                                           10051          gblc    &$dccext(1000)
                                           10052          gbla    &$dccexti
                                           10053          lcla    &i
                                           10054 &$dccext(&$dccexti+1) setc    '&m'
                                           10055 &i       seta    1
                                           10056 .loop    aif    (&i gt &$dccexti).around
                                           10057          aif    ('&$dccext(&i)' eq '&m').getout
                                           10058 &i       seta    &i+1
                                           10059          ago     .loop
                                           10060 .around  anop
                                           10061 &$dccexti seta &$dccexti+1
                                           10062          extrn  &m
                                           10063 .getout  anop
                                           10064          mend
00006780                                   10065+$eye0202    ds    0d                                                    02-DCCCA
00006780 C4C3C3                            10066+         dc cl3'DCC'                                                    02-DCCCA
00006783 01                                10067+         dc xl1'01' format one                                          02-DCCCA
00006784 00000000                          10068+         dc a(0)                                                        02-DCCCA
                                                                                                                           Page  206 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006788 00000000000067F2                  10069+         dc ad(@PER_1992)                                               02-DCCCA
00006790 00000000000000B8                  10070+         dc ad(184)                                                     02-DCCCA
00006798 0000000000000000                  10071+         dc ad(0)                                                       02-DCCCA
000067A0 0000000000001000                  10072+         dc ad(4096)                                                    02-DCCCA
000067A8 20                                10073+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000067A9 03                                10074+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000067AA 03                                10075+         dc al1(3)                                                      02-DCCCA
000067AB 08                                10076+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000067AC 00                                10077+         dc bl.8'00000000'                                              02-DCCCA
000067AD 000000                            10078+         dc al3(0)                                                      02-DCCCA
000067B0 0000000000006758                  10079+         dc ad(@LNAME1992)                                              02-DCCCA
000067B8                                   10080+         ds 0d                                                          02-DCCCA
000067B8 0000000000006780                  10081+         dc ad($eye0202)                                                02-DCCCA
000067C0 0000000000000000                  10082+         dc ad(0)                                                       02-DCCCA
000067C8                                   10083+         ds    0d                                                       01-DCCPR
000067C8                                   10084+rd_kafka_mock_cluster_io_add ds 0d                                      01-DCCPR
000067C8                                   10085+@REGION_1992_1 ds 0h                                                    01-DCCPR
000067C8 EBEC D008 0024          00000008  10086+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000067CE E3E0 D088 0004          00000088  10087+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000067D4 E3C0 D090 0004          00000090  10088+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000067DA B904 002E                         10089+         lgr   2,14                copy addr of our savearea            01-DCCPR
000067DE E3B0 C018 0004          00000018  10090+         lg    11,24(0,12)         get dvt address                      01-DCCPR
000067E4 A7EB 00B8               000000B8  10091+         aghi  14,184              increase by frame size               01-DCCPR
000067E8 E3E0 C020 0021          00000020  10092+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
000067EE 4720 B020               00000020  10093+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
000067F2                                   10094+@PER_1992 ds   0h                                                       01-DCCPR
000067F2 EBDE 2080 0024          00000080  10095+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
000067F8 E3C0 2090 0024          00000090  10096+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
000067FE B904 00D2                         10097+         lgr   13,2                set real frame pointer               01-DCCPR
00006802 B904 00CF                         10098+         lgr   12,15               set base reg                         01-DCCPR
                        000067C8           10099+         using @REGION_1992_1,12                                        01-DCCPR
00006806 B904 0031                         10100          LGR   3,1         ; ptr to parm area
                                           10101 * ******* End of Prologue
                                           10102 * *
0000680A E320 3000 0004          00000000  10103          LG    2,0(0,3)    ; mcluster
                                           10104 * ***
                                           10105 * ***           if (mcluster->fd_cnt + 1 >= mcluster->fd_size) {
00006810 58F0 20CC               000000CC  10106          L     15,204(0,2) ; offset of fd_cnt in rd_kafka_mock_cluster_*
                                                                s
00006814 A7FA 0001               00000001  10107          AHI   15,1
00006818 59F0 20D0               000000D0  10108          C     15,208(0,2)
0000681C 4740 C0C6               0000688E  10109          BL    @L865
                                           10110 * ***                   mcluster->fd_size += 8;
00006820 58F0 20D0               000000D0  10111          L     15,208(0,2)
00006824 A7FA 0008               00000008  10112          AHI   15,8
00006828 50F0 20D0               000000D0  10113          ST    15,208(0,2)
                                           10114 * ***
                                           10115 * ***                   mcluster->fds = rd_realloc(mcluster->fds,
                                           10116 * ***                                              sizeof(*mcluster->f\
                                           10117 * ds) *
0000682C E3F0 20D8 0004          000000D8  10118          LG    15,216(0,2)
00006832 E3F0 D0A8 0024          000000A8  10119          STG   15,168(0,13)
                                                                                                                           Page  207 
  Active Usings: @REGION_1992_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           10120 * ***                                              mcluster->fd_size);
00006838 E3F0 20D0 0014          000000D0  10121          LGF   15,208(0,2)
0000683E EBFF 0003 000D          00000003  10122          SLLG  15,15,3(0)  ; *0x8
00006844 E3F0 D0B0 0024          000000B0  10123          STG   15,176(0,13)
0000684A 4110 D0A8               000000A8  10124          LA    1,168(0,13)
0000684E E340 C1D0 0004          00006998  10125          LG    4,@lit_1992_309 ; rd_realloc
00006854 B904 00F4                         10126          LGR   15,4
00006858                                   10127 @@gen_label465 DS    0H
00006858 05EF                              10128          BALR  14,15
0000685A                                   10129 @@gen_label466 DS    0H
0000685A E3F0 20D8 0024          000000D8  10130          STG   15,216(0,2)
                                           10131 * ***                   mcluster->handlers = rd_realloc(mcluster->hand\
                                           10132 * lers,
                                           10133 * ***                                                   sizeof(*mclust\
                                           10134 * er->handlers) *
00006860 E3F0 20F0 0004          000000F0  10135          LG    15,240(0,2)
00006866 E3F0 D0A8 0024          000000A8  10136          STG   15,168(0,13)
                                           10137 * ***                                                   mcluster->fd_s\
                                           10138 * ize);
0000686C E3F0 20D0 0014          000000D0  10139          LGF   15,208(0,2)
00006872 EBFF 0004 000D          00000004  10140          SLLG  15,15,4(0)  ; *0x10
00006878 E3F0 D0B0 0024          000000B0  10141          STG   15,176(0,13)
0000687E 4110 D0A8               000000A8  10142          LA    1,168(0,13)
00006882 B904 00F4                         10143          LGR   15,4
00006886                                   10144 @@gen_label467 DS    0H
00006886 05EF                              10145          BALR  14,15
00006888                                   10146 @@gen_label468 DS    0H
00006888 E3F0 20F0 0024          000000F0  10147          STG   15,240(0,2)
                                           10148 * ***           }
0000688E                                   10149 @L865    DS    0H
                                           10150 * ***
                                           10151 * ***           __memset(&mcluster->fds[mcluster->fd_cnt],0,sizeof(mcl\
                                           10152 * uster->fds[mcluster->fd_cnt]));
0000688E E3F0 20CC 0014          000000CC  10153          LGF   15,204(0,2)
00006894 E310 20D8 0004          000000D8  10154          LG    1,216(0,2)  ; offset of fds in rd_kafka_mock_cluster_s
0000689A EBFF 0003 000D          00000003  10155          SLLG  15,15,3(0)  ; *0x8
000068A0 41FF 1000               00000000  10156          LA    15,0(15,1)
                                           10157 * setting 8 bytes to 0x00
000068A4 D707 F000 F000 00000000 00000000  10158          XC    0(8,15),0(15)
                                           10159 * ***
                                           10160 * ***           mcluster->fds[mcluster->fd_cnt].fd = fd;
000068AA E3F0 20CC 0014          000000CC  10161          LGF   15,204(0,2)
000068B0 E310 20D8 0004          000000D8  10162          LG    1,216(0,2)  ; offset of fds in rd_kafka_mock_cluster_s
000068B6 EBFF 0003 000D          00000003  10163          SLLG  15,15,3(0)  ; *0x8
000068BC 5840 300C               0000000C  10164          L     4,12(0,3)   ; fd
000068C0 504F 1000               00000000  10165          ST    4,0(15,1)
                                           10166 * ***           mcluster->fds[mcluster->fd_cnt].events = events;
000068C4 E3F0 20CC 0014          000000CC  10167          LGF   15,204(0,2)
000068CA E310 20D8 0004          000000D8  10168          LG    1,216(0,2)  ; offset of fds in rd_kafka_mock_cluster_s
000068D0 EBFF 0003 000D          00000003  10169          SLLG  15,15,3(0)  ; *0x8
000068D6 5840 3014               00000014  10170          L     4,20(0,3)   ; events
000068DA 404F 1004               00000004  10171          STH   4,4(15,1)   ; offset of events in pollfd
                                                                                                                           Page  208 
  Active Usings: @REGION_1992_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           10172 * ***           mcluster->fds[mcluster->fd_cnt].revents = 0;
000068DE E3F0 20CC 0014          000000CC  10173          LGF   15,204(0,2)
000068E4 E310 20D8 0004          000000D8  10174          LG    1,216(0,2)  ; offset of fds in rd_kafka_mock_cluster_s
000068EA EBFF 0003 000D          00000003  10175          SLLG  15,15,3(0)  ; *0x8
000068F0 41FF 1000               00000000  10176          LA    15,0(15,1)
000068F4 E544 F006 0000          00000006  10177          MVHHI 6(15),0     ; offset of revents in pollfd
                                           10178 * ***           mcluster->handlers[mcluster->fd_cnt].cb = handler;
000068FA E3F0 20CC 0014          000000CC  10179          LGF   15,204(0,2)
00006900 E310 20F0 0004          000000F0  10180          LG    1,240(0,2)  ; offset of handlers in rd_kafka_mock_cluste*
                                                                r_s
00006906 EBFF 0004 000D          00000004  10181          SLLG  15,15,4(0)  ; *0x10
0000690C E340 3018 0004          00000018  10182          LG    4,24(0,3)   ; handler
00006912 E34F 1000 0024          00000000  10183          STG   4,0(15,1)
                                           10184 * ***           mcluster->handlers[mcluster->fd_cnt].opaque = opaque;
00006918 E3F0 20CC 0014          000000CC  10185          LGF   15,204(0,2)
0000691E E310 20F0 0004          000000F0  10186          LG    1,240(0,2)  ; offset of handlers in rd_kafka_mock_cluste*
                                                                r_s
00006924 EBFF 0004 000D          00000004  10187          SLLG  15,15,4(0)  ; *0x10
0000692A E330 3020 0004          00000020  10188          LG    3,32(0,3)   ; opaque
00006930 E33F 1008 0024          00000008  10189          STG   3,8(15,1)   ; offset of opaque in 0000175
                                           10190 * ***           mcluster->fd_cnt++;
00006936 58F0 20CC               000000CC  10191          L     15,204(0,2)
0000693A A7FA 0001               00000001  10192          AHI   15,1
0000693E 50F0 20CC               000000CC  10193          ST    15,204(0,2)
                                           10194 * ***   }
00006942                                   10195 @ret_lab_1992 DS 0H
                                           10196 * * **** Start of Epilogue
                                           10197          DCCEPIL
00006942                                   10198+         ds 0h                                                          01-DCCEP
                                           10199+* Epilog
00006942 D707 D088 D088 00000088 00000088  10200+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00006948 E3D0 D080 0004          00000080  10201+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000694E E3C0 D090 0004          00000090  10202+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00006954 E3B0 C018 0004          00000018  10203+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000695A E3C0 B010 0021          00000010  10204+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00006960 E3E0 D008 0004          00000008  10205+         lg  14,8(0,13)          load up return address                 01-DCCEP
00006966 EB1C D020 0004          00000020  10206+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000696C 078E                              10207+         bcr 8,14                if same dsab, just return              01-DCCEP
0000696E E3F0 D010 0024          00000010  10208+         stg 15,16(0,13)         save return code                       01-DCCEP
00006974 E300 D018 0024          00000018  10209+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000697A E3F0 D090 0004          00000090  10210+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00006980 E3F0 F018 0004          00000018  10211+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00006986 47F0 F040               00000040  10212+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           10213+* End of Epilog
                                           10214 * * **** End of Epilogue
00006990                                   10215          DS    0D
00006990 000000B8                          10216 @FRAMESIZE_1992 DC F'184'
00006994 00000000
00006998 0000000000000A00                  10217 @lit_1992_309 DC AD(rd_realloc)
                                           10218          DROP  12
                                           10219 *
                                           10220 *   DSECT for automatic variables in "rd_kafka_mock_cluster_io_add"
                                                                                                                           Page  209 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           10221 *      (FUNCTION #1992)
                                           10222 *
00000000                00000000 000000A8  10223 @AUTO#rd_kafka_mock_cluster_io_add DSECT
00000000                                   10224          DS    XL168
                                           10225 *
000069A0                00000000 00010480  10226 @CODE    CSECT
                                           10227 *
                                           10228 *
                                           10229 *
                                           10230 * ....... start of rd_kafka_mock_connection_close
000069A0                                   10231 @LNAME1993 DS  0H
000069A0 0000001E                          10232          DC    X'0000001E'
000069A4 99846D9281869281                  10233          DC    C'rd_kafka_mock_connection_close'
000069C2 00                                10234          DC    X'00'
                                           10235 rd_kafka_mock_connection_close DCCPRLG CINDEX=1993,BASER=12,FRAME=256,E*
                                                                NTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1993
                                           10236          macro
                                           10237          dccextrn &m
                                           10238          gblc    &$dccext(1000)
                                           10239          gbla    &$dccexti
                                           10240          lcla    &i
                                           10241 &$dccext(&$dccexti+1) setc    '&m'
                                           10242 &i       seta    1
                                           10243 .loop    aif    (&i gt &$dccexti).around
                                           10244          aif    ('&$dccext(&i)' eq '&m').getout
                                           10245 &i       seta    &i+1
                                           10246          ago     .loop
                                           10247 .around  anop
                                           10248 &$dccexti seta &$dccexti+1
                                           10249          extrn  &m
                                           10250 .getout  anop
                                           10251          mend
000069C8                                   10252+$eye0205    ds    0d                                                    02-DCCCA
000069C8 C4C3C3                            10253+         dc cl3'DCC'                                                    02-DCCCA
000069CB 01                                10254+         dc xl1'01' format one                                          02-DCCCA
000069CC 00000000                          10255+         dc a(0)                                                        02-DCCCA
000069D0 0000000000006A3A                  10256+         dc ad(@PER_1993)                                               02-DCCCA
000069D8 0000000000000100                  10257+         dc ad(256)                                                     02-DCCCA
000069E0 0000000000000000                  10258+         dc ad(0)                                                       02-DCCCA
000069E8 0000000000001000                  10259+         dc ad(4096)                                                    02-DCCCA
000069F0 20                                10260+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000069F1 03                                10261+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000069F2 03                                10262+         dc al1(3)                                                      02-DCCCA
000069F3 08                                10263+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000069F4 00                                10264+         dc bl.8'00000000'                                              02-DCCCA
000069F5 000000                            10265+         dc al3(0)                                                      02-DCCCA
000069F8 00000000000069A0                  10266+         dc ad(@LNAME1993)                                              02-DCCCA
00006A00                                   10267+         ds 0d                                                          02-DCCCA
00006A00 00000000000069C8                  10268+         dc ad($eye0205)                                                02-DCCCA
00006A08 0000000000000000                  10269+         dc ad(0)                                                       02-DCCCA
00006A10                                   10270+         ds    0d                                                       01-DCCPR
00006A10                                   10271+rd_kafka_mock_connection_close ds 0d                                    01-DCCPR
                                                                                                                           Page  210 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006A10                                   10272+@REGION_1993_1 ds 0h                                                    01-DCCPR
00006A10 EBEC D008 0024          00000008  10273+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00006A16 E3E0 D088 0004          00000088  10274+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00006A1C E3C0 D090 0004          00000090  10275+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00006A22 B904 002E                         10276+         lgr   2,14                copy addr of our savearea            01-DCCPR
00006A26 E3B0 C018 0004          00000018  10277+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00006A2C A7EB 0100               00000100  10278+         aghi  14,256              increase by frame size               01-DCCPR
00006A30 E3E0 C020 0021          00000020  10279+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00006A36 4720 B020               00000020  10280+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00006A3A                                   10281+@PER_1993 ds   0h                                                       01-DCCPR
00006A3A EBDE 2080 0024          00000080  10282+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00006A40 E3C0 2090 0024          00000090  10283+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00006A46 B904 00D2                         10284+         lgr   13,2                set real frame pointer               01-DCCPR
00006A4A B904 00CF                         10285+         lgr   12,15               set base reg                         01-DCCPR
                        00006A10           10286+         using @REGION_1993_1,12                                        01-DCCPR
00006A4E B904 0031                         10287          LGR   3,1         ; ptr to parm area
                                           10288 * ******* End of Prologue
                                           10289 * *
00006A52 E320 3000 0004          00000000  10290          LG    2,0(0,3)    ; mconn
                                           10291 * ***           rd_kafka_buf_t *rkbuf;
                                           10292 * ***
                                           10293 * ***           do { if ((((mconn->broker->cluster->rk)->rk_conf.debug\
                                           10294 *  & (0x10000)))) rd_kafka_log0(&mconn->broker->cluster->rk->rk_conf,m\
                                           10295 * conn->broker->cluster->rk,((void *)0), 7,(0x10000), "MOCK","Broker %\
                                           10296 * " "d" ": Connection from %s closed: %s", mconn->broker->id, rd_socka\
                                           10297 * ddr2str(&mconn->peer, 0x1), reason); } while (0);
00006A58                                   10298 @L866    DS    0H
00006A58 E3F0 20A8 0004          000000A8  10299          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006A5E E3F0 F0D8 0004          000000D8  10300          LG    15,216(0,15) ; offset of cluster in rd_kafka_mock_broker*
                                                                _s
00006A64 E3F0 F020 0004          00000020  10301          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
00006A6A 9101 F321      00000321 00000001  10302          TM    801(15),1
00006A6E 4780 C114               00006B24  10303          BZ    @L869
00006A72 41F0 2098               00000098  10304          LA    15,152(0,2)
00006A76 E3F0 D0B0 0024          000000B0  10305          STG   15,176(0,13)
00006A7C E548 D0B8 0001          000000B8  10306          MVGHI 184(13),1
00006A82 4110 D0B0               000000B0  10307          LA    1,176(0,13)
00006A86 E3F0 C178 0004          00006B88  10308          LG    15,@lit_1993_312 ; rd_sockaddr2str
00006A8C                                   10309 @@gen_label470 DS    0H
00006A8C 05EF                              10310          BALR  14,15
00006A8E                                   10311 @@gen_label471 DS    0H
00006A8E E310 20A8 0004          000000A8  10312          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006A94 E310 10D8 0004          000000D8  10313          LG    1,216(0,1)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
00006A9A E310 1020 0004          00000020  10314          LG    1,32(0,1)   ; offset of rk in rd_kafka_mock_cluster_s
00006AA0 4110 1210               00000210  10315          LA    1,528(0,1)
00006AA4 E310 D0B0 0024          000000B0  10316          STG   1,176(0,13)
00006AAA E310 20A8 0004          000000A8  10317          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006AB0 E310 10D8 0004          000000D8  10318          LG    1,216(0,1)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                                                                           Page  211 
  Active Usings: @REGION_1993_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                s
00006AB6 E310 1020 0004          00000020  10319          LG    1,32(0,1)
00006ABC E310 D0B8 0024          000000B8  10320          STG   1,184(0,13)
00006AC2 D707 D0C0 D0C0 000000C0 000000C0  10321          XC    192(8,13),192(13)
00006AC8 E548 D0C8 0007          000000C8  10322          MVGHI 200(13),7
00006ACE C01F 0001 0000                    10323          LLILF 1,X'00010000' ; 65536
00006AD4 E310 D0D0 0024          000000D0  10324          STG   1,208(0,13)
00006ADA E310 C188 0004          00006B98  10325          LG    1,@lit_1993_314
00006AE0 4140 115E               0000015E  10326          LA    4,350(0,1)
00006AE4 E340 D0D8 0024          000000D8  10327          STG   4,216(0,13)
00006AEA 4110 1426               00000426  10328          LA    1,1062(0,1)
00006AEE E310 D0E0 0024          000000E0  10329          STG   1,224(0,13)
00006AF4 E310 20A8 0004          000000A8  10330          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006AFA E310 1010 0014          00000010  10331          LGF   1,16(0,1)
00006B00 E310 D0E8 0024          000000E8  10332          STG   1,232(0,13)
00006B06 E3F0 D0F0 0024          000000F0  10333          STG   15,240(0,13)
00006B0C E3F0 3008 0004          00000008  10334          LG    15,8(0,3)   ; reason
00006B12 E3F0 D0F8 0024          000000F8  10335          STG   15,248(0,13)
00006B18 4110 D0B0               000000B0  10336          LA    1,176(0,13)
00006B1C E3F0 C180 0004          00006B90  10337          LG    15,@lit_1993_315 ; rd_kafka_log0
00006B22                                   10338 @@gen_label472 DS    0H
00006B22 05EF                              10339          BALR  14,15
00006B24                                   10340 @@gen_label473 DS    0H
00006B24                                   10341 @L869    DS    0H
                                           10342 * ***
                                           10343 * ***
                                           10344 * ***
                                           10345 * ***
                                           10346 * ***
                                           10347 * ***           rd_kafka_mock_cgrps_connection_closed(mconn->broker->c\
                                           10348 * luster, mconn);
00006B24 E3F0 20A8 0004          000000A8  10349          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006B2A E3F0 F0D8 0004          000000D8  10350          LG    15,216(0,15)
00006B30 E3F0 D0B0 0024          000000B0  10351          STG   15,176(0,13)
00006B36 E320 D0B8 0024          000000B8  10352          STG   2,184(0,13)
00006B3C 4110 D0B0               000000B0  10353          LA    1,176(0,13)
00006B40 E3F0 C190 0004          00006BA0  10354          LG    15,@lit_1993_316 ; rd_kafka_mock_cgrps_connection_closed
00006B46                                   10355 @@gen_label474 DS    0H
00006B46 05EF                              10356          BALR  14,15
00006B48                                   10357 @@gen_label475 DS    0H
                                           10358 * ***
                                           10359 * ***           rd_kafka_timer_stop(&mconn->broker->cluster->timers,
                                           10360 * ***                               &mconn->write_tmr, 1);
00006B48 E3F0 20A8 0004          000000A8  10361          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006B4E E3F0 F0D8 0004          000000D8  10362          LG    15,216(0,15) ; offset of cluster in rd_kafka_mock_broker*
                                                                _s
00006B54 41F0 F4E0               000004E0  10363          LA    15,1248(0,15)
00006B58 E3F0 D0B0 0024          000000B0  10364          STG   15,176(0,13)
00006B5E 41F0 20B0               000000B0  10365          LA    15,176(0,2)
                                                                                                                           Page  212 
  Active Usings: @REGION_1993_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006B62 E3F0 D0B8 0024          000000B8  10366          STG   15,184(0,13)
00006B68 E548 D0C0 0001          000000C0  10367          MVGHI 192(13),1
00006B6E 4110 D0B0               000000B0  10368          LA    1,176(0,13)
00006B72 E3F0 C198 0004          00006BA8  10369          LG    15,@lit_1993_317 ; rd_kafka_timer_stop
00006B78                                   10370 @@gen_label476 DS    0H
00006B78 05EF                              10371          BALR  14,15
00006B7A                                   10372 @@gen_label477 DS    0H
                                           10373 * ***
                                           10374 * ***           while ((rkbuf = ((&mconn->outbufs.rkbq_bufs)->tqh_firs\
                                           10375 * t))) {
00006B7A 47F0 C21A               00006C2A  10376          B     @L873
00006B80                                   10377          DS    0D
00006B80 00000100                          10378 @FRAMESIZE_1993 DC F'256'
00006B84 00000000
00006B88 0000000000000000                  10379 @lit_1993_312 DC AD(rd_sockaddr2str)
00006B90 0000000000000000                  10380 @lit_1993_315 DC AD(rd_kafka_log0)
00006B98 0000000000010840                  10381 @lit_1993_314 DC AD(@strings@)
00006BA0 0000000000000000                  10382 @lit_1993_316 DC AD(rd_kafka_mock_cgrps_connection_closed)
00006BA8 0000000000000000                  10383 @lit_1993_317 DC AD(rd_kafka_timer_stop)
00006BB0 0000000000000000                  10384 @lit_1993_318 DC AD(rd_kafka_bufq_deq)
00006BB8 0000000000000DF0                  10385 @lit_1993_319 DC AD(rd_refcnt_sub0)
00006BC0 0000000000000000                  10386 @lit_1993_320 DC AD(rd_kafka_buf_destroy_final)
00006BC8 0000000000006550                  10387 @lit_1993_323 DC AD(rd_kafka_mock_cluster_io_del)
00006BD0 0000000000000000                  10388 @lit_1993_324 DC AD(rd_kafka_transport_close)
00006BD8 0000000000000B78                  10389 @lit_1993_325 DC AD(rd_free)
00006BE0                                   10390 @L872    DS    0H
                                           10391 * ***                   rd_kafka_bufq_deq(&mconn->outbufs, rkbuf);
00006BE0 41F0 2020               00000020  10392          LA    15,32(0,2)
00006BE4 E3F0 D0B0 0024          000000B0  10393          STG   15,176(0,13)
00006BEA E330 D0B8 0024          000000B8  10394          STG   3,184(0,13)
00006BF0 4110 D0B0               000000B0  10395          LA    1,176(0,13)
00006BF4 E3F0 C1A0 0004          00006BB0  10396          LG    15,@lit_1993_318 ; rd_kafka_bufq_deq
00006BFA                                   10397 @@gen_label478 DS    0H
00006BFA 05EF                              10398          BALR  14,15
00006BFC                                   10399 @@gen_label479 DS    0H
                                           10400 * ***                   do { if (rd_refcnt_sub0(&(rkbuf)->rkbuf_refcnt\
                                           10401 * ) > 0) break; rd_kafka_buf_destroy_final(rkbuf); } while (0);
00006BFC                                   10402 @L874    DS    0H
00006BFC 41F0 3108               00000108  10403          LA    15,264(0,3)
00006C00 E3F0 D0B0 0024          000000B0  10404          STG   15,176(0,13)
00006C06 4110 D0B0               000000B0  10405          LA    1,176(0,13)
00006C0A E3F0 C1A8 0004          00006BB8  10406          LG    15,@lit_1993_319 ; rd_refcnt_sub0
00006C10                                   10407 @@gen_label480 DS    0H
00006C10 05EF                              10408          BALR  14,15
00006C12                                   10409 @@gen_label481 DS    0H
00006C12 12FF                              10410          LTR   15,15
00006C14 4720 C21A               00006C2A  10411          BH    @L873
00006C18                                   10412 @L877    DS    0H
00006C18 E330 D0B0 0024          000000B0  10413          STG   3,176(0,13)
00006C1E 4110 D0B0               000000B0  10414          LA    1,176(0,13)
00006C22 E3F0 C1B0 0004          00006BC0  10415          LG    15,@lit_1993_320 ; rd_kafka_buf_destroy_final
00006C28                                   10416 @@gen_label483 DS    0H
                                                                                                                           Page  213 
  Active Usings: @REGION_1993_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006C28 05EF                              10417          BALR  14,15
00006C2A                                   10418 @@gen_label484 DS    0H
00006C2A                                   10419 @L875    DS    0H
                                           10420 * ***           }
00006C2A                                   10421 @L873    DS    0H
00006C2A E330 2020 0004          00000020  10422          LG    3,32(0,2)   ; offset of outbufs in rd_kafka_mock_connect*
                                                                ion_s
00006C30 B902 00F3                         10423          LTGR  15,3
00006C34 4770 C1D0               00006BE0  10424          BNZ   @L872
                                           10425 * ***
                                           10426 * ***           if (mconn->rxbuf)
00006C38 E3F0 2018 0002          00000018  10427          LTG   15,24(0,2)  ; offset of rxbuf in rd_kafka_mock_connectio*
                                                                n_s
00006C3E 4780 C26C               00006C7C  10428          BZ    @L878
                                           10429 * ***                   do { if (rd_refcnt_sub0(&(mconn->rxbuf)->rkbuf\
                                           10430 * _refcnt) > 0) break; rd_kafka_buf_destroy_final(mconn->rxbuf); } whi\
                                           10431 * le (0);
00006C42                                   10432 @L879    DS    0H
00006C42 E3F0 2018 0004          00000018  10433          LG    15,24(0,2)  ; offset of rxbuf in rd_kafka_mock_connectio*
                                                                n_s
00006C48 41F0 F108               00000108  10434          LA    15,264(0,15)
00006C4C E3F0 D0B0 0024          000000B0  10435          STG   15,176(0,13)
00006C52 4110 D0B0               000000B0  10436          LA    1,176(0,13)
00006C56 E3F0 C1A8 0004          00006BB8  10437          LG    15,@lit_1993_319 ; rd_refcnt_sub0
00006C5C                                   10438 @@gen_label487 DS    0H
00006C5C 05EF                              10439          BALR  14,15
00006C5E                                   10440 @@gen_label488 DS    0H
00006C5E 12FF                              10441          LTR   15,15
00006C60 4720 C26C               00006C7C  10442          BH    @L878
00006C64                                   10443 @L882    DS    0H
00006C64 E3F0 2018 0004          00000018  10444          LG    15,24(0,2)
00006C6A E3F0 D0B0 0024          000000B0  10445          STG   15,176(0,13)
00006C70 4110 D0B0               000000B0  10446          LA    1,176(0,13)
00006C74 E3F0 C1B0 0004          00006BC0  10447          LG    15,@lit_1993_320 ; rd_kafka_buf_destroy_final
00006C7A                                   10448 @@gen_label490 DS    0H
00006C7A 05EF                              10449          BALR  14,15
00006C7C                                   10450 @@gen_label491 DS    0H
00006C7C                                   10451 @L880    DS    0H
                                           10452 * ***
                                           10453 * ***           rd_kafka_mock_cluster_io_del(mconn->broker->cluster,
00006C7C                                   10454 @L878    DS    0H
                                           10455 * ***                                        mconn->transport->rktrans\
                                           10456 * _s);
00006C7C E3F0 20A8 0004          000000A8  10457          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006C82 E3F0 F0D8 0004          000000D8  10458          LG    15,216(0,15)
00006C88 E3F0 D0B0 0024          000000B0  10459          STG   15,176(0,13)
00006C8E E3F0 2010 0004          00000010  10460          LG    15,16(0,2)  ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
00006C94 E3F0 F000 0014          00000000  10461          LGF   15,0(0,15)
00006C9A E3F0 D0B8 0024          000000B8  10462          STG   15,184(0,13)
00006CA0 4110 D0B0               000000B0  10463          LA    1,176(0,13)
                                                                                                                           Page  214 
  Active Usings: @REGION_1993_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006CA4 E3F0 C1B8 0004          00006BC8  10464          LG    15,@lit_1993_323 ; rd_kafka_mock_cluster_io_del
00006CAA                                   10465 @@gen_label492 DS    0H
00006CAA 05EF                              10466          BALR  14,15
00006CAC                                   10467 @@gen_label493 DS    0H
                                           10468 * ***           do {   if (((mconn)->link .tqe_next) != (((void *)0)))\
                                           10469 *  (mconn)->link .tqe_next->link .tqe_prev = (mconn)->link .tqe_prev; \
                                           10470 * else (&mconn->broker->connections)->tqh_last = (mconn)->link .tqe_pr\
                                           10471 * ev; *(mconn)->link .tqe_prev = (mconn)->link .tqe_next; ; } while ( \
                                           10472 * 0);
00006CAC                                   10473 @L883    DS    0H
00006CAC E3F0 2000 0002          00000000  10474          LTG   15,0(0,2)   ; mconn
00006CB2 4780 C2BC               00006CCC  10475          BE    @L886
00006CB6 E3F0 2000 0004          00000000  10476          LG    15,0(0,2)   ; mconn
00006CBC E310 2008 0004          00000008  10477          LG    1,8(0,2)    ; offset of tqe_prev in 0000160
00006CC2 E310 F008 0024          00000008  10478          STG   1,8(0,15)   ; offset of tqe_prev in 0000160
00006CC8 47F0 C2CE               00006CDE  10479          B     @L887
00006CCC                                   10480 @L886    DS    0H
00006CCC E3F0 20A8 0004          000000A8  10481          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006CD2 E310 2008 0004          00000008  10482          LG    1,8(0,2)    ; offset of tqe_prev in 0000160
00006CD8 E310 F0C0 0024          000000C0  10483          STG   1,192(0,15) ; offset of tqh_last in 0000162
00006CDE                                   10484 @L887    DS    0H
00006CDE E3F0 2008 0004          00000008  10485          LG    15,8(0,2)   ; offset of tqe_prev in 0000160
00006CE4 E310 2000 0004          00000000  10486          LG    1,0(0,2)    ; mconn
00006CEA E310 F000 0024          00000000  10487          STG   1,0(0,15)
                                           10488 * ***           rd_kafka_transport_close(mconn->transport);
00006CF0 E3F0 2010 0004          00000010  10489          LG    15,16(0,2)
00006CF6 E3F0 D0B0 0024          000000B0  10490          STG   15,176(0,13)
00006CFC 4110 D0B0               000000B0  10491          LA    1,176(0,13)
00006D00 E3F0 C1C0 0004          00006BD0  10492          LG    15,@lit_1993_324 ; rd_kafka_transport_close
00006D06                                   10493 @@gen_label495 DS    0H
00006D06 05EF                              10494          BALR  14,15
00006D08                                   10495 @@gen_label496 DS    0H
                                           10496 * ***           rd_free(mconn);
00006D08 E320 D0B0 0024          000000B0  10497          STG   2,176(0,13)
00006D0E 4110 D0B0               000000B0  10498          LA    1,176(0,13)
00006D12 E3F0 C1C8 0004          00006BD8  10499          LG    15,@lit_1993_325 ; rd_free
00006D18                                   10500 @@gen_label497 DS    0H
00006D18 05EF                              10501          BALR  14,15
00006D1A                                   10502 @@gen_label498 DS    0H
                                           10503 * ***   }
00006D1A                                   10504 @ret_lab_1993 DS 0H
                                           10505 * * **** Start of Epilogue
                                           10506          DCCEPIL
00006D1A                                   10507+         ds 0h                                                          01-DCCEP
                                           10508+* Epilog
00006D1A D707 D088 D088 00000088 00000088  10509+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00006D20 E3D0 D080 0004          00000080  10510+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00006D26 E3C0 D090 0004          00000090  10511+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00006D2C E3B0 C018 0004          00000018  10512+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00006D32 E3C0 B010 0021          00000010  10513+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00006D38 E3E0 D008 0004          00000008  10514+         lg  14,8(0,13)          load up return address                 01-DCCEP
                                                                                                                           Page  215 
  Active Usings: @REGION_1993_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006D3E EB1C D020 0004          00000020  10515+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00006D44 078E                              10516+         bcr 8,14                if same dsab, just return              01-DCCEP
00006D46 E3F0 D010 0024          00000010  10517+         stg 15,16(0,13)         save return code                       01-DCCEP
00006D4C E300 D018 0024          00000018  10518+         stg 0,24(0,13)          save more return code                  01-DCCEP
00006D52 E3F0 D090 0004          00000090  10519+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00006D58 E3F0 F018 0004          00000018  10520+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00006D5E 47F0 F040               00000040  10521+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           10522+* End of Epilog
                                           10523 * * **** End of Epilogue
                                           10524          DROP  12
                                           10525 *
                                           10526 *   DSECT for automatic variables in "rd_kafka_mock_connection_close"
                                           10527 *      (FUNCTION #1993)
                                           10528 *
00000000                00000000 000000A8  10529 @AUTO#rd_kafka_mock_connection_close DSECT
00000000                                   10530          DS    XL168
                                           10531 *
00006D62                00000000 00010480  10532 @CODE    CSECT
                                           10533 *
                                           10534 *
                                           10535 *
                                           10536 * ....... start of rd_kafka_mock_connection_send_response
                                           10537 rd_kafka_mock_connection_send_response ALIAS X'99846D92818692816D949683*
                                                                926D839695958583A38996956DA28595846D9985A2979695A285'
00006D62                                   10538 @LNAME1938 DS  0H
00006D62 00000026                          10539          DC    X'00000026'
00006D66 99846D9281869281                  10540          DC    C'rd_kafka_mock_connection_send_re'
00006D86 A2979695A285                      10541          DC    C'sponse'
00006D8C 00                                10542          DC    X'00'
                                           10543 rd_kafka_mock_connection_send_response DCCPRLG CINDEX=1938,BASER=12,FRA*
                                                                ME=256,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1938
                                           10544          macro
                                           10545          dccextrn &m
                                           10546          gblc    &$dccext(1000)
                                           10547          gbla    &$dccexti
                                           10548          lcla    &i
                                           10549 &$dccext(&$dccexti+1) setc    '&m'
                                           10550 &i       seta    1
                                           10551 .loop    aif    (&i gt &$dccexti).around
                                           10552          aif    ('&$dccext(&i)' eq '&m').getout
                                           10553 &i       seta    &i+1
                                           10554          ago     .loop
                                           10555 .around  anop
                                           10556 &$dccexti seta &$dccexti+1
                                           10557          extrn  &m
                                           10558 .getout  anop
                                           10559          mend
00006D90                                   10560+$eye0208    ds    0d                                                    02-DCCCA
00006D90 C4C3C3                            10561+         dc cl3'DCC'                                                    02-DCCCA
00006D93 01                                10562+         dc xl1'01' format one                                          02-DCCCA
00006D94 00000000                          10563+         dc a(0)                                                        02-DCCCA
00006D98 0000000000006E02                  10564+         dc ad(@PER_1938)                                               02-DCCCA
                                                                                                                           Page  216 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006DA0 0000000000000100                  10565+         dc ad(256)                                                     02-DCCCA
00006DA8 0000000000000000                  10566+         dc ad(0)                                                       02-DCCCA
00006DB0 0000000000001000                  10567+         dc ad(4096)                                                    02-DCCCA
00006DB8 20                                10568+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00006DB9 03                                10569+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00006DBA 03                                10570+         dc al1(3)                                                      02-DCCCA
00006DBB 08                                10571+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00006DBC 00                                10572+         dc bl.8'00000000'                                              02-DCCCA
00006DBD 000000                            10573+         dc al3(0)                                                      02-DCCCA
00006DC0 0000000000006D62                  10574+         dc ad(@LNAME1938)                                              02-DCCCA
00006DC8                                   10575+         ds 0d                                                          02-DCCCA
00006DC8 0000000000006D90                  10576+         dc ad($eye0208)                                                02-DCCCA
00006DD0 0000000000000000                  10577+         dc ad(0)                                                       02-DCCCA
00006DD8                                   10578+         ds    0d                                                       01-DCCPR
                                           10579+         entry rd_kafka_mock_connection_send_response                   01-DCCPR
00006DD8                                   10580+rd_kafka_mock_connection_send_response ds 0d                            01-DCCPR
00006DD8                                   10581+@REGION_1938_1 ds 0h                                                    01-DCCPR
00006DD8 EBEC D008 0024          00000008  10582+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00006DDE E3E0 D088 0004          00000088  10583+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00006DE4 E3C0 D090 0004          00000090  10584+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00006DEA B904 002E                         10585+         lgr   2,14                copy addr of our savearea            01-DCCPR
00006DEE E3B0 C018 0004          00000018  10586+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00006DF4 A7EB 0100               00000100  10587+         aghi  14,256              increase by frame size               01-DCCPR
00006DF8 E3E0 C020 0021          00000020  10588+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00006DFE 4720 B020               00000020  10589+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00006E02                                   10590+@PER_1938 ds   0h                                                       01-DCCPR
00006E02 EBDE 2080 0024          00000080  10591+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00006E08 E3C0 2090 0024          00000090  10592+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00006E0E B904 00D2                         10593+         lgr   13,2                set real frame pointer               01-DCCPR
00006E12 B904 00CF                         10594+         lgr   12,15               set base reg                         01-DCCPR
                        00006DD8           10595+         using @REGION_1938_1,12                                        01-DCCPR
                                           10596 * ******* End of Prologue
                                           10597 * *
00006E16 EB23 1000 0004          00000000  10598          LMG   2,3,0(1)    ; mconn
                                           10599 * ***
                                           10600 * ***           if (resp->rkbuf_flags & 0x40) {
00006E1C 9140 3023      00000023 00000040  10601          TM    35(3),64
00006E20 4780 C064               00006E3C  10602          BZ    @L888
                                           10603 * ***
                                           10604 * ***                   rd_kafka_buf_write_i8(resp, 0);
00006E24 E330 D0A8 0024          000000A8  10605          STG   3,168(0,13)
00006E2A D707 D0B0 D0B0 000000B0 000000B0  10606          XC    176(8,13),176(13)
00006E30 4110 D0A8               000000A8  10607          LA    1,168(0,13)
00006E34 E3F0 C270 0004          00007048  10608          LG    15,@lit_1938_327 ; rd_kafka_buf_write_i8
00006E3A                                   10609 @@gen_label500 DS    0H
00006E3A 05EF                              10610          BALR  14,15
00006E3C                                   10611 @@gen_label501 DS    0H
                                           10612 * ***           }
00006E3C                                   10613 @L888    DS    0H
                                           10614 * ***
                                           10615 * ***
                                           10616 * ***           resp->rkbuf_ts_sent += rd_clock();
                                                                                                                           Page  217 
  Active Usings: @REGION_1938_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006E3C E340 3158 0004          00000158  10617          LG    4,344(0,3)
00006E42 E3F0 C278 0004          00007050  10618          LG    15,@lit_1938_328 ; rd_clock
00006E48                                   10619 @@gen_label502 DS    0H
00006E48 05EF                              10620          BALR  14,15
00006E4A                                   10621 @@gen_label503 DS    0H
00006E4A B908 004F                         10622          AGR   4,15
00006E4E E340 3158 0024          00000158  10623          STG   4,344(0,3)
                                           10624 * ***
                                           10625 * ***           resp->rkbuf_reshdr.Size =
                                           10626 * ***                   (int32_t)(rd_buf_write_pos(&resp->rkbuf_buf) -\
                                           10627 *  4);
00006E54 41F0 3028               00000028  10628          LA    15,40(0,3)
00006E58 E3F0 D0A8 0024          000000A8  10629          STG   15,168(0,13)
00006E5E 4110 D0A8               000000A8  10630          LA    1,168(0,13)
00006E62 E3F0 C280 0004          00007058  10631          LG    15,@lit_1938_329 ; rd_buf_write_pos
00006E68                                   10632 @@gen_label504 DS    0H
00006E68 05EF                              10633          BALR  14,15
00006E6A                                   10634 @@gen_label505 DS    0H
00006E6A A7FB FFFC               0000FFFC  10635          AGHI  15,-4
00006E6E 50F0 30C0               000000C0  10636          ST    15,192(0,3)
                                           10637 * ***
                                           10638 * ***           rd_kafka_buf_update_i32(resp, 0, resp->rkbuf_reshdr.Si\
                                           10639 * ze);
00006E72 E330 D0A8 0024          000000A8  10640          STG   3,168(0,13)
00006E78 D707 D0B0 D0B0 000000B0 000000B0  10641          XC    176(8,13),176(13)
00006E7E E3F0 30C0 0014          000000C0  10642          LGF   15,192(0,3)
00006E84 E3F0 D0B8 0024          000000B8  10643          STG   15,184(0,13)
00006E8A 4110 D0A8               000000A8  10644          LA    1,168(0,13)
00006E8E E3F0 C288 0004          00007060  10645          LG    15,@lit_1938_330 ; rd_kafka_buf_update_i32
00006E94                                   10646 @@gen_label506 DS    0H
00006E94 05EF                              10647          BALR  14,15
00006E96                                   10648 @@gen_label507 DS    0H
                                           10649 * ***
                                           10650 * ***           do { if ((((mconn->broker->cluster->rk)->rk_conf.debug\
                                           10651 *  & (0x10000)))) rd_kafka_log0(&mconn->broker->cluster->rk->rk_conf,m\
                                           10652 * conn->broker->cluster->rk,((void *)0), 7,(0x10000), "MOCK","Broker %\
                                           10653 * " "d" ": Sending %sResponseV%hd to %s", mconn->broker->id, rd_kafka_\
                                           10654 * ApiKey2str(resp->rkbuf_reqhdr.ApiKey), resp->rkbuf_reqhdr.ApiVersion\
                                           10655 * , rd_sockaddr2str(&mconn->peer, 0x1)); } while (0);
00006E96                                   10656 @L889    DS    0H
00006E96 E3F0 20A8 0004          000000A8  10657          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006E9C E3F0 F0D8 0004          000000D8  10658          LG    15,216(0,15) ; offset of cluster in rd_kafka_mock_broker*
                                                                _s
00006EA2 E3F0 F020 0004          00000020  10659          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
00006EA8 9101 F321      00000321 00000001  10660          TM    801(15),1
00006EAC 4780 C1AE               00006F86  10661          BZ    @L892
00006EB0 E3F0 30B8 0015          000000B8  10662          LGH   15,184(0,3)
00006EB6 E3F0 D0A8 0024          000000A8  10663          STG   15,168(0,13)
00006EBC 4110 D0A8               000000A8  10664          LA    1,168(0,13)
00006EC0 E3F0 C290 0004          00007068  10665          LG    15,@lit_1938_331 ; rd_kafka_ApiKey2str
00006EC6                                   10666 @@gen_label509 DS    0H
                                                                                                                           Page  218 
  Active Usings: @REGION_1938_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00006EC6 05EF                              10667          BALR  14,15
00006EC8                                   10668 @@gen_label510 DS    0H
00006EC8 B904 004F                         10669          LGR   4,15
00006ECC 41F0 2098               00000098  10670          LA    15,152(0,2)
00006ED0 E3F0 D0A8 0024          000000A8  10671          STG   15,168(0,13)
00006ED6 E548 D0B0 0001          000000B0  10672          MVGHI 176(13),1
00006EDC 4110 D0A8               000000A8  10673          LA    1,168(0,13)
00006EE0 E3F0 C298 0004          00007070  10674          LG    15,@lit_1938_332 ; rd_sockaddr2str
00006EE6                                   10675 @@gen_label511 DS    0H
00006EE6 05EF                              10676          BALR  14,15
00006EE8                                   10677 @@gen_label512 DS    0H
00006EE8 E310 20A8 0004          000000A8  10678          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006EEE E310 10D8 0004          000000D8  10679          LG    1,216(0,1)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
00006EF4 E310 1020 0004          00000020  10680          LG    1,32(0,1)   ; offset of rk in rd_kafka_mock_cluster_s
00006EFA 4110 1210               00000210  10681          LA    1,528(0,1)
00006EFE E310 D0A8 0024          000000A8  10682          STG   1,168(0,13)
00006F04 E310 20A8 0004          000000A8  10683          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006F0A E310 10D8 0004          000000D8  10684          LG    1,216(0,1)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
00006F10 E310 1020 0004          00000020  10685          LG    1,32(0,1)
00006F16 E310 D0B0 0024          000000B0  10686          STG   1,176(0,13)
00006F1C D707 D0B8 D0B8 000000B8 000000B8  10687          XC    184(8,13),184(13)
00006F22 E548 D0C0 0007          000000C0  10688          MVGHI 192(13),7
00006F28 C01F 0001 0000                    10689          LLILF 1,X'00010000' ; 65536
00006F2E E310 D0C8 0024          000000C8  10690          STG   1,200(0,13)
00006F34 E310 C2A8 0004          00007080  10691          LG    1,@lit_1938_334
00006F3A 4150 115E               0000015E  10692          LA    5,350(0,1)
00006F3E E350 D0D0 0024          000000D0  10693          STG   5,208(0,13)
00006F44 4110 1450               00000450  10694          LA    1,1104(0,1)
00006F48 E310 D0D8 0024          000000D8  10695          STG   1,216(0,13)
00006F4E E310 20A8 0004          000000A8  10696          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006F54 E310 1010 0014          00000010  10697          LGF   1,16(0,1)
00006F5A E310 D0E0 0024          000000E0  10698          STG   1,224(0,13)
00006F60 E340 D0E8 0024          000000E8  10699          STG   4,232(0,13)
00006F66 4810 30BA               000000BA  10700          LH    1,186(0,3)
00006F6A B914 0011                         10701          LGFR  1,1
00006F6E E310 D0F0 0024          000000F0  10702          STG   1,240(0,13)
00006F74 E3F0 D0F8 0024          000000F8  10703          STG   15,248(0,13)
00006F7A 4110 D0A8               000000A8  10704          LA    1,168(0,13)
00006F7E E3F0 C2A0 0004          00007078  10705          LG    15,@lit_1938_335 ; rd_kafka_log0
00006F84                                   10706 @@gen_label513 DS    0H
00006F84 05EF                              10707          BALR  14,15
00006F86                                   10708 @@gen_label514 DS    0H
00006F86                                   10709 @L892    DS    0H
                                           10710 * ***
                                           10711 * ***   # 695 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           10712 * ***
                                           10713 * ***           rd_slice_init_full(&resp->rkbuf_reader, &resp->rkbuf_b\
                                                                                                                           Page  219 
  Active Usings: @REGION_1938_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           10714 * uf);
00006F86 41F0 3078               00000078  10715          LA    15,120(0,3)
00006F8A E3F0 D0A8 0024          000000A8  10716          STG   15,168(0,13)
00006F90 41F0 3028               00000028  10717          LA    15,40(0,3)
00006F94 E3F0 D0B0 0024          000000B0  10718          STG   15,176(0,13)
00006F9A 4110 D0A8               000000A8  10719          LA    1,168(0,13)
00006F9E E3F0 C2B0 0004          00007088  10720          LG    15,@lit_1938_336 ; rd_slice_init_full
00006FA4                                   10721 @@gen_label515 DS    0H
00006FA4 05EF                              10722          BALR  14,15
00006FA6                                   10723 @@gen_label516 DS    0H
                                           10724 * ***
                                           10725 * ***           rd_kafka_bufq_enq(&mconn->outbufs, resp);
00006FA6 41F0 2020               00000020  10726          LA    15,32(0,2)
00006FAA E3F0 D0A8 0024          000000A8  10727          STG   15,168(0,13)
00006FB0 E330 D0B0 0024          000000B0  10728          STG   3,176(0,13)
00006FB6 4110 D0A8               000000A8  10729          LA    1,168(0,13)
00006FBA E3F0 C2B8 0004          00007090  10730          LG    15,@lit_1938_337 ; rd_kafka_bufq_enq
00006FC0                                   10731 @@gen_label517 DS    0H
00006FC0 05EF                              10732          BALR  14,15
00006FC2                                   10733 @@gen_label518 DS    0H
                                           10734 * ***
                                           10735 * ***           rd_kafka_mock_cluster_io_set_events(mconn->broker->clu\
                                           10736 * ster,
                                           10737 * ***                                               mconn->transport->\
                                           10738 * rktrans_s,
                                           10739 * ***                                               0x0004);
00006FC2 E3F0 20A8 0004          000000A8  10740          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00006FC8 E3F0 F0D8 0004          000000D8  10741          LG    15,216(0,15)
00006FCE E3F0 D0A8 0024          000000A8  10742          STG   15,168(0,13)
00006FD4 E3F0 2010 0004          00000010  10743          LG    15,16(0,2)  ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
00006FDA E3F0 F000 0014          00000000  10744          LGF   15,0(0,15)
00006FE0 E3F0 D0B0 0024          000000B0  10745          STG   15,176(0,13)
00006FE6 E548 D0B8 0004          000000B8  10746          MVGHI 184(13),4
00006FEC 4110 D0A8               000000A8  10747          LA    1,168(0,13)
00006FF0 E3F0 C2C0 0004          00007098  10748          LG    15,@lit_1938_338 ; rd_kafka_mock_cluster_io_set_events
00006FF6                                   10749 @@gen_label519 DS    0H
00006FF6 05EF                              10750          BALR  14,15
00006FF8                                   10751 @@gen_label520 DS    0H
                                           10752 * ***   }
00006FF8                                   10753 @ret_lab_1938 DS 0H
                                           10754 * * **** Start of Epilogue
                                           10755          DCCEPIL
00006FF8                                   10756+         ds 0h                                                          01-DCCEP
                                           10757+* Epilog
00006FF8 D707 D088 D088 00000088 00000088  10758+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00006FFE E3D0 D080 0004          00000080  10759+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00007004 E3C0 D090 0004          00000090  10760+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000700A E3B0 C018 0004          00000018  10761+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00007010 E3C0 B010 0021          00000010  10762+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00007016 E3E0 D008 0004          00000008  10763+         lg  14,8(0,13)          load up return address                 01-DCCEP
                                                                                                                           Page  220 
  Active Usings: @REGION_1938_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000701C EB1C D020 0004          00000020  10764+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00007022 078E                              10765+         bcr 8,14                if same dsab, just return              01-DCCEP
00007024 E3F0 D010 0024          00000010  10766+         stg 15,16(0,13)         save return code                       01-DCCEP
0000702A E300 D018 0024          00000018  10767+         stg 0,24(0,13)          save more return code                  01-DCCEP
00007030 E3F0 D090 0004          00000090  10768+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00007036 E3F0 F018 0004          00000018  10769+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000703C 47F0 F040               00000040  10770+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           10771+* End of Epilog
                                           10772 * * **** End of Epilogue
00007040                                   10773          DS    0D
00007040 00000100                          10774 @FRAMESIZE_1938 DC F'256'
00007044 00000000
00007048 00000000000031C8                  10775 @lit_1938_327 DC AD(rd_kafka_buf_write_i8)
00007050 0000000000000F68                  10776 @lit_1938_328 DC AD(rd_clock)
00007058 0000000000001090                  10777 @lit_1938_329 DC AD(rd_buf_write_pos)
00007060 0000000000003420                  10778 @lit_1938_330 DC AD(rd_kafka_buf_update_i32)
00007068 0000000000001310                  10779 @lit_1938_331 DC AD(rd_kafka_$Api$Key2str)
00007070 0000000000000000                  10780 @lit_1938_332 DC AD(rd_sockaddr2str)
00007078 0000000000000000                  10781 @lit_1938_335 DC AD(rd_kafka_log0)
00007080 0000000000010840                  10782 @lit_1938_334 DC AD(@strings@)
00007088 0000000000000000                  10783 @lit_1938_336 DC AD(rd_slice_init_full)
00007090 0000000000000000                  10784 @lit_1938_337 DC AD(rd_kafka_bufq_enq)
00007098 0000000000005FE8                  10785 @lit_1938_338 DC AD(rd_kafka_mock_cluster_io_set_events)
                                           10786          DROP  12
                                           10787 *
                                           10788 *   DSECT for automatic variables in "rd_kafka_mock_connection_send_re
                                           10789 *           sponse"
                                           10790 *      (FUNCTION #1938)
                                           10791 *
00000000                00000000 000000A8  10792 @AUTO#rd_kafka_mock_connection_send_response DSECT
00000000                                   10793          DS    XL168
                                           10794 *
000070A0                00000000 00010480  10795 @CODE    CSECT
                                           10796 *
                                           10797 *
                                           10798 *
                                           10799 * ....... start of rd_kafka_mock_connection_read_request
000070A0                                   10800 @LNAME1994 DS  0H
000070A0 00000025                          10801          DC    X'00000025'
000070A4 99846D9281869281                  10802          DC    C'rd_kafka_mock_connection_read_re'
000070C4 98A485A2A3                        10803          DC    C'quest'
000070C9 00                                10804          DC    X'00'
                                           10805 rd_kafka_mock_connection_read_request DCCPRLG CINDEX=1994,BASER=12,FRAM*
                                                                E=1016,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1994
                                           10806          macro
                                           10807          dccextrn &m
                                           10808          gblc    &$dccext(1000)
                                           10809          gbla    &$dccexti
                                           10810          lcla    &i
                                           10811 &$dccext(&$dccexti+1) setc    '&m'
                                           10812 &i       seta    1
                                           10813 .loop    aif    (&i gt &$dccexti).around
                                                                                                                           Page  221 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           10814          aif    ('&$dccext(&i)' eq '&m').getout
                                           10815 &i       seta    &i+1
                                           10816          ago     .loop
                                           10817 .around  anop
                                           10818 &$dccexti seta &$dccexti+1
                                           10819          extrn  &m
                                           10820 .getout  anop
                                           10821          mend
000070D0                                   10822+$eye0211    ds    0d                                                    02-DCCCA
000070D0 C4C3C3                            10823+         dc cl3'DCC'                                                    02-DCCCA
000070D3 01                                10824+         dc xl1'01' format one                                          02-DCCCA
000070D4 00000000                          10825+         dc a(0)                                                        02-DCCCA
000070D8 0000000000007142                  10826+         dc ad(@PER_1994)                                               02-DCCCA
000070E0 00000000000003F8                  10827+         dc ad(1016)                                                    02-DCCCA
000070E8 0000000000000000                  10828+         dc ad(0)                                                       02-DCCCA
000070F0 0000000000001000                  10829+         dc ad(4096)                                                    02-DCCCA
000070F8 20                                10830+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000070F9 03                                10831+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000070FA 03                                10832+         dc al1(3)                                                      02-DCCCA
000070FB 08                                10833+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000070FC 00                                10834+         dc bl.8'00000000'                                              02-DCCCA
000070FD 000000                            10835+         dc al3(0)                                                      02-DCCCA
00007100 00000000000070A0                  10836+         dc ad(@LNAME1994)                                              02-DCCCA
00007108                                   10837+         ds 0d                                                          02-DCCCA
00007108 00000000000070D0                  10838+         dc ad($eye0211)                                                02-DCCCA
00007110 0000000000000000                  10839+         dc ad(0)                                                       02-DCCCA
00007118                                   10840+         ds    0d                                                       01-DCCPR
00007118                                   10841+rd_kafka_mock_connection_read_request ds 0d                             01-DCCPR
00007118                                   10842+@REGION_1994_1 ds 0h                                                    01-DCCPR
00007118 EBEC D008 0024          00000008  10843+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000711E E3E0 D088 0004          00000088  10844+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00007124 E3C0 D090 0004          00000090  10845+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000712A B904 002E                         10846+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000712E E3B0 C018 0004          00000018  10847+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00007134 A7EB 03F8               000003F8  10848+         aghi  14,1016             increase by frame size               01-DCCPR
00007138 E3E0 C020 0021          00000020  10849+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000713E 4720 B020               00000020  10850+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00007142                                   10851+@PER_1994 ds   0h                                                       01-DCCPR
00007142 EBDE 2080 0024          00000080  10852+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00007148 E3C0 2090 0024          00000090  10853+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000714E B904 00D2                         10854+         lgr   13,2                set real frame pointer               01-DCCPR
00007152 B904 00CF                         10855+         lgr   12,15               set base reg                         01-DCCPR
                        00007118           10856+         using @REGION_1994_1,12                                        01-DCCPR
00007156 B904 0071                         10857          LGR   7,1         ; ptr to parm area
                                           10858 * ******* End of Prologue
                                           10859 * *
                                           10860 * ***           rd_kafka_mock_cluster_t *mcluster = mconn->broker->clu\
                                           10861 * ster;
0000715A E330 7000 0004          00000000  10862          LG    3,0(0,7)    ; mconn
00007160 E3F0 30A8 0004          000000A8  10863          LG    15,168(0,3) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00007166 E340 F0D8 0004          000000D8  10864          LG    4,216(0,15) ; offset of cluster in rd_kafka_mock_broker_*
                                                                                                                           Page  222 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                s
                                           10865 * ***           rd_kafka_t *rk = mcluster->rk;
0000716C E350 4020 0004          00000020  10866          LG    5,32(0,4)   ; offset of rk in rd_kafka_mock_cluster_s
                                           10867 * ***           const rd_bool_t log_decode_errors = 1;
00007172 9201 D368      00000368 00000001  10868          MVI   872(13),1   ; log_decode_errors
                                           10869 * ***           rd_kafka_buf_t *rkbuf;
                                           10870 * ***           char errstr[128];
                                           10871 * ***           ssize_t r;
                                           10872 * ***
                                           10873 * ***           if (!(rkbuf = mconn->rxbuf)) {
00007176 E320 3018 0004          00000018  10874          LG    2,24(0,3)   ; offset of rxbuf in rd_kafka_mock_connectio*
                                                                n_s
0000717C B902 00F2                         10875          LTGR  15,2
00007180 4770 C0EE               00007206  10876          BNZ   @L893
                                           10877 * ***
                                           10878 * ***
                                           10879 * ***
                                           10880 * ***                   rkbuf = mconn->rxbuf = rd_kafka_buf_new0(2,(4+\
                                           10881 * 2+2+4),0);
00007184 E548 D370 0002          00000370  10882          MVGHI 880(13),2
0000718A E548 D378 000C          00000378  10883          MVGHI 888(13),12
00007190 D707 D380 D380 00000380 00000380  10884          XC    896(8,13),896(13)
00007196 4110 D370               00000370  10885          LA    1,880(0,13)
0000719A E3F0 C1D8 0004          000072F0  10886          LG    15,@lit_1994_340 ; rd_kafka_buf_new0
000071A0                                   10887 @@gen_label522 DS    0H
000071A0 05EF                              10888          BALR  14,15
000071A2                                   10889 @@gen_label523 DS    0H
000071A2 E3F0 3018 0024          00000018  10890          STG   15,24(0,3)
000071A8 B904 002F                         10891          LGR   2,15        ; rkbuf
                                           10892 * ***
                                           10893 * ***
                                           10894 * ***
                                           10895 * ***                   rkbuf->rkbuf_rkb = mconn->broker->cluster->dum\
                                           10896 * my_rkb;
000071AC E310 30A8 0004          000000A8  10897          LG    1,168(0,3)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
000071B2 E310 10D8 0004          000000D8  10898          LG    1,216(0,1)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
000071B8 E310 10E0 0004          000000E0  10899          LG    1,224(0,1)  ; offset of dummy_rkb in rd_kafka_mock_clust*
                                                                er_s
000071BE E310 F100 0024          00000100  10900          STG   1,256(0,15) ; offset of rkbuf_rkb in rd_kafka_buf_s
                                           10901 * ***                   rd_atomic32_add(&(rkbuf->rkbuf_rkb)->rkb_refcn\
                                           10902 * t, 1);
000071C4 B904 00F1                         10903          LGR   15,1        ; offset of rkbuf_rkb in rd_kafka_buf_s
000071C8 41F0 FFA0               00000FA0  10904          LA    15,4000(0,15)
000071CC E3F0 D370 0024          00000370  10905          STG   15,880(0,13)
000071D2 E548 D378 0001          00000378  10906          MVGHI 888(13),1
000071D8 4110 D370               00000370  10907          LA    1,880(0,13)
000071DC E3F0 C1E0 0004          000072F8  10908          LG    15,@lit_1994_341 ; rd_atomic32_add
000071E2                                   10909 @@gen_label524 DS    0H
000071E2 05EF                              10910          BALR  14,15
000071E4                                   10911 @@gen_label525 DS    0H
                                                                                                                           Page  223 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           10912 * ***
                                           10913 * ***
                                           10914 * ***                   rd_buf_write_ensure(&rkbuf->rkbuf_buf,
                                           10915 * ***                                       (4+2+2+4),
                                           10916 * ***                                       (4+2+2+4));
000071E4 41F0 2028               00000028  10917          LA    15,40(0,2)
000071E8 E3F0 D370 0024          00000370  10918          STG   15,880(0,13)
000071EE E548 D378 000C          00000378  10919          MVGHI 888(13),12
000071F4 E548 D380 000C          00000380  10920          MVGHI 896(13),12
000071FA 4110 D370               00000370  10921          LA    1,880(0,13)
000071FE E3F0 C1E8 0004          00007300  10922          LG    15,@lit_1994_342 ; rd_buf_write_ensure
00007204                                   10923 @@gen_label526 DS    0H
00007204 05EF                              10924          BALR  14,15
00007206                                   10925 @@gen_label527 DS    0H
                                           10926 * ***           }
00007206                                   10927 @L893    DS    0H
                                           10928 * ***
                                           10929 * ***
                                           10930 * ***
                                           10931 * ***           r = rd_kafka_transport_recv(mconn->transport, &rkbuf->\
                                           10932 * rkbuf_buf,
                                           10933 * ***                                       errstr, sizeof(errstr));
00007206 E3F0 3010 0004          00000010  10934          LG    15,16(0,3)
0000720C E3F0 D370 0024          00000370  10935          STG   15,880(0,13)
00007212 41F0 2028               00000028  10936          LA    15,40(0,2)
00007216 E3F0 D378 0024          00000378  10937          STG   15,888(0,13)
0000721C 41F0 D0E0               000000E0  10938          LA    15,224(0,13)
00007220 E3F0 D380 0024          00000380  10939          STG   15,896(0,13)
00007226 E548 D388 0080          00000388  10940          MVGHI 904(13),128
0000722C 4110 D370               00000370  10941          LA    1,880(0,13)
00007230 E3F0 C1F0 0004          00007308  10942          LG    15,@lit_1994_343 ; rd_kafka_transport_recv
00007236                                   10943 @@gen_label528 DS    0H
00007236 05EF                              10944          BALR  14,15
00007238                                   10945 @@gen_label529 DS    0H
                                           10946 * ***           if (r == -1) {
00007238 A7FF FFFF               0000FFFF  10947          CGHI  15,-1
0000723C 4770 C284               0000739C  10948          BNE   @L894
                                           10949 * ***                   do { if ((((rk)->rk_conf.debug & (0x10000)))) \
                                           10950 * rd_kafka_log0(&rk->rk_conf,rk,((void *)0), 7,(0x10000), "MOCK","Brok\
                                           10951 * er %" "d" ": Connection %s: " "receive failed: %s", mconn->broker->i\
                                           10952 * d, rd_sockaddr2str(&mconn->peer, 0x1), errstr); } while (0);
00007240                                   10953 @L895    DS    0H
00007240 9101 5321      00000321 00000001  10954          TM    801(5),1
00007244 4780 C1BC               000072D4  10955          BZ    @L898
00007248 41F0 3098               00000098  10956          LA    15,152(0,3)
0000724C E3F0 D370 0024          00000370  10957          STG   15,880(0,13)
00007252 E548 D378 0001          00000378  10958          MVGHI 888(13),1
00007258 4110 D370               00000370  10959          LA    1,880(0,13)
0000725C E3F0 C1F8 0004          00007310  10960          LG    15,@lit_1994_344 ; rd_sockaddr2str
00007262                                   10961 @@gen_label532 DS    0H
00007262 05EF                              10962          BALR  14,15
00007264                                   10963 @@gen_label533 DS    0H
                                                                                                                           Page  224 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007264 4110 5210               00000210  10964          LA    1,528(0,5)
00007268 E310 D370 0024          00000370  10965          STG   1,880(0,13)
0000726E E350 D378 0024          00000378  10966          STG   5,888(0,13)
00007274 D707 D380 D380 00000380 00000380  10967          XC    896(8,13),896(13)
0000727A E548 D388 0007          00000388  10968          MVGHI 904(13),7
00007280 C01F 0001 0000                    10969          LLILF 1,X'00010000' ; 65536
00007286 E310 D390 0024          00000390  10970          STG   1,912(0,13)
0000728C E310 C208 0004          00007320  10971          LG    1,@lit_1994_346
00007292 4120 115E               0000015E  10972          LA    2,350(0,1)
00007296 E320 D398 0024          00000398  10973          STG   2,920(0,13)
0000729C 4110 1478               00000478  10974          LA    1,1144(0,1)
000072A0 E310 D3A0 0024          000003A0  10975          STG   1,928(0,13)
000072A6 E310 30A8 0004          000000A8  10976          LG    1,168(0,3)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
000072AC E310 1010 0014          00000010  10977          LGF   1,16(0,1)
000072B2 E310 D3A8 0024          000003A8  10978          STG   1,936(0,13)
000072B8 E3F0 D3B0 0024          000003B0  10979          STG   15,944(0,13)
000072BE 41F0 D0E0               000000E0  10980          LA    15,224(0,13)
000072C2 E3F0 D3B8 0024          000003B8  10981          STG   15,952(0,13)
000072C8 4110 D370               00000370  10982          LA    1,880(0,13)
000072CC E3F0 C200 0004          00007318  10983          LG    15,@lit_1994_347 ; rd_kafka_log0
000072D2                                   10984 @@gen_label534 DS    0H
000072D2 05EF                              10985          BALR  14,15
000072D4                                   10986 @@gen_label535 DS    0H
000072D4                                   10987 @L898    DS    0H
                                           10988 * ***   # 751 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           10989 * ***                   return -1;
000072D4 A7F9 FFFF               0000FFFF  10990          LGHI  15,-1       ; -1
000072D8 E3C0 C210 001A          00007328  10991          ALGF  12,@lit_region_diff_1994_1_5
                                           10992          DROP  12
                        000097EA           10993          USING @REGION_1994_5,12
000072DE 47F0 C144               0000992E  10994          B     @ret_lab_1994
                                           10995          DROP  12
                        00007118           10996          USING @REGION_1994_1,12
000072E8                                   10997          DS    0D
000072E8 000003F8                          10998 @FRAMESIZE_1994 DC F'1016'
000072EC 00000000
000072F0 0000000000000000                  10999 @lit_1994_340 DC AD(rd_kafka_buf_new0)
000072F8 0000000000000060                  11000 @lit_1994_341 DC AD(rd_atomic32_add)
00007300 0000000000000000                  11001 @lit_1994_342 DC AD(rd_buf_write_ensure)
00007308 0000000000000000                  11002 @lit_1994_343 DC AD(rd_kafka_transport_recv)
00007310 0000000000000000                  11003 @lit_1994_344 DC AD(rd_sockaddr2str)
00007318 0000000000000000                  11004 @lit_1994_347 DC AD(rd_kafka_log0)
00007320 0000000000010840                  11005 @lit_1994_346 DC AD(@strings@)
00007328 000026D2                          11006 @lit_region_diff_1994_1_5  DC A(@REGION_1994_5-@REGION_1994_1)
0000732C 00000000
00007330 0000000000001090                  11007 @lit_1994_350 DC AD(rd_buf_write_pos)
00007338 00001324                          11008 @lit_region_diff_1994_1_3  DC A(@REGION_1994_3-@REGION_1994_1)
0000733C 00000000
00007340 0000000000000000                  11009 @lit_1994_351 DC AD(rd_slice_init)
00007348 0000000000000000                  11010 @lit_1994_353 DC AD(rd_slice_read)
00007350 00000000000011B0                  11011 @lit_1994_354 DC AD(rd_slice_abs_offset)
                                                                                                                           Page  225 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007358 0000000000000000                  11012 @lit_1994_357 DC AD(rd_kafka_crash)
00007360 0000000000010480                  11013 @lit_1994_356 DC AD(@DATA)
00007368 0000000000000000                  11014 @lit_1994_359 DC AD(snprintf)
00007370 0000000000000000                  11015 @lit_1994_361 DC AD(mtx_lock)
00007378 00000000000019F8                  11016 @lit_1994_363 DC AD(rd_strlcpy)
00007380 0000000000000000                  11017 @lit_1994_365 DC AD(mtx_unlock)
00007388 0000000000001310                  11018 @lit_1994_366 DC AD(rd_kafka_$Api$Key2str)
00007390 0000000000001258                  11019 @lit_1994_367 DC AD(rd_slice_offset)
00007398 00000912                          11020 @lit_region_diff_1994_1_2  DC A(@REGION_1994_2-@REGION_1994_1)
                                           11021 * ***           } else if (r == 0) {
0000739C                                   11022 @L894    DS    0H
0000739C B902 00FF                         11023          LTGR  15,15
000073A0 4770 C29A               000073B2  11024          BNE   @L899
                                           11025 * ***                   return 0;
000073A4 A7F9 0000               00000000  11026          LGHI  15,0        ; 0
000073A8 E3C0 C210 001A          00007328  11027          ALGF  12,@lit_region_diff_1994_1_5
                                           11028          DROP  12
                        000097EA           11029          USING @REGION_1994_5,12
000073AE 47F0 C144               0000992E  11030          B     @ret_lab_1994
                                           11031          DROP  12
                        00007118           11032          USING @REGION_1994_1,12
                                           11033 * ***           }
                                           11034 * ***
                                           11035 * ***           if (rd_buf_write_pos(&rkbuf->rkbuf_buf) ==
000073B2                                   11036 @L899    DS    0H
000073B2 41F0 2028               00000028  11037          LA    15,40(0,2)
000073B6 E3F0 D370 0024          00000370  11038          STG   15,880(0,13)
000073BC 4110 D370               00000370  11039          LA    1,880(0,13)
000073C0 E360 C218 0004          00007330  11040          LG    6,@lit_1994_350 ; rd_buf_write_pos
000073C6 B904 00F6                         11041          LGR   15,6
000073CA                                   11042 @@gen_label537 DS    0H
000073CA 05EF                              11043          BALR  14,15
000073CC                                   11044 @@gen_label538 DS    0H
                                           11045 * ***               (4+2+2+4)) {
000073CC A7FF 000C               0000000C  11046          CGHI  15,12
000073D0 4780 C2C6               000073DE  11047          BE    *+14  Around region break
000073D4 E3C0 C220 001A          00007338  11048          ALGF  12,@lit_region_diff_1994_1_3
                                           11049          DROP  12
                        0000843C           11050          USING @REGION_1994_3,12
000073DA 47F0 C2FC               00008738  11051          B     @L901
                                           11052          DROP  12
                        00007118           11053          USING @REGION_1994_1,12
                                           11054 * ***
                                           11055 * ***
                                           11056 * ***
                                           11057 * ***
                                           11058 * ***                   rd_slice_init(&rkbuf->rkbuf_reader,
                                           11059 * ***                                 &rkbuf->rkbuf_buf, 0,
                                           11060 * ***                                 (4+2+2+4));
000073DE 41F0 2078               00000078  11061          LA    15,120(0,2)
000073E2 E3F0 D370 0024          00000370  11062          STG   15,880(0,13)
000073E8 41F0 2028               00000028  11063          LA    15,40(0,2)
                                                                                                                           Page  226 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000073EC E3F0 D378 0024          00000378  11064          STG   15,888(0,13)
000073F2 D707 D380 D380 00000380 00000380  11065          XC    896(8,13),896(13)
000073F8 E548 D388 000C          00000388  11066          MVGHI 904(13),12
000073FE 4110 D370               00000370  11067          LA    1,880(0,13)
00007402 E3F0 C228 0004          00007340  11068          LG    15,@lit_1994_351 ; rd_slice_init
00007408                                   11069 @@gen_label540 DS    0H
00007408 05EF                              11070          BALR  14,15
0000740A                                   11071 @@gen_label541 DS    0H
                                           11072 * ***
                                           11073 * ***                   do { int32_t _v; do { size_t __len2 = (size_t)\
                                           11074 * (sizeof(_v)); if (!rd_slice_read(&(rkbuf)->rkbuf_reader, &_v, __len2\
                                           11075 * )) do { size_t __len0 = (size_t)(__len2); if (((__len0 > ((&(rkbuf)-\
                                           11076 * >rkbuf_reader)->end - rd_slice_abs_offset(&(rkbuf)->rkbuf_reader))))\
                                           11077 * ) { do { if (log_decode_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)\
                                           11078 * ))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",7\
                                           11079 * 66, __FUNCTION__, (((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } w\
                                           11080 * hile (0); char __tmpstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), "\
                                           11081 * : "); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; do { char _lo\
                                           11082 * gname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strl\
                                           11083 * cpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_\
                                           11084 * unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf\
                                           11085 * ->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname,\
                                           11086 *  log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read buffer underfl\
                                           11087 * ow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " "expected %" \
                                           11088 * "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd_kafka_ApiKey\
                                           11089 * 2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, r\
                                           11090 * d_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end -\
                                           11091 *  (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 766, __len0, ((&rkbuf\
                                           11092 * ->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->rkbuf_reader)), r\
                                           11093 * kbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mitigation : "inco\
                                           11094 * rrect broker.version.fallback?", __tmpstr); } while (0); } (rkbuf)->\
                                           11095 * rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_parse; } while (0\
                                           11096 * ); } } while (0); } while (0); *(&rkbuf->rkbuf_reqhdr.Size) = (_v); \
                                           11097 * } while (0);
0000740A                                   11098 @L902    DS    0H
0000740A                                   11099 @L905    DS    0H
0000740A A769 0004               00000004  11100          LGHI  6,4         ; 4
0000740E 41F0 2078               00000078  11101          LA    15,120(0,2)
00007412 E3F0 D370 0024          00000370  11102          STG   15,880(0,13)
00007418 41F0 D0A8               000000A8  11103          LA    15,168(0,13)
0000741C E3F0 D378 0024          00000378  11104          STG   15,888(0,13)
00007422 E360 D380 0024          00000380  11105          STG   6,896(0,13)
00007428 4110 D370               00000370  11106          LA    1,880(0,13)
0000742C E3F0 C230 0004          00007348  11107          LG    15,@lit_1994_353 ; rd_slice_read
00007432                                   11108 @@gen_label542 DS    0H
00007432 05EF                              11109          BALR  14,15
00007434                                   11110 @@gen_label543 DS    0H
00007434 B902 00FF                         11111          LTGR  15,15
00007438 4770 C5AE               000076C6  11112          BNZ   @L908
0000743C                                   11113 @L909    DS    0H
0000743C E380 2098 0004          00000098  11114          LG    8,152(0,2)  ; offset of end in rd_slice_s
00007442 41F0 2078               00000078  11115          LA    15,120(0,2)
                                                                                                                           Page  227 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007446 E3F0 D370 0024          00000370  11116          STG   15,880(0,13)
0000744C 4110 D370               00000370  11117          LA    1,880(0,13)
00007450 E3F0 C238 0004          00007350  11118          LG    15,@lit_1994_354 ; rd_slice_abs_offset
00007456                                   11119 @@gen_label545 DS    0H
00007456 05EF                              11120          BALR  14,15
00007458                                   11121 @@gen_label546 DS    0H
00007458 B90B 008F                         11122          SLGR  8,15
0000745C B921 0068                         11123          CLGR  6,8
00007460 47D0 C5AE               000076C6  11124          BNH   @L912
00007464                                   11125 @L913    DS    0H
00007464 9500 D368      00000368 00000000  11126          CLI   872(13),0
00007468 47D0 C59E               000076B6  11127          BNH   @L916
0000746C                                   11128 @L917    DS    0H
0000746C E3F0 2100 0002          00000100  11129          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007472 4770 C3A0               000074B8  11130          BNZ   @L920
00007476 E3F0 C208 0004          00007320  11131          LG    15,@lit_1994_346
0000747C 4110 F0FA               000000FA  11132          LA    1,250(0,15)
00007480 E310 D370 0024          00000370  11133          STG   1,880(0,13)
00007486 E548 D378 02FE          00000378  11134          MVGHI 888(13),766
0000748C E310 C248 0004          00007360  11135          LG    1,@lit_1994_356
00007492 4110 12AE               000002AE  11136          LA    1,686(0,1)
00007496 E310 D380 0024          00000380  11137          STG   1,896(0,13)
0000749C D707 D388 D388 00000388 00000388  11138          XC    904(8,13),904(13)
000074A2 41F0 F1D2               000001D2  11139          LA    15,466(0,15)
000074A6 E3F0 D390 0024          00000390  11140          STG   15,912(0,13)
000074AC 4110 D370               00000370  11141          LA    1,880(0,13)
000074B0 E3F0 C240 0004          00007358  11142          LG    15,@lit_1994_357 ; rd_kafka_crash
000074B6                                   11143 @@gen_label550 DS    0H
000074B6 05EF                              11144          BALR  14,15
000074B8                                   11145 @@gen_label551 DS    0H
000074B8                                   11146 @L920    DS    0H
000074B8 41F0 D160               00000160  11147          LA    15,352(0,13)
000074BC E3F0 D370 0024          00000370  11148          STG   15,880(0,13)
000074C2 E548 D378 0100          00000378  11149          MVGHI 888(13),256
000074C8 E3F0 C208 0004          00007320  11150          LG    15,@lit_1994_346
000074CE 41F0 F1EC               000001EC  11151          LA    15,492(0,15)
000074D2 E3F0 D380 0024          00000380  11152          STG   15,896(0,13)
000074D8 4110 D370               00000370  11153          LA    1,880(0,13)
000074DC E3F0 C250 0004          00007368  11154          LG    15,@lit_1994_359 ; snprintf
000074E2                                   11155 @@gen_label552 DS    0H
000074E2 05EF                              11156          BALR  14,15
000074E4                                   11157 @@gen_label553 DS    0H
000074E4 41F0 D160               00000160  11158          LA    15,352(0,13)
000074E8 B904 001F                         11159          LGR   1,15
000074EC A709 0000               00000000  11160          LGHI  0,0
000074F0                                   11161 @@gen_label554 DS 0H
000074F0 B25E 000F                         11162          SRST  0,15
000074F4 4710 C3D8               000074F0  11163          BC  1,@@gen_label554
000074F8 B90B 0001                         11164          SLGR  0,1
000074FC A70F 0002               00000002  11165          CGHI  0,2
00007500 4770 C3F0               00007508  11166          BNE   @L922
00007504 9200 D160      00000160 00000000  11167          MVI   352(13),0
                                                                                                                           Page  228 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007508                                   11168 @L921    DS    0H
00007508                                   11169 @L922    DS    0H
00007508 E3F0 2100 0004          00000100  11170          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000750E A739 1638               00001638  11171          LGHI  3,5688      ; 5688
00007512 41F3 F000               00000000  11172          LA    15,0(3,15)
00007516 E3F0 D370 0024          00000370  11173          STG   15,880(0,13)
0000751C 4110 D370               00000370  11174          LA    1,880(0,13)
00007520 E3F0 C258 0004          00007370  11175          LG    15,@lit_1994_361 ; mtx_lock
00007526                                   11176 @@gen_label556 DS    0H
00007526 05EF                              11177          BALR  14,15
00007528                                   11178 @@gen_label557 DS    0H
00007528 41F0 D260               00000260  11179          LA    15,608(0,13)
0000752C E3F0 D370 0024          00000370  11180          STG   15,880(0,13)
00007532 E3F0 2100 0004          00000100  11181          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007538 A719 1630               00001630  11182          LGHI  1,5680      ; 5680
0000753C E3F1 F000 0004          00000000  11183          LG    15,0(1,15)
00007542 E3F0 D378 0024          00000378  11184          STG   15,888(0,13)
00007548 E548 D380 0100          00000380  11185          MVGHI 896(13),256
0000754E 4110 D370               00000370  11186          LA    1,880(0,13)
00007552 E3F0 C260 0004          00007378  11187          LG    15,@lit_1994_363 ; rd_strlcpy
00007558                                   11188 @@gen_label558 DS    0H
00007558 05EF                              11189          BALR  14,15
0000755A                                   11190 @@gen_label559 DS    0H
0000755A E3F0 2100 0004          00000100  11191          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007560 41F3 F000               00000000  11192          LA    15,0(3,15)
00007564 E3F0 D370 0024          00000370  11193          STG   15,880(0,13)
0000756A 4110 D370               00000370  11194          LA    1,880(0,13)
0000756E E3F0 C268 0004          00007380  11195          LG    15,@lit_1994_365 ; mtx_unlock
00007574                                   11196 @@gen_label560 DS    0H
00007574 05EF                              11197          BALR  14,15
00007576                                   11198 @@gen_label561 DS    0H
00007576 E3F0 20B8 0015          000000B8  11199          LGH   15,184(0,2)
0000757C E3F0 D370 0024          00000370  11200          STG   15,880(0,13)
00007582 4110 D370               00000370  11201          LA    1,880(0,13)
00007586 E3F0 C270 0004          00007388  11202          LG    15,@lit_1994_366 ; rd_kafka_ApiKey2str
0000758C                                   11203 @@gen_label562 DS    0H
0000758C 05EF                              11204          BALR  14,15
0000758E                                   11205 @@gen_label563 DS    0H
0000758E B904 003F                         11206          LGR   3,15
00007592 41F0 2078               00000078  11207          LA    15,120(0,2)
00007596 E3F0 D370 0024          00000370  11208          STG   15,880(0,13)
0000759C 4110 D370               00000370  11209          LA    1,880(0,13)
000075A0 E3F0 C278 0004          00007390  11210          LG    15,@lit_1994_367 ; rd_slice_offset
000075A6                                   11211 @@gen_label564 DS    0H
000075A6 05EF                              11212          BALR  14,15
000075A8                                   11213 @@gen_label565 DS    0H
000075A8 B904 004F                         11214          LGR   4,15
000075AC E350 2098 0004          00000098  11215          LG    5,152(0,2)  ; offset of end in rd_slice_s
000075B2 41F0 2078               00000078  11216          LA    15,120(0,2)
000075B6 E3F0 D370 0024          00000370  11217          STG   15,880(0,13)
000075BC 4110 D370               00000370  11218          LA    1,880(0,13)
000075C0 E3F0 C238 0004          00007350  11219          LG    15,@lit_1994_354 ; rd_slice_abs_offset
                                                                                                                           Page  229 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000075C6                                   11220 @@gen_label566 DS    0H
000075C6 05EF                              11221          BALR  14,15
000075C8                                   11222 @@gen_label567 DS    0H
000075C8 B90B 005F                         11223          SLGR  5,15
000075CC E3F0 21E8 0002          000001E8  11224          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000075D2 4780 C4C8               000075E0  11225          BZ    @L925
000075D6 E3F0 21E8 0004          000001E8  11226          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000075DC 47F0 C4D2               000075EA  11227          B     @L926
000075E0                                   11228 @L925    DS    0H
000075E0 E3F0 C208 0004          00007320  11229          LG    15,@lit_1994_346
000075E6 41F0 F1F0               000001F0  11230          LA    15,496(0,15)
000075EA                                   11231 @L926    DS    0H
000075EA E310 2100 0004          00000100  11232          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000075F0 E310 1FD0 0004          00000FD0  11233          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
000075F6 4110 1210               00000210  11234          LA    1,528(0,1)
000075FA E310 D370 0024          00000370  11235          STG   1,880(0,13)
00007600 E310 2100 0004          00000100  11236          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007606 E310 1FD0 0004          00000FD0  11237          LG    1,4048(0,1)
0000760C E310 D378 0024          00000378  11238          STG   1,888(0,13)
00007612 4110 D260               00000260  11239          LA    1,608(0,13)
00007616 E310 D380 0024          00000380  11240          STG   1,896(0,13)
0000761C E310 D368 0094          00000368  11241          LLC   1,872(0,13) ; log_decode_errors
00007622 B914 0011                         11242          LGFR  1,1
00007626 E310 D388 0024          00000388  11243          STG   1,904(0,13)
0000762C D707 D390 D390 00000390 00000390  11244          XC    912(8,13),912(13)
00007632 E310 C208 0004          00007320  11245          LG    1,@lit_1994_346
00007638 4170 1214               00000214  11246          LA    7,532(0,1)
0000763C E370 D398 0024          00000398  11247          STG   7,920(0,13)
00007642 4110 1220               00000220  11248          LA    1,544(0,1)
00007646 E310 D3A0 0024          000003A0  11249          STG   1,928(0,13)
0000764C E330 D3A8 0024          000003A8  11250          STG   3,936(0,13)
00007652 4810 20BA               000000BA  11251          LH    1,186(0,2)
00007656 B914 0011                         11252          LGFR  1,1
0000765A E310 D3B0 0024          000003B0  11253          STG   1,944(0,13)
00007660 E340 D3B8 0024          000003B8  11254          STG   4,952(0,13)
00007666 E310 2098 0004          00000098  11255          LG    1,152(0,2)  ; offset of end in rd_slice_s
0000766C E310 2090 000B          00000090  11256          SLG   1,144(0,2)
00007672 E310 D3C0 0024          000003C0  11257          STG   1,960(0,13)
00007678 E310 C248 0004          00007360  11258          LG    1,@lit_1994_356
0000767E 4110 12AE               000002AE  11259          LA    1,686(0,1)
00007682 E310 D3C8 0024          000003C8  11260          STG   1,968(0,13)
00007688 E548 D3D0 02FE          000003D0  11261          MVGHI 976(13),766
0000768E E360 D3D8 0024          000003D8  11262          STG   6,984(0,13)
00007694 E350 D3E0 0024          000003E0  11263          STG   5,992(0,13)
0000769A E3F0 D3E8 0024          000003E8  11264          STG   15,1000(0,13)
000076A0 41F0 D160               00000160  11265          LA    15,352(0,13)
000076A4 E3F0 D3F0 0024          000003F0  11266          STG   15,1008(0,13)
000076AA 4110 D370               00000370  11267          LA    1,880(0,13)
000076AE E3F0 C200 0004          00007318  11268          LG    15,@lit_1994_347 ; rd_kafka_log0
000076B4                                   11269 @@gen_label569 DS    0H
                                                                                                                           Page  230 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000076B4 05EF                              11270          BALR  14,15
000076B6                                   11271 @@gen_label570 DS    0H
000076B6                                   11272 @L916    DS    0H
000076B6 E54C 2188 FF65          00000188  11273          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
000076BC E3C0 C210 001A          00007328  11274          ALGF  12,@lit_region_diff_1994_1_5
                                           11275          DROP  12
                        000097EA           11276          USING @REGION_1994_5,12
000076C2 47F0 C140               0000992A  11277          B     @_err_parse@1994@2
                                           11278          DROP  12
                        00007118           11279          USING @REGION_1994_1,12
000076C6                                   11280 @L912    DS    0H
000076C6                                   11281 @L908    DS    0H
000076C6 58F0 D0A8               000000A8  11282          L     15,168(0,13) ; _v
000076CA 50F0 20B4               000000B4  11283          ST    15,180(0,2) ; offset of rkbuf_reqhdr in rd_kafka_buf_s
                                           11284 * ***
                                           11285 * ***                   do { int16_t _v; do { size_t __len2 = (size_t)\
                                           11286 * (sizeof(_v)); if (!rd_slice_read(&(rkbuf)->rkbuf_reader, &_v, __len2\
                                           11287 * )) do { size_t __len0 = (size_t)(__len2); if (((__len0 > ((&(rkbuf)-\
                                           11288 * >rkbuf_reader)->end - rd_slice_abs_offset(&(rkbuf)->rkbuf_reader))))\
                                           11289 * ) { do { if (log_decode_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)\
                                           11290 * ))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",7\
                                           11291 * 68, __FUNCTION__, (((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } w\
                                           11292 * hile (0); char __tmpstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), "\
                                           11293 * : "); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; do { char _lo\
                                           11294 * gname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strl\
                                           11295 * cpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_\
                                           11296 * unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf\
                                           11297 * ->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname,\
                                           11298 *  log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read buffer underfl\
                                           11299 * ow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " "expected %" \
                                           11300 * "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd_kafka_ApiKey\
                                           11301 * 2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, r\
                                           11302 * d_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end -\
                                           11303 *  (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 768, __len0, ((&rkbuf\
                                           11304 * ->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->rkbuf_reader)), r\
                                           11305 * kbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mitigation : "inco\
                                           11306 * rrect broker.version.fallback?", __tmpstr); } while (0); } (rkbuf)->\
                                           11307 * rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_parse; } while (0\
                                           11308 * ); } } while (0); } while (0); *(&rkbuf->rkbuf_reqhdr.ApiKey) = (int\
                                           11309 * 16_t)(_v); } while (0);
000076CE                                   11310 @L927    DS    0H
000076CE                                   11311 @L930    DS    0H
000076CE A769 0002               00000002  11312          LGHI  6,2         ; 2
000076D2 41F0 2078               00000078  11313          LA    15,120(0,2)
000076D6 E3F0 D370 0024          00000370  11314          STG   15,880(0,13)
000076DC 41F0 D0AC               000000AC  11315          LA    15,172(0,13)
000076E0 E3F0 D378 0024          00000378  11316          STG   15,888(0,13)
000076E6 E360 D380 0024          00000380  11317          STG   6,896(0,13)
000076EC 4110 D370               00000370  11318          LA    1,880(0,13)
000076F0 E3F0 C230 0004          00007348  11319          LG    15,@lit_1994_353 ; rd_slice_read
000076F6                                   11320 @@gen_label571 DS    0H
000076F6 05EF                              11321          BALR  14,15
                                                                                                                           Page  231 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000076F8                                   11322 @@gen_label572 DS    0H
000076F8 B902 00FF                         11323          LTGR  15,15
000076FC 4770 C872               0000798A  11324          BNZ   @L933
00007700                                   11325 @L934    DS    0H
00007700 E380 2098 0004          00000098  11326          LG    8,152(0,2)  ; offset of end in rd_slice_s
00007706 41F0 2078               00000078  11327          LA    15,120(0,2)
0000770A E3F0 D370 0024          00000370  11328          STG   15,880(0,13)
00007710 4110 D370               00000370  11329          LA    1,880(0,13)
00007714 E3F0 C238 0004          00007350  11330          LG    15,@lit_1994_354 ; rd_slice_abs_offset
0000771A                                   11331 @@gen_label574 DS    0H
0000771A 05EF                              11332          BALR  14,15
0000771C                                   11333 @@gen_label575 DS    0H
0000771C B90B 008F                         11334          SLGR  8,15
00007720 B921 0068                         11335          CLGR  6,8
00007724 47D0 C872               0000798A  11336          BNH   @L937
00007728                                   11337 @L938    DS    0H
00007728 9500 D368      00000368 00000000  11338          CLI   872(13),0
0000772C 47D0 C862               0000797A  11339          BNH   @L941
00007730                                   11340 @L942    DS    0H
00007730 E3F0 2100 0002          00000100  11341          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007736 4770 C664               0000777C  11342          BNZ   @L945
0000773A E3F0 C208 0004          00007320  11343          LG    15,@lit_1994_346
00007740 4110 F0FA               000000FA  11344          LA    1,250(0,15)
00007744 E310 D370 0024          00000370  11345          STG   1,880(0,13)
0000774A E548 D378 0300          00000378  11346          MVGHI 888(13),768
00007750 E310 C248 0004          00007360  11347          LG    1,@lit_1994_356
00007756 4110 12AE               000002AE  11348          LA    1,686(0,1)
0000775A E310 D380 0024          00000380  11349          STG   1,896(0,13)
00007760 D707 D388 D388 00000388 00000388  11350          XC    904(8,13),904(13)
00007766 41F0 F1D2               000001D2  11351          LA    15,466(0,15)
0000776A E3F0 D390 0024          00000390  11352          STG   15,912(0,13)
00007770 4110 D370               00000370  11353          LA    1,880(0,13)
00007774 E3F0 C240 0004          00007358  11354          LG    15,@lit_1994_357 ; rd_kafka_crash
0000777A                                   11355 @@gen_label579 DS    0H
0000777A 05EF                              11356          BALR  14,15
0000777C                                   11357 @@gen_label580 DS    0H
0000777C                                   11358 @L945    DS    0H
0000777C 41F0 D160               00000160  11359          LA    15,352(0,13)
00007780 E3F0 D370 0024          00000370  11360          STG   15,880(0,13)
00007786 E548 D378 0100          00000378  11361          MVGHI 888(13),256
0000778C E3F0 C208 0004          00007320  11362          LG    15,@lit_1994_346
00007792 41F0 F1EC               000001EC  11363          LA    15,492(0,15)
00007796 E3F0 D380 0024          00000380  11364          STG   15,896(0,13)
0000779C 4110 D370               00000370  11365          LA    1,880(0,13)
000077A0 E3F0 C250 0004          00007368  11366          LG    15,@lit_1994_359 ; snprintf
000077A6                                   11367 @@gen_label581 DS    0H
000077A6 05EF                              11368          BALR  14,15
000077A8                                   11369 @@gen_label582 DS    0H
000077A8 41F0 D160               00000160  11370          LA    15,352(0,13)
000077AC B904 001F                         11371          LGR   1,15
000077B0 A709 0000               00000000  11372          LGHI  0,0
000077B4                                   11373 @@gen_label583 DS 0H
                                                                                                                           Page  232 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000077B4 B25E 000F                         11374          SRST  0,15
000077B8 4710 C69C               000077B4  11375          BC  1,@@gen_label583
000077BC B90B 0001                         11376          SLGR  0,1
000077C0 A70F 0002               00000002  11377          CGHI  0,2
000077C4 4770 C6B4               000077CC  11378          BNE   @L947
000077C8 9200 D160      00000160 00000000  11379          MVI   352(13),0
000077CC                                   11380 @L946    DS    0H
000077CC                                   11381 @L947    DS    0H
000077CC E3F0 2100 0004          00000100  11382          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000077D2 A739 1638               00001638  11383          LGHI  3,5688      ; 5688
000077D6 41F3 F000               00000000  11384          LA    15,0(3,15)
000077DA E3F0 D370 0024          00000370  11385          STG   15,880(0,13)
000077E0 4110 D370               00000370  11386          LA    1,880(0,13)
000077E4 E3F0 C258 0004          00007370  11387          LG    15,@lit_1994_361 ; mtx_lock
000077EA                                   11388 @@gen_label585 DS    0H
000077EA 05EF                              11389          BALR  14,15
000077EC                                   11390 @@gen_label586 DS    0H
000077EC 41F0 D260               00000260  11391          LA    15,608(0,13)
000077F0 E3F0 D370 0024          00000370  11392          STG   15,880(0,13)
000077F6 E3F0 2100 0004          00000100  11393          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000077FC A719 1630               00001630  11394          LGHI  1,5680      ; 5680
00007800 E3F1 F000 0004          00000000  11395          LG    15,0(1,15)
00007806 E3F0 D378 0024          00000378  11396          STG   15,888(0,13)
0000780C E548 D380 0100          00000380  11397          MVGHI 896(13),256
00007812 4110 D370               00000370  11398          LA    1,880(0,13)
00007816 E3F0 C260 0004          00007378  11399          LG    15,@lit_1994_363 ; rd_strlcpy
0000781C                                   11400 @@gen_label587 DS    0H
0000781C 05EF                              11401          BALR  14,15
0000781E                                   11402 @@gen_label588 DS    0H
0000781E E3F0 2100 0004          00000100  11403          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007824 41F3 F000               00000000  11404          LA    15,0(3,15)
00007828 E3F0 D370 0024          00000370  11405          STG   15,880(0,13)
0000782E 4110 D370               00000370  11406          LA    1,880(0,13)
00007832 E3F0 C268 0004          00007380  11407          LG    15,@lit_1994_365 ; mtx_unlock
00007838                                   11408 @@gen_label589 DS    0H
00007838 05EF                              11409          BALR  14,15
0000783A                                   11410 @@gen_label590 DS    0H
0000783A E3F0 20B8 0015          000000B8  11411          LGH   15,184(0,2)
00007840 E3F0 D370 0024          00000370  11412          STG   15,880(0,13)
00007846 4110 D370               00000370  11413          LA    1,880(0,13)
0000784A E3F0 C270 0004          00007388  11414          LG    15,@lit_1994_366 ; rd_kafka_ApiKey2str
00007850                                   11415 @@gen_label591 DS    0H
00007850 05EF                              11416          BALR  14,15
00007852                                   11417 @@gen_label592 DS    0H
00007852 B904 003F                         11418          LGR   3,15
00007856 41F0 2078               00000078  11419          LA    15,120(0,2)
0000785A E3F0 D370 0024          00000370  11420          STG   15,880(0,13)
00007860 4110 D370               00000370  11421          LA    1,880(0,13)
00007864 E3F0 C278 0004          00007390  11422          LG    15,@lit_1994_367 ; rd_slice_offset
0000786A                                   11423 @@gen_label593 DS    0H
0000786A 05EF                              11424          BALR  14,15
0000786C                                   11425 @@gen_label594 DS    0H
                                                                                                                           Page  233 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000786C B904 004F                         11426          LGR   4,15
00007870 E350 2098 0004          00000098  11427          LG    5,152(0,2)  ; offset of end in rd_slice_s
00007876 41F0 2078               00000078  11428          LA    15,120(0,2)
0000787A E3F0 D370 0024          00000370  11429          STG   15,880(0,13)
00007880 4110 D370               00000370  11430          LA    1,880(0,13)
00007884 E3F0 C238 0004          00007350  11431          LG    15,@lit_1994_354 ; rd_slice_abs_offset
0000788A                                   11432 @@gen_label595 DS    0H
0000788A 05EF                              11433          BALR  14,15
0000788C                                   11434 @@gen_label596 DS    0H
0000788C B90B 005F                         11435          SLGR  5,15
00007890 E3F0 21E8 0002          000001E8  11436          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00007896 4780 C78C               000078A4  11437          BZ    @L950
0000789A E3F0 21E8 0004          000001E8  11438          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000078A0 47F0 C796               000078AE  11439          B     @L951
000078A4                                   11440 @L950    DS    0H
000078A4 E3F0 C208 0004          00007320  11441          LG    15,@lit_1994_346
000078AA 41F0 F1F0               000001F0  11442          LA    15,496(0,15)
000078AE                                   11443 @L951    DS    0H
000078AE E310 2100 0004          00000100  11444          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000078B4 E310 1FD0 0004          00000FD0  11445          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
000078BA 4110 1210               00000210  11446          LA    1,528(0,1)
000078BE E310 D370 0024          00000370  11447          STG   1,880(0,13)
000078C4 E310 2100 0004          00000100  11448          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000078CA E310 1FD0 0004          00000FD0  11449          LG    1,4048(0,1)
000078D0 E310 D378 0024          00000378  11450          STG   1,888(0,13)
000078D6 4110 D260               00000260  11451          LA    1,608(0,13)
000078DA E310 D380 0024          00000380  11452          STG   1,896(0,13)
000078E0 E310 D368 0094          00000368  11453          LLC   1,872(0,13) ; log_decode_errors
000078E6 B914 0011                         11454          LGFR  1,1
000078EA E310 D388 0024          00000388  11455          STG   1,904(0,13)
000078F0 D707 D390 D390 00000390 00000390  11456          XC    912(8,13),912(13)
000078F6 E310 C208 0004          00007320  11457          LG    1,@lit_1994_346
000078FC 4170 1214               00000214  11458          LA    7,532(0,1)
00007900 E370 D398 0024          00000398  11459          STG   7,920(0,13)
00007906 4110 1220               00000220  11460          LA    1,544(0,1)
0000790A E310 D3A0 0024          000003A0  11461          STG   1,928(0,13)
00007910 E330 D3A8 0024          000003A8  11462          STG   3,936(0,13)
00007916 4810 20BA               000000BA  11463          LH    1,186(0,2)
0000791A B914 0011                         11464          LGFR  1,1
0000791E E310 D3B0 0024          000003B0  11465          STG   1,944(0,13)
00007924 E340 D3B8 0024          000003B8  11466          STG   4,952(0,13)
0000792A E310 2098 0004          00000098  11467          LG    1,152(0,2)  ; offset of end in rd_slice_s
00007930 E310 2090 000B          00000090  11468          SLG   1,144(0,2)
00007936 E310 D3C0 0024          000003C0  11469          STG   1,960(0,13)
0000793C E310 C248 0004          00007360  11470          LG    1,@lit_1994_356
00007942 4110 12AE               000002AE  11471          LA    1,686(0,1)
00007946 E310 D3C8 0024          000003C8  11472          STG   1,968(0,13)
0000794C E548 D3D0 0300          000003D0  11473          MVGHI 976(13),768
00007952 E360 D3D8 0024          000003D8  11474          STG   6,984(0,13)
00007958 E350 D3E0 0024          000003E0  11475          STG   5,992(0,13)
                                                                                                                           Page  234 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000795E E3F0 D3E8 0024          000003E8  11476          STG   15,1000(0,13)
00007964 41F0 D160               00000160  11477          LA    15,352(0,13)
00007968 E3F0 D3F0 0024          000003F0  11478          STG   15,1008(0,13)
0000796E 4110 D370               00000370  11479          LA    1,880(0,13)
00007972 E3F0 C200 0004          00007318  11480          LG    15,@lit_1994_347 ; rd_kafka_log0
00007978                                   11481 @@gen_label598 DS    0H
00007978 05EF                              11482          BALR  14,15
0000797A                                   11483 @@gen_label599 DS    0H
0000797A                                   11484 @L941    DS    0H
0000797A E54C 2188 FF65          00000188  11485          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
00007980 E3C0 C210 001A          00007328  11486          ALGF  12,@lit_region_diff_1994_1_5
                                           11487          DROP  12
                        000097EA           11488          USING @REGION_1994_5,12
00007986 47F0 C140               0000992A  11489          B     @_err_parse@1994@2
                                           11490          DROP  12
                        00007118           11491          USING @REGION_1994_1,12
0000798A                                   11492 @L937    DS    0H
0000798A                                   11493 @L933    DS    0H
0000798A D201 20B8 D0AC 000000B8 000000AC  11494          MVC   184(2,2),172(13)
                                           11495 * ***
                                           11496 * ***                   do { int16_t _v; do { size_t __len2 = (size_t)\
                                           11497 * (sizeof(_v)); if (!rd_slice_read(&(rkbuf)->rkbuf_reader, &_v, __len2\
                                           11498 * )) do { size_t __len0 = (size_t)(__len2); if (((__len0 > ((&(rkbuf)-\
                                           11499 * >rkbuf_reader)->end - rd_slice_abs_offset(&(rkbuf)->rkbuf_reader))))\
                                           11500 * ) { do { if (log_decode_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)\
                                           11501 * ))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",7\
                                           11502 * 70, __FUNCTION__, (((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } w\
                                           11503 * hile (0); char __tmpstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), "\
                                           11504 * : "); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; do { char _lo\
                                           11505 * gname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strl\
                                           11506 * cpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_\
                                           11507 * unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf\
                                           11508 * ->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname,\
                                           11509 *  log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read buffer underfl\
                                           11510 * ow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " "expected %" \
                                           11511 * "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd_kafka_ApiKey\
                                           11512 * 2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, r\
                                           11513 * d_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end -\
                                           11514 *  (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 770, __len0, ((&rkbuf\
                                           11515 * ->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->rkbuf_reader)), r\
                                           11516 * kbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mitigation : "inco\
                                           11517 * rrect broker.version.fallback?", __tmpstr); } while (0); } (rkbuf)->\
                                           11518 * rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_parse; } while (0\
                                           11519 * ); } } while (0); } while (0); *(&rkbuf->rkbuf_reqhdr.ApiVersion) = \
                                           11520 * (int16_t)(_v); } while (0);
00007990                                   11521 @L952    DS    0H
00007990                                   11522 @L955    DS    0H
00007990 A769 0002               00000002  11523          LGHI  6,2         ; 2
00007994 41F0 2078               00000078  11524          LA    15,120(0,2)
00007998 E3F0 D370 0024          00000370  11525          STG   15,880(0,13)
0000799E 41F0 D0AE               000000AE  11526          LA    15,174(0,13)
000079A2 E3F0 D378 0024          00000378  11527          STG   15,888(0,13)
                                                                                                                           Page  235 
  Active Usings: @REGION_1994_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000079A8 E360 D380 0024          00000380  11528          STG   6,896(0,13)
000079AE 4110 D370               00000370  11529          LA    1,880(0,13)
000079B2 E3F0 C230 0004          00007348  11530          LG    15,@lit_1994_353 ; rd_slice_read
000079B8                                   11531 @@gen_label600 DS    0H
000079B8 05EF                              11532          BALR  14,15
000079BA                                   11533 @@gen_label601 DS    0H
000079BA B902 00FF                         11534          LTGR  15,15
000079BE 4780 C8B4               000079CC  11535          BZ    *+14  Around region break
000079C2 E3C0 C280 001A          00007398  11536          ALGF  12,@lit_region_diff_1994_1_2
                                           11537          DROP  12
                        00007A2A           11538          USING @REGION_1994_2,12
000079C8 47F0 C2C8               00007CF2  11539          B     @L958
                                           11540          DROP  12
                        00007118           11541          USING @REGION_1994_1,12
000079CC                                   11542 @L959    DS    0H
000079CC E380 2098 0004          00000098  11543          LG    8,152(0,2)  ; offset of end in rd_slice_s
000079D2 41F0 2078               00000078  11544          LA    15,120(0,2)
000079D6 E3F0 D370 0024          00000370  11545          STG   15,880(0,13)
000079DC 4110 D370               00000370  11546          LA    1,880(0,13)
000079E0 E3F0 C238 0004          00007350  11547          LG    15,@lit_1994_354 ; rd_slice_abs_offset
000079E6                                   11548 @@gen_label603 DS    0H
000079E6 05EF                              11549          BALR  14,15
000079E8                                   11550 @@gen_label604 DS    0H
000079E8 B90B 008F                         11551          SLGR  8,15
000079EC B921 0068                         11552          CLGR  6,8
000079F0 4720 C8E6               000079FE  11553          BH    *+14  Around region break
000079F4 E3C0 C280 001A          00007398  11554          ALGF  12,@lit_region_diff_1994_1_2
                                           11555          DROP  12
                        00007A2A           11556          USING @REGION_1994_2,12
000079FA 47F0 C2C8               00007CF2  11557          B     @L962
                                           11558          DROP  12
                        00007118           11559          USING @REGION_1994_1,12
000079FE                                   11560 @L963    DS    0H
000079FE 9500 D368      00000368 00000000  11561          CLI   872(13),0
00007A02 4720 C8F8               00007A10  11562          BH    *+14  Around region break
00007A06 E3C0 C280 001A          00007398  11563          ALGF  12,@lit_region_diff_1994_1_2
                                           11564          DROP  12
                        00007A2A           11565          USING @REGION_1994_2,12
00007A0C 47F0 C2B8               00007CE2  11566          B     @L966
                                           11567          DROP  12
                        00007118           11568          USING @REGION_1994_1,12
00007A10                                   11569 @L967    DS    0H
00007A10 E3F0 2100 0002          00000100  11570          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007A16 4780 C90C               00007A24  11571          BZ    *+14  Around region break
00007A1A E3C0 C280 001A          00007398  11572          ALGF  12,@lit_region_diff_1994_1_2
                                           11573          DROP  12
                        00007A2A           11574          USING @REGION_1994_2,12
00007A20 47F0 C042               00007A6C  11575          B     @L970
                                           11576          DROP  12
                        00007118           11577          USING @REGION_1994_1,12
00007A24 E3C0 C280 001A          00007398  11578          ALGF  12,@lit_region_diff_1994_1_2
00007A2A                                   11579 @REGION_1994_2 DS 0H
                                                                                                                           Page  236 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           11580          DROP  12
                        00007A2A           11581          USING @REGION_1994_2,12
00007A2A E3F0 C17E 0004          00007BA8  11582          LG    15,@lit_1994_397
00007A30 4110 F0FA               000000FA  11583          LA    1,250(0,15)
00007A34 E310 D370 0024          00000370  11584          STG   1,880(0,13)
00007A3A E548 D378 0302          00000378  11585          MVGHI 888(13),770
00007A40 E310 C176 0004          00007BA0  11586          LG    1,@lit_1994_398
00007A46 4110 12AE               000002AE  11587          LA    1,686(0,1)
00007A4A E310 D380 0024          00000380  11588          STG   1,896(0,13)
00007A50 D707 D388 D388 00000388 00000388  11589          XC    904(8,13),904(13)
00007A56 41F0 F1D2               000001D2  11590          LA    15,466(0,15)
00007A5A E3F0 D390 0024          00000390  11591          STG   15,912(0,13)
00007A60 4110 D370               00000370  11592          LA    1,880(0,13)
00007A64 E3F0 C16E 0004          00007B98  11593          LG    15,@lit_1994_399 ; rd_kafka_crash
00007A6A                                   11594 @@gen_label608 DS    0H
00007A6A 05EF                              11595          BALR  14,15
00007A6C                                   11596 @@gen_label609 DS    0H
00007A6C                                   11597 @L970    DS    0H
00007A6C 41F0 D160               00000160  11598          LA    15,352(0,13)
00007A70 E3F0 D370 0024          00000370  11599          STG   15,880(0,13)
00007A76 E548 D378 0100          00000378  11600          MVGHI 888(13),256
00007A7C E3F0 C17E 0004          00007BA8  11601          LG    15,@lit_1994_397
00007A82 41F0 F1EC               000001EC  11602          LA    15,492(0,15)
00007A86 E3F0 D380 0024          00000380  11603          STG   15,896(0,13)
00007A8C 4110 D370               00000370  11604          LA    1,880(0,13)
00007A90 E3F0 C186 0004          00007BB0  11605          LG    15,@lit_1994_401 ; snprintf
00007A96                                   11606 @@gen_label610 DS    0H
00007A96 05EF                              11607          BALR  14,15
00007A98                                   11608 @@gen_label611 DS    0H
00007A98 41F0 D160               00000160  11609          LA    15,352(0,13)
00007A9C B904 001F                         11610          LGR   1,15
00007AA0 A709 0000               00000000  11611          LGHI  0,0
00007AA4                                   11612 @@gen_label612 DS 0H
00007AA4 B25E 000F                         11613          SRST  0,15
00007AA8 4710 C07A               00007AA4  11614          BC  1,@@gen_label612
00007AAC B90B 0001                         11615          SLGR  0,1
00007AB0 A70F 0002               00000002  11616          CGHI  0,2
00007AB4 4770 C092               00007ABC  11617          BNE   @L972
00007AB8 9200 D160      00000160 00000000  11618          MVI   352(13),0
00007ABC                                   11619 @L971    DS    0H
00007ABC                                   11620 @L972    DS    0H
00007ABC E3F0 2100 0004          00000100  11621          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007AC2 A739 1638               00001638  11622          LGHI  3,5688      ; 5688
00007AC6 41F3 F000               00000000  11623          LA    15,0(3,15)
00007ACA E3F0 D370 0024          00000370  11624          STG   15,880(0,13)
00007AD0 4110 D370               00000370  11625          LA    1,880(0,13)
00007AD4 E3F0 C18E 0004          00007BB8  11626          LG    15,@lit_1994_403 ; mtx_lock
00007ADA                                   11627 @@gen_label614 DS    0H
00007ADA 05EF                              11628          BALR  14,15
00007ADC                                   11629 @@gen_label615 DS    0H
00007ADC 41F0 D260               00000260  11630          LA    15,608(0,13)
00007AE0 E3F0 D370 0024          00000370  11631          STG   15,880(0,13)
                                                                                                                           Page  237 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007AE6 E3F0 2100 0004          00000100  11632          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007AEC A719 1630               00001630  11633          LGHI  1,5680      ; 5680
00007AF0 E3F1 F000 0004          00000000  11634          LG    15,0(1,15)
00007AF6 E3F0 D378 0024          00000378  11635          STG   15,888(0,13)
00007AFC E548 D380 0100          00000380  11636          MVGHI 896(13),256
00007B02 4110 D370               00000370  11637          LA    1,880(0,13)
00007B06 E3F0 C196 0004          00007BC0  11638          LG    15,@lit_1994_405 ; rd_strlcpy
00007B0C                                   11639 @@gen_label616 DS    0H
00007B0C 05EF                              11640          BALR  14,15
00007B0E                                   11641 @@gen_label617 DS    0H
00007B0E E3F0 2100 0004          00000100  11642          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007B14 41F3 F000               00000000  11643          LA    15,0(3,15)
00007B18 E3F0 D370 0024          00000370  11644          STG   15,880(0,13)
00007B1E 4110 D370               00000370  11645          LA    1,880(0,13)
00007B22 E3F0 C19E 0004          00007BC8  11646          LG    15,@lit_1994_407 ; mtx_unlock
00007B28                                   11647 @@gen_label618 DS    0H
00007B28 05EF                              11648          BALR  14,15
00007B2A                                   11649 @@gen_label619 DS    0H
00007B2A E3F0 20B8 0015          000000B8  11650          LGH   15,184(0,2)
00007B30 E3F0 D370 0024          00000370  11651          STG   15,880(0,13)
00007B36 4110 D370               00000370  11652          LA    1,880(0,13)
00007B3A E3F0 C1A6 0004          00007BD0  11653          LG    15,@lit_1994_408 ; rd_kafka_ApiKey2str
00007B40                                   11654 @@gen_label620 DS    0H
00007B40 05EF                              11655          BALR  14,15
00007B42                                   11656 @@gen_label621 DS    0H
00007B42 B904 003F                         11657          LGR   3,15
00007B46 41F0 2078               00000078  11658          LA    15,120(0,2)
00007B4A E3F0 D370 0024          00000370  11659          STG   15,880(0,13)
00007B50 4110 D370               00000370  11660          LA    1,880(0,13)
00007B54 E3F0 C1AE 0004          00007BD8  11661          LG    15,@lit_1994_409 ; rd_slice_offset
00007B5A                                   11662 @@gen_label622 DS    0H
00007B5A 05EF                              11663          BALR  14,15
00007B5C                                   11664 @@gen_label623 DS    0H
00007B5C B904 004F                         11665          LGR   4,15
00007B60 E350 2098 0004          00000098  11666          LG    5,152(0,2)  ; offset of end in rd_slice_s
00007B66 41F0 2078               00000078  11667          LA    15,120(0,2)
00007B6A E3F0 D370 0024          00000370  11668          STG   15,880(0,13)
00007B70 4110 D370               00000370  11669          LA    1,880(0,13)
00007B74 E3F0 C1B6 0004          00007BE0  11670          LG    15,@lit_1994_410 ; rd_slice_abs_offset
00007B7A                                   11671 @@gen_label624 DS    0H
00007B7A 05EF                              11672          BALR  14,15
00007B7C                                   11673 @@gen_label625 DS    0H
00007B7C B90B 005F                         11674          SLGR  5,15
00007B80 E3F0 21E8 0002          000001E8  11675          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00007B86 4780 C1E2               00007C0C  11676          BZ    @L975
00007B8A E3F0 21E8 0004          000001E8  11677          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00007B90 47F0 C1EC               00007C16  11678          B     @L976
00007B98                                   11679          DS    0D
00007B98 0000000000000000                  11680 @lit_1994_399 DC AD(rd_kafka_crash)
00007BA0 0000000000010480                  11681 @lit_1994_398 DC AD(@DATA)
                                                                                                                           Page  238 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007BA8 0000000000010840                  11682 @lit_1994_397 DC AD(@strings@)
00007BB0 0000000000000000                  11683 @lit_1994_401 DC AD(snprintf)
00007BB8 0000000000000000                  11684 @lit_1994_403 DC AD(mtx_lock)
00007BC0 00000000000019F8                  11685 @lit_1994_405 DC AD(rd_strlcpy)
00007BC8 0000000000000000                  11686 @lit_1994_407 DC AD(mtx_unlock)
00007BD0 0000000000001310                  11687 @lit_1994_408 DC AD(rd_kafka_$Api$Key2str)
00007BD8 0000000000001258                  11688 @lit_1994_409 DC AD(rd_slice_offset)
00007BE0 00000000000011B0                  11689 @lit_1994_410 DC AD(rd_slice_abs_offset)
00007BE8 0000000000000000                  11690 @lit_1994_414 DC AD(rd_kafka_log0)
00007BF0 00001DC0                          11691 @lit_region_diff_1994_2_5  DC A(@REGION_1994_5-@REGION_1994_2)
00007BF4 00000000
00007BF8 0000000000000000                  11692 @lit_1994_437 DC AD(rd_sockaddr2str)
00007C00 0000000000000000                  11693 @lit_1994_441 DC AD(rd_slice_read)
00007C08 00000A12                          11694 @lit_region_diff_1994_2_3  DC A(@REGION_1994_3-@REGION_1994_2)
00007C0C                                   11695 @L975    DS    0H
00007C0C E3F0 C17E 0004          00007BA8  11696          LG    15,@lit_1994_397
00007C12 41F0 F1F0               000001F0  11697          LA    15,496(0,15)
00007C16                                   11698 @L976    DS    0H
00007C16 E310 2100 0004          00000100  11699          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007C1C E310 1FD0 0004          00000FD0  11700          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00007C22 4110 1210               00000210  11701          LA    1,528(0,1)
00007C26 E310 D370 0024          00000370  11702          STG   1,880(0,13)
00007C2C E310 2100 0004          00000100  11703          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007C32 E310 1FD0 0004          00000FD0  11704          LG    1,4048(0,1)
00007C38 E310 D378 0024          00000378  11705          STG   1,888(0,13)
00007C3E 4110 D260               00000260  11706          LA    1,608(0,13)
00007C42 E310 D380 0024          00000380  11707          STG   1,896(0,13)
00007C48 E310 D368 0094          00000368  11708          LLC   1,872(0,13) ; log_decode_errors
00007C4E B914 0011                         11709          LGFR  1,1
00007C52 E310 D388 0024          00000388  11710          STG   1,904(0,13)
00007C58 D707 D390 D390 00000390 00000390  11711          XC    912(8,13),912(13)
00007C5E E310 C17E 0004          00007BA8  11712          LG    1,@lit_1994_397
00007C64 4170 1214               00000214  11713          LA    7,532(0,1)
00007C68 E370 D398 0024          00000398  11714          STG   7,920(0,13)
00007C6E 4110 1220               00000220  11715          LA    1,544(0,1)
00007C72 E310 D3A0 0024          000003A0  11716          STG   1,928(0,13)
00007C78 E330 D3A8 0024          000003A8  11717          STG   3,936(0,13)
00007C7E 4810 20BA               000000BA  11718          LH    1,186(0,2)
00007C82 B914 0011                         11719          LGFR  1,1
00007C86 E310 D3B0 0024          000003B0  11720          STG   1,944(0,13)
00007C8C E340 D3B8 0024          000003B8  11721          STG   4,952(0,13)
00007C92 E310 2098 0004          00000098  11722          LG    1,152(0,2)  ; offset of end in rd_slice_s
00007C98 E310 2090 000B          00000090  11723          SLG   1,144(0,2)
00007C9E E310 D3C0 0024          000003C0  11724          STG   1,960(0,13)
00007CA4 E310 C176 0004          00007BA0  11725          LG    1,@lit_1994_398
00007CAA 4110 12AE               000002AE  11726          LA    1,686(0,1)
00007CAE E310 D3C8 0024          000003C8  11727          STG   1,968(0,13)
00007CB4 E548 D3D0 0302          000003D0  11728          MVGHI 976(13),770
00007CBA E360 D3D8 0024          000003D8  11729          STG   6,984(0,13)
00007CC0 E350 D3E0 0024          000003E0  11730          STG   5,992(0,13)
00007CC6 E3F0 D3E8 0024          000003E8  11731          STG   15,1000(0,13)
00007CCC 41F0 D160               00000160  11732          LA    15,352(0,13)
                                                                                                                           Page  239 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007CD0 E3F0 D3F0 0024          000003F0  11733          STG   15,1008(0,13)
00007CD6 4110 D370               00000370  11734          LA    1,880(0,13)
00007CDA E3F0 C1BE 0004          00007BE8  11735          LG    15,@lit_1994_414 ; rd_kafka_log0
00007CE0                                   11736 @@gen_label627 DS    0H
00007CE0 05EF                              11737          BALR  14,15
00007CE2                                   11738 @@gen_label628 DS    0H
00007CE2                                   11739 @L966    DS    0H
00007CE2 E54C 2188 FF65          00000188  11740          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
00007CE8 E3C0 C1C6 001A          00007BF0  11741          ALGF  12,@lit_region_diff_1994_2_5
                                           11742          DROP  12
                        000097EA           11743          USING @REGION_1994_5,12
00007CEE 47F0 C140               0000992A  11744          B     @_err_parse@1994@2
                                           11745          DROP  12
                        00007A2A           11746          USING @REGION_1994_2,12
00007CF2                                   11747 @L962    DS    0H
00007CF2                                   11748 @L958    DS    0H
00007CF2 D201 20BA D0AE 000000BA 000000AE  11749          MVC   186(2,2),174(13)
                                           11750 * ***
                                           11751 * ***
                                           11752 * ***                   if (rkbuf->rkbuf_reqhdr.ApiKey < 0 ||
00007CF8 48F0 20B8               000000B8  11753          LH    15,184(0,2)
00007CFC 12FF                              11754          LTR   15,15
00007CFE 4740 C2E4               00007D0E  11755          BL    @L979
                                           11756 * ***                       rkbuf->rkbuf_reqhdr.ApiKey >= 59) {
00007D02 48F0 20B8               000000B8  11757          LH    15,184(0,2)
00007D06 A7FE 003B               0000003B  11758          CHI   15,59
00007D0A 4740 C5CA               00007FF4  11759          BL    @L977
00007D0E                                   11760 @L978    DS    0H
                                           11761 * ***                           do { if (log_decode_errors > 0) { do {\
                                           11762 *  if (((!(rkbuf->rkbuf_rkb)))) rd_kafka_crash("C:\\asgkafka\\librdkaf\
                                           11763 * ka\\src\\rdkafka_mock.c",775, __FUNCTION__, (((void *)0)), "assert: \
                                           11764 * " "rkbuf->rkbuf_rkb"); } while (0); do { char _logname[256]; mtx_loc\
                                           11765 * k(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strlcpy(_logname, rkbuf\
                                           11766 * ->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_unlock(&(rkbuf->rkb\
                                           11767 * uf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf->rkbuf_rkb)->rkb_r\
                                           11768 * k->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_decode_errors,\
                                           11769 *  0x0, "PROTOERR", "Protocol parse failure for %s v%hd%s " "at %" "zu\
                                           11770 * " "/%" "zu" " (%s:%i) " "(incorrect broker.version.fallback?)", rd_k\
                                           11771 * afka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.Ap\
                                           11772 * iVersion, (rkbuf->rkbuf_flags&0x40? "(flex)":""), rd_slice_offset(&r\
                                           11773 * kbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end - (&rkbuf->rkbuf_r\
                                           11774 * eader)->start), __FUNCTION__, 775); } while (0); do { char _logname[\
                                           11775 * 256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strlcpy(_l\
                                           11776 * ogname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_unlock\
                                           11777 * (&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf->rkbu\
                                           11778 * f_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_d\
                                           11779 * ecode_errors, 0x0, "PROTOERR", "Invalid ApiKey %hd from %s", rkbuf->\
                                           11780 * rkbuf_reqhdr.ApiKey, rd_sockaddr2str( &mconn->peer, 0x1)); } while (\
                                           11781 * 0); } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__BAD_MSG; goto err_pars\
                                           11782 * e; } while (0);
00007D0E                                   11783 @L979    DS    0H
00007D0E 9500 D368      00000368 00000000  11784          CLI   872(13),0
                                                                                                                           Page  240 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007D12 47D0 C5BA               00007FE4  11785          BNH   @L982
00007D16                                   11786 @L983    DS    0H
00007D16 E3F0 2100 0002          00000100  11787          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007D1C 4770 C338               00007D62  11788          BNZ   @L986
00007D20 E3F0 C17E 0004          00007BA8  11789          LG    15,@lit_1994_397
00007D26 4110 F0FA               000000FA  11790          LA    1,250(0,15)
00007D2A E310 D370 0024          00000370  11791          STG   1,880(0,13)
00007D30 E548 D378 0307          00000378  11792          MVGHI 888(13),775
00007D36 E310 C176 0004          00007BA0  11793          LG    1,@lit_1994_398
00007D3C 4110 12AE               000002AE  11794          LA    1,686(0,1)
00007D40 E310 D380 0024          00000380  11795          STG   1,896(0,13)
00007D46 D707 D388 D388 00000388 00000388  11796          XC    904(8,13),904(13)
00007D4C 41F0 F1D2               000001D2  11797          LA    15,466(0,15)
00007D50 E3F0 D390 0024          00000390  11798          STG   15,912(0,13)
00007D56 4110 D370               00000370  11799          LA    1,880(0,13)
00007D5A E3F0 C16E 0004          00007B98  11800          LG    15,@lit_1994_399 ; rd_kafka_crash
00007D60                                   11801 @@gen_label633 DS    0H
00007D60 05EF                              11802          BALR  14,15
00007D62                                   11803 @@gen_label634 DS    0H
00007D62                                   11804 @L986    DS    0H
00007D62                                   11805 @L987    DS    0H
00007D62 E3F0 2100 0004          00000100  11806          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007D68 A749 1638               00001638  11807          LGHI  4,5688      ; 5688
00007D6C 41F4 F000               00000000  11808          LA    15,0(4,15)
00007D70 E3F0 D370 0024          00000370  11809          STG   15,880(0,13)
00007D76 4110 D370               00000370  11810          LA    1,880(0,13)
00007D7A E3F0 C18E 0004          00007BB8  11811          LG    15,@lit_1994_403 ; mtx_lock
00007D80                                   11812 @@gen_label635 DS    0H
00007D80 05EF                              11813          BALR  14,15
00007D82                                   11814 @@gen_label636 DS    0H
00007D82 41F0 D160               00000160  11815          LA    15,352(0,13)
00007D86 E3F0 D370 0024          00000370  11816          STG   15,880(0,13)
00007D8C E3F0 2100 0004          00000100  11817          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007D92 A719 1630               00001630  11818          LGHI  1,5680      ; 5680
00007D96 E3F1 F000 0004          00000000  11819          LG    15,0(1,15)
00007D9C E3F0 D378 0024          00000378  11820          STG   15,888(0,13)
00007DA2 E548 D380 0100          00000380  11821          MVGHI 896(13),256
00007DA8 4110 D370               00000370  11822          LA    1,880(0,13)
00007DAC E3F0 C196 0004          00007BC0  11823          LG    15,@lit_1994_405 ; rd_strlcpy
00007DB2                                   11824 @@gen_label637 DS    0H
00007DB2 05EF                              11825          BALR  14,15
00007DB4                                   11826 @@gen_label638 DS    0H
00007DB4 E3F0 2100 0004          00000100  11827          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007DBA 41F4 F000               00000000  11828          LA    15,0(4,15)
00007DBE E3F0 D370 0024          00000370  11829          STG   15,880(0,13)
00007DC4 4110 D370               00000370  11830          LA    1,880(0,13)
00007DC8 E3F0 C19E 0004          00007BC8  11831          LG    15,@lit_1994_407 ; mtx_unlock
00007DCE                                   11832 @@gen_label639 DS    0H
00007DCE 05EF                              11833          BALR  14,15
00007DD0                                   11834 @@gen_label640 DS    0H
00007DD0 E3F0 20B8 0015          000000B8  11835          LGH   15,184(0,2)
00007DD6 E3F0 D370 0024          00000370  11836          STG   15,880(0,13)
                                                                                                                           Page  241 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007DDC 4110 D370               00000370  11837          LA    1,880(0,13)
00007DE0 E3F0 C1A6 0004          00007BD0  11838          LG    15,@lit_1994_408 ; rd_kafka_ApiKey2str
00007DE6                                   11839 @@gen_label641 DS    0H
00007DE6 05EF                              11840          BALR  14,15
00007DE8                                   11841 @@gen_label642 DS    0H
00007DE8 B904 004F                         11842          LGR   4,15
00007DEC 9140 2023      00000023 00000040  11843          TM    35(2),64
00007DF0 4780 C3D8               00007E02  11844          BZ    @L990
00007DF4 E3F0 C17E 0004          00007BA8  11845          LG    15,@lit_1994_397
00007DFA 4150 F4A6               000004A6  11846          LA    5,1190(0,15)
00007DFE 47F0 C3E2               00007E0C  11847          B     @L991
00007E02                                   11848 @L990    DS    0H
00007E02 E3F0 C17E 0004          00007BA8  11849          LG    15,@lit_1994_397
00007E08 4150 F4AE               000004AE  11850          LA    5,1198(0,15)
00007E0C                                   11851 @L991    DS    0H
00007E0C 41F0 2078               00000078  11852          LA    15,120(0,2)
00007E10 E3F0 D370 0024          00000370  11853          STG   15,880(0,13)
00007E16 4110 D370               00000370  11854          LA    1,880(0,13)
00007E1A E3F0 C1AE 0004          00007BD8  11855          LG    15,@lit_1994_409 ; rd_slice_offset
00007E20                                   11856 @@gen_label644 DS    0H
00007E20 05EF                              11857          BALR  14,15
00007E22                                   11858 @@gen_label645 DS    0H
00007E22 E310 2100 0004          00000100  11859          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007E28 E310 1FD0 0004          00000FD0  11860          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00007E2E 4110 1210               00000210  11861          LA    1,528(0,1)
00007E32 E310 D370 0024          00000370  11862          STG   1,880(0,13)
00007E38 E310 2100 0004          00000100  11863          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007E3E E310 1FD0 0004          00000FD0  11864          LG    1,4048(0,1)
00007E44 E310 D378 0024          00000378  11865          STG   1,888(0,13)
00007E4A 4110 D160               00000160  11866          LA    1,352(0,13)
00007E4E E310 D380 0024          00000380  11867          STG   1,896(0,13)
00007E54 E310 D368 0094          00000368  11868          LLC   1,872(0,13) ; log_decode_errors
00007E5A B914 0011                         11869          LGFR  1,1
00007E5E E310 D388 0024          00000388  11870          STG   1,904(0,13)
00007E64 D707 D390 D390 00000390 00000390  11871          XC    912(8,13),912(13)
00007E6A E310 C17E 0004          00007BA8  11872          LG    1,@lit_1994_397
00007E70 4160 14B0               000004B0  11873          LA    6,1200(0,1)
00007E74 E360 D398 0024          00000398  11874          STG   6,920(0,13)
00007E7A 4110 14BA               000004BA  11875          LA    1,1210(0,1)
00007E7E E310 D3A0 0024          000003A0  11876          STG   1,928(0,13)
00007E84 E340 D3A8 0024          000003A8  11877          STG   4,936(0,13)
00007E8A 4810 20BA               000000BA  11878          LH    1,186(0,2)
00007E8E B914 0011                         11879          LGFR  1,1
00007E92 E310 D3B0 0024          000003B0  11880          STG   1,944(0,13)
00007E98 E350 D3B8 0024          000003B8  11881          STG   5,952(0,13)
00007E9E E3F0 D3C0 0024          000003C0  11882          STG   15,960(0,13)
00007EA4 E3F0 2098 0004          00000098  11883          LG    15,152(0,2) ; offset of end in rd_slice_s
00007EAA E3F0 2090 000B          00000090  11884          SLG   15,144(0,2)
00007EB0 E3F0 D3C8 0024          000003C8  11885          STG   15,968(0,13)
00007EB6 E3F0 C176 0004          00007BA0  11886          LG    15,@lit_1994_398
00007EBC 41F0 F2AE               000002AE  11887          LA    15,686(0,15)
00007EC0 E3F0 D3D0 0024          000003D0  11888          STG   15,976(0,13)
                                                                                                                           Page  242 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007EC6 E548 D3D8 0307          000003D8  11889          MVGHI 984(13),775
00007ECC 4110 D370               00000370  11890          LA    1,880(0,13)
00007ED0 E3F0 C1BE 0004          00007BE8  11891          LG    15,@lit_1994_414 ; rd_kafka_log0
00007ED6                                   11892 @@gen_label646 DS    0H
00007ED6 05EF                              11893          BALR  14,15
00007ED8                                   11894 @@gen_label647 DS    0H
00007ED8                                   11895 @L992    DS    0H
00007ED8 E3F0 2100 0004          00000100  11896          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007EDE A749 1638               00001638  11897          LGHI  4,5688      ; 5688
00007EE2 41F4 F000               00000000  11898          LA    15,0(4,15)
00007EE6 E3F0 D370 0024          00000370  11899          STG   15,880(0,13)
00007EEC 4110 D370               00000370  11900          LA    1,880(0,13)
00007EF0 E3F0 C18E 0004          00007BB8  11901          LG    15,@lit_1994_403 ; mtx_lock
00007EF6                                   11902 @@gen_label648 DS    0H
00007EF6 05EF                              11903          BALR  14,15
00007EF8                                   11904 @@gen_label649 DS    0H
00007EF8 41F0 D160               00000160  11905          LA    15,352(0,13)
00007EFC E3F0 D370 0024          00000370  11906          STG   15,880(0,13)
00007F02 E3F0 2100 0004          00000100  11907          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007F08 A719 1630               00001630  11908          LGHI  1,5680      ; 5680
00007F0C E3F1 F000 0004          00000000  11909          LG    15,0(1,15)
00007F12 E3F0 D378 0024          00000378  11910          STG   15,888(0,13)
00007F18 E548 D380 0100          00000380  11911          MVGHI 896(13),256
00007F1E 4110 D370               00000370  11912          LA    1,880(0,13)
00007F22 E3F0 C196 0004          00007BC0  11913          LG    15,@lit_1994_405 ; rd_strlcpy
00007F28                                   11914 @@gen_label650 DS    0H
00007F28 05EF                              11915          BALR  14,15
00007F2A                                   11916 @@gen_label651 DS    0H
00007F2A E3F0 2100 0004          00000100  11917          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00007F30 41F4 F000               00000000  11918          LA    15,0(4,15)
00007F34 E3F0 D370 0024          00000370  11919          STG   15,880(0,13)
00007F3A 4110 D370               00000370  11920          LA    1,880(0,13)
00007F3E E3F0 C19E 0004          00007BC8  11921          LG    15,@lit_1994_407 ; mtx_unlock
00007F44                                   11922 @@gen_label652 DS    0H
00007F44 05EF                              11923          BALR  14,15
00007F46                                   11924 @@gen_label653 DS    0H
00007F46 41F0 3098               00000098  11925          LA    15,152(0,3)
00007F4A E3F0 D370 0024          00000370  11926          STG   15,880(0,13)
00007F50 E548 D378 0001          00000378  11927          MVGHI 888(13),1
00007F56 4110 D370               00000370  11928          LA    1,880(0,13)
00007F5A E3F0 C1CE 0004          00007BF8  11929          LG    15,@lit_1994_437 ; rd_sockaddr2str
00007F60                                   11930 @@gen_label654 DS    0H
00007F60 05EF                              11931          BALR  14,15
00007F62                                   11932 @@gen_label655 DS    0H
00007F62 E310 2100 0004          00000100  11933          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007F68 E310 1FD0 0004          00000FD0  11934          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00007F6E 4110 1210               00000210  11935          LA    1,528(0,1)
00007F72 E310 D370 0024          00000370  11936          STG   1,880(0,13)
00007F78 E310 2100 0004          00000100  11937          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00007F7E E310 1FD0 0004          00000FD0  11938          LG    1,4048(0,1)
00007F84 E310 D378 0024          00000378  11939          STG   1,888(0,13)
00007F8A 4110 D160               00000160  11940          LA    1,352(0,13)
                                                                                                                           Page  243 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00007F8E E310 D380 0024          00000380  11941          STG   1,896(0,13)
00007F94 E310 D368 0094          00000368  11942          LLC   1,872(0,13) ; log_decode_errors
00007F9A B914 0011                         11943          LGFR  1,1
00007F9E E310 D388 0024          00000388  11944          STG   1,904(0,13)
00007FA4 D707 D390 D390 00000390 00000390  11945          XC    912(8,13),912(13)
00007FAA E310 C17E 0004          00007BA8  11946          LG    1,@lit_1994_397
00007FB0 4130 14B0               000004B0  11947          LA    3,1200(0,1)
00007FB4 E330 D398 0024          00000398  11948          STG   3,920(0,13)
00007FBA 4110 1518               00000518  11949          LA    1,1304(0,1)
00007FBE E310 D3A0 0024          000003A0  11950          STG   1,928(0,13)
00007FC4 4810 20B8               000000B8  11951          LH    1,184(0,2)
00007FC8 B914 0011                         11952          LGFR  1,1
00007FCC E310 D3A8 0024          000003A8  11953          STG   1,936(0,13)
00007FD2 E3F0 D3B0 0024          000003B0  11954          STG   15,944(0,13)
00007FD8 4110 D370               00000370  11955          LA    1,880(0,13)
00007FDC E3F0 C1BE 0004          00007BE8  11956          LG    15,@lit_1994_414 ; rd_kafka_log0
00007FE2                                   11957 @@gen_label656 DS    0H
00007FE2 05EF                              11958          BALR  14,15
00007FE4                                   11959 @@gen_label657 DS    0H
00007FE4                                   11960 @L982    DS    0H
00007FE4 E54C 2188 FF39          00000188  11961          MVHI  392(2),-199 ; offset of rkbuf_err in rd_kafka_buf_s
00007FEA E3C0 C1C6 001A          00007BF0  11962          ALGF  12,@lit_region_diff_1994_2_5
                                           11963          DROP  12
                        000097EA           11964          USING @REGION_1994_5,12
00007FF0 47F0 C140               0000992A  11965          B     @_err_parse@1994@2
                                           11966          DROP  12
                        00007A2A           11967          USING @REGION_1994_2,12
                                           11968 * ***   # 781 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           11969 * ***                           ((!*"/* NOTREACHED */ violated") ? (vo\
                                           11970 * id)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mo\
                                           11971 * ck.c", 781, "!*\"/* NOTREACHED */ violated\""));
                                           11972 * ***                   }
00007FF4                                   11973 @L977    DS    0H
                                           11974 * ***
                                           11975 * ***
                                           11976 * ***                   if (mcluster->api_handlers[rkbuf->rkbuf_reqhdr\
                                           11977 * .ApiKey].
                                           11978 * ***                       FlexVersion != -1 &&
00007FF4 E3F0 20B8 0015          000000B8  11979          LGH   15,184(0,2)
00007FFA EBFF 0004 000D          00000004  11980          SLLG  15,15,4(0)  ; *0x10
00008000 48FF 410C               0000010C  11981          LH    15,268(15,4)
00008004 A7FE FFFF               0000FFFF  11982          CHI   15,-1
00008008 4780 C606               00008030  11983          BE    @L1001
                                           11984 * ***                       rkbuf->rkbuf_reqhdr.ApiVersion >=
                                           11985 * ***                       mcluster->api_handlers[rkbuf->rkbuf_reqhdr\
                                           11986 * .ApiKey].
                                           11987 * ***                       FlexVersion)
0000800C 48F0 20BA               000000BA  11988          LH    15,186(0,2)
00008010 E310 20B8 0015          000000B8  11989          LGH   1,184(0,2)
00008016 EB11 0004 000D          00000004  11990          SLLG  1,1,4(0)    ; *0x10
0000801C 49F1 410C               0000010C  11991          CH    15,268(1,4)
00008020 4740 C606               00008030  11992          BL    @L1001
                                                                                                                           Page  244 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           11993 * ***                           rkbuf->rkbuf_flags |= 0x40;
00008024 58F0 2020               00000020  11994          L     15,32(0,2)
00008028 A5FB 0040               00000040  11995          OILL  15,64
0000802C 50F0 2020               00000020  11996          ST    15,32(0,2)
00008030                                   11997 @L997    DS    0H
                                           11998 * ***
                                           11999 * ***
                                           12000 * ***                   do { int32_t _v; do { size_t __len2 = (size_t)\
                                           12001 * (sizeof(_v)); if (!rd_slice_read(&(rkbuf)->rkbuf_reader, &_v, __len2\
                                           12002 * )) do { size_t __len0 = (size_t)(__len2); if (((__len0 > ((&(rkbuf)-\
                                           12003 * >rkbuf_reader)->end - rd_slice_abs_offset(&(rkbuf)->rkbuf_reader))))\
                                           12004 * ) { do { if (log_decode_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)\
                                           12005 * ))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",7\
                                           12006 * 93, __FUNCTION__, (((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } w\
                                           12007 * hile (0); char __tmpstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), "\
                                           12008 * : "); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; do { char _lo\
                                           12009 * gname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strl\
                                           12010 * cpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_\
                                           12011 * unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf\
                                           12012 * ->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname,\
                                           12013 *  log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read buffer underfl\
                                           12014 * ow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " "expected %" \
                                           12015 * "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd_kafka_ApiKey\
                                           12016 * 2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, r\
                                           12017 * d_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end -\
                                           12018 *  (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 793, __len0, ((&rkbuf\
                                           12019 * ->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->rkbuf_reader)), r\
                                           12020 * kbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mitigation : "inco\
                                           12021 * rrect broker.version.fallback?", __tmpstr); } while (0); } (rkbuf)->\
                                           12022 * rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_parse; } while (0\
                                           12023 * ); } } while (0); } while (0); *(&rkbuf->rkbuf_reqhdr.CorrId) = (_v)\
                                           12024 * ; } while (0);
00008030                                   12025 @L998    DS    0H
00008030                                   12026 @L1001   DS    0H
00008030 A749 0004               00000004  12027          LGHI  4,4         ; 4
00008034 41F0 2078               00000078  12028          LA    15,120(0,2)
00008038 E3F0 D370 0024          00000370  12029          STG   15,880(0,13)
0000803E 41F0 D0B0               000000B0  12030          LA    15,176(0,13)
00008042 E3F0 D378 0024          00000378  12031          STG   15,888(0,13)
00008048 E340 D380 0024          00000380  12032          STG   4,896(0,13)
0000804E 4110 D370               00000370  12033          LA    1,880(0,13)
00008052 E3F0 C1D6 0004          00007C00  12034          LG    15,@lit_1994_441 ; rd_slice_read
00008058                                   12035 @@gen_label660 DS    0H
00008058 05EF                              12036          BALR  14,15
0000805A                                   12037 @@gen_label661 DS    0H
0000805A B902 00FF                         12038          LTGR  15,15
0000805E 4770 C8C2               000082EC  12039          BNZ   @L1004
00008062                                   12040 @L1005   DS    0H
00008062 E360 2098 0004          00000098  12041          LG    6,152(0,2)  ; offset of end in rd_slice_s
00008068 41F0 2078               00000078  12042          LA    15,120(0,2)
0000806C E3F0 D370 0024          00000370  12043          STG   15,880(0,13)
00008072 4110 D370               00000370  12044          LA    1,880(0,13)
                                                                                                                           Page  245 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008076 E3F0 C1B6 0004          00007BE0  12045          LG    15,@lit_1994_410 ; rd_slice_abs_offset
0000807C                                   12046 @@gen_label663 DS    0H
0000807C 05EF                              12047          BALR  14,15
0000807E                                   12048 @@gen_label664 DS    0H
0000807E B90B 006F                         12049          SLGR  6,15
00008082 B921 0046                         12050          CLGR  4,6
00008086 47D0 C8C2               000082EC  12051          BNH   @L1008
0000808A                                   12052 @L1009   DS    0H
0000808A 9500 D368      00000368 00000000  12053          CLI   872(13),0
0000808E 47D0 C8B2               000082DC  12054          BNH   @L1012
00008092                                   12055 @L1013   DS    0H
00008092 E3F0 2100 0002          00000100  12056          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008098 4770 C6B4               000080DE  12057          BNZ   @L1016
0000809C E3F0 C17E 0004          00007BA8  12058          LG    15,@lit_1994_397
000080A2 4110 F0FA               000000FA  12059          LA    1,250(0,15)
000080A6 E310 D370 0024          00000370  12060          STG   1,880(0,13)
000080AC E548 D378 0319          00000378  12061          MVGHI 888(13),793
000080B2 E310 C176 0004          00007BA0  12062          LG    1,@lit_1994_398
000080B8 4110 12AE               000002AE  12063          LA    1,686(0,1)
000080BC E310 D380 0024          00000380  12064          STG   1,896(0,13)
000080C2 D707 D388 D388 00000388 00000388  12065          XC    904(8,13),904(13)
000080C8 41F0 F1D2               000001D2  12066          LA    15,466(0,15)
000080CC E3F0 D390 0024          00000390  12067          STG   15,912(0,13)
000080D2 4110 D370               00000370  12068          LA    1,880(0,13)
000080D6 E3F0 C16E 0004          00007B98  12069          LG    15,@lit_1994_399 ; rd_kafka_crash
000080DC                                   12070 @@gen_label668 DS    0H
000080DC 05EF                              12071          BALR  14,15
000080DE                                   12072 @@gen_label669 DS    0H
000080DE                                   12073 @L1016   DS    0H
000080DE 41F0 D160               00000160  12074          LA    15,352(0,13)
000080E2 E3F0 D370 0024          00000370  12075          STG   15,880(0,13)
000080E8 E548 D378 0100          00000378  12076          MVGHI 888(13),256
000080EE E3F0 C17E 0004          00007BA8  12077          LG    15,@lit_1994_397
000080F4 41F0 F1EC               000001EC  12078          LA    15,492(0,15)
000080F8 E3F0 D380 0024          00000380  12079          STG   15,896(0,13)
000080FE 4110 D370               00000370  12080          LA    1,880(0,13)
00008102 E3F0 C186 0004          00007BB0  12081          LG    15,@lit_1994_401 ; snprintf
00008108                                   12082 @@gen_label670 DS    0H
00008108 05EF                              12083          BALR  14,15
0000810A                                   12084 @@gen_label671 DS    0H
0000810A 41F0 D160               00000160  12085          LA    15,352(0,13)
0000810E B904 001F                         12086          LGR   1,15
00008112 A709 0000               00000000  12087          LGHI  0,0
00008116                                   12088 @@gen_label672 DS 0H
00008116 B25E 000F                         12089          SRST  0,15
0000811A 4710 C6EC               00008116  12090          BC  1,@@gen_label672
0000811E B90B 0001                         12091          SLGR  0,1
00008122 A70F 0002               00000002  12092          CGHI  0,2
00008126 4770 C704               0000812E  12093          BNE   @L1018
0000812A 9200 D160      00000160 00000000  12094          MVI   352(13),0
0000812E                                   12095 @L1017   DS    0H
0000812E                                   12096 @L1018   DS    0H
                                                                                                                           Page  246 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000812E E3F0 2100 0004          00000100  12097          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008134 A739 1638               00001638  12098          LGHI  3,5688      ; 5688
00008138 41F3 F000               00000000  12099          LA    15,0(3,15)
0000813C E3F0 D370 0024          00000370  12100          STG   15,880(0,13)
00008142 4110 D370               00000370  12101          LA    1,880(0,13)
00008146 E3F0 C18E 0004          00007BB8  12102          LG    15,@lit_1994_403 ; mtx_lock
0000814C                                   12103 @@gen_label674 DS    0H
0000814C 05EF                              12104          BALR  14,15
0000814E                                   12105 @@gen_label675 DS    0H
0000814E 41F0 D260               00000260  12106          LA    15,608(0,13)
00008152 E3F0 D370 0024          00000370  12107          STG   15,880(0,13)
00008158 E3F0 2100 0004          00000100  12108          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000815E A719 1630               00001630  12109          LGHI  1,5680      ; 5680
00008162 E3F1 F000 0004          00000000  12110          LG    15,0(1,15)
00008168 E3F0 D378 0024          00000378  12111          STG   15,888(0,13)
0000816E E548 D380 0100          00000380  12112          MVGHI 896(13),256
00008174 4110 D370               00000370  12113          LA    1,880(0,13)
00008178 E3F0 C196 0004          00007BC0  12114          LG    15,@lit_1994_405 ; rd_strlcpy
0000817E                                   12115 @@gen_label676 DS    0H
0000817E 05EF                              12116          BALR  14,15
00008180                                   12117 @@gen_label677 DS    0H
00008180 E3F0 2100 0004          00000100  12118          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008186 41F3 F000               00000000  12119          LA    15,0(3,15)
0000818A E3F0 D370 0024          00000370  12120          STG   15,880(0,13)
00008190 4110 D370               00000370  12121          LA    1,880(0,13)
00008194 E3F0 C19E 0004          00007BC8  12122          LG    15,@lit_1994_407 ; mtx_unlock
0000819A                                   12123 @@gen_label678 DS    0H
0000819A 05EF                              12124          BALR  14,15
0000819C                                   12125 @@gen_label679 DS    0H
0000819C E3F0 20B8 0015          000000B8  12126          LGH   15,184(0,2)
000081A2 E3F0 D370 0024          00000370  12127          STG   15,880(0,13)
000081A8 4110 D370               00000370  12128          LA    1,880(0,13)
000081AC E3F0 C1A6 0004          00007BD0  12129          LG    15,@lit_1994_408 ; rd_kafka_ApiKey2str
000081B2                                   12130 @@gen_label680 DS    0H
000081B2 05EF                              12131          BALR  14,15
000081B4                                   12132 @@gen_label681 DS    0H
000081B4 B904 003F                         12133          LGR   3,15
000081B8 41F0 2078               00000078  12134          LA    15,120(0,2)
000081BC E3F0 D370 0024          00000370  12135          STG   15,880(0,13)
000081C2 4110 D370               00000370  12136          LA    1,880(0,13)
000081C6 E3F0 C1AE 0004          00007BD8  12137          LG    15,@lit_1994_409 ; rd_slice_offset
000081CC                                   12138 @@gen_label682 DS    0H
000081CC 05EF                              12139          BALR  14,15
000081CE                                   12140 @@gen_label683 DS    0H
000081CE B904 005F                         12141          LGR   5,15
000081D2 E360 2098 0004          00000098  12142          LG    6,152(0,2)  ; offset of end in rd_slice_s
000081D8 41F0 2078               00000078  12143          LA    15,120(0,2)
000081DC E3F0 D370 0024          00000370  12144          STG   15,880(0,13)
000081E2 4110 D370               00000370  12145          LA    1,880(0,13)
000081E6 E3F0 C1B6 0004          00007BE0  12146          LG    15,@lit_1994_410 ; rd_slice_abs_offset
000081EC                                   12147 @@gen_label684 DS    0H
000081EC 05EF                              12148          BALR  14,15
                                                                                                                           Page  247 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000081EE                                   12149 @@gen_label685 DS    0H
000081EE B90B 006F                         12150          SLGR  6,15
000081F2 E3F0 21E8 0002          000001E8  12151          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000081F8 4780 C7DC               00008206  12152          BZ    @L1021
000081FC E3F0 21E8 0004          000001E8  12153          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00008202 47F0 C7E6               00008210  12154          B     @L1022
00008206                                   12155 @L1021   DS    0H
00008206 E3F0 C17E 0004          00007BA8  12156          LG    15,@lit_1994_397
0000820C 41F0 F1F0               000001F0  12157          LA    15,496(0,15)
00008210                                   12158 @L1022   DS    0H
00008210 E310 2100 0004          00000100  12159          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008216 E310 1FD0 0004          00000FD0  12160          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
0000821C 4110 1210               00000210  12161          LA    1,528(0,1)
00008220 E310 D370 0024          00000370  12162          STG   1,880(0,13)
00008226 E310 2100 0004          00000100  12163          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
0000822C E310 1FD0 0004          00000FD0  12164          LG    1,4048(0,1)
00008232 E310 D378 0024          00000378  12165          STG   1,888(0,13)
00008238 4110 D260               00000260  12166          LA    1,608(0,13)
0000823C E310 D380 0024          00000380  12167          STG   1,896(0,13)
00008242 E310 D368 0094          00000368  12168          LLC   1,872(0,13) ; log_decode_errors
00008248 B914 0011                         12169          LGFR  1,1
0000824C E310 D388 0024          00000388  12170          STG   1,904(0,13)
00008252 D707 D390 D390 00000390 00000390  12171          XC    912(8,13),912(13)
00008258 E310 C17E 0004          00007BA8  12172          LG    1,@lit_1994_397
0000825E 4170 1214               00000214  12173          LA    7,532(0,1)
00008262 E370 D398 0024          00000398  12174          STG   7,920(0,13)
00008268 4110 1220               00000220  12175          LA    1,544(0,1)
0000826C E310 D3A0 0024          000003A0  12176          STG   1,928(0,13)
00008272 E330 D3A8 0024          000003A8  12177          STG   3,936(0,13)
00008278 4810 20BA               000000BA  12178          LH    1,186(0,2)
0000827C B914 0011                         12179          LGFR  1,1
00008280 E310 D3B0 0024          000003B0  12180          STG   1,944(0,13)
00008286 E350 D3B8 0024          000003B8  12181          STG   5,952(0,13)
0000828C E310 2098 0004          00000098  12182          LG    1,152(0,2)  ; offset of end in rd_slice_s
00008292 E310 2090 000B          00000090  12183          SLG   1,144(0,2)
00008298 E310 D3C0 0024          000003C0  12184          STG   1,960(0,13)
0000829E E310 C176 0004          00007BA0  12185          LG    1,@lit_1994_398
000082A4 4110 12AE               000002AE  12186          LA    1,686(0,1)
000082A8 E310 D3C8 0024          000003C8  12187          STG   1,968(0,13)
000082AE E548 D3D0 0319          000003D0  12188          MVGHI 976(13),793
000082B4 E340 D3D8 0024          000003D8  12189          STG   4,984(0,13)
000082BA E360 D3E0 0024          000003E0  12190          STG   6,992(0,13)
000082C0 E3F0 D3E8 0024          000003E8  12191          STG   15,1000(0,13)
000082C6 41F0 D160               00000160  12192          LA    15,352(0,13)
000082CA E3F0 D3F0 0024          000003F0  12193          STG   15,1008(0,13)
000082D0 4110 D370               00000370  12194          LA    1,880(0,13)
000082D4 E3F0 C1BE 0004          00007BE8  12195          LG    15,@lit_1994_414 ; rd_kafka_log0
000082DA                                   12196 @@gen_label687 DS    0H
000082DA 05EF                              12197          BALR  14,15
000082DC                                   12198 @@gen_label688 DS    0H
                                                                                                                           Page  248 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000082DC                                   12199 @L1012   DS    0H
000082DC E54C 2188 FF65          00000188  12200          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
000082E2 E3C0 C1C6 001A          00007BF0  12201          ALGF  12,@lit_region_diff_1994_2_5
                                           12202          DROP  12
                        000097EA           12203          USING @REGION_1994_5,12
000082E8 47F0 C140               0000992A  12204          B     @_err_parse@1994@2
                                           12205          DROP  12
                        00007A2A           12206          USING @REGION_1994_2,12
000082EC                                   12207 @L1008   DS    0H
000082EC                                   12208 @L1004   DS    0H
000082EC 58F0 D0B0               000000B0  12209          L     15,176(0,13) ; _v
000082F0 50F0 20BC               000000BC  12210          ST    15,188(0,2) ; offset of CorrId in rd_kafkap_reqhdr
                                           12211 * ***
                                           12212 * ***
                                           12213 * ***                   rkbuf->rkbuf_totlen = rkbuf->rkbuf_reqhdr.Size\
                                           12214 *  + 4;
000082F4 58F0 20B4               000000B4  12215          L     15,180(0,2) ; offset of rkbuf_reqhdr in rd_kafka_buf_s
000082F8 A7FA 0004               00000004  12216          AHI   15,4
000082FC B914 00FF                         12217          LGFR  15,15
00008300 E3F0 20A8 0024          000000A8  12218          STG   15,168(0,2) ; offset of rkbuf_totlen in rd_kafka_buf_s
                                           12219 * ***
                                           12220 * ***                   if (rkbuf->rkbuf_totlen < (4+2+2+4) + 2 ||
00008306 E559 20A8 000E          000000A8  12221          CLGHSI 168(2),14
0000830C 4740 C904               0000832E  12222          BL    @L1025
                                           12223 * ***                       rkbuf->rkbuf_totlen >
                                           12224 * ***                       (size_t)rk->rk_conf.recv_max_msg_size) {
00008310 E3F0 20A8 0004          000000A8  12225          LG    15,168(0,2) ; offset of rkbuf_totlen in rd_kafka_buf_s
00008316 E310 52FC 0014          000002FC  12226          LGF   1,764(0,5)
0000831C B921 00F1                         12227          CLGR  15,1
00008320 4720 C904               0000832E  12228          BH    *+14  Around region break
00008324 E3C0 C1DE 001A          00007C08  12229          ALGF  12,@lit_region_diff_1994_2_3
                                           12230          DROP  12
                        0000843C           12231          USING @REGION_1994_3,12
0000832A 47F0 C288               000086C4  12232          B     @L1023
                                           12233          DROP  12
                        00007A2A           12234          USING @REGION_1994_2,12
0000832E                                   12235 @L1024   DS    0H
                                           12236 * ***                           do { if (log_decode_errors > 0) { do {\
                                           12237 *  if (((!(rkbuf->rkbuf_rkb)))) rd_kafka_crash("C:\\asgkafka\\librdkaf\
                                           12238 * ka\\src\\rdkafka_mock.c",801, __FUNCTION__, (((void *)0)), "assert: \
                                           12239 * " "rkbuf->rkbuf_rkb"); } while (0); do { char _logname[256]; mtx_loc\
                                           12240 * k(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strlcpy(_logname, rkbuf\
                                           12241 * ->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_unlock(&(rkbuf->rkb\
                                           12242 * uf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf->rkbuf_rkb)->rkb_r\
                                           12243 * k->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_decode_errors,\
                                           12244 *  0x0, "PROTOERR", "Protocol parse failure for %s v%hd%s " "at %" "zu\
                                           12245 * " "/%" "zu" " (%s:%i) " "(incorrect broker.version.fallback?)", rd_k\
                                           12246 * afka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.Ap\
                                           12247 * iVersion, (rkbuf->rkbuf_flags&0x40? "(flex)":""), rd_slice_offset(&r\
                                           12248 * kbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)->end - (&rkbuf->rkbuf_r\
                                           12249 * eader)->start), __FUNCTION__, 801); } while (0); do { char _logname[\
                                           12250 * 256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_strlcpy(_l\
                                                                                                                           Page  249 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           12251 * ogname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname)); mtx_unlock\
                                           12252 * (&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&(rkbuf->rkbu\
                                           12253 * f_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_d\
                                           12254 * ecode_errors, 0x0, "PROTOERR", "Invalid request size %" "d" " from %\
                                           12255 * s", rkbuf->rkbuf_reqhdr.Size, rd_sockaddr2str( &mconn->peer, 0x1)); \
                                           12256 * } while (0); } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__BAD_MSG; goto\
                                           12257 *  err_parse; } while (0);
0000832E                                   12258 @L1025   DS    0H
0000832E 9500 D368      00000368 00000000  12259          CLI   872(13),0
00008332 4720 C916               00008340  12260          BH    *+14  Around region break
00008336 E3C0 C1DE 001A          00007C08  12261          ALGF  12,@lit_region_diff_1994_2_3
                                           12262          DROP  12
                        0000843C           12263          USING @REGION_1994_3,12
0000833C 47F0 C1E0               0000861C  12264          B     @L1028
                                           12265          DROP  12
                        00007A2A           12266          USING @REGION_1994_2,12
00008340                                   12267 @L1029   DS    0H
00008340 E3F0 2100 0002          00000100  12268          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008346 4770 C962               0000838C  12269          BNZ   @L1032
0000834A E3F0 C17E 0004          00007BA8  12270          LG    15,@lit_1994_397
00008350 4110 F0FA               000000FA  12271          LA    1,250(0,15)
00008354 E310 D370 0024          00000370  12272          STG   1,880(0,13)
0000835A E548 D378 0321          00000378  12273          MVGHI 888(13),801
00008360 E310 C176 0004          00007BA0  12274          LG    1,@lit_1994_398
00008366 4110 12AE               000002AE  12275          LA    1,686(0,1)
0000836A E310 D380 0024          00000380  12276          STG   1,896(0,13)
00008370 D707 D388 D388 00000388 00000388  12277          XC    904(8,13),904(13)
00008376 41F0 F1D2               000001D2  12278          LA    15,466(0,15)
0000837A E3F0 D390 0024          00000390  12279          STG   15,912(0,13)
00008380 4110 D370               00000370  12280          LA    1,880(0,13)
00008384 E3F0 C16E 0004          00007B98  12281          LG    15,@lit_1994_399 ; rd_kafka_crash
0000838A                                   12282 @@gen_label693 DS    0H
0000838A 05EF                              12283          BALR  14,15
0000838C                                   12284 @@gen_label694 DS    0H
0000838C                                   12285 @L1032   DS    0H
0000838C                                   12286 @L1033   DS    0H
0000838C E3F0 2100 0004          00000100  12287          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008392 A749 1638               00001638  12288          LGHI  4,5688      ; 5688
00008396 41F4 F000               00000000  12289          LA    15,0(4,15)
0000839A E3F0 D370 0024          00000370  12290          STG   15,880(0,13)
000083A0 4110 D370               00000370  12291          LA    1,880(0,13)
000083A4 E3F0 C18E 0004          00007BB8  12292          LG    15,@lit_1994_403 ; mtx_lock
000083AA                                   12293 @@gen_label695 DS    0H
000083AA 05EF                              12294          BALR  14,15
000083AC                                   12295 @@gen_label696 DS    0H
000083AC 41F0 D160               00000160  12296          LA    15,352(0,13)
000083B0 E3F0 D370 0024          00000370  12297          STG   15,880(0,13)
000083B6 E3F0 2100 0004          00000100  12298          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000083BC A719 1630               00001630  12299          LGHI  1,5680      ; 5680
000083C0 E3F1 F000 0004          00000000  12300          LG    15,0(1,15)
000083C6 E3F0 D378 0024          00000378  12301          STG   15,888(0,13)
000083CC E548 D380 0100          00000380  12302          MVGHI 896(13),256
                                                                                                                           Page  250 
  Active Usings: @REGION_1994_2,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000083D2 4110 D370               00000370  12303          LA    1,880(0,13)
000083D6 E3F0 C196 0004          00007BC0  12304          LG    15,@lit_1994_405 ; rd_strlcpy
000083DC                                   12305 @@gen_label697 DS    0H
000083DC 05EF                              12306          BALR  14,15
000083DE                                   12307 @@gen_label698 DS    0H
000083DE E3F0 2100 0004          00000100  12308          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000083E4 41F4 F000               00000000  12309          LA    15,0(4,15)
000083E8 E3F0 D370 0024          00000370  12310          STG   15,880(0,13)
000083EE 4110 D370               00000370  12311          LA    1,880(0,13)
000083F2 E3F0 C19E 0004          00007BC8  12312          LG    15,@lit_1994_407 ; mtx_unlock
000083F8                                   12313 @@gen_label699 DS    0H
000083F8 05EF                              12314          BALR  14,15
000083FA                                   12315 @@gen_label700 DS    0H
000083FA E3F0 20B8 0015          000000B8  12316          LGH   15,184(0,2)
00008400 E3F0 D370 0024          00000370  12317          STG   15,880(0,13)
00008406 4110 D370               00000370  12318          LA    1,880(0,13)
0000840A E3F0 C1A6 0004          00007BD0  12319          LG    15,@lit_1994_408 ; rd_kafka_ApiKey2str
00008410                                   12320 @@gen_label701 DS    0H
00008410 05EF                              12321          BALR  14,15
00008412                                   12322 @@gen_label702 DS    0H
00008412 B904 004F                         12323          LGR   4,15
00008416 9140 2023      00000023 00000040  12324          TM    35(2),64
0000841A 4770 C9FE               00008428  12325          BNZ   *+14  Around region break
0000841E E3C0 C1DE 001A          00007C08  12326          ALGF  12,@lit_region_diff_1994_2_3
                                           12327          DROP  12
                        0000843C           12328          USING @REGION_1994_3,12
00008424 47F0 C000               0000843C  12329          B     @L1036
                                           12330          DROP  12
                        00007A2A           12331          USING @REGION_1994_2,12
00008428 E3F0 C17E 0004          00007BA8  12332          LG    15,@lit_1994_397
0000842E 4150 F4A6               000004A6  12333          LA    5,1190(0,15)
00008432 E3C0 C1DE 001A          00007C08  12334          ALGF  12,@lit_region_diff_1994_2_3
                                           12335          DROP  12
                        0000843C           12336          USING @REGION_1994_3,12
00008438 47F0 C00A               00008446  12337          B     @L1037
                                           12338          DROP  12
                        00007A2A           12339          USING @REGION_1994_2,12
0000843C                                   12340 @REGION_1994_3 DS 0H
                                           12341          DROP  12
                        0000843C           12342          USING @REGION_1994_3,12
0000843C                                   12343 @L1036   DS    0H
0000843C E3F0 C1F4 0004          00008630  12344          LG    15,@lit_1994_472
00008442 4150 F4AE               000004AE  12345          LA    5,1198(0,15)
00008446                                   12346 @L1037   DS    0H
00008446 41F0 2078               00000078  12347          LA    15,120(0,2)
0000844A E3F0 D370 0024          00000370  12348          STG   15,880(0,13)
00008450 4110 D370               00000370  12349          LA    1,880(0,13)
00008454 E3F0 C1FC 0004          00008638  12350          LG    15,@lit_1994_473 ; rd_slice_offset
0000845A                                   12351 @@gen_label704 DS    0H
0000845A 05EF                              12352          BALR  14,15
0000845C                                   12353 @@gen_label705 DS    0H
0000845C E310 2100 0004          00000100  12354          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
                                                                                                                           Page  251 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008462 E310 1FD0 0004          00000FD0  12355          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00008468 4110 1210               00000210  12356          LA    1,528(0,1)
0000846C E310 D370 0024          00000370  12357          STG   1,880(0,13)
00008472 E310 2100 0004          00000100  12358          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008478 E310 1FD0 0004          00000FD0  12359          LG    1,4048(0,1)
0000847E E310 D378 0024          00000378  12360          STG   1,888(0,13)
00008484 4110 D160               00000160  12361          LA    1,352(0,13)
00008488 E310 D380 0024          00000380  12362          STG   1,896(0,13)
0000848E E310 D368 0094          00000368  12363          LLC   1,872(0,13) ; log_decode_errors
00008494 B914 0011                         12364          LGFR  1,1
00008498 E310 D388 0024          00000388  12365          STG   1,904(0,13)
0000849E D707 D390 D390 00000390 00000390  12366          XC    912(8,13),912(13)
000084A4 E310 C1F4 0004          00008630  12367          LG    1,@lit_1994_472
000084AA 4160 14B0               000004B0  12368          LA    6,1200(0,1)
000084AE E360 D398 0024          00000398  12369          STG   6,920(0,13)
000084B4 4110 14BA               000004BA  12370          LA    1,1210(0,1)
000084B8 E310 D3A0 0024          000003A0  12371          STG   1,928(0,13)
000084BE E340 D3A8 0024          000003A8  12372          STG   4,936(0,13)
000084C4 4810 20BA               000000BA  12373          LH    1,186(0,2)
000084C8 B914 0011                         12374          LGFR  1,1
000084CC E310 D3B0 0024          000003B0  12375          STG   1,944(0,13)
000084D2 E350 D3B8 0024          000003B8  12376          STG   5,952(0,13)
000084D8 E3F0 D3C0 0024          000003C0  12377          STG   15,960(0,13)
000084DE E3F0 2098 0004          00000098  12378          LG    15,152(0,2) ; offset of end in rd_slice_s
000084E4 E3F0 2090 000B          00000090  12379          SLG   15,144(0,2)
000084EA E3F0 D3C8 0024          000003C8  12380          STG   15,968(0,13)
000084F0 E3F0 C20C 0004          00008648  12381          LG    15,@lit_1994_475
000084F6 41F0 F2AE               000002AE  12382          LA    15,686(0,15)
000084FA E3F0 D3D0 0024          000003D0  12383          STG   15,976(0,13)
00008500 E548 D3D8 0321          000003D8  12384          MVGHI 984(13),801
00008506 4110 D370               00000370  12385          LA    1,880(0,13)
0000850A E3F0 C204 0004          00008640  12386          LG    15,@lit_1994_476 ; rd_kafka_log0
00008510                                   12387 @@gen_label706 DS    0H
00008510 05EF                              12388          BALR  14,15
00008512                                   12389 @@gen_label707 DS    0H
00008512                                   12390 @L1038   DS    0H
00008512 E3F0 2100 0004          00000100  12391          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008518 A749 1638               00001638  12392          LGHI  4,5688      ; 5688
0000851C 41F4 F000               00000000  12393          LA    15,0(4,15)
00008520 E3F0 D370 0024          00000370  12394          STG   15,880(0,13)
00008526 4110 D370               00000370  12395          LA    1,880(0,13)
0000852A E3F0 C214 0004          00008650  12396          LG    15,@lit_1994_478 ; mtx_lock
00008530                                   12397 @@gen_label708 DS    0H
00008530 05EF                              12398          BALR  14,15
00008532                                   12399 @@gen_label709 DS    0H
00008532 41F0 D160               00000160  12400          LA    15,352(0,13)
00008536 E3F0 D370 0024          00000370  12401          STG   15,880(0,13)
0000853C E3F0 2100 0004          00000100  12402          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008542 A719 1630               00001630  12403          LGHI  1,5680      ; 5680
00008546 E3F1 F000 0004          00000000  12404          LG    15,0(1,15)
0000854C E3F0 D378 0024          00000378  12405          STG   15,888(0,13)
00008552 E548 D380 0100          00000380  12406          MVGHI 896(13),256
                                                                                                                           Page  252 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008558 4110 D370               00000370  12407          LA    1,880(0,13)
0000855C E3F0 C21C 0004          00008658  12408          LG    15,@lit_1994_480 ; rd_strlcpy
00008562                                   12409 @@gen_label710 DS    0H
00008562 05EF                              12410          BALR  14,15
00008564                                   12411 @@gen_label711 DS    0H
00008564 E3F0 2100 0004          00000100  12412          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000856A 41F4 F000               00000000  12413          LA    15,0(4,15)
0000856E E3F0 D370 0024          00000370  12414          STG   15,880(0,13)
00008574 4110 D370               00000370  12415          LA    1,880(0,13)
00008578 E3F0 C224 0004          00008660  12416          LG    15,@lit_1994_482 ; mtx_unlock
0000857E                                   12417 @@gen_label712 DS    0H
0000857E 05EF                              12418          BALR  14,15
00008580                                   12419 @@gen_label713 DS    0H
00008580 41F0 3098               00000098  12420          LA    15,152(0,3)
00008584 E3F0 D370 0024          00000370  12421          STG   15,880(0,13)
0000858A E548 D378 0001          00000378  12422          MVGHI 888(13),1
00008590 4110 D370               00000370  12423          LA    1,880(0,13)
00008594 E3F0 C22C 0004          00008668  12424          LG    15,@lit_1994_483 ; rd_sockaddr2str
0000859A                                   12425 @@gen_label714 DS    0H
0000859A 05EF                              12426          BALR  14,15
0000859C                                   12427 @@gen_label715 DS    0H
0000859C E310 2100 0004          00000100  12428          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000085A2 E310 1FD0 0004          00000FD0  12429          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
000085A8 4110 1210               00000210  12430          LA    1,528(0,1)
000085AC E310 D370 0024          00000370  12431          STG   1,880(0,13)
000085B2 E310 2100 0004          00000100  12432          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000085B8 E310 1FD0 0004          00000FD0  12433          LG    1,4048(0,1)
000085BE E310 D378 0024          00000378  12434          STG   1,888(0,13)
000085C4 4110 D160               00000160  12435          LA    1,352(0,13)
000085C8 E310 D380 0024          00000380  12436          STG   1,896(0,13)
000085CE E310 D368 0094          00000368  12437          LLC   1,872(0,13) ; log_decode_errors
000085D4 B914 0011                         12438          LGFR  1,1
000085D8 E310 D388 0024          00000388  12439          STG   1,904(0,13)
000085DE D707 D390 D390 00000390 00000390  12440          XC    912(8,13),912(13)
000085E4 E310 C1F4 0004          00008630  12441          LG    1,@lit_1994_472
000085EA 4130 14B0               000004B0  12442          LA    3,1200(0,1)
000085EE E330 D398 0024          00000398  12443          STG   3,920(0,13)
000085F4 4110 1534               00000534  12444          LA    1,1332(0,1)
000085F8 E310 D3A0 0024          000003A0  12445          STG   1,928(0,13)
000085FE E310 20B4 0014          000000B4  12446          LGF   1,180(0,2)
00008604 E310 D3A8 0024          000003A8  12447          STG   1,936(0,13)
0000860A E3F0 D3B0 0024          000003B0  12448          STG   15,944(0,13)
00008610 4110 D370               00000370  12449          LA    1,880(0,13)
00008614 E3F0 C204 0004          00008640  12450          LG    15,@lit_1994_476 ; rd_kafka_log0
0000861A                                   12451 @@gen_label716 DS    0H
0000861A 05EF                              12452          BALR  14,15
0000861C                                   12453 @@gen_label717 DS    0H
0000861C                                   12454 @L1028   DS    0H
0000861C E54C 2188 FF39          00000188  12455          MVHI  392(2),-199 ; offset of rkbuf_err in rd_kafka_buf_s
00008622 E3C0 C234 001A          00008670  12456          ALGF  12,@lit_region_diff_1994_3_5
                                           12457          DROP  12
                        000097EA           12458          USING @REGION_1994_5,12
                                                                                                                           Page  253 
  Active Usings: @REGION_1994_5,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008628 47F0 C140               0000992A  12459          B     @_err_parse@1994@2
                                           12460          DROP  12
                        0000843C           12461          USING @REGION_1994_3,12
00008630                                   12462          DS    0D
00008630 0000000000010840                  12463 @lit_1994_472 DC AD(@strings@)
00008638 0000000000001258                  12464 @lit_1994_473 DC AD(rd_slice_offset)
00008640 0000000000000000                  12465 @lit_1994_476 DC AD(rd_kafka_log0)
00008648 0000000000010480                  12466 @lit_1994_475 DC AD(@DATA)
00008650 0000000000000000                  12467 @lit_1994_478 DC AD(mtx_lock)
00008658 00000000000019F8                  12468 @lit_1994_480 DC AD(rd_strlcpy)
00008660 0000000000000000                  12469 @lit_1994_482 DC AD(mtx_unlock)
00008668 0000000000000000                  12470 @lit_1994_483 DC AD(rd_sockaddr2str)
00008670 000013AE                          12471 @lit_region_diff_1994_3_5  DC A(@REGION_1994_5-@REGION_1994_3)
00008674 00000000
00008678 0000000000000000                  12472 @lit_1994_488 DC AD(rd_buf_write_ensure)
00008680 0000000000001130                  12473 @lit_1994_490 DC AD(rd_buf_len)
00008688 0000000000000000                  12474 @lit_1994_491 DC AD(rd_slice_init)
00008690 0000000000000000                  12475 @lit_1994_493 DC AD(rd_slice_read)
00008698 00000000000011B0                  12476 @lit_1994_494 DC AD(rd_slice_abs_offset)
000086A0 0000000000000000                  12477 @lit_1994_497 DC AD(rd_kafka_crash)
000086A8 0000000000000000                  12478 @lit_1994_499 DC AD(snprintf)
000086B0 0000000000001310                  12479 @lit_1994_506 DC AD(rd_kafka_$Api$Key2str)
000086B8 0000000000000000                  12480 @lit_1994_534 DC AD(rd_slice_read_uvarint)
000086C0 00000A0A                          12481 @lit_region_diff_1994_3_4  DC A(@REGION_1994_4-@REGION_1994_3)
                                           12482 * ***   # 809 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           12483 * ***                           ((!*"/* NOTREACHED */ violated") ? (vo\
                                           12484 * id)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mo\
                                           12485 * ck.c", 809, "!*\"/* NOTREACHED */ violated\""));
                                           12486 * ***                   }
000086C4                                   12487 @L1023   DS    0H
                                           12488 * ***
                                           12489 * ***
                                           12490 * ***                   rkbuf->rkbuf_totlen -= (4+2+2+4);
000086C4 E3F0 20A8 0004          000000A8  12491          LG    15,168(0,2)
000086CA A7FB FFF4               0000FFF4  12492          AGHI  15,-12
000086CE E3F0 20A8 0024          000000A8  12493          STG   15,168(0,2)
                                           12494 * ***
                                           12495 * ***                   if (!rkbuf->rkbuf_totlen) {
000086D4 B902 00FF                         12496          LTGR  15,15
000086D8 4770 C2C4               00008700  12497          BNZ   @L1043
                                           12498 * ***
                                           12499 * ***                           *rkbufp = rkbuf;
000086DC E3F0 7008 0004          00000008  12500          LG    15,8(0,7)   ; rkbufp
000086E2 E320 F000 0024          00000000  12501          STG   2,0(0,15)   ; rkbufp
                                           12502 * ***                           mconn->rxbuf = ((void *)0);
000086E8 A7F9 0000               00000000  12503          LGHI  15,0        ; 0
000086EC E3F0 3018 0024          00000018  12504          STG   15,24(0,3)  ; offset of rxbuf in rd_kafka_mock_connectio*
                                                                n_s
                                           12505 * ***                           return 1;
000086F2 A7F9 0001               00000001  12506          LGHI  15,1        ; 1
000086F6 E3C0 C234 001A          00008670  12507          ALGF  12,@lit_region_diff_1994_3_5
                                           12508          DROP  12
                                                                                                                           Page  254 
  Active Usings: @REGION_1994_5,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                        000097EA           12509          USING @REGION_1994_5,12
000086FC 47F0 C144               0000992E  12510          B     @ret_lab_1994
                                           12511          DROP  12
                        0000843C           12512          USING @REGION_1994_3,12
                                           12513 * ***                   }
00008700                                   12514 @L1043   DS    0H
                                           12515 * ***
                                           12516 * ***
                                           12517 * ***                   rd_buf_write_ensure(&rkbuf->rkbuf_buf,
                                           12518 * ***                                       rkbuf->rkbuf_totlen,
                                           12519 * ***                                       rkbuf->rkbuf_totlen);
00008700 41F0 2028               00000028  12520          LA    15,40(0,2)
00008704 E3F0 D370 0024          00000370  12521          STG   15,880(0,13)
0000870A E3F0 20A8 0004          000000A8  12522          LG    15,168(0,2)
00008710 E3F0 D378 0024          00000378  12523          STG   15,888(0,13)
00008716 E3F0 20A8 0004          000000A8  12524          LG    15,168(0,2)
0000871C E3F0 D380 0024          00000380  12525          STG   15,896(0,13)
00008722 4110 D370               00000370  12526          LA    1,880(0,13)
00008726 E3F0 C23C 0004          00008678  12527          LG    15,@lit_1994_488 ; rd_buf_write_ensure
0000872C                                   12528 @@gen_label719 DS    0H
0000872C 05EF                              12529          BALR  14,15
0000872E                                   12530 @@gen_label720 DS    0H
                                           12531 * ***
                                           12532 * ***           } else if (rd_buf_write_pos(&rkbuf->rkbuf_buf) -
0000872E E3C0 C234 001A          00008670  12533          ALGF  12,@lit_region_diff_1994_3_5
                                           12534          DROP  12
                        000097EA           12535          USING @REGION_1994_5,12
00008734 47F0 C138               00009922  12536          B     @L1044
                                           12537          DROP  12
                        0000843C           12538          USING @REGION_1994_3,12
00008738                                   12539 @L901    DS    0H
00008738 41F0 2028               00000028  12540          LA    15,40(0,2)
0000873C E3F0 D370 0024          00000370  12541          STG   15,880(0,13)
00008742 4110 D370               00000370  12542          LA    1,880(0,13)
00008746 B904 00F6                         12543          LGR   15,6
0000874A                                   12544 @@gen_label721 DS    0H
0000874A 05EF                              12545          BALR  14,15
0000874C                                   12546 @@gen_label722 DS    0H
                                           12547 * ***                      (4+2+2+4) == rkbuf->rkbuf_totlen) {
0000874C A7FB FFF4               0000FFF4  12548          AGHI  15,-12
00008750 E3F0 20A8 0021          000000A8  12549          CLG   15,168(0,2)
00008756 4780 C328               00008764  12550          BE    *+14  Around region break
0000875A E3C0 C234 001A          00008670  12551          ALGF  12,@lit_region_diff_1994_3_5
                                           12552          DROP  12
                        000097EA           12553          USING @REGION_1994_5,12
00008760 47F0 C138               00009922  12554          B     @L1044
                                           12555          DROP  12
                        0000843C           12556          USING @REGION_1994_3,12
                                           12557 * ***
                                           12558 * ***
                                           12559 * ***
                                           12560 * ***
                                                                                                                           Page  255 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           12561 * ***                   rd_slice_init(&rkbuf->rkbuf_reader, &rkbuf->rk\
                                           12562 * buf_buf,
                                           12563 * ***                                 (4+2+2+4),
                                           12564 * ***                                 rd_buf_len(&rkbuf->rkbuf_buf) -
00008764 41F0 2028               00000028  12565          LA    15,40(0,2)
00008768 E3F0 D370 0024          00000370  12566          STG   15,880(0,13)
0000876E 4110 D370               00000370  12567          LA    1,880(0,13)
00008772 E3F0 C244 0004          00008680  12568          LG    15,@lit_1994_490 ; rd_buf_len
00008778                                   12569 @@gen_label724 DS    0H
00008778 05EF                              12570          BALR  14,15
0000877A                                   12571 @@gen_label725 DS    0H
                                           12572 * ***                                 (4+2+2+4));
0000877A A7FB FFF4               0000FFF4  12573          AGHI  15,-12
0000877E 4110 2078               00000078  12574          LA    1,120(0,2)
00008782 E310 D370 0024          00000370  12575          STG   1,880(0,13)
00008788 4110 2028               00000028  12576          LA    1,40(0,2)
0000878C E310 D378 0024          00000378  12577          STG   1,888(0,13)
00008792 E548 D380 000C          00000380  12578          MVGHI 896(13),12
00008798 E3F0 D388 0024          00000388  12579          STG   15,904(0,13)
0000879E 4110 D370               00000370  12580          LA    1,880(0,13)
000087A2 E3F0 C24C 0004          00008688  12581          LG    15,@lit_1994_491 ; rd_slice_init
000087A8                                   12582 @@gen_label726 DS    0H
000087A8 05EF                              12583          BALR  14,15
000087AA                                   12584 @@gen_label727 DS    0H
                                           12585 * ***
                                           12586 * ***
                                           12587 * ***                   do { int16_t _slen; do { int16_t _v; do { size\
                                           12588 * _t __len2 = (size_t)(sizeof(_v)); if (!rd_slice_read(&(rkbuf)->rkbuf\
                                           12589 * _reader, &_v, __len2)) do { size_t __len0 = (size_t)(__len2); if (((\
                                           12590 * __len0 > ((&(rkbuf)->rkbuf_reader)->end - rd_slice_abs_offset(&(rkbu\
                                           12591 * f)->rkbuf_reader))))) { do { if (log_decode_errors > 0) { do { if ((\
                                           12592 * (!(rkbuf->rkbuf_rkb)))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\sr\
                                           12593 * c\\rdkafka_mock.c",839, __FUNCTION__, (((void *)0)), "assert: " "rkb\
                                           12594 * uf->rkbuf_rkb"); } while (0); char __tmpstr[256]; snprintf(__tmpstr,\
                                           12595 *  sizeof(__tmpstr), ": "); if (__strlen(__tmpstr) == 2) __tmpstr[0] =\
                                           12596 *  '\0'; do { char _logname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_lo\
                                           12597 * gname_lock); rd_strlcpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, siz\
                                           12598 * eof(_logname)); mtx_unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); r\
                                           12599 * d_kafka_log0(&(rkbuf->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb\
                                           12600 * )->rkb_rk, _logname, log_decode_errors, 0x0, "PROTOUFLOW", "Protocol\
                                           12601 *  read buffer underflow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:\
                                           12602 * %i): " "expected %" "zu" " bytes > " "%" "zu" " remaining bytes (%s)\
                                           12603 * %s", rd_kafka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_\
                                           12604 * reqhdr.ApiVersion, rd_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->\
                                           12605 * rkbuf_reader)->end - (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 8\
                                           12606 * 39, __len0, ((&rkbuf->rkbuf_reader)->end - rd_slice_abs_offset(&rkbu\
                                           12607 * f->rkbuf_reader)), rkbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflo\
                                           12608 * w_mitigation : "incorrect broker.version.fallback?", __tmpstr); } wh\
                                           12609 * ile (0); } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto e\
                                           12610 * rr_parse; } while (0); } } while (0); } while (0); *(&_slen) = (int1\
                                           12611 * 6_t)(_v); } while (0); do { size_t __len1 = (size_t)(((_slen) == -1 \
                                           12612 * ? 0 : (_slen))); if (__len1 && !rd_slice_read(&(rkbuf)->rkbuf_reader\
                                                                                                                           Page  256 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           12613 * , ((void *)0), __len1)) do { size_t __len0 = (size_t)(__len1); if ((\
                                           12614 * (__len0 > ((&(rkbuf)->rkbuf_reader)->end - rd_slice_abs_offset(&(rkb\
                                           12615 * uf)->rkbuf_reader))))) { do { if (log_decode_errors > 0) { do { if (\
                                           12616 * ((!(rkbuf->rkbuf_rkb)))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\s\
                                           12617 * rc\\rdkafka_mock.c",839, __FUNCTION__, (((void *)0)), "assert: " "rk\
                                           12618 * buf->rkbuf_rkb"); } while (0); char __tmpstr[256]; snprintf(__tmpstr\
                                           12619 * , sizeof(__tmpstr), ": "); if (__strlen(__tmpstr) == 2) __tmpstr[0] \
                                           12620 * = '\0'; do { char _logname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_l\
                                           12621 * ogname_lock); rd_strlcpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, si\
                                           12622 * zeof(_logname)); mtx_unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); \
                                           12623 * rd_kafka_log0(&(rkbuf->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rk\
                                           12624 * b)->rkb_rk, _logname, log_decode_errors, 0x0, "PROTOUFLOW", "Protoco\
                                           12625 * l read buffer underflow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s\
                                           12626 * :%i): " "expected %" "zu" " bytes > " "%" "zu" " remaining bytes (%s\
                                           12627 * )%s", rd_kafka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf\
                                           12628 * _reqhdr.ApiVersion, rd_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf-\
                                           12629 * >rkbuf_reader)->end - (&rkbuf->rkbuf_reader)->start), __FUNCTION__, \
                                           12630 * 839, __len0, ((&rkbuf->rkbuf_reader)->end - rd_slice_abs_offset(&rkb\
                                           12631 * uf->rkbuf_reader)), rkbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_ufl\
                                           12632 * ow_mitigation : "incorrect broker.version.fallback?", __tmpstr); } w\
                                           12633 * hile (0); } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto \
                                           12634 * err_parse; } while (0); } } while (0); } while (0); } while (0);
000087AA                                   12635 @L1046   DS    0H
000087AA                                   12636 @L1049   DS    0H
000087AA                                   12637 @L1052   DS    0H
000087AA A749 0002               00000002  12638          LGHI  4,2         ; 2
000087AE 41F0 2078               00000078  12639          LA    15,120(0,2)
000087B2 E3F0 D370 0024          00000370  12640          STG   15,880(0,13)
000087B8 41F0 D0B6               000000B6  12641          LA    15,182(0,13)
000087BC E3F0 D378 0024          00000378  12642          STG   15,888(0,13)
000087C2 E340 D380 0024          00000380  12643          STG   4,896(0,13)
000087C8 4110 D370               00000370  12644          LA    1,880(0,13)
000087CC E3F0 C254 0004          00008690  12645          LG    15,@lit_1994_493 ; rd_slice_read
000087D2                                   12646 @@gen_label728 DS    0H
000087D2 05EF                              12647          BALR  14,15
000087D4                                   12648 @@gen_label729 DS    0H
000087D4 B902 00FF                         12649          LTGR  15,15
000087D8 4770 C62A               00008A66  12650          BNZ   @L1055
000087DC                                   12651 @L1056   DS    0H
000087DC E350 2098 0004          00000098  12652          LG    5,152(0,2)  ; offset of end in rd_slice_s
000087E2 41F0 2078               00000078  12653          LA    15,120(0,2)
000087E6 E3F0 D370 0024          00000370  12654          STG   15,880(0,13)
000087EC 4110 D370               00000370  12655          LA    1,880(0,13)
000087F0 E3F0 C25C 0004          00008698  12656          LG    15,@lit_1994_494 ; rd_slice_abs_offset
000087F6                                   12657 @@gen_label731 DS    0H
000087F6 05EF                              12658          BALR  14,15
000087F8                                   12659 @@gen_label732 DS    0H
000087F8 B90B 005F                         12660          SLGR  5,15
000087FC B921 0045                         12661          CLGR  4,5
00008800 47D0 C62A               00008A66  12662          BNH   @L1059
00008804                                   12663 @L1060   DS    0H
00008804 9500 D368      00000368 00000000  12664          CLI   872(13),0
                                                                                                                           Page  257 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008808 47D0 C61A               00008A56  12665          BNH   @L1063
0000880C                                   12666 @L1064   DS    0H
0000880C E3F0 2100 0002          00000100  12667          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008812 4770 C41C               00008858  12668          BNZ   @L1067
00008816 E3F0 C1F4 0004          00008630  12669          LG    15,@lit_1994_472
0000881C 4110 F0FA               000000FA  12670          LA    1,250(0,15)
00008820 E310 D370 0024          00000370  12671          STG   1,880(0,13)
00008826 E548 D378 0347          00000378  12672          MVGHI 888(13),839
0000882C E310 C20C 0004          00008648  12673          LG    1,@lit_1994_475
00008832 4110 12AE               000002AE  12674          LA    1,686(0,1)
00008836 E310 D380 0024          00000380  12675          STG   1,896(0,13)
0000883C D707 D388 D388 00000388 00000388  12676          XC    904(8,13),904(13)
00008842 41F0 F1D2               000001D2  12677          LA    15,466(0,15)
00008846 E3F0 D390 0024          00000390  12678          STG   15,912(0,13)
0000884C 4110 D370               00000370  12679          LA    1,880(0,13)
00008850 E3F0 C264 0004          000086A0  12680          LG    15,@lit_1994_497 ; rd_kafka_crash
00008856                                   12681 @@gen_label736 DS    0H
00008856 05EF                              12682          BALR  14,15
00008858                                   12683 @@gen_label737 DS    0H
00008858                                   12684 @L1067   DS    0H
00008858 41F0 D160               00000160  12685          LA    15,352(0,13)
0000885C E3F0 D370 0024          00000370  12686          STG   15,880(0,13)
00008862 E548 D378 0100          00000378  12687          MVGHI 888(13),256
00008868 E3F0 C1F4 0004          00008630  12688          LG    15,@lit_1994_472
0000886E 41F0 F1EC               000001EC  12689          LA    15,492(0,15)
00008872 E3F0 D380 0024          00000380  12690          STG   15,896(0,13)
00008878 4110 D370               00000370  12691          LA    1,880(0,13)
0000887C E3F0 C26C 0004          000086A8  12692          LG    15,@lit_1994_499 ; snprintf
00008882                                   12693 @@gen_label738 DS    0H
00008882 05EF                              12694          BALR  14,15
00008884                                   12695 @@gen_label739 DS    0H
00008884 41F0 D160               00000160  12696          LA    15,352(0,13)
00008888 B904 001F                         12697          LGR   1,15
0000888C A709 0000               00000000  12698          LGHI  0,0
00008890                                   12699 @@gen_label740 DS 0H
00008890 B25E 000F                         12700          SRST  0,15
00008894 4710 C454               00008890  12701          BC  1,@@gen_label740
00008898 B90B 0001                         12702          SLGR  0,1
0000889C A70F 0002               00000002  12703          CGHI  0,2
000088A0 4770 C46C               000088A8  12704          BNE   @L1069
000088A4 9200 D160      00000160 00000000  12705          MVI   352(13),0
000088A8                                   12706 @L1068   DS    0H
000088A8                                   12707 @L1069   DS    0H
000088A8 E3F0 2100 0004          00000100  12708          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000088AE A739 1638               00001638  12709          LGHI  3,5688      ; 5688
000088B2 41F3 F000               00000000  12710          LA    15,0(3,15)
000088B6 E3F0 D370 0024          00000370  12711          STG   15,880(0,13)
000088BC 4110 D370               00000370  12712          LA    1,880(0,13)
000088C0 E3F0 C214 0004          00008650  12713          LG    15,@lit_1994_478 ; mtx_lock
000088C6                                   12714 @@gen_label742 DS    0H
000088C6 05EF                              12715          BALR  14,15
000088C8                                   12716 @@gen_label743 DS    0H
                                                                                                                           Page  258 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000088C8 41F0 D260               00000260  12717          LA    15,608(0,13)
000088CC E3F0 D370 0024          00000370  12718          STG   15,880(0,13)
000088D2 E3F0 2100 0004          00000100  12719          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000088D8 A719 1630               00001630  12720          LGHI  1,5680      ; 5680
000088DC E3F1 F000 0004          00000000  12721          LG    15,0(1,15)
000088E2 E3F0 D378 0024          00000378  12722          STG   15,888(0,13)
000088E8 E548 D380 0100          00000380  12723          MVGHI 896(13),256
000088EE 4110 D370               00000370  12724          LA    1,880(0,13)
000088F2 E3F0 C21C 0004          00008658  12725          LG    15,@lit_1994_480 ; rd_strlcpy
000088F8                                   12726 @@gen_label744 DS    0H
000088F8 05EF                              12727          BALR  14,15
000088FA                                   12728 @@gen_label745 DS    0H
000088FA E3F0 2100 0004          00000100  12729          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008900 41F3 F000               00000000  12730          LA    15,0(3,15)
00008904 E3F0 D370 0024          00000370  12731          STG   15,880(0,13)
0000890A 4110 D370               00000370  12732          LA    1,880(0,13)
0000890E E3F0 C224 0004          00008660  12733          LG    15,@lit_1994_482 ; mtx_unlock
00008914                                   12734 @@gen_label746 DS    0H
00008914 05EF                              12735          BALR  14,15
00008916                                   12736 @@gen_label747 DS    0H
00008916 E3F0 20B8 0015          000000B8  12737          LGH   15,184(0,2)
0000891C E3F0 D370 0024          00000370  12738          STG   15,880(0,13)
00008922 4110 D370               00000370  12739          LA    1,880(0,13)
00008926 E3F0 C274 0004          000086B0  12740          LG    15,@lit_1994_506 ; rd_kafka_ApiKey2str
0000892C                                   12741 @@gen_label748 DS    0H
0000892C 05EF                              12742          BALR  14,15
0000892E                                   12743 @@gen_label749 DS    0H
0000892E B904 003F                         12744          LGR   3,15
00008932 41F0 2078               00000078  12745          LA    15,120(0,2)
00008936 E3F0 D370 0024          00000370  12746          STG   15,880(0,13)
0000893C 4110 D370               00000370  12747          LA    1,880(0,13)
00008940 E3F0 C1FC 0004          00008638  12748          LG    15,@lit_1994_473 ; rd_slice_offset
00008946                                   12749 @@gen_label750 DS    0H
00008946 05EF                              12750          BALR  14,15
00008948                                   12751 @@gen_label751 DS    0H
00008948 B904 005F                         12752          LGR   5,15
0000894C E360 2098 0004          00000098  12753          LG    6,152(0,2)  ; offset of end in rd_slice_s
00008952 41F0 2078               00000078  12754          LA    15,120(0,2)
00008956 E3F0 D370 0024          00000370  12755          STG   15,880(0,13)
0000895C 4110 D370               00000370  12756          LA    1,880(0,13)
00008960 E3F0 C25C 0004          00008698  12757          LG    15,@lit_1994_494 ; rd_slice_abs_offset
00008966                                   12758 @@gen_label752 DS    0H
00008966 05EF                              12759          BALR  14,15
00008968                                   12760 @@gen_label753 DS    0H
00008968 B90B 006F                         12761          SLGR  6,15
0000896C E3F0 21E8 0002          000001E8  12762          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00008972 4780 C544               00008980  12763          BZ    @L1072
00008976 E3F0 21E8 0004          000001E8  12764          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
0000897C 47F0 C54E               0000898A  12765          B     @L1073
00008980                                   12766 @L1072   DS    0H
                                                                                                                           Page  259 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008980 E3F0 C1F4 0004          00008630  12767          LG    15,@lit_1994_472
00008986 41F0 F1F0               000001F0  12768          LA    15,496(0,15)
0000898A                                   12769 @L1073   DS    0H
0000898A E310 2100 0004          00000100  12770          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008990 E310 1FD0 0004          00000FD0  12771          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00008996 4110 1210               00000210  12772          LA    1,528(0,1)
0000899A E310 D370 0024          00000370  12773          STG   1,880(0,13)
000089A0 E310 2100 0004          00000100  12774          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000089A6 E310 1FD0 0004          00000FD0  12775          LG    1,4048(0,1)
000089AC E310 D378 0024          00000378  12776          STG   1,888(0,13)
000089B2 4110 D260               00000260  12777          LA    1,608(0,13)
000089B6 E310 D380 0024          00000380  12778          STG   1,896(0,13)
000089BC E310 D368 0094          00000368  12779          LLC   1,872(0,13) ; log_decode_errors
000089C2 B914 0011                         12780          LGFR  1,1
000089C6 E310 D388 0024          00000388  12781          STG   1,904(0,13)
000089CC D707 D390 D390 00000390 00000390  12782          XC    912(8,13),912(13)
000089D2 E310 C1F4 0004          00008630  12783          LG    1,@lit_1994_472
000089D8 4170 1214               00000214  12784          LA    7,532(0,1)
000089DC E370 D398 0024          00000398  12785          STG   7,920(0,13)
000089E2 4110 1220               00000220  12786          LA    1,544(0,1)
000089E6 E310 D3A0 0024          000003A0  12787          STG   1,928(0,13)
000089EC E330 D3A8 0024          000003A8  12788          STG   3,936(0,13)
000089F2 4810 20BA               000000BA  12789          LH    1,186(0,2)
000089F6 B914 0011                         12790          LGFR  1,1
000089FA E310 D3B0 0024          000003B0  12791          STG   1,944(0,13)
00008A00 E350 D3B8 0024          000003B8  12792          STG   5,952(0,13)
00008A06 E310 2098 0004          00000098  12793          LG    1,152(0,2)  ; offset of end in rd_slice_s
00008A0C E310 2090 000B          00000090  12794          SLG   1,144(0,2)
00008A12 E310 D3C0 0024          000003C0  12795          STG   1,960(0,13)
00008A18 E310 C20C 0004          00008648  12796          LG    1,@lit_1994_475
00008A1E 4110 12AE               000002AE  12797          LA    1,686(0,1)
00008A22 E310 D3C8 0024          000003C8  12798          STG   1,968(0,13)
00008A28 E548 D3D0 0347          000003D0  12799          MVGHI 976(13),839
00008A2E E340 D3D8 0024          000003D8  12800          STG   4,984(0,13)
00008A34 E360 D3E0 0024          000003E0  12801          STG   6,992(0,13)
00008A3A E3F0 D3E8 0024          000003E8  12802          STG   15,1000(0,13)
00008A40 41F0 D160               00000160  12803          LA    15,352(0,13)
00008A44 E3F0 D3F0 0024          000003F0  12804          STG   15,1008(0,13)
00008A4A 4110 D370               00000370  12805          LA    1,880(0,13)
00008A4E E3F0 C204 0004          00008640  12806          LG    15,@lit_1994_476 ; rd_kafka_log0
00008A54                                   12807 @@gen_label755 DS    0H
00008A54 05EF                              12808          BALR  14,15
00008A56                                   12809 @@gen_label756 DS    0H
00008A56                                   12810 @L1063   DS    0H
00008A56 E54C 2188 FF65          00000188  12811          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
00008A5C E3C0 C234 001A          00008670  12812          ALGF  12,@lit_region_diff_1994_3_5
                                           12813          DROP  12
                        000097EA           12814          USING @REGION_1994_5,12
00008A62 47F0 C140               0000992A  12815          B     @_err_parse@1994@2
                                           12816          DROP  12
                        0000843C           12817          USING @REGION_1994_3,12
00008A66                                   12818 @L1059   DS    0H
                                                                                                                           Page  260 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008A66                                   12819 @L1055   DS    0H
00008A66 D201 D0B4 D0B6 000000B4 000000B6  12820          MVC   180(2,13),182(13)
00008A6C                                   12821 @L1074   DS    0H
00008A6C 48F0 D0B4               000000B4  12822          LH    15,180(0,13) ; _slen
00008A70 A7FE FFFF               0000FFFF  12823          CHI   15,-1
00008A74 4770 C644               00008A80  12824          BNE   @L1077
00008A78 A7F8 0000               00000000  12825          LHI   15,0        ; 0
00008A7C 47F0 C648               00008A84  12826          B     @L1078
00008A80                                   12827 @L1077   DS    0H
00008A80 48F0 D0B4               000000B4  12828          LH    15,180(0,13) ; _slen
00008A84                                   12829 @L1078   DS    0H
00008A84 B914 004F                         12830          LGFR  4,15
00008A88 B902 00F4                         12831          LTGR  15,4
00008A8C 4780 C908               00008D44  12832          BZ    @L1079
00008A90 41F0 2078               00000078  12833          LA    15,120(0,2)
00008A94 E3F0 D370 0024          00000370  12834          STG   15,880(0,13)
00008A9A D707 D378 D378 00000378 00000378  12835          XC    888(8,13),888(13)
00008AA0 E340 D380 0024          00000380  12836          STG   4,896(0,13)
00008AA6 4110 D370               00000370  12837          LA    1,880(0,13)
00008AAA E3F0 C254 0004          00008690  12838          LG    15,@lit_1994_493 ; rd_slice_read
00008AB0                                   12839 @@gen_label759 DS    0H
00008AB0 05EF                              12840          BALR  14,15
00008AB2                                   12841 @@gen_label760 DS    0H
00008AB2 B902 00FF                         12842          LTGR  15,15
00008AB6 4770 C908               00008D44  12843          BNZ   @L1079
00008ABA                                   12844 @L1080   DS    0H
00008ABA E350 2098 0004          00000098  12845          LG    5,152(0,2)  ; offset of end in rd_slice_s
00008AC0 41F0 2078               00000078  12846          LA    15,120(0,2)
00008AC4 E3F0 D370 0024          00000370  12847          STG   15,880(0,13)
00008ACA 4110 D370               00000370  12848          LA    1,880(0,13)
00008ACE E3F0 C25C 0004          00008698  12849          LG    15,@lit_1994_494 ; rd_slice_abs_offset
00008AD4                                   12850 @@gen_label762 DS    0H
00008AD4 05EF                              12851          BALR  14,15
00008AD6                                   12852 @@gen_label763 DS    0H
00008AD6 B90B 005F                         12853          SLGR  5,15
00008ADA B921 0045                         12854          CLGR  4,5
00008ADE 47D0 C908               00008D44  12855          BNH   @L1083
00008AE2                                   12856 @L1084   DS    0H
00008AE2 9500 D368      00000368 00000000  12857          CLI   872(13),0
00008AE6 47D0 C8F8               00008D34  12858          BNH   @L1087
00008AEA                                   12859 @L1088   DS    0H
00008AEA E3F0 2100 0002          00000100  12860          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008AF0 4770 C6FA               00008B36  12861          BNZ   @L1091
00008AF4 E3F0 C1F4 0004          00008630  12862          LG    15,@lit_1994_472
00008AFA 4110 F0FA               000000FA  12863          LA    1,250(0,15)
00008AFE E310 D370 0024          00000370  12864          STG   1,880(0,13)
00008B04 E548 D378 0347          00000378  12865          MVGHI 888(13),839
00008B0A E310 C20C 0004          00008648  12866          LG    1,@lit_1994_475
00008B10 4110 12AE               000002AE  12867          LA    1,686(0,1)
00008B14 E310 D380 0024          00000380  12868          STG   1,896(0,13)
00008B1A D707 D388 D388 00000388 00000388  12869          XC    904(8,13),904(13)
00008B20 41F0 F1D2               000001D2  12870          LA    15,466(0,15)
                                                                                                                           Page  261 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008B24 E3F0 D390 0024          00000390  12871          STG   15,912(0,13)
00008B2A 4110 D370               00000370  12872          LA    1,880(0,13)
00008B2E E3F0 C264 0004          000086A0  12873          LG    15,@lit_1994_497 ; rd_kafka_crash
00008B34                                   12874 @@gen_label767 DS    0H
00008B34 05EF                              12875          BALR  14,15
00008B36                                   12876 @@gen_label768 DS    0H
00008B36                                   12877 @L1091   DS    0H
00008B36 41F0 D160               00000160  12878          LA    15,352(0,13)
00008B3A E3F0 D370 0024          00000370  12879          STG   15,880(0,13)
00008B40 E548 D378 0100          00000378  12880          MVGHI 888(13),256
00008B46 E3F0 C1F4 0004          00008630  12881          LG    15,@lit_1994_472
00008B4C 41F0 F1EC               000001EC  12882          LA    15,492(0,15)
00008B50 E3F0 D380 0024          00000380  12883          STG   15,896(0,13)
00008B56 4110 D370               00000370  12884          LA    1,880(0,13)
00008B5A E3F0 C26C 0004          000086A8  12885          LG    15,@lit_1994_499 ; snprintf
00008B60                                   12886 @@gen_label769 DS    0H
00008B60 05EF                              12887          BALR  14,15
00008B62                                   12888 @@gen_label770 DS    0H
00008B62 41F0 D160               00000160  12889          LA    15,352(0,13)
00008B66 B904 001F                         12890          LGR   1,15
00008B6A A709 0000               00000000  12891          LGHI  0,0
00008B6E                                   12892 @@gen_label771 DS 0H
00008B6E B25E 000F                         12893          SRST  0,15
00008B72 4710 C732               00008B6E  12894          BC  1,@@gen_label771
00008B76 B90B 0001                         12895          SLGR  0,1
00008B7A A70F 0002               00000002  12896          CGHI  0,2
00008B7E 4770 C74A               00008B86  12897          BNE   @L1093
00008B82 9200 D160      00000160 00000000  12898          MVI   352(13),0
00008B86                                   12899 @L1092   DS    0H
00008B86                                   12900 @L1093   DS    0H
00008B86 E3F0 2100 0004          00000100  12901          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008B8C A739 1638               00001638  12902          LGHI  3,5688      ; 5688
00008B90 41F3 F000               00000000  12903          LA    15,0(3,15)
00008B94 E3F0 D370 0024          00000370  12904          STG   15,880(0,13)
00008B9A 4110 D370               00000370  12905          LA    1,880(0,13)
00008B9E E3F0 C214 0004          00008650  12906          LG    15,@lit_1994_478 ; mtx_lock
00008BA4                                   12907 @@gen_label773 DS    0H
00008BA4 05EF                              12908          BALR  14,15
00008BA6                                   12909 @@gen_label774 DS    0H
00008BA6 41F0 D260               00000260  12910          LA    15,608(0,13)
00008BAA E3F0 D370 0024          00000370  12911          STG   15,880(0,13)
00008BB0 E3F0 2100 0004          00000100  12912          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008BB6 A719 1630               00001630  12913          LGHI  1,5680      ; 5680
00008BBA E3F1 F000 0004          00000000  12914          LG    15,0(1,15)
00008BC0 E3F0 D378 0024          00000378  12915          STG   15,888(0,13)
00008BC6 E548 D380 0100          00000380  12916          MVGHI 896(13),256
00008BCC 4110 D370               00000370  12917          LA    1,880(0,13)
00008BD0 E3F0 C21C 0004          00008658  12918          LG    15,@lit_1994_480 ; rd_strlcpy
00008BD6                                   12919 @@gen_label775 DS    0H
00008BD6 05EF                              12920          BALR  14,15
00008BD8                                   12921 @@gen_label776 DS    0H
00008BD8 E3F0 2100 0004          00000100  12922          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
                                                                                                                           Page  262 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008BDE 41F3 F000               00000000  12923          LA    15,0(3,15)
00008BE2 E3F0 D370 0024          00000370  12924          STG   15,880(0,13)
00008BE8 4110 D370               00000370  12925          LA    1,880(0,13)
00008BEC E3F0 C224 0004          00008660  12926          LG    15,@lit_1994_482 ; mtx_unlock
00008BF2                                   12927 @@gen_label777 DS    0H
00008BF2 05EF                              12928          BALR  14,15
00008BF4                                   12929 @@gen_label778 DS    0H
00008BF4 E3F0 20B8 0015          000000B8  12930          LGH   15,184(0,2)
00008BFA E3F0 D370 0024          00000370  12931          STG   15,880(0,13)
00008C00 4110 D370               00000370  12932          LA    1,880(0,13)
00008C04 E3F0 C274 0004          000086B0  12933          LG    15,@lit_1994_506 ; rd_kafka_ApiKey2str
00008C0A                                   12934 @@gen_label779 DS    0H
00008C0A 05EF                              12935          BALR  14,15
00008C0C                                   12936 @@gen_label780 DS    0H
00008C0C B904 003F                         12937          LGR   3,15
00008C10 41F0 2078               00000078  12938          LA    15,120(0,2)
00008C14 E3F0 D370 0024          00000370  12939          STG   15,880(0,13)
00008C1A 4110 D370               00000370  12940          LA    1,880(0,13)
00008C1E E3F0 C1FC 0004          00008638  12941          LG    15,@lit_1994_473 ; rd_slice_offset
00008C24                                   12942 @@gen_label781 DS    0H
00008C24 05EF                              12943          BALR  14,15
00008C26                                   12944 @@gen_label782 DS    0H
00008C26 B904 005F                         12945          LGR   5,15
00008C2A E360 2098 0004          00000098  12946          LG    6,152(0,2)  ; offset of end in rd_slice_s
00008C30 41F0 2078               00000078  12947          LA    15,120(0,2)
00008C34 E3F0 D370 0024          00000370  12948          STG   15,880(0,13)
00008C3A 4110 D370               00000370  12949          LA    1,880(0,13)
00008C3E E3F0 C25C 0004          00008698  12950          LG    15,@lit_1994_494 ; rd_slice_abs_offset
00008C44                                   12951 @@gen_label783 DS    0H
00008C44 05EF                              12952          BALR  14,15
00008C46                                   12953 @@gen_label784 DS    0H
00008C46 B90B 006F                         12954          SLGR  6,15
00008C4A E3F0 21E8 0002          000001E8  12955          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00008C50 4780 C822               00008C5E  12956          BZ    @L1096
00008C54 E3F0 21E8 0004          000001E8  12957          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00008C5A 47F0 C82C               00008C68  12958          B     @L1097
00008C5E                                   12959 @L1096   DS    0H
00008C5E E3F0 C1F4 0004          00008630  12960          LG    15,@lit_1994_472
00008C64 41F0 F1F0               000001F0  12961          LA    15,496(0,15)
00008C68                                   12962 @L1097   DS    0H
00008C68 E310 2100 0004          00000100  12963          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008C6E E310 1FD0 0004          00000FD0  12964          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00008C74 4110 1210               00000210  12965          LA    1,528(0,1)
00008C78 E310 D370 0024          00000370  12966          STG   1,880(0,13)
00008C7E E310 2100 0004          00000100  12967          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008C84 E310 1FD0 0004          00000FD0  12968          LG    1,4048(0,1)
00008C8A E310 D378 0024          00000378  12969          STG   1,888(0,13)
00008C90 4110 D260               00000260  12970          LA    1,608(0,13)
00008C94 E310 D380 0024          00000380  12971          STG   1,896(0,13)
00008C9A E310 D368 0094          00000368  12972          LLC   1,872(0,13) ; log_decode_errors
                                                                                                                           Page  263 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008CA0 B914 0011                         12973          LGFR  1,1
00008CA4 E310 D388 0024          00000388  12974          STG   1,904(0,13)
00008CAA D707 D390 D390 00000390 00000390  12975          XC    912(8,13),912(13)
00008CB0 E310 C1F4 0004          00008630  12976          LG    1,@lit_1994_472
00008CB6 4170 1214               00000214  12977          LA    7,532(0,1)
00008CBA E370 D398 0024          00000398  12978          STG   7,920(0,13)
00008CC0 4110 1220               00000220  12979          LA    1,544(0,1)
00008CC4 E310 D3A0 0024          000003A0  12980          STG   1,928(0,13)
00008CCA E330 D3A8 0024          000003A8  12981          STG   3,936(0,13)
00008CD0 4810 20BA               000000BA  12982          LH    1,186(0,2)
00008CD4 B914 0011                         12983          LGFR  1,1
00008CD8 E310 D3B0 0024          000003B0  12984          STG   1,944(0,13)
00008CDE E350 D3B8 0024          000003B8  12985          STG   5,952(0,13)
00008CE4 E310 2098 0004          00000098  12986          LG    1,152(0,2)  ; offset of end in rd_slice_s
00008CEA E310 2090 000B          00000090  12987          SLG   1,144(0,2)
00008CF0 E310 D3C0 0024          000003C0  12988          STG   1,960(0,13)
00008CF6 E310 C20C 0004          00008648  12989          LG    1,@lit_1994_475
00008CFC 4110 12AE               000002AE  12990          LA    1,686(0,1)
00008D00 E310 D3C8 0024          000003C8  12991          STG   1,968(0,13)
00008D06 E548 D3D0 0347          000003D0  12992          MVGHI 976(13),839
00008D0C E340 D3D8 0024          000003D8  12993          STG   4,984(0,13)
00008D12 E360 D3E0 0024          000003E0  12994          STG   6,992(0,13)
00008D18 E3F0 D3E8 0024          000003E8  12995          STG   15,1000(0,13)
00008D1E 41F0 D160               00000160  12996          LA    15,352(0,13)
00008D22 E3F0 D3F0 0024          000003F0  12997          STG   15,1008(0,13)
00008D28 4110 D370               00000370  12998          LA    1,880(0,13)
00008D2C E3F0 C204 0004          00008640  12999          LG    15,@lit_1994_476 ; rd_kafka_log0
00008D32                                   13000 @@gen_label786 DS    0H
00008D32 05EF                              13001          BALR  14,15
00008D34                                   13002 @@gen_label787 DS    0H
00008D34                                   13003 @L1087   DS    0H
00008D34 E54C 2188 FF65          00000188  13004          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
00008D3A E3C0 C234 001A          00008670  13005          ALGF  12,@lit_region_diff_1994_3_5
                                           13006          DROP  12
                        000097EA           13007          USING @REGION_1994_5,12
00008D40 47F0 C140               0000992A  13008          B     @_err_parse@1994@2
                                           13009          DROP  12
                        0000843C           13010          USING @REGION_1994_3,12
00008D44                                   13011 @L1083   DS    0H
00008D44                                   13012 @L1079   DS    0H
                                           13013 * ***
                                           13014 * ***
                                           13015 * ***                   do { uint64_t _tagcnt; if (!((rkbuf)->rkbuf_fl\
                                           13016 * ags & 0x40)) break; do { uint64_t _v; size_t _r = rd_slice_read_uvar\
                                           13017 * int(&(rkbuf)->rkbuf_reader, &_v); if ((((_r == 0)))) do { if (log_de\
                                           13018 * code_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)))) rd_kafka_crash(\
                                           13019 * "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",842, __FUNCTION__, (\
                                           13020 * ((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } while (0); char __tm\
                                           13021 * pstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), ": " "uvarint parsin\
                                           13022 * g failed"); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; do { ch\
                                           13023 * ar _logname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); r\
                                           13024 * d_strlcpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_logname))\
                                                                                                                           Page  264 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           13025 * ; mtx_unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka_log0(&\
                                           13026 * (rkbuf->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_rk, _lo\
                                           13027 * gname, log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read buffer u\
                                           13028 * nderflow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " "expect\
                                           13029 * ed %" "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd_kafka_\
                                           13030 * ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.ApiVers\
                                           13031 * ion, rd_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_reader)-\
                                           13032 * >end - (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 842, (size_t)0,\
                                           13033 *  ((&rkbuf->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->rkbuf_re\
                                           13034 * ader)), rkbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mitigatio\
                                           13035 * n : "incorrect broker.version.fallback?", __tmpstr); } while (0); } \
                                           13036 * (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_parse; }\
                                           13037 *  while (0); *(&_tagcnt) = _v; } while (0); while (_tagcnt-- > 0) { u\
                                           13038 * int64_t _tagtype, _taglen; do { uint64_t _v; size_t _r = rd_slice_re\
                                           13039 * ad_uvarint(&(rkbuf)->rkbuf_reader, &_v); if ((((_r == 0)))) do { if \
                                           13040 * (log_decode_errors > 0) { do { if (((!(rkbuf->rkbuf_rkb)))) rd_kafka\
                                           13041 * _crash("C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c",842, __FUNCTI\
                                           13042 * ON__, (((void *)0)), "assert: " "rkbuf->rkbuf_rkb"); } while (0); ch\
                                           13043 * ar __tmpstr[256]; snprintf(__tmpstr, sizeof(__tmpstr), ": " "uvarint\
                                           13044 *  parsing failed"); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; \
                                           13045 * do { char _logname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_l\
                                           13046 * ock); rd_strlcpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_lo\
                                           13047 * gname)); mtx_unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka\
                                           13048 * _log0(&(rkbuf->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_\
                                           13049 * rk, _logname, log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read b\
                                           13050 * uffer underflow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " \
                                           13051 * "expected %" "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd\
                                           13052 * _kafka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.\
                                           13053 * ApiVersion, rd_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_r\
                                           13054 * eader)->end - (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 842, (si\
                                           13055 * ze_t)0, ((&rkbuf->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->r\
                                           13056 * kbuf_reader)), rkbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mi\
                                           13057 * tigation : "incorrect broker.version.fallback?", __tmpstr); } while \
                                           13058 * (0); } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_p\
                                           13059 * arse; } while (0); *(&_tagtype) = _v; } while (0); do { uint64_t _v;\
                                           13060 *  size_t _r = rd_slice_read_uvarint(&(rkbuf)->rkbuf_reader, &_v); if \
                                           13061 * ((((_r == 0)))) do { if (log_decode_errors > 0) { do { if (((!(rkbuf\
                                           13062 * ->rkbuf_rkb)))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\src\\rdkaf\
                                           13063 * ka_mock.c",842, __FUNCTION__, (((void *)0)), "assert: " "rkbuf->rkbu\
                                           13064 * f_rkb"); } while (0); char __tmpstr[256]; snprintf(__tmpstr, sizeof(\
                                           13065 * __tmpstr), ": " "uvarint parsing failed"); if (__strlen(__tmpstr) ==\
                                           13066 *  2) __tmpstr[0] = '\0'; do { char _logname[256]; mtx_lock(&(rkbuf->r\
                                           13067 * kbuf_rkb)->rkb_logname_lock); rd_strlcpy(_logname, rkbuf->rkbuf_rkb-\
                                           13068 * >rkb_logname, sizeof(_logname)); mtx_unlock(&(rkbuf->rkbuf_rkb)->rkb\
                                           13069 * _logname_lock); rd_kafka_log0(&(rkbuf->rkbuf_rkb)->rkb_rk->rk_conf, \
                                           13070 * (rkbuf->rkbuf_rkb)->rkb_rk, _logname, log_decode_errors, 0x0, "PROTO\
                                           13071 * UFLOW", "Protocol read buffer underflow " "for %s v%hd " "at %" "zu"\
                                           13072 *  "/%" "zu" " (%s:%i): " "expected %" "zu" " bytes > " "%" "zu" " rem\
                                           13073 * aining bytes (%s)%s", rd_kafka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKe\
                                           13074 * y), rkbuf->rkbuf_reqhdr.ApiVersion, rd_slice_offset(&rkbuf->rkbuf_re\
                                           13075 * ader), ((&rkbuf->rkbuf_reader)->end - (&rkbuf->rkbuf_reader)->start)\
                                           13076 * , __FUNCTION__, 842, (size_t)0, ((&rkbuf->rkbuf_reader)->end - rd_sl\
                                                                                                                           Page  265 
  Active Usings: @REGION_1994_3,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           13077 * ice_abs_offset(&rkbuf->rkbuf_reader)), rkbuf->rkbuf_uflow_mitigation\
                                           13078 *  ? rkbuf->rkbuf_uflow_mitigation : "incorrect broker.version.fallbac\
                                           13079 * k?", __tmpstr); } while (0); } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ER\
                                           13080 * R__UNDERFLOW; goto err_parse; } while (0); *(&_taglen) = _v; } while\
                                           13081 *  (0); if (_taglen > 1) do { size_t __len1 = (size_t)((size_t)(_tagle\
                                           13082 * n - 1)); if (__len1 && !rd_slice_read(&(rkbuf)->rkbuf_reader, ((void\
                                           13083 *  *)0), __len1)) do { size_t __len0 = (size_t)(__len1); if (((__len0 \
                                           13084 * > ((&(rkbuf)->rkbuf_reader)->end - rd_slice_abs_offset(&(rkbuf)->rkb\
                                           13085 * uf_reader))))) { do { if (log_decode_errors > 0) { do { if (((!(rkbu\
                                           13086 * f->rkbuf_rkb)))) rd_kafka_crash("C:\\asgkafka\\librdkafka\\src\\rdka\
                                           13087 * fka_mock.c",842, __FUNCTION__, (((void *)0)), "assert: " "rkbuf->rkb\
                                           13088 * uf_rkb"); } while (0); char __tmpstr[256]; snprintf(__tmpstr, sizeof\
                                           13089 * (__tmpstr), ": "); if (__strlen(__tmpstr) == 2) __tmpstr[0] = '\0'; \
                                           13090 * do { char _logname[256]; mtx_lock(&(rkbuf->rkbuf_rkb)->rkb_logname_l\
                                           13091 * ock); rd_strlcpy(_logname, rkbuf->rkbuf_rkb->rkb_logname, sizeof(_lo\
                                           13092 * gname)); mtx_unlock(&(rkbuf->rkbuf_rkb)->rkb_logname_lock); rd_kafka\
                                           13093 * _log0(&(rkbuf->rkbuf_rkb)->rkb_rk->rk_conf, (rkbuf->rkbuf_rkb)->rkb_\
                                           13094 * rk, _logname, log_decode_errors, 0x0, "PROTOUFLOW", "Protocol read b\
                                           13095 * uffer underflow " "for %s v%hd " "at %" "zu" "/%" "zu" " (%s:%i): " \
                                           13096 * "expected %" "zu" " bytes > " "%" "zu" " remaining bytes (%s)%s", rd\
                                           13097 * _kafka_ApiKey2str(rkbuf->rkbuf_reqhdr. ApiKey), rkbuf->rkbuf_reqhdr.\
                                           13098 * ApiVersion, rd_slice_offset(&rkbuf->rkbuf_reader), ((&rkbuf->rkbuf_r\
                                           13099 * eader)->end - (&rkbuf->rkbuf_reader)->start), __FUNCTION__, 842, __l\
                                           13100 * en0, ((&rkbuf->rkbuf_reader)->end - rd_slice_abs_offset(&rkbuf->rkbu\
                                           13101 * f_reader)), rkbuf->rkbuf_uflow_mitigation ? rkbuf->rkbuf_uflow_mitig\
                                           13102 * ation : "incorrect broker.version.fallback?", __tmpstr); } while (0)\
                                           13103 * ; } (rkbuf)->rkbuf_err = RD_KAFKA_RESP_ERR__UNDERFLOW; goto err_pars\
                                           13104 * e; } while (0); } } while (0); } while (0); } } while (0);
00008D44                                   13105 @L1098   DS    0H
00008D44 9140 2023      00000023 00000040  13106          TM    35(2),64
00008D48 4770 C91A               00008D56  13107          BNZ   *+14  Around region break
00008D4C E3C0 C234 001A          00008670  13108          ALGF  12,@lit_region_diff_1994_3_5
                                           13109          DROP  12
                        000097EA           13110          USING @REGION_1994_5,12
00008D52 47F0 C11A               00009904  13111          B     @L1099
                                           13112          DROP  12
                        0000843C           13113          USING @REGION_1994_3,12
00008D56                                   13114 @L1102   DS    0H
00008D56 41F0 2078               00000078  13115          LA    15,120(0,2)
00008D5A E3F0 D370 0024          00000370  13116          STG   15,880(0,13)
00008D60 41F0 D0C0               000000C0  13117          LA    15,192(0,13)
00008D64 E3F0 D378 0024          00000378  13118          STG   15,888(0,13)
00008D6A 4110 D370               00000370  13119          LA    1,880(0,13)
00008D6E E3F0 C27C 0004          000086B8  13120          LG    15,@lit_1994_534 ; rd_slice_read_uvarint
00008D74                                   13121 @@gen_label789 DS    0H
00008D74 05EF                              13122          BALR  14,15
00008D76                                   13123 @@gen_label790 DS    0H
00008D76 B902 00FF                         13124          LTGR  15,15
00008D7A 4780 C94C               00008D88  13125          BE    *+14  Around region break
00008D7E E3C0 C284 001A          000086C0  13126          ALGF  12,@lit_region_diff_1994_3_4
                                           13127          DROP  12
                        00008E46           13128          USING @REGION_1994_4,12
                                                                                                                           Page  266 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008D84 47F0 C230               00009076  13129          B     @L1105
                                           13130          DROP  12
                        0000843C           13131          USING @REGION_1994_3,12
00008D88                                   13132 @L1106   DS    0H
00008D88 9500 D368      00000368 00000000  13133          CLI   872(13),0
00008D8C 4720 C95E               00008D9A  13134          BH    *+14  Around region break
00008D90 E3C0 C284 001A          000086C0  13135          ALGF  12,@lit_region_diff_1994_3_4
                                           13136          DROP  12
                        00008E46           13137          USING @REGION_1994_4,12
00008D96 47F0 C220               00009066  13138          B     @L1109
                                           13139          DROP  12
                        0000843C           13140          USING @REGION_1994_3,12
00008D9A                                   13141 @L1110   DS    0H
00008D9A E3F0 2100 0002          00000100  13142          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008DA0 4770 C9AA               00008DE6  13143          BNZ   @L1113
00008DA4 E3F0 C1F4 0004          00008630  13144          LG    15,@lit_1994_472
00008DAA 4110 F0FA               000000FA  13145          LA    1,250(0,15)
00008DAE E310 D370 0024          00000370  13146          STG   1,880(0,13)
00008DB4 E548 D378 034A          00000378  13147          MVGHI 888(13),842
00008DBA E310 C20C 0004          00008648  13148          LG    1,@lit_1994_475
00008DC0 4110 12AE               000002AE  13149          LA    1,686(0,1)
00008DC4 E310 D380 0024          00000380  13150          STG   1,896(0,13)
00008DCA D707 D388 D388 00000388 00000388  13151          XC    904(8,13),904(13)
00008DD0 41F0 F1D2               000001D2  13152          LA    15,466(0,15)
00008DD4 E3F0 D390 0024          00000390  13153          STG   15,912(0,13)
00008DDA 4110 D370               00000370  13154          LA    1,880(0,13)
00008DDE E3F0 C264 0004          000086A0  13155          LG    15,@lit_1994_497 ; rd_kafka_crash
00008DE4                                   13156 @@gen_label794 DS    0H
00008DE4 05EF                              13157          BALR  14,15
00008DE6                                   13158 @@gen_label795 DS    0H
00008DE6                                   13159 @L1113   DS    0H
00008DE6 41F0 D160               00000160  13160          LA    15,352(0,13)
00008DEA E3F0 D370 0024          00000370  13161          STG   15,880(0,13)
00008DF0 E548 D378 0100          00000378  13162          MVGHI 888(13),256
00008DF6 E3F0 C1F4 0004          00008630  13163          LG    15,@lit_1994_472
00008DFC 41F0 F554               00000554  13164          LA    15,1364(0,15)
00008E00 E3F0 D380 0024          00000380  13165          STG   15,896(0,13)
00008E06 4110 D370               00000370  13166          LA    1,880(0,13)
00008E0A E3F0 C26C 0004          000086A8  13167          LG    15,@lit_1994_499 ; snprintf
00008E10                                   13168 @@gen_label796 DS    0H
00008E10 05EF                              13169          BALR  14,15
00008E12                                   13170 @@gen_label797 DS    0H
00008E12 41F0 D160               00000160  13171          LA    15,352(0,13)
00008E16 B904 001F                         13172          LGR   1,15
00008E1A A709 0000               00000000  13173          LGHI  0,0
00008E1E                                   13174 @@gen_label798 DS 0H
00008E1E B25E 000F                         13175          SRST  0,15
00008E22 4710 C9E2               00008E1E  13176          BC  1,@@gen_label798
00008E26 B90B 0001                         13177          SLGR  0,1
00008E2A A70F 0002               00000002  13178          CGHI  0,2
00008E2E 4780 CA00               00008E3C  13179          BE    *+14  Around region break
00008E32 E3C0 C284 001A          000086C0  13180          ALGF  12,@lit_region_diff_1994_3_4
                                                                                                                           Page  267 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           13181          DROP  12
                        00008E46           13182          USING @REGION_1994_4,12
00008E38 47F0 C000               00008E46  13183          B     @L1115
                                           13184          DROP  12
                        0000843C           13185          USING @REGION_1994_3,12
00008E3C 9200 D160      00000160 00000000  13186          MVI   352(13),0
00008E40                                   13187 @L1114   DS    0H
00008E40 E3C0 C284 001A          000086C0  13188          ALGF  12,@lit_region_diff_1994_3_4
00008E46                                   13189 @REGION_1994_4 DS 0H
                                           13190          DROP  12
                        00008E46           13191          USING @REGION_1994_4,12
00008E46                                   13192 @L1115   DS    0H
00008E46 E3F0 2100 0004          00000100  13193          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008E4C A739 1638               00001638  13194          LGHI  3,5688      ; 5688
00008E50 41F3 F000               00000000  13195          LA    15,0(3,15)
00008E54 E3F0 D370 0024          00000370  13196          STG   15,880(0,13)
00008E5A 4110 D370               00000370  13197          LA    1,880(0,13)
00008E5E E3F0 C0DA 0004          00008F20  13198          LG    15,@lit_1994_541 ; mtx_lock
00008E64                                   13199 @@gen_label800 DS    0H
00008E64 05EF                              13200          BALR  14,15
00008E66                                   13201 @@gen_label801 DS    0H
00008E66 41F0 D260               00000260  13202          LA    15,608(0,13)
00008E6A E3F0 D370 0024          00000370  13203          STG   15,880(0,13)
00008E70 E3F0 2100 0004          00000100  13204          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008E76 A719 1630               00001630  13205          LGHI  1,5680      ; 5680
00008E7A E3F1 F000 0004          00000000  13206          LG    15,0(1,15)
00008E80 E3F0 D378 0024          00000378  13207          STG   15,888(0,13)
00008E86 E548 D380 0100          00000380  13208          MVGHI 896(13),256
00008E8C 4110 D370               00000370  13209          LA    1,880(0,13)
00008E90 E3F0 C0E2 0004          00008F28  13210          LG    15,@lit_1994_543 ; rd_strlcpy
00008E96                                   13211 @@gen_label802 DS    0H
00008E96 05EF                              13212          BALR  14,15
00008E98                                   13213 @@gen_label803 DS    0H
00008E98 E3F0 2100 0004          00000100  13214          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00008E9E 41F3 F000               00000000  13215          LA    15,0(3,15)
00008EA2 E3F0 D370 0024          00000370  13216          STG   15,880(0,13)
00008EA8 4110 D370               00000370  13217          LA    1,880(0,13)
00008EAC E3F0 C0EA 0004          00008F30  13218          LG    15,@lit_1994_545 ; mtx_unlock
00008EB2                                   13219 @@gen_label804 DS    0H
00008EB2 05EF                              13220          BALR  14,15
00008EB4                                   13221 @@gen_label805 DS    0H
00008EB4 E3F0 20B8 0015          000000B8  13222          LGH   15,184(0,2)
00008EBA E3F0 D370 0024          00000370  13223          STG   15,880(0,13)
00008EC0 4110 D370               00000370  13224          LA    1,880(0,13)
00008EC4 E3F0 C0F2 0004          00008F38  13225          LG    15,@lit_1994_546 ; rd_kafka_ApiKey2str
00008ECA                                   13226 @@gen_label806 DS    0H
00008ECA 05EF                              13227          BALR  14,15
00008ECC                                   13228 @@gen_label807 DS    0H
00008ECC B904 003F                         13229          LGR   3,15
00008ED0 41F0 2078               00000078  13230          LA    15,120(0,2)
00008ED4 E3F0 D370 0024          00000370  13231          STG   15,880(0,13)
00008EDA 4110 D370               00000370  13232          LA    1,880(0,13)
                                                                                                                           Page  268 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008EDE E3F0 C0FA 0004          00008F40  13233          LG    15,@lit_1994_547 ; rd_slice_offset
00008EE4                                   13234 @@gen_label808 DS    0H
00008EE4 05EF                              13235          BALR  14,15
00008EE6                                   13236 @@gen_label809 DS    0H
00008EE6 B904 004F                         13237          LGR   4,15
00008EEA E350 2098 0004          00000098  13238          LG    5,152(0,2)  ; offset of end in rd_slice_s
00008EF0 41F0 2078               00000078  13239          LA    15,120(0,2)
00008EF4 E3F0 D370 0024          00000370  13240          STG   15,880(0,13)
00008EFA 4110 D370               00000370  13241          LA    1,880(0,13)
00008EFE E3F0 C102 0004          00008F48  13242          LG    15,@lit_1994_548 ; rd_slice_abs_offset
00008F04                                   13243 @@gen_label810 DS    0H
00008F04 05EF                              13244          BALR  14,15
00008F06                                   13245 @@gen_label811 DS    0H
00008F06 B90B 005F                         13246          SLGR  5,15
00008F0A E3F0 21E8 0002          000001E8  13247          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00008F10 4780 C14A               00008F90  13248          BZ    @L1118
00008F14 E3F0 21E8 0004          000001E8  13249          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00008F1A 47F0 C154               00008F9A  13250          B     @L1119
00008F20                                   13251          DS    0D
00008F20 0000000000000000                  13252 @lit_1994_541 DC AD(mtx_lock)
00008F28 00000000000019F8                  13253 @lit_1994_543 DC AD(rd_strlcpy)
00008F30 0000000000000000                  13254 @lit_1994_545 DC AD(mtx_unlock)
00008F38 0000000000001310                  13255 @lit_1994_546 DC AD(rd_kafka_$Api$Key2str)
00008F40 0000000000001258                  13256 @lit_1994_547 DC AD(rd_slice_offset)
00008F48 00000000000011B0                  13257 @lit_1994_548 DC AD(rd_slice_abs_offset)
00008F50 0000000000010840                  13258 @lit_1994_549 DC AD(@strings@)
00008F58 0000000000000000                  13259 @lit_1994_552 DC AD(rd_kafka_log0)
00008F60 0000000000010480                  13260 @lit_1994_551 DC AD(@DATA)
00008F68 000009A4                          13261 @lit_region_diff_1994_4_5  DC A(@REGION_1994_5-@REGION_1994_4)
00008F6C 00000000
00008F70 0000000000000000                  13262 @lit_1994_553 DC AD(rd_slice_read_uvarint)
00008F78 0000000000000000                  13263 @lit_1994_556 DC AD(rd_kafka_crash)
00008F80 0000000000000000                  13264 @lit_1994_558 DC AD(snprintf)
00008F88 0000000000000000                  13265 @lit_1994_591 DC AD(rd_slice_read)
00008F90                                   13266 @L1118   DS    0H
00008F90 E3F0 C10A 0004          00008F50  13267          LG    15,@lit_1994_549
00008F96 41F0 F1F0               000001F0  13268          LA    15,496(0,15)
00008F9A                                   13269 @L1119   DS    0H
00008F9A E310 2100 0004          00000100  13270          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008FA0 E310 1FD0 0004          00000FD0  13271          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00008FA6 4110 1210               00000210  13272          LA    1,528(0,1)
00008FAA E310 D370 0024          00000370  13273          STG   1,880(0,13)
00008FB0 E310 2100 0004          00000100  13274          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00008FB6 E310 1FD0 0004          00000FD0  13275          LG    1,4048(0,1)
00008FBC E310 D378 0024          00000378  13276          STG   1,888(0,13)
00008FC2 4110 D260               00000260  13277          LA    1,608(0,13)
00008FC6 E310 D380 0024          00000380  13278          STG   1,896(0,13)
00008FCC E310 D368 0094          00000368  13279          LLC   1,872(0,13) ; log_decode_errors
00008FD2 B914 0011                         13280          LGFR  1,1
00008FD6 E310 D388 0024          00000388  13281          STG   1,904(0,13)
                                                                                                                           Page  269 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00008FDC D707 D390 D390 00000390 00000390  13282          XC    912(8,13),912(13)
00008FE2 E310 C10A 0004          00008F50  13283          LG    1,@lit_1994_549
00008FE8 4160 1214               00000214  13284          LA    6,532(0,1)
00008FEC E360 D398 0024          00000398  13285          STG   6,920(0,13)
00008FF2 4110 1220               00000220  13286          LA    1,544(0,1)
00008FF6 E310 D3A0 0024          000003A0  13287          STG   1,928(0,13)
00008FFC E330 D3A8 0024          000003A8  13288          STG   3,936(0,13)
00009002 4810 20BA               000000BA  13289          LH    1,186(0,2)
00009006 B914 0011                         13290          LGFR  1,1
0000900A E310 D3B0 0024          000003B0  13291          STG   1,944(0,13)
00009010 E340 D3B8 0024          000003B8  13292          STG   4,952(0,13)
00009016 E310 2098 0004          00000098  13293          LG    1,152(0,2)  ; offset of end in rd_slice_s
0000901C E310 2090 000B          00000090  13294          SLG   1,144(0,2)
00009022 E310 D3C0 0024          000003C0  13295          STG   1,960(0,13)
00009028 E310 C11A 0004          00008F60  13296          LG    1,@lit_1994_551
0000902E 4110 12AE               000002AE  13297          LA    1,686(0,1)
00009032 E310 D3C8 0024          000003C8  13298          STG   1,968(0,13)
00009038 E548 D3D0 034A          000003D0  13299          MVGHI 976(13),842
0000903E D707 D3D8 D3D8 000003D8 000003D8  13300          XC    984(8,13),984(13)
00009044 E350 D3E0 0024          000003E0  13301          STG   5,992(0,13)
0000904A E3F0 D3E8 0024          000003E8  13302          STG   15,1000(0,13)
00009050 41F0 D160               00000160  13303          LA    15,352(0,13)
00009054 E3F0 D3F0 0024          000003F0  13304          STG   15,1008(0,13)
0000905A 4110 D370               00000370  13305          LA    1,880(0,13)
0000905E E3F0 C112 0004          00008F58  13306          LG    15,@lit_1994_552 ; rd_kafka_log0
00009064                                   13307 @@gen_label813 DS    0H
00009064 05EF                              13308          BALR  14,15
00009066                                   13309 @@gen_label814 DS    0H
00009066                                   13310 @L1109   DS    0H
00009066 E54C 2188 FF65          00000188  13311          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
0000906C E3C0 C122 001A          00008F68  13312          ALGF  12,@lit_region_diff_1994_4_5
                                           13313          DROP  12
                        000097EA           13314          USING @REGION_1994_5,12
00009072 47F0 C140               0000992A  13315          B     @_err_parse@1994@2
                                           13316          DROP  12
                        00008E46           13317          USING @REGION_1994_4,12
00009076                                   13318 @L1105   DS    0H
00009076 E3F0 D0C0 0004          000000C0  13319          LG    15,192(0,13) ; _v
0000907C E3F0 D0B8 0024          000000B8  13320          STG   15,184(0,13)
00009082 E3C0 C122 001A          00008F68  13321          ALGF  12,@lit_region_diff_1994_4_5
                                           13322          DROP  12
                        000097EA           13323          USING @REGION_1994_5,12
00009088 47F0 C0F2               000098DC  13324          B     @L1123
                                           13325          DROP  12
                        00008E46           13326          USING @REGION_1994_4,12
0000908C                                   13327 @L1124   DS    0H
0000908C 41F0 2078               00000078  13328          LA    15,120(0,2)
00009090 E3F0 D370 0024          00000370  13329          STG   15,880(0,13)
00009096 41F0 D0D0               000000D0  13330          LA    15,208(0,13)
0000909A E3F0 D378 0024          00000378  13331          STG   15,888(0,13)
000090A0 4110 D370               00000370  13332          LA    1,880(0,13)
000090A4 E3F0 C12A 0004          00008F70  13333          LG    15,@lit_1994_553 ; rd_slice_read_uvarint
                                                                                                                           Page  270 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000090AA                                   13334 @@gen_label815 DS    0H
000090AA 05EF                              13335          BALR  14,15
000090AC                                   13336 @@gen_label816 DS    0H
000090AC B902 00FF                         13337          LTGR  15,15
000090B0 4770 C4D0               00009316  13338          BNE   @L1127
000090B4                                   13339 @L1128   DS    0H
000090B4 9500 D368      00000368 00000000  13340          CLI   872(13),0
000090B8 47D0 C4C0               00009306  13341          BNH   @L1131
000090BC                                   13342 @L1132   DS    0H
000090BC E3F0 2100 0002          00000100  13343          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000090C2 4770 C2C2               00009108  13344          BNZ   @L1135
000090C6 E3F0 C10A 0004          00008F50  13345          LG    15,@lit_1994_549
000090CC 4110 F0FA               000000FA  13346          LA    1,250(0,15)
000090D0 E310 D370 0024          00000370  13347          STG   1,880(0,13)
000090D6 E548 D378 034A          00000378  13348          MVGHI 888(13),842
000090DC E310 C11A 0004          00008F60  13349          LG    1,@lit_1994_551
000090E2 4110 12AE               000002AE  13350          LA    1,686(0,1)
000090E6 E310 D380 0024          00000380  13351          STG   1,896(0,13)
000090EC D707 D388 D388 00000388 00000388  13352          XC    904(8,13),904(13)
000090F2 41F0 F1D2               000001D2  13353          LA    15,466(0,15)
000090F6 E3F0 D390 0024          00000390  13354          STG   15,912(0,13)
000090FC 4110 D370               00000370  13355          LA    1,880(0,13)
00009100 E3F0 C132 0004          00008F78  13356          LG    15,@lit_1994_556 ; rd_kafka_crash
00009106                                   13357 @@gen_label820 DS    0H
00009106 05EF                              13358          BALR  14,15
00009108                                   13359 @@gen_label821 DS    0H
00009108                                   13360 @L1135   DS    0H
00009108 41F0 D168               00000168  13361          LA    15,360(0,13)
0000910C E3F0 D370 0024          00000370  13362          STG   15,880(0,13)
00009112 E548 D378 0100          00000378  13363          MVGHI 888(13),256
00009118 E3F0 C10A 0004          00008F50  13364          LG    15,@lit_1994_549
0000911E 41F0 F554               00000554  13365          LA    15,1364(0,15)
00009122 E3F0 D380 0024          00000380  13366          STG   15,896(0,13)
00009128 4110 D370               00000370  13367          LA    1,880(0,13)
0000912C E3F0 C13A 0004          00008F80  13368          LG    15,@lit_1994_558 ; snprintf
00009132                                   13369 @@gen_label822 DS    0H
00009132 05EF                              13370          BALR  14,15
00009134                                   13371 @@gen_label823 DS    0H
00009134 41F0 D168               00000168  13372          LA    15,360(0,13)
00009138 B904 001F                         13373          LGR   1,15
0000913C A709 0000               00000000  13374          LGHI  0,0
00009140                                   13375 @@gen_label824 DS 0H
00009140 B25E 000F                         13376          SRST  0,15
00009144 4710 C2FA               00009140  13377          BC  1,@@gen_label824
00009148 B90B 0001                         13378          SLGR  0,1
0000914C A70F 0002               00000002  13379          CGHI  0,2
00009150 4770 C312               00009158  13380          BNE   @L1137
00009154 9200 D168      00000168 00000000  13381          MVI   360(13),0
00009158                                   13382 @L1136   DS    0H
00009158                                   13383 @L1137   DS    0H
00009158 E3F0 2100 0004          00000100  13384          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000915E A739 1638               00001638  13385          LGHI  3,5688      ; 5688
                                                                                                                           Page  271 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00009162 41F3 F000               00000000  13386          LA    15,0(3,15)
00009166 E3F0 D370 0024          00000370  13387          STG   15,880(0,13)
0000916C 4110 D370               00000370  13388          LA    1,880(0,13)
00009170 E3F0 C0DA 0004          00008F20  13389          LG    15,@lit_1994_541 ; mtx_lock
00009176                                   13390 @@gen_label826 DS    0H
00009176 05EF                              13391          BALR  14,15
00009178                                   13392 @@gen_label827 DS    0H
00009178 41F0 D268               00000268  13393          LA    15,616(0,13)
0000917C E3F0 D370 0024          00000370  13394          STG   15,880(0,13)
00009182 E3F0 2100 0004          00000100  13395          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00009188 A719 1630               00001630  13396          LGHI  1,5680      ; 5680
0000918C E3F1 F000 0004          00000000  13397          LG    15,0(1,15)
00009192 E3F0 D378 0024          00000378  13398          STG   15,888(0,13)
00009198 E548 D380 0100          00000380  13399          MVGHI 896(13),256
0000919E 4110 D370               00000370  13400          LA    1,880(0,13)
000091A2 E3F0 C0E2 0004          00008F28  13401          LG    15,@lit_1994_543 ; rd_strlcpy
000091A8                                   13402 @@gen_label828 DS    0H
000091A8 05EF                              13403          BALR  14,15
000091AA                                   13404 @@gen_label829 DS    0H
000091AA E3F0 2100 0004          00000100  13405          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000091B0 41F3 F000               00000000  13406          LA    15,0(3,15)
000091B4 E3F0 D370 0024          00000370  13407          STG   15,880(0,13)
000091BA 4110 D370               00000370  13408          LA    1,880(0,13)
000091BE E3F0 C0EA 0004          00008F30  13409          LG    15,@lit_1994_545 ; mtx_unlock
000091C4                                   13410 @@gen_label830 DS    0H
000091C4 05EF                              13411          BALR  14,15
000091C6                                   13412 @@gen_label831 DS    0H
000091C6 E3F0 20B8 0015          000000B8  13413          LGH   15,184(0,2)
000091CC E3F0 D370 0024          00000370  13414          STG   15,880(0,13)
000091D2 4110 D370               00000370  13415          LA    1,880(0,13)
000091D6 E3F0 C0F2 0004          00008F38  13416          LG    15,@lit_1994_546 ; rd_kafka_ApiKey2str
000091DC                                   13417 @@gen_label832 DS    0H
000091DC 05EF                              13418          BALR  14,15
000091DE                                   13419 @@gen_label833 DS    0H
000091DE B904 003F                         13420          LGR   3,15
000091E2 41F0 2078               00000078  13421          LA    15,120(0,2)
000091E6 E3F0 D370 0024          00000370  13422          STG   15,880(0,13)
000091EC 4110 D370               00000370  13423          LA    1,880(0,13)
000091F0 E3F0 C0FA 0004          00008F40  13424          LG    15,@lit_1994_547 ; rd_slice_offset
000091F6                                   13425 @@gen_label834 DS    0H
000091F6 05EF                              13426          BALR  14,15
000091F8                                   13427 @@gen_label835 DS    0H
000091F8 B904 004F                         13428          LGR   4,15
000091FC E350 2098 0004          00000098  13429          LG    5,152(0,2)  ; offset of end in rd_slice_s
00009202 41F0 2078               00000078  13430          LA    15,120(0,2)
00009206 E3F0 D370 0024          00000370  13431          STG   15,880(0,13)
0000920C 4110 D370               00000370  13432          LA    1,880(0,13)
00009210 E3F0 C102 0004          00008F48  13433          LG    15,@lit_1994_548 ; rd_slice_abs_offset
00009216                                   13434 @@gen_label836 DS    0H
00009216 05EF                              13435          BALR  14,15
00009218                                   13436 @@gen_label837 DS    0H
00009218 B90B 005F                         13437          SLGR  5,15
                                                                                                                           Page  272 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000921C E3F0 21E8 0002          000001E8  13438          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
00009222 4780 C3EA               00009230  13439          BZ    @L1140
00009226 E3F0 21E8 0004          000001E8  13440          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
0000922C 47F0 C3F4               0000923A  13441          B     @L1141
00009230                                   13442 @L1140   DS    0H
00009230 E3F0 C10A 0004          00008F50  13443          LG    15,@lit_1994_549
00009236 41F0 F1F0               000001F0  13444          LA    15,496(0,15)
0000923A                                   13445 @L1141   DS    0H
0000923A E310 2100 0004          00000100  13446          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00009240 E310 1FD0 0004          00000FD0  13447          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
00009246 4110 1210               00000210  13448          LA    1,528(0,1)
0000924A E310 D370 0024          00000370  13449          STG   1,880(0,13)
00009250 E310 2100 0004          00000100  13450          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
00009256 E310 1FD0 0004          00000FD0  13451          LG    1,4048(0,1)
0000925C E310 D378 0024          00000378  13452          STG   1,888(0,13)
00009262 4110 D268               00000268  13453          LA    1,616(0,13)
00009266 E310 D380 0024          00000380  13454          STG   1,896(0,13)
0000926C E310 D368 0094          00000368  13455          LLC   1,872(0,13) ; log_decode_errors
00009272 B914 0011                         13456          LGFR  1,1
00009276 E310 D388 0024          00000388  13457          STG   1,904(0,13)
0000927C D707 D390 D390 00000390 00000390  13458          XC    912(8,13),912(13)
00009282 E310 C10A 0004          00008F50  13459          LG    1,@lit_1994_549
00009288 4160 1214               00000214  13460          LA    6,532(0,1)
0000928C E360 D398 0024          00000398  13461          STG   6,920(0,13)
00009292 4110 1220               00000220  13462          LA    1,544(0,1)
00009296 E310 D3A0 0024          000003A0  13463          STG   1,928(0,13)
0000929C E330 D3A8 0024          000003A8  13464          STG   3,936(0,13)
000092A2 4810 20BA               000000BA  13465          LH    1,186(0,2)
000092A6 B914 0011                         13466          LGFR  1,1
000092AA E310 D3B0 0024          000003B0  13467          STG   1,944(0,13)
000092B0 E340 D3B8 0024          000003B8  13468          STG   4,952(0,13)
000092B6 E310 2098 0004          00000098  13469          LG    1,152(0,2)  ; offset of end in rd_slice_s
000092BC E310 2090 000B          00000090  13470          SLG   1,144(0,2)
000092C2 E310 D3C0 0024          000003C0  13471          STG   1,960(0,13)
000092C8 E310 C11A 0004          00008F60  13472          LG    1,@lit_1994_551
000092CE 4110 12AE               000002AE  13473          LA    1,686(0,1)
000092D2 E310 D3C8 0024          000003C8  13474          STG   1,968(0,13)
000092D8 E548 D3D0 034A          000003D0  13475          MVGHI 976(13),842
000092DE D707 D3D8 D3D8 000003D8 000003D8  13476          XC    984(8,13),984(13)
000092E4 E350 D3E0 0024          000003E0  13477          STG   5,992(0,13)
000092EA E3F0 D3E8 0024          000003E8  13478          STG   15,1000(0,13)
000092F0 41F0 D168               00000168  13479          LA    15,360(0,13)
000092F4 E3F0 D3F0 0024          000003F0  13480          STG   15,1008(0,13)
000092FA 4110 D370               00000370  13481          LA    1,880(0,13)
000092FE E3F0 C112 0004          00008F58  13482          LG    15,@lit_1994_552 ; rd_kafka_log0
00009304                                   13483 @@gen_label839 DS    0H
00009304 05EF                              13484          BALR  14,15
00009306                                   13485 @@gen_label840 DS    0H
00009306                                   13486 @L1131   DS    0H
00009306 E54C 2188 FF65          00000188  13487          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
                                                                                                                           Page  273 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000930C E3C0 C122 001A          00008F68  13488          ALGF  12,@lit_region_diff_1994_4_5
                                           13489          DROP  12
                        000097EA           13490          USING @REGION_1994_5,12
00009312 47F0 C140               0000992A  13491          B     @_err_parse@1994@2
                                           13492          DROP  12
                        00008E46           13493          USING @REGION_1994_4,12
00009316                                   13494 @L1127   DS    0H
00009316 E3F0 D0D0 0004          000000D0  13495          LG    15,208(0,13) ; _v
0000931C E3F0 D160 0024          00000160  13496          STG   15,352(0,13)
00009322                                   13497 @L1142   DS    0H
00009322 41F0 2078               00000078  13498          LA    15,120(0,2)
00009326 E3F0 D370 0024          00000370  13499          STG   15,880(0,13)
0000932C 41F0 D0D8               000000D8  13500          LA    15,216(0,13)
00009330 E3F0 D378 0024          00000378  13501          STG   15,888(0,13)
00009336 4110 D370               00000370  13502          LA    1,880(0,13)
0000933A E3F0 C12A 0004          00008F70  13503          LG    15,@lit_1994_553 ; rd_slice_read_uvarint
00009340                                   13504 @@gen_label841 DS    0H
00009340 05EF                              13505          BALR  14,15
00009342                                   13506 @@gen_label842 DS    0H
00009342 B902 00FF                         13507          LTGR  15,15
00009346 4770 C766               000095AC  13508          BNE   @L1145
0000934A                                   13509 @L1146   DS    0H
0000934A 9500 D368      00000368 00000000  13510          CLI   872(13),0
0000934E 47D0 C756               0000959C  13511          BNH   @L1149
00009352                                   13512 @L1150   DS    0H
00009352 E3F0 2100 0002          00000100  13513          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00009358 4770 C558               0000939E  13514          BNZ   @L1153
0000935C E3F0 C10A 0004          00008F50  13515          LG    15,@lit_1994_549
00009362 4110 F0FA               000000FA  13516          LA    1,250(0,15)
00009366 E310 D370 0024          00000370  13517          STG   1,880(0,13)
0000936C E548 D378 034A          00000378  13518          MVGHI 888(13),842
00009372 E310 C11A 0004          00008F60  13519          LG    1,@lit_1994_551
00009378 4110 12AE               000002AE  13520          LA    1,686(0,1)
0000937C E310 D380 0024          00000380  13521          STG   1,896(0,13)
00009382 D707 D388 D388 00000388 00000388  13522          XC    904(8,13),904(13)
00009388 41F0 F1D2               000001D2  13523          LA    15,466(0,15)
0000938C E3F0 D390 0024          00000390  13524          STG   15,912(0,13)
00009392 4110 D370               00000370  13525          LA    1,880(0,13)
00009396 E3F0 C132 0004          00008F78  13526          LG    15,@lit_1994_556 ; rd_kafka_crash
0000939C                                   13527 @@gen_label846 DS    0H
0000939C 05EF                              13528          BALR  14,15
0000939E                                   13529 @@gen_label847 DS    0H
0000939E                                   13530 @L1153   DS    0H
0000939E 41F0 D168               00000168  13531          LA    15,360(0,13)
000093A2 E3F0 D370 0024          00000370  13532          STG   15,880(0,13)
000093A8 E548 D378 0100          00000378  13533          MVGHI 888(13),256
000093AE E3F0 C10A 0004          00008F50  13534          LG    15,@lit_1994_549
000093B4 41F0 F554               00000554  13535          LA    15,1364(0,15)
000093B8 E3F0 D380 0024          00000380  13536          STG   15,896(0,13)
000093BE 4110 D370               00000370  13537          LA    1,880(0,13)
000093C2 E3F0 C13A 0004          00008F80  13538          LG    15,@lit_1994_558 ; snprintf
000093C8                                   13539 @@gen_label848 DS    0H
                                                                                                                           Page  274 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000093C8 05EF                              13540          BALR  14,15
000093CA                                   13541 @@gen_label849 DS    0H
000093CA 41F0 D168               00000168  13542          LA    15,360(0,13)
000093CE B904 001F                         13543          LGR   1,15
000093D2 A709 0000               00000000  13544          LGHI  0,0
000093D6                                   13545 @@gen_label850 DS 0H
000093D6 B25E 000F                         13546          SRST  0,15
000093DA 4710 C590               000093D6  13547          BC  1,@@gen_label850
000093DE B90B 0001                         13548          SLGR  0,1
000093E2 A70F 0002               00000002  13549          CGHI  0,2
000093E6 4770 C5A8               000093EE  13550          BNE   @L1155
000093EA 9200 D168      00000168 00000000  13551          MVI   360(13),0
000093EE                                   13552 @L1154   DS    0H
000093EE                                   13553 @L1155   DS    0H
000093EE E3F0 2100 0004          00000100  13554          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
000093F4 A739 1638               00001638  13555          LGHI  3,5688      ; 5688
000093F8 41F3 F000               00000000  13556          LA    15,0(3,15)
000093FC E3F0 D370 0024          00000370  13557          STG   15,880(0,13)
00009402 4110 D370               00000370  13558          LA    1,880(0,13)
00009406 E3F0 C0DA 0004          00008F20  13559          LG    15,@lit_1994_541 ; mtx_lock
0000940C                                   13560 @@gen_label852 DS    0H
0000940C 05EF                              13561          BALR  14,15
0000940E                                   13562 @@gen_label853 DS    0H
0000940E 41F0 D268               00000268  13563          LA    15,616(0,13)
00009412 E3F0 D370 0024          00000370  13564          STG   15,880(0,13)
00009418 E3F0 2100 0004          00000100  13565          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000941E A719 1630               00001630  13566          LGHI  1,5680      ; 5680
00009422 E3F1 F000 0004          00000000  13567          LG    15,0(1,15)
00009428 E3F0 D378 0024          00000378  13568          STG   15,888(0,13)
0000942E E548 D380 0100          00000380  13569          MVGHI 896(13),256
00009434 4110 D370               00000370  13570          LA    1,880(0,13)
00009438 E3F0 C0E2 0004          00008F28  13571          LG    15,@lit_1994_543 ; rd_strlcpy
0000943E                                   13572 @@gen_label854 DS    0H
0000943E 05EF                              13573          BALR  14,15
00009440                                   13574 @@gen_label855 DS    0H
00009440 E3F0 2100 0004          00000100  13575          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00009446 41F3 F000               00000000  13576          LA    15,0(3,15)
0000944A E3F0 D370 0024          00000370  13577          STG   15,880(0,13)
00009450 4110 D370               00000370  13578          LA    1,880(0,13)
00009454 E3F0 C0EA 0004          00008F30  13579          LG    15,@lit_1994_545 ; mtx_unlock
0000945A                                   13580 @@gen_label856 DS    0H
0000945A 05EF                              13581          BALR  14,15
0000945C                                   13582 @@gen_label857 DS    0H
0000945C E3F0 20B8 0015          000000B8  13583          LGH   15,184(0,2)
00009462 E3F0 D370 0024          00000370  13584          STG   15,880(0,13)
00009468 4110 D370               00000370  13585          LA    1,880(0,13)
0000946C E3F0 C0F2 0004          00008F38  13586          LG    15,@lit_1994_546 ; rd_kafka_ApiKey2str
00009472                                   13587 @@gen_label858 DS    0H
00009472 05EF                              13588          BALR  14,15
00009474                                   13589 @@gen_label859 DS    0H
00009474 B904 003F                         13590          LGR   3,15
00009478 41F0 2078               00000078  13591          LA    15,120(0,2)
                                                                                                                           Page  275 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000947C E3F0 D370 0024          00000370  13592          STG   15,880(0,13)
00009482 4110 D370               00000370  13593          LA    1,880(0,13)
00009486 E3F0 C0FA 0004          00008F40  13594          LG    15,@lit_1994_547 ; rd_slice_offset
0000948C                                   13595 @@gen_label860 DS    0H
0000948C 05EF                              13596          BALR  14,15
0000948E                                   13597 @@gen_label861 DS    0H
0000948E B904 004F                         13598          LGR   4,15
00009492 E350 2098 0004          00000098  13599          LG    5,152(0,2)  ; offset of end in rd_slice_s
00009498 41F0 2078               00000078  13600          LA    15,120(0,2)
0000949C E3F0 D370 0024          00000370  13601          STG   15,880(0,13)
000094A2 4110 D370               00000370  13602          LA    1,880(0,13)
000094A6 E3F0 C102 0004          00008F48  13603          LG    15,@lit_1994_548 ; rd_slice_abs_offset
000094AC                                   13604 @@gen_label862 DS    0H
000094AC 05EF                              13605          BALR  14,15
000094AE                                   13606 @@gen_label863 DS    0H
000094AE B90B 005F                         13607          SLGR  5,15
000094B2 E3F0 21E8 0002          000001E8  13608          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000094B8 4780 C680               000094C6  13609          BZ    @L1158
000094BC E3F0 21E8 0004          000001E8  13610          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000094C2 47F0 C68A               000094D0  13611          B     @L1159
000094C6                                   13612 @L1158   DS    0H
000094C6 E3F0 C10A 0004          00008F50  13613          LG    15,@lit_1994_549
000094CC 41F0 F1F0               000001F0  13614          LA    15,496(0,15)
000094D0                                   13615 @L1159   DS    0H
000094D0 E310 2100 0004          00000100  13616          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000094D6 E310 1FD0 0004          00000FD0  13617          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
000094DC 4110 1210               00000210  13618          LA    1,528(0,1)
000094E0 E310 D370 0024          00000370  13619          STG   1,880(0,13)
000094E6 E310 2100 0004          00000100  13620          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000094EC E310 1FD0 0004          00000FD0  13621          LG    1,4048(0,1)
000094F2 E310 D378 0024          00000378  13622          STG   1,888(0,13)
000094F8 4110 D268               00000268  13623          LA    1,616(0,13)
000094FC E310 D380 0024          00000380  13624          STG   1,896(0,13)
00009502 E310 D368 0094          00000368  13625          LLC   1,872(0,13) ; log_decode_errors
00009508 B914 0011                         13626          LGFR  1,1
0000950C E310 D388 0024          00000388  13627          STG   1,904(0,13)
00009512 D707 D390 D390 00000390 00000390  13628          XC    912(8,13),912(13)
00009518 E310 C10A 0004          00008F50  13629          LG    1,@lit_1994_549
0000951E 4160 1214               00000214  13630          LA    6,532(0,1)
00009522 E360 D398 0024          00000398  13631          STG   6,920(0,13)
00009528 4110 1220               00000220  13632          LA    1,544(0,1)
0000952C E310 D3A0 0024          000003A0  13633          STG   1,928(0,13)
00009532 E330 D3A8 0024          000003A8  13634          STG   3,936(0,13)
00009538 4810 20BA               000000BA  13635          LH    1,186(0,2)
0000953C B914 0011                         13636          LGFR  1,1
00009540 E310 D3B0 0024          000003B0  13637          STG   1,944(0,13)
00009546 E340 D3B8 0024          000003B8  13638          STG   4,952(0,13)
0000954C E310 2098 0004          00000098  13639          LG    1,152(0,2)  ; offset of end in rd_slice_s
00009552 E310 2090 000B          00000090  13640          SLG   1,144(0,2)
00009558 E310 D3C0 0024          000003C0  13641          STG   1,960(0,13)
                                                                                                                           Page  276 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000955E E310 C11A 0004          00008F60  13642          LG    1,@lit_1994_551
00009564 4110 12AE               000002AE  13643          LA    1,686(0,1)
00009568 E310 D3C8 0024          000003C8  13644          STG   1,968(0,13)
0000956E E548 D3D0 034A          000003D0  13645          MVGHI 976(13),842
00009574 D707 D3D8 D3D8 000003D8 000003D8  13646          XC    984(8,13),984(13)
0000957A E350 D3E0 0024          000003E0  13647          STG   5,992(0,13)
00009580 E3F0 D3E8 0024          000003E8  13648          STG   15,1000(0,13)
00009586 41F0 D168               00000168  13649          LA    15,360(0,13)
0000958A E3F0 D3F0 0024          000003F0  13650          STG   15,1008(0,13)
00009590 4110 D370               00000370  13651          LA    1,880(0,13)
00009594 E3F0 C112 0004          00008F58  13652          LG    15,@lit_1994_552 ; rd_kafka_log0
0000959A                                   13653 @@gen_label865 DS    0H
0000959A 05EF                              13654          BALR  14,15
0000959C                                   13655 @@gen_label866 DS    0H
0000959C                                   13656 @L1149   DS    0H
0000959C E54C 2188 FF65          00000188  13657          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
000095A2 E3C0 C122 001A          00008F68  13658          ALGF  12,@lit_region_diff_1994_4_5
                                           13659          DROP  12
                        000097EA           13660          USING @REGION_1994_5,12
000095A8 47F0 C140               0000992A  13661          B     @_err_parse@1994@2
                                           13662          DROP  12
                        00008E46           13663          USING @REGION_1994_4,12
000095AC                                   13664 @L1145   DS    0H
000095AC E3F0 D0D8 0004          000000D8  13665          LG    15,216(0,13) ; _v
000095B2 E3F0 D0C8 0024          000000C8  13666          STG   15,200(0,13)
000095B8 E559 D0C8 0001          000000C8  13667          CLGHSI 200(13),1
000095BE 4720 C786               000095CC  13668          BH    *+14  Around region break
000095C2 E3C0 C122 001A          00008F68  13669          ALGF  12,@lit_region_diff_1994_4_5
                                           13670          DROP  12
                        000097EA           13671          USING @REGION_1994_5,12
000095C8 47F0 C0F2               000098DC  13672          B     @L1160
                                           13673          DROP  12
                        00008E46           13674          USING @REGION_1994_4,12
000095CC                                   13675 @L1161   DS    0H
000095CC E340 D0C8 0004          000000C8  13676          LG    4,200(0,13) ; _taglen
000095D2 A74B FFFF               0000FFFF  13677          AGHI  4,-1
000095D6 B902 00F4                         13678          LTGR  15,4
000095DA 4770 C7A2               000095E8  13679          BNZ   *+14  Around region break
000095DE E3C0 C122 001A          00008F68  13680          ALGF  12,@lit_region_diff_1994_4_5
                                           13681          DROP  12
                        000097EA           13682          USING @REGION_1994_5,12
000095E4 47F0 C0F2               000098DC  13683          B     @L1164
                                           13684          DROP  12
                        00008E46           13685          USING @REGION_1994_4,12
000095E8 41F0 2078               00000078  13686          LA    15,120(0,2)
000095EC E3F0 D370 0024          00000370  13687          STG   15,880(0,13)
000095F2 D707 D378 D378 00000378 00000378  13688          XC    888(8,13),888(13)
000095F8 E340 D380 0024          00000380  13689          STG   4,896(0,13)
000095FE 4110 D370               00000370  13690          LA    1,880(0,13)
00009602 E3F0 C142 0004          00008F88  13691          LG    15,@lit_1994_591 ; rd_slice_read
00009608                                   13692 @@gen_label869 DS    0H
00009608 05EF                              13693          BALR  14,15
                                                                                                                           Page  277 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000960A                                   13694 @@gen_label870 DS    0H
0000960A B902 00FF                         13695          LTGR  15,15
0000960E 4780 C7D6               0000961C  13696          BZ    *+14  Around region break
00009612 E3C0 C122 001A          00008F68  13697          ALGF  12,@lit_region_diff_1994_4_5
                                           13698          DROP  12
                        000097EA           13699          USING @REGION_1994_5,12
00009618 47F0 C0F2               000098DC  13700          B     @L1164
                                           13701          DROP  12
                        00008E46           13702          USING @REGION_1994_4,12
0000961C                                   13703 @L1165   DS    0H
0000961C E350 2098 0004          00000098  13704          LG    5,152(0,2)  ; offset of end in rd_slice_s
00009622 41F0 2078               00000078  13705          LA    15,120(0,2)
00009626 E3F0 D370 0024          00000370  13706          STG   15,880(0,13)
0000962C 4110 D370               00000370  13707          LA    1,880(0,13)
00009630 E3F0 C102 0004          00008F48  13708          LG    15,@lit_1994_548 ; rd_slice_abs_offset
00009636                                   13709 @@gen_label872 DS    0H
00009636 05EF                              13710          BALR  14,15
00009638                                   13711 @@gen_label873 DS    0H
00009638 B90B 005F                         13712          SLGR  5,15
0000963C B921 0045                         13713          CLGR  4,5
00009640 4720 C808               0000964E  13714          BH    *+14  Around region break
00009644 E3C0 C122 001A          00008F68  13715          ALGF  12,@lit_region_diff_1994_4_5
                                           13716          DROP  12
                        000097EA           13717          USING @REGION_1994_5,12
0000964A 47F0 C0F2               000098DC  13718          B     @L1168
                                           13719          DROP  12
                        00008E46           13720          USING @REGION_1994_4,12
0000964E                                   13721 @L1169   DS    0H
0000964E 9500 D368      00000368 00000000  13722          CLI   872(13),0
00009652 4720 C81A               00009660  13723          BH    *+14  Around region break
00009656 E3C0 C122 001A          00008F68  13724          ALGF  12,@lit_region_diff_1994_4_5
                                           13725          DROP  12
                        000097EA           13726          USING @REGION_1994_5,12
0000965C 47F0 C0CC               000098B6  13727          B     @L1172
                                           13728          DROP  12
                        00008E46           13729          USING @REGION_1994_4,12
00009660                                   13730 @L1173   DS    0H
00009660 E3F0 2100 0002          00000100  13731          LTG   15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00009666 4770 C866               000096AC  13732          BNZ   @L1176
0000966A E3F0 C10A 0004          00008F50  13733          LG    15,@lit_1994_549
00009670 4110 F0FA               000000FA  13734          LA    1,250(0,15)
00009674 E310 D370 0024          00000370  13735          STG   1,880(0,13)
0000967A E548 D378 034A          00000378  13736          MVGHI 888(13),842
00009680 E310 C11A 0004          00008F60  13737          LG    1,@lit_1994_551
00009686 4110 12AE               000002AE  13738          LA    1,686(0,1)
0000968A E310 D380 0024          00000380  13739          STG   1,896(0,13)
00009690 D707 D388 D388 00000388 00000388  13740          XC    904(8,13),904(13)
00009696 41F0 F1D2               000001D2  13741          LA    15,466(0,15)
0000969A E3F0 D390 0024          00000390  13742          STG   15,912(0,13)
000096A0 4110 D370               00000370  13743          LA    1,880(0,13)
000096A4 E3F0 C132 0004          00008F78  13744          LG    15,@lit_1994_556 ; rd_kafka_crash
000096AA                                   13745 @@gen_label877 DS    0H
                                                                                                                           Page  278 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000096AA 05EF                              13746          BALR  14,15
000096AC                                   13747 @@gen_label878 DS    0H
000096AC                                   13748 @L1176   DS    0H
000096AC 41F0 D168               00000168  13749          LA    15,360(0,13)
000096B0 E3F0 D370 0024          00000370  13750          STG   15,880(0,13)
000096B6 E548 D378 0100          00000378  13751          MVGHI 888(13),256
000096BC E3F0 C10A 0004          00008F50  13752          LG    15,@lit_1994_549
000096C2 41F0 F1EC               000001EC  13753          LA    15,492(0,15)
000096C6 E3F0 D380 0024          00000380  13754          STG   15,896(0,13)
000096CC 4110 D370               00000370  13755          LA    1,880(0,13)
000096D0 E3F0 C13A 0004          00008F80  13756          LG    15,@lit_1994_558 ; snprintf
000096D6                                   13757 @@gen_label879 DS    0H
000096D6 05EF                              13758          BALR  14,15
000096D8                                   13759 @@gen_label880 DS    0H
000096D8 41F0 D168               00000168  13760          LA    15,360(0,13)
000096DC B904 001F                         13761          LGR   1,15
000096E0 A709 0000               00000000  13762          LGHI  0,0
000096E4                                   13763 @@gen_label881 DS 0H
000096E4 B25E 000F                         13764          SRST  0,15
000096E8 4710 C89E               000096E4  13765          BC  1,@@gen_label881
000096EC B90B 0001                         13766          SLGR  0,1
000096F0 A70F 0002               00000002  13767          CGHI  0,2
000096F4 4770 C8B6               000096FC  13768          BNE   @L1178
000096F8 9200 D168      00000168 00000000  13769          MVI   360(13),0
000096FC                                   13770 @L1177   DS    0H
000096FC                                   13771 @L1178   DS    0H
000096FC E3F0 2100 0004          00000100  13772          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00009702 A739 1638               00001638  13773          LGHI  3,5688      ; 5688
00009706 41F3 F000               00000000  13774          LA    15,0(3,15)
0000970A E3F0 D370 0024          00000370  13775          STG   15,880(0,13)
00009710 4110 D370               00000370  13776          LA    1,880(0,13)
00009714 E3F0 C0DA 0004          00008F20  13777          LG    15,@lit_1994_541 ; mtx_lock
0000971A                                   13778 @@gen_label883 DS    0H
0000971A 05EF                              13779          BALR  14,15
0000971C                                   13780 @@gen_label884 DS    0H
0000971C 41F0 D268               00000268  13781          LA    15,616(0,13)
00009720 E3F0 D370 0024          00000370  13782          STG   15,880(0,13)
00009726 E3F0 2100 0004          00000100  13783          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
0000972C A719 1630               00001630  13784          LGHI  1,5680      ; 5680
00009730 E3F1 F000 0004          00000000  13785          LG    15,0(1,15)
00009736 E3F0 D378 0024          00000378  13786          STG   15,888(0,13)
0000973C E548 D380 0100          00000380  13787          MVGHI 896(13),256
00009742 4110 D370               00000370  13788          LA    1,880(0,13)
00009746 E3F0 C0E2 0004          00008F28  13789          LG    15,@lit_1994_543 ; rd_strlcpy
0000974C                                   13790 @@gen_label885 DS    0H
0000974C 05EF                              13791          BALR  14,15
0000974E                                   13792 @@gen_label886 DS    0H
0000974E E3F0 2100 0004          00000100  13793          LG    15,256(0,2) ; offset of rkbuf_rkb in rd_kafka_buf_s
00009754 41F3 F000               00000000  13794          LA    15,0(3,15)
00009758 E3F0 D370 0024          00000370  13795          STG   15,880(0,13)
0000975E 4110 D370               00000370  13796          LA    1,880(0,13)
00009762 E3F0 C0EA 0004          00008F30  13797          LG    15,@lit_1994_545 ; mtx_unlock
                                                                                                                           Page  279 
  Active Usings: @REGION_1994_4,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00009768                                   13798 @@gen_label887 DS    0H
00009768 05EF                              13799          BALR  14,15
0000976A                                   13800 @@gen_label888 DS    0H
0000976A E3F0 20B8 0015          000000B8  13801          LGH   15,184(0,2)
00009770 E3F0 D370 0024          00000370  13802          STG   15,880(0,13)
00009776 4110 D370               00000370  13803          LA    1,880(0,13)
0000977A E3F0 C0F2 0004          00008F38  13804          LG    15,@lit_1994_546 ; rd_kafka_ApiKey2str
00009780                                   13805 @@gen_label889 DS    0H
00009780 05EF                              13806          BALR  14,15
00009782                                   13807 @@gen_label890 DS    0H
00009782 B904 003F                         13808          LGR   3,15
00009786 41F0 2078               00000078  13809          LA    15,120(0,2)
0000978A E3F0 D370 0024          00000370  13810          STG   15,880(0,13)
00009790 4110 D370               00000370  13811          LA    1,880(0,13)
00009794 E3F0 C0FA 0004          00008F40  13812          LG    15,@lit_1994_547 ; rd_slice_offset
0000979A                                   13813 @@gen_label891 DS    0H
0000979A 05EF                              13814          BALR  14,15
0000979C                                   13815 @@gen_label892 DS    0H
0000979C B904 005F                         13816          LGR   5,15
000097A0 E360 2098 0004          00000098  13817          LG    6,152(0,2)  ; offset of end in rd_slice_s
000097A6 41F0 2078               00000078  13818          LA    15,120(0,2)
000097AA E3F0 D370 0024          00000370  13819          STG   15,880(0,13)
000097B0 4110 D370               00000370  13820          LA    1,880(0,13)
000097B4 E3F0 C102 0004          00008F48  13821          LG    15,@lit_1994_548 ; rd_slice_abs_offset
000097BA                                   13822 @@gen_label893 DS    0H
000097BA 05EF                              13823          BALR  14,15
000097BC                                   13824 @@gen_label894 DS    0H
000097BC B90B 006F                         13825          SLGR  6,15
000097C0 E3F0 21E8 0002          000001E8  13826          LTG   15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000097C6 4780 C994               000097DA  13827          BZ    @L1181
000097CA E3F0 21E8 0004          000001E8  13828          LG    15,488(0,2) ; offset of rkbuf_uflow_mitigation in rd_kaf*
                                                                ka_buf_s
000097D0 E3C0 C122 001A          00008F68  13829          ALGF  12,@lit_region_diff_1994_4_5
                                           13830          DROP  12
                        000097EA           13831          USING @REGION_1994_5,12
000097D6 47F0 C000               000097EA  13832          B     @L1182
                                           13833          DROP  12
                        00008E46           13834          USING @REGION_1994_4,12
000097DA                                   13835 @L1181   DS    0H
000097DA E3F0 C10A 0004          00008F50  13836          LG    15,@lit_1994_549
000097E0 41F0 F1F0               000001F0  13837          LA    15,496(0,15)
000097E4 E3C0 C122 001A          00008F68  13838          ALGF  12,@lit_region_diff_1994_4_5
000097EA                                   13839 @REGION_1994_5 DS 0H
                                           13840          DROP  12
                        000097EA           13841          USING @REGION_1994_5,12
000097EA                                   13842 @L1182   DS    0H
000097EA E310 2100 0004          00000100  13843          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
000097F0 E310 1FD0 0004          00000FD0  13844          LG    1,4048(0,1) ; offset of rkb_rk in rd_kafka_broker_s
000097F6 4110 1210               00000210  13845          LA    1,528(0,1)
000097FA E310 D370 0024          00000370  13846          STG   1,880(0,13)
00009800 E310 2100 0004          00000100  13847          LG    1,256(0,2)  ; offset of rkbuf_rkb in rd_kafka_buf_s
                                                                                                                           Page  280 
  Active Usings: @REGION_1994_5,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00009806 E310 1FD0 0004          00000FD0  13848          LG    1,4048(0,1)
0000980C E310 D378 0024          00000378  13849          STG   1,888(0,13)
00009812 4110 D268               00000268  13850          LA    1,616(0,13)
00009816 E310 D380 0024          00000380  13851          STG   1,896(0,13)
0000981C E310 D368 0094          00000368  13852          LLC   1,872(0,13) ; log_decode_errors
00009822 B914 0011                         13853          LGFR  1,1
00009826 E310 D388 0024          00000388  13854          STG   1,904(0,13)
0000982C D707 D390 D390 00000390 00000390  13855          XC    912(8,13),912(13)
00009832 E310 C0E6 0004          000098D0  13856          LG    1,@lit_1994_608
00009838 4170 1214               00000214  13857          LA    7,532(0,1)
0000983C E370 D398 0024          00000398  13858          STG   7,920(0,13)
00009842 4110 1220               00000220  13859          LA    1,544(0,1)
00009846 E310 D3A0 0024          000003A0  13860          STG   1,928(0,13)
0000984C E330 D3A8 0024          000003A8  13861          STG   3,936(0,13)
00009852 4810 20BA               000000BA  13862          LH    1,186(0,2)
00009856 B914 0011                         13863          LGFR  1,1
0000985A E310 D3B0 0024          000003B0  13864          STG   1,944(0,13)
00009860 E350 D3B8 0024          000003B8  13865          STG   5,952(0,13)
00009866 E310 2098 0004          00000098  13866          LG    1,152(0,2)  ; offset of end in rd_slice_s
0000986C E310 2090 000B          00000090  13867          SLG   1,144(0,2)
00009872 E310 D3C0 0024          000003C0  13868          STG   1,960(0,13)
00009878 E310 C0DE 0004          000098C8  13869          LG    1,@lit_1994_609
0000987E 4110 12AE               000002AE  13870          LA    1,686(0,1)
00009882 E310 D3C8 0024          000003C8  13871          STG   1,968(0,13)
00009888 E548 D3D0 034A          000003D0  13872          MVGHI 976(13),842
0000988E E340 D3D8 0024          000003D8  13873          STG   4,984(0,13)
00009894 E360 D3E0 0024          000003E0  13874          STG   6,992(0,13)
0000989A E3F0 D3E8 0024          000003E8  13875          STG   15,1000(0,13)
000098A0 41F0 D168               00000168  13876          LA    15,360(0,13)
000098A4 E3F0 D3F0 0024          000003F0  13877          STG   15,1008(0,13)
000098AA 4110 D370               00000370  13878          LA    1,880(0,13)
000098AE E3F0 C0D6 0004          000098C0  13879          LG    15,@lit_1994_610 ; rd_kafka_log0
000098B4                                   13880 @@gen_label896 DS    0H
000098B4 05EF                              13881          BALR  14,15
000098B6                                   13882 @@gen_label897 DS    0H
000098B6                                   13883 @L1172   DS    0H
000098B6 E54C 2188 FF65          00000188  13884          MVHI  392(2),-155 ; offset of rkbuf_err in rd_kafka_buf_s
000098BC 47F0 C140               0000992A  13885          B     @_err_parse@1994@2
000098C0                                   13886          DS    0D
000098C0 0000000000000000                  13887 @lit_1994_610 DC AD(rd_kafka_log0)
000098C8 0000000000010480                  13888 @lit_1994_609 DC AD(@DATA)
000098D0 0000000000010840                  13889 @lit_1994_608 DC AD(@strings@)
000098D8 000009A4                          13890 @lit_region_diff_1994_5_4  DC A(@REGION_1994_5-@REGION_1994_4)
000098DC                                   13891 @L1168   DS    0H
000098DC                                   13892 @L1164   DS    0H
000098DC                                   13893 @L1160   DS    0H
000098DC                                   13894 @L1123   DS    0H
000098DC E3F0 D0B8 0004          000000B8  13895          LG    15,184(0,13) ; _tagcnt
000098E2 B904 001F                         13896          LGR   1,15
000098E6 A71B FFFF               0000FFFF  13897          AGHI  1,-1
000098EA E310 D0B8 0024          000000B8  13898          STG   1,184(0,13) ; _tagcnt
000098F0 C2FE 0000 0000                    13899          CLGFI 15,X'00000000'
                                                                                                                           Page  281 
  Active Usings: @REGION_1994_5,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000098F6 47D0 C11A               00009904  13900          BNH   *+14  Around region break
000098FA E3C0 C0EE 001B          000098D8  13901          SLGF  12,@lit_region_diff_1994_5_4
                                           13902          DROP  12
                        00008E46           13903          USING @REGION_1994_4,12
00009900 47F0 C246               0000908C  13904          B     @L1124
                                           13905          DROP  12
                        000097EA           13906          USING @REGION_1994_5,12
00009904                                   13907 @L1099   DS    0H
                                           13908 * ***
                                           13909 * ***
                                           13910 * ***                   *rkbufp = rkbuf;
00009904 E3F0 7008 0004          00000008  13911          LG    15,8(0,7)   ; rkbufp
0000990A E320 F000 0024          00000000  13912          STG   2,0(0,15)   ; rkbufp
                                           13913 * ***                   mconn->rxbuf = ((void *)0);
00009910 A7F9 0000               00000000  13914          LGHI  15,0        ; 0
00009914 E3F0 3018 0024          00000018  13915          STG   15,24(0,3)  ; offset of rxbuf in rd_kafka_mock_connectio*
                                                                n_s
                                           13916 * ***                   return 1;
0000991A A7F9 0001               00000001  13917          LGHI  15,1        ; 1
0000991E 47F0 C144               0000992E  13918          B     @ret_lab_1994
                                           13919 * ***           }
                                           13920 * ***
                                           13921 * ***           return 0;
00009922                                   13922 @L1044   DS    0H
00009922 A7F9 0000               00000000  13923          LGHI  15,0        ; 0
00009926 47F0 C144               0000992E  13924          B     @ret_lab_1994
                                           13925 * ***
                                           13926 * ***
                                           13927 * ***    err_parse:
                                           13928 * ***           return -1;
0000992A                                   13929 @_err_parse@1994@2 DS 0H
0000992A A7F9 FFFF               0000FFFF  13930          LGHI  15,-1       ; -1
                                           13931 * ***   }
0000992E                                   13932 @ret_lab_1994 DS 0H
                                           13933 * * **** Start of Epilogue
                                           13934          DCCEPIL
0000992E                                   13935+         ds 0h                                                          01-DCCEP
                                           13936+* Epilog
0000992E D707 D088 D088 00000088 00000088  13937+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00009934 E3D0 D080 0004          00000080  13938+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000993A E3C0 D090 0004          00000090  13939+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00009940 E3B0 C018 0004          00000018  13940+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00009946 E3C0 B010 0021          00000010  13941+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000994C E3E0 D008 0004          00000008  13942+         lg  14,8(0,13)          load up return address                 01-DCCEP
00009952 EB1C D020 0004          00000020  13943+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00009958 078E                              13944+         bcr 8,14                if same dsab, just return              01-DCCEP
0000995A E3F0 D010 0024          00000010  13945+         stg 15,16(0,13)         save return code                       01-DCCEP
00009960 E300 D018 0024          00000018  13946+         stg 0,24(0,13)          save more return code                  01-DCCEP
00009966 E3F0 D090 0004          00000090  13947+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000996C E3F0 F018 0004          00000018  13948+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00009972 47F0 F040               00000040  13949+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           13950+* End of Epilog
                                                                                                                           Page  282 
  Active Usings: @REGION_1994_5,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           13951 * * **** End of Epilogue
                                           13952          DROP  12
                                           13953 *
                                           13954 *   DSECT for automatic variables in "rd_kafka_mock_connection_read_re
                                           13955 *           quest"
                                           13956 *      (FUNCTION #1994)
                                           13957 *
00000000                00000000 00000369  13958 @AUTO#rd_kafka_mock_connection_read_request DSECT
00000000                                   13959          DS    XL168
000000A8                                   13960 rd_kafka_mock_connection_read_request#__len0#86 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13961          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13962 rd_kafka_mock_connection_read_request#__len1#85 DS 8XL1 ; __len1
000000B0                000000B0 000000A8  13963          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13964 rd_kafka_mock_connection_read_request#_r#80 DS 8XL1 ; _r
000000B0                000000B0 000000A8  13965          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13966 rd_kafka_mock_connection_read_request#_r#75 DS 8XL1 ; _r
000000B0                000000B0 000000A8  13967          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13968 rd_kafka_mock_connection_read_request#_r#69 DS 8XL1 ; _r
000000B0                000000B0 000000A8  13969          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13970 rd_kafka_mock_connection_read_request#__len0#62 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13971          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13972 rd_kafka_mock_connection_read_request#__len1#61 DS 8XL1 ; __len1
000000B0                000000B0 000000A8  13973          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13974 rd_kafka_mock_connection_read_request#__len0#55 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13975          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13976 rd_kafka_mock_connection_read_request#__len2#54 DS 8XL1 ; __len2
000000B0                000000B0 000000A8  13977          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13978 rd_kafka_mock_connection_read_request#__len0#38 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13979          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13980 rd_kafka_mock_connection_read_request#__len2#37 DS 8XL1 ; __len2
000000B0                000000B0 000000A8  13981          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13982 rd_kafka_mock_connection_read_request#__len0#24 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13983          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13984 rd_kafka_mock_connection_read_request#__len2#23 DS 8XL1 ; __len2
000000B0                000000B0 000000A8  13985          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13986 rd_kafka_mock_connection_read_request#__len0#16 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13987          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13988 rd_kafka_mock_connection_read_request#__len2#15 DS 8XL1 ; __len2
000000B0                000000B0 000000A8  13989          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13990 rd_kafka_mock_connection_read_request#__len0#8 DS 8XL1 ; __len0
000000B0                000000B0 000000A8  13991          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13992 rd_kafka_mock_connection_read_request#__len2#7 DS 8XL1 ; __len2
000000B0                000000B0 000000A8  13993          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13994 rd_kafka_mock_connection_read_request#_v#6 DS 1F ; _v
000000AC                000000AC 000000A8  13995          ORG   @AUTO#rd_kafka_mock_connection_read_request+168
000000A8                                   13996 rd_kafka_mock_connection_read_request#r#0 DS 8XL1 ; r
000000B0                000000B0 000000AC  13997          ORG   @AUTO#rd_kafka_mock_connection_read_request+172
000000AC                                   13998 rd_kafka_mock_connection_read_request#_v#14 DS 2XL1 ; _v
000000AE                000000AE 000000AE  13999          ORG   @AUTO#rd_kafka_mock_connection_read_request+174
000000AE                                   14000 rd_kafka_mock_connection_read_request#_v#22 DS 2XL1 ; _v
000000B0                000000B0 000000B0  14001          ORG   @AUTO#rd_kafka_mock_connection_read_request+176
000000B0                                   14002 rd_kafka_mock_connection_read_request#_v#36 DS 1F ; _v
                                                                                                                           Page  283 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000000B4                000000B4 000000B4  14003          ORG   @AUTO#rd_kafka_mock_connection_read_request+180
000000B4                                   14004 rd_kafka_mock_connection_read_request#_slen#52 DS 2XL1 ; _slen
000000B6                000000B6 000000B6  14005          ORG   @AUTO#rd_kafka_mock_connection_read_request+182
000000B6                                   14006 rd_kafka_mock_connection_read_request#_v#53 DS 2XL1 ; _v
000000B8                000000B8 000000B8  14007          ORG   @AUTO#rd_kafka_mock_connection_read_request+184
000000B8                                   14008 rd_kafka_mock_connection_read_request#_tagcnt#68 DS 8XL1 ; _tagcnt
000000C0                000000C0 000000C0  14009          ORG   @AUTO#rd_kafka_mock_connection_read_request+192
000000C0                                   14010 rd_kafka_mock_connection_read_request#_v#69 DS 8XL1 ; _v
000000C8                000000C8 000000C8  14011          ORG   @AUTO#rd_kafka_mock_connection_read_request+200
000000C8                                   14012 rd_kafka_mock_connection_read_request#_taglen#74 DS 8XL1 ; _taglen
000000D0                000000D0 000000D0  14013          ORG   @AUTO#rd_kafka_mock_connection_read_request+208
000000D0                                   14014 rd_kafka_mock_connection_read_request#_v#75 DS 8XL1 ; _v
000000D8                000000D8 000000D8  14015          ORG   @AUTO#rd_kafka_mock_connection_read_request+216
000000D8                                   14016 rd_kafka_mock_connection_read_request#_v#80 DS 8XL1 ; _v
000000E0                000000E0 000000E0  14017          ORG   @AUTO#rd_kafka_mock_connection_read_request+224
000000E0                                   14018 rd_kafka_mock_connection_read_request#errstr#0 DS 128XL1 ; errstr
00000160                00000160 00000160  14019          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14020 rd_kafka_mock_connection_read_request#_tagtype#74 DS 8XL1 ; _tagtype
00000168                00000168 00000160  14021          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14022 rd_kafka_mock_connection_read_request#__tmpstr#72 DS 256XL1 ; __tmpstr
00000260                00000260 00000160  14023          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14024 rd_kafka_mock_connection_read_request#__tmpstr#66 DS 256XL1 ; __tmpstr
00000260                00000260 00000160  14025          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14026 rd_kafka_mock_connection_read_request#__tmpstr#59 DS 256XL1 ; __tmpstr
00000260                00000260 00000160  14027          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14028 rd_kafka_mock_connection_read_request#_logname#49 DS 256XL1 ; _logname
00000260                00000260 00000160  14029          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14030 rd_kafka_mock_connection_read_request#_logname#48 DS 256XL1 ; _logname
00000260                00000260 00000160  14031          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14032 rd_kafka_mock_connection_read_request#__tmpstr#42 DS 256XL1 ; __tmpstr
00000260                00000260 00000160  14033          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14034 rd_kafka_mock_connection_read_request#_logname#35 DS 256XL1 ; _logname
00000260                00000260 00000160  14035          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14036 rd_kafka_mock_connection_read_request#_logname#34 DS 256XL1 ; _logname
00000260                00000260 00000160  14037          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14038 rd_kafka_mock_connection_read_request#__tmpstr#28 DS 256XL1 ; __tmpstr
00000260                00000260 00000160  14039          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14040 rd_kafka_mock_connection_read_request#__tmpstr#20 DS 256XL1 ; __tmpstr
00000260                00000260 00000160  14041          ORG   @AUTO#rd_kafka_mock_connection_read_request+352
00000160                                   14042 rd_kafka_mock_connection_read_request#__tmpstr#12 DS 256XL1 ; __tmpstr
00000260                00000260 00000168  14043          ORG   @AUTO#rd_kafka_mock_connection_read_request+360
00000168                                   14044 rd_kafka_mock_connection_read_request#__tmpstr#90 DS 256XL1 ; __tmpstr
00000268                00000268 00000168  14045          ORG   @AUTO#rd_kafka_mock_connection_read_request+360
00000168                                   14046 rd_kafka_mock_connection_read_request#__tmpstr#83 DS 256XL1 ; __tmpstr
00000268                00000268 00000168  14047          ORG   @AUTO#rd_kafka_mock_connection_read_request+360
00000168                                   14048 rd_kafka_mock_connection_read_request#__tmpstr#78 DS 256XL1 ; __tmpstr
00000268                00000268 00000260  14049          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14050 rd_kafka_mock_connection_read_request#_logname#73 DS 256XL1 ; _logname
00000360                00000360 00000260  14051          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14052 rd_kafka_mock_connection_read_request#_logname#67 DS 256XL1 ; _logname
00000360                00000360 00000260  14053          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14054 rd_kafka_mock_connection_read_request#_logname#60 DS 256XL1 ; _logname
                                                                                                                           Page  284 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000360                00000360 00000260  14055          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14056 rd_kafka_mock_connection_read_request#_logname#43 DS 256XL1 ; _logname
00000360                00000360 00000260  14057          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14058 rd_kafka_mock_connection_read_request#_logname#29 DS 256XL1 ; _logname
00000360                00000360 00000260  14059          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14060 rd_kafka_mock_connection_read_request#_logname#21 DS 256XL1 ; _logname
00000360                00000360 00000260  14061          ORG   @AUTO#rd_kafka_mock_connection_read_request+608
00000260                                   14062 rd_kafka_mock_connection_read_request#_logname#13 DS 256XL1 ; _logname
00000360                00000360 00000268  14063          ORG   @AUTO#rd_kafka_mock_connection_read_request+616
00000268                                   14064 rd_kafka_mock_connection_read_request#_logname#91 DS 256XL1 ; _logname
00000368                00000368 00000268  14065          ORG   @AUTO#rd_kafka_mock_connection_read_request+616
00000268                                   14066 rd_kafka_mock_connection_read_request#_logname#84 DS 256XL1 ; _logname
00000368                00000368 00000268  14067          ORG   @AUTO#rd_kafka_mock_connection_read_request+616
00000268                                   14068 rd_kafka_mock_connection_read_request#_logname#79 DS 256XL1 ; _logname
00000368                00000368 00000368  14069          ORG   @AUTO#rd_kafka_mock_connection_read_request+872
00000368                                   14070 rd_kafka_mock_connection_read_request#log_decode_errors#0 DS 1CL1 ; log*
                                                                _decode_errors
                                           14071 *
00009976                00000000 00010480  14072 @CODE    CSECT
                                           14073 *
                                           14074 *
                                           14075 *
                                           14076 * ....... start of rd_kafka_mock_buf_new_response
                                           14077 rd_kafka_mock_buf_new_response ALIAS X'99846D92818692816D949683926D82A4*
                                                                866D9585A66D9985A2979695A285'
00009976                                   14078 @LNAME1937 DS  0H
00009976 0000001E                          14079          DC    X'0000001E'
0000997A 99846D9281869281                  14080          DC    C'rd_kafka_mock_buf_new_response'
00009998 00                                14081          DC    X'00'
                                           14082 rd_kafka_mock_buf_new_response DCCPRLG CINDEX=1937,BASER=12,FRAME=200,E*
                                                                NTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1937
                                           14083          macro
                                           14084          dccextrn &m
                                           14085          gblc    &$dccext(1000)
                                           14086          gbla    &$dccexti
                                           14087          lcla    &i
                                           14088 &$dccext(&$dccexti+1) setc    '&m'
                                           14089 &i       seta    1
                                           14090 .loop    aif    (&i gt &$dccexti).around
                                           14091          aif    ('&$dccext(&i)' eq '&m').getout
                                           14092 &i       seta    &i+1
                                           14093          ago     .loop
                                           14094 .around  anop
                                           14095 &$dccexti seta &$dccexti+1
                                           14096          extrn  &m
                                           14097 .getout  anop
                                           14098          mend
000099A0                                   14099+$eye0214    ds    0d                                                    02-DCCCA
000099A0 C4C3C3                            14100+         dc cl3'DCC'                                                    02-DCCCA
000099A3 01                                14101+         dc xl1'01' format one                                          02-DCCCA
000099A4 00000000                          14102+         dc a(0)                                                        02-DCCCA
000099A8 0000000000009A12                  14103+         dc ad(@PER_1937)                                               02-DCCCA
                                                                                                                           Page  285 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000099B0 00000000000000C8                  14104+         dc ad(200)                                                     02-DCCCA
000099B8 0000000000000000                  14105+         dc ad(0)                                                       02-DCCCA
000099C0 0000000000001000                  14106+         dc ad(4096)                                                    02-DCCCA
000099C8 20                                14107+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000099C9 03                                14108+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000099CA 03                                14109+         dc al1(3)                                                      02-DCCCA
000099CB 08                                14110+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000099CC 00                                14111+         dc bl.8'00000000'                                              02-DCCCA
000099CD 000000                            14112+         dc al3(0)                                                      02-DCCCA
000099D0 0000000000009976                  14113+         dc ad(@LNAME1937)                                              02-DCCCA
000099D8                                   14114+         ds 0d                                                          02-DCCCA
000099D8 00000000000099A0                  14115+         dc ad($eye0214)                                                02-DCCCA
000099E0 0000000000000000                  14116+         dc ad(0)                                                       02-DCCCA
000099E8                                   14117+         ds    0d                                                       01-DCCPR
                                           14118+         entry rd_kafka_mock_buf_new_response                           01-DCCPR
000099E8                                   14119+rd_kafka_mock_buf_new_response ds 0d                                    01-DCCPR
000099E8                                   14120+@REGION_1937_1 ds 0h                                                    01-DCCPR
000099E8 EBEC D008 0024          00000008  14121+         stmg  14,12,8(13)                         Save regs            01-DCCPR
000099EE E3E0 D088 0004          00000088  14122+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
000099F4 E3C0 D090 0004          00000090  14123+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
000099FA B904 002E                         14124+         lgr   2,14                copy addr of our savearea            01-DCCPR
000099FE E3B0 C018 0004          00000018  14125+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00009A04 A7EB 00C8               000000C8  14126+         aghi  14,200              increase by frame size               01-DCCPR
00009A08 E3E0 C020 0021          00000020  14127+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00009A0E 4720 B020               00000020  14128+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00009A12                                   14129+@PER_1937 ds   0h                                                       01-DCCPR
00009A12 EBDE 2080 0024          00000080  14130+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00009A18 E3C0 2090 0024          00000090  14131+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00009A1E B904 00D2                         14132+         lgr   13,2                set real frame pointer               01-DCCPR
00009A22 B904 00CF                         14133+         lgr   12,15               set base reg                         01-DCCPR
                        000099E8           14134+         using @REGION_1937_1,12                                        01-DCCPR
                                           14135 * ******* End of Prologue
                                           14136 * *
                                           14137 * ***           rd_kafka_buf_t *rkbuf = rd_kafka_buf_new0(1,100,0);
00009A26 E320 1000 0004          00000000  14138          LG    2,0(0,1)    ; request
00009A2C E548 D0B0 0001          000000B0  14139          MVGHI 176(13),1
00009A32 E548 D0B8 0064          000000B8  14140          MVGHI 184(13),100
00009A38 D707 D0C0 D0C0 000000C0 000000C0  14141          XC    192(8,13),192(13)
00009A3E 4110 D0B0               000000B0  14142          LA    1,176(0,13)
00009A42 E3F0 C130 0004          00009B18  14143          LG    15,@lit_1937_657 ; rd_kafka_buf_new0
00009A48                                   14144 @@gen_label899 DS    0H
00009A48 05EF                              14145          BALR  14,15
00009A4A                                   14146 @@gen_label900 DS    0H
00009A4A B904 003F                         14147          LGR   3,15
                                           14148 * ***
                                           14149 * ***
                                           14150 * ***           rkbuf->rkbuf_reqhdr = request->rkbuf_reqhdr;
00009A4E D20B 30B4 20B4 000000B4 000000B4  14151          MVC   180(12,3),180(2)
                                           14152 * ***
                                           14153 * ***
                                           14154 * ***           rd_kafka_buf_write_i32(rkbuf, 0);
00009A54 E330 D0B0 0024          000000B0  14155          STG   3,176(0,13)
                                                                                                                           Page  286 
  Active Usings: @REGION_1937_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00009A5A D707 D0B8 D0B8 000000B8 000000B8  14156          XC    184(8,13),184(13)
00009A60 4110 D0B0               000000B0  14157          LA    1,176(0,13)
00009A64 E340 C138 0004          00009B20  14158          LG    4,@lit_1937_658 ; rd_kafka_buf_write_i32
00009A6A B904 00F4                         14159          LGR   15,4
00009A6E                                   14160 @@gen_label901 DS    0H
00009A6E 05EF                              14161          BALR  14,15
00009A70                                   14162 @@gen_label902 DS    0H
                                           14163 * ***
                                           14164 * ***
                                           14165 * ***           rd_kafka_buf_write_i32(rkbuf, request->rkbuf_reqhdr.Co\
                                           14166 * rrId);
00009A70 E330 D0B0 0024          000000B0  14167          STG   3,176(0,13)
00009A76 E3F0 20BC 0014          000000BC  14168          LGF   15,188(0,2)
00009A7C E3F0 D0B8 0024          000000B8  14169          STG   15,184(0,13)
00009A82 4110 D0B0               000000B0  14170          LA    1,176(0,13)
00009A86 B904 00F4                         14171          LGR   15,4
00009A8A                                   14172 @@gen_label903 DS    0H
00009A8A 05EF                              14173          BALR  14,15
00009A8C                                   14174 @@gen_label904 DS    0H
                                           14175 * ***
                                           14176 * ***           if (request->rkbuf_flags & 0x40) {
00009A8C 9140 2023      00000023 00000040  14177          TM    35(2),64
00009A90 4780 C0DC               00009AC4  14178          BZ    @L1183
                                           14179 * ***                   rkbuf->rkbuf_flags |= 0x40;
00009A94 58F0 3020               00000020  14180          L     15,32(0,3)
00009A98 A5FB 0040               00000040  14181          OILL  15,64
00009A9C 50F0 3020               00000020  14182          ST    15,32(0,3)
                                           14183 * ***
                                           14184 * ***
                                           14185 * ***                   if (request->rkbuf_reqhdr.ApiKey != 18)
00009AA0 48F0 20B8               000000B8  14186          LH    15,184(0,2)
00009AA4 A7FE 0012               00000012  14187          CHI   15,18
00009AA8 4780 C0DC               00009AC4  14188          BE    @L1183
                                           14189 * ***                           rd_kafka_buf_write_i8(rkbuf, 0);
00009AAC E330 D0B0 0024          000000B0  14190          STG   3,176(0,13)
00009AB2 D707 D0B8 D0B8 000000B8 000000B8  14191          XC    184(8,13),184(13)
00009AB8 4110 D0B0               000000B0  14192          LA    1,176(0,13)
00009ABC E3F0 C140 0004          00009B28  14193          LG    15,@lit_1937_660 ; rd_kafka_buf_write_i8
00009AC2                                   14194 @@gen_label907 DS    0H
00009AC2 05EF                              14195          BALR  14,15
00009AC4                                   14196 @@gen_label908 DS    0H
00009AC4                                   14197 @L1184   DS    0H
                                           14198 * ***           }
00009AC4                                   14199 @L1183   DS    0H
                                           14200 * ***
                                           14201 * ***           return rkbuf;
00009AC4 B904 00F3                         14202          LGR   15,3
                                           14203 * ***   }
                                           14204 * * **** Start of Epilogue
                                           14205          DCCEPIL
00009AC8                                   14206+         ds 0h                                                          01-DCCEP
                                           14207+* Epilog
                                                                                                                           Page  287 
  Active Usings: @REGION_1937_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00009AC8 D707 D088 D088 00000088 00000088  14208+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00009ACE E3D0 D080 0004          00000080  14209+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00009AD4 E3C0 D090 0004          00000090  14210+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00009ADA E3B0 C018 0004          00000018  14211+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00009AE0 E3C0 B010 0021          00000010  14212+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00009AE6 E3E0 D008 0004          00000008  14213+         lg  14,8(0,13)          load up return address                 01-DCCEP
00009AEC EB1C D020 0004          00000020  14214+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00009AF2 078E                              14215+         bcr 8,14                if same dsab, just return              01-DCCEP
00009AF4 E3F0 D010 0024          00000010  14216+         stg 15,16(0,13)         save return code                       01-DCCEP
00009AFA E300 D018 0024          00000018  14217+         stg 0,24(0,13)          save more return code                  01-DCCEP
00009B00 E3F0 D090 0004          00000090  14218+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00009B06 E3F0 F018 0004          00000018  14219+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00009B0C 47F0 F040               00000040  14220+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           14221+* End of Epilog
                                           14222 * * **** End of Epilogue
00009B10                                   14223          DS    0D
00009B10 000000C8                          14224 @FRAMESIZE_1937 DC F'200'
00009B14 00000000
00009B18 0000000000000000                  14225 @lit_1937_657 DC AD(rd_kafka_buf_new0)
00009B20 00000000000032F0                  14226 @lit_1937_658 DC AD(rd_kafka_buf_write_i32)
00009B28 00000000000031C8                  14227 @lit_1937_660 DC AD(rd_kafka_buf_write_i8)
                                           14228          DROP  12
                                           14229 *
                                           14230 *   DSECT for automatic variables in "rd_kafka_mock_buf_new_response"
                                           14231 *      (FUNCTION #1937)
                                           14232 *
00000000                00000000 000000A8  14233 @AUTO#rd_kafka_mock_buf_new_response DSECT
00000000                                   14234          DS    XL168
                                           14235 *
00009B30                00000000 00010480  14236 @CODE    CSECT
                                           14237 *
                                           14238 *
                                           14239 *
                                           14240 * ....... start of rd_kafka_mock_connection_parse_request
00009B30                                   14241 @LNAME1995 DS  0H
00009B30 00000026                          14242          DC    X'00000026'
00009B34 99846D9281869281                  14243          DC    C'rd_kafka_mock_connection_parse_r'
00009B54 8598A485A2A3                      14244          DC    C'equest'
00009B5A 00                                14245          DC    X'00'
                                           14246 rd_kafka_mock_connection_parse_request DCCPRLG CINDEX=1995,BASER=12,FRA*
                                                                ME=264,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1995
                                           14247          macro
                                           14248          dccextrn &m
                                           14249          gblc    &$dccext(1000)
                                           14250          gbla    &$dccexti
                                           14251          lcla    &i
                                           14252 &$dccext(&$dccexti+1) setc    '&m'
                                           14253 &i       seta    1
                                           14254 .loop    aif    (&i gt &$dccexti).around
                                           14255          aif    ('&$dccext(&i)' eq '&m').getout
                                           14256 &i       seta    &i+1
                                           14257          ago     .loop
                                                                                                                           Page  288 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14258 .around  anop
                                           14259 &$dccexti seta &$dccexti+1
                                           14260          extrn  &m
                                           14261 .getout  anop
                                           14262          mend
00009B60                                   14263+$eye0217    ds    0d                                                    02-DCCCA
00009B60 C4C3C3                            14264+         dc cl3'DCC'                                                    02-DCCCA
00009B63 01                                14265+         dc xl1'01' format one                                          02-DCCCA
00009B64 00000000                          14266+         dc a(0)                                                        02-DCCCA
00009B68 0000000000009BD2                  14267+         dc ad(@PER_1995)                                               02-DCCCA
00009B70 0000000000000108                  14268+         dc ad(264)                                                     02-DCCCA
00009B78 0000000000000000                  14269+         dc ad(0)                                                       02-DCCCA
00009B80 0000000000001000                  14270+         dc ad(4096)                                                    02-DCCCA
00009B88 20                                14271+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00009B89 03                                14272+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00009B8A 03                                14273+         dc al1(3)                                                      02-DCCCA
00009B8B 08                                14274+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00009B8C 00                                14275+         dc bl.8'00000000'                                              02-DCCCA
00009B8D 000000                            14276+         dc al3(0)                                                      02-DCCCA
00009B90 0000000000009B30                  14277+         dc ad(@LNAME1995)                                              02-DCCCA
00009B98                                   14278+         ds 0d                                                          02-DCCCA
00009B98 0000000000009B60                  14279+         dc ad($eye0217)                                                02-DCCCA
00009BA0 0000000000000000                  14280+         dc ad(0)                                                       02-DCCCA
00009BA8                                   14281+         ds    0d                                                       01-DCCPR
00009BA8                                   14282+rd_kafka_mock_connection_parse_request ds 0d                            01-DCCPR
00009BA8                                   14283+@REGION_1995_1 ds 0h                                                    01-DCCPR
00009BA8 EBEC D008 0024          00000008  14284+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00009BAE E3E0 D088 0004          00000088  14285+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00009BB4 E3C0 D090 0004          00000090  14286+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00009BBA B904 002E                         14287+         lgr   2,14                copy addr of our savearea            01-DCCPR
00009BBE E3B0 C018 0004          00000018  14288+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00009BC4 A7EB 0108               00000108  14289+         aghi  14,264              increase by frame size               01-DCCPR
00009BC8 E3E0 C020 0021          00000020  14290+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00009BCE 4720 B020               00000020  14291+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00009BD2                                   14292+@PER_1995 ds   0h                                                       01-DCCPR
00009BD2 EBDE 2080 0024          00000080  14293+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00009BD8 E3C0 2090 0024          00000090  14294+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00009BDE B904 00D2                         14295+         lgr   13,2                set real frame pointer               01-DCCPR
00009BE2 B904 00CF                         14296+         lgr   12,15               set base reg                         01-DCCPR
                        00009BA8           14297+         using @REGION_1995_1,12                                        01-DCCPR
                                           14298 * ******* End of Prologue
                                           14299 * *
                                           14300 * ***           rd_kafka_mock_cluster_t *mcluster = mconn->broker->clu\
                                           14301 * ster;
00009BE6 EB23 1000 0004          00000000  14302          LMG   2,3,0(1)    ; mconn
00009BEC E3F0 20A8 0004          000000A8  14303          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00009BF2 E340 F0D8 0004          000000D8  14304          LG    4,216(0,15) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
                                           14305 * ***           rd_kafka_t *rk = mcluster->rk;
00009BF8 E350 4020 0004          00000020  14306          LG    5,32(0,4)   ; offset of rk in rd_kafka_mock_cluster_s
                                           14307 * ***
                                                                                                                           Page  289 
  Active Usings: @REGION_1995_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14308 * ***           if (rkbuf->rkbuf_reqhdr.ApiKey < 0 ||
00009BFE 48F0 30B8               000000B8  14309          LH    15,184(0,3)
00009C02 12FF                              14310          LTR   15,15
00009C04 4740 C082               00009C2A  14311          BL    @L1187
                                           14312 * ***               rkbuf->rkbuf_reqhdr.ApiKey >= 59 ||
00009C08 48F0 30B8               000000B8  14313          LH    15,184(0,3)
00009C0C A7FE 003B               0000003B  14314          CHI   15,59
00009C10 47B0 C082               00009C2A  14315          BNL   @L1187
00009C14                                   14316 @L1185   DS    0H
                                           14317 * ***               !mcluster->api_handlers[rkbuf->rkbuf_reqhdr.ApiKey\
                                           14318 * ].cb) {
00009C14 E3F0 30B8 0015          000000B8  14319          LGH   15,184(0,3)
00009C1A EBFF 0004 000D          00000004  14320          SLLG  15,15,4(0)  ; *0x10
00009C20 E3FF 4110 0002          00000110  14321          LTG   15,272(15,4) ; offset of cb in rd_kafka_mock_api_handler
00009C26 4770 C168               00009D10  14322          BNZ   @L1186
00009C2A                                   14323 @L1187   DS    0H
                                           14324 * ***                   rd_kafka_log0(&rk->rk_conf, rk, ((void *)0), 3\
                                           14325 * , 0x0, "MOCK", "Broker %" "d" ": unsupported %sRequestV%hd " "from %\
                                           14326 * s", mconn->broker->id, rd_kafka_ApiKey2str(rkbuf->rkbuf_reqhdr.ApiKe\
                                           14327 * y), rkbuf->rkbuf_reqhdr.ApiVersion, rd_sockaddr2str(&mconn->peer, 0x\
                                           14328 * 1));
00009C2A E3F0 30B8 0015          000000B8  14329          LGH   15,184(0,3)
00009C30 E3F0 D0B0 0024          000000B0  14330          STG   15,176(0,13)
00009C36 4110 D0B0               000000B0  14331          LA    1,176(0,13)
00009C3A E3F0 C140 0004          00009CE8  14332          LG    15,@lit_1995_662 ; rd_kafka_ApiKey2str
00009C40                                   14333 @@gen_label912 DS    0H
00009C40 05EF                              14334          BALR  14,15
00009C42                                   14335 @@gen_label913 DS    0H
00009C42 B904 004F                         14336          LGR   4,15
00009C46 41F0 2098               00000098  14337          LA    15,152(0,2)
00009C4A E3F0 D0B0 0024          000000B0  14338          STG   15,176(0,13)
00009C50 E548 D0B8 0001          000000B8  14339          MVGHI 184(13),1
00009C56 4110 D0B0               000000B0  14340          LA    1,176(0,13)
00009C5A E3F0 C148 0004          00009CF0  14341          LG    15,@lit_1995_663 ; rd_sockaddr2str
00009C60                                   14342 @@gen_label914 DS    0H
00009C60 05EF                              14343          BALR  14,15
00009C62                                   14344 @@gen_label915 DS    0H
00009C62 4110 5210               00000210  14345          LA    1,528(0,5)
00009C66 E310 D0B0 0024          000000B0  14346          STG   1,176(0,13)
00009C6C E350 D0B8 0024          000000B8  14347          STG   5,184(0,13)
00009C72 D707 D0C0 D0C0 000000C0 000000C0  14348          XC    192(8,13),192(13)
00009C78 E548 D0C8 0003          000000C8  14349          MVGHI 200(13),3
00009C7E D707 D0D0 D0D0 000000D0 000000D0  14350          XC    208(8,13),208(13)
00009C84 E310 C158 0004          00009D00  14351          LG    1,@lit_1995_664
00009C8A 4150 115E               0000015E  14352          LA    5,350(0,1)
00009C8E E350 D0D8 0024          000000D8  14353          STG   5,216(0,13)
00009C94 4110 156E               0000056E  14354          LA    1,1390(0,1)
00009C98 E310 D0E0 0024          000000E0  14355          STG   1,224(0,13)
00009C9E E310 20A8 0004          000000A8  14356          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00009CA4 E310 1010 0014          00000010  14357          LGF   1,16(0,1)
00009CAA E310 D0E8 0024          000000E8  14358          STG   1,232(0,13)
                                                                                                                           Page  290 
  Active Usings: @REGION_1995_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00009CB0 E340 D0F0 0024          000000F0  14359          STG   4,240(0,13)
00009CB6 4810 30BA               000000BA  14360          LH    1,186(0,3)
00009CBA B914 0011                         14361          LGFR  1,1
00009CBE E310 D0F8 0024          000000F8  14362          STG   1,248(0,13)
00009CC4 E3F0 D100 0024          00000100  14363          STG   15,256(0,13)
00009CCA 4110 D0B0               000000B0  14364          LA    1,176(0,13)
00009CCE E3F0 C150 0004          00009CF8  14365          LG    15,@lit_1995_665 ; rd_kafka_log0
00009CD4                                   14366 @@gen_label916 DS    0H
00009CD4 05EF                              14367          BALR  14,15
00009CD6                                   14368 @@gen_label917 DS    0H
                                           14369 * ***   # 906 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           14370 * ***                   return -1;
00009CD6 A7F9 FFFF               0000FFFF  14371          LGHI  15,-1       ; -1
00009CDA 47F0 C33A               00009EE2  14372          B     @ret_lab_1995
00009CE0                                   14373          DS    0D
00009CE0 00000108                          14374 @FRAMESIZE_1995 DC F'264'
00009CE4 00000000
00009CE8 0000000000001310                  14375 @lit_1995_662 DC AD(rd_kafka_$Api$Key2str)
00009CF0 0000000000000000                  14376 @lit_1995_663 DC AD(rd_sockaddr2str)
00009CF8 0000000000000000                  14377 @lit_1995_665 DC AD(rd_kafka_log0)
00009D00 0000000000010840                  14378 @lit_1995_664 DC AD(@strings@)
00009D08 0000000000003568                  14379 @lit_1995_667 DC AD(rd_kafka_mock_cluster_$Api$Version_check)
                                           14380 * ***           }
00009D10                                   14381 @L1186   DS    0H
                                           14382 * ***
                                           14383 * ***
                                           14384 * ***
                                           14385 * ***           if (rkbuf->rkbuf_reqhdr.ApiKey != 18 &&
00009D10 48F0 30B8               000000B8  14386          LH    15,184(0,3)
00009D14 A7FE 0012               00000012  14387          CHI   15,18
00009D18 4780 C25E               00009E06  14388          BE    @L1189
                                           14389 * ***               !rd_kafka_mock_cluster_ApiVersion_check(
                                           14390 * ***                       mcluster,
                                           14391 * ***                       rkbuf->rkbuf_reqhdr.ApiKey,
                                           14392 * ***                       rkbuf->rkbuf_reqhdr.ApiVersion)) {
00009D1C E340 D0B0 0024          000000B0  14393          STG   4,176(0,13)
00009D22 E3F0 30B8 0015          000000B8  14394          LGH   15,184(0,3)
00009D28 E3F0 D0B8 0024          000000B8  14395          STG   15,184(0,13)
00009D2E E3F0 30BA 0015          000000BA  14396          LGH   15,186(0,3)
00009D34 E3F0 D0C0 0024          000000C0  14397          STG   15,192(0,13)
00009D3A 4110 D0B0               000000B0  14398          LA    1,176(0,13)
00009D3E E3F0 C160 0004          00009D08  14399          LG    15,@lit_1995_667 ; rd_kafka_mock_cluster_ApiVersion_chec*
                                                                k
00009D44                                   14400 @@gen_label919 DS    0H
00009D44 05EF                              14401          BALR  14,15
00009D46                                   14402 @@gen_label920 DS    0H
00009D46 C0FB 0000 00FF                    14403          NILF  15,X'000000FF'
00009D4C 12FF                              14404          LTR   15,15
00009D4E 4770 C25E               00009E06  14405          BNZ   @L1189
                                           14406 * ***                   rd_kafka_log0(&rk->rk_conf, rk, ((void *)0), 3\
                                           14407 * , 0x0, "MOCK", "Broker %" "d" ": unsupported %sRequest " "version %h\
                                           14408 * d from %s", mconn->broker->id, rd_kafka_ApiKey2str(rkbuf->rkbuf_reqh\
                                                                                                                           Page  291 
  Active Usings: @REGION_1995_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14409 * dr.ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion, rd_sockaddr2str(&mconn->\
                                           14410 * peer, 0x1));
00009D52 E3F0 30B8 0015          000000B8  14411          LGH   15,184(0,3)
00009D58 E3F0 D0B0 0024          000000B0  14412          STG   15,176(0,13)
00009D5E 4110 D0B0               000000B0  14413          LA    1,176(0,13)
00009D62 E3F0 C140 0004          00009CE8  14414          LG    15,@lit_1995_662 ; rd_kafka_ApiKey2str
00009D68                                   14415 @@gen_label922 DS    0H
00009D68 05EF                              14416          BALR  14,15
00009D6A                                   14417 @@gen_label923 DS    0H
00009D6A B904 004F                         14418          LGR   4,15
00009D6E 41F0 2098               00000098  14419          LA    15,152(0,2)
00009D72 E3F0 D0B0 0024          000000B0  14420          STG   15,176(0,13)
00009D78 E548 D0B8 0001          000000B8  14421          MVGHI 184(13),1
00009D7E 4110 D0B0               000000B0  14422          LA    1,176(0,13)
00009D82 E3F0 C148 0004          00009CF0  14423          LG    15,@lit_1995_663 ; rd_sockaddr2str
00009D88                                   14424 @@gen_label924 DS    0H
00009D88 05EF                              14425          BALR  14,15
00009D8A                                   14426 @@gen_label925 DS    0H
00009D8A 4110 5210               00000210  14427          LA    1,528(0,5)
00009D8E E310 D0B0 0024          000000B0  14428          STG   1,176(0,13)
00009D94 E350 D0B8 0024          000000B8  14429          STG   5,184(0,13)
00009D9A D707 D0C0 D0C0 000000C0 000000C0  14430          XC    192(8,13),192(13)
00009DA0 E548 D0C8 0003          000000C8  14431          MVGHI 200(13),3
00009DA6 D707 D0D0 D0D0 000000D0 000000D0  14432          XC    208(8,13),208(13)
00009DAC E310 C158 0004          00009D00  14433          LG    1,@lit_1995_664
00009DB2 4150 115E               0000015E  14434          LA    5,350(0,1)
00009DB6 E350 D0D8 0024          000000D8  14435          STG   5,216(0,13)
00009DBC 4110 159C               0000059C  14436          LA    1,1436(0,1)
00009DC0 E310 D0E0 0024          000000E0  14437          STG   1,224(0,13)
00009DC6 E310 20A8 0004          000000A8  14438          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00009DCC E310 1010 0014          00000010  14439          LGF   1,16(0,1)
00009DD2 E310 D0E8 0024          000000E8  14440          STG   1,232(0,13)
00009DD8 E340 D0F0 0024          000000F0  14441          STG   4,240(0,13)
00009DDE 4810 30BA               000000BA  14442          LH    1,186(0,3)
00009DE2 B914 0011                         14443          LGFR  1,1
00009DE6 E310 D0F8 0024          000000F8  14444          STG   1,248(0,13)
00009DEC E3F0 D100 0024          00000100  14445          STG   15,256(0,13)
00009DF2 4110 D0B0               000000B0  14446          LA    1,176(0,13)
00009DF6 E3F0 C150 0004          00009CF8  14447          LG    15,@lit_1995_665 ; rd_kafka_log0
00009DFC                                   14448 @@gen_label926 DS    0H
00009DFC 05EF                              14449          BALR  14,15
00009DFE                                   14450 @@gen_label927 DS    0H
                                           14451 * ***   # 924 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           14452 * ***                   return -1;
00009DFE A7F9 FFFF               0000FFFF  14453          LGHI  15,-1       ; -1
00009E02 47F0 C33A               00009EE2  14454          B     @ret_lab_1995
                                           14455 * ***           }
                                           14456 * ***
                                           14457 * ***           do { if ((((rk)->rk_conf.debug & (0x10000)))) rd_kafka\
                                           14458 * _log0(&rk->rk_conf,rk,((void *)0), 7,(0x10000), "MOCK","Broker %" "d\
                                           14459 * " ": Received %sRequestV%hd from %s", mconn->broker->id, rd_kafka_Ap\
                                                                                                                           Page  292 
  Active Usings: @REGION_1995_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14460 * iKey2str(rkbuf->rkbuf_reqhdr.ApiKey), rkbuf->rkbuf_reqhdr.ApiVersion\
                                           14461 * , rd_sockaddr2str(&mconn->peer, 0x1)); } while (0);
00009E06                                   14462 @L1189   DS    0H
00009E06 9101 5321      00000321 00000001  14463          TM    801(5),1
00009E0A 4780 C318               00009EC0  14464          BZ    @L1192
00009E0E E3F0 30B8 0015          000000B8  14465          LGH   15,184(0,3)
00009E14 E3F0 D0B0 0024          000000B0  14466          STG   15,176(0,13)
00009E1A 4110 D0B0               000000B0  14467          LA    1,176(0,13)
00009E1E E3F0 C140 0004          00009CE8  14468          LG    15,@lit_1995_662 ; rd_kafka_ApiKey2str
00009E24                                   14469 @@gen_label929 DS    0H
00009E24 05EF                              14470          BALR  14,15
00009E26                                   14471 @@gen_label930 DS    0H
00009E26 B904 006F                         14472          LGR   6,15
00009E2A 41F0 2098               00000098  14473          LA    15,152(0,2)
00009E2E E3F0 D0B0 0024          000000B0  14474          STG   15,176(0,13)
00009E34 E548 D0B8 0001          000000B8  14475          MVGHI 184(13),1
00009E3A 4110 D0B0               000000B0  14476          LA    1,176(0,13)
00009E3E E3F0 C148 0004          00009CF0  14477          LG    15,@lit_1995_663 ; rd_sockaddr2str
00009E44                                   14478 @@gen_label931 DS    0H
00009E44 05EF                              14479          BALR  14,15
00009E46                                   14480 @@gen_label932 DS    0H
00009E46 4110 5210               00000210  14481          LA    1,528(0,5)
00009E4A E310 D0B0 0024          000000B0  14482          STG   1,176(0,13)
00009E50 E350 D0B8 0024          000000B8  14483          STG   5,184(0,13)
00009E56 D707 D0C0 D0C0 000000C0 000000C0  14484          XC    192(8,13),192(13)
00009E5C E548 D0C8 0007          000000C8  14485          MVGHI 200(13),7
00009E62 C01F 0001 0000                    14486          LLILF 1,X'00010000' ; 65536
00009E68 E310 D0D0 0024          000000D0  14487          STG   1,208(0,13)
00009E6E E310 C158 0004          00009D00  14488          LG    1,@lit_1995_664
00009E74 4150 115E               0000015E  14489          LA    5,350(0,1)
00009E78 E350 D0D8 0024          000000D8  14490          STG   5,216(0,13)
00009E7E 4110 15D2               000005D2  14491          LA    1,1490(0,1)
00009E82 E310 D0E0 0024          000000E0  14492          STG   1,224(0,13)
00009E88 E310 20A8 0004          000000A8  14493          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00009E8E E310 1010 0014          00000010  14494          LGF   1,16(0,1)
00009E94 E310 D0E8 0024          000000E8  14495          STG   1,232(0,13)
00009E9A E360 D0F0 0024          000000F0  14496          STG   6,240(0,13)
00009EA0 4810 30BA               000000BA  14497          LH    1,186(0,3)
00009EA4 B914 0011                         14498          LGFR  1,1
00009EA8 E310 D0F8 0024          000000F8  14499          STG   1,248(0,13)
00009EAE E3F0 D100 0024          00000100  14500          STG   15,256(0,13)
00009EB4 4110 D0B0               000000B0  14501          LA    1,176(0,13)
00009EB8 E3F0 C150 0004          00009CF8  14502          LG    15,@lit_1995_665 ; rd_kafka_log0
00009EBE                                   14503 @@gen_label933 DS    0H
00009EBE 05EF                              14504          BALR  14,15
00009EC0                                   14505 @@gen_label934 DS    0H
00009EC0                                   14506 @L1192   DS    0H
                                           14507 * ***
                                           14508 * ***   # 934 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           14509 * ***           return mcluster->api_handlers[rkbuf->rkbuf_reqhdr.ApiK\
                                           14510 * ey].cb(mconn,
                                                                                                                           Page  293 
  Active Usings: @REGION_1995_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14511 * ***                                                                 \
                                           14512 *        rkbuf);
00009EC0 EB23 D0B0 0024          000000B0  14513          STMG  2,3,176(13)
00009EC6 E3F0 30B8 0015          000000B8  14514          LGH   15,184(0,3)
00009ECC EBFF 0004 000D          00000004  14515          SLLG  15,15,4(0)  ; *0x10
00009ED2 E3FF 4110 0004          00000110  14516          LG    15,272(15,4) ; offset of cb in rd_kafka_mock_api_handler
00009ED8 4110 D0B0               000000B0  14517          LA    1,176(0,13)
00009EDC                                   14518 @@gen_label935 DS    0H
00009EDC 05EF                              14519          BALR  14,15
00009EDE                                   14520 @@gen_label936 DS    0H
00009EDE B914 00FF                         14521          LGFR  15,15
                                           14522 * ***   }
00009EE2                                   14523 @ret_lab_1995 DS 0H
                                           14524 * * **** Start of Epilogue
                                           14525          DCCEPIL
00009EE2                                   14526+         ds 0h                                                          01-DCCEP
                                           14527+* Epilog
00009EE2 D707 D088 D088 00000088 00000088  14528+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
00009EE8 E3D0 D080 0004          00000080  14529+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00009EEE E3C0 D090 0004          00000090  14530+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00009EF4 E3B0 C018 0004          00000018  14531+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
00009EFA E3C0 B010 0021          00000010  14532+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
00009F00 E3E0 D008 0004          00000008  14533+         lg  14,8(0,13)          load up return address                 01-DCCEP
00009F06 EB1C D020 0004          00000020  14534+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
00009F0C 078E                              14535+         bcr 8,14                if same dsab, just return              01-DCCEP
00009F0E E3F0 D010 0024          00000010  14536+         stg 15,16(0,13)         save return code                       01-DCCEP
00009F14 E300 D018 0024          00000018  14537+         stg 0,24(0,13)          save more return code                  01-DCCEP
00009F1A E3F0 D090 0004          00000090  14538+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
00009F20 E3F0 F018 0004          00000018  14539+         lg  15,24(0,15)         load dvt address                       01-DCCEP
00009F26 47F0 F040               00000040  14540+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           14541+* End of Epilog
                                           14542 * * **** End of Epilogue
                                           14543          DROP  12
                                           14544 *
                                           14545 *   DSECT for automatic variables in "rd_kafka_mock_connection_parse_r
                                           14546 *           equest"
                                           14547 *      (FUNCTION #1995)
                                           14548 *
00000000                00000000 000000A8  14549 @AUTO#rd_kafka_mock_connection_parse_request DSECT
00000000                                   14550          DS    XL168
                                           14551 *
00009F2A                00000000 00010480  14552 @CODE    CSECT
                                           14553 *
                                           14554 *
                                           14555 *
                                           14556 * ....... start of rd_kafka_mock_connection_write_out_tmr_cb
00009F2A                                   14557 @LNAME1996 DS  0H
00009F2A 00000029                          14558          DC    X'00000029'
00009F2E 99846D9281869281                  14559          DC    C'rd_kafka_mock_connection_write_o'
00009F4E A4A36DA394996D83                  14560          DC    C'ut_tmr_cb'
00009F57 00                                14561          DC    X'00'
                                           14562 rd_kafka_mock_connection_write_out_tmr_cb DCCPRLG CINDEX=1996,BASER=12,*
                                                                                                                           Page  294 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                FRAME=200,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1996
                                           14563          macro
                                           14564          dccextrn &m
                                           14565          gblc    &$dccext(1000)
                                           14566          gbla    &$dccexti
                                           14567          lcla    &i
                                           14568 &$dccext(&$dccexti+1) setc    '&m'
                                           14569 &i       seta    1
                                           14570 .loop    aif    (&i gt &$dccexti).around
                                           14571          aif    ('&$dccext(&i)' eq '&m').getout
                                           14572 &i       seta    &i+1
                                           14573          ago     .loop
                                           14574 .around  anop
                                           14575 &$dccexti seta &$dccexti+1
                                           14576          extrn  &m
                                           14577 .getout  anop
                                           14578          mend
00009F58                                   14579+$eye0220    ds    0d                                                    02-DCCCA
00009F58 C4C3C3                            14580+         dc cl3'DCC'                                                    02-DCCCA
00009F5B 01                                14581+         dc xl1'01' format one                                          02-DCCCA
00009F5C 00000000                          14582+         dc a(0)                                                        02-DCCCA
00009F60 0000000000009FCA                  14583+         dc ad(@PER_1996)                                               02-DCCCA
00009F68 00000000000000C8                  14584+         dc ad(200)                                                     02-DCCCA
00009F70 0000000000000000                  14585+         dc ad(0)                                                       02-DCCCA
00009F78 0000000000001000                  14586+         dc ad(4096)                                                    02-DCCCA
00009F80 20                                14587+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00009F81 03                                14588+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00009F82 03                                14589+         dc al1(3)                                                      02-DCCCA
00009F83 08                                14590+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00009F84 00                                14591+         dc bl.8'00000000'                                              02-DCCCA
00009F85 000000                            14592+         dc al3(0)                                                      02-DCCCA
00009F88 0000000000009F2A                  14593+         dc ad(@LNAME1996)                                              02-DCCCA
00009F90                                   14594+         ds 0d                                                          02-DCCCA
00009F90 0000000000009F58                  14595+         dc ad($eye0220)                                                02-DCCCA
00009F98 0000000000000000                  14596+         dc ad(0)                                                       02-DCCCA
00009FA0                                   14597+         ds    0d                                                       01-DCCPR
00009FA0                                   14598+rd_kafka_mock_connection_write_out_tmr_cb ds 0d                         01-DCCPR
00009FA0                                   14599+@REGION_1996_1 ds 0h                                                    01-DCCPR
00009FA0 EBEC D008 0024          00000008  14600+         stmg  14,12,8(13)                         Save regs            01-DCCPR
00009FA6 E3E0 D088 0004          00000088  14601+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
00009FAC E3C0 D090 0004          00000090  14602+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
00009FB2 B904 002E                         14603+         lgr   2,14                copy addr of our savearea            01-DCCPR
00009FB6 E3B0 C018 0004          00000018  14604+         lg    11,24(0,12)         get dvt address                      01-DCCPR
00009FBC A7EB 00C8               000000C8  14605+         aghi  14,200              increase by frame size               01-DCCPR
00009FC0 E3E0 C020 0021          00000020  14606+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
00009FC6 4720 B020               00000020  14607+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
00009FCA                                   14608+@PER_1996 ds   0h                                                       01-DCCPR
00009FCA EBDE 2080 0024          00000080  14609+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
00009FD0 E3C0 2090 0024          00000090  14610+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
00009FD6 B904 00D2                         14611+         lgr   13,2                set real frame pointer               01-DCCPR
00009FDA B904 00CF                         14612+         lgr   12,15               set base reg                         01-DCCPR
                        00009FA0           14613+         using @REGION_1996_1,12                                        01-DCCPR
                                                                                                                           Page  295 
  Active Usings: @REGION_1996_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14614 * ******* End of Prologue
                                           14615 * *
                                           14616 * ***           rd_kafka_mock_connection_t *mconn = arg;
00009FDE E3F0 1008 0004          00000008  14617          LG    15,8(0,1)   ; arg
                                           14618 * ***
                                           14619 * ***           rd_kafka_mock_cluster_io_set_events(mconn->broker->clu\
                                           14620 * ster,
                                           14621 * ***                                               mconn->transport->\
                                           14622 * rktrans_s,
                                           14623 * ***                                               0x0004);
00009FE4 E310 F0A8 0004          000000A8  14624          LG    1,168(0,15) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
00009FEA E310 10D8 0004          000000D8  14625          LG    1,216(0,1)
00009FF0 E310 D0B0 0024          000000B0  14626          STG   1,176(0,13)
00009FF6 E3F0 F010 0004          00000010  14627          LG    15,16(0,15) ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
00009FFC E3F0 F000 0014          00000000  14628          LGF   15,0(0,15)
0000A002 E3F0 D0B8 0024          000000B8  14629          STG   15,184(0,13)
0000A008 E548 D0C0 0004          000000C0  14630          MVGHI 192(13),4
0000A00E 4110 D0B0               000000B0  14631          LA    1,176(0,13)
0000A012 E3F0 C0D0 0004          0000A070  14632          LG    15,@lit_1996_679 ; rd_kafka_mock_cluster_io_set_events
0000A018                                   14633 @@gen_label937 DS    0H
0000A018 05EF                              14634          BALR  14,15
0000A01A                                   14635 @@gen_label938 DS    0H
                                           14636 * ***   }
0000A01A                                   14637 @ret_lab_1996 DS 0H
                                           14638 * * **** Start of Epilogue
                                           14639          DCCEPIL
0000A01A                                   14640+         ds 0h                                                          01-DCCEP
                                           14641+* Epilog
0000A01A D707 D088 D088 00000088 00000088  14642+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000A020 E3D0 D080 0004          00000080  14643+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000A026 E3C0 D090 0004          00000090  14644+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000A02C E3B0 C018 0004          00000018  14645+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000A032 E3C0 B010 0021          00000010  14646+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000A038 E3E0 D008 0004          00000008  14647+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000A03E EB1C D020 0004          00000020  14648+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000A044 078E                              14649+         bcr 8,14                if same dsab, just return              01-DCCEP
0000A046 E3F0 D010 0024          00000010  14650+         stg 15,16(0,13)         save return code                       01-DCCEP
0000A04C E300 D018 0024          00000018  14651+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000A052 E3F0 D090 0004          00000090  14652+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000A058 E3F0 F018 0004          00000018  14653+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000A05E 47F0 F040               00000040  14654+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           14655+* End of Epilog
                                           14656 * * **** End of Epilogue
0000A068                                   14657          DS    0D
0000A068 000000C8                          14658 @FRAMESIZE_1996 DC F'200'
0000A06C 00000000
0000A070 0000000000005FE8                  14659 @lit_1996_679 DC AD(rd_kafka_mock_cluster_io_set_events)
                                           14660          DROP  12
                                           14661 *
                                           14662 *   DSECT for automatic variables in "rd_kafka_mock_connection_write_o
                                                                                                                           Page  296 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14663 *           ut_tmr_cb"
                                           14664 *      (FUNCTION #1996)
                                           14665 *
00000000                00000000 000000A8  14666 @AUTO#rd_kafka_mock_connection_write_out_tmr_cb DSECT
00000000                                   14667          DS    XL168
                                           14668 *
0000A078                00000000 00010480  14669 @CODE    CSECT
                                           14670 *
                                           14671 *
                                           14672 *
                                           14673 * ....... start of rd_kafka_mock_connection_write_out
0000A078                                   14674 @LNAME1997 DS  0H
0000A078 00000022                          14675          DC    X'00000022'
0000A07C 99846D9281869281                  14676          DC    C'rd_kafka_mock_connection_write_o'
0000A09C A4A3                              14677          DC    C'ut'
0000A09E 00                                14678          DC    X'00'
                                           14679 rd_kafka_mock_connection_write_out DCCPRLG CINDEX=1997,BASER=12,FRAME=3*
                                                                52,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1997
                                           14680          macro
                                           14681          dccextrn &m
                                           14682          gblc    &$dccext(1000)
                                           14683          gbla    &$dccexti
                                           14684          lcla    &i
                                           14685 &$dccext(&$dccexti+1) setc    '&m'
                                           14686 &i       seta    1
                                           14687 .loop    aif    (&i gt &$dccexti).around
                                           14688          aif    ('&$dccext(&i)' eq '&m').getout
                                           14689 &i       seta    &i+1
                                           14690          ago     .loop
                                           14691 .around  anop
                                           14692 &$dccexti seta &$dccexti+1
                                           14693          extrn  &m
                                           14694 .getout  anop
                                           14695          mend
0000A0A0                                   14696+$eye0223    ds    0d                                                    02-DCCCA
0000A0A0 C4C3C3                            14697+         dc cl3'DCC'                                                    02-DCCCA
0000A0A3 01                                14698+         dc xl1'01' format one                                          02-DCCCA
0000A0A4 00000000                          14699+         dc a(0)                                                        02-DCCCA
0000A0A8 000000000000A112                  14700+         dc ad(@PER_1997)                                               02-DCCCA
0000A0B0 0000000000000160                  14701+         dc ad(352)                                                     02-DCCCA
0000A0B8 0000000000000000                  14702+         dc ad(0)                                                       02-DCCCA
0000A0C0 0000000000001000                  14703+         dc ad(4096)                                                    02-DCCCA
0000A0C8 20                                14704+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000A0C9 03                                14705+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000A0CA 03                                14706+         dc al1(3)                                                      02-DCCCA
0000A0CB 08                                14707+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000A0CC 00                                14708+         dc bl.8'00000000'                                              02-DCCCA
0000A0CD 000000                            14709+         dc al3(0)                                                      02-DCCCA
0000A0D0 000000000000A078                  14710+         dc ad(@LNAME1997)                                              02-DCCCA
0000A0D8                                   14711+         ds 0d                                                          02-DCCCA
0000A0D8 000000000000A0A0                  14712+         dc ad($eye0223)                                                02-DCCCA
0000A0E0 0000000000000000                  14713+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page  297 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A0E8                                   14714+         ds    0d                                                       01-DCCPR
0000A0E8                                   14715+rd_kafka_mock_connection_write_out ds 0d                                01-DCCPR
0000A0E8                                   14716+@REGION_1997_1 ds 0h                                                    01-DCCPR
0000A0E8 EBEC D008 0024          00000008  14717+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000A0EE E3E0 D088 0004          00000088  14718+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000A0F4 E3C0 D090 0004          00000090  14719+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000A0FA B904 002E                         14720+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000A0FE E3B0 C018 0004          00000018  14721+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000A104 A7EB 0160               00000160  14722+         aghi  14,352              increase by frame size               01-DCCPR
0000A108 E3E0 C020 0021          00000020  14723+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000A10E 4720 B020               00000020  14724+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000A112                                   14725+@PER_1997 ds   0h                                                       01-DCCPR
0000A112 EBDE 2080 0024          00000080  14726+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000A118 E3C0 2090 0024          00000090  14727+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000A11E B904 00D2                         14728+         lgr   13,2                set real frame pointer               01-DCCPR
0000A122 B904 00CF                         14729+         lgr   12,15               set base reg                         01-DCCPR
                        0000A0E8           14730+         using @REGION_1997_1,12                                        01-DCCPR
                                           14731 * ******* End of Prologue
                                           14732 * *
0000A126 E320 1000 0004          00000000  14733          LG    2,0(0,1)    ; mconn
                                           14734 * ***           rd_kafka_buf_t *rkbuf;
                                           14735 * ***           rd_ts_t now = rd_clock();
0000A12C E3F0 C068 0004          0000A150  14736          LG    15,@lit_1997_681 ; rd_clock
0000A132                                   14737 @@gen_label939 DS    0H
0000A132 05EF                              14738          BALR  14,15
0000A134                                   14739 @@gen_label940 DS    0H
0000A134 B904 004F                         14740          LGR   4,15
                                           14741 * ***           rd_ts_t rtt = mconn->broker->rtt;
0000A138 E3F0 20A8 0004          000000A8  14742          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
0000A13E E350 F0A8 0004          000000A8  14743          LG    5,168(0,15) ; offset of rtt in rd_kafka_mock_broker_s
                                           14744 * ***
                                           14745 * ***           while ((rkbuf = ((&mconn->outbufs.rkbq_bufs)->tqh_firs\
                                           14746 * t))) {
0000A144 47F0 C214               0000A2FC  14747          B     @L1196
0000A148                                   14748          DS    0D
0000A148 00000160                          14749 @FRAMESIZE_1997 DC F'352'
0000A14C 00000000
0000A150 0000000000000F68                  14750 @lit_1997_681 DC AD(rd_clock)
0000A158 0000000000000000                  14751 @lit_1997_684 DC AD(rd_kafka_timer_start0)
0000A160 0000000000009FA0                  14752 @lit_1997_683 DC AD(rd_kafka_mock_connection_write_out_tmr_cb)
0000A168 0000000000000000                  14753 @lit_1997_685 DC AD(rd_kafka_transport_send)
0000A170 00000000000011B0                  14754 @lit_1997_687 DC AD(rd_slice_abs_offset)
0000A178 0000000000000000                  14755 @lit_1997_689 DC AD(rd_kafka_bufq_deq)
0000A180 0000000000000DF0                  14756 @lit_1997_690 DC AD(rd_refcnt_sub0)
0000A188 0000000000000000                  14757 @lit_1997_691 DC AD(rd_kafka_buf_destroy_final)
0000A190 0000000000006390                  14758 @lit_1997_692 DC AD(rd_kafka_mock_cluster_io_clear_events)
0000A198                                   14759 @L1195   DS    0H
                                           14760 * ***                   ssize_t r;
                                           14761 * ***                   char errstr[128];
                                           14762 * ***                   rd_ts_t ts_delay = 0;
0000A198 A769 0000               00000000  14763          LGHI  6,0         ; 0
                                                                                                                           Page  298 
  Active Usings: @REGION_1997_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A19C B904 00F6                         14764          LGR   15,6        ; ts_delay
                                           14765 * ***
                                           14766 * ***
                                           14767 * ***                   if (rkbuf->rkbuf_ts_sent + rtt > now)
0000A1A0 B904 0015                         14768          LGR   1,5
0000A1A4 E310 3158 0008          00000158  14769          AG    1,344(0,3)
0000A1AA B920 0014                         14770          CGR   1,4
0000A1AE 47D0 C0D4               0000A1BC  14771          BNH   @L1197
                                           14772 * ***                           ts_delay = rkbuf->rkbuf_ts_sent + rtt;
0000A1B2 B904 00F5                         14773          LGR   15,5
0000A1B6 E3F0 3158 0008          00000158  14774          AG    15,344(0,3)
0000A1BC                                   14775 @L1197   DS    0H
                                           14776 * ***
                                           14777 * ***
                                           14778 * ***                   if (rkbuf->rkbuf_ts_retry && rkbuf->rkbuf_ts_r\
                                           14779 * etry > now)
0000A1BC E310 3018 0002          00000018  14780          LTG   1,24(0,3)   ; offset of rkbuf_ts_retry in rd_kafka_buf_s
0000A1C2 4780 C0F6               0000A1DE  14781          BZ    @L1198
0000A1C6 E310 3018 0004          00000018  14782          LG    1,24(0,3)   ; offset of rkbuf_ts_retry in rd_kafka_buf_s
0000A1CC B920 0014                         14783          CGR   1,4
0000A1D0 47D0 C0F6               0000A1DE  14784          BNH   @L1198
                                           14785 * ***                           ts_delay = rkbuf->rkbuf_ts_retry + rtt\
                                           14786 * ;
0000A1D4 B904 00F5                         14787          LGR   15,5
0000A1D8 E3F0 3018 0008          00000018  14788          AG    15,24(0,3)
0000A1DE                                   14789 @L1198   DS    0H
                                           14790 * ***
                                           14791 * ***                   if (ts_delay) {
0000A1DE B902 001F                         14792          LTGR  1,15
0000A1E2 4780 C156               0000A23E  14793          BZ    @L1199
                                           14794 * ***
                                           14795 * ***                           rd_kafka_timer_start0(&mconn->broker->\
                                           14796 * cluster->timers,&mconn->write_tmr,ts_delay-now,1,0,rd_kafka_mock_con\
                                           14797 * nection_write_out_tmr_cb,mconn);
0000A1E6 E310 20A8 0004          000000A8  14798          LG    1,168(0,2)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
0000A1EC E310 10D8 0004          000000D8  14799          LG    1,216(0,1)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000A1F2 4110 14E0               000004E0  14800          LA    1,1248(0,1)
0000A1F6 E310 D128 0024          00000128  14801          STG   1,296(0,13)
0000A1FC 4110 20B0               000000B0  14802          LA    1,176(0,2)
0000A200 E310 D130 0024          00000130  14803          STG   1,304(0,13)
0000A206 B909 00F4                         14804          SGR   15,4
0000A20A E3F0 D138 0024          00000138  14805          STG   15,312(0,13)
0000A210 E548 D140 0001          00000140  14806          MVGHI 320(13),1
0000A216 D707 D148 D148 00000148 00000148  14807          XC    328(8,13),328(13)
0000A21C E3F0 C078 0004          0000A160  14808          LG    15,@lit_1997_683 ; rd_kafka_mock_connection_write_out_tm*
                                                                r_cb
0000A222 E3F0 D150 0024          00000150  14809          STG   15,336(0,13)
0000A228 E320 D158 0024          00000158  14810          STG   2,344(0,13)
0000A22E 4110 D128               00000128  14811          LA    1,296(0,13)
0000A232 E3F0 C070 0004          0000A158  14812          LG    15,@lit_1997_684 ; rd_kafka_timer_start0
                                                                                                                           Page  299 
  Active Usings: @REGION_1997_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A238                                   14813 @@gen_label945 DS    0H
0000A238 05EF                              14814          BALR  14,15
0000A23A                                   14815 @@gen_label946 DS    0H
                                           14816 * ***   # 987 "C:\asgkafka\librdkafka\src\rdkafka_mock.c"
                                           14817 * ***                           break;
0000A23A 47F0 C222               0000A30A  14818          B     @L1193
                                           14819 * ***                   }
0000A23E                                   14820 @L1199   DS    0H
                                           14821 * ***
                                           14822 * ***                   if ((r = rd_kafka_transport_send(mconn->transp\
                                           14823 * ort,
                                           14824 * ***                                                    &rkbuf->rkbuf\
                                           14825 * _reader,
                                           14826 * ***                                                    errstr,
                                           14827 * ***                                                    sizeof(errstr\
                                           14828 * ))) == -1)
0000A23E E3F0 2010 0004          00000010  14829          LG    15,16(0,2)
0000A244 E3F0 D128 0024          00000128  14830          STG   15,296(0,13)
0000A24A 41F0 3078               00000078  14831          LA    15,120(0,3)
0000A24E E3F0 D130 0024          00000130  14832          STG   15,304(0,13)
0000A254 41F0 D0A8               000000A8  14833          LA    15,168(0,13)
0000A258 E3F0 D138 0024          00000138  14834          STG   15,312(0,13)
0000A25E E548 D140 0080          00000140  14835          MVGHI 320(13),128
0000A264 4110 D128               00000128  14836          LA    1,296(0,13)
0000A268 E3F0 C080 0004          0000A168  14837          LG    15,@lit_1997_685 ; rd_kafka_transport_send
0000A26E                                   14838 @@gen_label947 DS    0H
0000A26E 05EF                              14839          BALR  14,15
0000A270                                   14840 @@gen_label948 DS    0H
0000A270 A7FF FFFF               0000FFFF  14841          CGHI  15,-1
0000A274 4770 C198               0000A280  14842          BNE   @L1200
                                           14843 * ***                           return -1;
0000A278 A7F9 FFFF               0000FFFF  14844          LGHI  15,-1       ; -1
0000A27C 47F0 C25C               0000A344  14845          B     @ret_lab_1997
0000A280                                   14846 @L1200   DS    0H
                                           14847 * ***
                                           14848 * ***                   if (((&rkbuf->rkbuf_reader)->end - rd_slice_ab\
                                           14849 * s_offset(&rkbuf->rkbuf_reader)) > 0)
0000A280 E370 3098 0004          00000098  14850          LG    7,152(0,3)  ; offset of end in rd_slice_s
0000A286 41F0 3078               00000078  14851          LA    15,120(0,3)
0000A28A E3F0 D128 0024          00000128  14852          STG   15,296(0,13)
0000A290 4110 D128               00000128  14853          LA    1,296(0,13)
0000A294 E3F0 C088 0004          0000A170  14854          LG    15,@lit_1997_687 ; rd_slice_abs_offset
0000A29A                                   14855 @@gen_label950 DS    0H
0000A29A 05EF                              14856          BALR  14,15
0000A29C                                   14857 @@gen_label951 DS    0H
0000A29C B90B 007F                         14858          SLGR  7,15
0000A2A0 C27E 0000 0000                    14859          CLGFI 7,X'00000000'
0000A2A6 47D0 C1CA               0000A2B2  14860          BNH   @L1201
                                           14861 * ***                           return 0;
0000A2AA B904 00F6                         14862          LGR   15,6
0000A2AE 47F0 C25C               0000A344  14863          B     @ret_lab_1997
0000A2B2                                   14864 @L1201   DS    0H
                                                                                                                           Page  300 
  Active Usings: @REGION_1997_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14865 * ***
                                           14866 * ***
                                           14867 * ***                   rd_kafka_bufq_deq(&mconn->outbufs, rkbuf);
0000A2B2 41F0 2020               00000020  14868          LA    15,32(0,2)
0000A2B6 E3F0 D128 0024          00000128  14869          STG   15,296(0,13)
0000A2BC E330 D130 0024          00000130  14870          STG   3,304(0,13)
0000A2C2 4110 D128               00000128  14871          LA    1,296(0,13)
0000A2C6 E3F0 C090 0004          0000A178  14872          LG    15,@lit_1997_689 ; rd_kafka_bufq_deq
0000A2CC                                   14873 @@gen_label953 DS    0H
0000A2CC 05EF                              14874          BALR  14,15
0000A2CE                                   14875 @@gen_label954 DS    0H
                                           14876 * ***
                                           14877 * ***                   do { if (rd_refcnt_sub0(&(rkbuf)->rkbuf_refcnt\
                                           14878 * ) > 0) break; rd_kafka_buf_destroy_final(rkbuf); } while (0);
0000A2CE                                   14879 @L1202   DS    0H
0000A2CE 41F0 3108               00000108  14880          LA    15,264(0,3)
0000A2D2 E3F0 D128 0024          00000128  14881          STG   15,296(0,13)
0000A2D8 4110 D128               00000128  14882          LA    1,296(0,13)
0000A2DC E3F0 C098 0004          0000A180  14883          LG    15,@lit_1997_690 ; rd_refcnt_sub0
0000A2E2                                   14884 @@gen_label955 DS    0H
0000A2E2 05EF                              14885          BALR  14,15
0000A2E4                                   14886 @@gen_label956 DS    0H
0000A2E4 12FF                              14887          LTR   15,15
0000A2E6 4720 C214               0000A2FC  14888          BH    @L1203
0000A2EA                                   14889 @L1205   DS    0H
0000A2EA E330 D128 0024          00000128  14890          STG   3,296(0,13)
0000A2F0 4110 D128               00000128  14891          LA    1,296(0,13)
0000A2F4 E3F0 C0A0 0004          0000A188  14892          LG    15,@lit_1997_691 ; rd_kafka_buf_destroy_final
0000A2FA                                   14893 @@gen_label958 DS    0H
0000A2FA 05EF                              14894          BALR  14,15
0000A2FC                                   14895 @@gen_label959 DS    0H
0000A2FC                                   14896 @L1203   DS    0H
                                           14897 * ***           }
0000A2FC                                   14898 @L1196   DS    0H
0000A2FC E330 2020 0004          00000020  14899          LG    3,32(0,2)   ; offset of outbufs in rd_kafka_mock_connect*
                                                                ion_s
0000A302 B902 00F3                         14900          LTGR  15,3
0000A306 4770 C0B0               0000A198  14901          BNZ   @L1195
0000A30A                                   14902 @L1193   DS    0H
                                           14903 * ***
                                           14904 * ***           rd_kafka_mock_cluster_io_clear_events(mconn->broker->c\
                                           14905 * luster,
                                           14906 * ***                                                 mconn->transport\
                                           14907 * ->rktrans_s,
                                           14908 * ***                                                 0x0004);
0000A30A E3F0 20A8 0004          000000A8  14909          LG    15,168(0,2) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
0000A310 E3F0 F0D8 0004          000000D8  14910          LG    15,216(0,15)
0000A316 E3F0 D128 0024          00000128  14911          STG   15,296(0,13)
0000A31C E3F0 2010 0004          00000010  14912          LG    15,16(0,2)  ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
0000A322 E3F0 F000 0014          00000000  14913          LGF   15,0(0,15)
                                                                                                                           Page  301 
  Active Usings: @REGION_1997_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A328 E3F0 D130 0024          00000130  14914          STG   15,304(0,13)
0000A32E E548 D138 0004          00000138  14915          MVGHI 312(13),4
0000A334 4110 D128               00000128  14916          LA    1,296(0,13)
0000A338 E3F0 C0A8 0004          0000A190  14917          LG    15,@lit_1997_692 ; rd_kafka_mock_cluster_io_clear_events
0000A33E                                   14918 @@gen_label961 DS    0H
0000A33E 05EF                              14919          BALR  14,15
0000A340                                   14920 @@gen_label962 DS    0H
                                           14921 * ***
                                           14922 * ***           return 1;
0000A340 A7F9 0001               00000001  14923          LGHI  15,1        ; 1
                                           14924 * ***   }
0000A344                                   14925 @ret_lab_1997 DS 0H
                                           14926 * * **** Start of Epilogue
                                           14927          DCCEPIL
0000A344                                   14928+         ds 0h                                                          01-DCCEP
                                           14929+* Epilog
0000A344 D707 D088 D088 00000088 00000088  14930+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000A34A E3D0 D080 0004          00000080  14931+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000A350 E3C0 D090 0004          00000090  14932+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000A356 E3B0 C018 0004          00000018  14933+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000A35C E3C0 B010 0021          00000010  14934+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000A362 E3E0 D008 0004          00000008  14935+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000A368 EB1C D020 0004          00000020  14936+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000A36E 078E                              14937+         bcr 8,14                if same dsab, just return              01-DCCEP
0000A370 E3F0 D010 0024          00000010  14938+         stg 15,16(0,13)         save return code                       01-DCCEP
0000A376 E300 D018 0024          00000018  14939+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000A37C E3F0 D090 0004          00000090  14940+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000A382 E3F0 F018 0004          00000018  14941+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000A388 47F0 F040               00000040  14942+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           14943+* End of Epilog
                                           14944 * * **** End of Epilogue
                                           14945          DROP  12
                                           14946 *
                                           14947 *   DSECT for automatic variables in "rd_kafka_mock_connection_write_o
                                           14948 *           ut"
                                           14949 *      (FUNCTION #1997)
                                           14950 *
00000000                00000000 00000128  14951 @AUTO#rd_kafka_mock_connection_write_out DSECT
00000000                                   14952          DS    XL168
000000A8                                   14953 rd_kafka_mock_connection_write_out#ts_delay#1 DS 8XL1 ; ts_delay
000000B0                000000B0 000000A8  14954          ORG   @AUTO#rd_kafka_mock_connection_write_out+168
000000A8                                   14955 rd_kafka_mock_connection_write_out#errstr#1 DS 128XL1 ; errstr
00000128                00000128 000000A8  14956          ORG   @AUTO#rd_kafka_mock_connection_write_out+168
000000A8                                   14957 rd_kafka_mock_connection_write_out#r#1 DS 8XL1 ; r
000000B0                000000B0 000000A8  14958          ORG   @AUTO#rd_kafka_mock_connection_write_out+168
000000A8                                   14959 rd_kafka_mock_connection_write_out#rtt#0 DS 8XL1 ; rtt
000000B0                000000B0 000000A8  14960          ORG   @AUTO#rd_kafka_mock_connection_write_out+168
000000A8                                   14961 rd_kafka_mock_connection_write_out#now#0 DS 8XL1 ; now
                                           14962 *
0000A38C                00000000 00010480  14963 @CODE    CSECT
                                           14964 *
                                           14965 *
                                                                                                                           Page  302 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           14966 *
                                           14967 * ....... start of rd_kafka_mock_broker_connections_write_out
0000A38C                                   14968 @LNAME1998 DS  0H
0000A38C 0000002A                          14969          DC    X'0000002A'
0000A390 99846D9281869281                  14970          DC    C'rd_kafka_mock_broker_connections'
0000A3B0 6DA69989A3856D96                  14971          DC    C'_write_out'
0000A3BA 00                                14972          DC    X'00'
                                           14973 rd_kafka_mock_broker_connections_write_out DCCPRLG CINDEX=1998,BASER=12*
                                                                ,FRAME=184,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1998
                                           14974          macro
                                           14975          dccextrn &m
                                           14976          gblc    &$dccext(1000)
                                           14977          gbla    &$dccexti
                                           14978          lcla    &i
                                           14979 &$dccext(&$dccexti+1) setc    '&m'
                                           14980 &i       seta    1
                                           14981 .loop    aif    (&i gt &$dccexti).around
                                           14982          aif    ('&$dccext(&i)' eq '&m').getout
                                           14983 &i       seta    &i+1
                                           14984          ago     .loop
                                           14985 .around  anop
                                           14986 &$dccexti seta &$dccexti+1
                                           14987          extrn  &m
                                           14988 .getout  anop
                                           14989          mend
0000A3C0                                   14990+$eye0226    ds    0d                                                    02-DCCCA
0000A3C0 C4C3C3                            14991+         dc cl3'DCC'                                                    02-DCCCA
0000A3C3 01                                14992+         dc xl1'01' format one                                          02-DCCCA
0000A3C4 00000000                          14993+         dc a(0)                                                        02-DCCCA
0000A3C8 000000000000A432                  14994+         dc ad(@PER_1998)                                               02-DCCCA
0000A3D0 00000000000000B8                  14995+         dc ad(184)                                                     02-DCCCA
0000A3D8 0000000000000000                  14996+         dc ad(0)                                                       02-DCCCA
0000A3E0 0000000000001000                  14997+         dc ad(4096)                                                    02-DCCCA
0000A3E8 20                                14998+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000A3E9 03                                14999+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000A3EA 03                                15000+         dc al1(3)                                                      02-DCCCA
0000A3EB 08                                15001+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000A3EC 00                                15002+         dc bl.8'00000000'                                              02-DCCCA
0000A3ED 000000                            15003+         dc al3(0)                                                      02-DCCCA
0000A3F0 000000000000A38C                  15004+         dc ad(@LNAME1998)                                              02-DCCCA
0000A3F8                                   15005+         ds 0d                                                          02-DCCCA
0000A3F8 000000000000A3C0                  15006+         dc ad($eye0226)                                                02-DCCCA
0000A400 0000000000000000                  15007+         dc ad(0)                                                       02-DCCCA
0000A408                                   15008+         ds    0d                                                       01-DCCPR
0000A408                                   15009+rd_kafka_mock_broker_connections_write_out ds 0d                        01-DCCPR
0000A408                                   15010+@REGION_1998_1 ds 0h                                                    01-DCCPR
0000A408 EBEC D008 0024          00000008  15011+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000A40E E3E0 D088 0004          00000088  15012+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000A414 E3C0 D090 0004          00000090  15013+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000A41A B904 002E                         15014+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000A41E E3B0 C018 0004          00000018  15015+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000A424 A7EB 00B8               000000B8  15016+         aghi  14,184              increase by frame size               01-DCCPR
                                                                                                                           Page  303 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A428 E3E0 C020 0021          00000020  15017+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000A42E 4720 B020               00000020  15018+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000A432                                   15019+@PER_1998 ds   0h                                                       01-DCCPR
0000A432 EBDE 2080 0024          00000080  15020+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000A438 E3C0 2090 0024          00000090  15021+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000A43E B904 00D2                         15022+         lgr   13,2                set real frame pointer               01-DCCPR
0000A442 B904 00CF                         15023+         lgr   12,15               set base reg                         01-DCCPR
                        0000A408           15024+         using @REGION_1998_1,12                                        01-DCCPR
                                           15025 * ******* End of Prologue
                                           15026 * *
                                           15027 * ***           rd_kafka_mock_connection_t *mconn, *tmp;
                                           15028 * ***
                                           15029 * ***
                                           15030 * ***           for ((mconn) = ((&mrkb->connections)->tqh_first); (mco\
                                           15031 * nn) != (((void *)0)) && ((tmp) = ((mconn)->link .tqe_next), 1); (mco\
                                           15032 * nn) = (tmp)) {
0000A446 E3F0 1000 0004          00000000  15033          LG    15,0(0,1)   ; mrkb
0000A44C E3F0 F0B8 0004          000000B8  15034          LG    15,184(0,15) ; offset of connections in rd_kafka_mock_br*
                                                                oker_s
0000A452 47F0 C076               0000A47E  15035          B     @L1207
0000A458                                   15036          DS    0D
0000A458 000000B8                          15037 @FRAMESIZE_1998 DC F'184'
0000A45C 00000000
0000A460 000000000000A0E8                  15038 @lit_1998_695 DC AD(rd_kafka_mock_connection_write_out)
0000A468                                   15039 @L1206   DS    0H
                                           15040 * ***                   rd_kafka_mock_connection_write_out(mconn);
0000A468 E3F0 D0B0 0024          000000B0  15041          STG   15,176(0,13)
0000A46E 4110 D0B0               000000B0  15042          LA    1,176(0,13)
0000A472 E3F0 C058 0004          0000A460  15043          LG    15,@lit_1998_695 ; rd_kafka_mock_connection_write_out
0000A478                                   15044 @@gen_label963 DS    0H
0000A478 05EF                              15045          BALR  14,15
0000A47A                                   15046 @@gen_label964 DS    0H
                                           15047 * ***           }
0000A47A B904 00F2                         15048          LGR   15,2        ; mconn
0000A47E                                   15049 @L1207   DS    0H
0000A47E B902 001F                         15050          LTGR  1,15
0000A482 4780 C088               0000A490  15051          BE    @L1208
0000A486 E320 F000 0004          00000000  15052          LG    2,0(0,15)   ; mconn
0000A48C 47F0 C060               0000A468  15053          B     @L1206
0000A490                                   15054 @L1208   DS    0H
                                           15055 * ***   }
0000A490                                   15056 @ret_lab_1998 DS 0H
                                           15057 * * **** Start of Epilogue
                                           15058          DCCEPIL
0000A490                                   15059+         ds 0h                                                          01-DCCEP
                                           15060+* Epilog
0000A490 D707 D088 D088 00000088 00000088  15061+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000A496 E3D0 D080 0004          00000080  15062+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000A49C E3C0 D090 0004          00000090  15063+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000A4A2 E3B0 C018 0004          00000018  15064+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000A4A8 E3C0 B010 0021          00000010  15065+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000A4AE E3E0 D008 0004          00000008  15066+         lg  14,8(0,13)          load up return address                 01-DCCEP
                                                                                                                           Page  304 
  Active Usings: @REGION_1998_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A4B4 EB1C D020 0004          00000020  15067+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000A4BA 078E                              15068+         bcr 8,14                if same dsab, just return              01-DCCEP
0000A4BC E3F0 D010 0024          00000010  15069+         stg 15,16(0,13)         save return code                       01-DCCEP
0000A4C2 E300 D018 0024          00000018  15070+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000A4C8 E3F0 D090 0004          00000090  15071+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000A4CE E3F0 F018 0004          00000018  15072+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000A4D4 47F0 F040               00000040  15073+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           15074+* End of Epilog
                                           15075 * * **** End of Epilogue
                                           15076          DROP  12
                                           15077 *
                                           15078 *   DSECT for automatic variables in "rd_kafka_mock_broker_connections
                                           15079 *           _write_out"
                                           15080 *      (FUNCTION #1998)
                                           15081 *
00000000                00000000 000000A8  15082 @AUTO#rd_kafka_mock_broker_connections_write_out DSECT
00000000                                   15083          DS    XL168
                                           15084 *
0000A4D8                00000000 00010480  15085 @CODE    CSECT
                                           15086 *
                                           15087 *
                                           15088 *
                                           15089 * ....... start of rd_kafka_mock_connection_io
0000A4D8                                   15090 @LNAME1999 DS  0H
0000A4D8 0000001B                          15091          DC    X'0000001B'
0000A4DC 99846D9281869281                  15092          DC    C'rd_kafka_mock_connection_io'
0000A4F7 00                                15093          DC    X'00'
                                           15094 rd_kafka_mock_connection_io DCCPRLG CINDEX=1999,BASER=12,FRAME=192,ENTR*
                                                                Y=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1999
                                           15095          macro
                                           15096          dccextrn &m
                                           15097          gblc    &$dccext(1000)
                                           15098          gbla    &$dccexti
                                           15099          lcla    &i
                                           15100 &$dccext(&$dccexti+1) setc    '&m'
                                           15101 &i       seta    1
                                           15102 .loop    aif    (&i gt &$dccexti).around
                                           15103          aif    ('&$dccext(&i)' eq '&m').getout
                                           15104 &i       seta    &i+1
                                           15105          ago     .loop
                                           15106 .around  anop
                                           15107 &$dccexti seta &$dccexti+1
                                           15108          extrn  &m
                                           15109 .getout  anop
                                           15110          mend
0000A4F8                                   15111+$eye0229    ds    0d                                                    02-DCCCA
0000A4F8 C4C3C3                            15112+         dc cl3'DCC'                                                    02-DCCCA
0000A4FB 01                                15113+         dc xl1'01' format one                                          02-DCCCA
0000A4FC 00000000                          15114+         dc a(0)                                                        02-DCCCA
0000A500 000000000000A56A                  15115+         dc ad(@PER_1999)                                               02-DCCCA
0000A508 00000000000000C0                  15116+         dc ad(192)                                                     02-DCCCA
0000A510 0000000000000000                  15117+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page  305 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A518 0000000000001000                  15118+         dc ad(4096)                                                    02-DCCCA
0000A520 20                                15119+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000A521 03                                15120+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000A522 03                                15121+         dc al1(3)                                                      02-DCCCA
0000A523 08                                15122+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000A524 00                                15123+         dc bl.8'00000000'                                              02-DCCCA
0000A525 000000                            15124+         dc al3(0)                                                      02-DCCCA
0000A528 000000000000A4D8                  15125+         dc ad(@LNAME1999)                                              02-DCCCA
0000A530                                   15126+         ds 0d                                                          02-DCCCA
0000A530 000000000000A4F8                  15127+         dc ad($eye0229)                                                02-DCCCA
0000A538 0000000000000000                  15128+         dc ad(0)                                                       02-DCCCA
0000A540                                   15129+         ds    0d                                                       01-DCCPR
0000A540                                   15130+rd_kafka_mock_connection_io ds 0d                                       01-DCCPR
0000A540                                   15131+@REGION_1999_1 ds 0h                                                    01-DCCPR
0000A540 EBEC D008 0024          00000008  15132+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000A546 E3E0 D088 0004          00000088  15133+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000A54C E3C0 D090 0004          00000090  15134+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000A552 B904 002E                         15135+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000A556 E3B0 C018 0004          00000018  15136+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000A55C A7EB 00C0               000000C0  15137+         aghi  14,192              increase by frame size               01-DCCPR
0000A560 E3E0 C020 0021          00000020  15138+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000A566 4720 B020               00000020  15139+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000A56A                                   15140+@PER_1999 ds   0h                                                       01-DCCPR
0000A56A EBDE 2080 0024          00000080  15141+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000A570 E3C0 2090 0024          00000090  15142+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000A576 B904 00D2                         15143+         lgr   13,2                set real frame pointer               01-DCCPR
0000A57A B904 00CF                         15144+         lgr   12,15               set base reg                         01-DCCPR
                        0000A540           15145+         using @REGION_1999_1,12                                        01-DCCPR
                                           15146 * ******* End of Prologue
                                           15147 * *
                                           15148 * ***           rd_kafka_mock_connection_t *mconn = opaque;
0000A57E 5840 1014               00000014  15149          L     4,20(0,1)   ; events
0000A582 E330 1018 0004          00000018  15150          LG    3,24(0,1)   ; opaque
                                           15151 * ***
                                           15152 * ***           if (events & 0x0001) {
0000A588 A741 0001               00000001  15153          TML   4,1
0000A58C 4780 C16E               0000A6AE  15154          BZ    @L1211
                                           15155 * ***                   rd_kafka_buf_t *rkbuf;
                                           15156 * ***                   int r;
                                           15157 * ***
                                           15158 * ***                   while (1) {
0000A590                                   15159 @L1214   DS    0H
                                           15160 * ***
                                           15161 * ***                           r = rd_kafka_mock_connection_read_requ\
                                           15162 * est(mconn,
                                           15163 * ***                                                                 \
                                           15164 *     &rkbuf);
0000A590 E330 D0B0 0024          000000B0  15165          STG   3,176(0,13)
0000A596 41F0 D0A8               000000A8  15166          LA    15,168(0,13)
0000A59A E3F0 D0B8 0024          000000B8  15167          STG   15,184(0,13)
0000A5A0 4110 D0B0               000000B0  15168          LA    1,176(0,13)
0000A5A4 E3F0 C080 0004          0000A5C0  15169          LG    15,@lit_1999_697 ; rd_kafka_mock_connection_read_request
                                                                                                                           Page  306 
  Active Usings: @REGION_1999_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A5AA                                   15170 @@gen_label967 DS    0H
0000A5AA 05EF                              15171          BALR  14,15
0000A5AC                                   15172 @@gen_label968 DS    0H
0000A5AC 122F                              15173          LTR   2,15        ; r
                                           15174 * ***                           if (r == 0)
0000A5AE 4770 C0B8               0000A5F8  15175          BNE   @L1216
                                           15176 * ***                                   break;
0000A5B2 47F0 C16E               0000A6AE  15177          B     @L1212
0000A5B8                                   15178          DS    0D
0000A5B8 000000C0                          15179 @FRAMESIZE_1999 DC F'192'
0000A5BC 00000000
0000A5C0 0000000000007118                  15180 @lit_1999_697 DC AD(rd_kafka_mock_connection_read_request)
0000A5C8 0000000000006A10                  15181 @lit_1999_699 DC AD(rd_kafka_mock_connection_close)
0000A5D0 0000000000010840                  15182 @lit_1999_698 DC AD(@strings@)
0000A5D8 0000000000009BA8                  15183 @lit_1999_700 DC AD(rd_kafka_mock_connection_parse_request)
0000A5E0 0000000000000DF0                  15184 @lit_1999_701 DC AD(rd_refcnt_sub0)
0000A5E8 0000000000000000                  15185 @lit_1999_702 DC AD(rd_kafka_buf_destroy_final)
0000A5F0 000000000000A0E8                  15186 @lit_1999_707 DC AD(rd_kafka_mock_connection_write_out)
                                           15187 * ***                           else if (r == -1) {
0000A5F8                                   15188 @L1216   DS    0H
0000A5F8 A72E FFFF               0000FFFF  15189          CHI   2,-1
0000A5FC 4770 C0E6               0000A626  15190          BNE   @L1217
                                           15191 * ***                                   rd_kafka_mock_connection_close\
                                           15192 * (mconn,
                                           15193 * ***                                                                 \
                                           15194 *  "Read error");
0000A600 E330 D0B0 0024          000000B0  15195          STG   3,176(0,13)
0000A606 E3F0 C090 0004          0000A5D0  15196          LG    15,@lit_1999_698
0000A60C 41F0 F5FC               000005FC  15197          LA    15,1532(0,15)
0000A610 E3F0 D0B8 0024          000000B8  15198          STG   15,184(0,13)
0000A616 4110 D0B0               000000B0  15199          LA    1,176(0,13)
0000A61A E3F0 C088 0004          0000A5C8  15200          LG    15,@lit_1999_699 ; rd_kafka_mock_connection_close
0000A620                                   15201 @@gen_label971 DS    0H
0000A620 05EF                              15202          BALR  14,15
0000A622                                   15203 @@gen_label972 DS    0H
                                           15204 * ***                                   return;
0000A622 47F0 C1E0               0000A720  15205          B     @ret_lab_1999
                                           15206 * ***                           }
                                           15207 * ***
                                           15208 * ***
                                           15209 * ***                           r = rd_kafka_mock_connection_parse_req\
                                           15210 * uest(mconn,
0000A626                                   15211 @L1217   DS    0H
                                           15212 * ***                                                                 \
                                           15213 *      rkbuf);
0000A626 E330 D0B0 0024          000000B0  15214          STG   3,176(0,13)
0000A62C E3F0 D0A8 0004          000000A8  15215          LG    15,168(0,13) ; rkbuf
0000A632 E3F0 D0B8 0024          000000B8  15216          STG   15,184(0,13)
0000A638 4110 D0B0               000000B0  15217          LA    1,176(0,13)
0000A63C E3F0 C098 0004          0000A5D8  15218          LG    15,@lit_1999_700 ; rd_kafka_mock_connection_parse_reques*
                                                                t
0000A642                                   15219 @@gen_label973 DS    0H
                                                                                                                           Page  307 
  Active Usings: @REGION_1999_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A642 05EF                              15220          BALR  14,15
0000A644                                   15221 @@gen_label974 DS    0H
0000A644 182F                              15222          LR    2,15        ; r
                                           15223 * ***                           do { if (rd_refcnt_sub0(&(rkbuf)->rkbu\
                                           15224 * f_refcnt) > 0) break; rd_kafka_buf_destroy_final(rkbuf); } while (0)\
                                           15225 * ;
0000A646                                   15226 @L1219   DS    0H
0000A646 E3F0 D0A8 0004          000000A8  15227          LG    15,168(0,13) ; rkbuf
0000A64C 41F0 F108               00000108  15228          LA    15,264(0,15)
0000A650 E3F0 D0B0 0024          000000B0  15229          STG   15,176(0,13)
0000A656 4110 D0B0               000000B0  15230          LA    1,176(0,13)
0000A65A E3F0 C0A0 0004          0000A5E0  15231          LG    15,@lit_1999_701 ; rd_refcnt_sub0
0000A660                                   15232 @@gen_label975 DS    0H
0000A660 05EF                              15233          BALR  14,15
0000A662                                   15234 @@gen_label976 DS    0H
0000A662 12FF                              15235          LTR   15,15
0000A664 4720 C140               0000A680  15236          BH    @L1220
0000A668                                   15237 @L1222   DS    0H
0000A668 E3F0 D0A8 0004          000000A8  15238          LG    15,168(0,13) ; rkbuf
0000A66E E3F0 D0B0 0024          000000B0  15239          STG   15,176(0,13)
0000A674 4110 D0B0               000000B0  15240          LA    1,176(0,13)
0000A678 E3F0 C0A8 0004          0000A5E8  15241          LG    15,@lit_1999_702 ; rd_kafka_buf_destroy_final
0000A67E                                   15242 @@gen_label978 DS    0H
0000A67E 05EF                              15243          BALR  14,15
0000A680                                   15244 @@gen_label979 DS    0H
0000A680                                   15245 @L1220   DS    0H
                                           15246 * ***                           if (r == -1) {
0000A680 A72E FFFF               0000FFFF  15247          CHI   2,-1
0000A684 4770 C050               0000A590  15248          BNE   @L1214
                                           15249 * ***                                   rd_kafka_mock_connection_close\
                                           15250 * (mconn,
                                           15251 * ***                                                                 \
                                           15252 *  "Parse error");
0000A688 E330 D0B0 0024          000000B0  15253          STG   3,176(0,13)
0000A68E E3F0 C090 0004          0000A5D0  15254          LG    15,@lit_1999_698
0000A694 41F0 F608               00000608  15255          LA    15,1544(0,15)
0000A698 E3F0 D0B8 0024          000000B8  15256          STG   15,184(0,13)
0000A69E 4110 D0B0               000000B0  15257          LA    1,176(0,13)
0000A6A2 E3F0 C088 0004          0000A5C8  15258          LG    15,@lit_1999_699 ; rd_kafka_mock_connection_close
0000A6A8                                   15259 @@gen_label981 DS    0H
0000A6A8 05EF                              15260          BALR  14,15
0000A6AA                                   15261 @@gen_label982 DS    0H
                                           15262 * ***                                   return;
0000A6AA 47F0 C1E0               0000A720  15263          B     @ret_lab_1999
                                           15264 * ***                           }
                                           15265 * ***                   }
0000A6AE                                   15266 @L1212   DS    0H
                                           15267 * ***           }
0000A6AE                                   15268 @L1211   DS    0H
                                           15269 * ***
                                           15270 * ***           if (events & (0x0008|0x0010)) {
0000A6AE A741 0018               00000018  15271          TML   4,24
                                                                                                                           Page  308 
  Active Usings: @REGION_1999_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A6B2 4780 C19C               0000A6DC  15272          BZ    @L1224
                                           15273 * ***                   rd_kafka_mock_connection_close(mconn, "Disconn\
                                           15274 * ected");
0000A6B6 E330 D0B0 0024          000000B0  15275          STG   3,176(0,13)
0000A6BC E3F0 C090 0004          0000A5D0  15276          LG    15,@lit_1999_698
0000A6C2 41F0 F614               00000614  15277          LA    15,1556(0,15)
0000A6C6 E3F0 D0B8 0024          000000B8  15278          STG   15,184(0,13)
0000A6CC 4110 D0B0               000000B0  15279          LA    1,176(0,13)
0000A6D0 E3F0 C088 0004          0000A5C8  15280          LG    15,@lit_1999_699 ; rd_kafka_mock_connection_close
0000A6D6                                   15281 @@gen_label984 DS    0H
0000A6D6 05EF                              15282          BALR  14,15
0000A6D8                                   15283 @@gen_label985 DS    0H
                                           15284 * ***                   return;
0000A6D8 47F0 C1E0               0000A720  15285          B     @ret_lab_1999
                                           15286 * ***           }
0000A6DC                                   15287 @L1224   DS    0H
                                           15288 * ***
                                           15289 * ***           if (events & 0x0004) {
0000A6DC A741 0004               00000004  15290          TML   4,4
0000A6E0 4780 C1E0               0000A720  15291          BZ    @L1225
                                           15292 * ***                   if (rd_kafka_mock_connection_write_out(mconn) \
                                           15293 * == -1) {
0000A6E4 E330 D0B0 0024          000000B0  15294          STG   3,176(0,13)
0000A6EA 4110 D0B0               000000B0  15295          LA    1,176(0,13)
0000A6EE E3F0 C0B0 0004          0000A5F0  15296          LG    15,@lit_1999_707 ; rd_kafka_mock_connection_write_out
0000A6F4                                   15297 @@gen_label987 DS    0H
0000A6F4 05EF                              15298          BALR  14,15
0000A6F6                                   15299 @@gen_label988 DS    0H
0000A6F6 A7FF FFFF               0000FFFF  15300          CGHI  15,-1
0000A6FA 4770 C1E0               0000A720  15301          BNE   @L1225
                                           15302 * ***                           rd_kafka_mock_connection_close(mconn, \
                                           15303 * "Write error");
0000A6FE E330 D0B0 0024          000000B0  15304          STG   3,176(0,13)
0000A704 E3F0 C090 0004          0000A5D0  15305          LG    15,@lit_1999_698
0000A70A 41F0 F622               00000622  15306          LA    15,1570(0,15)
0000A70E E3F0 D0B8 0024          000000B8  15307          STG   15,184(0,13)
0000A714 4110 D0B0               000000B0  15308          LA    1,176(0,13)
0000A718 E3F0 C088 0004          0000A5C8  15309          LG    15,@lit_1999_699 ; rd_kafka_mock_connection_close
0000A71E                                   15310 @@gen_label990 DS    0H
0000A71E 05EF                              15311          BALR  14,15
0000A720                                   15312 @@gen_label991 DS    0H
                                           15313 * ***                           return;
                                           15314 * ***                   }
                                           15315 * ***           }
0000A720                                   15316 @L1225   DS    0H
                                           15317 * ***   }
0000A720                                   15318 @ret_lab_1999 DS 0H
                                           15319 * * **** Start of Epilogue
                                           15320          DCCEPIL
0000A720                                   15321+         ds 0h                                                          01-DCCEP
                                           15322+* Epilog
0000A720 D707 D088 D088 00000088 00000088  15323+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
                                                                                                                           Page  309 
  Active Usings: @REGION_1999_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A726 E3D0 D080 0004          00000080  15324+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000A72C E3C0 D090 0004          00000090  15325+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000A732 E3B0 C018 0004          00000018  15326+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000A738 E3C0 B010 0021          00000010  15327+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000A73E E3E0 D008 0004          00000008  15328+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000A744 EB1C D020 0004          00000020  15329+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000A74A 078E                              15330+         bcr 8,14                if same dsab, just return              01-DCCEP
0000A74C E3F0 D010 0024          00000010  15331+         stg 15,16(0,13)         save return code                       01-DCCEP
0000A752 E300 D018 0024          00000018  15332+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000A758 E3F0 D090 0004          00000090  15333+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000A75E E3F0 F018 0004          00000018  15334+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000A764 47F0 F040               00000040  15335+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           15336+* End of Epilog
                                           15337 * * **** End of Epilogue
                                           15338          DROP  12
                                           15339 *
                                           15340 *   DSECT for automatic variables in "rd_kafka_mock_connection_io"
                                           15341 *      (FUNCTION #1999)
                                           15342 *
00000000                00000000 000000AC  15343 @AUTO#rd_kafka_mock_connection_io DSECT
00000000                                   15344          DS    XL168
000000A8                                   15345 rd_kafka_mock_connection_io#r#1 DS 1F ; r
                                           15346 *
0000A768                00000000 00010480  15347 @CODE    CSECT
                                           15348 *
                                           15349 *
                                           15350 *
                                           15351 * ....... start of rd_kafka_mock_connection_set_blocking
                                           15352 rd_kafka_mock_connection_set_blocking ALIAS X'99846D92818692816D9496839*
                                                                26D839695958583A38996956DA285A36D8293968392899587'
0000A768                                   15353 @LNAME1939 DS  0H
0000A768 00000025                          15354          DC    X'00000025'
0000A76C 99846D9281869281                  15355          DC    C'rd_kafka_mock_connection_set_blo'
0000A78C 8392899587                        15356          DC    C'cking'
0000A791 00                                15357          DC    X'00'
                                           15358 rd_kafka_mock_connection_set_blocking DCCPRLG CINDEX=1939,BASER=12,FRAM*
                                                                E=200,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1939
                                           15359          macro
                                           15360          dccextrn &m
                                           15361          gblc    &$dccext(1000)
                                           15362          gbla    &$dccexti
                                           15363          lcla    &i
                                           15364 &$dccext(&$dccexti+1) setc    '&m'
                                           15365 &i       seta    1
                                           15366 .loop    aif    (&i gt &$dccexti).around
                                           15367          aif    ('&$dccext(&i)' eq '&m').getout
                                           15368 &i       seta    &i+1
                                           15369          ago     .loop
                                           15370 .around  anop
                                           15371 &$dccexti seta &$dccexti+1
                                           15372          extrn  &m
                                           15373 .getout  anop
                                                                                                                           Page  310 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           15374          mend
0000A798                                   15375+$eye0232    ds    0d                                                    02-DCCCA
0000A798 C4C3C3                            15376+         dc cl3'DCC'                                                    02-DCCCA
0000A79B 01                                15377+         dc xl1'01' format one                                          02-DCCCA
0000A79C 00000000                          15378+         dc a(0)                                                        02-DCCCA
0000A7A0 000000000000A80A                  15379+         dc ad(@PER_1939)                                               02-DCCCA
0000A7A8 00000000000000C8                  15380+         dc ad(200)                                                     02-DCCCA
0000A7B0 0000000000000000                  15381+         dc ad(0)                                                       02-DCCCA
0000A7B8 0000000000001000                  15382+         dc ad(4096)                                                    02-DCCCA
0000A7C0 20                                15383+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000A7C1 03                                15384+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000A7C2 03                                15385+         dc al1(3)                                                      02-DCCCA
0000A7C3 08                                15386+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000A7C4 00                                15387+         dc bl.8'00000000'                                              02-DCCCA
0000A7C5 000000                            15388+         dc al3(0)                                                      02-DCCCA
0000A7C8 000000000000A768                  15389+         dc ad(@LNAME1939)                                              02-DCCCA
0000A7D0                                   15390+         ds 0d                                                          02-DCCCA
0000A7D0 000000000000A798                  15391+         dc ad($eye0232)                                                02-DCCCA
0000A7D8 0000000000000000                  15392+         dc ad(0)                                                       02-DCCCA
0000A7E0                                   15393+         ds    0d                                                       01-DCCPR
                                           15394+         entry rd_kafka_mock_connection_set_blocking                    01-DCCPR
0000A7E0                                   15395+rd_kafka_mock_connection_set_blocking ds 0d                             01-DCCPR
0000A7E0                                   15396+@REGION_1939_1 ds 0h                                                    01-DCCPR
0000A7E0 EBEC D008 0024          00000008  15397+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000A7E6 E3E0 D088 0004          00000088  15398+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000A7EC E3C0 D090 0004          00000090  15399+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000A7F2 B904 002E                         15400+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000A7F6 E3B0 C018 0004          00000018  15401+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000A7FC A7EB 00C8               000000C8  15402+         aghi  14,200              increase by frame size               01-DCCPR
0000A800 E3E0 C020 0021          00000020  15403+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000A806 4720 B020               00000020  15404+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000A80A                                   15405+@PER_1939 ds   0h                                                       01-DCCPR
0000A80A EBDE 2080 0024          00000080  15406+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000A810 E3C0 2090 0024          00000090  15407+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000A816 B904 00D2                         15408+         lgr   13,2                set real frame pointer               01-DCCPR
0000A81A B904 00CF                         15409+         lgr   12,15               set base reg                         01-DCCPR
                        0000A7E0           15410+         using @REGION_1939_1,12                                        01-DCCPR
                                           15411 * ******* End of Prologue
                                           15412 * *
                                           15413 * ***           rd_kafka_mock_cluster_io_set_event(mconn->broker->clus\
                                           15414 * ter,
                                           15415 * ***                                              mconn->transport->r\
                                           15416 * ktrans_s,
                                           15417 * ***                                              !blocking, 0x0001);
0000A81E E3F0 1000 0004          00000000  15418          LG    15,0(0,1)   ; mconn
0000A824 E320 F0A8 0004          000000A8  15419          LG    2,168(0,15) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
0000A82A E320 20D8 0004          000000D8  15420          LG    2,216(0,2)
0000A830 E320 D0A8 0024          000000A8  15421          STG   2,168(0,13)
0000A836 E3F0 F010 0004          00000010  15422          LG    15,16(0,15) ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
0000A83C E3F0 F000 0014          00000000  15423          LGF   15,0(0,15)
                                                                                                                           Page  311 
  Active Usings: @REGION_1939_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A842 E3F0 D0B0 0024          000000B0  15424          STG   15,176(0,13)
0000A848 E3F0 100F 0094          0000000F  15425          LLC   15,15(0,1)  ; blocking
0000A84E 10FF                              15426          LPR   15,15
0000A850 A7FA FFFF               0000FFFF  15427          AHI   15,-1
0000A854 88F0 001F               0000001F  15428          SRL   15,31(0)
0000A858 E3F0 C0F0 0080          0000A8D0  15429          NG    15,@lit_1939_711
0000A85E E3F0 D0B8 0024          000000B8  15430          STG   15,184(0,13)
0000A864 E548 D0C0 0001          000000C0  15431          MVGHI 192(13),1
0000A86A 4110 D0A8               000000A8  15432          LA    1,168(0,13)
0000A86E E3F0 C0E8 0004          0000A8C8  15433          LG    15,@lit_1939_712 ; rd_kafka_mock_cluster_io_set_event
0000A874                                   15434 @@gen_label992 DS    0H
0000A874 05EF                              15435          BALR  14,15
0000A876                                   15436 @@gen_label993 DS    0H
                                           15437 * ***   }
0000A876                                   15438 @ret_lab_1939 DS 0H
                                           15439 * * **** Start of Epilogue
                                           15440          DCCEPIL
0000A876                                   15441+         ds 0h                                                          01-DCCEP
                                           15442+* Epilog
0000A876 D707 D088 D088 00000088 00000088  15443+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000A87C E3D0 D080 0004          00000080  15444+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000A882 E3C0 D090 0004          00000090  15445+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000A888 E3B0 C018 0004          00000018  15446+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000A88E E3C0 B010 0021          00000010  15447+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000A894 E3E0 D008 0004          00000008  15448+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000A89A EB1C D020 0004          00000020  15449+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000A8A0 078E                              15450+         bcr 8,14                if same dsab, just return              01-DCCEP
0000A8A2 E3F0 D010 0024          00000010  15451+         stg 15,16(0,13)         save return code                       01-DCCEP
0000A8A8 E300 D018 0024          00000018  15452+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000A8AE E3F0 D090 0004          00000090  15453+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000A8B4 E3F0 F018 0004          00000018  15454+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000A8BA 47F0 F040               00000040  15455+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           15456+* End of Epilog
                                           15457 * * **** End of Epilogue
0000A8C0                                   15458          DS    0D
0000A8C0 000000C8                          15459 @FRAMESIZE_1939 DC F'200'
0000A8C4 00000000
0000A8C8 00000000000061A0                  15460 @lit_1939_712 DC AD(rd_kafka_mock_cluster_io_set_event)
0000A8D0 00000000000000FF                  15461 @lit_1939_711 DC FD'255' 0x00000000000000ff
                                           15462          DROP  12
                                           15463 *
                                           15464 *   DSECT for automatic variables in "rd_kafka_mock_connection_set_blo
                                           15465 *           cking"
                                           15466 *      (FUNCTION #1939)
                                           15467 *
00000000                00000000 000000A8  15468 @AUTO#rd_kafka_mock_connection_set_blocking DSECT
00000000                                   15469          DS    XL168
                                           15470 *
0000A8D8                00000000 00010480  15471 @CODE    CSECT
                                           15472 *
                                           15473 *
                                           15474 *
                                                                                                                           Page  312 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           15475 * ....... start of rd_kafka_mock_connection_new
0000A8D8                                   15476 @LNAME2000 DS  0H
0000A8D8 0000001C                          15477          DC    X'0000001C'
0000A8DC 99846D9281869281                  15478          DC    C'rd_kafka_mock_connection_new'
0000A8F8 00                                15479          DC    X'00'
                                           15480 rd_kafka_mock_connection_new DCCPRLG CINDEX=2000,BASER=12,FRAME=368,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2000
                                           15481          macro
                                           15482          dccextrn &m
                                           15483          gblc    &$dccext(1000)
                                           15484          gbla    &$dccexti
                                           15485          lcla    &i
                                           15486 &$dccext(&$dccexti+1) setc    '&m'
                                           15487 &i       seta    1
                                           15488 .loop    aif    (&i gt &$dccexti).around
                                           15489          aif    ('&$dccext(&i)' eq '&m').getout
                                           15490 &i       seta    &i+1
                                           15491          ago     .loop
                                           15492 .around  anop
                                           15493 &$dccexti seta &$dccexti+1
                                           15494          extrn  &m
                                           15495 .getout  anop
                                           15496          mend
0000A900                                   15497+$eye0235    ds    0d                                                    02-DCCCA
0000A900 C4C3C3                            15498+         dc cl3'DCC'                                                    02-DCCCA
0000A903 01                                15499+         dc xl1'01' format one                                          02-DCCCA
0000A904 00000000                          15500+         dc a(0)                                                        02-DCCCA
0000A908 000000000000A972                  15501+         dc ad(@PER_2000)                                               02-DCCCA
0000A910 0000000000000170                  15502+         dc ad(368)                                                     02-DCCCA
0000A918 0000000000000000                  15503+         dc ad(0)                                                       02-DCCCA
0000A920 0000000000001000                  15504+         dc ad(4096)                                                    02-DCCCA
0000A928 20                                15505+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000A929 03                                15506+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000A92A 03                                15507+         dc al1(3)                                                      02-DCCCA
0000A92B 08                                15508+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000A92C 00                                15509+         dc bl.8'00000000'                                              02-DCCCA
0000A92D 000000                            15510+         dc al3(0)                                                      02-DCCCA
0000A930 000000000000A8D8                  15511+         dc ad(@LNAME2000)                                              02-DCCCA
0000A938                                   15512+         ds 0d                                                          02-DCCCA
0000A938 000000000000A900                  15513+         dc ad($eye0235)                                                02-DCCCA
0000A940 0000000000000000                  15514+         dc ad(0)                                                       02-DCCCA
0000A948                                   15515+         ds    0d                                                       01-DCCPR
0000A948                                   15516+rd_kafka_mock_connection_new ds 0d                                      01-DCCPR
0000A948                                   15517+@REGION_2000_1 ds 0h                                                    01-DCCPR
0000A948 EBEC D008 0024          00000008  15518+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000A94E E3E0 D088 0004          00000088  15519+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000A954 E3C0 D090 0004          00000090  15520+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000A95A B904 002E                         15521+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000A95E E3B0 C018 0004          00000018  15522+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000A964 A7EB 0170               00000170  15523+         aghi  14,368              increase by frame size               01-DCCPR
0000A968 E3E0 C020 0021          00000020  15524+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000A96E 4720 B020               00000020  15525+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
                                                                                                                           Page  313 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000A972                                   15526+@PER_2000 ds   0h                                                       01-DCCPR
0000A972 EBDE 2080 0024          00000080  15527+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000A978 E3C0 2090 0024          00000090  15528+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000A97E B904 00D2                         15529+         lgr   13,2                set real frame pointer               01-DCCPR
0000A982 B904 00CF                         15530+         lgr   12,15               set base reg                         01-DCCPR
                        0000A948           15531+         using @REGION_2000_1,12                                        01-DCCPR
0000A986 B904 0051                         15532          LGR   5,1         ; ptr to parm area
                                           15533 * ******* End of Prologue
                                           15534 * *
0000A98A E320 5000 0004          00000000  15535          LG    2,0(0,5)    ; mrkb
0000A990 5830 500C               0000000C  15536          L     3,12(0,5)   ; fd
                                           15537 * ***           rd_kafka_mock_connection_t *mconn;
                                           15538 * ***           rd_kafka_transport_t *rktrans;
                                           15539 * ***           char errstr[128];
                                           15540 * ***
                                           15541 * ***           if (!mrkb->up) {
0000A994 9500 20A0      000000A0 00000000  15542          CLI   160(2),0
0000A998 4770 C0D0               0000AA18  15543          BNE   @L1227
                                           15544 * ***                   close(fd);
0000A99C B914 00F3                         15545          LGFR  15,3
0000A9A0 E3F0 D128 0024          00000128  15546          STG   15,296(0,13)
0000A9A6 4110 D128               00000128  15547          LA    1,296(0,13)
0000A9AA E3F0 C080 0004          0000A9C8  15548          LG    15,@lit_2000_714 ; close
0000A9B0                                   15549 @@gen_label995 DS    0H
0000A9B0 05EF                              15550          BALR  14,15
0000A9B2                                   15551 @@gen_label996 DS    0H
                                           15552 * ***                   return ((void *)0);
0000A9B2 A7F9 0000               00000000  15553          LGHI  15,0        ; 0
0000A9B6 47F0 C30E               0000AC56  15554          B     @ret_lab_2000
0000A9C0                                   15555          DS    0D
0000A9C0 00000170                          15556 @FRAMESIZE_2000 DC F'368'
0000A9C4 00000000
0000A9C8 0000000000000000                  15557 @lit_2000_714 DC AD(close)
0000A9D0 0000000000000000                  15558 @lit_2000_716 DC AD(rd_kafka_transport_new)
0000A9D8 0000000000000000                  15559 @lit_2000_718 DC AD(rd_kafka_log0)
0000A9E0 0000000000010840                  15560 @lit_2000_717 DC AD(@strings@)
0000A9E8 0000000000000000                  15561 @lit_2000_721 DC AD(rd_kafka_transport_post_connect_setup)
0000A9F0 0000000000000728                  15562 @lit_2000_722 DC AD(rd_calloc)
0000A9F8 0000000000000000                  15563 @lit_2000_723 DC AD(rd_kafka_bufq_init)
0000AA00 00000000000067C8                  15564 @lit_2000_726 DC AD(rd_kafka_mock_cluster_io_add)
0000AA08 000000000000A540                  15565 @lit_2000_725 DC AD(rd_kafka_mock_connection_io)
0000AA10 0000000000000000                  15566 @lit_2000_727 DC AD(rd_sockaddr2str)
                                           15567 * ***           }
0000AA18                                   15568 @L1227   DS    0H
                                           15569 * ***
                                           15570 * ***           rktrans = rd_kafka_transport_new(mrkb->cluster->dummy_\
                                           15571 * rkb, fd,
                                           15572 * ***                                            errstr, sizeof(errstr\
                                           15573 * ));
0000AA18 E3F0 20D8 0004          000000D8  15574          LG    15,216(0,2) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000AA1E E3F0 F0E0 0004          000000E0  15575          LG    15,224(0,15)
                                                                                                                           Page  314 
  Active Usings: @REGION_2000_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000AA24 E3F0 D128 0024          00000128  15576          STG   15,296(0,13)
0000AA2A B914 00F3                         15577          LGFR  15,3
0000AA2E E3F0 D130 0024          00000130  15578          STG   15,304(0,13)
0000AA34 41F0 D0A8               000000A8  15579          LA    15,168(0,13)
0000AA38 E3F0 D138 0024          00000138  15580          STG   15,312(0,13)
0000AA3E E548 D140 0080          00000140  15581          MVGHI 320(13),128
0000AA44 4110 D128               00000128  15582          LA    1,296(0,13)
0000AA48 E3F0 C088 0004          0000A9D0  15583          LG    15,@lit_2000_716 ; rd_kafka_transport_new
0000AA4E                                   15584 @@gen_label997 DS    0H
0000AA4E 05EF                              15585          BALR  14,15
0000AA50                                   15586 @@gen_label998 DS    0H
0000AA50 B904 004F                         15587          LGR   4,15
                                           15588 * ***           if (!rktrans) {
0000AA54 B902 00F4                         15589          LTGR  15,4
0000AA58 4770 C19C               0000AAE4  15590          BNZ   @L1228
                                           15591 * ***                   rd_kafka_log0(&mrkb->cluster->rk->rk_conf, mrk\
                                           15592 * b->cluster->rk, ((void *)0), 3, 0x0, "MOCK", "Failed to create trans\
                                           15593 * port for new " "mock connection: %s", errstr);
0000AA5C E3F0 20D8 0004          000000D8  15594          LG    15,216(0,2) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000AA62 E3F0 F020 0004          00000020  15595          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
0000AA68 41F0 F210               00000210  15596          LA    15,528(0,15)
0000AA6C E3F0 D128 0024          00000128  15597          STG   15,296(0,13)
0000AA72 E3F0 20D8 0004          000000D8  15598          LG    15,216(0,2) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000AA78 E3F0 F020 0004          00000020  15599          LG    15,32(0,15)
0000AA7E E3F0 D130 0024          00000130  15600          STG   15,304(0,13)
0000AA84 D707 D138 D138 00000138 00000138  15601          XC    312(8,13),312(13)
0000AA8A E548 D140 0003          00000140  15602          MVGHI 320(13),3
0000AA90 D707 D148 D148 00000148 00000148  15603          XC    328(8,13),328(13)
0000AA96 E3F0 C098 0004          0000A9E0  15604          LG    15,@lit_2000_717
0000AA9C 4110 F15E               0000015E  15605          LA    1,350(0,15)
0000AAA0 E310 D150 0024          00000150  15606          STG   1,336(0,13)
0000AAA6 41F0 F62E               0000062E  15607          LA    15,1582(0,15)
0000AAAA E3F0 D158 0024          00000158  15608          STG   15,344(0,13)
0000AAB0 41F0 D0A8               000000A8  15609          LA    15,168(0,13)
0000AAB4 E3F0 D160 0024          00000160  15610          STG   15,352(0,13)
0000AABA 4110 D128               00000128  15611          LA    1,296(0,13)
0000AABE E3F0 C090 0004          0000A9D8  15612          LG    15,@lit_2000_718 ; rd_kafka_log0
0000AAC4                                   15613 @@gen_label1000 DS    0H
0000AAC4 05EF                              15614          BALR  14,15
0000AAC6                                   15615 @@gen_label1001 DS    0H
                                           15616 * ***
                                           15617 * ***
                                           15618 * ***                   close(fd);
0000AAC6 B914 00F3                         15619          LGFR  15,3
0000AACA E3F0 D128 0024          00000128  15620          STG   15,296(0,13)
0000AAD0 4110 D128               00000128  15621          LA    1,296(0,13)
0000AAD4 E3F0 C080 0004          0000A9C8  15622          LG    15,@lit_2000_714 ; close
0000AADA                                   15623 @@gen_label1002 DS    0H
0000AADA 05EF                              15624          BALR  14,15
0000AADC                                   15625 @@gen_label1003 DS    0H
                                                                                                                           Page  315 
  Active Usings: @REGION_2000_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           15626 * ***                   return ((void *)0);
0000AADC A7F9 0000               00000000  15627          LGHI  15,0        ; 0
0000AAE0 47F0 C30E               0000AC56  15628          B     @ret_lab_2000
                                           15629 * ***           }
0000AAE4                                   15630 @L1228   DS    0H
                                           15631 * ***
                                           15632 * ***           rd_kafka_transport_post_connect_setup(rktrans);
0000AAE4 E340 D128 0024          00000128  15633          STG   4,296(0,13)
0000AAEA 4110 D128               00000128  15634          LA    1,296(0,13)
0000AAEE E3F0 C0A0 0004          0000A9E8  15635          LG    15,@lit_2000_721 ; rd_kafka_transport_post_connect_setup
0000AAF4                                   15636 @@gen_label1004 DS    0H
0000AAF4 05EF                              15637          BALR  14,15
0000AAF6                                   15638 @@gen_label1005 DS    0H
                                           15639 * ***
                                           15640 * ***           mconn = rd_calloc(1, sizeof(*mconn));
0000AAF6 E548 D128 0001          00000128  15641          MVGHI 296(13),1
0000AAFC E548 D130 00E8          00000130  15642          MVGHI 304(13),232
0000AB02 4110 D128               00000128  15643          LA    1,296(0,13)
0000AB06 E3F0 C0A8 0004          0000A9F0  15644          LG    15,@lit_2000_722 ; rd_calloc
0000AB0C                                   15645 @@gen_label1006 DS    0H
0000AB0C 05EF                              15646          BALR  14,15
0000AB0E                                   15647 @@gen_label1007 DS    0H
0000AB0E B904 003F                         15648          LGR   3,15
                                           15649 * ***           mconn->broker = mrkb;
0000AB12 E320 30A8 0024          000000A8  15650          STG   2,168(0,3)  ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
                                           15651 * ***           mconn->transport = rktrans;
0000AB18 E340 3010 0024          00000010  15652          STG   4,16(0,3)   ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
                                           15653 * ***           mconn->peer = *peer;
0000AB1E E310 5010 0004          00000010  15654          LG    1,16(0,5)   ; peer
0000AB24 D20F 3098 1000 00000098 00000000  15655          MVC   152(16,3),0(1)
                                           15656 * ***           rd_kafka_bufq_init(&mconn->outbufs);
0000AB2A 41F0 3020               00000020  15657          LA    15,32(0,3)
0000AB2E E3F0 D128 0024          00000128  15658          STG   15,296(0,13)
0000AB34 4110 D128               00000128  15659          LA    1,296(0,13)
0000AB38 E3F0 C0B0 0004          0000A9F8  15660          LG    15,@lit_2000_723 ; rd_kafka_bufq_init
0000AB3E                                   15661 @@gen_label1008 DS    0H
0000AB3E 05EF                              15662          BALR  14,15
0000AB40                                   15663 @@gen_label1009 DS    0H
                                           15664 * ***
                                           15665 * ***           do {  (mconn)->link .tqe_next = (((void *)0)); (mconn)\
                                           15666 * ->link .tqe_prev = (&mrkb->connections)->tqh_last; *(&mrkb->connecti\
                                           15667 * ons)->tqh_last = (mconn); (&mrkb->connections)->tqh_last = &(mconn)-\
                                           15668 * >link .tqe_next; } while ( 0);
0000AB40                                   15669 @L1229   DS    0H
0000AB40 A7F9 0000               00000000  15670          LGHI  15,0        ; 0
0000AB44 E3F0 3000 0024          00000000  15671          STG   15,0(0,3)   ; mconn
0000AB4A E3F0 20C0 0004          000000C0  15672          LG    15,192(0,2) ; offset of tqh_last in 0000162
0000AB50 E3F0 3008 0024          00000008  15673          STG   15,8(0,3)   ; offset of tqe_prev in 0000160
0000AB56 E3F0 20C0 0004          000000C0  15674          LG    15,192(0,2) ; offset of tqh_last in 0000162
0000AB5C E330 F000 0024          00000000  15675          STG   3,0(0,15)
                                                                                                                           Page  316 
  Active Usings: @REGION_2000_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000AB62 E330 20C0 0024          000000C0  15676          STG   3,192(0,2)  ; offset of tqh_last in 0000162
                                           15677 * ***
                                           15678 * ***           rd_kafka_mock_cluster_io_add(mrkb->cluster,
                                           15679 * ***                                        mconn->transport->rktrans\
                                           15680 * _s,
                                           15681 * ***                                        0x0001,
                                           15682 * ***                                        rd_kafka_mock_connection_\
                                           15683 * io,
                                           15684 * ***                                        mconn);
0000AB68 E3F0 20D8 0004          000000D8  15685          LG    15,216(0,2)
0000AB6E E3F0 D128 0024          00000128  15686          STG   15,296(0,13)
0000AB74 E3F0 3010 0004          00000010  15687          LG    15,16(0,3)  ; offset of transport in rd_kafka_mock_conne*
                                                                ction_s
0000AB7A E3F0 F000 0014          00000000  15688          LGF   15,0(0,15)
0000AB80 E3F0 D130 0024          00000130  15689          STG   15,304(0,13)
0000AB86 E548 D138 0001          00000138  15690          MVGHI 312(13),1
0000AB8C E3F0 C0C0 0004          0000AA08  15691          LG    15,@lit_2000_725 ; rd_kafka_mock_connection_io
0000AB92 E3F0 D140 0024          00000140  15692          STG   15,320(0,13)
0000AB98 E330 D148 0024          00000148  15693          STG   3,328(0,13)
0000AB9E 4110 D128               00000128  15694          LA    1,296(0,13)
0000ABA2 E3F0 C0B8 0004          0000AA00  15695          LG    15,@lit_2000_726 ; rd_kafka_mock_cluster_io_add
0000ABA8                                   15696 @@gen_label1010 DS    0H
0000ABA8 05EF                              15697          BALR  14,15
0000ABAA                                   15698 @@gen_label1011 DS    0H
                                           15699 * ***
                                           15700 * ***           do { if ((((mrkb->cluster->rk)->rk_conf.debug & (0x100\
                                           15701 * 00)))) rd_kafka_log0(&mrkb->cluster->rk->rk_conf,mrkb->cluster->rk,(\
                                           15702 * (void *)0), 7,(0x10000), "MOCK","Broker %" "d" ": New connection fro\
                                           15703 * m %s", mrkb->id, rd_sockaddr2str(&mconn->peer, 0x1)); } while (0);
0000ABAA                                   15704 @L1232   DS    0H
0000ABAA E3F0 20D8 0004          000000D8  15705          LG    15,216(0,2) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000ABB0 E3F0 F020 0004          00000020  15706          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
0000ABB6 9101 F321      00000321 00000001  15707          TM    801(15),1
0000ABBA 4780 C30A               0000AC52  15708          BZ    @L1235
0000ABBE 41F0 3098               00000098  15709          LA    15,152(0,3)
0000ABC2 E3F0 D128 0024          00000128  15710          STG   15,296(0,13)
0000ABC8 E548 D130 0001          00000130  15711          MVGHI 304(13),1
0000ABCE 4110 D128               00000128  15712          LA    1,296(0,13)
0000ABD2 E3F0 C0C8 0004          0000AA10  15713          LG    15,@lit_2000_727 ; rd_sockaddr2str
0000ABD8                                   15714 @@gen_label1013 DS    0H
0000ABD8 05EF                              15715          BALR  14,15
0000ABDA                                   15716 @@gen_label1014 DS    0H
0000ABDA E310 20D8 0004          000000D8  15717          LG    1,216(0,2)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000ABE0 E310 1020 0004          00000020  15718          LG    1,32(0,1)   ; offset of rk in rd_kafka_mock_cluster_s
0000ABE6 4110 1210               00000210  15719          LA    1,528(0,1)
0000ABEA E310 D128 0024          00000128  15720          STG   1,296(0,13)
0000ABF0 E310 20D8 0004          000000D8  15721          LG    1,216(0,2)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000ABF6 E310 1020 0004          00000020  15722          LG    1,32(0,1)
0000ABFC E310 D130 0024          00000130  15723          STG   1,304(0,13)
                                                                                                                           Page  317 
  Active Usings: @REGION_2000_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000AC02 D707 D138 D138 00000138 00000138  15724          XC    312(8,13),312(13)
0000AC08 E548 D140 0007          00000140  15725          MVGHI 320(13),7
0000AC0E C01F 0001 0000                    15726          LLILF 1,X'00010000' ; 65536
0000AC14 E310 D148 0024          00000148  15727          STG   1,328(0,13)
0000AC1A E310 C098 0004          0000A9E0  15728          LG    1,@lit_2000_717
0000AC20 4140 115E               0000015E  15729          LA    4,350(0,1)
0000AC24 E340 D150 0024          00000150  15730          STG   4,336(0,13)
0000AC2A 4110 1666               00000666  15731          LA    1,1638(0,1)
0000AC2E E310 D158 0024          00000158  15732          STG   1,344(0,13)
0000AC34 E310 2010 0014          00000010  15733          LGF   1,16(0,2)
0000AC3A E310 D160 0024          00000160  15734          STG   1,352(0,13)
0000AC40 E3F0 D168 0024          00000168  15735          STG   15,360(0,13)
0000AC46 4110 D128               00000128  15736          LA    1,296(0,13)
0000AC4A E3F0 C090 0004          0000A9D8  15737          LG    15,@lit_2000_718 ; rd_kafka_log0
0000AC50                                   15738 @@gen_label1015 DS    0H
0000AC50 05EF                              15739          BALR  14,15
0000AC52                                   15740 @@gen_label1016 DS    0H
0000AC52                                   15741 @L1235   DS    0H
                                           15742 * ***
                                           15743 * ***
                                           15744 * ***
                                           15745 * ***
                                           15746 * ***           return mconn;
0000AC52 B904 00F3                         15747          LGR   15,3
                                           15748 * ***   }
0000AC56                                   15749 @ret_lab_2000 DS 0H
                                           15750 * * **** Start of Epilogue
                                           15751          DCCEPIL
0000AC56                                   15752+         ds 0h                                                          01-DCCEP
                                           15753+* Epilog
0000AC56 D707 D088 D088 00000088 00000088  15754+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000AC5C E3D0 D080 0004          00000080  15755+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000AC62 E3C0 D090 0004          00000090  15756+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000AC68 E3B0 C018 0004          00000018  15757+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000AC6E E3C0 B010 0021          00000010  15758+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000AC74 E3E0 D008 0004          00000008  15759+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000AC7A EB1C D020 0004          00000020  15760+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000AC80 078E                              15761+         bcr 8,14                if same dsab, just return              01-DCCEP
0000AC82 E3F0 D010 0024          00000010  15762+         stg 15,16(0,13)         save return code                       01-DCCEP
0000AC88 E300 D018 0024          00000018  15763+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000AC8E E3F0 D090 0004          00000090  15764+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000AC94 E3F0 F018 0004          00000018  15765+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000AC9A 47F0 F040               00000040  15766+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           15767+* End of Epilog
                                           15768 * * **** End of Epilogue
                                           15769          DROP  12
                                           15770 *
                                           15771 *   DSECT for automatic variables in "rd_kafka_mock_connection_new"
                                           15772 *      (FUNCTION #2000)
                                           15773 *
00000000                00000000 00000128  15774 @AUTO#rd_kafka_mock_connection_new DSECT
00000000                                   15775          DS    XL168
                                                                                                                           Page  318 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000000A8                                   15776 rd_kafka_mock_connection_new#errstr#0 DS 128XL1 ; errstr
                                           15777 *
0000AC9E                00000000 00010480  15778 @CODE    CSECT
                                           15779 *
                                           15780 *
                                           15781 *
                                           15782 * ....... start of rd_kafka_mock_cluster_op_io
0000AC9E                                   15783 @LNAME2001 DS  0H
0000AC9E 0000001B                          15784          DC    X'0000001B'
0000ACA2 99846D9281869281                  15785          DC    C'rd_kafka_mock_cluster_op_io'
0000ACBD 00                                15786          DC    X'00'
                                           15787 rd_kafka_mock_cluster_op_io DCCPRLG CINDEX=2001,BASER=12,FRAME=1216,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2001
                                           15788          macro
                                           15789          dccextrn &m
                                           15790          gblc    &$dccext(1000)
                                           15791          gbla    &$dccexti
                                           15792          lcla    &i
                                           15793 &$dccext(&$dccexti+1) setc    '&m'
                                           15794 &i       seta    1
                                           15795 .loop    aif    (&i gt &$dccexti).around
                                           15796          aif    ('&$dccext(&i)' eq '&m').getout
                                           15797 &i       seta    &i+1
                                           15798          ago     .loop
                                           15799 .around  anop
                                           15800 &$dccexti seta &$dccexti+1
                                           15801          extrn  &m
                                           15802 .getout  anop
                                           15803          mend
0000ACC0                                   15804+$eye0238    ds    0d                                                    02-DCCCA
0000ACC0 C4C3C3                            15805+         dc cl3'DCC'                                                    02-DCCCA
0000ACC3 01                                15806+         dc xl1'01' format one                                          02-DCCCA
0000ACC4 00000000                          15807+         dc a(0)                                                        02-DCCCA
0000ACC8 000000000000AD32                  15808+         dc ad(@PER_2001)                                               02-DCCCA
0000ACD0 00000000000004C0                  15809+         dc ad(1216)                                                    02-DCCCA
0000ACD8 0000000000000000                  15810+         dc ad(0)                                                       02-DCCCA
0000ACE0 0000000000001000                  15811+         dc ad(4096)                                                    02-DCCCA
0000ACE8 20                                15812+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000ACE9 03                                15813+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000ACEA 03                                15814+         dc al1(3)                                                      02-DCCCA
0000ACEB 08                                15815+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000ACEC 00                                15816+         dc bl.8'00000000'                                              02-DCCCA
0000ACED 000000                            15817+         dc al3(0)                                                      02-DCCCA
0000ACF0 000000000000AC9E                  15818+         dc ad(@LNAME2001)                                              02-DCCCA
0000ACF8                                   15819+         ds 0d                                                          02-DCCCA
0000ACF8 000000000000ACC0                  15820+         dc ad($eye0238)                                                02-DCCCA
0000AD00 0000000000000000                  15821+         dc ad(0)                                                       02-DCCCA
0000AD08                                   15822+         ds    0d                                                       01-DCCPR
0000AD08                                   15823+rd_kafka_mock_cluster_op_io ds 0d                                       01-DCCPR
0000AD08                                   15824+@REGION_2001_1 ds 0h                                                    01-DCCPR
0000AD08 EBEC D008 0024          00000008  15825+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000AD0E E3E0 D088 0004          00000088  15826+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
                                                                                                                           Page  319 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000AD14 E3C0 D090 0004          00000090  15827+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000AD1A B904 002E                         15828+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000AD1E E3B0 C018 0004          00000018  15829+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000AD24 A7EB 04C0               000004C0  15830+         aghi  14,1216             increase by frame size               01-DCCPR
0000AD28 E3E0 C020 0021          00000020  15831+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000AD2E 4720 B020               00000020  15832+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000AD32                                   15833+@PER_2001 ds   0h                                                       01-DCCPR
0000AD32 EBDE 2080 0024          00000080  15834+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000AD38 E3C0 2090 0024          00000090  15835+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000AD3E B904 00D2                         15836+         lgr   13,2                set real frame pointer               01-DCCPR
0000AD42 B904 00CF                         15837+         lgr   12,15               set base reg                         01-DCCPR
                        0000AD08           15838+         using @REGION_2001_1,12                                        01-DCCPR
0000AD46 B904 0021                         15839          LGR   2,1         ; ptr to parm area
                                           15840 * ******* End of Prologue
                                           15841 * *
                                           15842 * ***
                                           15843 * ***           char buf[1024];
                                           15844 * ***           while (read(fd,buf,sizeof(buf)) > 0)
0000AD4A 47F0 C058               0000AD60  15845          B     @L1239
0000AD50                                   15846          DS    0D
0000AD50 000004C0                          15847 @FRAMESIZE_2001 DC F'1216'
0000AD54 00000000
0000AD58 0000000000000000                  15848 @lit_2001_732 DC AD(read)
                                           15849 * ***                   ;
0000AD60                                   15850 @L1239   DS    0H
0000AD60 E3F0 200C 0014          0000000C  15851          LGF   15,12(0,2)  ; fd
0000AD66 E3F0 D4A8 0024          000004A8  15852          STG   15,1192(0,13)
0000AD6C 41F0 D0A8               000000A8  15853          LA    15,168(0,13)
0000AD70 E3F0 D4B0 0024          000004B0  15854          STG   15,1200(0,13)
0000AD76 E548 D4B8 0400          000004B8  15855          MVGHI 1208(13),1024
0000AD7C 4110 D4A8               000004A8  15856          LA    1,1192(0,13)
0000AD80 E3F0 C050 0004          0000AD58  15857          LG    15,@lit_2001_732 ; read
0000AD86                                   15858 @@gen_label1017 DS    0H
0000AD86 05EF                              15859          BALR  14,15
0000AD88                                   15860 @@gen_label1018 DS    0H
0000AD88 B902 00FF                         15861          LTGR  15,15
0000AD8C 4720 C058               0000AD60  15862          BH    @L1239
                                           15863 * ***   }
0000AD90                                   15864 @ret_lab_2001 DS 0H
                                           15865 * * **** Start of Epilogue
                                           15866          DCCEPIL
0000AD90                                   15867+         ds 0h                                                          01-DCCEP
                                           15868+* Epilog
0000AD90 D707 D088 D088 00000088 00000088  15869+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000AD96 E3D0 D080 0004          00000080  15870+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000AD9C E3C0 D090 0004          00000090  15871+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000ADA2 E3B0 C018 0004          00000018  15872+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000ADA8 E3C0 B010 0021          00000010  15873+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000ADAE E3E0 D008 0004          00000008  15874+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000ADB4 EB1C D020 0004          00000020  15875+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000ADBA 078E                              15876+         bcr 8,14                if same dsab, just return              01-DCCEP
0000ADBC E3F0 D010 0024          00000010  15877+         stg 15,16(0,13)         save return code                       01-DCCEP
                                                                                                                           Page  320 
  Active Usings: @REGION_2001_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000ADC2 E300 D018 0024          00000018  15878+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000ADC8 E3F0 D090 0004          00000090  15879+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000ADCE E3F0 F018 0004          00000018  15880+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000ADD4 47F0 F040               00000040  15881+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           15882+* End of Epilog
                                           15883 * * **** End of Epilogue
                                           15884          DROP  12
                                           15885 *
                                           15886 *   DSECT for automatic variables in "rd_kafka_mock_cluster_op_io"
                                           15887 *      (FUNCTION #2001)
                                           15888 *
00000000                00000000 000004A8  15889 @AUTO#rd_kafka_mock_cluster_op_io DSECT
00000000                                   15890          DS    XL168
000000A8                                   15891 rd_kafka_mock_cluster_op_io#buf#0 DS 1024XL1 ; buf
                                           15892 *
0000ADD8                00000000 00010480  15893 @CODE    CSECT
                                           15894 *
                                           15895 *
                                           15896 *
                                           15897 * ....... start of rd_kafka_mock_cluster_io_poll
0000ADD8                                   15898 @LNAME2002 DS  0H
0000ADD8 0000001D                          15899          DC    X'0000001D'
0000ADDC 99846D9281869281                  15900          DC    C'rd_kafka_mock_cluster_io_poll'
0000ADF9 00                                15901          DC    X'00'
                                           15902 rd_kafka_mock_cluster_io_poll DCCPRLG CINDEX=2002,BASER=12,FRAME=256,EN*
                                                                TRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2002
                                           15903          macro
                                           15904          dccextrn &m
                                           15905          gblc    &$dccext(1000)
                                           15906          gbla    &$dccexti
                                           15907          lcla    &i
                                           15908 &$dccext(&$dccexti+1) setc    '&m'
                                           15909 &i       seta    1
                                           15910 .loop    aif    (&i gt &$dccexti).around
                                           15911          aif    ('&$dccext(&i)' eq '&m').getout
                                           15912 &i       seta    &i+1
                                           15913          ago     .loop
                                           15914 .around  anop
                                           15915 &$dccexti seta &$dccexti+1
                                           15916          extrn  &m
                                           15917 .getout  anop
                                           15918          mend
0000AE00                                   15919+$eye0241    ds    0d                                                    02-DCCCA
0000AE00 C4C3C3                            15920+         dc cl3'DCC'                                                    02-DCCCA
0000AE03 01                                15921+         dc xl1'01' format one                                          02-DCCCA
0000AE04 00000000                          15922+         dc a(0)                                                        02-DCCCA
0000AE08 000000000000AE72                  15923+         dc ad(@PER_2002)                                               02-DCCCA
0000AE10 0000000000000100                  15924+         dc ad(256)                                                     02-DCCCA
0000AE18 0000000000000000                  15925+         dc ad(0)                                                       02-DCCCA
0000AE20 0000000000001000                  15926+         dc ad(4096)                                                    02-DCCCA
0000AE28 20                                15927+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000AE29 03                                15928+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
                                                                                                                           Page  321 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000AE2A 03                                15929+         dc al1(3)                                                      02-DCCCA
0000AE2B 08                                15930+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000AE2C 00                                15931+         dc bl.8'00000000'                                              02-DCCCA
0000AE2D 000000                            15932+         dc al3(0)                                                      02-DCCCA
0000AE30 000000000000ADD8                  15933+         dc ad(@LNAME2002)                                              02-DCCCA
0000AE38                                   15934+         ds 0d                                                          02-DCCCA
0000AE38 000000000000AE00                  15935+         dc ad($eye0241)                                                02-DCCCA
0000AE40 0000000000000000                  15936+         dc ad(0)                                                       02-DCCCA
0000AE48                                   15937+         ds    0d                                                       01-DCCPR
0000AE48                                   15938+rd_kafka_mock_cluster_io_poll ds 0d                                     01-DCCPR
0000AE48                                   15939+@REGION_2002_1 ds 0h                                                    01-DCCPR
0000AE48 EBEC D008 0024          00000008  15940+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000AE4E E3E0 D088 0004          00000088  15941+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000AE54 E3C0 D090 0004          00000090  15942+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000AE5A B904 002E                         15943+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000AE5E E3B0 C018 0004          00000018  15944+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000AE64 A7EB 0100               00000100  15945+         aghi  14,256              increase by frame size               01-DCCPR
0000AE68 E3E0 C020 0021          00000020  15946+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000AE6E 4720 B020               00000020  15947+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000AE72                                   15948+@PER_2002 ds   0h                                                       01-DCCPR
0000AE72 EBDE 2080 0024          00000080  15949+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000AE78 E3C0 2090 0024          00000090  15950+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000AE7E B904 00D2                         15951+         lgr   13,2                set real frame pointer               01-DCCPR
0000AE82 B904 00CF                         15952+         lgr   12,15               set base reg                         01-DCCPR
                        0000AE48           15953+         using @REGION_2002_1,12                                        01-DCCPR
                                           15954 * ******* End of Prologue
                                           15955 * *
0000AE86 E340 1000 0004          00000000  15956          LG    4,0(0,1)    ; mcluster
                                           15957 * ***           int r;
                                           15958 * ***           int i;
                                           15959 * ***
                                           15960 * ***           r = poll(mcluster->fds,mcluster->fd_cnt,timeout_ms);
0000AE8C E3F0 40D8 0004          000000D8  15961          LG    15,216(0,4)
0000AE92 E3F0 D0B0 0024          000000B0  15962          STG   15,176(0,13)
0000AE98 E3F0 40CC 0016          000000CC  15963          LLGF  15,204(0,4)
0000AE9E E3F0 D0B8 0024          000000B8  15964          STG   15,184(0,13)
0000AEA4 E3F0 100C 0014          0000000C  15965          LGF   15,12(0,1)  ; timeout_ms
0000AEAA E3F0 D0C0 0024          000000C0  15966          STG   15,192(0,13)
0000AEB0 4110 D0B0               000000B0  15967          LA    1,176(0,13)
0000AEB4 E3F0 C120 0004          0000AF68  15968          LG    15,@lit_2002_734 ; poll
0000AEBA                                   15969 @@gen_label1020 DS    0H
0000AEBA 05EF                              15970          BALR  14,15
0000AEBC                                   15971 @@gen_label1021 DS    0H
0000AEBC 183F                              15972          LR    3,15        ; r
                                           15973 * ***           if (r == (-1)) {
0000AEBE A7FE FFFF               0000FFFF  15974          CHI   15,-1
0000AEC2 4770 C150               0000AF98  15975          BNE   @L1240
                                           15976 * ***                   rd_kafka_log0(&mcluster->rk->rk_conf, mcluster\
                                           15977 * ->rk, ((void *)0), 2, 0x0, "MOCK", "Mock cluster failed to poll %d f\
                                           15978 * ds: %d: %s", mcluster->fd_cnt, r, strerror((* __error())));
0000AEC6 E3F0 C128 0004          0000AF70  15979          LG    15,@lit_2002_735 ; __error
0000AECC                                   15980 @@gen_label1023 DS    0H
                                                                                                                           Page  322 
  Active Usings: @REGION_2002_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000AECC 05EF                              15981          BALR  14,15
0000AECE                                   15982 @@gen_label1024 DS    0H
0000AECE 58F0 F000               00000000  15983          L     15,0(0,15)
0000AED2 B914 00FF                         15984          LGFR  15,15
0000AED6 E3F0 D0B0 0024          000000B0  15985          STG   15,176(0,13)
0000AEDC 4110 D0B0               000000B0  15986          LA    1,176(0,13)
0000AEE0 E3F0 C130 0004          0000AF78  15987          LG    15,@lit_2002_736 ; strerror
0000AEE6                                   15988 @@gen_label1025 DS    0H
0000AEE6 05EF                              15989          BALR  14,15
0000AEE8                                   15990 @@gen_label1026 DS    0H
0000AEE8 E310 4020 0004          00000020  15991          LG    1,32(0,4)   ; offset of rk in rd_kafka_mock_cluster_s
0000AEEE 4110 1210               00000210  15992          LA    1,528(0,1)
0000AEF2 E310 D0B0 0024          000000B0  15993          STG   1,176(0,13)
0000AEF8 E310 4020 0004          00000020  15994          LG    1,32(0,4)
0000AEFE E310 D0B8 0024          000000B8  15995          STG   1,184(0,13)
0000AF04 D707 D0C0 D0C0 000000C0 000000C0  15996          XC    192(8,13),192(13)
0000AF0A E548 D0C8 0002          000000C8  15997          MVGHI 200(13),2
0000AF10 D707 D0D0 D0D0 000000D0 000000D0  15998          XC    208(8,13),208(13)
0000AF16 E310 C140 0004          0000AF88  15999          LG    1,@lit_2002_737
0000AF1C 4120 115E               0000015E  16000          LA    2,350(0,1)
0000AF20 E320 D0D8 0024          000000D8  16001          STG   2,216(0,13)
0000AF26 4110 1688               00000688  16002          LA    1,1672(0,1)
0000AF2A E310 D0E0 0024          000000E0  16003          STG   1,224(0,13)
0000AF30 E310 40CC 0014          000000CC  16004          LGF   1,204(0,4)
0000AF36 E310 D0E8 0024          000000E8  16005          STG   1,232(0,13)
0000AF3C B914 0013                         16006          LGFR  1,3
0000AF40 E310 D0F0 0024          000000F0  16007          STG   1,240(0,13)
0000AF46 E3F0 D0F8 0024          000000F8  16008          STG   15,248(0,13)
0000AF4C 4110 D0B0               000000B0  16009          LA    1,176(0,13)
0000AF50 E3F0 C138 0004          0000AF80  16010          LG    15,@lit_2002_738 ; rd_kafka_log0
0000AF56                                   16011 @@gen_label1027 DS    0H
0000AF56 05EF                              16012          BALR  14,15
0000AF58                                   16013 @@gen_label1028 DS    0H
                                           16014 * ***
                                           16015 * ***
                                           16016 * ***
                                           16017 * ***                   return -1;
0000AF58 A7F9 FFFF               0000FFFF  16018          LGHI  15,-1       ; -1
0000AF5C 47F0 C236               0000B07E  16019          B     @ret_lab_2002
0000AF60                                   16020          DS    0D
0000AF60 00000100                          16021 @FRAMESIZE_2002 DC F'256'
0000AF64 00000000
0000AF68 0000000000000000                  16022 @lit_2002_734 DC AD(poll)
0000AF70 0000000000000000                  16023 @lit_2002_735 DC AD(__error)
0000AF78 0000000000000000                  16024 @lit_2002_736 DC AD(strerror)
0000AF80 0000000000000000                  16025 @lit_2002_738 DC AD(rd_kafka_log0)
0000AF88 0000000000010840                  16026 @lit_2002_737 DC AD(@strings@)
0000AF90 0000000000000000                  16027 @lit_2002_740 DC AD(rd_kafka_q_serve)
                                           16028 * ***           }
0000AF98                                   16029 @L1240   DS    0H
                                           16030 * ***
                                           16031 * ***
                                                                                                                           Page  323 
  Active Usings: @REGION_2002_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16032 * ***           rd_kafka_q_serve(mcluster->ops, 0, 0,
                                           16033 * ***                            RD_KAFKA_Q_CB_CALLBACK, ((void *)0), \
                                           16034 * ((void *)0));
0000AF98 E3F0 40B8 0004          000000B8  16035          LG    15,184(0,4)
0000AF9E E3F0 D0B0 0024          000000B0  16036          STG   15,176(0,13)
0000AFA4 D70F D0B8 D0B8 000000B8 000000B8  16037          XC    184(16,13),184(13)
0000AFAA E548 D0C8 0001          000000C8  16038          MVGHI 200(13),1
0000AFB0 D70F D0D0 D0D0 000000D0 000000D0  16039          XC    208(16,13),208(13)
0000AFB6 4110 D0B0               000000B0  16040          LA    1,176(0,13)
0000AFBA E3F0 C148 0004          0000AF90  16041          LG    15,@lit_2002_740 ; rd_kafka_q_serve
0000AFC0                                   16042 @@gen_label1029 DS    0H
0000AFC0 05EF                              16043          BALR  14,15
0000AFC2                                   16044 @@gen_label1030 DS    0H
                                           16045 * ***
                                           16046 * ***
                                           16047 * ***           for (i = 0 ; mcluster->run  && r > 0 && i < mcluster->\
                                           16048 * fd_cnt ; i++) {
0000AFC2 A728 0000               00000000  16049          LHI   2,0         ; 0
0000AFC6 47F0 C21C               0000B064  16050          B     @L1242
0000AFCA                                   16051 @L1241   DS    0H
                                           16052 * ***                   if (!mcluster->fds[i].revents)
0000AFCA B914 00F2                         16053          LGFR  15,2
0000AFCE E310 40D8 0004          000000D8  16054          LG    1,216(0,4)  ; offset of fds in rd_kafka_mock_cluster_s
0000AFD4 EBFF 0003 000D          00000003  16055          SLLG  15,15,3(0)  ; *0x8
0000AFDA 48FF 1006               00000006  16056          LH    15,6(15,1)
0000AFDE 12FF                              16057          LTR   15,15
0000AFE0 4780 C218               0000B060  16058          BZ    @L1245
                                           16059 * ***                           continue;
0000AFE4                                   16060 @L1246   DS    0H
                                           16061 * ***
                                           16062 * ***
                                           16063 * ***                   mcluster->handlers[i].cb(mcluster, mcluster->f\
                                           16064 * ds[i].fd,
                                           16065 * ***                                            mcluster->fds[i].reve\
                                           16066 * nts,
                                           16067 * ***                                            mcluster->handlers[i]\
                                           16068 * .opaque);
0000AFE4 E340 D0B0 0024          000000B0  16069          STG   4,176(0,13)
0000AFEA B914 00F2                         16070          LGFR  15,2
0000AFEE E310 40D8 0004          000000D8  16071          LG    1,216(0,4)  ; offset of fds in rd_kafka_mock_cluster_s
0000AFF4 EBFF 0003 000D          00000003  16072          SLLG  15,15,3(0)  ; *0x8
0000AFFA E3FF 1000 0014          00000000  16073          LGF   15,0(15,1)
0000B000 E3F0 D0B8 0024          000000B8  16074          STG   15,184(0,13)
0000B006 B914 00F2                         16075          LGFR  15,2
0000B00A E310 40D8 0004          000000D8  16076          LG    1,216(0,4)  ; offset of fds in rd_kafka_mock_cluster_s
0000B010 EBFF 0003 000D          00000003  16077          SLLG  15,15,3(0)  ; *0x8
0000B016 48FF 1006               00000006  16078          LH    15,6(15,1)
0000B01A B914 00FF                         16079          LGFR  15,15
0000B01E E3F0 D0C0 0024          000000C0  16080          STG   15,192(0,13)
0000B024 B914 00F2                         16081          LGFR  15,2
0000B028 E310 40F0 0004          000000F0  16082          LG    1,240(0,4)  ; offset of handlers in rd_kafka_mock_cluste*
                                                                r_s
                                                                                                                           Page  324 
  Active Usings: @REGION_2002_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B02E EBFF 0004 000D          00000004  16083          SLLG  15,15,4(0)  ; *0x10
0000B034 E3FF 1008 0004          00000008  16084          LG    15,8(15,1)
0000B03A E3F0 D0C8 0024          000000C8  16085          STG   15,200(0,13)
0000B040 B914 00F2                         16086          LGFR  15,2
0000B044 E310 40F0 0004          000000F0  16087          LG    1,240(0,4)  ; offset of handlers in rd_kafka_mock_cluste*
                                                                r_s
0000B04A EBFF 0004 000D          00000004  16088          SLLG  15,15,4(0)  ; *0x10
0000B050 E3FF 1000 0004          00000000  16089          LG    15,0(15,1)
0000B056 4110 D0B0               000000B0  16090          LA    1,176(0,13)
0000B05A                                   16091 @@gen_label1032 DS    0H
0000B05A 05EF                              16092          BALR  14,15
0000B05C                                   16093 @@gen_label1033 DS    0H
                                           16094 * ***                   r--;
0000B05C A73A FFFF               0000FFFF  16095          AHI   3,-1
                                           16096 * ***           }
0000B060                                   16097 @L1245   DS    0H
0000B060 A72A 0001               00000001  16098          AHI   2,1
0000B064                                   16099 @L1242   DS    0H
0000B064 9500 40C8      000000C8 00000000  16100          CLI   200(4),0
0000B068 4780 C232               0000B07A  16101          BE    @L1243
0000B06C 1233                              16102          LTR   3,3
0000B06E 47D0 C232               0000B07A  16103          BNH   @L1243
0000B072 5920 40CC               000000CC  16104          C     2,204(0,4)
0000B076 4740 C182               0000AFCA  16105          BL    @L1241
0000B07A                                   16106 @L1243   DS    0H
                                           16107 * ***
                                           16108 * ***           return 0;
0000B07A A7F9 0000               00000000  16109          LGHI  15,0        ; 0
                                           16110 * ***   }
0000B07E                                   16111 @ret_lab_2002 DS 0H
                                           16112 * * **** Start of Epilogue
                                           16113          DCCEPIL
0000B07E                                   16114+         ds 0h                                                          01-DCCEP
                                           16115+* Epilog
0000B07E D707 D088 D088 00000088 00000088  16116+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000B084 E3D0 D080 0004          00000080  16117+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000B08A E3C0 D090 0004          00000090  16118+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000B090 E3B0 C018 0004          00000018  16119+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000B096 E3C0 B010 0021          00000010  16120+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000B09C E3E0 D008 0004          00000008  16121+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000B0A2 EB1C D020 0004          00000020  16122+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000B0A8 078E                              16123+         bcr 8,14                if same dsab, just return              01-DCCEP
0000B0AA E3F0 D010 0024          00000010  16124+         stg 15,16(0,13)         save return code                       01-DCCEP
0000B0B0 E300 D018 0024          00000018  16125+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000B0B6 E3F0 D090 0004          00000090  16126+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000B0BC E3F0 F018 0004          00000018  16127+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000B0C2 47F0 F040               00000040  16128+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           16129+* End of Epilog
                                           16130 * * **** End of Epilogue
                                           16131          DROP  12
                                           16132 *
                                           16133 *   DSECT for automatic variables in "rd_kafka_mock_cluster_io_poll"
                                                                                                                           Page  325 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16134 *      (FUNCTION #2002)
                                           16135 *
00000000                00000000 000000AC  16136 @AUTO#rd_kafka_mock_cluster_io_poll DSECT
00000000                                   16137          DS    XL168
000000A8                                   16138 rd_kafka_mock_cluster_io_poll#i#0 DS 1F ; i
000000AC                000000AC 000000A8  16139          ORG   @AUTO#rd_kafka_mock_cluster_io_poll+168
000000A8                                   16140 rd_kafka_mock_cluster_io_poll#r#0 DS 1F ; r
                                           16141 *
0000B0C6                00000000 00010480  16142 @CODE    CSECT
                                           16143 *
                                           16144 *
                                           16145 *
                                           16146 * ....... start of rd_kafka_mock_cluster_thread_main
0000B0C6                                   16147 @LNAME2003 DS  0H
0000B0C6 00000021                          16148          DC    X'00000021'
0000B0CA 99846D9281869281                  16149          DC    C'rd_kafka_mock_cluster_thread_mai'
0000B0EA 95                                16150          DC    C'n'
0000B0EB 00                                16151          DC    X'00'
                                           16152 rd_kafka_mock_cluster_thread_main DCCPRLG CINDEX=2003,BASER=12,FRAME=21*
                                                                6,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2003
                                           16153          macro
                                           16154          dccextrn &m
                                           16155          gblc    &$dccext(1000)
                                           16156          gbla    &$dccexti
                                           16157          lcla    &i
                                           16158 &$dccext(&$dccexti+1) setc    '&m'
                                           16159 &i       seta    1
                                           16160 .loop    aif    (&i gt &$dccexti).around
                                           16161          aif    ('&$dccext(&i)' eq '&m').getout
                                           16162 &i       seta    &i+1
                                           16163          ago     .loop
                                           16164 .around  anop
                                           16165 &$dccexti seta &$dccexti+1
                                           16166          extrn  &m
                                           16167 .getout  anop
                                           16168          mend
0000B0F0                                   16169+$eye0244    ds    0d                                                    02-DCCCA
0000B0F0 C4C3C3                            16170+         dc cl3'DCC'                                                    02-DCCCA
0000B0F3 01                                16171+         dc xl1'01' format one                                          02-DCCCA
0000B0F4 00000000                          16172+         dc a(0)                                                        02-DCCCA
0000B0F8 000000000000B162                  16173+         dc ad(@PER_2003)                                               02-DCCCA
0000B100 00000000000000D8                  16174+         dc ad(216)                                                     02-DCCCA
0000B108 0000000000000000                  16175+         dc ad(0)                                                       02-DCCCA
0000B110 0000000000001000                  16176+         dc ad(4096)                                                    02-DCCCA
0000B118 20                                16177+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000B119 03                                16178+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000B11A 03                                16179+         dc al1(3)                                                      02-DCCCA
0000B11B 08                                16180+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000B11C 00                                16181+         dc bl.8'00000000'                                              02-DCCCA
0000B11D 000000                            16182+         dc al3(0)                                                      02-DCCCA
0000B120 000000000000B0C6                  16183+         dc ad(@LNAME2003)                                              02-DCCCA
0000B128                                   16184+         ds 0d                                                          02-DCCCA
                                                                                                                           Page  326 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B128 000000000000B0F0                  16185+         dc ad($eye0244)                                                02-DCCCA
0000B130 0000000000000000                  16186+         dc ad(0)                                                       02-DCCCA
0000B138                                   16187+         ds    0d                                                       01-DCCPR
0000B138                                   16188+rd_kafka_mock_cluster_thread_main ds 0d                                 01-DCCPR
0000B138                                   16189+@REGION_2003_1 ds 0h                                                    01-DCCPR
0000B138 EBEC D008 0024          00000008  16190+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000B13E E3E0 D088 0004          00000088  16191+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000B144 E3C0 D090 0004          00000090  16192+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000B14A B904 002E                         16193+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000B14E E3B0 C018 0004          00000018  16194+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000B154 A7EB 00D8               000000D8  16195+         aghi  14,216              increase by frame size               01-DCCPR
0000B158 E3E0 C020 0021          00000020  16196+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000B15E 4720 B020               00000020  16197+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000B162                                   16198+@PER_2003 ds   0h                                                       01-DCCPR
0000B162 EBDE 2080 0024          00000080  16199+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000B168 E3C0 2090 0024          00000090  16200+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000B16E B904 00D2                         16201+         lgr   13,2                set real frame pointer               01-DCCPR
0000B172 B904 00CF                         16202+         lgr   12,15               set base reg                         01-DCCPR
                        0000B138           16203+         using @REGION_2003_1,12                                        01-DCCPR
                                           16204          DCCPRV REG=3      ; Get PRV from DVT
0000B176 E330 B008 0004          00000008  16205+         LG 3,8(0,11)                                                   01-DCCPR
                                           16206 * ******* End of Prologue
                                           16207 * *
                                           16208 * ***           rd_kafka_mock_cluster_t *mcluster = arg;
0000B17C E320 1000 0004          00000000  16209          LG    2,0(0,1)    ; arg
                                           16210 * ***
                                           16211 * ***           rd_kafka_set_thread_name("mock");
0000B182 E340 C110 0004          0000B248  16212          LG    4,@lit_2003_744
0000B188 41F0 46B4               000006B4  16213          LA    15,1716(0,4)
0000B18C E3F0 D0B0 0024          000000B0  16214          STG   15,176(0,13)
0000B192 4110 D0B0               000000B0  16215          LA    1,176(0,13)
0000B196 E3F0 C108 0004          0000B240  16216          LG    15,@lit_2003_745 ; rd_kafka_set_thread_name
0000B19C                                   16217 @@gen_label1037 DS    0H
0000B19C 05EF                              16218          BALR  14,15
0000B19E                                   16219 @@gen_label1038 DS    0H
                                           16220 * ***           rd_kafka_set_thread_sysname("rdk:mock");
0000B19E 41F0 46BA               000006BA  16221          LA    15,1722(0,4)
0000B1A2 E3F0 D0B0 0024          000000B0  16222          STG   15,176(0,13)
0000B1A8 4110 D0B0               000000B0  16223          LA    1,176(0,13)
0000B1AC E3F0 C118 0004          0000B250  16224          LG    15,@lit_2003_746 ; rd_kafka_set_thread_sysname
0000B1B2                                   16225 @@gen_label1039 DS    0H
0000B1B2 05EF                              16226          BALR  14,15
0000B1B4                                   16227 @@gen_label1040 DS    0H
                                           16228 * ***           rd_kafka_interceptors_on_thread_start(mcluster->rk,
                                           16229 * ***                                                 RD_KAFKA_THREAD_\
                                           16230 * BACKGROUND);
0000B1B4 E3F0 2020 0004          00000020  16231          LG    15,32(0,2)
0000B1BA E3F0 D0B0 0024          000000B0  16232          STG   15,176(0,13)
0000B1C0 E548 D0B8 0001          000000B8  16233          MVGHI 184(13),1
0000B1C6 4110 D0B0               000000B0  16234          LA    1,176(0,13)
0000B1CA E3F0 C120 0004          0000B258  16235          LG    15,@lit_2003_747 ; rd_kafka_interceptors_on_thread_start
0000B1D0                                   16236 @@gen_label1041 DS    0H
                                                                                                                           Page  327 
  Active Usings: @REGION_2003_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B1D0 05EF                              16237          BALR  14,15
0000B1D2                                   16238 @@gen_label1042 DS    0H
                                           16239 * ***           rd_atomic32_add(&rd_kafka_thread_cnt_curr, 1);
0000B1D2 E3F0 C130 0016          0000B268  16240          LLGF  15,@lit_2003_748 ; rd_kafka_thread_cnt_curr
0000B1D8 41FF 3000               00000000  16241          LA    15,0(15,3)
0000B1DC E3F0 D0B0 0024          000000B0  16242          STG   15,176(0,13)
0000B1E2 E548 D0B8 0001          000000B8  16243          MVGHI 184(13),1
0000B1E8 4110 D0B0               000000B0  16244          LA    1,176(0,13)
0000B1EC E3F0 C128 0004          0000B260  16245          LG    15,@lit_2003_749 ; rd_atomic32_add
0000B1F2                                   16246 @@gen_label1043 DS    0H
0000B1F2 05EF                              16247          BALR  14,15
0000B1F4                                   16248 @@gen_label1044 DS    0H
                                           16249 * ***
                                           16250 * ***
                                           16251 * ***           rd_kafka_mock_cluster_io_add(mcluster, mcluster->wakeu\
                                           16252 * p_fds[0],
                                           16253 * ***                                        0x0001,
                                           16254 * ***                                        rd_kafka_mock_cluster_op_\
                                           16255 * io, ((void *)0));
0000B1F4 E320 D0B0 0024          000000B0  16256          STG   2,176(0,13)
0000B1FA E3F0 20C0 0014          000000C0  16257          LGF   15,192(0,2)
0000B200 E3F0 D0B8 0024          000000B8  16258          STG   15,184(0,13)
0000B206 E548 D0C0 0001          000000C0  16259          MVGHI 192(13),1
0000B20C E3F0 C140 0004          0000B278  16260          LG    15,@lit_2003_750 ; rd_kafka_mock_cluster_op_io
0000B212 E3F0 D0C8 0024          000000C8  16261          STG   15,200(0,13)
0000B218 D707 D0D0 D0D0 000000D0 000000D0  16262          XC    208(8,13),208(13)
0000B21E 4110 D0B0               000000B0  16263          LA    1,176(0,13)
0000B222 E3F0 C138 0004          0000B270  16264          LG    15,@lit_2003_751 ; rd_kafka_mock_cluster_io_add
0000B228                                   16265 @@gen_label1045 DS    0H
0000B228 05EF                              16266          BALR  14,15
0000B22A                                   16267 @@gen_label1046 DS    0H
                                           16268 * ***
                                           16269 * ***           mcluster->run = 1;
0000B22A 9201 20C8      000000C8 00000001  16270          MVI   200(2),1    ; offset of run in rd_kafka_mock_cluster_s
                                           16271 * ***
                                           16272 * ***           while (mcluster->run) {
0000B22E 47F0 C1FE               0000B336  16273          B     @L1250
0000B238                                   16274          DS    0D
0000B238 000000D8                          16275 @FRAMESIZE_2003 DC F'216'
0000B23C 00000000
0000B240 0000000000000000                  16276 @lit_2003_745 DC AD(rd_kafka_set_thread_name)
0000B248 0000000000010840                  16277 @lit_2003_744 DC AD(@strings@)
0000B250 0000000000000000                  16278 @lit_2003_746 DC AD(rd_kafka_set_thread_sysname)
0000B258 0000000000000000                  16279 @lit_2003_747 DC AD(rd_kafka_interceptors_on_thread_start)
0000B260 0000000000000060                  16280 @lit_2003_749 DC AD(rd_atomic32_add)
0000B268 00000000                          16281 @lit_2003_748 DC Q(rd_kafka_thread_cnt_curr)
0000B26C 00000000
0000B270 00000000000067C8                  16282 @lit_2003_751 DC AD(rd_kafka_mock_cluster_io_add)
0000B278 000000000000AD08                  16283 @lit_2003_750 DC AD(rd_kafka_mock_cluster_op_io)
0000B280 0000000000000000                  16284 @lit_2003_753 DC AD(rd_kafka_timers_next)
0000B288 000000000000AE48                  16285 @lit_2003_755 DC AD(rd_kafka_mock_cluster_io_poll)
0000B290 000003E8                          16286 @lit_2003_754 DC F'1000' 0x000003e8
                                                                                                                           Page  328 
  Active Usings: @REGION_2003_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B294 00000000
0000B298 0000000000000000                  16287 @lit_2003_756 DC AD(rd_kafka_timers_run)
0000B2A0 0000000000006550                  16288 @lit_2003_757 DC AD(rd_kafka_mock_cluster_io_del)
0000B2A8 0000000000000000                  16289 @lit_2003_758 DC AD(rd_kafka_interceptors_on_thread_exit)
0000B2B0 00000000000001A8                  16290 @lit_2003_760 DC AD(rd_atomic32_sub)
0000B2B8 000000000000F498                  16291 @lit_2003_761 DC AD(rd_kafka_mock_cluster_destroy0)
0000B2C0                                   16292 @L1249   DS    0H
                                           16293 * ***                   int sleeptime =
                                           16294 * ***                           (int)((rd_kafka_timers_next(
                                           16295 * ***                                          &mcluster->timers,
                                           16296 * ***                                          1000*1000,
                                           16297 * ***                                          1) + 999) / 1000);
0000B2C0 41F0 24E0               000004E0  16298          LA    15,1248(0,2)
0000B2C4 E3F0 D0B0 0024          000000B0  16299          STG   15,176(0,13)
0000B2CA C0FF 000F 4240                    16300          LLILF 15,X'000F4240' ; 1000000
0000B2D0 E3F0 D0B8 0024          000000B8  16301          STG   15,184(0,13)
0000B2D6 E548 D0C0 0001          000000C0  16302          MVGHI 192(13),1
0000B2DC 4110 D0B0               000000B0  16303          LA    1,176(0,13)
0000B2E0 E3F0 C148 0004          0000B280  16304          LG    15,@lit_2003_753 ; rd_kafka_timers_next
0000B2E6                                   16305 @@gen_label1047 DS    0H
0000B2E6 05EF                              16306          BALR  14,15
0000B2E8                                   16307 @@gen_label1048 DS    0H
0000B2E8 A7FB 03E7               000003E7  16308          AGHI  15,999
0000B2EC B904 005F                         16309          LGR   5,15
0000B2F0 E340 C158 001D          0000B290  16310          DSGF  4,@lit_2003_754
                                           16311 * ***
                                           16312 * ***                   if (rd_kafka_mock_cluster_io_poll(mcluster, sl\
                                           16313 * eeptime) == -1)
0000B2F6 E320 D0B0 0024          000000B0  16314          STG   2,176(0,13)
0000B2FC B914 00F5                         16315          LGFR  15,5
0000B300 E3F0 D0B8 0024          000000B8  16316          STG   15,184(0,13)
0000B306 4110 D0B0               000000B0  16317          LA    1,176(0,13)
0000B30A E3F0 C150 0004          0000B288  16318          LG    15,@lit_2003_755 ; rd_kafka_mock_cluster_io_poll
0000B310                                   16319 @@gen_label1049 DS    0H
0000B310 05EF                              16320          BALR  14,15
0000B312                                   16321 @@gen_label1050 DS    0H
0000B312 A7FE FFFF               0000FFFF  16322          CHI   15,-1
0000B316 4780 C206               0000B33E  16323          BE    @L1247
                                           16324 * ***                           break;
0000B31A                                   16325 @L1251   DS    0H
                                           16326 * ***
                                           16327 * ***                   rd_kafka_timers_run(&mcluster->timers, 0);
0000B31A 41F0 24E0               000004E0  16328          LA    15,1248(0,2)
0000B31E E3F0 D0B0 0024          000000B0  16329          STG   15,176(0,13)
0000B324 D707 D0B8 D0B8 000000B8 000000B8  16330          XC    184(8,13),184(13)
0000B32A 4110 D0B0               000000B0  16331          LA    1,176(0,13)
0000B32E E3F0 C160 0004          0000B298  16332          LG    15,@lit_2003_756 ; rd_kafka_timers_run
0000B334                                   16333 @@gen_label1052 DS    0H
0000B334 05EF                              16334          BALR  14,15
0000B336                                   16335 @@gen_label1053 DS    0H
                                           16336 * ***           }
0000B336                                   16337 @L1250   DS    0H
                                                                                                                           Page  329 
  Active Usings: @REGION_2003_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B336 9500 20C8      000000C8 00000000  16338          CLI   200(2),0
0000B33A 4770 C188               0000B2C0  16339          BNE   @L1249
0000B33E                                   16340 @L1247   DS    0H
                                           16341 * ***
                                           16342 * ***           rd_kafka_mock_cluster_io_del(mcluster, mcluster->wakeu\
                                           16343 * p_fds[0]);
0000B33E E320 D0B0 0024          000000B0  16344          STG   2,176(0,13)
0000B344 E3F0 20C0 0014          000000C0  16345          LGF   15,192(0,2)
0000B34A E3F0 D0B8 0024          000000B8  16346          STG   15,184(0,13)
0000B350 4110 D0B0               000000B0  16347          LA    1,176(0,13)
0000B354 E3F0 C168 0004          0000B2A0  16348          LG    15,@lit_2003_757 ; rd_kafka_mock_cluster_io_del
0000B35A                                   16349 @@gen_label1055 DS    0H
0000B35A 05EF                              16350          BALR  14,15
0000B35C                                   16351 @@gen_label1056 DS    0H
                                           16352 * ***
                                           16353 * ***
                                           16354 * ***           rd_kafka_interceptors_on_thread_exit(mcluster->rk,
                                           16355 * ***                                                RD_KAFKA_THREAD_B\
                                           16356 * ACKGROUND);
0000B35C E3F0 2020 0004          00000020  16357          LG    15,32(0,2)
0000B362 E3F0 D0B0 0024          000000B0  16358          STG   15,176(0,13)
0000B368 E548 D0B8 0001          000000B8  16359          MVGHI 184(13),1
0000B36E 4110 D0B0               000000B0  16360          LA    1,176(0,13)
0000B372 E3F0 C170 0004          0000B2A8  16361          LG    15,@lit_2003_758 ; rd_kafka_interceptors_on_thread_exit
0000B378                                   16362 @@gen_label1057 DS    0H
0000B378 05EF                              16363          BALR  14,15
0000B37A                                   16364 @@gen_label1058 DS    0H
                                           16365 * ***           rd_atomic32_sub(&rd_kafka_thread_cnt_curr, 1);
0000B37A E3F0 C130 0016          0000B268  16366          LLGF  15,@lit_2003_748 ; rd_kafka_thread_cnt_curr
0000B380 41FF 3000               00000000  16367          LA    15,0(15,3)
0000B384 E3F0 D0B0 0024          000000B0  16368          STG   15,176(0,13)
0000B38A E548 D0B8 0001          000000B8  16369          MVGHI 184(13),1
0000B390 4110 D0B0               000000B0  16370          LA    1,176(0,13)
0000B394 E3F0 C178 0004          0000B2B0  16371          LG    15,@lit_2003_760 ; rd_atomic32_sub
0000B39A                                   16372 @@gen_label1059 DS    0H
0000B39A 05EF                              16373          BALR  14,15
0000B39C                                   16374 @@gen_label1060 DS    0H
                                           16375 * ***
                                           16376 * ***           rd_kafka_mock_cluster_destroy0(mcluster);
0000B39C E320 D0B0 0024          000000B0  16377          STG   2,176(0,13)
0000B3A2 4110 D0B0               000000B0  16378          LA    1,176(0,13)
0000B3A6 E3F0 C180 0004          0000B2B8  16379          LG    15,@lit_2003_761 ; rd_kafka_mock_cluster_destroy0
0000B3AC                                   16380 @@gen_label1061 DS    0H
0000B3AC 05EF                              16381          BALR  14,15
0000B3AE                                   16382 @@gen_label1062 DS    0H
                                           16383 * ***
                                           16384 * ***           return 0;
0000B3AE A7F9 0000               00000000  16385          LGHI  15,0        ; 0
                                           16386 * ***   }
                                           16387 * * **** Start of Epilogue
                                           16388          DCCEPIL
0000B3B2                                   16389+         ds 0h                                                          01-DCCEP
                                                                                                                           Page  330 
  Active Usings: @REGION_2003_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16390+* Epilog
0000B3B2 D707 D088 D088 00000088 00000088  16391+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000B3B8 E3D0 D080 0004          00000080  16392+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000B3BE E3C0 D090 0004          00000090  16393+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000B3C4 E3B0 C018 0004          00000018  16394+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000B3CA E3C0 B010 0021          00000010  16395+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000B3D0 E3E0 D008 0004          00000008  16396+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000B3D6 EB1C D020 0004          00000020  16397+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000B3DC 078E                              16398+         bcr 8,14                if same dsab, just return              01-DCCEP
0000B3DE E3F0 D010 0024          00000010  16399+         stg 15,16(0,13)         save return code                       01-DCCEP
0000B3E4 E300 D018 0024          00000018  16400+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000B3EA E3F0 D090 0004          00000090  16401+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000B3F0 E3F0 F018 0004          00000018  16402+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000B3F6 47F0 F040               00000040  16403+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           16404+* End of Epilog
                                           16405 * * **** End of Epilogue
                                           16406          DROP  12
                                           16407 *
                                           16408 *   DSECT for automatic variables in "rd_kafka_mock_cluster_thread_mai
                                           16409 *           n"
                                           16410 *      (FUNCTION #2003)
                                           16411 *
00000000                00000000 000000AC  16412 @AUTO#rd_kafka_mock_cluster_thread_main DSECT
00000000                                   16413          DS    XL168
000000A8                                   16414 rd_kafka_mock_cluster_thread_main#sleeptime#1 DS 1F ; sleeptime
                                           16415 *
0000B3FA                00000000 00010480  16416 @CODE    CSECT
                                           16417 *
                                           16418 *
                                           16419 *
                                           16420 * ....... start of rd_kafka_mock_broker_listen_io
0000B3FA                                   16421 @LNAME2004 DS  0H
0000B3FA 0000001E                          16422          DC    X'0000001E'
0000B3FE 99846D9281869281                  16423          DC    C'rd_kafka_mock_broker_listen_io'
0000B41C 00                                16424          DC    X'00'
                                           16425 rd_kafka_mock_broker_listen_io DCCPRLG CINDEX=2004,BASER=12,FRAME=256,E*
                                                                NTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2004
                                           16426          macro
                                           16427          dccextrn &m
                                           16428          gblc    &$dccext(1000)
                                           16429          gbla    &$dccexti
                                           16430          lcla    &i
                                           16431 &$dccext(&$dccexti+1) setc    '&m'
                                           16432 &i       seta    1
                                           16433 .loop    aif    (&i gt &$dccexti).around
                                           16434          aif    ('&$dccext(&i)' eq '&m').getout
                                           16435 &i       seta    &i+1
                                           16436          ago     .loop
                                           16437 .around  anop
                                           16438 &$dccexti seta &$dccexti+1
                                           16439          extrn  &m
                                           16440 .getout  anop
                                                                                                                           Page  331 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16441          mend
0000B420                                   16442+$eye0248    ds    0d                                                    02-DCCCA
0000B420 C4C3C3                            16443+         dc cl3'DCC'                                                    02-DCCCA
0000B423 01                                16444+         dc xl1'01' format one                                          02-DCCCA
0000B424 00000000                          16445+         dc a(0)                                                        02-DCCCA
0000B428 000000000000B492                  16446+         dc ad(@PER_2004)                                               02-DCCCA
0000B430 0000000000000100                  16447+         dc ad(256)                                                     02-DCCCA
0000B438 0000000000000000                  16448+         dc ad(0)                                                       02-DCCCA
0000B440 0000000000001000                  16449+         dc ad(4096)                                                    02-DCCCA
0000B448 20                                16450+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000B449 03                                16451+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000B44A 03                                16452+         dc al1(3)                                                      02-DCCCA
0000B44B 08                                16453+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000B44C 00                                16454+         dc bl.8'00000000'                                              02-DCCCA
0000B44D 000000                            16455+         dc al3(0)                                                      02-DCCCA
0000B450 000000000000B3FA                  16456+         dc ad(@LNAME2004)                                              02-DCCCA
0000B458                                   16457+         ds 0d                                                          02-DCCCA
0000B458 000000000000B420                  16458+         dc ad($eye0248)                                                02-DCCCA
0000B460 0000000000000000                  16459+         dc ad(0)                                                       02-DCCCA
0000B468                                   16460+         ds    0d                                                       01-DCCPR
0000B468                                   16461+rd_kafka_mock_broker_listen_io ds 0d                                    01-DCCPR
0000B468                                   16462+@REGION_2004_1 ds 0h                                                    01-DCCPR
0000B468 EBEC D008 0024          00000008  16463+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000B46E E3E0 D088 0004          00000088  16464+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000B474 E3C0 D090 0004          00000090  16465+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000B47A B904 002E                         16466+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000B47E E3B0 C018 0004          00000018  16467+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000B484 A7EB 0100               00000100  16468+         aghi  14,256              increase by frame size               01-DCCPR
0000B488 E3E0 C020 0021          00000020  16469+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000B48E 4720 B020               00000020  16470+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000B492                                   16471+@PER_2004 ds   0h                                                       01-DCCPR
0000B492 EBDE 2080 0024          00000080  16472+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000B498 E3C0 2090 0024          00000090  16473+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000B49E B904 00D2                         16474+         lgr   13,2                set real frame pointer               01-DCCPR
0000B4A2 B904 00CF                         16475+         lgr   12,15               set base reg                         01-DCCPR
                        0000B468           16476+         using @REGION_2004_1,12                                        01-DCCPR
0000B4A6 B904 0031                         16477          LGR   3,1         ; ptr to parm area
                                           16478 * ******* End of Prologue
                                           16479 * *
                                           16480 * ***           rd_kafka_mock_broker_t *mrkb = opaque;
0000B4AA E320 3018 0004          00000018  16481          LG    2,24(0,3)   ; opaque
                                           16482 * ***
                                           16483 * ***           if (events & (0x0008|0x0010))
0000B4B0 9118 3017      00000017 00000018  16484          TM    23(3),24
0000B4B4 4780 C098               0000B500  16485          BZ    @L1252
                                           16486 * ***                   ((!*"Mock broker listen socket error") ? (void\
                                           16487 * )0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock\
                                           16488 * .c", 1231, "!*\"Mock broker listen socket error\""));
0000B4B8 E3F0 C168 0004          0000B5D0  16489          LG    15,@lit_2004_764
0000B4BE 4110 F6C4               000006C4  16490          LA    1,1732(0,15)
0000B4C2 9500 1000      00000000 00000000  16491          CLI   0(1),0
0000B4C6 4780 C098               0000B500  16492          BE    @L1252
                                                                                                                           Page  332 
  Active Usings: @REGION_2004_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B4CA                                   16493 @L1253   DS    0H
0000B4CA E310 C178 0004          0000B5E0  16494          LG    1,@lit_2004_765
0000B4D0 4110 12D4               000002D4  16495          LA    1,724(0,1)
0000B4D4 E310 D0C0 0024          000000C0  16496          STG   1,192(0,13)
0000B4DA 4110 F0FA               000000FA  16497          LA    1,250(0,15)
0000B4DE E310 D0C8 0024          000000C8  16498          STG   1,200(0,13)
0000B4E4 E548 D0D0 04CF          000000D0  16499          MVGHI 208(13),1231
0000B4EA 41F0 F6E4               000006E4  16500          LA    15,1764(0,15)
0000B4EE E3F0 D0D8 0024          000000D8  16501          STG   15,216(0,13)
0000B4F4 4110 D0C0               000000C0  16502          LA    1,192(0,13)
0000B4F8 E3F0 C170 0004          0000B5D8  16503          LG    15,@lit_2004_766 ; __assert
0000B4FE                                   16504 @@gen_label1065 DS    0H
0000B4FE 05EF                              16505          BALR  14,15
0000B500                                   16506 @@gen_label1066 DS    0H
0000B500                                   16507 @L1254   DS    0H
0000B500                                   16508 @L1252   DS    0H
                                           16509 * ***
                                           16510 * ***           if (events & 0x0001) {
0000B500 9101 3017      00000017 00000001  16511          TM    23(3),1
0000B504 4780 C1CE               0000B636  16512          BZ    @L1255
                                           16513 * ***                   rd_socket_t new_s;
                                           16514 * ***                   struct sockaddr_in peer;
                                           16515 * ***                   socklen_t peer_size = sizeof(peer);
0000B508 E54C D0A8 0010          000000A8  16516          MVHI  168(13),16  ; peer_size
                                           16517 * ***
                                           16518 * ***                   new_s = accept(mrkb->listen_s, (struct sockadd\
                                           16519 * r *)&peer,
                                           16520 * ***                                  &peer_size);
0000B50E E3F0 20B0 0014          000000B0  16521          LGF   15,176(0,2)
0000B514 E3F0 D0C0 0024          000000C0  16522          STG   15,192(0,13)
0000B51A 41F0 D0AC               000000AC  16523          LA    15,172(0,13)
0000B51E E3F0 D0C8 0024          000000C8  16524          STG   15,200(0,13)
0000B524 41F0 D0A8               000000A8  16525          LA    15,168(0,13)
0000B528 E3F0 D0D0 0024          000000D0  16526          STG   15,208(0,13)
0000B52E 4110 D0C0               000000C0  16527          LA    1,192(0,13)
0000B532 E3F0 C180 0004          0000B5E8  16528          LG    15,@lit_2004_767 ; accept
0000B538                                   16529 @@gen_label1068 DS    0H
0000B538 05EF                              16530          BALR  14,15
0000B53A                                   16531 @@gen_label1069 DS    0H
                                           16532 * ***                   if (new_s == (-1)) {
0000B53A A7FE FFFF               0000FFFF  16533          CHI   15,-1
0000B53E 4770 C1A8               0000B610  16534          BNE   @L1256
                                           16535 * ***                           rd_kafka_log0(&mcluster->rk->rk_conf, \
                                           16536 * mcluster->rk, ((void *)0), 3, 0x0, "MOCK", "Failed to accept mock br\
                                           16537 * oker socket: %s", strerror((* __error())));
0000B542 E3F0 C188 0004          0000B5F0  16538          LG    15,@lit_2004_768 ; __error
0000B548                                   16539 @@gen_label1071 DS    0H
0000B548 05EF                              16540          BALR  14,15
0000B54A                                   16541 @@gen_label1072 DS    0H
0000B54A 58F0 F000               00000000  16542          L     15,0(0,15)
0000B54E B914 00FF                         16543          LGFR  15,15
0000B552 E3F0 D0C0 0024          000000C0  16544          STG   15,192(0,13)
                                                                                                                           Page  333 
  Active Usings: @REGION_2004_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B558 4110 D0C0               000000C0  16545          LA    1,192(0,13)
0000B55C E3F0 C190 0004          0000B5F8  16546          LG    15,@lit_2004_769 ; strerror
0000B562                                   16547 @@gen_label1073 DS    0H
0000B562 05EF                              16548          BALR  14,15
0000B564                                   16549 @@gen_label1074 DS    0H
0000B564 E310 3000 0004          00000000  16550          LG    1,0(0,3)    ; mcluster
0000B56A E320 1020 0004          00000020  16551          LG    2,32(0,1)   ; offset of rk in rd_kafka_mock_cluster_s
0000B570 4120 2210               00000210  16552          LA    2,528(0,2)
0000B574 E320 D0C0 0024          000000C0  16553          STG   2,192(0,13)
0000B57A E310 1020 0004          00000020  16554          LG    1,32(0,1)
0000B580 E310 D0C8 0024          000000C8  16555          STG   1,200(0,13)
0000B586 D707 D0D0 D0D0 000000D0 000000D0  16556          XC    208(8,13),208(13)
0000B58C E548 D0D8 0003          000000D8  16557          MVGHI 216(13),3
0000B592 D707 D0E0 D0E0 000000E0 000000E0  16558          XC    224(8,13),224(13)
0000B598 E310 C168 0004          0000B5D0  16559          LG    1,@lit_2004_764
0000B59E 4120 115E               0000015E  16560          LA    2,350(0,1)
0000B5A2 E320 D0E8 0024          000000E8  16561          STG   2,232(0,13)
0000B5A8 4110 1708               00000708  16562          LA    1,1800(0,1)
0000B5AC E310 D0F0 0024          000000F0  16563          STG   1,240(0,13)
0000B5B2 E3F0 D0F8 0024          000000F8  16564          STG   15,248(0,13)
0000B5B8 4110 D0C0               000000C0  16565          LA    1,192(0,13)
0000B5BC E3F0 C198 0004          0000B600  16566          LG    15,@lit_2004_771 ; rd_kafka_log0
0000B5C2                                   16567 @@gen_label1075 DS    0H
0000B5C2 05EF                              16568          BALR  14,15
0000B5C4                                   16569 @@gen_label1076 DS    0H
                                           16570 * ***
                                           16571 * ***
                                           16572 * ***                           return;
0000B5C4 47F0 C1CE               0000B636  16573          B     @ret_lab_2004
0000B5C8                                   16574          DS    0D
0000B5C8 00000100                          16575 @FRAMESIZE_2004 DC F'256'
0000B5CC 00000000
0000B5D0 0000000000010840                  16576 @lit_2004_764 DC AD(@strings@)
0000B5D8 0000000000000000                  16577 @lit_2004_766 DC AD(__assert)
0000B5E0 0000000000010480                  16578 @lit_2004_765 DC AD(@DATA)
0000B5E8 0000000000000000                  16579 @lit_2004_767 DC AD(accept)
0000B5F0 0000000000000000                  16580 @lit_2004_768 DC AD(__error)
0000B5F8 0000000000000000                  16581 @lit_2004_769 DC AD(strerror)
0000B600 0000000000000000                  16582 @lit_2004_771 DC AD(rd_kafka_log0)
0000B608 000000000000A948                  16583 @lit_2004_772 DC AD(rd_kafka_mock_connection_new)
                                           16584 * ***                   }
0000B610                                   16585 @L1256   DS    0H
                                           16586 * ***
                                           16587 * ***                   rd_kafka_mock_connection_new(mrkb, new_s, &pee\
                                           16588 * r);
0000B610 E320 D0C0 0024          000000C0  16589          STG   2,192(0,13)
0000B616 B914 00FF                         16590          LGFR  15,15
0000B61A E3F0 D0C8 0024          000000C8  16591          STG   15,200(0,13)
0000B620 41F0 D0AC               000000AC  16592          LA    15,172(0,13)
0000B624 E3F0 D0D0 0024          000000D0  16593          STG   15,208(0,13)
0000B62A 4110 D0C0               000000C0  16594          LA    1,192(0,13)
0000B62E E3F0 C1A0 0004          0000B608  16595          LG    15,@lit_2004_772 ; rd_kafka_mock_connection_new
                                                                                                                           Page  334 
  Active Usings: @REGION_2004_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B634                                   16596 @@gen_label1077 DS    0H
0000B634 05EF                              16597          BALR  14,15
0000B636                                   16598 @@gen_label1078 DS    0H
                                           16599 * ***           }
0000B636                                   16600 @L1255   DS    0H
                                           16601 * ***   }
0000B636                                   16602 @ret_lab_2004 DS 0H
                                           16603 * * **** Start of Epilogue
                                           16604          DCCEPIL
0000B636                                   16605+         ds 0h                                                          01-DCCEP
                                           16606+* Epilog
0000B636 D707 D088 D088 00000088 00000088  16607+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000B63C E3D0 D080 0004          00000080  16608+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000B642 E3C0 D090 0004          00000090  16609+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000B648 E3B0 C018 0004          00000018  16610+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000B64E E3C0 B010 0021          00000010  16611+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000B654 E3E0 D008 0004          00000008  16612+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000B65A EB1C D020 0004          00000020  16613+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000B660 078E                              16614+         bcr 8,14                if same dsab, just return              01-DCCEP
0000B662 E3F0 D010 0024          00000010  16615+         stg 15,16(0,13)         save return code                       01-DCCEP
0000B668 E300 D018 0024          00000018  16616+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000B66E E3F0 D090 0004          00000090  16617+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000B674 E3F0 F018 0004          00000018  16618+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000B67A 47F0 F040               00000040  16619+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           16620+* End of Epilog
                                           16621 * * **** End of Epilogue
                                           16622          DROP  12
                                           16623 *
                                           16624 *   DSECT for automatic variables in "rd_kafka_mock_broker_listen_io"
                                           16625 *      (FUNCTION #2004)
                                           16626 *
00000000                00000000 000000BC  16627 @AUTO#rd_kafka_mock_broker_listen_io DSECT
00000000                                   16628          DS    XL168
000000A8                                   16629 rd_kafka_mock_broker_listen_io#peer_size#1 DS 1F ; peer_size
000000AC                000000AC 000000A8  16630          ORG   @AUTO#rd_kafka_mock_broker_listen_io+168
000000A8                                   16631 rd_kafka_mock_broker_listen_io#new_s#1 DS 1F ; new_s
000000AC                000000AC 000000AC  16632          ORG   @AUTO#rd_kafka_mock_broker_listen_io+172
000000AC                                   16633 rd_kafka_mock_broker_listen_io#peer#1 DS 16XL1 ; peer
                                           16634 *
0000B67E                00000000 00010480  16635 @CODE    CSECT
                                           16636 *
                                           16637 *
                                           16638 *
                                           16639 * ....... start of rd_kafka_mock_broker_close_all
0000B67E                                   16640 @LNAME2005 DS  0H
0000B67E 0000001E                          16641          DC    X'0000001E'
0000B682 99846D9281869281                  16642          DC    C'rd_kafka_mock_broker_close_all'
0000B6A0 00                                16643          DC    X'00'
                                           16644 rd_kafka_mock_broker_close_all DCCPRLG CINDEX=2005,BASER=12,FRAME=192,E*
                                                                NTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2005
                                           16645          macro
                                           16646          dccextrn &m
                                                                                                                           Page  335 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16647          gblc    &$dccext(1000)
                                           16648          gbla    &$dccexti
                                           16649          lcla    &i
                                           16650 &$dccext(&$dccexti+1) setc    '&m'
                                           16651 &i       seta    1
                                           16652 .loop    aif    (&i gt &$dccexti).around
                                           16653          aif    ('&$dccext(&i)' eq '&m').getout
                                           16654 &i       seta    &i+1
                                           16655          ago     .loop
                                           16656 .around  anop
                                           16657 &$dccexti seta &$dccexti+1
                                           16658          extrn  &m
                                           16659 .getout  anop
                                           16660          mend
0000B6A8                                   16661+$eye0251    ds    0d                                                    02-DCCCA
0000B6A8 C4C3C3                            16662+         dc cl3'DCC'                                                    02-DCCCA
0000B6AB 01                                16663+         dc xl1'01' format one                                          02-DCCCA
0000B6AC 00000000                          16664+         dc a(0)                                                        02-DCCCA
0000B6B0 000000000000B71A                  16665+         dc ad(@PER_2005)                                               02-DCCCA
0000B6B8 00000000000000C0                  16666+         dc ad(192)                                                     02-DCCCA
0000B6C0 0000000000000000                  16667+         dc ad(0)                                                       02-DCCCA
0000B6C8 0000000000001000                  16668+         dc ad(4096)                                                    02-DCCCA
0000B6D0 20                                16669+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000B6D1 03                                16670+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000B6D2 03                                16671+         dc al1(3)                                                      02-DCCCA
0000B6D3 08                                16672+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000B6D4 00                                16673+         dc bl.8'00000000'                                              02-DCCCA
0000B6D5 000000                            16674+         dc al3(0)                                                      02-DCCCA
0000B6D8 000000000000B67E                  16675+         dc ad(@LNAME2005)                                              02-DCCCA
0000B6E0                                   16676+         ds 0d                                                          02-DCCCA
0000B6E0 000000000000B6A8                  16677+         dc ad($eye0251)                                                02-DCCCA
0000B6E8 0000000000000000                  16678+         dc ad(0)                                                       02-DCCCA
0000B6F0                                   16679+         ds    0d                                                       01-DCCPR
0000B6F0                                   16680+rd_kafka_mock_broker_close_all ds 0d                                    01-DCCPR
0000B6F0                                   16681+@REGION_2005_1 ds 0h                                                    01-DCCPR
0000B6F0 EBEC D008 0024          00000008  16682+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000B6F6 E3E0 D088 0004          00000088  16683+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000B6FC E3C0 D090 0004          00000090  16684+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000B702 B904 002E                         16685+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000B706 E3B0 C018 0004          00000018  16686+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000B70C A7EB 00C0               000000C0  16687+         aghi  14,192              increase by frame size               01-DCCPR
0000B710 E3E0 C020 0021          00000020  16688+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000B716 4720 B020               00000020  16689+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000B71A                                   16690+@PER_2005 ds   0h                                                       01-DCCPR
0000B71A EBDE 2080 0024          00000080  16691+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000B720 E3C0 2090 0024          00000090  16692+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000B726 B904 00D2                         16693+         lgr   13,2                set real frame pointer               01-DCCPR
0000B72A B904 00CF                         16694+         lgr   12,15               set base reg                         01-DCCPR
                        0000B6F0           16695+         using @REGION_2005_1,12                                        01-DCCPR
0000B72E B904 0021                         16696          LGR   2,1         ; ptr to parm area
                                           16697 * ******* End of Prologue
                                           16698 * *
                                                                                                                           Page  336 
  Active Usings: @REGION_2005_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16699 * ***           rd_kafka_mock_connection_t *mconn;
                                           16700 * ***
                                           16701 * ***           while ((mconn = ((&mrkb->connections)->tqh_first)))
0000B732 47F0 C076               0000B766  16702          B     @L1260
0000B738                                   16703          DS    0D
0000B738 000000C0                          16704 @FRAMESIZE_2005 DC F'192'
0000B73C 00000000
0000B740 0000000000006A10                  16705 @lit_2005_774 DC AD(rd_kafka_mock_connection_close)
0000B748                                   16706 @L1259   DS    0H
                                           16707 * ***                   rd_kafka_mock_connection_close(mconn, reason);
0000B748 E3F0 D0B0 0024          000000B0  16708          STG   15,176(0,13)
0000B74E E3F0 2008 0004          00000008  16709          LG    15,8(0,2)   ; reason
0000B754 E3F0 D0B8 0024          000000B8  16710          STG   15,184(0,13)
0000B75A 4110 D0B0               000000B0  16711          LA    1,176(0,13)
0000B75E E3F0 C050 0004          0000B740  16712          LG    15,@lit_2005_774 ; rd_kafka_mock_connection_close
0000B764                                   16713 @@gen_label1079 DS    0H
0000B764 05EF                              16714          BALR  14,15
0000B766                                   16715 @@gen_label1080 DS    0H
0000B766                                   16716 @L1260   DS    0H
0000B766 E3F0 2000 0004          00000000  16717          LG    15,0(0,2)   ; mrkb
0000B76C E3F0 F0B8 0004          000000B8  16718          LG    15,184(0,15) ; offset of connections in rd_kafka_mock_br*
                                                                oker_s
0000B772 B902 001F                         16719          LTGR  1,15
0000B776 4770 C058               0000B748  16720          BNZ   @L1259
                                           16721 * ***   }
0000B77A                                   16722 @ret_lab_2005 DS 0H
                                           16723 * * **** Start of Epilogue
                                           16724          DCCEPIL
0000B77A                                   16725+         ds 0h                                                          01-DCCEP
                                           16726+* Epilog
0000B77A D707 D088 D088 00000088 00000088  16727+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000B780 E3D0 D080 0004          00000080  16728+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000B786 E3C0 D090 0004          00000090  16729+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000B78C E3B0 C018 0004          00000018  16730+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000B792 E3C0 B010 0021          00000010  16731+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000B798 E3E0 D008 0004          00000008  16732+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000B79E EB1C D020 0004          00000020  16733+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000B7A4 078E                              16734+         bcr 8,14                if same dsab, just return              01-DCCEP
0000B7A6 E3F0 D010 0024          00000010  16735+         stg 15,16(0,13)         save return code                       01-DCCEP
0000B7AC E300 D018 0024          00000018  16736+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000B7B2 E3F0 D090 0004          00000090  16737+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000B7B8 E3F0 F018 0004          00000018  16738+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000B7BE 47F0 F040               00000040  16739+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           16740+* End of Epilog
                                           16741 * * **** End of Epilogue
                                           16742          DROP  12
                                           16743 *
                                           16744 *   DSECT for automatic variables in "rd_kafka_mock_broker_close_all"
                                           16745 *      (FUNCTION #2005)
                                           16746 *
00000000                00000000 000000A8  16747 @AUTO#rd_kafka_mock_broker_close_all DSECT
00000000                                   16748          DS    XL168
                                                                                                                           Page  337 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           16749 *
0000B7C2                00000000 00010480  16750 @CODE    CSECT
                                           16751 *
                                           16752 *
                                           16753 *
                                           16754 * ....... start of rd_kafka_mock_error_stack_destroy
0000B7C2                                   16755 @LNAME2006 DS  0H
0000B7C2 00000021                          16756          DC    X'00000021'
0000B7C6 99846D9281869281                  16757          DC    C'rd_kafka_mock_error_stack_destro'
0000B7E6 A8                                16758          DC    C'y'
0000B7E7 00                                16759          DC    X'00'
                                           16760 rd_kafka_mock_error_stack_destroy DCCPRLG CINDEX=2006,BASER=12,FRAME=17*
                                                                6,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2006
                                           16761          macro
                                           16762          dccextrn &m
                                           16763          gblc    &$dccext(1000)
                                           16764          gbla    &$dccexti
                                           16765          lcla    &i
                                           16766 &$dccext(&$dccexti+1) setc    '&m'
                                           16767 &i       seta    1
                                           16768 .loop    aif    (&i gt &$dccexti).around
                                           16769          aif    ('&$dccext(&i)' eq '&m').getout
                                           16770 &i       seta    &i+1
                                           16771          ago     .loop
                                           16772 .around  anop
                                           16773 &$dccexti seta &$dccexti+1
                                           16774          extrn  &m
                                           16775 .getout  anop
                                           16776          mend
0000B7E8                                   16777+$eye0254    ds    0d                                                    02-DCCCA
0000B7E8 C4C3C3                            16778+         dc cl3'DCC'                                                    02-DCCCA
0000B7EB 01                                16779+         dc xl1'01' format one                                          02-DCCCA
0000B7EC 00000000                          16780+         dc a(0)                                                        02-DCCCA
0000B7F0 000000000000B85A                  16781+         dc ad(@PER_2006)                                               02-DCCCA
0000B7F8 00000000000000B0                  16782+         dc ad(176)                                                     02-DCCCA
0000B800 0000000000000000                  16783+         dc ad(0)                                                       02-DCCCA
0000B808 0000000000001000                  16784+         dc ad(4096)                                                    02-DCCCA
0000B810 20                                16785+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000B811 03                                16786+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000B812 03                                16787+         dc al1(3)                                                      02-DCCCA
0000B813 08                                16788+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000B814 00                                16789+         dc bl.8'00000000'                                              02-DCCCA
0000B815 000000                            16790+         dc al3(0)                                                      02-DCCCA
0000B818 000000000000B7C2                  16791+         dc ad(@LNAME2006)                                              02-DCCCA
0000B820                                   16792+         ds 0d                                                          02-DCCCA
0000B820 000000000000B7E8                  16793+         dc ad($eye0254)                                                02-DCCCA
0000B828 0000000000000000                  16794+         dc ad(0)                                                       02-DCCCA
0000B830                                   16795+         ds    0d                                                       01-DCCPR
0000B830                                   16796+rd_kafka_mock_error_stack_destroy ds 0d                                 01-DCCPR
0000B830                                   16797+@REGION_2006_1 ds 0h                                                    01-DCCPR
0000B830 EBEC D008 0024          00000008  16798+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000B836 E3E0 D088 0004          00000088  16799+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
                                                                                                                           Page  338 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B83C E3C0 D090 0004          00000090  16800+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000B842 B904 002E                         16801+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000B846 E3B0 C018 0004          00000018  16802+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000B84C A7EB 00B0               000000B0  16803+         aghi  14,176              increase by frame size               01-DCCPR
0000B850 E3E0 C020 0021          00000020  16804+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000B856 4720 B020               00000020  16805+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000B85A                                   16806+@PER_2006 ds   0h                                                       01-DCCPR
0000B85A EBDE 2080 0024          00000080  16807+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000B860 E3C0 2090 0024          00000090  16808+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000B866 B904 00D2                         16809+         lgr   13,2                set real frame pointer               01-DCCPR
0000B86A B904 00CF                         16810+         lgr   12,15               set base reg                         01-DCCPR
                        0000B830           16811+         using @REGION_2006_1,12                                        01-DCCPR
                                           16812 * ******* End of Prologue
                                           16813 * *
                                           16814 * ***           if (errstack->errs)
0000B86E E320 1000 0004          00000000  16815          LG    2,0(0,1)    ; errstack
0000B874 E3F0 2028 0002          00000028  16816          LTG   15,40(0,2)  ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000B87A 4780 C066               0000B896  16817          BZ    @L1261
                                           16818 * ***                   rd_free(errstack->errs);
0000B87E E3F0 2028 0004          00000028  16819          LG    15,40(0,2)
0000B884 E3F0 D0A8 0024          000000A8  16820          STG   15,168(0,13)
0000B88A 4110 D0A8               000000A8  16821          LA    1,168(0,13)
0000B88E E3F0 C0C8 0004          0000B8F8  16822          LG    15,@lit_2006_776 ; rd_free
0000B894                                   16823 @@gen_label1083 DS    0H
0000B894 05EF                              16824          BALR  14,15
0000B896                                   16825 @@gen_label1084 DS    0H
0000B896                                   16826 @L1261   DS    0H
                                           16827 * ***           rd_free(errstack);
0000B896 E320 D0A8 0024          000000A8  16828          STG   2,168(0,13)
0000B89C 4110 D0A8               000000A8  16829          LA    1,168(0,13)
0000B8A0 E3F0 C0C8 0004          0000B8F8  16830          LG    15,@lit_2006_776 ; rd_free
0000B8A6                                   16831 @@gen_label1085 DS    0H
0000B8A6 05EF                              16832          BALR  14,15
0000B8A8                                   16833 @@gen_label1086 DS    0H
                                           16834 * ***   }
0000B8A8                                   16835 @ret_lab_2006 DS 0H
                                           16836 * * **** Start of Epilogue
                                           16837          DCCEPIL
0000B8A8                                   16838+         ds 0h                                                          01-DCCEP
                                           16839+* Epilog
0000B8A8 D707 D088 D088 00000088 00000088  16840+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000B8AE E3D0 D080 0004          00000080  16841+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000B8B4 E3C0 D090 0004          00000090  16842+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000B8BA E3B0 C018 0004          00000018  16843+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000B8C0 E3C0 B010 0021          00000010  16844+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000B8C6 E3E0 D008 0004          00000008  16845+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000B8CC EB1C D020 0004          00000020  16846+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000B8D2 078E                              16847+         bcr 8,14                if same dsab, just return              01-DCCEP
0000B8D4 E3F0 D010 0024          00000010  16848+         stg 15,16(0,13)         save return code                       01-DCCEP
0000B8DA E300 D018 0024          00000018  16849+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000B8E0 E3F0 D090 0004          00000090  16850+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
                                                                                                                           Page  339 
  Active Usings: @REGION_2006_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B8E6 E3F0 F018 0004          00000018  16851+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000B8EC 47F0 F040               00000040  16852+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           16853+* End of Epilog
                                           16854 * * **** End of Epilogue
0000B8F0                                   16855          DS    0D
0000B8F0 000000B0                          16856 @FRAMESIZE_2006 DC F'176'
0000B8F4 00000000
0000B8F8 0000000000000B78                  16857 @lit_2006_776 DC AD(rd_free)
                                           16858          DROP  12
                                           16859 *
                                           16860 *   DSECT for automatic variables in "rd_kafka_mock_error_stack_destro
                                           16861 *           y"
                                           16862 *      (FUNCTION #2006)
                                           16863 *
00000000                00000000 000000A8  16864 @AUTO#rd_kafka_mock_error_stack_destroy DSECT
00000000                                   16865          DS    XL168
                                           16866 *
0000B900                00000000 00010480  16867 @CODE    CSECT
                                           16868 *
                                           16869 *
                                           16870 *
                                           16871 * ....... start of rd_kafka_mock_broker_destroy
0000B900                                   16872 @LNAME2007 DS  0H
0000B900 0000001C                          16873          DC    X'0000001C'
0000B904 99846D9281869281                  16874          DC    C'rd_kafka_mock_broker_destroy'
0000B920 00                                16875          DC    X'00'
                                           16876 rd_kafka_mock_broker_destroy DCCPRLG CINDEX=2007,BASER=12,FRAME=192,ENT*
                                                                RY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2007
                                           16877          macro
                                           16878          dccextrn &m
                                           16879          gblc    &$dccext(1000)
                                           16880          gbla    &$dccexti
                                           16881          lcla    &i
                                           16882 &$dccext(&$dccexti+1) setc    '&m'
                                           16883 &i       seta    1
                                           16884 .loop    aif    (&i gt &$dccexti).around
                                           16885          aif    ('&$dccext(&i)' eq '&m').getout
                                           16886 &i       seta    &i+1
                                           16887          ago     .loop
                                           16888 .around  anop
                                           16889 &$dccexti seta &$dccexti+1
                                           16890          extrn  &m
                                           16891 .getout  anop
                                           16892          mend
0000B928                                   16893+$eye0257    ds    0d                                                    02-DCCCA
0000B928 C4C3C3                            16894+         dc cl3'DCC'                                                    02-DCCCA
0000B92B 01                                16895+         dc xl1'01' format one                                          02-DCCCA
0000B92C 00000000                          16896+         dc a(0)                                                        02-DCCCA
0000B930 000000000000B99A                  16897+         dc ad(@PER_2007)                                               02-DCCCA
0000B938 00000000000000C0                  16898+         dc ad(192)                                                     02-DCCCA
0000B940 0000000000000000                  16899+         dc ad(0)                                                       02-DCCCA
0000B948 0000000000001000                  16900+         dc ad(4096)                                                    02-DCCCA
                                                                                                                           Page  340 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B950 20                                16901+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000B951 03                                16902+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000B952 03                                16903+         dc al1(3)                                                      02-DCCCA
0000B953 08                                16904+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000B954 00                                16905+         dc bl.8'00000000'                                              02-DCCCA
0000B955 000000                            16906+         dc al3(0)                                                      02-DCCCA
0000B958 000000000000B900                  16907+         dc ad(@LNAME2007)                                              02-DCCCA
0000B960                                   16908+         ds 0d                                                          02-DCCCA
0000B960 000000000000B928                  16909+         dc ad($eye0257)                                                02-DCCCA
0000B968 0000000000000000                  16910+         dc ad(0)                                                       02-DCCCA
0000B970                                   16911+         ds    0d                                                       01-DCCPR
0000B970                                   16912+rd_kafka_mock_broker_destroy ds 0d                                      01-DCCPR
0000B970                                   16913+@REGION_2007_1 ds 0h                                                    01-DCCPR
0000B970 EBEC D008 0024          00000008  16914+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000B976 E3E0 D088 0004          00000088  16915+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000B97C E3C0 D090 0004          00000090  16916+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000B982 B904 002E                         16917+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000B986 E3B0 C018 0004          00000018  16918+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000B98C A7EB 00C0               000000C0  16919+         aghi  14,192              increase by frame size               01-DCCPR
0000B990 E3E0 C020 0021          00000020  16920+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000B996 4720 B020               00000020  16921+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000B99A                                   16922+@PER_2007 ds   0h                                                       01-DCCPR
0000B99A EBDE 2080 0024          00000080  16923+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000B9A0 E3C0 2090 0024          00000090  16924+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000B9A6 B904 00D2                         16925+         lgr   13,2                set real frame pointer               01-DCCPR
0000B9AA B904 00CF                         16926+         lgr   12,15               set base reg                         01-DCCPR
                        0000B970           16927+         using @REGION_2007_1,12                                        01-DCCPR
                                           16928 * ******* End of Prologue
                                           16929 * *
0000B9AE E320 1000 0004          00000000  16930          LG    2,0(0,1)    ; mrkb
                                           16931 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           16932 * ***
                                           16933 * ***           rd_kafka_mock_broker_close_all(mrkb, "Destroying broke\
                                           16934 * r");
0000B9B4 E320 D0B0 0024          000000B0  16935          STG   2,176(0,13)
0000B9BA E3F0 C0B8 0004          0000BA28  16936          LG    15,@lit_2007_779
0000B9C0 41F0 F730               00000730  16937          LA    15,1840(0,15)
0000B9C4 E3F0 D0B8 0024          000000B8  16938          STG   15,184(0,13)
0000B9CA 4110 D0B0               000000B0  16939          LA    1,176(0,13)
0000B9CE E3F0 C0B0 0004          0000BA20  16940          LG    15,@lit_2007_780 ; rd_kafka_mock_broker_close_all
0000B9D4                                   16941 @@gen_label1087 DS    0H
0000B9D4 05EF                              16942          BALR  14,15
0000B9D6                                   16943 @@gen_label1088 DS    0H
                                           16944 * ***
                                           16945 * ***           rd_kafka_mock_cluster_io_del(mrkb->cluster, mrkb->list\
                                           16946 * en_s);
0000B9D6 E3F0 20D8 0004          000000D8  16947          LG    15,216(0,2)
0000B9DC E3F0 D0B0 0024          000000B0  16948          STG   15,176(0,13)
0000B9E2 E3F0 20B0 0014          000000B0  16949          LGF   15,176(0,2)
0000B9E8 E3F0 D0B8 0024          000000B8  16950          STG   15,184(0,13)
0000B9EE 4110 D0B0               000000B0  16951          LA    1,176(0,13)
0000B9F2 E3F0 C0C0 0004          0000BA30  16952          LG    15,@lit_2007_781 ; rd_kafka_mock_cluster_io_del
                                                                                                                           Page  341 
  Active Usings: @REGION_2007_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000B9F8                                   16953 @@gen_label1089 DS    0H
0000B9F8 05EF                              16954          BALR  14,15
0000B9FA                                   16955 @@gen_label1090 DS    0H
                                           16956 * ***           close(mrkb->listen_s);
0000B9FA E3F0 20B0 0014          000000B0  16957          LGF   15,176(0,2)
0000BA00 E3F0 D0B0 0024          000000B0  16958          STG   15,176(0,13)
0000BA06 4110 D0B0               000000B0  16959          LA    1,176(0,13)
0000BA0A E3F0 C0C8 0004          0000BA38  16960          LG    15,@lit_2007_782 ; close
0000BA10                                   16961 @@gen_label1091 DS    0H
0000BA10 05EF                              16962          BALR  14,15
0000BA12                                   16963 @@gen_label1092 DS    0H
                                           16964 * ***
                                           16965 * ***           while ((errstack = ((&mrkb->errstacks)->tqh_first))) {
0000BA12 47F0 C130               0000BAA0  16966          B     @L1265
0000BA18                                   16967          DS    0D
0000BA18 000000C0                          16968 @FRAMESIZE_2007 DC F'192'
0000BA1C 00000000
0000BA20 000000000000B6F0                  16969 @lit_2007_780 DC AD(rd_kafka_mock_broker_close_all)
0000BA28 0000000000010840                  16970 @lit_2007_779 DC AD(@strings@)
0000BA30 0000000000006550                  16971 @lit_2007_781 DC AD(rd_kafka_mock_cluster_io_del)
0000BA38 0000000000000000                  16972 @lit_2007_782 DC AD(close)
0000BA40 000000000000B830                  16973 @lit_2007_783 DC AD(rd_kafka_mock_error_stack_destroy)
0000BA48 0000000000000B78                  16974 @lit_2007_784 DC AD(rd_free)
                                           16975 * ***                   do {   if (((errstack)->link .tqe_next) != (((\
                                           16976 * void *)0))) (errstack)->link .tqe_next->link .tqe_prev = (errstack)-\
                                           16977 * >link .tqe_prev; else (&mrkb->errstacks)->tqh_last = (errstack)->lin\
                                           16978 * k .tqe_prev; *(errstack)->link .tqe_prev = (errstack)->link .tqe_nex\
                                           16979 * t; ; } while ( 0);
0000BA50                                   16980 @L1266   DS    0H
0000BA50 E310 F000 0002          00000000  16981          LTG   1,0(0,15)   ; errstack
0000BA56 4780 C100               0000BA70  16982          BE    @L1269
0000BA5A E310 F000 0004          00000000  16983          LG    1,0(0,15)   ; errstack
0000BA60 E330 F008 0004          00000008  16984          LG    3,8(0,15)   ; offset of tqe_prev in 0000155
0000BA66 E330 1008 0024          00000008  16985          STG   3,8(0,1)    ; offset of tqe_prev in 0000155
0000BA6C 47F0 C10C               0000BA7C  16986          B     @L1270
0000BA70                                   16987 @L1269   DS    0H
0000BA70 E310 F008 0004          00000008  16988          LG    1,8(0,15)   ; offset of tqe_prev in 0000155
0000BA76 E310 20D0 0024          000000D0  16989          STG   1,208(0,2)  ; offset of tqh_last in rd_kafka_mock_error_*
                                                                stack_head_s
0000BA7C                                   16990 @L1270   DS    0H
0000BA7C E310 F008 0004          00000008  16991          LG    1,8(0,15)   ; offset of tqe_prev in 0000155
0000BA82 E330 F000 0004          00000000  16992          LG    3,0(0,15)   ; errstack
0000BA88 E330 1000 0024          00000000  16993          STG   3,0(0,1)
                                           16994 * ***                   rd_kafka_mock_error_stack_destroy(errstack);
0000BA8E E3F0 D0B0 0024          000000B0  16995          STG   15,176(0,13)
0000BA94 4110 D0B0               000000B0  16996          LA    1,176(0,13)
0000BA98 E3F0 C0D0 0004          0000BA40  16997          LG    15,@lit_2007_783 ; rd_kafka_mock_error_stack_destroy
0000BA9E                                   16998 @@gen_label1094 DS    0H
0000BA9E 05EF                              16999          BALR  14,15
0000BAA0                                   17000 @@gen_label1095 DS    0H
                                           17001 * ***           }
0000BAA0                                   17002 @L1265   DS    0H
                                                                                                                           Page  342 
  Active Usings: @REGION_2007_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BAA0 E3F0 20C8 0004          000000C8  17003          LG    15,200(0,2) ; offset of errstacks in rd_kafka_mock_broke*
                                                                r_s
0000BAA6 B902 001F                         17004          LTGR  1,15
0000BAAA 4770 C0E0               0000BA50  17005          BNZ   @L1266
                                           17006 * ***
                                           17007 * ***           do {   if (((mrkb)->link .tqe_next) != (((void *)0))) \
                                           17008 * (mrkb)->link .tqe_next->link .tqe_prev = (mrkb)->link .tqe_prev; els\
                                           17009 * e (&mrkb->cluster->brokers)->tqh_last = (mrkb)->link .tqe_prev; *(mr\
                                           17010 * kb)->link .tqe_prev = (mrkb)->link .tqe_next; ; } while ( 0);
0000BAAE                                   17011 @L1271   DS    0H
0000BAAE E3F0 2000 0002          00000000  17012          LTG   15,0(0,2)   ; mrkb
0000BAB4 4780 C15E               0000BACE  17013          BE    @L1274
0000BAB8 E3F0 2000 0004          00000000  17014          LG    15,0(0,2)   ; mrkb
0000BABE E310 2008 0004          00000008  17015          LG    1,8(0,2)    ; offset of tqe_prev in 0000161
0000BAC4 E310 F008 0024          00000008  17016          STG   1,8(0,15)   ; offset of tqe_prev in 0000161
0000BACA 47F0 C170               0000BAE0  17017          B     @L1275
0000BACE                                   17018 @L1274   DS    0H
0000BACE E3F0 20D8 0004          000000D8  17019          LG    15,216(0,2) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000BAD4 E310 2008 0004          00000008  17020          LG    1,8(0,2)    ; offset of tqe_prev in 0000161
0000BADA E310 F038 0024          00000038  17021          STG   1,56(0,15)  ; offset of tqh_last in 0000170
0000BAE0                                   17022 @L1275   DS    0H
0000BAE0 E3F0 2008 0004          00000008  17023          LG    15,8(0,2)   ; offset of tqe_prev in 0000161
0000BAE6 E310 2000 0004          00000000  17024          LG    1,0(0,2)    ; mrkb
0000BAEC E310 F000 0024          00000000  17025          STG   1,0(0,15)
                                           17026 * ***           mrkb->cluster->broker_cnt--;
0000BAF2 E3F0 20D8 0004          000000D8  17027          LG    15,216(0,2) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
0000BAF8 5810 F040               00000040  17028          L     1,64(0,15)
0000BAFC A71A FFFF               0000FFFF  17029          AHI   1,-1
0000BB00 5010 F040               00000040  17030          ST    1,64(0,15)
                                           17031 * ***
                                           17032 * ***           rd_free(mrkb);
0000BB04 E320 D0B0 0024          000000B0  17033          STG   2,176(0,13)
0000BB0A 4110 D0B0               000000B0  17034          LA    1,176(0,13)
0000BB0E E3F0 C0D8 0004          0000BA48  17035          LG    15,@lit_2007_784 ; rd_free
0000BB14                                   17036 @@gen_label1098 DS    0H
0000BB14 05EF                              17037          BALR  14,15
0000BB16                                   17038 @@gen_label1099 DS    0H
                                           17039 * ***   }
0000BB16                                   17040 @ret_lab_2007 DS 0H
                                           17041 * * **** Start of Epilogue
                                           17042          DCCEPIL
0000BB16                                   17043+         ds 0h                                                          01-DCCEP
                                           17044+* Epilog
0000BB16 D707 D088 D088 00000088 00000088  17045+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000BB1C E3D0 D080 0004          00000080  17046+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000BB22 E3C0 D090 0004          00000090  17047+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000BB28 E3B0 C018 0004          00000018  17048+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000BB2E E3C0 B010 0021          00000010  17049+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000BB34 E3E0 D008 0004          00000008  17050+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000BB3A EB1C D020 0004          00000020  17051+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
                                                                                                                           Page  343 
  Active Usings: @REGION_2007_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BB40 078E                              17052+         bcr 8,14                if same dsab, just return              01-DCCEP
0000BB42 E3F0 D010 0024          00000010  17053+         stg 15,16(0,13)         save return code                       01-DCCEP
0000BB48 E300 D018 0024          00000018  17054+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000BB4E E3F0 D090 0004          00000090  17055+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000BB54 E3F0 F018 0004          00000018  17056+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000BB5A 47F0 F040               00000040  17057+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           17058+* End of Epilog
                                           17059 * * **** End of Epilogue
                                           17060          DROP  12
                                           17061 *
                                           17062 *   DSECT for automatic variables in "rd_kafka_mock_broker_destroy"
                                           17063 *      (FUNCTION #2007)
                                           17064 *
00000000                00000000 000000A8  17065 @AUTO#rd_kafka_mock_broker_destroy DSECT
00000000                                   17066          DS    XL168
                                           17067 *
0000BB5E                00000000 00010480  17068 @CODE    CSECT
                                           17069 *
                                           17070 *
                                           17071 *
                                           17072 * ....... start of rd_kafka_mock_broker_new
0000BB5E                                   17073 @LNAME2008 DS  0H
0000BB5E 00000018                          17074          DC    X'00000018'
0000BB62 99846D9281869281                  17075          DC    C'rd_kafka_mock_broker_new'
0000BB7A 00                                17076          DC    X'00'
                                           17077 rd_kafka_mock_broker_new DCCPRLG CINDEX=2008,BASER=12,FRAME=264,ENTRY=N*
                                                                O,ARCH=ZARCH,LNAMEADDR=@LNAME2008
                                           17078          macro
                                           17079          dccextrn &m
                                           17080          gblc    &$dccext(1000)
                                           17081          gbla    &$dccexti
                                           17082          lcla    &i
                                           17083 &$dccext(&$dccexti+1) setc    '&m'
                                           17084 &i       seta    1
                                           17085 .loop    aif    (&i gt &$dccexti).around
                                           17086          aif    ('&$dccext(&i)' eq '&m').getout
                                           17087 &i       seta    &i+1
                                           17088          ago     .loop
                                           17089 .around  anop
                                           17090 &$dccexti seta &$dccexti+1
                                           17091          extrn  &m
                                           17092 .getout  anop
                                           17093          mend
0000BB80                                   17094+$eye0260    ds    0d                                                    02-DCCCA
0000BB80 C4C3C3                            17095+         dc cl3'DCC'                                                    02-DCCCA
0000BB83 01                                17096+         dc xl1'01' format one                                          02-DCCCA
0000BB84 00000000                          17097+         dc a(0)                                                        02-DCCCA
0000BB88 000000000000BBF2                  17098+         dc ad(@PER_2008)                                               02-DCCCA
0000BB90 0000000000000108                  17099+         dc ad(264)                                                     02-DCCCA
0000BB98 0000000000000000                  17100+         dc ad(0)                                                       02-DCCCA
0000BBA0 0000000000001000                  17101+         dc ad(4096)                                                    02-DCCCA
0000BBA8 20                                17102+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
                                                                                                                           Page  344 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BBA9 03                                17103+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000BBAA 03                                17104+         dc al1(3)                                                      02-DCCCA
0000BBAB 08                                17105+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000BBAC 00                                17106+         dc bl.8'00000000'                                              02-DCCCA
0000BBAD 000000                            17107+         dc al3(0)                                                      02-DCCCA
0000BBB0 000000000000BB5E                  17108+         dc ad(@LNAME2008)                                              02-DCCCA
0000BBB8                                   17109+         ds 0d                                                          02-DCCCA
0000BBB8 000000000000BB80                  17110+         dc ad($eye0260)                                                02-DCCCA
0000BBC0 0000000000000000                  17111+         dc ad(0)                                                       02-DCCCA
0000BBC8                                   17112+         ds    0d                                                       01-DCCPR
0000BBC8                                   17113+rd_kafka_mock_broker_new ds 0d                                          01-DCCPR
0000BBC8                                   17114+@REGION_2008_1 ds 0h                                                    01-DCCPR
0000BBC8 EBEC D008 0024          00000008  17115+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000BBCE E3E0 D088 0004          00000088  17116+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000BBD4 E3C0 D090 0004          00000090  17117+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000BBDA B904 002E                         17118+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000BBDE E3B0 C018 0004          00000018  17119+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000BBE4 A7EB 0108               00000108  17120+         aghi  14,264              increase by frame size               01-DCCPR
0000BBE8 E3E0 C020 0021          00000020  17121+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000BBEE 4720 B020               00000020  17122+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000BBF2                                   17123+@PER_2008 ds   0h                                                       01-DCCPR
0000BBF2 EBDE 2080 0024          00000080  17124+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000BBF8 E3C0 2090 0024          00000090  17125+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000BBFE B904 00D2                         17126+         lgr   13,2                set real frame pointer               01-DCCPR
0000BC02 B904 00CF                         17127+         lgr   12,15               set base reg                         01-DCCPR
                        0000BBC8           17128+         using @REGION_2008_1,12                                        01-DCCPR
0000BC06 B904 0051                         17129          LGR   5,1         ; ptr to parm area
                                           17130 * ******* End of Prologue
                                           17131 * *
0000BC0A E320 5000 0004          00000000  17132          LG    2,0(0,5)    ; mcluster
                                           17133 * ***           rd_kafka_mock_broker_t *mrkb;
                                           17134 * ***           rd_socket_t listen_s;
                                           17135 * ***           struct sockaddr_in sin = {
                                           17136 * ***                   .sin_family = 2,
0000BC10 9202 D0AD      000000AD 00000002  17137          MVI   173(13),2
                                           17138 * ***                   .sin_addr = {
                                           17139 * ***                           .s_addr = ((u_int32_t)0x7f000001)
                                           17140 * ***                   }
0000BC14 C0F9 7F00 0001                    17141          IILF  15,X'7F000001' ; 2130706433
0000BC1A 50F0 D0B0               000000B0  17142          ST    15,176(0,13)
                                           17143 * ***           };
                                           17144 * setting 1 bytes to 0x00
0000BC1E D700 D0AC D0AC 000000AC 000000AC  17145          XC    172(1,13),172(13)
                                           17146 * setting 2 bytes to 0x00
0000BC24 D701 D0AE D0AE 000000AE 000000AE  17147          XC    174(2,13),174(13)
                                           17148 * setting 8 bytes to 0x00
0000BC2A D707 D0B4 D0B4 000000B4 000000B4  17149          XC    180(8,13),180(13)
                                           17150 * ***           socklen_t sin_len = sizeof(sin);
0000BC30 E54C D0A8 0010          000000A8  17151          MVHI  168(13),16  ; sin_len
                                           17152 * ***
                                           17153 * ***
                                           17154 * ***
                                                                                                                           Page  345 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           17155 * ***
                                           17156 * ***           listen_s = rd_kafka_socket_cb_linux(2, 1, 6,
                                           17157 * ***                                               ((void *)0));
0000BC36 E548 D0C0 0002          000000C0  17158          MVGHI 192(13),2
0000BC3C E548 D0C8 0001          000000C8  17159          MVGHI 200(13),1
0000BC42 E548 D0D0 0006          000000D0  17160          MVGHI 208(13),6
0000BC48 D707 D0D8 D0D8 000000D8 000000D8  17161          XC    216(8,13),216(13)
0000BC4E 4110 D0C0               000000C0  17162          LA    1,192(0,13)
0000BC52 E3F0 C128 0004          0000BCF0  17163          LG    15,@lit_2008_787 ; rd_kafka_socket_cb_linux
0000BC58                                   17164 @@gen_label1100 DS    0H
0000BC58 05EF                              17165          BALR  14,15
0000BC5A                                   17166 @@gen_label1101 DS    0H
0000BC5A 184F                              17167          LR    4,15
                                           17168 * ***           if (listen_s == (-1)) {
0000BC5C A74E FFFF               0000FFFF  17169          CHI   4,-1
0000BC60 4770 C1A8               0000BD70  17170          BNE   @L1276
                                           17171 * ***                   rd_kafka_log0(&mcluster->rk->rk_conf, mcluster\
                                           17172 * ->rk, ((void *)0), 2, 0x0, "MOCK", "Unable to create mock broker lis\
                                           17173 * ten socket: %s", strerror((* __error())));
0000BC64 E3F0 C130 0004          0000BCF8  17174          LG    15,@lit_2008_788 ; __error
0000BC6A                                   17175 @@gen_label1103 DS    0H
0000BC6A 05EF                              17176          BALR  14,15
0000BC6C                                   17177 @@gen_label1104 DS    0H
0000BC6C 58F0 F000               00000000  17178          L     15,0(0,15)
0000BC70 B914 00FF                         17179          LGFR  15,15
0000BC74 E3F0 D0C0 0024          000000C0  17180          STG   15,192(0,13)
0000BC7A 4110 D0C0               000000C0  17181          LA    1,192(0,13)
0000BC7E E3F0 C138 0004          0000BD00  17182          LG    15,@lit_2008_789 ; strerror
0000BC84                                   17183 @@gen_label1105 DS    0H
0000BC84 05EF                              17184          BALR  14,15
0000BC86                                   17185 @@gen_label1106 DS    0H
0000BC86 E310 2020 0004          00000020  17186          LG    1,32(0,2)   ; offset of rk in rd_kafka_mock_cluster_s
0000BC8C 4110 1210               00000210  17187          LA    1,528(0,1)
0000BC90 E310 D0C0 0024          000000C0  17188          STG   1,192(0,13)
0000BC96 E310 2020 0004          00000020  17189          LG    1,32(0,2)
0000BC9C E310 D0C8 0024          000000C8  17190          STG   1,200(0,13)
0000BCA2 D707 D0D0 D0D0 000000D0 000000D0  17191          XC    208(8,13),208(13)
0000BCA8 E548 D0D8 0002          000000D8  17192          MVGHI 216(13),2
0000BCAE D707 D0E0 D0E0 000000E0 000000E0  17193          XC    224(8,13),224(13)
0000BCB4 E310 C148 0004          0000BD10  17194          LG    1,@lit_2008_790
0000BCBA 4120 115E               0000015E  17195          LA    2,350(0,1)
0000BCBE E320 D0E8 0024          000000E8  17196          STG   2,232(0,13)
0000BCC4 4110 1742               00000742  17197          LA    1,1858(0,1)
0000BCC8 E310 D0F0 0024          000000F0  17198          STG   1,240(0,13)
0000BCCE E3F0 D0F8 0024          000000F8  17199          STG   15,248(0,13)
0000BCD4 4110 D0C0               000000C0  17200          LA    1,192(0,13)
0000BCD8 E3F0 C140 0004          0000BD08  17201          LG    15,@lit_2008_791 ; rd_kafka_log0
0000BCDE                                   17202 @@gen_label1107 DS    0H
0000BCDE 05EF                              17203          BALR  14,15
0000BCE0                                   17204 @@gen_label1108 DS    0H
                                           17205 * ***
                                           17206 * ***
                                                                                                                           Page  346 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           17207 * ***                   return ((void *)0);
0000BCE0 A7F9 0000               00000000  17208          LGHI  15,0        ; 0
0000BCE4 47F0 C582               0000C14A  17209          B     @ret_lab_2008
0000BCE8                                   17210          DS    0D
0000BCE8 00000108                          17211 @FRAMESIZE_2008 DC F'264'
0000BCEC 00000000
0000BCF0 0000000000000000                  17212 @lit_2008_787 DC AD(rd_kafka_socket_cb_linux)
0000BCF8 0000000000000000                  17213 @lit_2008_788 DC AD(__error)
0000BD00 0000000000000000                  17214 @lit_2008_789 DC AD(strerror)
0000BD08 0000000000000000                  17215 @lit_2008_791 DC AD(rd_kafka_log0)
0000BD10 0000000000010840                  17216 @lit_2008_790 DC AD(@strings@)
0000BD18 0000000000000000                  17217 @lit_2008_793 DC AD(bind)
0000BD20 0000000000000000                  17218 @lit_2008_796 DC AD(rd_sockaddr2str)
0000BD28 0000000000000000                  17219 @lit_2008_799 DC AD(close)
0000BD30 0000000000000000                  17220 @lit_2008_801 DC AD(getsockname)
0000BD38 0000000000000000                  17221 @lit_2008_810 DC AD(__assert)
0000BD40 0000000000010480                  17222 @lit_2008_808 DC AD(@DATA)
0000BD48 0000000000000000                  17223 @lit_2008_811 DC AD(listen)
0000BD50 0000000000000728                  17224 @lit_2008_818 DC AD(rd_calloc)
0000BD58 0000000000000000                  17225 @lit_2008_821 DC AD(snprintf)
0000BD60 00000000000067C8                  17226 @lit_2008_826 DC AD(rd_kafka_mock_cluster_io_add)
0000BD68 000000000000B468                  17227 @lit_2008_825 DC AD(rd_kafka_mock_broker_listen_io)
                                           17228 * ***           }
0000BD70                                   17229 @L1276   DS    0H
                                           17230 * ***
                                           17231 * ***           if (bind(listen_s, (struct sockaddr *)&sin, sizeof(sin\
                                           17232 * )) ==
0000BD70 B914 00F4                         17233          LGFR  15,4
0000BD74 E3F0 D0C0 0024          000000C0  17234          STG   15,192(0,13)
0000BD7A 41F0 D0AC               000000AC  17235          LA    15,172(0,13)
0000BD7E E3F0 D0C8 0024          000000C8  17236          STG   15,200(0,13)
0000BD84 E548 D0D0 0010          000000D0  17237          MVGHI 208(13),16
0000BD8A 4110 D0C0               000000C0  17238          LA    1,192(0,13)
0000BD8E E3F0 C150 0004          0000BD18  17239          LG    15,@lit_2008_793 ; bind
0000BD94                                   17240 @@gen_label1109 DS    0H
0000BD94 05EF                              17241          BALR  14,15
0000BD96                                   17242 @@gen_label1110 DS    0H
                                           17243 * ***               (-1)) {
0000BD96 A7FE FFFF               0000FFFF  17244          CHI   15,-1
0000BD9A 4770 C296               0000BE5E  17245          BNE   @L1277
                                           17246 * ***                   rd_kafka_log0(&mcluster->rk->rk_conf, mcluster\
                                           17247 * ->rk, ((void *)0), 2, 0x0, "MOCK", "Failed to bind mock broker socke\
                                           17248 * t to %s: %s", strerror((* __error())), rd_sockaddr2str(&sin, 0x1));
0000BD9E E3F0 C130 0004          0000BCF8  17249          LG    15,@lit_2008_788 ; __error
0000BDA4                                   17250 @@gen_label1112 DS    0H
0000BDA4 05EF                              17251          BALR  14,15
0000BDA6                                   17252 @@gen_label1113 DS    0H
0000BDA6 58F0 F000               00000000  17253          L     15,0(0,15)
0000BDAA B914 00FF                         17254          LGFR  15,15
0000BDAE E3F0 D0C0 0024          000000C0  17255          STG   15,192(0,13)
0000BDB4 4110 D0C0               000000C0  17256          LA    1,192(0,13)
0000BDB8 E3F0 C138 0004          0000BD00  17257          LG    15,@lit_2008_789 ; strerror
                                                                                                                           Page  347 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BDBE                                   17258 @@gen_label1114 DS    0H
0000BDBE 05EF                              17259          BALR  14,15
0000BDC0                                   17260 @@gen_label1115 DS    0H
0000BDC0 B904 003F                         17261          LGR   3,15
0000BDC4 41F0 D0AC               000000AC  17262          LA    15,172(0,13)
0000BDC8 E3F0 D0C0 0024          000000C0  17263          STG   15,192(0,13)
0000BDCE E548 D0C8 0001          000000C8  17264          MVGHI 200(13),1
0000BDD4 4110 D0C0               000000C0  17265          LA    1,192(0,13)
0000BDD8 E3F0 C158 0004          0000BD20  17266          LG    15,@lit_2008_796 ; rd_sockaddr2str
0000BDDE                                   17267 @@gen_label1116 DS    0H
0000BDDE 05EF                              17268          BALR  14,15
0000BDE0                                   17269 @@gen_label1117 DS    0H
0000BDE0 E310 2020 0004          00000020  17270          LG    1,32(0,2)   ; offset of rk in rd_kafka_mock_cluster_s
0000BDE6 4110 1210               00000210  17271          LA    1,528(0,1)
0000BDEA E310 D0C0 0024          000000C0  17272          STG   1,192(0,13)
0000BDF0 E310 2020 0004          00000020  17273          LG    1,32(0,2)
0000BDF6 E310 D0C8 0024          000000C8  17274          STG   1,200(0,13)
0000BDFC D707 D0D0 D0D0 000000D0 000000D0  17275          XC    208(8,13),208(13)
0000BE02 E548 D0D8 0002          000000D8  17276          MVGHI 216(13),2
0000BE08 D707 D0E0 D0E0 000000E0 000000E0  17277          XC    224(8,13),224(13)
0000BE0E E310 C148 0004          0000BD10  17278          LG    1,@lit_2008_790
0000BE14 4120 115E               0000015E  17279          LA    2,350(0,1)
0000BE18 E320 D0E8 0024          000000E8  17280          STG   2,232(0,13)
0000BE1E 4110 1772               00000772  17281          LA    1,1906(0,1)
0000BE22 E310 D0F0 0024          000000F0  17282          STG   1,240(0,13)
0000BE28 E330 D0F8 0024          000000F8  17283          STG   3,248(0,13)
0000BE2E E3F0 D100 0024          00000100  17284          STG   15,256(0,13)
0000BE34 4110 D0C0               000000C0  17285          LA    1,192(0,13)
0000BE38 E3F0 C140 0004          0000BD08  17286          LG    15,@lit_2008_791 ; rd_kafka_log0
0000BE3E                                   17287 @@gen_label1118 DS    0H
0000BE3E 05EF                              17288          BALR  14,15
0000BE40                                   17289 @@gen_label1119 DS    0H
                                           17290 * ***
                                           17291 * ***
                                           17292 * ***
                                           17293 * ***                   close(listen_s);
0000BE40 B914 00F4                         17294          LGFR  15,4
0000BE44 E3F0 D0C0 0024          000000C0  17295          STG   15,192(0,13)
0000BE4A 4110 D0C0               000000C0  17296          LA    1,192(0,13)
0000BE4E E3F0 C160 0004          0000BD28  17297          LG    15,@lit_2008_799 ; close
0000BE54                                   17298 @@gen_label1120 DS    0H
0000BE54 05EF                              17299          BALR  14,15
0000BE56                                   17300 @@gen_label1121 DS    0H
                                           17301 * ***                   return ((void *)0);
0000BE56 A7F9 0000               00000000  17302          LGHI  15,0        ; 0
0000BE5A 47F0 C582               0000C14A  17303          B     @ret_lab_2008
                                           17304 * ***           }
0000BE5E                                   17305 @L1277   DS    0H
                                           17306 * ***
                                           17307 * ***           if (getsockname(listen_s, (struct sockaddr *)&sin, &si\
                                           17308 * n_len) ==
0000BE5E B914 00F4                         17309          LGFR  15,4
                                                                                                                           Page  348 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BE62 E3F0 D0C0 0024          000000C0  17310          STG   15,192(0,13)
0000BE68 41F0 D0AC               000000AC  17311          LA    15,172(0,13)
0000BE6C E3F0 D0C8 0024          000000C8  17312          STG   15,200(0,13)
0000BE72 41F0 D0A8               000000A8  17313          LA    15,168(0,13)
0000BE76 E3F0 D0D0 0024          000000D0  17314          STG   15,208(0,13)
0000BE7C 4110 D0C0               000000C0  17315          LA    1,192(0,13)
0000BE80 E3F0 C168 0004          0000BD30  17316          LG    15,@lit_2008_801 ; getsockname
0000BE86                                   17317 @@gen_label1122 DS    0H
0000BE86 05EF                              17318          BALR  14,15
0000BE88                                   17319 @@gen_label1123 DS    0H
                                           17320 * ***               (-1)) {
0000BE88 A7FE FFFF               0000FFFF  17321          CHI   15,-1
0000BE8C 4770 C362               0000BF2A  17322          BNE   @L1278
                                           17323 * ***                   rd_kafka_log0(&mcluster->rk->rk_conf, mcluster\
                                           17324 * ->rk, ((void *)0), 2, 0x0, "MOCK", "Failed to get mock broker socket\
                                           17325 *  name: %s", strerror((* __error())));
0000BE90 E3F0 C130 0004          0000BCF8  17326          LG    15,@lit_2008_788 ; __error
0000BE96                                   17327 @@gen_label1125 DS    0H
0000BE96 05EF                              17328          BALR  14,15
0000BE98                                   17329 @@gen_label1126 DS    0H
0000BE98 58F0 F000               00000000  17330          L     15,0(0,15)
0000BE9C B914 00FF                         17331          LGFR  15,15
0000BEA0 E3F0 D0C0 0024          000000C0  17332          STG   15,192(0,13)
0000BEA6 4110 D0C0               000000C0  17333          LA    1,192(0,13)
0000BEAA E3F0 C138 0004          0000BD00  17334          LG    15,@lit_2008_789 ; strerror
0000BEB0                                   17335 @@gen_label1127 DS    0H
0000BEB0 05EF                              17336          BALR  14,15
0000BEB2                                   17337 @@gen_label1128 DS    0H
0000BEB2 E310 2020 0004          00000020  17338          LG    1,32(0,2)   ; offset of rk in rd_kafka_mock_cluster_s
0000BEB8 4110 1210               00000210  17339          LA    1,528(0,1)
0000BEBC E310 D0C0 0024          000000C0  17340          STG   1,192(0,13)
0000BEC2 E310 2020 0004          00000020  17341          LG    1,32(0,2)
0000BEC8 E310 D0C8 0024          000000C8  17342          STG   1,200(0,13)
0000BECE D707 D0D0 D0D0 000000D0 000000D0  17343          XC    208(8,13),208(13)
0000BED4 E548 D0D8 0002          000000D8  17344          MVGHI 216(13),2
0000BEDA D707 D0E0 D0E0 000000E0 000000E0  17345          XC    224(8,13),224(13)
0000BEE0 E310 C148 0004          0000BD10  17346          LG    1,@lit_2008_790
0000BEE6 4120 115E               0000015E  17347          LA    2,350(0,1)
0000BEEA E320 D0E8 0024          000000E8  17348          STG   2,232(0,13)
0000BEF0 4110 179E               0000079E  17349          LA    1,1950(0,1)
0000BEF4 E310 D0F0 0024          000000F0  17350          STG   1,240(0,13)
0000BEFA E3F0 D0F8 0024          000000F8  17351          STG   15,248(0,13)
0000BF00 4110 D0C0               000000C0  17352          LA    1,192(0,13)
0000BF04 E3F0 C140 0004          0000BD08  17353          LG    15,@lit_2008_791 ; rd_kafka_log0
0000BF0A                                   17354 @@gen_label1129 DS    0H
0000BF0A 05EF                              17355          BALR  14,15
0000BF0C                                   17356 @@gen_label1130 DS    0H
                                           17357 * ***
                                           17358 * ***
                                           17359 * ***                   close(listen_s);
0000BF0C B914 00F4                         17360          LGFR  15,4
0000BF10 E3F0 D0C0 0024          000000C0  17361          STG   15,192(0,13)
                                                                                                                           Page  349 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BF16 4110 D0C0               000000C0  17362          LA    1,192(0,13)
0000BF1A E3F0 C160 0004          0000BD28  17363          LG    15,@lit_2008_799 ; close
0000BF20                                   17364 @@gen_label1131 DS    0H
0000BF20 05EF                              17365          BALR  14,15
0000BF22                                   17366 @@gen_label1132 DS    0H
                                           17367 * ***                   return ((void *)0);
0000BF22 A7F9 0000               00000000  17368          LGHI  15,0        ; 0
0000BF26 47F0 C582               0000C14A  17369          B     @ret_lab_2008
                                           17370 * ***           }
0000BF2A                                   17371 @L1278   DS    0H
                                           17372 * ***           ((sin.sin_family == 2) ? (void)0 : __assert(__func__, \
                                           17373 * "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 1337, "sin.sin_fami\
                                           17374 * ly == 2"));
0000BF2A 9502 D0AD      000000AD 00000002  17375          CLI   173(13),2
0000BF2E 4780 C3A6               0000BF6E  17376          BE    @L1280
0000BF32                                   17377 @L1279   DS    0H
0000BF32 E3F0 C178 0004          0000BD40  17378          LG    15,@lit_2008_808
0000BF38 41F0 F2F4               000002F4  17379          LA    15,756(0,15)
0000BF3C E3F0 D0C0 0024          000000C0  17380          STG   15,192(0,13)
0000BF42 E3F0 C148 0004          0000BD10  17381          LG    15,@lit_2008_790
0000BF48 4110 F0FA               000000FA  17382          LA    1,250(0,15)
0000BF4C E310 D0C8 0024          000000C8  17383          STG   1,200(0,13)
0000BF52 E548 D0D0 0539          000000D0  17384          MVGHI 208(13),1337
0000BF58 41F0 F7C8               000007C8  17385          LA    15,1992(0,15)
0000BF5C E3F0 D0D8 0024          000000D8  17386          STG   15,216(0,13)
0000BF62 4110 D0C0               000000C0  17387          LA    1,192(0,13)
0000BF66 E3F0 C170 0004          0000BD38  17388          LG    15,@lit_2008_810 ; __assert
0000BF6C                                   17389 @@gen_label1134 DS    0H
0000BF6C 05EF                              17390          BALR  14,15
0000BF6E                                   17391 @@gen_label1135 DS    0H
0000BF6E                                   17392 @L1280   DS    0H
                                           17393 * ***
                                           17394 * ***           if (listen(listen_s, 5) == (-1)) {
0000BF6E B914 00F4                         17395          LGFR  15,4
0000BF72 E3F0 D0C0 0024          000000C0  17396          STG   15,192(0,13)
0000BF78 E548 D0C8 0005          000000C8  17397          MVGHI 200(13),5
0000BF7E 4110 D0C0               000000C0  17398          LA    1,192(0,13)
0000BF82 E3F0 C180 0004          0000BD48  17399          LG    15,@lit_2008_811 ; listen
0000BF88                                   17400 @@gen_label1136 DS    0H
0000BF88 05EF                              17401          BALR  14,15
0000BF8A                                   17402 @@gen_label1137 DS    0H
0000BF8A A7FE FFFF               0000FFFF  17403          CHI   15,-1
0000BF8E 4770 C464               0000C02C  17404          BNE   @L1281
                                           17405 * ***                   rd_kafka_log0(&mcluster->rk->rk_conf, mcluster\
                                           17406 * ->rk, ((void *)0), 2, 0x0, "MOCK", "Failed to listen on mock broker \
                                           17407 * socket: %s", strerror((* __error())));
0000BF92 E3F0 C130 0004          0000BCF8  17408          LG    15,@lit_2008_788 ; __error
0000BF98                                   17409 @@gen_label1139 DS    0H
0000BF98 05EF                              17410          BALR  14,15
0000BF9A                                   17411 @@gen_label1140 DS    0H
0000BF9A 58F0 F000               00000000  17412          L     15,0(0,15)
0000BF9E B914 00FF                         17413          LGFR  15,15
                                                                                                                           Page  350 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000BFA2 E3F0 D0C0 0024          000000C0  17414          STG   15,192(0,13)
0000BFA8 4110 D0C0               000000C0  17415          LA    1,192(0,13)
0000BFAC E3F0 C138 0004          0000BD00  17416          LG    15,@lit_2008_789 ; strerror
0000BFB2                                   17417 @@gen_label1141 DS    0H
0000BFB2 05EF                              17418          BALR  14,15
0000BFB4                                   17419 @@gen_label1142 DS    0H
0000BFB4 E310 2020 0004          00000020  17420          LG    1,32(0,2)   ; offset of rk in rd_kafka_mock_cluster_s
0000BFBA 4110 1210               00000210  17421          LA    1,528(0,1)
0000BFBE E310 D0C0 0024          000000C0  17422          STG   1,192(0,13)
0000BFC4 E310 2020 0004          00000020  17423          LG    1,32(0,2)
0000BFCA E310 D0C8 0024          000000C8  17424          STG   1,200(0,13)
0000BFD0 D707 D0D0 D0D0 000000D0 000000D0  17425          XC    208(8,13),208(13)
0000BFD6 E548 D0D8 0002          000000D8  17426          MVGHI 216(13),2
0000BFDC D707 D0E0 D0E0 000000E0 000000E0  17427          XC    224(8,13),224(13)
0000BFE2 E310 C148 0004          0000BD10  17428          LG    1,@lit_2008_790
0000BFE8 4120 115E               0000015E  17429          LA    2,350(0,1)
0000BFEC E320 D0E8 0024          000000E8  17430          STG   2,232(0,13)
0000BFF2 4110 17DC               000007DC  17431          LA    1,2012(0,1)
0000BFF6 E310 D0F0 0024          000000F0  17432          STG   1,240(0,13)
0000BFFC E3F0 D0F8 0024          000000F8  17433          STG   15,248(0,13)
0000C002 4110 D0C0               000000C0  17434          LA    1,192(0,13)
0000C006 E3F0 C140 0004          0000BD08  17435          LG    15,@lit_2008_791 ; rd_kafka_log0
0000C00C                                   17436 @@gen_label1143 DS    0H
0000C00C 05EF                              17437          BALR  14,15
0000C00E                                   17438 @@gen_label1144 DS    0H
                                           17439 * ***
                                           17440 * ***
                                           17441 * ***                   close(listen_s);
0000C00E B914 00F4                         17442          LGFR  15,4
0000C012 E3F0 D0C0 0024          000000C0  17443          STG   15,192(0,13)
0000C018 4110 D0C0               000000C0  17444          LA    1,192(0,13)
0000C01C E3F0 C160 0004          0000BD28  17445          LG    15,@lit_2008_799 ; close
0000C022                                   17446 @@gen_label1145 DS    0H
0000C022 05EF                              17447          BALR  14,15
0000C024                                   17448 @@gen_label1146 DS    0H
                                           17449 * ***                   return ((void *)0);
0000C024 A7F9 0000               00000000  17450          LGHI  15,0        ; 0
0000C028 47F0 C582               0000C14A  17451          B     @ret_lab_2008
                                           17452 * ***           }
0000C02C                                   17453 @L1281   DS    0H
                                           17454 * ***
                                           17455 * ***
                                           17456 * ***
                                           17457 * ***
                                           17458 * ***
                                           17459 * ***           mrkb = rd_calloc(1, sizeof(*mrkb));
0000C02C E548 D0C0 0001          000000C0  17460          MVGHI 192(13),1
0000C032 E548 D0C8 00E0          000000C8  17461          MVGHI 200(13),224
0000C038 4110 D0C0               000000C0  17462          LA    1,192(0,13)
0000C03C E3F0 C188 0004          0000BD50  17463          LG    15,@lit_2008_818 ; rd_calloc
0000C042                                   17464 @@gen_label1147 DS    0H
0000C042 05EF                              17465          BALR  14,15
                                                                                                                           Page  351 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C044                                   17466 @@gen_label1148 DS    0H
0000C044 B904 003F                         17467          LGR   3,15
                                           17468 * ***
                                           17469 * ***           mrkb->id = broker_id;
0000C048 5810 500C               0000000C  17470          L     1,12(0,5)   ; broker_id
0000C04C 5010 3010               00000010  17471          ST    1,16(0,3)   ; offset of id in rd_kafka_mock_broker_s
                                           17472 * ***           mrkb->cluster = mcluster;
0000C050 E320 30D8 0024          000000D8  17473          STG   2,216(0,3)  ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
                                           17474 * ***           mrkb->up = 1;
0000C056 9201 30A0      000000A0 00000001  17475          MVI   160(3),1    ; offset of up in rd_kafka_mock_broker_s
                                           17476 * ***           mrkb->listen_s = listen_s;
0000C05A 5040 30B0               000000B0  17477          ST    4,176(0,3)  ; offset of listen_s in rd_kafka_mock_broker*
                                                                _s
                                           17478 * ***           mrkb->port = (sin.sin_port);
0000C05E E310 D0AE 0095          000000AE  17479          LLH   1,174(0,13)
0000C064 5010 3094               00000094  17480          ST    1,148(0,3)  ; offset of port in rd_kafka_mock_broker_s
                                           17481 * ***           snprintf(mrkb->advertised_listener, sizeof(mrkb->adver\
                                           17482 * tised_listener), "%s", rd_sockaddr2str(&sin, 0));
0000C068 41F0 D0AC               000000AC  17483          LA    15,172(0,13)
0000C06C E3F0 D0C0 0024          000000C0  17484          STG   15,192(0,13)
0000C072 D707 D0C8 D0C8 000000C8 000000C8  17485          XC    200(8,13),200(13)
0000C078 4110 D0C0               000000C0  17486          LA    1,192(0,13)
0000C07C E3F0 C158 0004          0000BD20  17487          LG    15,@lit_2008_796 ; rd_sockaddr2str
0000C082                                   17488 @@gen_label1149 DS    0H
0000C082 05EF                              17489          BALR  14,15
0000C084                                   17490 @@gen_label1150 DS    0H
0000C084 4110 3014               00000014  17491          LA    1,20(0,3)
0000C088 E310 D0C0 0024          000000C0  17492          STG   1,192(0,13)
0000C08E E548 D0C8 0080          000000C8  17493          MVGHI 200(13),128
0000C094 E310 C148 0004          0000BD10  17494          LG    1,@lit_2008_790
0000C09A 4110 1808               00000808  17495          LA    1,2056(0,1)
0000C09E E310 D0D0 0024          000000D0  17496          STG   1,208(0,13)
0000C0A4 E3F0 D0D8 0024          000000D8  17497          STG   15,216(0,13)
0000C0AA 4110 D0C0               000000C0  17498          LA    1,192(0,13)
0000C0AE E3F0 C190 0004          0000BD58  17499          LG    15,@lit_2008_821 ; snprintf
0000C0B4                                   17500 @@gen_label1151 DS    0H
0000C0B4 05EF                              17501          BALR  14,15
0000C0B6                                   17502 @@gen_label1152 DS    0H
                                           17503 * ***
                                           17504 * ***
                                           17505 * ***
                                           17506 * ***           do { (&mrkb->connections)->tqh_first = (((void *)0)); \
                                           17507 * (&mrkb->connections)->tqh_last = &(&mrkb->connections)->tqh_first; }\
                                           17508 *  while ( 0);
0000C0B6                                   17509 @L1282   DS    0H
0000C0B6 A7F9 0000               00000000  17510          LGHI  15,0        ; 0
0000C0BA E3F0 30B8 0024          000000B8  17511          STG   15,184(0,3) ; offset of connections in rd_kafka_mock_bro*
                                                                ker_s
0000C0C0 41F0 30B8               000000B8  17512          LA    15,184(0,3)
0000C0C4 E3F0 30C0 0024          000000C0  17513          STG   15,192(0,3) ; offset of tqh_last in 0000162
                                           17514 * ***           do { (&mrkb->errstacks)->tqh_first = (((void *)0)); (&\
                                                                                                                           Page  352 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           17515 * mrkb->errstacks)->tqh_last = &(&mrkb->errstacks)->tqh_first; } while\
                                           17516 *  ( 0);
0000C0CA                                   17517 @L1285   DS    0H
0000C0CA A7F9 0000               00000000  17518          LGHI  15,0        ; 0
0000C0CE E3F0 30C8 0024          000000C8  17519          STG   15,200(0,3) ; offset of errstacks in rd_kafka_mock_broke*
                                                                r_s
0000C0D4 41F0 30C8               000000C8  17520          LA    15,200(0,3)
0000C0D8 E3F0 30D0 0024          000000D0  17521          STG   15,208(0,3) ; offset of tqh_last in rd_kafka_mock_error_*
                                                                stack_head_s
                                           17522 * ***
                                           17523 * ***           do {  (mrkb)->link .tqe_next = (((void *)0)); (mrkb)->\
                                           17524 * link .tqe_prev = (&mcluster->brokers)->tqh_last; *(&mcluster->broker\
                                           17525 * s)->tqh_last = (mrkb); (&mcluster->brokers)->tqh_last = &(mrkb)->lin\
                                           17526 * k .tqe_next; } while ( 0);
0000C0DE                                   17527 @L1288   DS    0H
0000C0DE A7F9 0000               00000000  17528          LGHI  15,0        ; 0
0000C0E2 E3F0 3000 0024          00000000  17529          STG   15,0(0,3)   ; mrkb
0000C0E8 E3F0 2038 0004          00000038  17530          LG    15,56(0,2)  ; offset of tqh_last in 0000170
0000C0EE E3F0 3008 0024          00000008  17531          STG   15,8(0,3)   ; offset of tqe_prev in 0000161
0000C0F4 E3F0 2038 0004          00000038  17532          LG    15,56(0,2)  ; offset of tqh_last in 0000170
0000C0FA E330 F000 0024          00000000  17533          STG   3,0(0,15)
0000C100 E330 2038 0024          00000038  17534          STG   3,56(0,2)   ; offset of tqh_last in 0000170
                                           17535 * ***           mcluster->broker_cnt++;
0000C106 58F0 2040               00000040  17536          L     15,64(0,2)
0000C10A A7FA 0001               00000001  17537          AHI   15,1
0000C10E 50F0 2040               00000040  17538          ST    15,64(0,2)
                                           17539 * ***
                                           17540 * ***           rd_kafka_mock_cluster_io_add(mcluster, listen_s, 0x000\
                                           17541 * 1,
                                           17542 * ***                                        rd_kafka_mock_broker_list\
                                           17543 * en_io, mrkb);
0000C112 E320 D0C0 0024          000000C0  17544          STG   2,192(0,13)
0000C118 B914 00F4                         17545          LGFR  15,4
0000C11C E3F0 D0C8 0024          000000C8  17546          STG   15,200(0,13)
0000C122 E548 D0D0 0001          000000D0  17547          MVGHI 208(13),1
0000C128 E3F0 C1A0 0004          0000BD68  17548          LG    15,@lit_2008_825 ; rd_kafka_mock_broker_listen_io
0000C12E E3F0 D0D8 0024          000000D8  17549          STG   15,216(0,13)
0000C134 E330 D0E0 0024          000000E0  17550          STG   3,224(0,13)
0000C13A 4110 D0C0               000000C0  17551          LA    1,192(0,13)
0000C13E E3F0 C198 0004          0000BD60  17552          LG    15,@lit_2008_826 ; rd_kafka_mock_cluster_io_add
0000C144                                   17553 @@gen_label1153 DS    0H
0000C144 05EF                              17554          BALR  14,15
0000C146                                   17555 @@gen_label1154 DS    0H
                                           17556 * ***
                                           17557 * ***           return mrkb;
0000C146 B904 00F3                         17558          LGR   15,3
                                           17559 * ***   }
0000C14A                                   17560 @ret_lab_2008 DS 0H
                                           17561 * * **** Start of Epilogue
                                           17562          DCCEPIL
0000C14A                                   17563+         ds 0h                                                          01-DCCEP
                                           17564+* Epilog
                                                                                                                           Page  353 
  Active Usings: @REGION_2008_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C14A D707 D088 D088 00000088 00000088  17565+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000C150 E3D0 D080 0004          00000080  17566+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000C156 E3C0 D090 0004          00000090  17567+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000C15C E3B0 C018 0004          00000018  17568+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000C162 E3C0 B010 0021          00000010  17569+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000C168 E3E0 D008 0004          00000008  17570+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000C16E EB1C D020 0004          00000020  17571+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000C174 078E                              17572+         bcr 8,14                if same dsab, just return              01-DCCEP
0000C176 E3F0 D010 0024          00000010  17573+         stg 15,16(0,13)         save return code                       01-DCCEP
0000C17C E300 D018 0024          00000018  17574+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000C182 E3F0 D090 0004          00000090  17575+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000C188 E3F0 F018 0004          00000018  17576+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000C18E 47F0 F040               00000040  17577+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           17578+* End of Epilog
                                           17579 * * **** End of Epilogue
                                           17580          DROP  12
                                           17581 *
                                           17582 *   DSECT for automatic variables in "rd_kafka_mock_broker_new"
                                           17583 *      (FUNCTION #2008)
                                           17584 *
00000000                00000000 000000BC  17585 @AUTO#rd_kafka_mock_broker_new DSECT
00000000                                   17586          DS    XL168
000000A8                                   17587 rd_kafka_mock_broker_new#sin_len#0 DS 1F ; sin_len
000000AC                000000AC 000000A8  17588          ORG   @AUTO#rd_kafka_mock_broker_new+168
000000A8                                   17589 rd_kafka_mock_broker_new#listen_s#0 DS 1F ; listen_s
000000AC                000000AC 000000AC  17590          ORG   @AUTO#rd_kafka_mock_broker_new+172
000000AC                                   17591 rd_kafka_mock_broker_new#sin#0 DS 16XL1 ; sin
                                           17592 *
0000C192                00000000 00010480  17593 @CODE    CSECT
                                           17594 *
                                           17595 *
                                           17596 *
                                           17597 * ....... start of rd_kafka_mock_coord_str2type
0000C192                                   17598 @LNAME2009 DS  0H
0000C192 0000001C                          17599          DC    X'0000001C'
0000C196 99846D9281869281                  17600          DC    C'rd_kafka_mock_coord_str2type'
0000C1B2 00                                17601          DC    X'00'
                                           17602 rd_kafka_mock_coord_str2type DCCPRLG CINDEX=2009,BASER=12,FRAME=168,SAV*
                                                                EAREA=NO,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2009
                                           17603          macro
                                           17604          dccextrn &m
                                           17605          gblc    &$dccext(1000)
                                           17606          gbla    &$dccexti
                                           17607          lcla    &i
                                           17608 &$dccext(&$dccexti+1) setc    '&m'
                                           17609 &i       seta    1
                                           17610 .loop    aif    (&i gt &$dccexti).around
                                           17611          aif    ('&$dccext(&i)' eq '&m').getout
                                           17612 &i       seta    &i+1
                                           17613          ago     .loop
                                           17614 .around  anop
                                           17615 &$dccexti seta &$dccexti+1
                                                                                                                           Page  354 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           17616          extrn  &m
                                           17617 .getout  anop
                                           17618          mend
0000C1B8                                   17619+$eye0263    ds    0d                                                    02-DCCCA
0000C1B8 C4C3C3                            17620+         dc cl3'DCC'                                                    02-DCCCA
0000C1BB 01                                17621+         dc xl1'01' format one                                          02-DCCCA
0000C1BC 00000000                          17622+         dc a(0)                                                        02-DCCCA
0000C1C0 0000000000000000                  17623+         dc ad(0)                                                       02-DCCCA
0000C1C8 00000000000000A8                  17624+         dc ad(168)                                                     02-DCCCA
0000C1D0 0000000000000000                  17625+         dc ad(0)                                                       02-DCCCA
0000C1D8 0000000000001000                  17626+         dc ad(4096)                                                    02-DCCCA
0000C1E0 20                                17627+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000C1E1 03                                17628+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000C1E2 03                                17629+         dc al1(3)                                                      02-DCCCA
0000C1E3 08                                17630+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000C1E4 00                                17631+         dc bl.8'00000000'                                              02-DCCCA
0000C1E5 000000                            17632+         dc al3(0)                                                      02-DCCCA
0000C1E8 000000000000C192                  17633+         dc ad(@LNAME2009)                                              02-DCCCA
0000C1F0                                   17634+         ds 0d                                                          02-DCCCA
0000C1F0 000000000000C1B8                  17635+         dc ad($eye0263)                                                02-DCCCA
0000C1F8 0000000000000000                  17636+         dc ad(0)                                                       02-DCCCA
0000C200                                   17637+         ds    0d                                                       01-DCCPR
0000C200                                   17638+rd_kafka_mock_coord_str2type ds 0d                                      01-DCCPR
0000C200                                   17639+@REGION_2009_1 ds 0h                                                    01-DCCPR
0000C200 EBEC D008 0024          00000008  17640+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000C206 B904 00CF                         17641+         lgr   12,15               set base reg                         01-DCCPR
                        0000C200           17642+         using @REGION_2009_1,12                                        01-DCCPR
                                           17643 * ******* End of Prologue
                                           17644 * *
                                           17645 * ***           if (!__strcmp(str,"transaction"))
0000C20A E3F0 C050 0004          0000C250  17646          LG    15,@lit_2009_828
0000C210 41F0 F80C               0000080C  17647          LA    15,2060(0,15)
0000C214 E320 1000 0004          00000000  17648          LG    2,0(0,1)
0000C21A 4100 0000               00000000  17649          LA    0,0(0,0)
0000C21E A739 0000               00000000  17650          LGHI  3,0
0000C222                                   17651 @@gen_label1155 DS 0H
0000C222 B25D 002F                         17652          CLST  2,15
0000C226 4710 C022               0000C222  17653          BC  1,@@gen_label1155
0000C22A 4780 C03E               0000C23E  17654          BE    @@gen_label1156
0000C22E E330 2000 0090          00000000  17655          LLGC  3,0(0,2)
0000C234 E320 F000 0090          00000000  17656          LLGC  2,0(0,15)
0000C23A B90B 0032                         17657          SLGR  3,2
0000C23E                                   17658 @@gen_label1156 DS 0H
0000C23E 1233                              17659          LTR   3,3
0000C240 4770 C058               0000C258  17660          BNZ   @L1291
                                           17661 * ***                   return RD_KAFKA_COORD_TXN;
0000C244 A7F9 0001               00000001  17662          LGHI  15,1        ; 1
0000C248 47F0 C09E               0000C29E  17663          B     @ret_lab_2009
0000C250                                   17664          DS    0D
0000C250 0000000000010840                  17665 @lit_2009_828 DC AD(@strings@)
                                           17666 * ***           else if (!__strcmp(str,"group"))
0000C258                                   17667 @L1291   DS    0H
                                                                                                                           Page  355 
  Active Usings: @REGION_2009_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C258 E3F0 C050 0004          0000C250  17668          LG    15,@lit_2009_828
0000C25E 41F0 F818               00000818  17669          LA    15,2072(0,15)
0000C262 E310 1000 0004          00000000  17670          LG    1,0(0,1)
0000C268 4100 0000               00000000  17671          LA    0,0(0,0)
0000C26C A729 0000               00000000  17672          LGHI  2,0
0000C270                                   17673 @@gen_label1158 DS 0H
0000C270 B25D 001F                         17674          CLST  1,15
0000C274 4710 C070               0000C270  17675          BC  1,@@gen_label1158
0000C278 4780 C08C               0000C28C  17676          BE    @@gen_label1159
0000C27C E320 1000 0090          00000000  17677          LLGC  2,0(0,1)
0000C282 E310 F000 0090          00000000  17678          LLGC  1,0(0,15)
0000C288 B90B 0021                         17679          SLGR  2,1
0000C28C                                   17680 @@gen_label1159 DS 0H
0000C28C 1222                              17681          LTR   2,2
0000C28E 4770 C09A               0000C29A  17682          BNZ   @L1293
                                           17683 * ***                   return RD_KAFKA_COORD_GROUP;
0000C292 A7F9 0000               00000000  17684          LGHI  15,0        ; 0
0000C296 47F0 C09E               0000C29E  17685          B     @ret_lab_2009
                                           17686 * ***           else
0000C29A                                   17687 @L1293   DS    0H
                                           17688 * ***                   return (rd_kafka_coordtype_t)-1;
0000C29A A7F9 FFFF               0000FFFF  17689          LGHI  15,-1       ; -1
                                           17690 * ***   }
0000C29E                                   17691 @ret_lab_2009 DS 0H
                                           17692 * * **** Start of Epilogue
                                           17693          DCCEPIL
0000C29E                                   17694+         ds 0h                                                          01-DCCEP
                                           17695+* Epilog
                                           17696+* Epilog
0000C29E E3E0 D008 0004          00000008  17697+         lg    14,8(,13) restore the reg                                01-DCCEP
0000C2A4 EB1C D020 0004          00000020  17698+         lmg   1,12,32(13)                                              01-DCCEP
0000C2AA 07FE                              17699+         br   14                                                        01-DCCEP
                                           17700+* End of Epilog
                                           17701 * * **** End of Epilogue
                                           17702          DROP  12
                                           17703 *
                                           17704 *   DSECT for automatic variables in "rd_kafka_mock_coord_str2type"
                                           17705 *      (FUNCTION #2009)
                                           17706 *
00000000                00000000 000000A8  17707 @AUTO#rd_kafka_mock_coord_str2type DSECT
00000000                                   17708          DS    XL168
                                           17709 *
0000C2AC                00000000 00010480  17710 @CODE    CSECT
                                           17711 *
                                           17712 *
                                           17713 *
                                           17714 * ....... start of rd_kafka_mock_coord_destroy
0000C2AC                                   17715 @LNAME2010 DS  0H
0000C2AC 0000001B                          17716          DC    X'0000001B'
0000C2B0 99846D9281869281                  17717          DC    C'rd_kafka_mock_coord_destroy'
0000C2CB 00                                17718          DC    X'00'
                                           17719 rd_kafka_mock_coord_destroy DCCPRLG CINDEX=2010,BASER=12,FRAME=176,ENTR*
                                                                                                                           Page  356 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                Y=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2010
                                           17720          macro
                                           17721          dccextrn &m
                                           17722          gblc    &$dccext(1000)
                                           17723          gbla    &$dccexti
                                           17724          lcla    &i
                                           17725 &$dccext(&$dccexti+1) setc    '&m'
                                           17726 &i       seta    1
                                           17727 .loop    aif    (&i gt &$dccexti).around
                                           17728          aif    ('&$dccext(&i)' eq '&m').getout
                                           17729 &i       seta    &i+1
                                           17730          ago     .loop
                                           17731 .around  anop
                                           17732 &$dccexti seta &$dccexti+1
                                           17733          extrn  &m
                                           17734 .getout  anop
                                           17735          mend
0000C2D0                                   17736+$eye0266    ds    0d                                                    02-DCCCA
0000C2D0 C4C3C3                            17737+         dc cl3'DCC'                                                    02-DCCCA
0000C2D3 01                                17738+         dc xl1'01' format one                                          02-DCCCA
0000C2D4 00000000                          17739+         dc a(0)                                                        02-DCCCA
0000C2D8 000000000000C342                  17740+         dc ad(@PER_2010)                                               02-DCCCA
0000C2E0 00000000000000B0                  17741+         dc ad(176)                                                     02-DCCCA
0000C2E8 0000000000000000                  17742+         dc ad(0)                                                       02-DCCCA
0000C2F0 0000000000001000                  17743+         dc ad(4096)                                                    02-DCCCA
0000C2F8 20                                17744+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000C2F9 03                                17745+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000C2FA 03                                17746+         dc al1(3)                                                      02-DCCCA
0000C2FB 08                                17747+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000C2FC 00                                17748+         dc bl.8'00000000'                                              02-DCCCA
0000C2FD 000000                            17749+         dc al3(0)                                                      02-DCCCA
0000C300 000000000000C2AC                  17750+         dc ad(@LNAME2010)                                              02-DCCCA
0000C308                                   17751+         ds 0d                                                          02-DCCCA
0000C308 000000000000C2D0                  17752+         dc ad($eye0266)                                                02-DCCCA
0000C310 0000000000000000                  17753+         dc ad(0)                                                       02-DCCCA
0000C318                                   17754+         ds    0d                                                       01-DCCPR
0000C318                                   17755+rd_kafka_mock_coord_destroy ds 0d                                       01-DCCPR
0000C318                                   17756+@REGION_2010_1 ds 0h                                                    01-DCCPR
0000C318 EBEC D008 0024          00000008  17757+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000C31E E3E0 D088 0004          00000088  17758+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000C324 E3C0 D090 0004          00000090  17759+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000C32A B904 002E                         17760+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000C32E E3B0 C018 0004          00000018  17761+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000C334 A7EB 00B0               000000B0  17762+         aghi  14,176              increase by frame size               01-DCCPR
0000C338 E3E0 C020 0021          00000020  17763+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000C33E 4720 B020               00000020  17764+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000C342                                   17765+@PER_2010 ds   0h                                                       01-DCCPR
0000C342 EBDE 2080 0024          00000080  17766+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000C348 E3C0 2090 0024          00000090  17767+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000C34E B904 00D2                         17768+         lgr   13,2                set real frame pointer               01-DCCPR
0000C352 B904 00CF                         17769+         lgr   12,15               set base reg                         01-DCCPR
                        0000C318           17770+         using @REGION_2010_1,12                                        01-DCCPR
                                                                                                                           Page  357 
  Active Usings: @REGION_2010_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           17771 * ******* End of Prologue
                                           17772 * *
                                           17773 * ***           do {   if (((mcoord)->link .tqe_next) != (((void *)0))\
                                           17774 * ) (mcoord)->link .tqe_next->link .tqe_prev = (mcoord)->link .tqe_pre\
                                           17775 * v; else (&mcluster->coords)->tqh_last = (mcoord)->link .tqe_prev; *(\
                                           17776 * mcoord)->link .tqe_prev = (mcoord)->link .tqe_next; ; } while ( 0);
0000C356 E320 1008 0004          00000008  17777          LG    2,8(0,1)    ; mcoord
0000C35C                                   17778 @L1295   DS    0H
0000C35C E3F0 2000 0002          00000000  17779          LTG   15,0(0,2)   ; mcoord
0000C362 4780 C078               0000C390  17780          BE    @L1298
0000C366 E3F0 2000 0004          00000000  17781          LG    15,0(0,2)   ; mcoord
0000C36C E310 2008 0004          00000008  17782          LG    1,8(0,2)    ; offset of tqe_prev in 0000169
0000C372 E310 F008 0024          00000008  17783          STG   1,8(0,15)   ; offset of tqe_prev in 0000169
0000C378 47F0 C08A               0000C3A2  17784          B     @L1299
0000C380                                   17785          DS    0D
0000C380 000000B0                          17786 @FRAMESIZE_2010 DC F'176'
0000C384 00000000
0000C388 0000000000000B78                  17787 @lit_2010_833 DC AD(rd_free)
0000C390                                   17788 @L1298   DS    0H
0000C390 E3F0 1000 0004          00000000  17789          LG    15,0(0,1)   ; mcluster
0000C396 E310 2008 0004          00000008  17790          LG    1,8(0,2)    ; offset of tqe_prev in 0000169
0000C39C E310 F078 0024          00000078  17791          STG   1,120(0,15) ; offset of tqh_last in 0000173
0000C3A2                                   17792 @L1299   DS    0H
0000C3A2 E3F0 2008 0004          00000008  17793          LG    15,8(0,2)   ; offset of tqe_prev in 0000169
0000C3A8 E310 2000 0004          00000000  17794          LG    1,0(0,2)    ; mcoord
0000C3AE E310 F000 0024          00000000  17795          STG   1,0(0,15)
                                           17796 * ***           rd_free(mcoord->key);
0000C3B4 E3F0 2018 0004          00000018  17797          LG    15,24(0,2)
0000C3BA E3F0 D0A8 0024          000000A8  17798          STG   15,168(0,13)
0000C3C0 4110 D0A8               000000A8  17799          LA    1,168(0,13)
0000C3C4 E330 C070 0004          0000C388  17800          LG    3,@lit_2010_833 ; rd_free
0000C3CA B904 00F3                         17801          LGR   15,3
0000C3CE                                   17802 @@gen_label1162 DS    0H
0000C3CE 05EF                              17803          BALR  14,15
0000C3D0                                   17804 @@gen_label1163 DS    0H
                                           17805 * ***           rd_free(mcoord);
0000C3D0 E320 D0A8 0024          000000A8  17806          STG   2,168(0,13)
0000C3D6 4110 D0A8               000000A8  17807          LA    1,168(0,13)
0000C3DA B904 00F3                         17808          LGR   15,3
0000C3DE                                   17809 @@gen_label1164 DS    0H
0000C3DE 05EF                              17810          BALR  14,15
0000C3E0                                   17811 @@gen_label1165 DS    0H
                                           17812 * ***   }
0000C3E0                                   17813 @ret_lab_2010 DS 0H
                                           17814 * * **** Start of Epilogue
                                           17815          DCCEPIL
0000C3E0                                   17816+         ds 0h                                                          01-DCCEP
                                           17817+* Epilog
0000C3E0 D707 D088 D088 00000088 00000088  17818+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000C3E6 E3D0 D080 0004          00000080  17819+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000C3EC E3C0 D090 0004          00000090  17820+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000C3F2 E3B0 C018 0004          00000018  17821+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
                                                                                                                           Page  358 
  Active Usings: @REGION_2010_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C3F8 E3C0 B010 0021          00000010  17822+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000C3FE E3E0 D008 0004          00000008  17823+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000C404 EB1C D020 0004          00000020  17824+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000C40A 078E                              17825+         bcr 8,14                if same dsab, just return              01-DCCEP
0000C40C E3F0 D010 0024          00000010  17826+         stg 15,16(0,13)         save return code                       01-DCCEP
0000C412 E300 D018 0024          00000018  17827+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000C418 E3F0 D090 0004          00000090  17828+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000C41E E3F0 F018 0004          00000018  17829+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000C424 47F0 F040               00000040  17830+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           17831+* End of Epilog
                                           17832 * * **** End of Epilogue
                                           17833          DROP  12
                                           17834 *
                                           17835 *   DSECT for automatic variables in "rd_kafka_mock_coord_destroy"
                                           17836 *      (FUNCTION #2010)
                                           17837 *
00000000                00000000 000000A8  17838 @AUTO#rd_kafka_mock_coord_destroy DSECT
00000000                                   17839          DS    XL168
                                           17840 *
0000C428                00000000 00010480  17841 @CODE    CSECT
                                           17842 *
                                           17843 *
                                           17844 *
                                           17845 * ....... start of rd_kafka_mock_coord_find
0000C428                                   17846 @LNAME2011 DS  0H
0000C428 00000018                          17847          DC    X'00000018'
0000C42C 99846D9281869281                  17848          DC    C'rd_kafka_mock_coord_find'
0000C444 00                                17849          DC    X'00'
                                           17850 rd_kafka_mock_coord_find DCCPRLG CINDEX=2011,BASER=12,FRAME=176,SAVEARE*
                                                                A=NO,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2011
                                           17851          macro
                                           17852          dccextrn &m
                                           17853          gblc    &$dccext(1000)
                                           17854          gbla    &$dccexti
                                           17855          lcla    &i
                                           17856 &$dccext(&$dccexti+1) setc    '&m'
                                           17857 &i       seta    1
                                           17858 .loop    aif    (&i gt &$dccexti).around
                                           17859          aif    ('&$dccext(&i)' eq '&m').getout
                                           17860 &i       seta    &i+1
                                           17861          ago     .loop
                                           17862 .around  anop
                                           17863 &$dccexti seta &$dccexti+1
                                           17864          extrn  &m
                                           17865 .getout  anop
                                           17866          mend
0000C448                                   17867+$eye0269    ds    0d                                                    02-DCCCA
0000C448 C4C3C3                            17868+         dc cl3'DCC'                                                    02-DCCCA
0000C44B 01                                17869+         dc xl1'01' format one                                          02-DCCCA
0000C44C 00000000                          17870+         dc a(0)                                                        02-DCCCA
0000C450 0000000000000000                  17871+         dc ad(0)                                                       02-DCCCA
0000C458 00000000000000B0                  17872+         dc ad(176)                                                     02-DCCCA
                                                                                                                           Page  359 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C460 0000000000000000                  17873+         dc ad(0)                                                       02-DCCCA
0000C468 0000000000001000                  17874+         dc ad(4096)                                                    02-DCCCA
0000C470 20                                17875+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000C471 03                                17876+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000C472 03                                17877+         dc al1(3)                                                      02-DCCCA
0000C473 08                                17878+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000C474 00                                17879+         dc bl.8'00000000'                                              02-DCCCA
0000C475 000000                            17880+         dc al3(0)                                                      02-DCCCA
0000C478 000000000000C428                  17881+         dc ad(@LNAME2011)                                              02-DCCCA
0000C480                                   17882+         ds 0d                                                          02-DCCCA
0000C480 000000000000C448                  17883+         dc ad($eye0269)                                                02-DCCCA
0000C488 0000000000000000                  17884+         dc ad(0)                                                       02-DCCCA
0000C490                                   17885+         ds    0d                                                       01-DCCPR
0000C490                                   17886+rd_kafka_mock_coord_find ds 0d                                          01-DCCPR
0000C490                                   17887+@REGION_2011_1 ds 0h                                                    01-DCCPR
0000C490 EBEC D008 0024          00000008  17888+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000C496 B904 00CF                         17889+         lgr   12,15               set base reg                         01-DCCPR
                        0000C490           17890+         using @REGION_2011_1,12                                        01-DCCPR
                                           17891 * ******* End of Prologue
                                           17892 * *
                                           17893 * ***           rd_kafka_mock_coord_t *mcoord;
                                           17894 * ***
                                           17895 * ***           for ((mcoord) = ((&mcluster->coords)->tqh_first); (mco\
                                           17896 * ord) != (((void *)0)); (mcoord) = ((mcoord)->link .tqe_next)) {
0000C49A E3F0 1000 0004          00000000  17897          LG    15,0(0,1)   ; mcluster
0000C4A0 E3F0 F070 0004          00000070  17898          LG    15,112(0,15) ; offset of coords in rd_kafka_mock_cluster*
                                                                _s
0000C4A6 47F0 C066               0000C4F6  17899          B     @L1301
0000C4AA                                   17900 @L1300   DS    0H
                                           17901 * ***                   if (mcoord->type == type && !__strcmp(mcoord->\
                                           17902 * key,key))
0000C4AA 5820 F010               00000010  17903          L     2,16(0,15)  ; offset of type in rd_kafka_mock_coord_s
0000C4AE 5920 100C               0000000C  17904          C     2,12(0,1)
0000C4B2 4770 C060               0000C4F0  17905          BNE   @L1304
0000C4B6 E320 F018 0004          00000018  17906          LG    2,24(0,15)
0000C4BC E330 1010 0004          00000010  17907          LG    3,16(0,1)
0000C4C2 4100 0000               00000000  17908          LA    0,0(0,0)
0000C4C6 A749 0000               00000000  17909          LGHI  4,0
0000C4CA                                   17910 @@gen_label1167 DS 0H
0000C4CA B25D 0023                         17911          CLST  2,3
0000C4CE 4710 C03A               0000C4CA  17912          BC  1,@@gen_label1167
0000C4D2 4780 C056               0000C4E6  17913          BE    @@gen_label1168
0000C4D6 E340 2000 0090          00000000  17914          LLGC  4,0(0,2)
0000C4DC E320 3000 0090          00000000  17915          LLGC  2,0(0,3)
0000C4E2 B90B 0042                         17916          SLGR  4,2
0000C4E6                                   17917 @@gen_label1168 DS 0H
0000C4E6 1244                              17918          LTR   4,4
0000C4E8 4770 C060               0000C4F0  17919          BNZ   @L1304
                                           17920 * ***                           return mcoord;
0000C4EC 47F0 C072               0000C502  17921          B     @ret_lab_2011
0000C4F0                                   17922 @L1304   DS    0H
                                           17923 * ***           }
                                                                                                                           Page  360 
  Active Usings: @REGION_2011_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C4F0 E3F0 F000 0004          00000000  17924          LG    15,0(0,15)  ; mcoord
0000C4F6                                   17925 @L1301   DS    0H
0000C4F6 B902 002F                         17926          LTGR  2,15
0000C4FA 4770 C01A               0000C4AA  17927          BNE   @L1300
                                           17928 * ***
                                           17929 * ***           return ((void *)0);
0000C4FE A7F9 0000               00000000  17930          LGHI  15,0        ; 0
                                           17931 * ***   }
0000C502                                   17932 @ret_lab_2011 DS 0H
                                           17933 * * **** Start of Epilogue
                                           17934          DCCEPIL
0000C502                                   17935+         ds 0h                                                          01-DCCEP
                                           17936+* Epilog
                                           17937+* Epilog
0000C502 E3E0 D008 0004          00000008  17938+         lg    14,8(,13) restore the reg                                01-DCCEP
0000C508 EB1C D020 0004          00000020  17939+         lmg   1,12,32(13)                                              01-DCCEP
0000C50E 07FE                              17940+         br   14                                                        01-DCCEP
                                           17941+* End of Epilog
                                           17942 * * **** End of Epilogue
                                           17943          DROP  12
                                           17944 *
                                           17945 *   DSECT for automatic variables in "rd_kafka_mock_coord_find"
                                           17946 *      (FUNCTION #2011)
                                           17947 *
00000000                00000000 000000A8  17948 @AUTO#rd_kafka_mock_coord_find DSECT
00000000                                   17949          DS    XL168
                                           17950 *
0000C510                00000000 00010480  17951 @CODE    CSECT
                                           17952 *
                                           17953 *
                                           17954 *
                                           17955 * ....... start of rd_kafka_mock_cluster_get_coord
                                           17956 rd_kafka_mock_cluster_get_coord ALIAS X'99846D92818692816D949683926D839*
                                                                3A4A2A385996D8785A36D8396969984'
0000C510                                   17957 @LNAME1944 DS  0H
0000C510 0000001F                          17958          DC    X'0000001F'
0000C514 99846D9281869281                  17959          DC    C'rd_kafka_mock_cluster_get_coord'
0000C533 00                                17960          DC    X'00'
                                           17961 rd_kafka_mock_cluster_get_coord DCCPRLG CINDEX=1944,BASER=12,FRAME=208,*
                                                                ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1944
                                           17962          macro
                                           17963          dccextrn &m
                                           17964          gblc    &$dccext(1000)
                                           17965          gbla    &$dccexti
                                           17966          lcla    &i
                                           17967 &$dccext(&$dccexti+1) setc    '&m'
                                           17968 &i       seta    1
                                           17969 .loop    aif    (&i gt &$dccexti).around
                                           17970          aif    ('&$dccext(&i)' eq '&m').getout
                                           17971 &i       seta    &i+1
                                           17972          ago     .loop
                                           17973 .around  anop
                                                                                                                           Page  361 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           17974 &$dccexti seta &$dccexti+1
                                           17975          extrn  &m
                                           17976 .getout  anop
                                           17977          mend
0000C538                                   17978+$eye0272    ds    0d                                                    02-DCCCA
0000C538 C4C3C3                            17979+         dc cl3'DCC'                                                    02-DCCCA
0000C53B 01                                17980+         dc xl1'01' format one                                          02-DCCCA
0000C53C 00000000                          17981+         dc a(0)                                                        02-DCCCA
0000C540 000000000000C5AA                  17982+         dc ad(@PER_1944)                                               02-DCCCA
0000C548 00000000000000D0                  17983+         dc ad(208)                                                     02-DCCCA
0000C550 0000000000000000                  17984+         dc ad(0)                                                       02-DCCCA
0000C558 0000000000001000                  17985+         dc ad(4096)                                                    02-DCCCA
0000C560 20                                17986+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000C561 03                                17987+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000C562 03                                17988+         dc al1(3)                                                      02-DCCCA
0000C563 08                                17989+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000C564 00                                17990+         dc bl.8'00000000'                                              02-DCCCA
0000C565 000000                            17991+         dc al3(0)                                                      02-DCCCA
0000C568 000000000000C510                  17992+         dc ad(@LNAME1944)                                              02-DCCCA
0000C570                                   17993+         ds 0d                                                          02-DCCCA
0000C570 000000000000C538                  17994+         dc ad($eye0272)                                                02-DCCCA
0000C578 0000000000000000                  17995+         dc ad(0)                                                       02-DCCCA
0000C580                                   17996+         ds    0d                                                       01-DCCPR
                                           17997+         entry rd_kafka_mock_cluster_get_coord                          01-DCCPR
0000C580                                   17998+rd_kafka_mock_cluster_get_coord ds 0d                                   01-DCCPR
0000C580                                   17999+@REGION_1944_1 ds 0h                                                    01-DCCPR
0000C580 EBEC D008 0024          00000008  18000+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000C586 E3E0 D088 0004          00000088  18001+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000C58C E3C0 D090 0004          00000090  18002+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000C592 B904 002E                         18003+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000C596 E3B0 C018 0004          00000018  18004+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000C59C A7EB 00D0               000000D0  18005+         aghi  14,208              increase by frame size               01-DCCPR
0000C5A0 E3E0 C020 0021          00000020  18006+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000C5A6 4720 B020               00000020  18007+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000C5AA                                   18008+@PER_1944 ds   0h                                                       01-DCCPR
0000C5AA EBDE 2080 0024          00000080  18009+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000C5B0 E3C0 2090 0024          00000090  18010+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000C5B6 B904 00D2                         18011+         lgr   13,2                set real frame pointer               01-DCCPR
0000C5BA B904 00CF                         18012+         lgr   12,15               set base reg                         01-DCCPR
                        0000C580           18013+         using @REGION_1944_1,12                                        01-DCCPR
0000C5BE B904 0061                         18014          LGR   6,1         ; ptr to parm area
                                           18015 * ******* End of Prologue
                                           18016 * *
0000C5C2 E320 6000 0004          00000000  18017          LG    2,0(0,6)    ; mcluster
0000C5C8 E330 6010 0004          00000010  18018          LG    3,16(0,6)   ; Key
                                           18019 * ***           rd_kafka_mock_broker_t *mrkb;
                                           18020 * ***           rd_kafka_mock_coord_t *mcoord;
                                           18021 * ***           char *key;
                                           18022 * ***           rd_crc32_t hash;
                                           18023 * ***           int idx;
                                           18024 * ***
                                           18025 * ***
                                                                                                                           Page  362 
  Active Usings: @REGION_1944_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18026 * ***           do { const char *_src = ((Key)->str); size_t _srclen =\
                                           18027 *  ((((Key)->len) == -1 ? 0 : ((Key)->len))); char *_dst = __builtin_a\
                                           18028 * lloca(_srclen + 1); __memcpy(_dst,_src,_srclen); _dst[_srclen] = '\0\
                                           18029 * '; *((&key)) = _dst; } while (0);
0000C5CE                                   18030 @L1305   DS    0H
0000C5CE E340 3008 0004          00000008  18031          LG    4,8(0,3)    ; offset of str in rd_kafkap_str_s
0000C5D4 E55C 3000 FFFF          00000000  18032          CHSI  0(3),-1
0000C5DA 4770 C0B0               0000C630  18033          BNE   @L1308
0000C5DE A7F8 0000               00000000  18034          LHI   15,0        ; 0
0000C5E2 47F0 C0B4               0000C634  18035          B     @L1309
0000C5E8                                   18036          DS    0D
0000C5E8 000000D0                          18037 @FRAMESIZE_1944 DC F'208'
0000C5EC 00000000
0000C5F0 0000000000000000                  18038 @lit_1944_838 DC AD(@@ALLOCA)
0000C5F8 D200 7000 4000 00000000 00000000  18039 @lit_1944_839          MVC 0(1,7),0(4)
0000C5FE 0000
0000C600 000000000000C490                  18040 @lit_1944_840 DC AD(rd_kafka_mock_coord_find)
0000C608 0000000000003638                  18041 @lit_1944_841 DC AD(rd_kafka_mock_broker_find)
0000C610 0000000000002D40                  18042 @lit_1944_843 DC AD(rd_crc32)
0000C618 0000000000010840                  18043 @lit_1944_844 DC AD(@strings@)
0000C620 0000000000000000                  18044 @lit_1944_846 DC AD(__assert)
0000C628 0000000000010480                  18045 @lit_1944_845 DC AD(@DATA)
0000C630                                   18046 @L1308   DS    0H
0000C630 58F0 3000               00000000  18047          L     15,0(0,3)   ; Key
0000C634                                   18048 @L1309   DS    0H
0000C634 B914 005F                         18049          LGFR  5,15
0000C638 B904 00F5                         18050          LGR   15,5
0000C63C A7FB 0001               00000001  18051          AGHI  15,1
0000C640 E3F0 D0B0 0024          000000B0  18052          STG   15,176(0,13)
0000C646 4110 D0B0               000000B0  18053          LA    1,176(0,13)
0000C64A E3F0 C070 0004          0000C5F0  18054          LG    15,@lit_1944_838 ; @@ALLOCA
0000C650                                   18055 @@gen_label1172 DS    0H
0000C650 05EF                              18056          BALR  14,15
0000C652                                   18057 @@gen_label1173 DS    0H
0000C652 B904 007F                         18058          LGR   7,15
0000C656 B902 0015                         18059          LTGR  1,5
0000C65A 4780 C108               0000C688  18060          BZ    @@gen_label1176
0000C65E A71B FFFF               0000FFFF  18061          AGHI  1,-1
0000C662 EB81 0008 000A          00000008  18062          SRAG  8,1,8(0)
0000C668 B902 0088                         18063          LTGR  8,8
0000C66C 4780 C104               0000C684  18064          BZ    @@gen_label1175
0000C670                                   18065 @@gen_label1174 DS 0H
0000C670 D2FF 7000 4000 00000000 00000000  18066          MVC   0(256,7),0(4)
0000C676 4170 7100               00000100  18067          LA    7,256(0,7)
0000C67A 4140 4100               00000100  18068          LA    4,256(0,4)
0000C67E E380 C0F0 0046          0000C670  18069          BCTG  8,@@gen_label1174
0000C684                                   18070 @@gen_label1175 DS 0H
0000C684 4410 C078               0000C5F8  18071          EX    1,@lit_1944_839
0000C688                                   18072 @@gen_label1176 DS 0H
0000C688 4115 F000               00000000  18073          LA    1,0(5,15)
0000C68C 9200 1000      00000000 00000000  18074          MVI   0(1),0
0000C690 E3F0 D0A8 0024          000000A8  18075          STG   15,168(0,13)
                                                                                                                           Page  363 
  Active Usings: @REGION_1944_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18076 * ***           if ((mcoord = rd_kafka_mock_coord_find(mcluster, KeyTy\
                                           18077 * pe, key)))
0000C696 E320 D0B0 0024          000000B0  18078          STG   2,176(0,13)
0000C69C E3F0 600C 0014          0000000C  18079          LGF   15,12(0,6)  ; KeyType
0000C6A2 E3F0 D0B8 0024          000000B8  18080          STG   15,184(0,13)
0000C6A8 E3F0 D0A8 0004          000000A8  18081          LG    15,168(0,13) ; key
0000C6AE E3F0 D0C0 0024          000000C0  18082          STG   15,192(0,13)
0000C6B4 4110 D0B0               000000B0  18083          LA    1,176(0,13)
0000C6B8 E3F0 C080 0004          0000C600  18084          LG    15,@lit_1944_840 ; rd_kafka_mock_coord_find
0000C6BE                                   18085 @@gen_label1177 DS    0H
0000C6BE 05EF                              18086          BALR  14,15
0000C6C0                                   18087 @@gen_label1178 DS    0H
0000C6C0 B902 001F                         18088          LTGR  1,15
0000C6C4 4780 C16A               0000C6EA  18089          BZ    @L1310
                                           18090 * ***                   return rd_kafka_mock_broker_find(mcluster, mco\
                                           18091 * ord->broker_id);
0000C6C8 E320 D0B0 0024          000000B0  18092          STG   2,176(0,13)
0000C6CE E3F0 F020 0014          00000020  18093          LGF   15,32(0,15)
0000C6D4 E3F0 D0B8 0024          000000B8  18094          STG   15,184(0,13)
0000C6DA 4110 D0B0               000000B0  18095          LA    1,176(0,13)
0000C6DE E3F0 C088 0004          0000C608  18096          LG    15,@lit_1944_841 ; rd_kafka_mock_broker_find
0000C6E4                                   18097 @@gen_label1180 DS    0H
0000C6E4 05EF                              18098          BALR  14,15
0000C6E6                                   18099 @@gen_label1181 DS    0H
0000C6E6 47F0 C226               0000C7A6  18100          B     @ret_lab_1944
0000C6EA                                   18101 @L1310   DS    0H
                                           18102 * ***
                                           18103 * ***
                                           18104 * ***           hash = rd_crc32(Key->str, (((Key)->len) == -1 ? 0 : ((\
                                           18105 * Key)->len)));
0000C6EA E55C 3000 FFFF          00000000  18106          CHSI  0(3),-1
0000C6F0 4770 C17C               0000C6FC  18107          BNE   @L1311
0000C6F4 A7F8 0000               00000000  18108          LHI   15,0        ; 0
0000C6F8 47F0 C180               0000C700  18109          B     @L1312
0000C6FC                                   18110 @L1311   DS    0H
0000C6FC 58F0 3000               00000000  18111          L     15,0(0,3)   ; Key
0000C700                                   18112 @L1312   DS    0H
0000C700 B914 00FF                         18113          LGFR  15,15
0000C704 E310 3008 0004          00000008  18114          LG    1,8(0,3)
0000C70A E310 D0B0 0024          000000B0  18115          STG   1,176(0,13)
0000C710 E3F0 D0B8 0024          000000B8  18116          STG   15,184(0,13)
0000C716 4110 D0B0               000000B0  18117          LA    1,176(0,13)
0000C71A E3F0 C090 0004          0000C610  18118          LG    15,@lit_1944_843 ; rd_crc32
0000C720                                   18119 @@gen_label1183 DS    0H
0000C720 05EF                              18120          BALR  14,15
0000C722                                   18121 @@gen_label1184 DS    0H
                                           18122 * ***           idx = (int)(hash % mcluster->broker_cnt);
0000C722 5810 2040               00000040  18123          L     1,64(0,2)   ; offset of broker_cnt in rd_kafka_mock_clus*
                                                                ter_s
0000C726 185F                              18124          LR    5,15
0000C728 A748 0000               00000000  18125          LHI   4,0
0000C72C B997 0041                         18126          DLR   4,1
                                                                                                                           Page  364 
  Active Usings: @REGION_1944_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C730 1814                              18127          LR    1,4         ; idx
                                           18128 * ***
                                           18129 * ***
                                           18130 * ***           for ((mrkb) = ((&mcluster->brokers)->tqh_first); (mrkb\
                                           18131 * ) != (((void *)0)); (mrkb) = ((mrkb)->link .tqe_next))
0000C732 E3F0 2030 0004          00000030  18132          LG    15,48(0,2)  ; offset of brokers in rd_kafka_mock_cluster*
                                                                _s
0000C738 47F0 C1D2               0000C752  18133          B     @L1314
0000C73C                                   18134 @L1313   DS    0H
                                           18135 * ***                   if (idx-- == 0)
0000C73C 1821                              18136          LR    2,1
0000C73E A71A FFFF               0000FFFF  18137          AHI   1,-1
0000C742 1222                              18138          LTR   2,2
0000C744 4770 C1CC               0000C74C  18139          BNE   @L1317
                                           18140 * ***                           return mrkb;
0000C748 47F0 C226               0000C7A6  18141          B     @ret_lab_1944
0000C74C                                   18142 @L1317   DS    0H
                                           18143 * ***
                                           18144 * ***           ((!*"/* NOTREACHED */ violated") ? (void)0 : __assert(\
                                           18145 * __func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 1442, "!*\
                                           18146 * \"/* NOTREACHED */ violated\""));
0000C74C E3F0 F000 0004          00000000  18147          LG    15,0(0,15)  ; mrkb
0000C752                                   18148 @L1314   DS    0H
0000C752 B902 002F                         18149          LTGR  2,15
0000C756 4770 C1BC               0000C73C  18150          BNE   @L1313
0000C75A E3F0 C098 0004          0000C618  18151          LG    15,@lit_1944_844
0000C760 4110 F81E               0000081E  18152          LA    1,2078(0,15)
0000C764 9500 1000      00000000 00000000  18153          CLI   0(1),0
0000C768 4780 C222               0000C7A2  18154          BE    @L1319
0000C76C                                   18155 @L1318   DS    0H
0000C76C E310 C0A8 0004          0000C628  18156          LG    1,@lit_1944_845
0000C772 4110 130E               0000030E  18157          LA    1,782(0,1)
0000C776 E310 D0B0 0024          000000B0  18158          STG   1,176(0,13)
0000C77C 4110 F0FA               000000FA  18159          LA    1,250(0,15)
0000C780 E310 D0B8 0024          000000B8  18160          STG   1,184(0,13)
0000C786 E548 D0C0 05A2          000000C0  18161          MVGHI 192(13),1442
0000C78C 41F0 F838               00000838  18162          LA    15,2104(0,15)
0000C790 E3F0 D0C8 0024          000000C8  18163          STG   15,200(0,13)
0000C796 4110 D0B0               000000B0  18164          LA    1,176(0,13)
0000C79A E3F0 C0A0 0004          0000C620  18165          LG    15,@lit_1944_846 ; __assert
0000C7A0                                   18166 @@gen_label1188 DS    0H
0000C7A0 05EF                              18167          BALR  14,15
0000C7A2                                   18168 @@gen_label1189 DS    0H
0000C7A2                                   18169 @L1319   DS    0H
                                           18170 * ***           return ((void *)0);
0000C7A2 A7F9 0000               00000000  18171          LGHI  15,0        ; 0
                                           18172 * ***   }
0000C7A6                                   18173 @ret_lab_1944 DS 0H
                                           18174 * * **** Start of Epilogue
                                           18175          DCCEPIL
0000C7A6                                   18176+         ds 0h                                                          01-DCCEP
                                           18177+* Epilog
                                                                                                                           Page  365 
  Active Usings: @REGION_1944_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C7A6 D707 D088 D088 00000088 00000088  18178+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000C7AC E3D0 D080 0004          00000080  18179+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000C7B2 E3C0 D090 0004          00000090  18180+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000C7B8 E3B0 C018 0004          00000018  18181+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000C7BE E3C0 B010 0021          00000010  18182+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000C7C4 E3E0 D008 0004          00000008  18183+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000C7CA EB1C D020 0004          00000020  18184+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000C7D0 078E                              18185+         bcr 8,14                if same dsab, just return              01-DCCEP
0000C7D2 E3F0 D010 0024          00000010  18186+         stg 15,16(0,13)         save return code                       01-DCCEP
0000C7D8 E300 D018 0024          00000018  18187+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000C7DE E3F0 D090 0004          00000090  18188+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000C7E4 E3F0 F018 0004          00000018  18189+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000C7EA 47F0 F040               00000040  18190+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           18191+* End of Epilog
                                           18192 * * **** End of Epilogue
                                           18193          DROP  12
                                           18194 *
                                           18195 *   DSECT for automatic variables in "rd_kafka_mock_cluster_get_coord"
                                           18196 *      (FUNCTION #1944)
                                           18197 *
00000000                00000000 000000B0  18198 @AUTO#rd_kafka_mock_cluster_get_coord DSECT
00000000                                   18199          DS    XL168
000000A8                                   18200 rd_kafka_mock_cluster_get_coord#_srclen#1 DS 8XL1 ; _srclen
000000B0                000000B0 000000A8  18201          ORG   @AUTO#rd_kafka_mock_cluster_get_coord+168
000000A8                                   18202 rd_kafka_mock_cluster_get_coord#idx#0 DS 1F ; idx
000000AC                000000AC 000000A8  18203          ORG   @AUTO#rd_kafka_mock_cluster_get_coord+168
000000A8                                   18204 rd_kafka_mock_cluster_get_coord#hash#0 DS 1F ; hash
                                           18205 *
0000C7EE                00000000 00010480  18206 @CODE    CSECT
                                           18207 *
                                           18208 *
                                           18209 *
                                           18210 * ....... start of rd_kafka_mock_coord_set
0000C7EE                                   18211 @LNAME2012 DS  0H
0000C7EE 00000017                          18212          DC    X'00000017'
0000C7F2 99846D9281869281                  18213          DC    C'rd_kafka_mock_coord_set'
0000C809 00                                18214          DC    X'00'
                                           18215 rd_kafka_mock_coord_set DCCPRLG CINDEX=2012,BASER=12,FRAME=200,ENTRY=NO*
                                                                ,ARCH=ZARCH,LNAMEADDR=@LNAME2012
                                           18216          macro
                                           18217          dccextrn &m
                                           18218          gblc    &$dccext(1000)
                                           18219          gbla    &$dccexti
                                           18220          lcla    &i
                                           18221 &$dccext(&$dccexti+1) setc    '&m'
                                           18222 &i       seta    1
                                           18223 .loop    aif    (&i gt &$dccexti).around
                                           18224          aif    ('&$dccext(&i)' eq '&m').getout
                                           18225 &i       seta    &i+1
                                           18226          ago     .loop
                                           18227 .around  anop
                                           18228 &$dccexti seta &$dccexti+1
                                                                                                                           Page  366 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18229          extrn  &m
                                           18230 .getout  anop
                                           18231          mend
0000C810                                   18232+$eye0275    ds    0d                                                    02-DCCCA
0000C810 C4C3C3                            18233+         dc cl3'DCC'                                                    02-DCCCA
0000C813 01                                18234+         dc xl1'01' format one                                          02-DCCCA
0000C814 00000000                          18235+         dc a(0)                                                        02-DCCCA
0000C818 000000000000C882                  18236+         dc ad(@PER_2012)                                               02-DCCCA
0000C820 00000000000000C8                  18237+         dc ad(200)                                                     02-DCCCA
0000C828 0000000000000000                  18238+         dc ad(0)                                                       02-DCCCA
0000C830 0000000000001000                  18239+         dc ad(4096)                                                    02-DCCCA
0000C838 20                                18240+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000C839 03                                18241+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000C83A 03                                18242+         dc al1(3)                                                      02-DCCCA
0000C83B 08                                18243+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000C83C 00                                18244+         dc bl.8'00000000'                                              02-DCCCA
0000C83D 000000                            18245+         dc al3(0)                                                      02-DCCCA
0000C840 000000000000C7EE                  18246+         dc ad(@LNAME2012)                                              02-DCCCA
0000C848                                   18247+         ds 0d                                                          02-DCCCA
0000C848 000000000000C810                  18248+         dc ad($eye0275)                                                02-DCCCA
0000C850 0000000000000000                  18249+         dc ad(0)                                                       02-DCCCA
0000C858                                   18250+         ds    0d                                                       01-DCCPR
0000C858                                   18251+rd_kafka_mock_coord_set ds 0d                                           01-DCCPR
0000C858                                   18252+@REGION_2012_1 ds 0h                                                    01-DCCPR
0000C858 EBEC D008 0024          00000008  18253+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000C85E E3E0 D088 0004          00000088  18254+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000C864 E3C0 D090 0004          00000090  18255+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000C86A B904 002E                         18256+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000C86E E3B0 C018 0004          00000018  18257+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000C874 A7EB 00C8               000000C8  18258+         aghi  14,200              increase by frame size               01-DCCPR
0000C878 E3E0 C020 0021          00000020  18259+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000C87E 4720 B020               00000020  18260+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000C882                                   18261+@PER_2012 ds   0h                                                       01-DCCPR
0000C882 EBDE 2080 0024          00000080  18262+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000C888 E3C0 2090 0024          00000090  18263+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000C88E B904 00D2                         18264+         lgr   13,2                set real frame pointer               01-DCCPR
0000C892 B904 00CF                         18265+         lgr   12,15               set base reg                         01-DCCPR
                        0000C858           18266+         using @REGION_2012_1,12                                        01-DCCPR
0000C896 B904 0051                         18267          LGR   5,1         ; ptr to parm area
                                           18268 * ******* End of Prologue
                                           18269 * *
0000C89A E330 5000 0004          00000000  18270          LG    3,0(0,5)    ; mcluster
                                           18271 * ***           rd_kafka_mock_coord_t *mcoord;
                                           18272 * ***           rd_kafka_coordtype_t type;
                                           18273 * ***
                                           18274 * ***           if ((int)(type = rd_kafka_mock_coord_str2type(key_type\
                                           18275 * )) == -1)
0000C8A0 E3F0 5008 0004          00000008  18276          LG    15,8(0,5)   ; key_type
0000C8A6 E3F0 D0B0 0024          000000B0  18277          STG   15,176(0,13)
0000C8AC 4110 D0B0               000000B0  18278          LA    1,176(0,13)
0000C8B0 E3F0 C080 0004          0000C8D8  18279          LG    15,@lit_2012_849 ; rd_kafka_mock_coord_str2type
0000C8B6                                   18280 @@gen_label1190 DS    0H
                                                                                                                           Page  367 
  Active Usings: @REGION_2012_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C8B6 05EF                              18281          BALR  14,15
0000C8B8                                   18282 @@gen_label1191 DS    0H
0000C8B8 184F                              18283          LR    4,15
0000C8BA A74E FFFF               0000FFFF  18284          CHI   4,-1
0000C8BE 4770 C0A8               0000C900  18285          BNE   @L1320
                                           18286 * ***                   return ((void *)0);
0000C8C2 A7F9 0000               00000000  18287          LGHI  15,0        ; 0
0000C8C6 47F0 C162               0000C9BA  18288          B     @ret_lab_2012
0000C8D0                                   18289          DS    0D
0000C8D0 000000C8                          18290 @FRAMESIZE_2012 DC F'200'
0000C8D4 00000000
0000C8D8 000000000000C200                  18291 @lit_2012_849 DC AD(rd_kafka_mock_coord_str2type)
0000C8E0 000000000000C490                  18292 @lit_2012_851 DC AD(rd_kafka_mock_coord_find)
0000C8E8 000000000000C318                  18293 @lit_2012_852 DC AD(rd_kafka_mock_coord_destroy)
0000C8F0 0000000000000728                  18294 @lit_2012_853 DC AD(rd_calloc)
0000C8F8 0000000000000C80                  18295 @lit_2012_854 DC AD(rd_strdup)
0000C900                                   18296 @L1320   DS    0H
                                           18297 * ***
                                           18298 * ***           if ((mcoord = rd_kafka_mock_coord_find(mcluster, type,\
                                           18299 *  key)))
0000C900 E330 D0B0 0024          000000B0  18300          STG   3,176(0,13)
0000C906 B914 00F4                         18301          LGFR  15,4
0000C90A E3F0 D0B8 0024          000000B8  18302          STG   15,184(0,13)
0000C910 E3F0 5010 0004          00000010  18303          LG    15,16(0,5)  ; key
0000C916 E3F0 D0C0 0024          000000C0  18304          STG   15,192(0,13)
0000C91C 4110 D0B0               000000B0  18305          LA    1,176(0,13)
0000C920 E3F0 C088 0004          0000C8E0  18306          LG    15,@lit_2012_851 ; rd_kafka_mock_coord_find
0000C926                                   18307 @@gen_label1193 DS    0H
0000C926 05EF                              18308          BALR  14,15
0000C928                                   18309 @@gen_label1194 DS    0H
0000C928 B902 002F                         18310          LTGR  2,15        ; mcoord
0000C92C 4780 C0F0               0000C948  18311          BZ    @L1321
                                           18312 * ***                   rd_kafka_mock_coord_destroy(mcluster, mcoord);
0000C930 E330 D0B0 0024          000000B0  18313          STG   3,176(0,13)
0000C936 E320 D0B8 0024          000000B8  18314          STG   2,184(0,13)
0000C93C 4110 D0B0               000000B0  18315          LA    1,176(0,13)
0000C940 E3F0 C090 0004          0000C8E8  18316          LG    15,@lit_2012_852 ; rd_kafka_mock_coord_destroy
0000C946                                   18317 @@gen_label1196 DS    0H
0000C946 05EF                              18318          BALR  14,15
0000C948                                   18319 @@gen_label1197 DS    0H
0000C948                                   18320 @L1321   DS    0H
                                           18321 * ***
                                           18322 * ***           mcoord = rd_calloc(1, sizeof(*mcoord));
0000C948 E548 D0B0 0001          000000B0  18323          MVGHI 176(13),1
0000C94E E548 D0B8 0028          000000B8  18324          MVGHI 184(13),40
0000C954 4110 D0B0               000000B0  18325          LA    1,176(0,13)
0000C958 E3F0 C098 0004          0000C8F0  18326          LG    15,@lit_2012_853 ; rd_calloc
0000C95E                                   18327 @@gen_label1198 DS    0H
0000C95E 05EF                              18328          BALR  14,15
0000C960                                   18329 @@gen_label1199 DS    0H
0000C960 B904 002F                         18330          LGR   2,15
                                           18331 * ***           mcoord->type = type;
                                                                                                                           Page  368 
  Active Usings: @REGION_2012_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000C964 5040 2010               00000010  18332          ST    4,16(0,2)   ; offset of type in rd_kafka_mock_coord_s
                                           18333 * ***           mcoord->key = rd_strdup(key);
0000C968 E3F0 5010 0004          00000010  18334          LG    15,16(0,5)  ; key
0000C96E E3F0 D0B0 0024          000000B0  18335          STG   15,176(0,13)
0000C974 4110 D0B0               000000B0  18336          LA    1,176(0,13)
0000C978 E3F0 C0A0 0004          0000C8F8  18337          LG    15,@lit_2012_854 ; rd_strdup
0000C97E                                   18338 @@gen_label1200 DS    0H
0000C97E 05EF                              18339          BALR  14,15
0000C980                                   18340 @@gen_label1201 DS    0H
0000C980 E3F0 2018 0024          00000018  18341          STG   15,24(0,2)
                                           18342 * ***           mcoord->broker_id = broker_id;
0000C986 58F0 501C               0000001C  18343          L     15,28(0,5)  ; broker_id
0000C98A 50F0 2020               00000020  18344          ST    15,32(0,2)  ; offset of broker_id in rd_kafka_mock_coord*
                                                                _s
                                           18345 * ***
                                           18346 * ***           do {  (mcoord)->link .tqe_next = (((void *)0)); (mcoor\
                                           18347 * d)->link .tqe_prev = (&mcluster->coords)->tqh_last; *(&mcluster->coo\
                                           18348 * rds)->tqh_last = (mcoord); (&mcluster->coords)->tqh_last = &(mcoord)\
                                           18349 * ->link .tqe_next; } while ( 0);
0000C98E                                   18350 @L1322   DS    0H
0000C98E A7F9 0000               00000000  18351          LGHI  15,0        ; 0
0000C992 E3F0 2000 0024          00000000  18352          STG   15,0(0,2)   ; mcoord
0000C998 E3F0 3078 0004          00000078  18353          LG    15,120(0,3) ; offset of tqh_last in 0000173
0000C99E E3F0 2008 0024          00000008  18354          STG   15,8(0,2)   ; offset of tqe_prev in 0000169
0000C9A4 E3F0 3078 0004          00000078  18355          LG    15,120(0,3) ; offset of tqh_last in 0000173
0000C9AA E320 F000 0024          00000000  18356          STG   2,0(0,15)
0000C9B0 E320 3078 0024          00000078  18357          STG   2,120(0,3)  ; offset of tqh_last in 0000173
                                           18358 * ***
                                           18359 * ***           return mcoord;
0000C9B6 B904 00F2                         18360          LGR   15,2
                                           18361 * ***   }
0000C9BA                                   18362 @ret_lab_2012 DS 0H
                                           18363 * * **** Start of Epilogue
                                           18364          DCCEPIL
0000C9BA                                   18365+         ds 0h                                                          01-DCCEP
                                           18366+* Epilog
0000C9BA D707 D088 D088 00000088 00000088  18367+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000C9C0 E3D0 D080 0004          00000080  18368+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000C9C6 E3C0 D090 0004          00000090  18369+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000C9CC E3B0 C018 0004          00000018  18370+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000C9D2 E3C0 B010 0021          00000010  18371+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000C9D8 E3E0 D008 0004          00000008  18372+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000C9DE EB1C D020 0004          00000020  18373+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000C9E4 078E                              18374+         bcr 8,14                if same dsab, just return              01-DCCEP
0000C9E6 E3F0 D010 0024          00000010  18375+         stg 15,16(0,13)         save return code                       01-DCCEP
0000C9EC E300 D018 0024          00000018  18376+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000C9F2 E3F0 D090 0004          00000090  18377+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000C9F8 E3F0 F018 0004          00000018  18378+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000C9FE 47F0 F040               00000040  18379+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           18380+* End of Epilog
                                           18381 * * **** End of Epilogue
                                           18382          DROP  12
                                                                                                                           Page  369 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18383 *
                                           18384 *   DSECT for automatic variables in "rd_kafka_mock_coord_set"
                                           18385 *      (FUNCTION #2012)
                                           18386 *
00000000                00000000 000000AC  18387 @AUTO#rd_kafka_mock_coord_set DSECT
00000000                                   18388          DS    XL168
000000A8                                   18389 rd_kafka_mock_coord_set#type#0 DS 1F ; type
                                           18390 *
0000CA02                00000000 00010480  18391 @CODE    CSECT
                                           18392 *
                                           18393 *
                                           18394 *
                                           18395 * ....... start of rd_kafka_mock_error_stack_next
0000CA02                                   18396 @LNAME2013 DS  0H
0000CA02 0000001E                          18397          DC    X'0000001E'
0000CA06 99846D9281869281                  18398          DC    C'rd_kafka_mock_error_stack_next'
0000CA24 00                                18399          DC    X'00'
                                           18400 rd_kafka_mock_error_stack_next DCCPRLG CINDEX=2013,BASER=12,FRAME=208,E*
                                                                NTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2013
                                           18401          macro
                                           18402          dccextrn &m
                                           18403          gblc    &$dccext(1000)
                                           18404          gbla    &$dccexti
                                           18405          lcla    &i
                                           18406 &$dccext(&$dccexti+1) setc    '&m'
                                           18407 &i       seta    1
                                           18408 .loop    aif    (&i gt &$dccexti).around
                                           18409          aif    ('&$dccext(&i)' eq '&m').getout
                                           18410 &i       seta    &i+1
                                           18411          ago     .loop
                                           18412 .around  anop
                                           18413 &$dccexti seta &$dccexti+1
                                           18414          extrn  &m
                                           18415 .getout  anop
                                           18416          mend
0000CA28                                   18417+$eye0278    ds    0d                                                    02-DCCCA
0000CA28 C4C3C3                            18418+         dc cl3'DCC'                                                    02-DCCCA
0000CA2B 01                                18419+         dc xl1'01' format one                                          02-DCCCA
0000CA2C 00000000                          18420+         dc a(0)                                                        02-DCCCA
0000CA30 000000000000CA9A                  18421+         dc ad(@PER_2013)                                               02-DCCCA
0000CA38 00000000000000D0                  18422+         dc ad(208)                                                     02-DCCCA
0000CA40 0000000000000000                  18423+         dc ad(0)                                                       02-DCCCA
0000CA48 0000000000001000                  18424+         dc ad(4096)                                                    02-DCCCA
0000CA50 20                                18425+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000CA51 03                                18426+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000CA52 03                                18427+         dc al1(3)                                                      02-DCCCA
0000CA53 08                                18428+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000CA54 00                                18429+         dc bl.8'00000000'                                              02-DCCCA
0000CA55 000000                            18430+         dc al3(0)                                                      02-DCCCA
0000CA58 000000000000CA02                  18431+         dc ad(@LNAME2013)                                              02-DCCCA
0000CA60                                   18432+         ds 0d                                                          02-DCCCA
0000CA60 000000000000CA28                  18433+         dc ad($eye0278)                                                02-DCCCA
                                                                                                                           Page  370 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000CA68 0000000000000000                  18434+         dc ad(0)                                                       02-DCCCA
0000CA70                                   18435+         ds    0d                                                       01-DCCPR
0000CA70                                   18436+rd_kafka_mock_error_stack_next ds 0d                                    01-DCCPR
0000CA70                                   18437+@REGION_2013_1 ds 0h                                                    01-DCCPR
0000CA70 EBEC D008 0024          00000008  18438+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000CA76 E3E0 D088 0004          00000088  18439+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000CA7C E3C0 D090 0004          00000090  18440+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000CA82 B904 002E                         18441+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000CA86 E3B0 C018 0004          00000018  18442+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000CA8C A7EB 00D0               000000D0  18443+         aghi  14,208              increase by frame size               01-DCCPR
0000CA90 E3E0 C020 0021          00000020  18444+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000CA96 4720 B020               00000020  18445+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000CA9A                                   18446+@PER_2013 ds   0h                                                       01-DCCPR
0000CA9A EBDE 2080 0024          00000080  18447+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000CAA0 E3C0 2090 0024          00000090  18448+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000CAA6 B904 00D2                         18449+         lgr   13,2                set real frame pointer               01-DCCPR
0000CAAA B904 00CF                         18450+         lgr   12,15               set base reg                         01-DCCPR
                        0000CA70           18451+         using @REGION_2013_1,12                                        01-DCCPR
                                           18452 * ******* End of Prologue
                                           18453 * *
0000CAAE E320 1000 0004          00000000  18454          LG    2,0(0,1)
                                           18455 * ***           rd_kafka_mock_error_rtt_t err_rtt = { RD_KAFKA_RESP_ER\
                                           18456 * R_NO_ERROR, 0 };
0000CAB4 E3F0 1008 0004          00000008  18457          LG    15,8(0,1)   ; errstack
                                           18458 * setting 16 bytes to 0x00
0000CABA D70F D0A8 D0A8 000000A8 000000A8  18459          XC    168(16,13),168(13)
                                           18460 * ***
                                           18461 * ***           if (((errstack->cnt == 0)))
0000CAC0 E559 F018 0000          00000018  18462          CLGHSI 24(15),0
0000CAC6 4770 C078               0000CAE8  18463          BNE   @L1325
                                           18464 * ***                   return err_rtt;
0000CACA D20F 2000 D0A8 00000000 000000A8  18465          MVC   0(16,2),168(13)
0000CAD0 47F0 C0DE               0000CB4E  18466          B     @ret_lab_2013
0000CAD8                                   18467          DS    0D
0000CAD8 000000D0                          18468 @FRAMESIZE_2013 DC F'208'
0000CADC 00000000
0000CAE0 0000000000000000                  18469 @lit_2013_857 DC AD(memmove)
0000CAE8                                   18470 @L1325   DS    0H
                                           18471 * ***
                                           18472 * ***           err_rtt = errstack->errs[0];
0000CAE8 E310 F028 0004          00000028  18473          LG    1,40(0,15)  ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000CAEE D20F D0A8 1000 000000A8 00000000  18474          MVC   168(16,13),0(1)
                                           18475 * ***           errstack->cnt--;
0000CAF4 E310 F018 0004          00000018  18476          LG    1,24(0,15)
0000CAFA A71B FFFF               0000FFFF  18477          AGHI  1,-1
0000CAFE E310 F018 0024          00000018  18478          STG   1,24(0,15)
                                           18479 * ***           if (errstack->cnt > 0)
0000CB04 E559 F018 0000          00000018  18480          CLGHSI 24(15),0
0000CB0A 47D0 C0D8               0000CB48  18481          BNH   @L1326
                                           18482 * ***                   memmove(errstack->errs, &errstack->errs[1],
                                           18483 * ***                           sizeof(*errstack->errs) * errstack->cn\
                                                                                                                           Page  371 
  Active Usings: @REGION_2013_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18484 * t);
0000CB0E E310 F028 0004          00000028  18485          LG    1,40(0,15)
0000CB14 E310 D0B8 0024          000000B8  18486          STG   1,184(0,13)
0000CB1A E310 F028 0004          00000028  18487          LG    1,40(0,15)  ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000CB20 4110 1010               00000010  18488          LA    1,16(0,1)
0000CB24 E310 D0C0 0024          000000C0  18489          STG   1,192(0,13)
0000CB2A E3F0 F018 0004          00000018  18490          LG    15,24(0,15) ; offset of cnt in rd_kafka_mock_error_stack*
                                                                _s
0000CB30 EBFF 0004 000D          00000004  18491          SLLG  15,15,4(0)  ; *0x10
0000CB36 E3F0 D0C8 0024          000000C8  18492          STG   15,200(0,13)
0000CB3C 4110 D0B8               000000B8  18493          LA    1,184(0,13)
0000CB40 E3F0 C070 0004          0000CAE0  18494          LG    15,@lit_2013_857 ; memmove
0000CB46                                   18495 @@gen_label1204 DS    0H
0000CB46 05EF                              18496          BALR  14,15
0000CB48                                   18497 @@gen_label1205 DS    0H
0000CB48                                   18498 @L1326   DS    0H
                                           18499 * ***
                                           18500 * ***           return err_rtt;
0000CB48 D20F 2000 D0A8 00000000 000000A8  18501          MVC   0(16,2),168(13)
                                           18502 * ***   }
0000CB4E                                   18503 @ret_lab_2013 DS 0H
                                           18504 * * **** Start of Epilogue
                                           18505          DCCEPIL
0000CB4E                                   18506+         ds 0h                                                          01-DCCEP
                                           18507+* Epilog
0000CB4E D707 D088 D088 00000088 00000088  18508+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000CB54 E3D0 D080 0004          00000080  18509+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000CB5A E3C0 D090 0004          00000090  18510+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000CB60 E3B0 C018 0004          00000018  18511+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000CB66 E3C0 B010 0021          00000010  18512+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000CB6C E3E0 D008 0004          00000008  18513+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000CB72 EB1C D020 0004          00000020  18514+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000CB78 078E                              18515+         bcr 8,14                if same dsab, just return              01-DCCEP
0000CB7A E3F0 D010 0024          00000010  18516+         stg 15,16(0,13)         save return code                       01-DCCEP
0000CB80 E300 D018 0024          00000018  18517+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000CB86 E3F0 D090 0004          00000090  18518+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000CB8C E3F0 F018 0004          00000018  18519+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000CB92 47F0 F040               00000040  18520+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           18521+* End of Epilog
                                           18522 * * **** End of Epilogue
                                           18523          DROP  12
                                           18524 *
                                           18525 *   DSECT for automatic variables in "rd_kafka_mock_error_stack_next"
                                           18526 *      (FUNCTION #2013)
                                           18527 *
00000000                00000000 000000B8  18528 @AUTO#rd_kafka_mock_error_stack_next DSECT
00000000                                   18529          DS    XL168
000000A8                                   18530 rd_kafka_mock_error_stack_next#err_rtt#0 DS 16XL1 ; err_rtt
                                           18531 *
0000CB96                00000000 00010480  18532 @CODE    CSECT
                                           18533 *
                                                                                                                           Page  372 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18534 *
                                           18535 *
                                           18536 * ....... start of rd_kafka_mock_error_stack_find
0000CB96                                   18537 @LNAME2014 DS  0H
0000CB96 0000001E                          18538          DC    X'0000001E'
0000CB9A 99846D9281869281                  18539          DC    C'rd_kafka_mock_error_stack_find'
0000CBB8 00                                18540          DC    X'00'
                                           18541 rd_kafka_mock_error_stack_find DCCPRLG CINDEX=2014,BASER=12,FRAME=176,S*
                                                                AVEAREA=NO,ENTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2014
                                           18542          macro
                                           18543          dccextrn &m
                                           18544          gblc    &$dccext(1000)
                                           18545          gbla    &$dccexti
                                           18546          lcla    &i
                                           18547 &$dccext(&$dccexti+1) setc    '&m'
                                           18548 &i       seta    1
                                           18549 .loop    aif    (&i gt &$dccexti).around
                                           18550          aif    ('&$dccext(&i)' eq '&m').getout
                                           18551 &i       seta    &i+1
                                           18552          ago     .loop
                                           18553 .around  anop
                                           18554 &$dccexti seta &$dccexti+1
                                           18555          extrn  &m
                                           18556 .getout  anop
                                           18557          mend
0000CBC0                                   18558+$eye0281    ds    0d                                                    02-DCCCA
0000CBC0 C4C3C3                            18559+         dc cl3'DCC'                                                    02-DCCCA
0000CBC3 01                                18560+         dc xl1'01' format one                                          02-DCCCA
0000CBC4 00000000                          18561+         dc a(0)                                                        02-DCCCA
0000CBC8 0000000000000000                  18562+         dc ad(0)                                                       02-DCCCA
0000CBD0 00000000000000B0                  18563+         dc ad(176)                                                     02-DCCCA
0000CBD8 0000000000000000                  18564+         dc ad(0)                                                       02-DCCCA
0000CBE0 0000000000001000                  18565+         dc ad(4096)                                                    02-DCCCA
0000CBE8 20                                18566+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000CBE9 03                                18567+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000CBEA 03                                18568+         dc al1(3)                                                      02-DCCCA
0000CBEB 08                                18569+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000CBEC 00                                18570+         dc bl.8'00000000'                                              02-DCCCA
0000CBED 000000                            18571+         dc al3(0)                                                      02-DCCCA
0000CBF0 000000000000CB96                  18572+         dc ad(@LNAME2014)                                              02-DCCCA
0000CBF8                                   18573+         ds 0d                                                          02-DCCCA
0000CBF8 000000000000CBC0                  18574+         dc ad($eye0281)                                                02-DCCCA
0000CC00 0000000000000000                  18575+         dc ad(0)                                                       02-DCCCA
0000CC08                                   18576+         ds    0d                                                       01-DCCPR
0000CC08                                   18577+rd_kafka_mock_error_stack_find ds 0d                                    01-DCCPR
0000CC08                                   18578+@REGION_2014_1 ds 0h                                                    01-DCCPR
0000CC08 EBEC D008 0024          00000008  18579+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000CC0E B904 00CF                         18580+         lgr   12,15               set base reg                         01-DCCPR
                        0000CC08           18581+         using @REGION_2014_1,12                                        01-DCCPR
                                           18582 * ******* End of Prologue
                                           18583 * *
                                           18584 * ***           const rd_kafka_mock_error_stack_t *errstack;
                                                                                                                           Page  373 
  Active Usings: @REGION_2014_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18585 * ***
                                           18586 * ***           for ((errstack) = ((shead)->tqh_first); (errstack) != \
                                           18587 * (((void *)0)); (errstack) = ((errstack)->link .tqe_next))
0000CC12 E3F0 1000 0004          00000000  18588          LG    15,0(0,1)   ; shead
0000CC18 E3F0 F000 0004          00000000  18589          LG    15,0(0,15)  ; shead
0000CC1E 47F0 C030               0000CC38  18590          B     @L1328
0000CC22                                   18591 @L1327   DS    0H
                                           18592 * ***                   if (errstack->ApiKey == ApiKey)
0000CC22 4820 F010               00000010  18593          LH    2,16(0,15)
0000CC26 4920 100E               0000000E  18594          CH    2,14(0,1)
0000CC2A 4770 C02A               0000CC32  18595          BNE   @L1331
                                           18596 * ***                           return (rd_kafka_mock_error_stack_t *)\
                                           18597 * errstack;
0000CC2E 47F0 C03C               0000CC44  18598          B     @ret_lab_2014
0000CC32                                   18599 @L1331   DS    0H
                                           18600 * ***
                                           18601 * ***           return ((void *)0);
0000CC32 E3F0 F000 0004          00000000  18602          LG    15,0(0,15)  ; errstack
0000CC38                                   18603 @L1328   DS    0H
0000CC38 B902 002F                         18604          LTGR  2,15
0000CC3C 4770 C01A               0000CC22  18605          BNE   @L1327
0000CC40 A7F9 0000               00000000  18606          LGHI  15,0        ; 0
                                           18607 * ***   }
0000CC44                                   18608 @ret_lab_2014 DS 0H
                                           18609 * * **** Start of Epilogue
                                           18610          DCCEPIL
0000CC44                                   18611+         ds 0h                                                          01-DCCEP
                                           18612+* Epilog
                                           18613+* Epilog
0000CC44 E3E0 D008 0004          00000008  18614+         lg    14,8(,13) restore the reg                                01-DCCEP
0000CC4A EB1C D020 0004          00000020  18615+         lmg   1,12,32(13)                                              01-DCCEP
0000CC50 07FE                              18616+         br   14                                                        01-DCCEP
                                           18617+* End of Epilog
                                           18618 * * **** End of Epilogue
                                           18619          DROP  12
                                           18620 *
                                           18621 *   DSECT for automatic variables in "rd_kafka_mock_error_stack_find"
                                           18622 *      (FUNCTION #2014)
                                           18623 *
00000000                00000000 000000A8  18624 @AUTO#rd_kafka_mock_error_stack_find DSECT
00000000                                   18625          DS    XL168
                                           18626 *
0000CC52                00000000 00010480  18627 @CODE    CSECT
                                           18628 *
                                           18629 *
                                           18630 *
                                           18631 * ....... start of rd_kafka_mock_error_stack_get
0000CC52                                   18632 @LNAME2015 DS  0H
0000CC52 0000001D                          18633          DC    X'0000001D'
0000CC56 99846D9281869281                  18634          DC    C'rd_kafka_mock_error_stack_get'
0000CC73 00                                18635          DC    X'00'
                                           18636 rd_kafka_mock_error_stack_get DCCPRLG CINDEX=2015,BASER=12,FRAME=192,EN*
                                                                                                                           Page  374 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                TRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2015
                                           18637          macro
                                           18638          dccextrn &m
                                           18639          gblc    &$dccext(1000)
                                           18640          gbla    &$dccexti
                                           18641          lcla    &i
                                           18642 &$dccext(&$dccexti+1) setc    '&m'
                                           18643 &i       seta    1
                                           18644 .loop    aif    (&i gt &$dccexti).around
                                           18645          aif    ('&$dccext(&i)' eq '&m').getout
                                           18646 &i       seta    &i+1
                                           18647          ago     .loop
                                           18648 .around  anop
                                           18649 &$dccexti seta &$dccexti+1
                                           18650          extrn  &m
                                           18651 .getout  anop
                                           18652          mend
0000CC78                                   18653+$eye0284    ds    0d                                                    02-DCCCA
0000CC78 C4C3C3                            18654+         dc cl3'DCC'                                                    02-DCCCA
0000CC7B 01                                18655+         dc xl1'01' format one                                          02-DCCCA
0000CC7C 00000000                          18656+         dc a(0)                                                        02-DCCCA
0000CC80 000000000000CCEA                  18657+         dc ad(@PER_2015)                                               02-DCCCA
0000CC88 00000000000000C0                  18658+         dc ad(192)                                                     02-DCCCA
0000CC90 0000000000000000                  18659+         dc ad(0)                                                       02-DCCCA
0000CC98 0000000000001000                  18660+         dc ad(4096)                                                    02-DCCCA
0000CCA0 20                                18661+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000CCA1 03                                18662+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000CCA2 03                                18663+         dc al1(3)                                                      02-DCCCA
0000CCA3 08                                18664+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000CCA4 00                                18665+         dc bl.8'00000000'                                              02-DCCCA
0000CCA5 000000                            18666+         dc al3(0)                                                      02-DCCCA
0000CCA8 000000000000CC52                  18667+         dc ad(@LNAME2015)                                              02-DCCCA
0000CCB0                                   18668+         ds 0d                                                          02-DCCCA
0000CCB0 000000000000CC78                  18669+         dc ad($eye0284)                                                02-DCCCA
0000CCB8 0000000000000000                  18670+         dc ad(0)                                                       02-DCCCA
0000CCC0                                   18671+         ds    0d                                                       01-DCCPR
0000CCC0                                   18672+rd_kafka_mock_error_stack_get ds 0d                                     01-DCCPR
0000CCC0                                   18673+@REGION_2015_1 ds 0h                                                    01-DCCPR
0000CCC0 EBEC D008 0024          00000008  18674+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000CCC6 E3E0 D088 0004          00000088  18675+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000CCCC E3C0 D090 0004          00000090  18676+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000CCD2 B904 002E                         18677+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000CCD6 E3B0 C018 0004          00000018  18678+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000CCDC A7EB 00C0               000000C0  18679+         aghi  14,192              increase by frame size               01-DCCPR
0000CCE0 E3E0 C020 0021          00000020  18680+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000CCE6 4720 B020               00000020  18681+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000CCEA                                   18682+@PER_2015 ds   0h                                                       01-DCCPR
0000CCEA EBDE 2080 0024          00000080  18683+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000CCF0 E3C0 2090 0024          00000090  18684+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000CCF6 B904 00D2                         18685+         lgr   13,2                set real frame pointer               01-DCCPR
0000CCFA B904 00CF                         18686+         lgr   12,15               set base reg                         01-DCCPR
                        0000CCC0           18687+         using @REGION_2015_1,12                                        01-DCCPR
                                                                                                                           Page  375 
  Active Usings: @REGION_2015_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000CCFE B904 0031                         18688          LGR   3,1         ; ptr to parm area
                                           18689 * ******* End of Prologue
                                           18690 * *
0000CD02 E320 3000 0004          00000000  18691          LG    2,0(0,3)    ; shead
                                           18692 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           18693 * ***
                                           18694 * ***           if ((errstack = rd_kafka_mock_error_stack_find(shead, \
                                           18695 * ApiKey)))
0000CD08 E320 D0B0 0024          000000B0  18696          STG   2,176(0,13)
0000CD0E E3F0 300E 0015          0000000E  18697          LGH   15,14(0,3)  ; ApiKey
0000CD14 E3F0 D0B8 0024          000000B8  18698          STG   15,184(0,13)
0000CD1A 4110 D0B0               000000B0  18699          LA    1,176(0,13)
0000CD1E E3F0 C080 0004          0000CD40  18700          LG    15,@lit_2015_860 ; rd_kafka_mock_error_stack_find
0000CD24                                   18701 @@gen_label1208 DS    0H
0000CD24 05EF                              18702          BALR  14,15
0000CD26                                   18703 @@gen_label1209 DS    0H
0000CD26 B902 001F                         18704          LTGR  1,15
0000CD2A 4780 C090               0000CD50  18705          BZ    @L1332
                                           18706 * ***                   return errstack;
0000CD2E 47F0 C0D6               0000CD96  18707          B     @ret_lab_2015
0000CD38                                   18708          DS    0D
0000CD38 000000C0                          18709 @FRAMESIZE_2015 DC F'192'
0000CD3C 00000000
0000CD40 000000000000CC08                  18710 @lit_2015_860 DC AD(rd_kafka_mock_error_stack_find)
0000CD48 0000000000000728                  18711 @lit_2015_861 DC AD(rd_calloc)
0000CD50                                   18712 @L1332   DS    0H
                                           18713 * ***
                                           18714 * ***           errstack = rd_calloc(1, sizeof(*errstack));
0000CD50 E548 D0B0 0001          000000B0  18715          MVGHI 176(13),1
0000CD56 E548 D0B8 0030          000000B8  18716          MVGHI 184(13),48
0000CD5C 4110 D0B0               000000B0  18717          LA    1,176(0,13)
0000CD60 E3F0 C088 0004          0000CD48  18718          LG    15,@lit_2015_861 ; rd_calloc
0000CD66                                   18719 @@gen_label1211 DS    0H
0000CD66 05EF                              18720          BALR  14,15
0000CD68                                   18721 @@gen_label1212 DS    0H
                                           18722 * ***
                                           18723 * ***           errstack->ApiKey = ApiKey;
0000CD68 D201 F010 300E 00000010 0000000E  18724          MVC   16(2,15),14(3)
                                           18725 * ***           do {  (errstack)->link .tqe_next = (((void *)0)); (err\
                                           18726 * stack)->link .tqe_prev = (shead)->tqh_last; *(shead)->tqh_last = (er\
                                           18727 * rstack); (shead)->tqh_last = &(errstack)->link .tqe_next; } while ( \
                                           18728 * 0);
0000CD6E                                   18729 @L1333   DS    0H
0000CD6E A719 0000               00000000  18730          LGHI  1,0         ; 0
0000CD72 E310 F000 0024          00000000  18731          STG   1,0(0,15)   ; errstack
0000CD78 E310 2008 0004          00000008  18732          LG    1,8(0,2)    ; offset of tqh_last in rd_kafka_mock_error_*
                                                                stack_head_s
0000CD7E E310 F008 0024          00000008  18733          STG   1,8(0,15)   ; offset of tqe_prev in 0000155
0000CD84 E310 2008 0004          00000008  18734          LG    1,8(0,2)    ; offset of tqh_last in rd_kafka_mock_error_*
                                                                stack_head_s
0000CD8A E3F0 1000 0024          00000000  18735          STG   15,0(0,1)
0000CD90 E3F0 2008 0024          00000008  18736          STG   15,8(0,2)   ; offset of tqh_last in rd_kafka_mock_error_*
                                                                                                                           Page  376 
  Active Usings: @REGION_2015_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                stack_head_s
                                           18737 * ***
                                           18738 * ***           return errstack;
                                           18739 * ***   }
0000CD96                                   18740 @ret_lab_2015 DS 0H
                                           18741 * * **** Start of Epilogue
                                           18742          DCCEPIL
0000CD96                                   18743+         ds 0h                                                          01-DCCEP
                                           18744+* Epilog
0000CD96 D707 D088 D088 00000088 00000088  18745+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000CD9C E3D0 D080 0004          00000080  18746+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000CDA2 E3C0 D090 0004          00000090  18747+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000CDA8 E3B0 C018 0004          00000018  18748+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000CDAE E3C0 B010 0021          00000010  18749+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000CDB4 E3E0 D008 0004          00000008  18750+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000CDBA EB1C D020 0004          00000020  18751+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000CDC0 078E                              18752+         bcr 8,14                if same dsab, just return              01-DCCEP
0000CDC2 E3F0 D010 0024          00000010  18753+         stg 15,16(0,13)         save return code                       01-DCCEP
0000CDC8 E300 D018 0024          00000018  18754+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000CDCE E3F0 D090 0004          00000090  18755+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000CDD4 E3F0 F018 0004          00000018  18756+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000CDDA 47F0 F040               00000040  18757+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           18758+* End of Epilog
                                           18759 * * **** End of Epilogue
                                           18760          DROP  12
                                           18761 *
                                           18762 *   DSECT for automatic variables in "rd_kafka_mock_error_stack_get"
                                           18763 *      (FUNCTION #2015)
                                           18764 *
00000000                00000000 000000A8  18765 @AUTO#rd_kafka_mock_error_stack_get DSECT
00000000                                   18766          DS    XL168
                                           18767 *
0000CDDE                00000000 00010480  18768 @CODE    CSECT
                                           18769 *
                                           18770 *
                                           18771 *
                                           18772 * ....... start of rd_kafka_mock_next_request_error
                                           18773 rd_kafka_mock_next_request_error ALIAS X'99846D92818692816D949683926D95*
                                                                85A7A36D998598A485A2A36D8599999699'
0000CDDE                                   18774 @LNAME1948 DS  0H
0000CDDE 00000020                          18775          DC    X'00000020'
0000CDE2 99846D9281869281                  18776          DC    C'rd_kafka_mock_next_request_error'
0000CE02 00                                18777          DC    X'00'
                                           18778 rd_kafka_mock_next_request_error DCCPRLG CINDEX=1948,BASER=12,FRAME=216*
                                                                ,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1948
                                           18779          macro
                                           18780          dccextrn &m
                                           18781          gblc    &$dccext(1000)
                                           18782          gbla    &$dccexti
                                           18783          lcla    &i
                                           18784 &$dccext(&$dccexti+1) setc    '&m'
                                           18785 &i       seta    1
                                                                                                                           Page  377 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18786 .loop    aif    (&i gt &$dccexti).around
                                           18787          aif    ('&$dccext(&i)' eq '&m').getout
                                           18788 &i       seta    &i+1
                                           18789          ago     .loop
                                           18790 .around  anop
                                           18791 &$dccexti seta &$dccexti+1
                                           18792          extrn  &m
                                           18793 .getout  anop
                                           18794          mend
0000CE08                                   18795+$eye0287    ds    0d                                                    02-DCCCA
0000CE08 C4C3C3                            18796+         dc cl3'DCC'                                                    02-DCCCA
0000CE0B 01                                18797+         dc xl1'01' format one                                          02-DCCCA
0000CE0C 00000000                          18798+         dc a(0)                                                        02-DCCCA
0000CE10 000000000000CE7A                  18799+         dc ad(@PER_1948)                                               02-DCCCA
0000CE18 00000000000000D8                  18800+         dc ad(216)                                                     02-DCCCA
0000CE20 0000000000000000                  18801+         dc ad(0)                                                       02-DCCCA
0000CE28 0000000000001000                  18802+         dc ad(4096)                                                    02-DCCCA
0000CE30 20                                18803+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000CE31 03                                18804+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000CE32 03                                18805+         dc al1(3)                                                      02-DCCCA
0000CE33 08                                18806+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000CE34 00                                18807+         dc bl.8'00000000'                                              02-DCCCA
0000CE35 000000                            18808+         dc al3(0)                                                      02-DCCCA
0000CE38 000000000000CDDE                  18809+         dc ad(@LNAME1948)                                              02-DCCCA
0000CE40                                   18810+         ds 0d                                                          02-DCCCA
0000CE40 000000000000CE08                  18811+         dc ad($eye0287)                                                02-DCCCA
0000CE48 0000000000000000                  18812+         dc ad(0)                                                       02-DCCCA
0000CE50                                   18813+         ds    0d                                                       01-DCCPR
                                           18814+         entry rd_kafka_mock_next_request_error                         01-DCCPR
0000CE50                                   18815+rd_kafka_mock_next_request_error ds 0d                                  01-DCCPR
0000CE50                                   18816+@REGION_1948_1 ds 0h                                                    01-DCCPR
0000CE50 EBEC D008 0024          00000008  18817+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000CE56 E3E0 D088 0004          00000088  18818+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000CE5C E3C0 D090 0004          00000090  18819+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000CE62 B904 002E                         18820+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000CE66 E3B0 C018 0004          00000018  18821+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000CE6C A7EB 00D8               000000D8  18822+         aghi  14,216              increase by frame size               01-DCCPR
0000CE70 E3E0 C020 0021          00000020  18823+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000CE76 4720 B020               00000020  18824+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000CE7A                                   18825+@PER_1948 ds   0h                                                       01-DCCPR
0000CE7A EBDE 2080 0024          00000080  18826+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000CE80 E3C0 2090 0024          00000090  18827+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000CE86 B904 00D2                         18828+         lgr   13,2                set real frame pointer               01-DCCPR
0000CE8A B904 00CF                         18829+         lgr   12,15               set base reg                         01-DCCPR
                        0000CE50           18830+         using @REGION_1948_1,12                                        01-DCCPR
                                           18831 * ******* End of Prologue
                                           18832 * *
                                           18833 * ***           rd_kafka_mock_cluster_t *mcluster = mconn->broker->clu\
                                           18834 * ster;
0000CE8E E320 1008 0004          00000008  18835          LG    2,8(0,1)    ; resp
0000CE94 E340 1000 0004          00000000  18836          LG    4,0(0,1)    ; mconn
0000CE9A E3F0 40A8 0004          000000A8  18837          LG    15,168(0,4) ; offset of broker in rd_kafka_mock_connecti*
                                                                                                                           Page  378 
  Active Usings: @REGION_1948_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                on_s
0000CEA0 E330 F0D8 0004          000000D8  18838          LG    3,216(0,15) ; offset of cluster in rd_kafka_mock_broker_*
                                                                s
                                           18839 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           18840 * ***           rd_kafka_mock_error_rtt_t err_rtt;
                                           18841 * ***
                                           18842 * ***           mtx_lock(&mcluster->lock);
0000CEA6 41F0 34B8               000004B8  18843          LA    15,1208(0,3)
0000CEAA E3F0 D0C8 0024          000000C8  18844          STG   15,200(0,13)
0000CEB0 4110 D0C8               000000C8  18845          LA    1,200(0,13)
0000CEB4 E3F0 C0F0 0004          0000CF40  18846          LG    15,@lit_1948_864 ; mtx_lock
0000CEBA                                   18847 @@gen_label1213 DS    0H
0000CEBA 05EF                              18848          BALR  14,15
0000CEBC                                   18849 @@gen_label1214 DS    0H
                                           18850 * ***
                                           18851 * ***           errstack = rd_kafka_mock_error_stack_find(&mconn->brok\
                                           18852 * er->errstacks,
                                           18853 * ***                                                     resp->rkbuf_\
                                           18854 * reqhdr.ApiKey);
0000CEBC E3F0 40A8 0004          000000A8  18855          LG    15,168(0,4) ; offset of broker in rd_kafka_mock_connecti*
                                                                on_s
0000CEC2 41F0 F0C8               000000C8  18856          LA    15,200(0,15)
0000CEC6 E3F0 D0C8 0024          000000C8  18857          STG   15,200(0,13)
0000CECC E3F0 20B8 0015          000000B8  18858          LGH   15,184(0,2)
0000CED2 E3F0 D0D0 0024          000000D0  18859          STG   15,208(0,13)
0000CED8 4110 D0C8               000000C8  18860          LA    1,200(0,13)
0000CEDC E340 C0F8 0004          0000CF48  18861          LG    4,@lit_1948_865 ; rd_kafka_mock_error_stack_find
0000CEE2 B904 00F4                         18862          LGR   15,4
0000CEE6                                   18863 @@gen_label1215 DS    0H
0000CEE6 05EF                              18864          BALR  14,15
0000CEE8                                   18865 @@gen_label1216 DS    0H
                                           18866 * ***           if (((!errstack))) {
0000CEE8 B902 001F                         18867          LTGR  1,15
0000CEEC 4770 C110               0000CF60  18868          BNZ   @L1336
                                           18869 * ***                   errstack = rd_kafka_mock_error_stack_find(
                                           18870 * ***                           &mcluster->errstacks,
                                           18871 * ***                           resp->rkbuf_reqhdr.ApiKey);
0000CEF0 41F0 30F8               000000F8  18872          LA    15,248(0,3)
0000CEF4 E3F0 D0C8 0024          000000C8  18873          STG   15,200(0,13)
0000CEFA E3F0 20B8 0015          000000B8  18874          LGH   15,184(0,2)
0000CF00 E3F0 D0D0 0024          000000D0  18875          STG   15,208(0,13)
0000CF06 4110 D0C8               000000C8  18876          LA    1,200(0,13)
0000CF0A B904 00F4                         18877          LGR   15,4
0000CF0E                                   18878 @@gen_label1218 DS    0H
0000CF0E 05EF                              18879          BALR  14,15
0000CF10                                   18880 @@gen_label1219 DS    0H
                                           18881 * ***                   if (((!errstack))) {
0000CF10 B902 001F                         18882          LTGR  1,15
0000CF14 4770 C110               0000CF60  18883          BNZ   @L1336
                                           18884 * ***                           mtx_unlock(&mcluster->lock);
0000CF18 41F0 34B8               000004B8  18885          LA    15,1208(0,3)
0000CF1C E3F0 D0C8 0024          000000C8  18886          STG   15,200(0,13)
                                                                                                                           Page  379 
  Active Usings: @REGION_1948_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000CF22 4110 D0C8               000000C8  18887          LA    1,200(0,13)
0000CF26 E3F0 C100 0004          0000CF50  18888          LG    15,@lit_1948_867 ; mtx_unlock
0000CF2C                                   18889 @@gen_label1221 DS    0H
0000CF2C 05EF                              18890          BALR  14,15
0000CF2E                                   18891 @@gen_label1222 DS    0H
                                           18892 * ***                           return RD_KAFKA_RESP_ERR_NO_ERROR;
0000CF2E A7F9 0000               00000000  18893          LGHI  15,0        ; 0
0000CF32 47F0 C15A               0000CFAA  18894          B     @ret_lab_1948
0000CF38                                   18895          DS    0D
0000CF38 000000D8                          18896 @FRAMESIZE_1948 DC F'216'
0000CF3C 00000000
0000CF40 0000000000000000                  18897 @lit_1948_864 DC AD(mtx_lock)
0000CF48 000000000000CC08                  18898 @lit_1948_865 DC AD(rd_kafka_mock_error_stack_find)
0000CF50 0000000000000000                  18899 @lit_1948_867 DC AD(mtx_unlock)
0000CF58 000000000000CA70                  18900 @lit_1948_869 DC AD(rd_kafka_mock_error_stack_next)
                                           18901 * ***                   }
                                           18902 * ***           }
0000CF60                                   18903 @L1336   DS    0H
                                           18904 * ***
                                           18905 * ***           err_rtt = rd_kafka_mock_error_stack_next(errstack);
0000CF60 4110 D0B8               000000B8  18906          LA    1,184(0,13)
0000CF64 E310 D0C8 0024          000000C8  18907          STG   1,200(0,13)
0000CF6A E3F0 D0D0 0024          000000D0  18908          STG   15,208(0,13)
0000CF70 4110 D0C8               000000C8  18909          LA    1,200(0,13)
0000CF74 E3F0 C108 0004          0000CF58  18910          LG    15,@lit_1948_869 ; rd_kafka_mock_error_stack_next
0000CF7A                                   18911 @@gen_label1223 DS    0H
0000CF7A 05EF                              18912          BALR  14,15
0000CF7C                                   18913 @@gen_label1224 DS    0H
0000CF7C D20F D0A8 D0B8 000000A8 000000B8  18914          MVC   168(16,13),184(13)
                                           18915 * ***           resp->rkbuf_ts_sent = err_rtt.rtt;
0000CF82 E3F0 D0B0 0004          000000B0  18916          LG    15,176(0,13) ; offset of rtt in rd_kafka_mock_error_rtt_*
                                                                s
0000CF88 E3F0 2158 0024          00000158  18917          STG   15,344(0,2) ; offset of rkbuf_ts_sent in rd_kafka_buf_s
                                           18918 * ***
                                           18919 * ***           mtx_unlock(&mcluster->lock);
0000CF8E 41F0 34B8               000004B8  18920          LA    15,1208(0,3)
0000CF92 E3F0 D0C8 0024          000000C8  18921          STG   15,200(0,13)
0000CF98 4110 D0C8               000000C8  18922          LA    1,200(0,13)
0000CF9C E3F0 C100 0004          0000CF50  18923          LG    15,@lit_1948_867 ; mtx_unlock
0000CFA2                                   18924 @@gen_label1225 DS    0H
0000CFA2 05EF                              18925          BALR  14,15
0000CFA4                                   18926 @@gen_label1226 DS    0H
                                           18927 * ***
                                           18928 * ***           return err_rtt.err;
0000CFA4 E3F0 D0A8 0014          000000A8  18929          LGF   15,168(0,13)
                                           18930 * ***   }
0000CFAA                                   18931 @ret_lab_1948 DS 0H
                                           18932 * * **** Start of Epilogue
                                           18933          DCCEPIL
0000CFAA                                   18934+         ds 0h                                                          01-DCCEP
                                           18935+* Epilog
0000CFAA D707 D088 D088 00000088 00000088  18936+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
                                                                                                                           Page  380 
  Active Usings: @REGION_1948_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000CFB0 E3D0 D080 0004          00000080  18937+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000CFB6 E3C0 D090 0004          00000090  18938+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000CFBC E3B0 C018 0004          00000018  18939+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000CFC2 E3C0 B010 0021          00000010  18940+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000CFC8 E3E0 D008 0004          00000008  18941+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000CFCE EB1C D020 0004          00000020  18942+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000CFD4 078E                              18943+         bcr 8,14                if same dsab, just return              01-DCCEP
0000CFD6 E3F0 D010 0024          00000010  18944+         stg 15,16(0,13)         save return code                       01-DCCEP
0000CFDC E300 D018 0024          00000018  18945+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000CFE2 E3F0 D090 0004          00000090  18946+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000CFE8 E3F0 F018 0004          00000018  18947+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000CFEE 47F0 F040               00000040  18948+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           18949+* End of Epilog
                                           18950 * * **** End of Epilogue
                                           18951          DROP  12
                                           18952 *
                                           18953 *   DSECT for automatic variables in "rd_kafka_mock_next_request_error"
                                           18954 *      (FUNCTION #1948)
                                           18955 *
00000000                00000000 000000B8  18956 @AUTO#rd_kafka_mock_next_request_error DSECT
00000000                                   18957          DS    XL168
000000A8                                   18958 rd_kafka_mock_next_request_error#err_rtt#0 DS 16XL1 ; err_rtt
                                           18959 *
0000CFF2                00000000 00010480  18960 @CODE    CSECT
                                           18961 *
                                           18962 *
                                           18963 *
                                           18964 * ....... start of rd_kafka_mock_clear_request_errors
                                           18965 rd_kafka_mock_clear_request_errors ALIAS X'99846D92818692816D949683926D*
                                                                83938581996D998598A485A2A36D8599999699A2'
0000CFF2                                   18966 @LNAME1655 DS  0H
0000CFF2 00000022                          18967          DC    X'00000022'
0000CFF6 99846D9281869281                  18968          DC    C'rd_kafka_mock_clear_request_erro'
0000D016 99A2                              18969          DC    C'rs'
0000D018 00                                18970          DC    X'00'
                                           18971 rd_kafka_mock_clear_request_errors DCCPRLG CINDEX=1655,BASER=12,FRAME=1*
                                                                92,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1655
                                           18972          macro
                                           18973          dccextrn &m
                                           18974          gblc    &$dccext(1000)
                                           18975          gbla    &$dccexti
                                           18976          lcla    &i
                                           18977 &$dccext(&$dccexti+1) setc    '&m'
                                           18978 &i       seta    1
                                           18979 .loop    aif    (&i gt &$dccexti).around
                                           18980          aif    ('&$dccext(&i)' eq '&m').getout
                                           18981 &i       seta    &i+1
                                           18982          ago     .loop
                                           18983 .around  anop
                                           18984 &$dccexti seta &$dccexti+1
                                           18985          extrn  &m
                                           18986 .getout  anop
                                                                                                                           Page  381 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           18987          mend
0000D020                                   18988+$eye0290    ds    0d                                                    02-DCCCA
0000D020 C4C3C3                            18989+         dc cl3'DCC'                                                    02-DCCCA
0000D023 01                                18990+         dc xl1'01' format one                                          02-DCCCA
0000D024 00000000                          18991+         dc a(0)                                                        02-DCCCA
0000D028 000000000000D092                  18992+         dc ad(@PER_1655)                                               02-DCCCA
0000D030 00000000000000C0                  18993+         dc ad(192)                                                     02-DCCCA
0000D038 0000000000000000                  18994+         dc ad(0)                                                       02-DCCCA
0000D040 0000000000001000                  18995+         dc ad(4096)                                                    02-DCCCA
0000D048 20                                18996+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000D049 03                                18997+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000D04A 03                                18998+         dc al1(3)                                                      02-DCCCA
0000D04B 08                                18999+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000D04C 00                                19000+         dc bl.8'00000000'                                              02-DCCCA
0000D04D 000000                            19001+         dc al3(0)                                                      02-DCCCA
0000D050 000000000000CFF2                  19002+         dc ad(@LNAME1655)                                              02-DCCCA
0000D058                                   19003+         ds 0d                                                          02-DCCCA
0000D058 000000000000D020                  19004+         dc ad($eye0290)                                                02-DCCCA
0000D060 0000000000000000                  19005+         dc ad(0)                                                       02-DCCCA
0000D068                                   19006+         ds    0d                                                       01-DCCPR
                                           19007+         entry rd_kafka_mock_clear_request_errors                       01-DCCPR
0000D068                                   19008+rd_kafka_mock_clear_request_errors ds 0d                                01-DCCPR
0000D068                                   19009+@REGION_1655_1 ds 0h                                                    01-DCCPR
0000D068 EBEC D008 0024          00000008  19010+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000D06E E3E0 D088 0004          00000088  19011+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000D074 E3C0 D090 0004          00000090  19012+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000D07A B904 002E                         19013+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000D07E E3B0 C018 0004          00000018  19014+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000D084 A7EB 00C0               000000C0  19015+         aghi  14,192              increase by frame size               01-DCCPR
0000D088 E3E0 C020 0021          00000020  19016+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000D08E 4720 B020               00000020  19017+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000D092                                   19018+@PER_1655 ds   0h                                                       01-DCCPR
0000D092 EBDE 2080 0024          00000080  19019+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000D098 E3C0 2090 0024          00000090  19020+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000D09E B904 00D2                         19021+         lgr   13,2                set real frame pointer               01-DCCPR
0000D0A2 B904 00CF                         19022+         lgr   12,15               set base reg                         01-DCCPR
                        0000D068           19023+         using @REGION_1655_1,12                                        01-DCCPR
0000D0A6 B904 0031                         19024          LGR   3,1         ; ptr to parm area
                                           19025 * ******* End of Prologue
                                           19026 * *
0000D0AA E320 3000 0004          00000000  19027          LG    2,0(0,3)    ; mcluster
                                           19028 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           19029 * ***
                                           19030 * ***           mtx_lock(&mcluster->lock);
0000D0B0 41F0 24B8               000004B8  19031          LA    15,1208(0,2)
0000D0B4 E3F0 D0B0 0024          000000B0  19032          STG   15,176(0,13)
0000D0BA 4110 D0B0               000000B0  19033          LA    1,176(0,13)
0000D0BE E3F0 C0F8 0004          0000D160  19034          LG    15,@lit_1655_872 ; mtx_lock
0000D0C4                                   19035 @@gen_label1227 DS    0H
0000D0C4 05EF                              19036          BALR  14,15
0000D0C6                                   19037 @@gen_label1228 DS    0H
                                           19038 * ***
                                                                                                                           Page  382 
  Active Usings: @REGION_1655_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19039 * ***           errstack = rd_kafka_mock_error_stack_find(&mcluster->e\
                                           19040 * rrstacks, ApiKey);
0000D0C6 41F0 20F8               000000F8  19041          LA    15,248(0,2)
0000D0CA E3F0 D0B0 0024          000000B0  19042          STG   15,176(0,13)
0000D0D0 E3F0 300E 0015          0000000E  19043          LGH   15,14(0,3)  ; ApiKey
0000D0D6 E3F0 D0B8 0024          000000B8  19044          STG   15,184(0,13)
0000D0DC 4110 D0B0               000000B0  19045          LA    1,176(0,13)
0000D0E0 E3F0 C100 0004          0000D168  19046          LG    15,@lit_1655_873 ; rd_kafka_mock_error_stack_find
0000D0E6                                   19047 @@gen_label1229 DS    0H
0000D0E6 05EF                              19048          BALR  14,15
0000D0E8                                   19049 @@gen_label1230 DS    0H
                                           19050 * ***           if (errstack)
0000D0E8 B902 001F                         19051          LTGR  1,15
0000D0EC 4780 C08E               0000D0F6  19052          BZ    @L1338
                                           19053 * ***                   errstack->cnt = 0;
0000D0F0 E548 F018 0000          00000018  19054          MVGHI 24(15),0    ; offset of cnt in rd_kafka_mock_error_stack*
                                                                _s
0000D0F6                                   19055 @L1338   DS    0H
                                           19056 * ***
                                           19057 * ***           mtx_unlock(&mcluster->lock);
0000D0F6 41F0 24B8               000004B8  19058          LA    15,1208(0,2)
0000D0FA E3F0 D0B0 0024          000000B0  19059          STG   15,176(0,13)
0000D100 4110 D0B0               000000B0  19060          LA    1,176(0,13)
0000D104 E3F0 C108 0004          0000D170  19061          LG    15,@lit_1655_874 ; mtx_unlock
0000D10A                                   19062 @@gen_label1232 DS    0H
0000D10A 05EF                              19063          BALR  14,15
0000D10C                                   19064 @@gen_label1233 DS    0H
                                           19065 * ***   }
0000D10C                                   19066 @ret_lab_1655 DS 0H
                                           19067 * * **** Start of Epilogue
                                           19068          DCCEPIL
0000D10C                                   19069+         ds 0h                                                          01-DCCEP
                                           19070+* Epilog
0000D10C D707 D088 D088 00000088 00000088  19071+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000D112 E3D0 D080 0004          00000080  19072+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000D118 E3C0 D090 0004          00000090  19073+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000D11E E3B0 C018 0004          00000018  19074+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000D124 E3C0 B010 0021          00000010  19075+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000D12A E3E0 D008 0004          00000008  19076+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000D130 EB1C D020 0004          00000020  19077+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000D136 078E                              19078+         bcr 8,14                if same dsab, just return              01-DCCEP
0000D138 E3F0 D010 0024          00000010  19079+         stg 15,16(0,13)         save return code                       01-DCCEP
0000D13E E300 D018 0024          00000018  19080+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000D144 E3F0 D090 0004          00000090  19081+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000D14A E3F0 F018 0004          00000018  19082+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000D150 47F0 F040               00000040  19083+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           19084+* End of Epilog
                                           19085 * * **** End of Epilogue
0000D158                                   19086          DS    0D
0000D158 000000C0                          19087 @FRAMESIZE_1655 DC F'192'
0000D15C 00000000
0000D160 0000000000000000                  19088 @lit_1655_872 DC AD(mtx_lock)
                                                                                                                           Page  383 
  Active Usings: @REGION_1655_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D168 000000000000CC08                  19089 @lit_1655_873 DC AD(rd_kafka_mock_error_stack_find)
0000D170 0000000000000000                  19090 @lit_1655_874 DC AD(mtx_unlock)
                                           19091          DROP  12
                                           19092 *
                                           19093 *   DSECT for automatic variables in "rd_kafka_mock_clear_request_erro
                                           19094 *           rs"
                                           19095 *      (FUNCTION #1655)
                                           19096 *
00000000                00000000 000000A8  19097 @AUTO#rd_kafka_mock_clear_request_errors DSECT
00000000                                   19098          DS    XL168
                                           19099 *
0000D178                00000000 00010480  19100 @CODE    CSECT
                                           19101 *
                                           19102 *
                                           19103 *
                                           19104 * ....... start of rd_kafka_mock_push_request_errors_array
                                           19105 rd_kafka_mock_push_request_errors_array ALIAS X'99846D92818692816D94968*
                                                                3926D97A4A2886D998598A485A2A36D8599999699A26D81999981A8'
0000D178                                   19106 @LNAME1657 DS  0H
0000D178 00000027                          19107          DC    X'00000027'
0000D17C 99846D9281869281                  19108          DC    C'rd_kafka_mock_push_request_error'
0000D19C A26D81999981A8                    19109          DC    C's_array'
0000D1A3 00                                19110          DC    X'00'
                                           19111 rd_kafka_mock_push_request_errors_array DCCPRLG CINDEX=1657,BASER=12,FR*
                                                                AME=192,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1657
                                           19112          macro
                                           19113          dccextrn &m
                                           19114          gblc    &$dccext(1000)
                                           19115          gbla    &$dccexti
                                           19116          lcla    &i
                                           19117 &$dccext(&$dccexti+1) setc    '&m'
                                           19118 &i       seta    1
                                           19119 .loop    aif    (&i gt &$dccexti).around
                                           19120          aif    ('&$dccext(&i)' eq '&m').getout
                                           19121 &i       seta    &i+1
                                           19122          ago     .loop
                                           19123 .around  anop
                                           19124 &$dccexti seta &$dccexti+1
                                           19125          extrn  &m
                                           19126 .getout  anop
                                           19127          mend
0000D1A8                                   19128+$eye0293    ds    0d                                                    02-DCCCA
0000D1A8 C4C3C3                            19129+         dc cl3'DCC'                                                    02-DCCCA
0000D1AB 01                                19130+         dc xl1'01' format one                                          02-DCCCA
0000D1AC 00000000                          19131+         dc a(0)                                                        02-DCCCA
0000D1B0 000000000000D21A                  19132+         dc ad(@PER_1657)                                               02-DCCCA
0000D1B8 00000000000000C0                  19133+         dc ad(192)                                                     02-DCCCA
0000D1C0 0000000000000000                  19134+         dc ad(0)                                                       02-DCCCA
0000D1C8 0000000000001000                  19135+         dc ad(4096)                                                    02-DCCCA
0000D1D0 20                                19136+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000D1D1 03                                19137+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000D1D2 03                                19138+         dc al1(3)                                                      02-DCCCA
                                                                                                                           Page  384 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D1D3 08                                19139+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000D1D4 00                                19140+         dc bl.8'00000000'                                              02-DCCCA
0000D1D5 000000                            19141+         dc al3(0)                                                      02-DCCCA
0000D1D8 000000000000D178                  19142+         dc ad(@LNAME1657)                                              02-DCCCA
0000D1E0                                   19143+         ds 0d                                                          02-DCCCA
0000D1E0 000000000000D1A8                  19144+         dc ad($eye0293)                                                02-DCCCA
0000D1E8 0000000000000000                  19145+         dc ad(0)                                                       02-DCCCA
0000D1F0                                   19146+         ds    0d                                                       01-DCCPR
                                           19147+         entry rd_kafka_mock_push_request_errors_array                  01-DCCPR
0000D1F0                                   19148+rd_kafka_mock_push_request_errors_array ds 0d                           01-DCCPR
0000D1F0                                   19149+@REGION_1657_1 ds 0h                                                    01-DCCPR
0000D1F0 EBEC D008 0024          00000008  19150+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000D1F6 E3E0 D088 0004          00000088  19151+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000D1FC E3C0 D090 0004          00000090  19152+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000D202 B904 002E                         19153+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000D206 E3B0 C018 0004          00000018  19154+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000D20C A7EB 00C0               000000C0  19155+         aghi  14,192              increase by frame size               01-DCCPR
0000D210 E3E0 C020 0021          00000020  19156+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000D216 4720 B020               00000020  19157+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000D21A                                   19158+@PER_1657 ds   0h                                                       01-DCCPR
0000D21A EBDE 2080 0024          00000080  19159+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000D220 E3C0 2090 0024          00000090  19160+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000D226 B904 00D2                         19161+         lgr   13,2                set real frame pointer               01-DCCPR
0000D22A B904 00CF                         19162+         lgr   12,15               set base reg                         01-DCCPR
                        0000D1F0           19163+         using @REGION_1657_1,12                                        01-DCCPR
0000D22E B904 0051                         19164          LGR   5,1         ; ptr to parm area
                                           19165 * ******* End of Prologue
                                           19166 * *
0000D232 E320 5010 0004          00000010  19167          LG    2,16(0,5)   ; cnt
0000D238 E340 5000 0004          00000000  19168          LG    4,0(0,5)    ; mcluster
                                           19169 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           19170 * ***           size_t totcnt;
                                           19171 * ***
                                           19172 * ***           mtx_lock(&mcluster->lock);
0000D23E 41F0 44B8               000004B8  19173          LA    15,1208(0,4)
0000D242 E3F0 D0B0 0024          000000B0  19174          STG   15,176(0,13)
0000D248 4110 D0B0               000000B0  19175          LA    1,176(0,13)
0000D24C E3F0 C0E8 0004          0000D2D8  19176          LG    15,@lit_1657_876 ; mtx_lock
0000D252                                   19177 @@gen_label1234 DS    0H
0000D252 05EF                              19178          BALR  14,15
0000D254                                   19179 @@gen_label1235 DS    0H
                                           19180 * ***
                                           19181 * ***           errstack = rd_kafka_mock_error_stack_get(&mcluster->er\
                                           19182 * rstacks, ApiKey);
0000D254 41F0 40F8               000000F8  19183          LA    15,248(0,4)
0000D258 E3F0 D0B0 0024          000000B0  19184          STG   15,176(0,13)
0000D25E E3F0 500E 0015          0000000E  19185          LGH   15,14(0,5)  ; ApiKey
0000D264 E3F0 D0B8 0024          000000B8  19186          STG   15,184(0,13)
0000D26A 4110 D0B0               000000B0  19187          LA    1,176(0,13)
0000D26E E3F0 C0F0 0004          0000D2E0  19188          LG    15,@lit_1657_877 ; rd_kafka_mock_error_stack_get
0000D274                                   19189 @@gen_label1236 DS    0H
0000D274 05EF                              19190          BALR  14,15
                                                                                                                           Page  385 
  Active Usings: @REGION_1657_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D276                                   19191 @@gen_label1237 DS    0H
0000D276 B904 003F                         19192          LGR   3,15
                                           19193 * ***
                                           19194 * ***           totcnt = errstack->cnt + cnt;
0000D27A B904 00F2                         19195          LGR   15,2
0000D27E E3F0 3018 000A          00000018  19196          ALG   15,24(0,3)
                                           19197 * ***
                                           19198 * ***           if (totcnt > errstack->size) {
0000D284 E3F0 3020 0021          00000020  19199          CLG   15,32(0,3)
0000D28A 47D0 C15C               0000D34C  19200          BNH   @L1343
                                           19201 * ***                   errstack->size = totcnt + 4;
0000D28E A7FB 0004               00000004  19202          AGHI  15,4
0000D292 E3F0 3020 0024          00000020  19203          STG   15,32(0,3)  ; offset of size in rd_kafka_mock_error_stac*
                                                                k_s
                                           19204 * ***                   errstack->errs = rd_realloc(errstack->errs,
                                           19205 * ***                                               errstack->size *
0000D298 E3F0 3028 0004          00000028  19206          LG    15,40(0,3)
0000D29E E3F0 D0B0 0024          000000B0  19207          STG   15,176(0,13)
                                           19208 * ***                                               sizeof(*errstack->\
                                           19209 * errs));
0000D2A4 E3F0 3020 0004          00000020  19210          LG    15,32(0,3)  ; offset of size in rd_kafka_mock_error_stac*
                                                                k_s
0000D2AA EBFF 0004 000D          00000004  19211          SLLG  15,15,4(0)  ; *0x10
0000D2B0 E3F0 D0B8 0024          000000B8  19212          STG   15,184(0,13)
0000D2B6 4110 D0B0               000000B0  19213          LA    1,176(0,13)
0000D2BA E3F0 C0F8 0004          0000D2E8  19214          LG    15,@lit_1657_878 ; rd_realloc
0000D2C0                                   19215 @@gen_label1239 DS    0H
0000D2C0 05EF                              19216          BALR  14,15
0000D2C2                                   19217 @@gen_label1240 DS    0H
0000D2C2 E3F0 3028 0024          00000028  19218          STG   15,40(0,3)
                                           19219 * ***           }
0000D2C8                                   19220 @L1339   DS    0H
                                           19221 * ***
                                           19222 * ***           while (cnt > 0) {
0000D2C8 47F0 C15C               0000D34C  19223          B     @L1343
0000D2D0                                   19224          DS    0D
0000D2D0 000000C0                          19225 @FRAMESIZE_1657 DC F'192'
0000D2D4 00000000
0000D2D8 0000000000000000                  19226 @lit_1657_876 DC AD(mtx_lock)
0000D2E0 000000000000CCC0                  19227 @lit_1657_877 DC AD(rd_kafka_mock_error_stack_get)
0000D2E8 0000000000000A00                  19228 @lit_1657_878 DC AD(rd_realloc)
0000D2F0 0000000000000000                  19229 @lit_1657_879 DC AD(mtx_unlock)
0000D2F8                                   19230 @L1342   DS    0H
                                           19231 * ***                   errstack->errs[errstack->cnt].err = errors[--c\
                                           19232 * nt];
0000D2F8 E3F0 3018 0004          00000018  19233          LG    15,24(0,3)  ; offset of cnt in rd_kafka_mock_error_stack*
                                                                _s
0000D2FE E310 3028 0004          00000028  19234          LG    1,40(0,3)   ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000D304 EBFF 0004 000D          00000004  19235          SLLG  15,15,4(0)  ; *0x10
0000D30A E360 5018 0004          00000018  19236          LG    6,24(0,5)   ; errors
0000D310 A72B FFFF               0000FFFF  19237          AGHI  2,-1
                                                                                                                           Page  386 
  Active Usings: @REGION_1657_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D314 EB72 0002 000D          00000002  19238          SLLG  7,2,2(0)    ; *0x4
0000D31A 5867 6000               00000000  19239          L     6,0(7,6)
0000D31E 506F 1000               00000000  19240          ST    6,0(15,1)
                                           19241 * ***                   errstack->errs[errstack->cnt++].rtt = 0;
0000D322 E3F0 3028 0004          00000028  19242          LG    15,40(0,3)  ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000D328 E310 3018 0004          00000018  19243          LG    1,24(0,3)
0000D32E B904 0061                         19244          LGR   6,1
0000D332 A76B 0001               00000001  19245          AGHI  6,1
0000D336 E360 3018 0024          00000018  19246          STG   6,24(0,3)
0000D33C EB11 0004 000D          00000004  19247          SLLG  1,1,4(0)    ; *0x10
0000D342 41F1 F000               00000000  19248          LA    15,0(1,15)
0000D346 E548 F008 0000          00000008  19249          MVGHI 8(15),0     ; offset of rtt in rd_kafka_mock_error_rtt_s
                                           19250 * ***           }
0000D34C                                   19251 @L1343   DS    0H
0000D34C C22E 0000 0000                    19252          CLGFI 2,X'00000000'
0000D352 4720 C108               0000D2F8  19253          BH    @L1342
                                           19254 * ***
                                           19255 * ***           mtx_unlock(&mcluster->lock);
0000D356 41F0 44B8               000004B8  19256          LA    15,1208(0,4)
0000D35A E3F0 D0B0 0024          000000B0  19257          STG   15,176(0,13)
0000D360 4110 D0B0               000000B0  19258          LA    1,176(0,13)
0000D364 E3F0 C100 0004          0000D2F0  19259          LG    15,@lit_1657_879 ; mtx_unlock
0000D36A                                   19260 @@gen_label1242 DS    0H
0000D36A 05EF                              19261          BALR  14,15
0000D36C                                   19262 @@gen_label1243 DS    0H
                                           19263 * ***   }
0000D36C                                   19264 @ret_lab_1657 DS 0H
                                           19265 * * **** Start of Epilogue
                                           19266          DCCEPIL
0000D36C                                   19267+         ds 0h                                                          01-DCCEP
                                           19268+* Epilog
0000D36C D707 D088 D088 00000088 00000088  19269+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000D372 E3D0 D080 0004          00000080  19270+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000D378 E3C0 D090 0004          00000090  19271+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000D37E E3B0 C018 0004          00000018  19272+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000D384 E3C0 B010 0021          00000010  19273+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000D38A E3E0 D008 0004          00000008  19274+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000D390 EB1C D020 0004          00000020  19275+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000D396 078E                              19276+         bcr 8,14                if same dsab, just return              01-DCCEP
0000D398 E3F0 D010 0024          00000010  19277+         stg 15,16(0,13)         save return code                       01-DCCEP
0000D39E E300 D018 0024          00000018  19278+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000D3A4 E3F0 D090 0004          00000090  19279+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000D3AA E3F0 F018 0004          00000018  19280+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000D3B0 47F0 F040               00000040  19281+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           19282+* End of Epilog
                                           19283 * * **** End of Epilogue
                                           19284          DROP  12
                                           19285 *
                                           19286 *   DSECT for automatic variables in "rd_kafka_mock_push_request_error
                                           19287 *           s_array"
                                           19288 *      (FUNCTION #1657)
                                                                                                                           Page  387 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19289 *
00000000                00000000 000000B0  19290 @AUTO#rd_kafka_mock_push_request_errors_array DSECT
00000000                                   19291          DS    XL168
000000A8                                   19292 rd_kafka_mock_push_request_errors_array#totcnt#0 DS 8XL1 ; totcnt
                                           19293 *
0000D3B4                00000000 00010480  19294 @CODE    CSECT
                                           19295 *
                                           19296 *
                                           19297 *
                                           19298 * ....... start of rd_kafka_mock_push_request_errors
                                           19299 rd_kafka_mock_push_request_errors ALIAS X'99846D92818692816D949683926D9*
                                                                7A4A2886D998598A485A2A36D8599999699A2'
0000D3B4                                   19300 @LNAME1656 DS  0H
0000D3B4 00000021                          19301          DC    X'00000021'
0000D3B8 99846D9281869281                  19302          DC    C'rd_kafka_mock_push_request_error'
0000D3D8 A2                                19303          DC    C's'
0000D3D9 00                                19304          DC    X'00'
                                           19305 rd_kafka_mock_push_request_errors DCCPRLG CINDEX=1656,BASER=12,FRAME=20*
                                                                8,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1656
                                           19306          macro
                                           19307          dccextrn &m
                                           19308          gblc    &$dccext(1000)
                                           19309          gbla    &$dccexti
                                           19310          lcla    &i
                                           19311 &$dccext(&$dccexti+1) setc    '&m'
                                           19312 &i       seta    1
                                           19313 .loop    aif    (&i gt &$dccexti).around
                                           19314          aif    ('&$dccext(&i)' eq '&m').getout
                                           19315 &i       seta    &i+1
                                           19316          ago     .loop
                                           19317 .around  anop
                                           19318 &$dccexti seta &$dccexti+1
                                           19319          extrn  &m
                                           19320 .getout  anop
                                           19321          mend
0000D3E0                                   19322+$eye0296    ds    0d                                                    02-DCCCA
0000D3E0 C4C3C3                            19323+         dc cl3'DCC'                                                    02-DCCCA
0000D3E3 01                                19324+         dc xl1'01' format one                                          02-DCCCA
0000D3E4 00000000                          19325+         dc a(0)                                                        02-DCCCA
0000D3E8 000000000000D452                  19326+         dc ad(@PER_1656)                                               02-DCCCA
0000D3F0 00000000000000D0                  19327+         dc ad(208)                                                     02-DCCCA
0000D3F8 0000000000000000                  19328+         dc ad(0)                                                       02-DCCCA
0000D400 0000000000001000                  19329+         dc ad(4096)                                                    02-DCCCA
0000D408 20                                19330+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000D409 03                                19331+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000D40A 03                                19332+         dc al1(3)                                                      02-DCCCA
0000D40B 08                                19333+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000D40C 00                                19334+         dc bl.8'00000000'                                              02-DCCCA
0000D40D 000000                            19335+         dc al3(0)                                                      02-DCCCA
0000D410 000000000000D3B4                  19336+         dc ad(@LNAME1656)                                              02-DCCCA
0000D418                                   19337+         ds 0d                                                          02-DCCCA
0000D418 000000000000D3E0                  19338+         dc ad($eye0296)                                                02-DCCCA
                                                                                                                           Page  388 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D420 0000000000000000                  19339+         dc ad(0)                                                       02-DCCCA
0000D428                                   19340+         ds    0d                                                       01-DCCPR
                                           19341+         entry rd_kafka_mock_push_request_errors                        01-DCCPR
0000D428                                   19342+rd_kafka_mock_push_request_errors ds 0d                                 01-DCCPR
0000D428                                   19343+@REGION_1656_1 ds 0h                                                    01-DCCPR
0000D428 EBEC D008 0024          00000008  19344+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000D42E E3E0 D088 0004          00000088  19345+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000D434 E3C0 D090 0004          00000090  19346+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000D43A B904 002E                         19347+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000D43E E3B0 C018 0004          00000018  19348+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000D444 A7EB 00D0               000000D0  19349+         aghi  14,208              increase by frame size               01-DCCPR
0000D448 E3E0 C020 0021          00000020  19350+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000D44E 4720 B020               00000020  19351+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000D452                                   19352+@PER_1656 ds   0h                                                       01-DCCPR
0000D452 EBDE 2080 0024          00000080  19353+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000D458 E3C0 2090 0024          00000090  19354+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000D45E B904 00D2                         19355+         lgr   13,2                set real frame pointer               01-DCCPR
0000D462 B904 00CF                         19356+         lgr   12,15               set base reg                         01-DCCPR
                        0000D428           19357+         using @REGION_1656_1,12                                        01-DCCPR
0000D466 B904 0031                         19358          LGR   3,1         ; ptr to parm area
                                           19359 * ******* End of Prologue
                                           19360 * *
                                           19361 * ***           va_list ap;
                                           19362 * ***           rd_kafka_resp_err_t *errors = __builtin_alloca(sizeof(\
                                           19363 * *errors) * cnt);
0000D46A E3F0 3010 0004          00000010  19364          LG    15,16(0,3)  ; cnt
0000D470 EBFF 0002 000D          00000002  19365          SLLG  15,15,2(0)  ; *0x4
0000D476 E3F0 D0B0 0024          000000B0  19366          STG   15,176(0,13)
0000D47C 4110 D0B0               000000B0  19367          LA    1,176(0,13)
0000D480 E3F0 C078 0004          0000D4A0  19368          LG    15,@lit_1656_881 ; @@ALLOCA
0000D486                                   19369 @@gen_label1244 DS    0H
0000D486 05EF                              19370          BALR  14,15
0000D488                                   19371 @@gen_label1245 DS    0H
0000D488 B904 001F                         19372          LGR   1,15
                                           19373 * ***           size_t i;
                                           19374 * ***
                                           19375 * ***           ((ap) = (va_list)&(cnt) + ((__builtin_classify_type(cn\
                                           19376 * t) == 1 || __builtin_classify_type(cnt) == 2 || __builtin_classify_t\
                                           19377 * ype(cnt) == 4) ? sizeof(cnt) : (((sizeof(cnt) + sizeof(long) - 1) & \
                                           19378 * ~(sizeof(long) -1)))));
0000D48C 41F0 3018               00000018  19379          LA    15,24(0,3)
                                           19380 * ***           for (i = 0 ; i < cnt ; i++)
0000D490 A729 0000               00000000  19381          LGHI  2,0         ; 0
0000D494 47F0 C0A2               0000D4CA  19382          B     @L1345
0000D498                                   19383          DS    0D
0000D498 000000D0                          19384 @FRAMESIZE_1656 DC F'208'
0000D49C 00000000
0000D4A0 0000000000000000                  19385 @lit_1656_881 DC AD(@@ALLOCA)
0000D4A8 000000000000D1F0                  19386 @lit_1656_884 DC AD(rd_kafka_mock_push_request_errors_array)
0000D4B0                                   19387 @L1344   DS    0H
                                           19388 * ***                   errors[i] = (*(rd_kafka_resp_err_t *)((ap) += \
                                           19389 * (((sizeof(rd_kafka_resp_err_t) + sizeof(long) - 1) & ~(sizeof(long) \
                                                                                                                           Page  389 
  Active Usings: @REGION_1656_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19390 * -1))), (ap) - ((__builtin_classify_type(rd_kafka_resp_err_t) == 1 ||\
                                           19391 *  __builtin_classify_type(rd_kafka_resp_err_t) == 2 || __builtin_clas\
                                           19392 * sify_type(rd_kafka_resp_err_t) == 4) ? sizeof(rd_kafka_resp_err_t) :\
                                           19393 *  (((sizeof(rd_kafka_resp_err_t) + sizeof(long) - 1) & ~(sizeof(long)\
                                           19394 *  -1))))));
0000D4B0 EB42 0002 000D          00000002  19395          SLLG  4,2,2(0)    ; *0x4
0000D4B6 41F0 F008               00000008  19396          LA    15,8(0,15)
0000D4BA A759 FFFC               0000FFFC  19397          LGHI  5,-4        ; -4
0000D4BE 5855 F000               00000000  19398          L     5,0(5,15)
0000D4C2 5054 1000               00000000  19399          ST    5,0(4,1)
0000D4C6 A72B 0001               00000001  19400          AGHI  2,1
0000D4CA                                   19401 @L1345   DS    0H
0000D4CA E320 3010 0021          00000010  19402          CLG   2,16(0,3)
0000D4D0 4740 C088               0000D4B0  19403          BL    @L1344
                                           19404 * ***
                                           19405 * ***           rd_kafka_mock_push_request_errors_array(mcluster, ApiK\
                                           19406 * ey, cnt, errors);
0000D4D4 E3F0 3000 0004          00000000  19407          LG    15,0(0,3)   ; mcluster
0000D4DA E3F0 D0B0 0024          000000B0  19408          STG   15,176(0,13)
0000D4E0 E3F0 300E 0015          0000000E  19409          LGH   15,14(0,3)  ; ApiKey
0000D4E6 E3F0 D0B8 0024          000000B8  19410          STG   15,184(0,13)
0000D4EC E3F0 3010 0004          00000010  19411          LG    15,16(0,3)  ; cnt
0000D4F2 E3F0 D0C0 0024          000000C0  19412          STG   15,192(0,13)
0000D4F8 E310 D0C8 0024          000000C8  19413          STG   1,200(0,13)
0000D4FE 4110 D0B0               000000B0  19414          LA    1,176(0,13)
0000D502 E3F0 C080 0004          0000D4A8  19415          LG    15,@lit_1656_884 ; rd_kafka_mock_push_request_errors_arr*
                                                                ay
0000D508                                   19416 @@gen_label1247 DS    0H
0000D508 05EF                              19417          BALR  14,15
0000D50A                                   19418 @@gen_label1248 DS    0H
                                           19419 * ***   }
0000D50A                                   19420 @ret_lab_1656 DS 0H
                                           19421 * * **** Start of Epilogue
                                           19422          DCCEPIL
0000D50A                                   19423+         ds 0h                                                          01-DCCEP
                                           19424+* Epilog
0000D50A D707 D088 D088 00000088 00000088  19425+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000D510 E3D0 D080 0004          00000080  19426+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000D516 E3C0 D090 0004          00000090  19427+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000D51C E3B0 C018 0004          00000018  19428+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000D522 E3C0 B010 0021          00000010  19429+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000D528 E3E0 D008 0004          00000008  19430+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000D52E EB1C D020 0004          00000020  19431+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000D534 078E                              19432+         bcr 8,14                if same dsab, just return              01-DCCEP
0000D536 E3F0 D010 0024          00000010  19433+         stg 15,16(0,13)         save return code                       01-DCCEP
0000D53C E300 D018 0024          00000018  19434+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000D542 E3F0 D090 0004          00000090  19435+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000D548 E3F0 F018 0004          00000018  19436+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000D54E 47F0 F040               00000040  19437+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           19438+* End of Epilog
                                           19439 * * **** End of Epilogue
                                           19440          DROP  12
                                                                                                                           Page  390 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19441 *
                                           19442 *   DSECT for automatic variables in "rd_kafka_mock_push_request_error
                                           19443 *           s"
                                           19444 *      (FUNCTION #1656)
                                           19445 *
00000000                00000000 000000B0  19446 @AUTO#rd_kafka_mock_push_request_errors DSECT
00000000                                   19447          DS    XL168
000000A8                                   19448 rd_kafka_mock_push_request_errors#i#0 DS 8XL1 ; i
                                           19449 *
0000D552                00000000 00010480  19450 @CODE    CSECT
                                           19451 *
                                           19452 *
                                           19453 *
                                           19454 * ....... start of rd_kafka_mock_broker_push_request_error_rtts
                                           19455 rd_kafka_mock_broker_push_request_error_rtts ALIAS X'99846D92818692816D*
                                                                949683926D8299969285996D97A4A2886D998598A485A2A36D859999*
                                                                96996D99A3A3A2'
0000D552                                   19456 @LNAME1658 DS  0H
0000D552 0000002C                          19457          DC    X'0000002C'
0000D556 99846D9281869281                  19458          DC    C'rd_kafka_mock_broker_push_reques'
0000D576 A36D85999996996D                  19459          DC    C't_error_rtts'
0000D582 00                                19460          DC    X'00'
                                           19461 rd_kafka_mock_broker_push_request_error_rtts DCCPRLG CINDEX=1658,BASER=*
                                                                12,FRAME=192,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1658
                                           19462          macro
                                           19463          dccextrn &m
                                           19464          gblc    &$dccext(1000)
                                           19465          gbla    &$dccexti
                                           19466          lcla    &i
                                           19467 &$dccext(&$dccexti+1) setc    '&m'
                                           19468 &i       seta    1
                                           19469 .loop    aif    (&i gt &$dccexti).around
                                           19470          aif    ('&$dccext(&i)' eq '&m').getout
                                           19471 &i       seta    &i+1
                                           19472          ago     .loop
                                           19473 .around  anop
                                           19474 &$dccexti seta &$dccexti+1
                                           19475          extrn  &m
                                           19476 .getout  anop
                                           19477          mend
0000D588                                   19478+$eye0299    ds    0d                                                    02-DCCCA
0000D588 C4C3C3                            19479+         dc cl3'DCC'                                                    02-DCCCA
0000D58B 01                                19480+         dc xl1'01' format one                                          02-DCCCA
0000D58C 00000000                          19481+         dc a(0)                                                        02-DCCCA
0000D590 000000000000D5FA                  19482+         dc ad(@PER_1658)                                               02-DCCCA
0000D598 00000000000000C0                  19483+         dc ad(192)                                                     02-DCCCA
0000D5A0 0000000000000000                  19484+         dc ad(0)                                                       02-DCCCA
0000D5A8 0000000000001000                  19485+         dc ad(4096)                                                    02-DCCCA
0000D5B0 20                                19486+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000D5B1 03                                19487+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000D5B2 03                                19488+         dc al1(3)                                                      02-DCCCA
0000D5B3 08                                19489+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
                                                                                                                           Page  391 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D5B4 00                                19490+         dc bl.8'00000000'                                              02-DCCCA
0000D5B5 000000                            19491+         dc al3(0)                                                      02-DCCCA
0000D5B8 000000000000D552                  19492+         dc ad(@LNAME1658)                                              02-DCCCA
0000D5C0                                   19493+         ds 0d                                                          02-DCCCA
0000D5C0 000000000000D588                  19494+         dc ad($eye0299)                                                02-DCCCA
0000D5C8 0000000000000000                  19495+         dc ad(0)                                                       02-DCCCA
0000D5D0                                   19496+         ds    0d                                                       01-DCCPR
                                           19497+         entry rd_kafka_mock_broker_push_request_error_rtts             01-DCCPR
0000D5D0                                   19498+rd_kafka_mock_broker_push_request_error_rtts ds 0d                      01-DCCPR
0000D5D0                                   19499+@REGION_1658_1 ds 0h                                                    01-DCCPR
0000D5D0 EBEC D008 0024          00000008  19500+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000D5D6 E3E0 D088 0004          00000088  19501+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000D5DC E3C0 D090 0004          00000090  19502+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000D5E2 B904 002E                         19503+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000D5E6 E3B0 C018 0004          00000018  19504+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000D5EC A7EB 00C0               000000C0  19505+         aghi  14,192              increase by frame size               01-DCCPR
0000D5F0 E3E0 C020 0021          00000020  19506+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000D5F6 4720 B020               00000020  19507+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000D5FA                                   19508+@PER_1658 ds   0h                                                       01-DCCPR
0000D5FA EBDE 2080 0024          00000080  19509+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000D600 E3C0 2090 0024          00000090  19510+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000D606 B904 00D2                         19511+         lgr   13,2                set real frame pointer               01-DCCPR
0000D60A B904 00CF                         19512+         lgr   12,15               set base reg                         01-DCCPR
                        0000D5D0           19513+         using @REGION_1658_1,12                                        01-DCCPR
0000D60E B904 0041                         19514          LGR   4,1         ; ptr to parm area
                                           19515 * ******* End of Prologue
                                           19516 * *
0000D612 E320 4000 0004          00000000  19517          LG    2,0(0,4)    ; mcluster
                                           19518 * ***           rd_kafka_mock_broker_t *mrkb;
                                           19519 * ***           va_list ap;
                                           19520 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           19521 * ***           size_t totcnt;
                                           19522 * ***
                                           19523 * ***           mtx_lock(&mcluster->lock);
0000D618 41F0 24B8               000004B8  19524          LA    15,1208(0,2)
0000D61C E3F0 D0B0 0024          000000B0  19525          STG   15,176(0,13)
0000D622 4110 D0B0               000000B0  19526          LA    1,176(0,13)
0000D626 E3F0 C0B0 0004          0000D680  19527          LG    15,@lit_1658_886 ; mtx_lock
0000D62C                                   19528 @@gen_label1249 DS    0H
0000D62C 05EF                              19529          BALR  14,15
0000D62E                                   19530 @@gen_label1250 DS    0H
                                           19531 * ***
                                           19532 * ***           if (!(mrkb = rd_kafka_mock_broker_find(mcluster, broke\
                                           19533 * r_id))) {
0000D62E E320 D0B0 0024          000000B0  19534          STG   2,176(0,13)
0000D634 E3F0 400C 0014          0000000C  19535          LGF   15,12(0,4)  ; broker_id
0000D63A E3F0 D0B8 0024          000000B8  19536          STG   15,184(0,13)
0000D640 4110 D0B0               000000B0  19537          LA    1,176(0,13)
0000D644 E3F0 C0B8 0004          0000D688  19538          LG    15,@lit_1658_887 ; rd_kafka_mock_broker_find
0000D64A                                   19539 @@gen_label1251 DS    0H
0000D64A 05EF                              19540          BALR  14,15
0000D64C                                   19541 @@gen_label1252 DS    0H
                                                                                                                           Page  392 
  Active Usings: @REGION_1658_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D64C B902 001F                         19542          LTGR  1,15
0000D650 4770 C0D8               0000D6A8  19543          BNZ   @L1348
                                           19544 * ***                   mtx_unlock(&mcluster->lock);
0000D654 41F0 24B8               000004B8  19545          LA    15,1208(0,2)
0000D658 E3F0 D0B0 0024          000000B0  19546          STG   15,176(0,13)
0000D65E 4110 D0B0               000000B0  19547          LA    1,176(0,13)
0000D662 E3F0 C0C0 0004          0000D690  19548          LG    15,@lit_1658_888 ; mtx_unlock
0000D668                                   19549 @@gen_label1254 DS    0H
0000D668 05EF                              19550          BALR  14,15
0000D66A                                   19551 @@gen_label1255 DS    0H
                                           19552 * ***                   return RD_KAFKA_RESP_ERR__UNKNOWN_BROKER;
0000D66A A7F9 FF6E               0000FF6E  19553          LGHI  15,-146     ; -146
0000D66E 47F0 C1E4               0000D7B4  19554          B     @ret_lab_1658
0000D678                                   19555          DS    0D
0000D678 000000C0                          19556 @FRAMESIZE_1658 DC F'192'
0000D67C 00000000
0000D680 0000000000000000                  19557 @lit_1658_886 DC AD(mtx_lock)
0000D688 0000000000003638                  19558 @lit_1658_887 DC AD(rd_kafka_mock_broker_find)
0000D690 0000000000000000                  19559 @lit_1658_888 DC AD(mtx_unlock)
0000D698 000000000000CCC0                  19560 @lit_1658_890 DC AD(rd_kafka_mock_error_stack_get)
0000D6A0 0000000000000A00                  19561 @lit_1658_891 DC AD(rd_realloc)
                                           19562 * ***           }
0000D6A8                                   19563 @L1348   DS    0H
                                           19564 * ***
                                           19565 * ***           errstack = rd_kafka_mock_error_stack_get(&mrkb->errsta\
                                           19566 * cks, ApiKey);
0000D6A8 41F0 F0C8               000000C8  19567          LA    15,200(0,15)
0000D6AC E3F0 D0B0 0024          000000B0  19568          STG   15,176(0,13)
0000D6B2 E3F0 4016 0015          00000016  19569          LGH   15,22(0,4)  ; ApiKey
0000D6B8 E3F0 D0B8 0024          000000B8  19570          STG   15,184(0,13)
0000D6BE 4110 D0B0               000000B0  19571          LA    1,176(0,13)
0000D6C2 E3F0 C0C8 0004          0000D698  19572          LG    15,@lit_1658_890 ; rd_kafka_mock_error_stack_get
0000D6C8                                   19573 @@gen_label1256 DS    0H
0000D6C8 05EF                              19574          BALR  14,15
0000D6CA                                   19575 @@gen_label1257 DS    0H
0000D6CA B904 003F                         19576          LGR   3,15
                                           19577 * ***
                                           19578 * ***           totcnt = errstack->cnt + cnt;
0000D6CE E3F0 3018 0004          00000018  19579          LG    15,24(0,3)  ; offset of cnt in rd_kafka_mock_error_stack*
                                                                _s
0000D6D4 E3F0 4018 000A          00000018  19580          ALG   15,24(0,4)
                                           19581 * ***
                                           19582 * ***           if (totcnt > errstack->size) {
0000D6DA E3F0 3020 0021          00000020  19583          CLG   15,32(0,3)
0000D6E0 47D0 C14E               0000D71E  19584          BNH   @L1349
                                           19585 * ***                   errstack->size = totcnt + 4;
0000D6E4 A7FB 0004               00000004  19586          AGHI  15,4
0000D6E8 E3F0 3020 0024          00000020  19587          STG   15,32(0,3)  ; offset of size in rd_kafka_mock_error_stac*
                                                                k_s
                                           19588 * ***                   errstack->errs = rd_realloc(errstack->errs,
                                           19589 * ***                                               errstack->size *
0000D6EE E3F0 3028 0004          00000028  19590          LG    15,40(0,3)
                                                                                                                           Page  393 
  Active Usings: @REGION_1658_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D6F4 E3F0 D0B0 0024          000000B0  19591          STG   15,176(0,13)
                                           19592 * ***                                               sizeof(*errstack->\
                                           19593 * errs));
0000D6FA E3F0 3020 0004          00000020  19594          LG    15,32(0,3)  ; offset of size in rd_kafka_mock_error_stac*
                                                                k_s
0000D700 EBFF 0004 000D          00000004  19595          SLLG  15,15,4(0)  ; *0x10
0000D706 E3F0 D0B8 0024          000000B8  19596          STG   15,184(0,13)
0000D70C 4110 D0B0               000000B0  19597          LA    1,176(0,13)
0000D710 E3F0 C0D0 0004          0000D6A0  19598          LG    15,@lit_1658_891 ; rd_realloc
0000D716                                   19599 @@gen_label1259 DS    0H
0000D716 05EF                              19600          BALR  14,15
0000D718                                   19601 @@gen_label1260 DS    0H
0000D718 E3F0 3028 0024          00000028  19602          STG   15,40(0,3)
                                           19603 * ***           }
0000D71E                                   19604 @L1349   DS    0H
                                           19605 * ***
                                           19606 * ***           ((ap) = (va_list)&(cnt) + ((__builtin_classify_type(cn\
                                           19607 * t) == 1 || __builtin_classify_type(cnt) == 2 || __builtin_classify_t\
                                           19608 * ype(cnt) == 4) ? sizeof(cnt) : (((sizeof(cnt) + sizeof(long) - 1) & \
                                           19609 * ~(sizeof(long) -1)))));
0000D71E 41F0 4020               00000020  19610          LA    15,32(0,4)
                                           19611 * ***           while (cnt-- > 0) {
0000D722 47F0 C1AC               0000D77C  19612          B     @L1353
0000D726                                   19613 @L1352   DS    0H
                                           19614 * ***                   errstack->errs[errstack->cnt].err =
0000D726 E310 3018 0004          00000018  19615          LG    1,24(0,3)   ; offset of cnt in rd_kafka_mock_error_stack*
                                                                _s
0000D72C E350 3028 0004          00000028  19616          LG    5,40(0,3)   ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000D732 EB11 0004 000D          00000004  19617          SLLG  1,1,4(0)    ; *0x10
                                           19618 * ***                           (*(rd_kafka_resp_err_t *)((ap) += (((s\
                                           19619 * izeof(rd_kafka_resp_err_t) + sizeof(long) - 1) & ~(sizeof(long) -1))\
                                           19620 * ), (ap) - ((__builtin_classify_type(rd_kafka_resp_err_t) == 1 || __b\
                                           19621 * uiltin_classify_type(rd_kafka_resp_err_t) == 2 || __builtin_classify\
                                           19622 * _type(rd_kafka_resp_err_t) == 4) ? sizeof(rd_kafka_resp_err_t) : (((\
                                           19623 * sizeof(rd_kafka_resp_err_t) + sizeof(long) - 1) & ~(sizeof(long) -1)\
                                           19624 * )))));
0000D738 41F0 F008               00000008  19625          LA    15,8(0,15)
0000D73C A769 FFFC               0000FFFC  19626          LGHI  6,-4        ; -4
0000D740 5876 F000               00000000  19627          L     7,0(6,15)
0000D744 5071 5000               00000000  19628          ST    7,0(1,5)
                                           19629 * ***                   errstack->errs[errstack->cnt++].rtt =
0000D748 E310 3028 0004          00000028  19630          LG    1,40(0,3)   ; offset of errs in rd_kafka_mock_error_stac*
                                                                k_s
0000D74E E350 3018 0004          00000018  19631          LG    5,24(0,3)
0000D754 B904 0075                         19632          LGR   7,5
0000D758 A77B 0001               00000001  19633          AGHI  7,1
0000D75C E370 3018 0024          00000018  19634          STG   7,24(0,3)
0000D762 EB55 0004 000D          00000004  19635          SLLG  5,5,4(0)    ; *0x10
                                           19636 * ***                           ((rd_ts_t)(*(int *)((ap) += (((sizeof(\
                                           19637 * int) + sizeof(long) - 1) & ~(sizeof(long) -1))), (ap) - ((__builtin_\
                                           19638 * classify_type(int) == 1 || __builtin_classify_type(int) == 2 || __bu\
                                                                                                                           Page  394 
  Active Usings: @REGION_1658_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19639 * iltin_classify_type(int) == 4) ? sizeof(int) : (((sizeof(int) + size\
                                           19640 * of(long) - 1) & ~(sizeof(long) -1))))))) * 1000;
0000D768 41F0 F008               00000008  19641          LA    15,8(0,15)
0000D76C E366 F000 0014          00000000  19642          LGF   6,0(6,15)
0000D772 A76D 03E8               000003E8  19643          MGHI  6,1000
0000D776 E365 1008 0024          00000008  19644          STG   6,8(5,1)
                                           19645 * ***           }
0000D77C                                   19646 @L1353   DS    0H
0000D77C E310 4018 0004          00000018  19647          LG    1,24(0,4)   ; cnt
0000D782 B904 0051                         19648          LGR   5,1
0000D786 A75B FFFF               0000FFFF  19649          AGHI  5,-1
0000D78A E350 4018 0024          00000018  19650          STG   5,24(0,4)   ; cnt
0000D790 C21E 0000 0000                    19651          CLGFI 1,X'00000000'
0000D796 4720 C156               0000D726  19652          BH    @L1352
                                           19653 * ***           ;
                                           19654 * ***
                                           19655 * ***           mtx_unlock(&mcluster->lock);
0000D79A 41F0 24B8               000004B8  19656          LA    15,1208(0,2)
0000D79E E3F0 D0B0 0024          000000B0  19657          STG   15,176(0,13)
0000D7A4 4110 D0B0               000000B0  19658          LA    1,176(0,13)
0000D7A8 E3F0 C0C0 0004          0000D690  19659          LG    15,@lit_1658_888 ; mtx_unlock
0000D7AE                                   19660 @@gen_label1262 DS    0H
0000D7AE 05EF                              19661          BALR  14,15
0000D7B0                                   19662 @@gen_label1263 DS    0H
                                           19663 * ***
                                           19664 * ***           return RD_KAFKA_RESP_ERR_NO_ERROR;
0000D7B0 A7F9 0000               00000000  19665          LGHI  15,0        ; 0
                                           19666 * ***   }
0000D7B4                                   19667 @ret_lab_1658 DS 0H
                                           19668 * * **** Start of Epilogue
                                           19669          DCCEPIL
0000D7B4                                   19670+         ds 0h                                                          01-DCCEP
                                           19671+* Epilog
0000D7B4 D707 D088 D088 00000088 00000088  19672+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000D7BA E3D0 D080 0004          00000080  19673+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000D7C0 E3C0 D090 0004          00000090  19674+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000D7C6 E3B0 C018 0004          00000018  19675+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000D7CC E3C0 B010 0021          00000010  19676+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000D7D2 E3E0 D008 0004          00000008  19677+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000D7D8 EB1C D020 0004          00000020  19678+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000D7DE 078E                              19679+         bcr 8,14                if same dsab, just return              01-DCCEP
0000D7E0 E3F0 D010 0024          00000010  19680+         stg 15,16(0,13)         save return code                       01-DCCEP
0000D7E6 E300 D018 0024          00000018  19681+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000D7EC E3F0 D090 0004          00000090  19682+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000D7F2 E3F0 F018 0004          00000018  19683+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000D7F8 47F0 F040               00000040  19684+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           19685+* End of Epilog
                                           19686 * * **** End of Epilogue
                                           19687          DROP  12
                                           19688 *
                                           19689 *   DSECT for automatic variables in "rd_kafka_mock_broker_push_reques
                                           19690 *           t_error_rtts"
                                                                                                                           Page  395 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19691 *      (FUNCTION #1658)
                                           19692 *
00000000                00000000 000000B0  19693 @AUTO#rd_kafka_mock_broker_push_request_error_rtts DSECT
00000000                                   19694          DS    XL168
000000A8                                   19695 rd_kafka_mock_broker_push_request_error_rtts#totcnt#0 DS 8XL1 ; totcnt
                                           19696 *
0000D7FC                00000000 00010480  19697 @CODE    CSECT
                                           19698 *
                                           19699 *
                                           19700 *
                                           19701 * ....... start of rd_kafka_mock_topic_set_error
                                           19702 rd_kafka_mock_topic_set_error ALIAS X'99846D92818692816D949683926DA3969*
                                                                789836DA285A36D8599999699'
0000D7FC                                   19703 @LNAME1659 DS  0H
0000D7FC 0000001D                          19704          DC    X'0000001D'
0000D800 99846D9281869281                  19705          DC    C'rd_kafka_mock_topic_set_error'
0000D81D 00                                19706          DC    X'00'
                                           19707 rd_kafka_mock_topic_set_error DCCPRLG CINDEX=1659,BASER=12,FRAME=200,EN*
                                                                TRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1659
                                           19708          macro
                                           19709          dccextrn &m
                                           19710          gblc    &$dccext(1000)
                                           19711          gbla    &$dccexti
                                           19712          lcla    &i
                                           19713 &$dccext(&$dccexti+1) setc    '&m'
                                           19714 &i       seta    1
                                           19715 .loop    aif    (&i gt &$dccexti).around
                                           19716          aif    ('&$dccext(&i)' eq '&m').getout
                                           19717 &i       seta    &i+1
                                           19718          ago     .loop
                                           19719 .around  anop
                                           19720 &$dccexti seta &$dccexti+1
                                           19721          extrn  &m
                                           19722 .getout  anop
                                           19723          mend
0000D820                                   19724+$eye0302    ds    0d                                                    02-DCCCA
0000D820 C4C3C3                            19725+         dc cl3'DCC'                                                    02-DCCCA
0000D823 01                                19726+         dc xl1'01' format one                                          02-DCCCA
0000D824 00000000                          19727+         dc a(0)                                                        02-DCCCA
0000D828 000000000000D892                  19728+         dc ad(@PER_1659)                                               02-DCCCA
0000D830 00000000000000C8                  19729+         dc ad(200)                                                     02-DCCCA
0000D838 0000000000000000                  19730+         dc ad(0)                                                       02-DCCCA
0000D840 0000000000001000                  19731+         dc ad(4096)                                                    02-DCCCA
0000D848 20                                19732+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000D849 03                                19733+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000D84A 03                                19734+         dc al1(3)                                                      02-DCCCA
0000D84B 08                                19735+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000D84C 00                                19736+         dc bl.8'00000000'                                              02-DCCCA
0000D84D 000000                            19737+         dc al3(0)                                                      02-DCCCA
0000D850 000000000000D7FC                  19738+         dc ad(@LNAME1659)                                              02-DCCCA
0000D858                                   19739+         ds 0d                                                          02-DCCCA
0000D858 000000000000D820                  19740+         dc ad($eye0302)                                                02-DCCCA
                                                                                                                           Page  396 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D860 0000000000000000                  19741+         dc ad(0)                                                       02-DCCCA
0000D868                                   19742+         ds    0d                                                       01-DCCPR
                                           19743+         entry rd_kafka_mock_topic_set_error                            01-DCCPR
0000D868                                   19744+rd_kafka_mock_topic_set_error ds 0d                                     01-DCCPR
0000D868                                   19745+@REGION_1659_1 ds 0h                                                    01-DCCPR
0000D868 EBEC D008 0024          00000008  19746+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000D86E E3E0 D088 0004          00000088  19747+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000D874 E3C0 D090 0004          00000090  19748+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000D87A B904 002E                         19749+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000D87E E3B0 C018 0004          00000018  19750+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000D884 A7EB 00C8               000000C8  19751+         aghi  14,200              increase by frame size               01-DCCPR
0000D888 E3E0 C020 0021          00000020  19752+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000D88E 4720 B020               00000020  19753+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000D892                                   19754+@PER_1659 ds   0h                                                       01-DCCPR
0000D892 EBDE 2080 0024          00000080  19755+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000D898 E3C0 2090 0024          00000090  19756+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000D89E B904 00D2                         19757+         lgr   13,2                set real frame pointer               01-DCCPR
0000D8A2 B904 00CF                         19758+         lgr   12,15               set base reg                         01-DCCPR
                        0000D868           19759+         using @REGION_1659_1,12                                        01-DCCPR
0000D8A6 B904 0031                         19760          LGR   3,1         ; ptr to parm area
                                           19761 * ******* End of Prologue
                                           19762 * *
                                           19763 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           19764 * KAFKA_OP_MOCK);
0000D8AA D707 D0B0 D0B0 000000B0 000000B0  19765          XC    176(8,13),176(13)
0000D8B0 E548 D0B8 002D          000000B8  19766          MVGHI 184(13),45
0000D8B6 4110 D0B0               000000B0  19767          LA    1,176(0,13)
0000D8BA E3F0 C120 0004          0000D988  19768          LG    15,@lit_1659_897 ; rd_kafka_op_new0
0000D8C0                                   19769 @@gen_label1264 DS    0H
0000D8C0 05EF                              19770          BALR  14,15
0000D8C2                                   19771 @@gen_label1265 DS    0H
0000D8C2 B904 002F                         19772          LGR   2,15
                                           19773 * ***
                                           19774 * ***           rko->rko_u.mock.name = rd_strdup(topic);
0000D8C6 E3F0 3008 0004          00000008  19775          LG    15,8(0,3)   ; topic
0000D8CC E3F0 D0B0 0024          000000B0  19776          STG   15,176(0,13)
0000D8D2 4110 D0B0               000000B0  19777          LA    1,176(0,13)
0000D8D6 E3F0 C128 0004          0000D990  19778          LG    15,@lit_1659_898 ; rd_strdup
0000D8DC                                   19779 @@gen_label1266 DS    0H
0000D8DC 05EF                              19780          BALR  14,15
0000D8DE                                   19781 @@gen_label1267 DS    0H
0000D8DE E3F0 2078 0024          00000078  19782          STG   15,120(0,2)
                                           19783 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_TOPIC_SET_ERRO\
                                           19784 * R;
0000D8E4 E54C 2070 0000          00000070  19785          MVHI  112(2),0    ; offset of rko_u in rd_kafka_op_s
                                           19786 * ***           rko->rko_u.mock.err = err;
0000D8EA 58F0 3014               00000014  19787          L     15,20(0,3)  ; err
0000D8EE 50F0 2074               00000074  19788          ST    15,116(0,2) ; offset of err in 0000081
                                           19789 * ***
                                           19790 * ***           rko = rd_kafka_op_req(mcluster->ops, rko, -1);
0000D8F2 E3F0 3000 0004          00000000  19791          LG    15,0(0,3)   ; mcluster
0000D8F8 E3F0 F0B8 0004          000000B8  19792          LG    15,184(0,15)
                                                                                                                           Page  397 
  Active Usings: @REGION_1659_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000D8FE E3F0 D0B0 0024          000000B0  19793          STG   15,176(0,13)
0000D904 E320 D0B8 0024          000000B8  19794          STG   2,184(0,13)
0000D90A E548 D0C0 FFFF          000000C0  19795          MVGHI 192(13),-1
0000D910 4110 D0B0               000000B0  19796          LA    1,176(0,13)
0000D914 E3F0 C130 0004          0000D998  19797          LG    15,@lit_1659_899 ; rd_kafka_op_req
0000D91A                                   19798 @@gen_label1268 DS    0H
0000D91A 05EF                              19799          BALR  14,15
0000D91C                                   19800 @@gen_label1269 DS    0H
0000D91C B902 002F                         19801          LTGR  2,15        ; rko
                                           19802 * ***           if (rko)
0000D920 4780 C0CE               0000D936  19803          BZ    @L1354
                                           19804 * ***                   rd_kafka_op_destroy(rko);
0000D924 E320 D0B0 0024          000000B0  19805          STG   2,176(0,13)
0000D92A 4110 D0B0               000000B0  19806          LA    1,176(0,13)
0000D92E E3F0 C138 0004          0000D9A0  19807          LG    15,@lit_1659_900 ; rd_kafka_op_destroy
0000D934                                   19808 @@gen_label1271 DS    0H
0000D934 05EF                              19809          BALR  14,15
0000D936                                   19810 @@gen_label1272 DS    0H
0000D936                                   19811 @L1354   DS    0H
                                           19812 * ***   }
0000D936                                   19813 @ret_lab_1659 DS 0H
                                           19814 * * **** Start of Epilogue
                                           19815          DCCEPIL
0000D936                                   19816+         ds 0h                                                          01-DCCEP
                                           19817+* Epilog
0000D936 D707 D088 D088 00000088 00000088  19818+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000D93C E3D0 D080 0004          00000080  19819+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000D942 E3C0 D090 0004          00000090  19820+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000D948 E3B0 C018 0004          00000018  19821+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000D94E E3C0 B010 0021          00000010  19822+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000D954 E3E0 D008 0004          00000008  19823+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000D95A EB1C D020 0004          00000020  19824+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000D960 078E                              19825+         bcr 8,14                if same dsab, just return              01-DCCEP
0000D962 E3F0 D010 0024          00000010  19826+         stg 15,16(0,13)         save return code                       01-DCCEP
0000D968 E300 D018 0024          00000018  19827+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000D96E E3F0 D090 0004          00000090  19828+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000D974 E3F0 F018 0004          00000018  19829+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000D97A 47F0 F040               00000040  19830+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           19831+* End of Epilog
                                           19832 * * **** End of Epilogue
0000D980                                   19833          DS    0D
0000D980 000000C8                          19834 @FRAMESIZE_1659 DC F'200'
0000D984 00000000
0000D988 0000000000000000                  19835 @lit_1659_897 DC AD(rd_kafka_op_new0)
0000D990 0000000000000C80                  19836 @lit_1659_898 DC AD(rd_strdup)
0000D998 0000000000000000                  19837 @lit_1659_899 DC AD(rd_kafka_op_req)
0000D9A0 0000000000000000                  19838 @lit_1659_900 DC AD(rd_kafka_op_destroy)
                                           19839          DROP  12
                                           19840 *
                                           19841 *   DSECT for automatic variables in "rd_kafka_mock_topic_set_error"
                                           19842 *      (FUNCTION #1659)
                                           19843 *
                                                                                                                           Page  398 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00000000                00000000 000000A8  19844 @AUTO#rd_kafka_mock_topic_set_error DSECT
00000000                                   19845          DS    XL168
                                           19846 *
0000D9A8                00000000 00010480  19847 @CODE    CSECT
                                           19848 *
                                           19849 *
                                           19850 *
                                           19851 * ....... start of rd_kafka_mock_topic_create
                                           19852 rd_kafka_mock_topic_create ALIAS X'99846D92818692816D949683926DA3969789*
                                                                836D83998581A385'
0000D9A8                                   19853 @LNAME1660 DS  0H
0000D9A8 0000001A                          19854          DC    X'0000001A'
0000D9AC 99846D9281869281                  19855          DC    C'rd_kafka_mock_topic_create'
0000D9C6 00                                19856          DC    X'00'
                                           19857 rd_kafka_mock_topic_create DCCPRLG CINDEX=1660,BASER=12,FRAME=200,ENTRY*
                                                                =YES,ARCH=ZARCH,LNAMEADDR=@LNAME1660
                                           19858          macro
                                           19859          dccextrn &m
                                           19860          gblc    &$dccext(1000)
                                           19861          gbla    &$dccexti
                                           19862          lcla    &i
                                           19863 &$dccext(&$dccexti+1) setc    '&m'
                                           19864 &i       seta    1
                                           19865 .loop    aif    (&i gt &$dccexti).around
                                           19866          aif    ('&$dccext(&i)' eq '&m').getout
                                           19867 &i       seta    &i+1
                                           19868          ago     .loop
                                           19869 .around  anop
                                           19870 &$dccexti seta &$dccexti+1
                                           19871          extrn  &m
                                           19872 .getout  anop
                                           19873          mend
0000D9C8                                   19874+$eye0305    ds    0d                                                    02-DCCCA
0000D9C8 C4C3C3                            19875+         dc cl3'DCC'                                                    02-DCCCA
0000D9CB 01                                19876+         dc xl1'01' format one                                          02-DCCCA
0000D9CC 00000000                          19877+         dc a(0)                                                        02-DCCCA
0000D9D0 000000000000DA3A                  19878+         dc ad(@PER_1660)                                               02-DCCCA
0000D9D8 00000000000000C8                  19879+         dc ad(200)                                                     02-DCCCA
0000D9E0 0000000000000000                  19880+         dc ad(0)                                                       02-DCCCA
0000D9E8 0000000000001000                  19881+         dc ad(4096)                                                    02-DCCCA
0000D9F0 20                                19882+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000D9F1 03                                19883+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000D9F2 03                                19884+         dc al1(3)                                                      02-DCCCA
0000D9F3 08                                19885+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000D9F4 00                                19886+         dc bl.8'00000000'                                              02-DCCCA
0000D9F5 000000                            19887+         dc al3(0)                                                      02-DCCCA
0000D9F8 000000000000D9A8                  19888+         dc ad(@LNAME1660)                                              02-DCCCA
0000DA00                                   19889+         ds 0d                                                          02-DCCCA
0000DA00 000000000000D9C8                  19890+         dc ad($eye0305)                                                02-DCCCA
0000DA08 0000000000000000                  19891+         dc ad(0)                                                       02-DCCCA
0000DA10                                   19892+         ds    0d                                                       01-DCCPR
                                           19893+         entry rd_kafka_mock_topic_create                               01-DCCPR
                                                                                                                           Page  399 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DA10                                   19894+rd_kafka_mock_topic_create ds 0d                                        01-DCCPR
0000DA10                                   19895+@REGION_1660_1 ds 0h                                                    01-DCCPR
0000DA10 EBEC D008 0024          00000008  19896+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000DA16 E3E0 D088 0004          00000088  19897+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000DA1C E3C0 D090 0004          00000090  19898+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000DA22 B904 002E                         19899+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000DA26 E3B0 C018 0004          00000018  19900+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000DA2C A7EB 00C8               000000C8  19901+         aghi  14,200              increase by frame size               01-DCCPR
0000DA30 E3E0 C020 0021          00000020  19902+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000DA36 4720 B020               00000020  19903+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000DA3A                                   19904+@PER_1660 ds   0h                                                       01-DCCPR
0000DA3A EBDE 2080 0024          00000080  19905+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000DA40 E3C0 2090 0024          00000090  19906+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000DA46 B904 00D2                         19907+         lgr   13,2                set real frame pointer               01-DCCPR
0000DA4A B904 00CF                         19908+         lgr   12,15               set base reg                         01-DCCPR
                        0000DA10           19909+         using @REGION_1660_1,12                                        01-DCCPR
0000DA4E B904 0031                         19910          LGR   3,1         ; ptr to parm area
                                           19911 * ******* End of Prologue
                                           19912 * *
                                           19913 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           19914 * KAFKA_OP_MOCK);
0000DA52 D707 D0B0 D0B0 000000B0 000000B0  19915          XC    176(8,13),176(13)
0000DA58 E548 D0B8 002D          000000B8  19916          MVGHI 184(13),45
0000DA5E 4110 D0B0               000000B0  19917          LA    1,176(0,13)
0000DA62 E3F0 C130 0004          0000DB40  19918          LG    15,@lit_1660_902 ; rd_kafka_op_new0
0000DA68                                   19919 @@gen_label1273 DS    0H
0000DA68 05EF                              19920          BALR  14,15
0000DA6A                                   19921 @@gen_label1274 DS    0H
0000DA6A B904 002F                         19922          LGR   2,15
                                           19923 * ***
                                           19924 * ***           rko->rko_u.mock.name = rd_strdup(topic);
0000DA6E E3F0 3008 0004          00000008  19925          LG    15,8(0,3)   ; topic
0000DA74 E3F0 D0B0 0024          000000B0  19926          STG   15,176(0,13)
0000DA7A 4110 D0B0               000000B0  19927          LA    1,176(0,13)
0000DA7E E3F0 C138 0004          0000DB48  19928          LG    15,@lit_1660_903 ; rd_strdup
0000DA84                                   19929 @@gen_label1275 DS    0H
0000DA84 05EF                              19930          BALR  14,15
0000DA86                                   19931 @@gen_label1276 DS    0H
0000DA86 E3F0 2078 0024          00000078  19932          STG   15,120(0,2)
                                           19933 * ***           rko->rko_u.mock.lo = partition_cnt;
0000DA8C E3F0 3014 0014          00000014  19934          LGF   15,20(0,3)  ; partition_cnt
0000DA92 E3F0 2090 0024          00000090  19935          STG   15,144(0,2) ; offset of lo in 0000081
                                           19936 * ***           rko->rko_u.mock.hi = replication_factor;
0000DA98 E3F0 301C 0014          0000001C  19937          LGF   15,28(0,3)  ; replication_factor
0000DA9E E3F0 2098 0024          00000098  19938          STG   15,152(0,2) ; offset of hi in 0000081
                                           19939 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_TOPIC_CREATE;
0000DAA4 E54C 2070 0001          00000070  19940          MVHI  112(2),1    ; offset of rko_u in rd_kafka_op_s
                                           19941 * ***
                                           19942 * ***           return rd_kafka_op_err_destroy(
                                           19943 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000DAAA E3F0 3000 0004          00000000  19944          LG    15,0(0,3)   ; mcluster
0000DAB0 E3F0 F0B8 0004          000000B8  19945          LG    15,184(0,15)
                                                                                                                           Page  400 
  Active Usings: @REGION_1660_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DAB6 E3F0 D0B0 0024          000000B0  19946          STG   15,176(0,13)
0000DABC E320 D0B8 0024          000000B8  19947          STG   2,184(0,13)
0000DAC2 E548 D0C0 FFFF          000000C0  19948          MVGHI 192(13),-1
0000DAC8 4110 D0B0               000000B0  19949          LA    1,176(0,13)
0000DACC E3F0 C140 0004          0000DB50  19950          LG    15,@lit_1660_904 ; rd_kafka_op_req
0000DAD2                                   19951 @@gen_label1277 DS    0H
0000DAD2 05EF                              19952          BALR  14,15
0000DAD4                                   19953 @@gen_label1278 DS    0H
0000DAD4 E3F0 D0B0 0024          000000B0  19954          STG   15,176(0,13)
0000DADA 4110 D0B0               000000B0  19955          LA    1,176(0,13)
0000DADE E3F0 C148 0004          0000DB58  19956          LG    15,@lit_1660_905 ; rd_kafka_op_err_destroy
0000DAE4                                   19957 @@gen_label1279 DS    0H
0000DAE4 05EF                              19958          BALR  14,15
0000DAE6                                   19959 @@gen_label1280 DS    0H
0000DAE6 B914 00FF                         19960          LGFR  15,15
                                           19961 * ***   }
                                           19962 * * **** Start of Epilogue
                                           19963          DCCEPIL
0000DAEA                                   19964+         ds 0h                                                          01-DCCEP
                                           19965+* Epilog
0000DAEA D707 D088 D088 00000088 00000088  19966+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000DAF0 E3D0 D080 0004          00000080  19967+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000DAF6 E3C0 D090 0004          00000090  19968+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000DAFC E3B0 C018 0004          00000018  19969+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000DB02 E3C0 B010 0021          00000010  19970+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000DB08 E3E0 D008 0004          00000008  19971+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000DB0E EB1C D020 0004          00000020  19972+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000DB14 078E                              19973+         bcr 8,14                if same dsab, just return              01-DCCEP
0000DB16 E3F0 D010 0024          00000010  19974+         stg 15,16(0,13)         save return code                       01-DCCEP
0000DB1C E300 D018 0024          00000018  19975+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000DB22 E3F0 D090 0004          00000090  19976+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000DB28 E3F0 F018 0004          00000018  19977+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000DB2E 47F0 F040               00000040  19978+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           19979+* End of Epilog
                                           19980 * * **** End of Epilogue
0000DB38                                   19981          DS    0D
0000DB38 000000C8                          19982 @FRAMESIZE_1660 DC F'200'
0000DB3C 00000000
0000DB40 0000000000000000                  19983 @lit_1660_902 DC AD(rd_kafka_op_new0)
0000DB48 0000000000000C80                  19984 @lit_1660_903 DC AD(rd_strdup)
0000DB50 0000000000000000                  19985 @lit_1660_904 DC AD(rd_kafka_op_req)
0000DB58 0000000000000000                  19986 @lit_1660_905 DC AD(rd_kafka_op_err_destroy)
                                           19987          DROP  12
                                           19988 *
                                           19989 *   DSECT for automatic variables in "rd_kafka_mock_topic_create"
                                           19990 *      (FUNCTION #1660)
                                           19991 *
00000000                00000000 000000A8  19992 @AUTO#rd_kafka_mock_topic_create DSECT
00000000                                   19993          DS    XL168
                                           19994 *
0000DB60                00000000 00010480  19995 @CODE    CSECT
                                           19996 *
                                                                                                                           Page  401 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           19997 *
                                           19998 *
                                           19999 * ....... start of rd_kafka_mock_partition_set_leader
                                           20000 rd_kafka_mock_partition_set_leader ALIAS X'99846D92818692816D949683926D*
                                                                978199A389A38996956DA285A36D938581848599'
0000DB60                                   20001 @LNAME1661 DS  0H
0000DB60 00000022                          20002          DC    X'00000022'
0000DB64 99846D9281869281                  20003          DC    C'rd_kafka_mock_partition_set_lead'
0000DB84 8599                              20004          DC    C'er'
0000DB86 00                                20005          DC    X'00'
                                           20006 rd_kafka_mock_partition_set_leader DCCPRLG CINDEX=1661,BASER=12,FRAME=2*
                                                                00,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1661
                                           20007          macro
                                           20008          dccextrn &m
                                           20009          gblc    &$dccext(1000)
                                           20010          gbla    &$dccexti
                                           20011          lcla    &i
                                           20012 &$dccext(&$dccexti+1) setc    '&m'
                                           20013 &i       seta    1
                                           20014 .loop    aif    (&i gt &$dccexti).around
                                           20015          aif    ('&$dccext(&i)' eq '&m').getout
                                           20016 &i       seta    &i+1
                                           20017          ago     .loop
                                           20018 .around  anop
                                           20019 &$dccexti seta &$dccexti+1
                                           20020          extrn  &m
                                           20021 .getout  anop
                                           20022          mend
0000DB88                                   20023+$eye0308    ds    0d                                                    02-DCCCA
0000DB88 C4C3C3                            20024+         dc cl3'DCC'                                                    02-DCCCA
0000DB8B 01                                20025+         dc xl1'01' format one                                          02-DCCCA
0000DB8C 00000000                          20026+         dc a(0)                                                        02-DCCCA
0000DB90 000000000000DBFA                  20027+         dc ad(@PER_1661)                                               02-DCCCA
0000DB98 00000000000000C8                  20028+         dc ad(200)                                                     02-DCCCA
0000DBA0 0000000000000000                  20029+         dc ad(0)                                                       02-DCCCA
0000DBA8 0000000000001000                  20030+         dc ad(4096)                                                    02-DCCCA
0000DBB0 20                                20031+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000DBB1 03                                20032+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000DBB2 03                                20033+         dc al1(3)                                                      02-DCCCA
0000DBB3 08                                20034+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000DBB4 00                                20035+         dc bl.8'00000000'                                              02-DCCCA
0000DBB5 000000                            20036+         dc al3(0)                                                      02-DCCCA
0000DBB8 000000000000DB60                  20037+         dc ad(@LNAME1661)                                              02-DCCCA
0000DBC0                                   20038+         ds 0d                                                          02-DCCCA
0000DBC0 000000000000DB88                  20039+         dc ad($eye0308)                                                02-DCCCA
0000DBC8 0000000000000000                  20040+         dc ad(0)                                                       02-DCCCA
0000DBD0                                   20041+         ds    0d                                                       01-DCCPR
                                           20042+         entry rd_kafka_mock_partition_set_leader                       01-DCCPR
0000DBD0                                   20043+rd_kafka_mock_partition_set_leader ds 0d                                01-DCCPR
0000DBD0                                   20044+@REGION_1661_1 ds 0h                                                    01-DCCPR
0000DBD0 EBEC D008 0024          00000008  20045+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000DBD6 E3E0 D088 0004          00000088  20046+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
                                                                                                                           Page  402 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DBDC E3C0 D090 0004          00000090  20047+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000DBE2 B904 002E                         20048+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000DBE6 E3B0 C018 0004          00000018  20049+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000DBEC A7EB 00C8               000000C8  20050+         aghi  14,200              increase by frame size               01-DCCPR
0000DBF0 E3E0 C020 0021          00000020  20051+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000DBF6 4720 B020               00000020  20052+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000DBFA                                   20053+@PER_1661 ds   0h                                                       01-DCCPR
0000DBFA EBDE 2080 0024          00000080  20054+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000DC00 E3C0 2090 0024          00000090  20055+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000DC06 B904 00D2                         20056+         lgr   13,2                set real frame pointer               01-DCCPR
0000DC0A B904 00CF                         20057+         lgr   12,15               set base reg                         01-DCCPR
                        0000DBD0           20058+         using @REGION_1661_1,12                                        01-DCCPR
0000DC0E B904 0031                         20059          LGR   3,1         ; ptr to parm area
                                           20060 * ******* End of Prologue
                                           20061 * *
                                           20062 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20063 * KAFKA_OP_MOCK);
0000DC12 D707 D0B0 D0B0 000000B0 000000B0  20064          XC    176(8,13),176(13)
0000DC18 E548 D0B8 002D          000000B8  20065          MVGHI 184(13),45
0000DC1E 4110 D0B0               000000B0  20066          LA    1,176(0,13)
0000DC22 E3F0 C128 0004          0000DCF8  20067          LG    15,@lit_1661_907 ; rd_kafka_op_new0
0000DC28                                   20068 @@gen_label1281 DS    0H
0000DC28 05EF                              20069          BALR  14,15
0000DC2A                                   20070 @@gen_label1282 DS    0H
0000DC2A B904 002F                         20071          LGR   2,15
                                           20072 * ***
                                           20073 * ***           rko->rko_u.mock.name = rd_strdup(topic);
0000DC2E E3F0 3008 0004          00000008  20074          LG    15,8(0,3)   ; topic
0000DC34 E3F0 D0B0 0024          000000B0  20075          STG   15,176(0,13)
0000DC3A 4110 D0B0               000000B0  20076          LA    1,176(0,13)
0000DC3E E3F0 C130 0004          0000DD00  20077          LG    15,@lit_1661_908 ; rd_strdup
0000DC44                                   20078 @@gen_label1283 DS    0H
0000DC44 05EF                              20079          BALR  14,15
0000DC46                                   20080 @@gen_label1284 DS    0H
0000DC46 E3F0 2078 0024          00000078  20081          STG   15,120(0,2)
                                           20082 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_PART_SET_LEADE\
                                           20083 * R;
0000DC4C E54C 2070 0002          00000070  20084          MVHI  112(2),2    ; offset of rko_u in rd_kafka_op_s
                                           20085 * ***           rko->rko_u.mock.partition = partition;
0000DC52 58F0 3014               00000014  20086          L     15,20(0,3)  ; partition
0000DC56 50F0 2088               00000088  20087          ST    15,136(0,2) ; offset of partition in 0000081
                                           20088 * ***           rko->rko_u.mock.broker_id = broker_id;
0000DC5A 58F0 301C               0000001C  20089          L     15,28(0,3)  ; broker_id
0000DC5E 50F0 208C               0000008C  20090          ST    15,140(0,2) ; offset of broker_id in 0000081
                                           20091 * ***
                                           20092 * ***           return rd_kafka_op_err_destroy(
                                           20093 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000DC62 E3F0 3000 0004          00000000  20094          LG    15,0(0,3)   ; mcluster
0000DC68 E3F0 F0B8 0004          000000B8  20095          LG    15,184(0,15)
0000DC6E E3F0 D0B0 0024          000000B0  20096          STG   15,176(0,13)
0000DC74 E320 D0B8 0024          000000B8  20097          STG   2,184(0,13)
0000DC7A E548 D0C0 FFFF          000000C0  20098          MVGHI 192(13),-1
                                                                                                                           Page  403 
  Active Usings: @REGION_1661_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DC80 4110 D0B0               000000B0  20099          LA    1,176(0,13)
0000DC84 E3F0 C138 0004          0000DD08  20100          LG    15,@lit_1661_909 ; rd_kafka_op_req
0000DC8A                                   20101 @@gen_label1285 DS    0H
0000DC8A 05EF                              20102          BALR  14,15
0000DC8C                                   20103 @@gen_label1286 DS    0H
0000DC8C E3F0 D0B0 0024          000000B0  20104          STG   15,176(0,13)
0000DC92 4110 D0B0               000000B0  20105          LA    1,176(0,13)
0000DC96 E3F0 C140 0004          0000DD10  20106          LG    15,@lit_1661_910 ; rd_kafka_op_err_destroy
0000DC9C                                   20107 @@gen_label1287 DS    0H
0000DC9C 05EF                              20108          BALR  14,15
0000DC9E                                   20109 @@gen_label1288 DS    0H
0000DC9E B914 00FF                         20110          LGFR  15,15
                                           20111 * ***   }
                                           20112 * * **** Start of Epilogue
                                           20113          DCCEPIL
0000DCA2                                   20114+         ds 0h                                                          01-DCCEP
                                           20115+* Epilog
0000DCA2 D707 D088 D088 00000088 00000088  20116+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000DCA8 E3D0 D080 0004          00000080  20117+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000DCAE E3C0 D090 0004          00000090  20118+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000DCB4 E3B0 C018 0004          00000018  20119+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000DCBA E3C0 B010 0021          00000010  20120+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000DCC0 E3E0 D008 0004          00000008  20121+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000DCC6 EB1C D020 0004          00000020  20122+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000DCCC 078E                              20123+         bcr 8,14                if same dsab, just return              01-DCCEP
0000DCCE E3F0 D010 0024          00000010  20124+         stg 15,16(0,13)         save return code                       01-DCCEP
0000DCD4 E300 D018 0024          00000018  20125+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000DCDA E3F0 D090 0004          00000090  20126+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000DCE0 E3F0 F018 0004          00000018  20127+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000DCE6 47F0 F040               00000040  20128+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           20129+* End of Epilog
                                           20130 * * **** End of Epilogue
0000DCF0                                   20131          DS    0D
0000DCF0 000000C8                          20132 @FRAMESIZE_1661 DC F'200'
0000DCF4 00000000
0000DCF8 0000000000000000                  20133 @lit_1661_907 DC AD(rd_kafka_op_new0)
0000DD00 0000000000000C80                  20134 @lit_1661_908 DC AD(rd_strdup)
0000DD08 0000000000000000                  20135 @lit_1661_909 DC AD(rd_kafka_op_req)
0000DD10 0000000000000000                  20136 @lit_1661_910 DC AD(rd_kafka_op_err_destroy)
                                           20137          DROP  12
                                           20138 *
                                           20139 *   DSECT for automatic variables in "rd_kafka_mock_partition_set_lead
                                           20140 *           er"
                                           20141 *      (FUNCTION #1661)
                                           20142 *
00000000                00000000 000000A8  20143 @AUTO#rd_kafka_mock_partition_set_leader DSECT
00000000                                   20144          DS    XL168
                                           20145 *
0000DD18                00000000 00010480  20146 @CODE    CSECT
                                           20147 *
                                           20148 *
                                           20149 *
                                                                                                                           Page  404 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20150 * ....... start of rd_kafka_mock_partition_set_follower
                                           20151 rd_kafka_mock_partition_set_follower ALIAS X'99846D92818692816D94968392*
                                                                6D978199A389A38996956DA285A36D8696939396A68599'
0000DD18                                   20152 @LNAME1662 DS  0H
0000DD18 00000024                          20153          DC    X'00000024'
0000DD1C 99846D9281869281                  20154          DC    C'rd_kafka_mock_partition_set_foll'
0000DD3C 96A68599                          20155          DC    C'ower'
0000DD40 00                                20156          DC    X'00'
                                           20157 rd_kafka_mock_partition_set_follower DCCPRLG CINDEX=1662,BASER=12,FRAME*
                                                                =200,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1662
                                           20158          macro
                                           20159          dccextrn &m
                                           20160          gblc    &$dccext(1000)
                                           20161          gbla    &$dccexti
                                           20162          lcla    &i
                                           20163 &$dccext(&$dccexti+1) setc    '&m'
                                           20164 &i       seta    1
                                           20165 .loop    aif    (&i gt &$dccexti).around
                                           20166          aif    ('&$dccext(&i)' eq '&m').getout
                                           20167 &i       seta    &i+1
                                           20168          ago     .loop
                                           20169 .around  anop
                                           20170 &$dccexti seta &$dccexti+1
                                           20171          extrn  &m
                                           20172 .getout  anop
                                           20173          mend
0000DD48                                   20174+$eye0311    ds    0d                                                    02-DCCCA
0000DD48 C4C3C3                            20175+         dc cl3'DCC'                                                    02-DCCCA
0000DD4B 01                                20176+         dc xl1'01' format one                                          02-DCCCA
0000DD4C 00000000                          20177+         dc a(0)                                                        02-DCCCA
0000DD50 000000000000DDBA                  20178+         dc ad(@PER_1662)                                               02-DCCCA
0000DD58 00000000000000C8                  20179+         dc ad(200)                                                     02-DCCCA
0000DD60 0000000000000000                  20180+         dc ad(0)                                                       02-DCCCA
0000DD68 0000000000001000                  20181+         dc ad(4096)                                                    02-DCCCA
0000DD70 20                                20182+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000DD71 03                                20183+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000DD72 03                                20184+         dc al1(3)                                                      02-DCCCA
0000DD73 08                                20185+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000DD74 00                                20186+         dc bl.8'00000000'                                              02-DCCCA
0000DD75 000000                            20187+         dc al3(0)                                                      02-DCCCA
0000DD78 000000000000DD18                  20188+         dc ad(@LNAME1662)                                              02-DCCCA
0000DD80                                   20189+         ds 0d                                                          02-DCCCA
0000DD80 000000000000DD48                  20190+         dc ad($eye0311)                                                02-DCCCA
0000DD88 0000000000000000                  20191+         dc ad(0)                                                       02-DCCCA
0000DD90                                   20192+         ds    0d                                                       01-DCCPR
                                           20193+         entry rd_kafka_mock_partition_set_follower                     01-DCCPR
0000DD90                                   20194+rd_kafka_mock_partition_set_follower ds 0d                              01-DCCPR
0000DD90                                   20195+@REGION_1662_1 ds 0h                                                    01-DCCPR
0000DD90 EBEC D008 0024          00000008  20196+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000DD96 E3E0 D088 0004          00000088  20197+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000DD9C E3C0 D090 0004          00000090  20198+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000DDA2 B904 002E                         20199+         lgr   2,14                copy addr of our savearea            01-DCCPR
                                                                                                                           Page  405 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DDA6 E3B0 C018 0004          00000018  20200+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000DDAC A7EB 00C8               000000C8  20201+         aghi  14,200              increase by frame size               01-DCCPR
0000DDB0 E3E0 C020 0021          00000020  20202+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000DDB6 4720 B020               00000020  20203+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000DDBA                                   20204+@PER_1662 ds   0h                                                       01-DCCPR
0000DDBA EBDE 2080 0024          00000080  20205+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000DDC0 E3C0 2090 0024          00000090  20206+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000DDC6 B904 00D2                         20207+         lgr   13,2                set real frame pointer               01-DCCPR
0000DDCA B904 00CF                         20208+         lgr   12,15               set base reg                         01-DCCPR
                        0000DD90           20209+         using @REGION_1662_1,12                                        01-DCCPR
0000DDCE B904 0031                         20210          LGR   3,1         ; ptr to parm area
                                           20211 * ******* End of Prologue
                                           20212 * *
                                           20213 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20214 * KAFKA_OP_MOCK);
0000DDD2 D707 D0B0 D0B0 000000B0 000000B0  20215          XC    176(8,13),176(13)
0000DDD8 E548 D0B8 002D          000000B8  20216          MVGHI 184(13),45
0000DDDE 4110 D0B0               000000B0  20217          LA    1,176(0,13)
0000DDE2 E3F0 C128 0004          0000DEB8  20218          LG    15,@lit_1662_912 ; rd_kafka_op_new0
0000DDE8                                   20219 @@gen_label1289 DS    0H
0000DDE8 05EF                              20220          BALR  14,15
0000DDEA                                   20221 @@gen_label1290 DS    0H
0000DDEA B904 002F                         20222          LGR   2,15
                                           20223 * ***
                                           20224 * ***           rko->rko_u.mock.name = rd_strdup(topic);
0000DDEE E3F0 3008 0004          00000008  20225          LG    15,8(0,3)   ; topic
0000DDF4 E3F0 D0B0 0024          000000B0  20226          STG   15,176(0,13)
0000DDFA 4110 D0B0               000000B0  20227          LA    1,176(0,13)
0000DDFE E3F0 C130 0004          0000DEC0  20228          LG    15,@lit_1662_913 ; rd_strdup
0000DE04                                   20229 @@gen_label1291 DS    0H
0000DE04 05EF                              20230          BALR  14,15
0000DE06                                   20231 @@gen_label1292 DS    0H
0000DE06 E3F0 2078 0024          00000078  20232          STG   15,120(0,2)
                                           20233 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_PART_SET_FOLLO\
                                           20234 * WER;
0000DE0C E54C 2070 0003          00000070  20235          MVHI  112(2),3    ; offset of rko_u in rd_kafka_op_s
                                           20236 * ***           rko->rko_u.mock.partition = partition;
0000DE12 58F0 3014               00000014  20237          L     15,20(0,3)  ; partition
0000DE16 50F0 2088               00000088  20238          ST    15,136(0,2) ; offset of partition in 0000081
                                           20239 * ***           rko->rko_u.mock.broker_id = broker_id;
0000DE1A 58F0 301C               0000001C  20240          L     15,28(0,3)  ; broker_id
0000DE1E 50F0 208C               0000008C  20241          ST    15,140(0,2) ; offset of broker_id in 0000081
                                           20242 * ***
                                           20243 * ***           return rd_kafka_op_err_destroy(
                                           20244 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000DE22 E3F0 3000 0004          00000000  20245          LG    15,0(0,3)   ; mcluster
0000DE28 E3F0 F0B8 0004          000000B8  20246          LG    15,184(0,15)
0000DE2E E3F0 D0B0 0024          000000B0  20247          STG   15,176(0,13)
0000DE34 E320 D0B8 0024          000000B8  20248          STG   2,184(0,13)
0000DE3A E548 D0C0 FFFF          000000C0  20249          MVGHI 192(13),-1
0000DE40 4110 D0B0               000000B0  20250          LA    1,176(0,13)
0000DE44 E3F0 C138 0004          0000DEC8  20251          LG    15,@lit_1662_914 ; rd_kafka_op_req
                                                                                                                           Page  406 
  Active Usings: @REGION_1662_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DE4A                                   20252 @@gen_label1293 DS    0H
0000DE4A 05EF                              20253          BALR  14,15
0000DE4C                                   20254 @@gen_label1294 DS    0H
0000DE4C E3F0 D0B0 0024          000000B0  20255          STG   15,176(0,13)
0000DE52 4110 D0B0               000000B0  20256          LA    1,176(0,13)
0000DE56 E3F0 C140 0004          0000DED0  20257          LG    15,@lit_1662_915 ; rd_kafka_op_err_destroy
0000DE5C                                   20258 @@gen_label1295 DS    0H
0000DE5C 05EF                              20259          BALR  14,15
0000DE5E                                   20260 @@gen_label1296 DS    0H
0000DE5E B914 00FF                         20261          LGFR  15,15
                                           20262 * ***   }
                                           20263 * * **** Start of Epilogue
                                           20264          DCCEPIL
0000DE62                                   20265+         ds 0h                                                          01-DCCEP
                                           20266+* Epilog
0000DE62 D707 D088 D088 00000088 00000088  20267+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000DE68 E3D0 D080 0004          00000080  20268+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000DE6E E3C0 D090 0004          00000090  20269+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000DE74 E3B0 C018 0004          00000018  20270+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000DE7A E3C0 B010 0021          00000010  20271+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000DE80 E3E0 D008 0004          00000008  20272+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000DE86 EB1C D020 0004          00000020  20273+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000DE8C 078E                              20274+         bcr 8,14                if same dsab, just return              01-DCCEP
0000DE8E E3F0 D010 0024          00000010  20275+         stg 15,16(0,13)         save return code                       01-DCCEP
0000DE94 E300 D018 0024          00000018  20276+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000DE9A E3F0 D090 0004          00000090  20277+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000DEA0 E3F0 F018 0004          00000018  20278+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000DEA6 47F0 F040               00000040  20279+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           20280+* End of Epilog
                                           20281 * * **** End of Epilogue
0000DEB0                                   20282          DS    0D
0000DEB0 000000C8                          20283 @FRAMESIZE_1662 DC F'200'
0000DEB4 00000000
0000DEB8 0000000000000000                  20284 @lit_1662_912 DC AD(rd_kafka_op_new0)
0000DEC0 0000000000000C80                  20285 @lit_1662_913 DC AD(rd_strdup)
0000DEC8 0000000000000000                  20286 @lit_1662_914 DC AD(rd_kafka_op_req)
0000DED0 0000000000000000                  20287 @lit_1662_915 DC AD(rd_kafka_op_err_destroy)
                                           20288          DROP  12
                                           20289 *
                                           20290 *   DSECT for automatic variables in "rd_kafka_mock_partition_set_foll
                                           20291 *           ower"
                                           20292 *      (FUNCTION #1662)
                                           20293 *
00000000                00000000 000000A8  20294 @AUTO#rd_kafka_mock_partition_set_follower DSECT
00000000                                   20295          DS    XL168
                                           20296 *
0000DED8                00000000 00010480  20297 @CODE    CSECT
                                           20298 *
                                           20299 *
                                           20300 *
                                           20301 * ....... start of rd_kafka_mock_partition_set_follower_wmarks
                                           20302 rd_kafka_mock_partition_set_follower_wmarks ALIAS X'99846D92818692816D9*
                                                                                                                           Page  407 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                49683926D978199A389A38996956DA285A36D8696939396A685996DA*
                                                                694819992A2'
0000DED8                                   20303 @LNAME1663 DS  0H
0000DED8 0000002B                          20304          DC    X'0000002B'
0000DEDC 99846D9281869281                  20305          DC    C'rd_kafka_mock_partition_set_foll'
0000DEFC 96A685996DA69481                  20306          DC    C'ower_wmarks'
0000DF07 00                                20307          DC    X'00'
                                           20308 rd_kafka_mock_partition_set_follower_wmarks DCCPRLG CINDEX=1663,BASER=1*
                                                                2,FRAME=200,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1663
                                           20309          macro
                                           20310          dccextrn &m
                                           20311          gblc    &$dccext(1000)
                                           20312          gbla    &$dccexti
                                           20313          lcla    &i
                                           20314 &$dccext(&$dccexti+1) setc    '&m'
                                           20315 &i       seta    1
                                           20316 .loop    aif    (&i gt &$dccexti).around
                                           20317          aif    ('&$dccext(&i)' eq '&m').getout
                                           20318 &i       seta    &i+1
                                           20319          ago     .loop
                                           20320 .around  anop
                                           20321 &$dccexti seta &$dccexti+1
                                           20322          extrn  &m
                                           20323 .getout  anop
                                           20324          mend
0000DF08                                   20325+$eye0314    ds    0d                                                    02-DCCCA
0000DF08 C4C3C3                            20326+         dc cl3'DCC'                                                    02-DCCCA
0000DF0B 01                                20327+         dc xl1'01' format one                                          02-DCCCA
0000DF0C 00000000                          20328+         dc a(0)                                                        02-DCCCA
0000DF10 000000000000DF7A                  20329+         dc ad(@PER_1663)                                               02-DCCCA
0000DF18 00000000000000C8                  20330+         dc ad(200)                                                     02-DCCCA
0000DF20 0000000000000000                  20331+         dc ad(0)                                                       02-DCCCA
0000DF28 0000000000001000                  20332+         dc ad(4096)                                                    02-DCCCA
0000DF30 20                                20333+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000DF31 03                                20334+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000DF32 03                                20335+         dc al1(3)                                                      02-DCCCA
0000DF33 08                                20336+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000DF34 00                                20337+         dc bl.8'00000000'                                              02-DCCCA
0000DF35 000000                            20338+         dc al3(0)                                                      02-DCCCA
0000DF38 000000000000DED8                  20339+         dc ad(@LNAME1663)                                              02-DCCCA
0000DF40                                   20340+         ds 0d                                                          02-DCCCA
0000DF40 000000000000DF08                  20341+         dc ad($eye0314)                                                02-DCCCA
0000DF48 0000000000000000                  20342+         dc ad(0)                                                       02-DCCCA
0000DF50                                   20343+         ds    0d                                                       01-DCCPR
                                           20344+         entry rd_kafka_mock_partition_set_follower_wmarks              01-DCCPR
0000DF50                                   20345+rd_kafka_mock_partition_set_follower_wmarks ds 0d                       01-DCCPR
0000DF50                                   20346+@REGION_1663_1 ds 0h                                                    01-DCCPR
0000DF50 EBEC D008 0024          00000008  20347+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000DF56 E3E0 D088 0004          00000088  20348+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000DF5C E3C0 D090 0004          00000090  20349+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000DF62 B904 002E                         20350+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000DF66 E3B0 C018 0004          00000018  20351+         lg    11,24(0,12)         get dvt address                      01-DCCPR
                                                                                                                           Page  408 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000DF6C A7EB 00C8               000000C8  20352+         aghi  14,200              increase by frame size               01-DCCPR
0000DF70 E3E0 C020 0021          00000020  20353+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000DF76 4720 B020               00000020  20354+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000DF7A                                   20355+@PER_1663 ds   0h                                                       01-DCCPR
0000DF7A EBDE 2080 0024          00000080  20356+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000DF80 E3C0 2090 0024          00000090  20357+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000DF86 B904 00D2                         20358+         lgr   13,2                set real frame pointer               01-DCCPR
0000DF8A B904 00CF                         20359+         lgr   12,15               set base reg                         01-DCCPR
                        0000DF50           20360+         using @REGION_1663_1,12                                        01-DCCPR
0000DF8E B904 0031                         20361          LGR   3,1         ; ptr to parm area
                                           20362 * ******* End of Prologue
                                           20363 * *
                                           20364 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20365 * KAFKA_OP_MOCK);
0000DF92 D707 D0B0 D0B0 000000B0 000000B0  20366          XC    176(8,13),176(13)
0000DF98 E548 D0B8 002D          000000B8  20367          MVGHI 184(13),45
0000DF9E 4110 D0B0               000000B0  20368          LA    1,176(0,13)
0000DFA2 E3F0 C138 0004          0000E088  20369          LG    15,@lit_1663_917 ; rd_kafka_op_new0
0000DFA8                                   20370 @@gen_label1297 DS    0H
0000DFA8 05EF                              20371          BALR  14,15
0000DFAA                                   20372 @@gen_label1298 DS    0H
0000DFAA B904 002F                         20373          LGR   2,15
                                           20374 * ***
                                           20375 * ***           rko->rko_u.mock.name = rd_strdup(topic);
0000DFAE E3F0 3008 0004          00000008  20376          LG    15,8(0,3)   ; topic
0000DFB4 E3F0 D0B0 0024          000000B0  20377          STG   15,176(0,13)
0000DFBA 4110 D0B0               000000B0  20378          LA    1,176(0,13)
0000DFBE E3F0 C140 0004          0000E090  20379          LG    15,@lit_1663_918 ; rd_strdup
0000DFC4                                   20380 @@gen_label1299 DS    0H
0000DFC4 05EF                              20381          BALR  14,15
0000DFC6                                   20382 @@gen_label1300 DS    0H
0000DFC6 E3F0 2078 0024          00000078  20383          STG   15,120(0,2)
                                           20384 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_PART_SET_FOLLO\
                                           20385 * WER_WMARKS;
0000DFCC E54C 2070 0004          00000070  20386          MVHI  112(2),4    ; offset of rko_u in rd_kafka_op_s
                                           20387 * ***           rko->rko_u.mock.partition = partition;
0000DFD2 58F0 3014               00000014  20388          L     15,20(0,3)  ; partition
0000DFD6 50F0 2088               00000088  20389          ST    15,136(0,2) ; offset of partition in 0000081
                                           20390 * ***           rko->rko_u.mock.lo = lo;
0000DFDA E3F0 3018 0004          00000018  20391          LG    15,24(0,3)  ; lo
0000DFE0 E3F0 2090 0024          00000090  20392          STG   15,144(0,2) ; offset of lo in 0000081
                                           20393 * ***           rko->rko_u.mock.hi = hi;
0000DFE6 E3F0 3020 0004          00000020  20394          LG    15,32(0,3)  ; hi
0000DFEC E3F0 2098 0024          00000098  20395          STG   15,152(0,2) ; offset of hi in 0000081
                                           20396 * ***
                                           20397 * ***           return rd_kafka_op_err_destroy(
                                           20398 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000DFF2 E3F0 3000 0004          00000000  20399          LG    15,0(0,3)   ; mcluster
0000DFF8 E3F0 F0B8 0004          000000B8  20400          LG    15,184(0,15)
0000DFFE E3F0 D0B0 0024          000000B0  20401          STG   15,176(0,13)
0000E004 E320 D0B8 0024          000000B8  20402          STG   2,184(0,13)
0000E00A E548 D0C0 FFFF          000000C0  20403          MVGHI 192(13),-1
                                                                                                                           Page  409 
  Active Usings: @REGION_1663_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E010 4110 D0B0               000000B0  20404          LA    1,176(0,13)
0000E014 E3F0 C148 0004          0000E098  20405          LG    15,@lit_1663_919 ; rd_kafka_op_req
0000E01A                                   20406 @@gen_label1301 DS    0H
0000E01A 05EF                              20407          BALR  14,15
0000E01C                                   20408 @@gen_label1302 DS    0H
0000E01C E3F0 D0B0 0024          000000B0  20409          STG   15,176(0,13)
0000E022 4110 D0B0               000000B0  20410          LA    1,176(0,13)
0000E026 E3F0 C150 0004          0000E0A0  20411          LG    15,@lit_1663_920 ; rd_kafka_op_err_destroy
0000E02C                                   20412 @@gen_label1303 DS    0H
0000E02C 05EF                              20413          BALR  14,15
0000E02E                                   20414 @@gen_label1304 DS    0H
0000E02E B914 00FF                         20415          LGFR  15,15
                                           20416 * ***   }
                                           20417 * * **** Start of Epilogue
                                           20418          DCCEPIL
0000E032                                   20419+         ds 0h                                                          01-DCCEP
                                           20420+* Epilog
0000E032 D707 D088 D088 00000088 00000088  20421+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E038 E3D0 D080 0004          00000080  20422+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E03E E3C0 D090 0004          00000090  20423+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000E044 E3B0 C018 0004          00000018  20424+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000E04A E3C0 B010 0021          00000010  20425+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000E050 E3E0 D008 0004          00000008  20426+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000E056 EB1C D020 0004          00000020  20427+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000E05C 078E                              20428+         bcr 8,14                if same dsab, just return              01-DCCEP
0000E05E E3F0 D010 0024          00000010  20429+         stg 15,16(0,13)         save return code                       01-DCCEP
0000E064 E300 D018 0024          00000018  20430+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000E06A E3F0 D090 0004          00000090  20431+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000E070 E3F0 F018 0004          00000018  20432+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000E076 47F0 F040               00000040  20433+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           20434+* End of Epilog
                                           20435 * * **** End of Epilogue
0000E080                                   20436          DS    0D
0000E080 000000C8                          20437 @FRAMESIZE_1663 DC F'200'
0000E084 00000000
0000E088 0000000000000000                  20438 @lit_1663_917 DC AD(rd_kafka_op_new0)
0000E090 0000000000000C80                  20439 @lit_1663_918 DC AD(rd_strdup)
0000E098 0000000000000000                  20440 @lit_1663_919 DC AD(rd_kafka_op_req)
0000E0A0 0000000000000000                  20441 @lit_1663_920 DC AD(rd_kafka_op_err_destroy)
                                           20442          DROP  12
                                           20443 *
                                           20444 *   DSECT for automatic variables in "rd_kafka_mock_partition_set_foll
                                           20445 *           ower_wmarks"
                                           20446 *      (FUNCTION #1663)
                                           20447 *
00000000                00000000 000000A8  20448 @AUTO#rd_kafka_mock_partition_set_follower_wmarks DSECT
00000000                                   20449          DS    XL168
                                           20450 *
0000E0A8                00000000 00010480  20451 @CODE    CSECT
                                           20452 *
                                           20453 *
                                           20454 *
                                                                                                                           Page  410 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20455 * ....... start of rd_kafka_mock_broker_set_down
                                           20456 rd_kafka_mock_broker_set_down ALIAS X'99846D92818692816D949683926D82999*
                                                                69285996DA285A36D8496A695'
0000E0A8                                   20457 @LNAME1664 DS  0H
0000E0A8 0000001D                          20458          DC    X'0000001D'
0000E0AC 99846D9281869281                  20459          DC    C'rd_kafka_mock_broker_set_down'
0000E0C9 00                                20460          DC    X'00'
                                           20461 rd_kafka_mock_broker_set_down DCCPRLG CINDEX=1664,BASER=12,FRAME=200,EN*
                                                                TRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1664
                                           20462          macro
                                           20463          dccextrn &m
                                           20464          gblc    &$dccext(1000)
                                           20465          gbla    &$dccexti
                                           20466          lcla    &i
                                           20467 &$dccext(&$dccexti+1) setc    '&m'
                                           20468 &i       seta    1
                                           20469 .loop    aif    (&i gt &$dccexti).around
                                           20470          aif    ('&$dccext(&i)' eq '&m').getout
                                           20471 &i       seta    &i+1
                                           20472          ago     .loop
                                           20473 .around  anop
                                           20474 &$dccexti seta &$dccexti+1
                                           20475          extrn  &m
                                           20476 .getout  anop
                                           20477          mend
0000E0D0                                   20478+$eye0317    ds    0d                                                    02-DCCCA
0000E0D0 C4C3C3                            20479+         dc cl3'DCC'                                                    02-DCCCA
0000E0D3 01                                20480+         dc xl1'01' format one                                          02-DCCCA
0000E0D4 00000000                          20481+         dc a(0)                                                        02-DCCCA
0000E0D8 000000000000E142                  20482+         dc ad(@PER_1664)                                               02-DCCCA
0000E0E0 00000000000000C8                  20483+         dc ad(200)                                                     02-DCCCA
0000E0E8 0000000000000000                  20484+         dc ad(0)                                                       02-DCCCA
0000E0F0 0000000000001000                  20485+         dc ad(4096)                                                    02-DCCCA
0000E0F8 20                                20486+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000E0F9 03                                20487+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000E0FA 03                                20488+         dc al1(3)                                                      02-DCCCA
0000E0FB 08                                20489+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000E0FC 00                                20490+         dc bl.8'00000000'                                              02-DCCCA
0000E0FD 000000                            20491+         dc al3(0)                                                      02-DCCCA
0000E100 000000000000E0A8                  20492+         dc ad(@LNAME1664)                                              02-DCCCA
0000E108                                   20493+         ds 0d                                                          02-DCCCA
0000E108 000000000000E0D0                  20494+         dc ad($eye0317)                                                02-DCCCA
0000E110 0000000000000000                  20495+         dc ad(0)                                                       02-DCCCA
0000E118                                   20496+         ds    0d                                                       01-DCCPR
                                           20497+         entry rd_kafka_mock_broker_set_down                            01-DCCPR
0000E118                                   20498+rd_kafka_mock_broker_set_down ds 0d                                     01-DCCPR
0000E118                                   20499+@REGION_1664_1 ds 0h                                                    01-DCCPR
0000E118 EBEC D008 0024          00000008  20500+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000E11E E3E0 D088 0004          00000088  20501+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000E124 E3C0 D090 0004          00000090  20502+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000E12A B904 002E                         20503+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000E12E E3B0 C018 0004          00000018  20504+         lg    11,24(0,12)         get dvt address                      01-DCCPR
                                                                                                                           Page  411 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E134 A7EB 00C8               000000C8  20505+         aghi  14,200              increase by frame size               01-DCCPR
0000E138 E3E0 C020 0021          00000020  20506+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000E13E 4720 B020               00000020  20507+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000E142                                   20508+@PER_1664 ds   0h                                                       01-DCCPR
0000E142 EBDE 2080 0024          00000080  20509+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000E148 E3C0 2090 0024          00000090  20510+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000E14E B904 00D2                         20511+         lgr   13,2                set real frame pointer               01-DCCPR
0000E152 B904 00CF                         20512+         lgr   12,15               set base reg                         01-DCCPR
                        0000E118           20513+         using @REGION_1664_1,12                                        01-DCCPR
0000E156 B904 0021                         20514          LGR   2,1         ; ptr to parm area
                                           20515 * ******* End of Prologue
                                           20516 * *
                                           20517 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20518 * KAFKA_OP_MOCK);
0000E15A D707 D0B0 D0B0 000000B0 000000B0  20519          XC    176(8,13),176(13)
0000E160 E548 D0B8 002D          000000B8  20520          MVGHI 184(13),45
0000E166 4110 D0B0               000000B0  20521          LA    1,176(0,13)
0000E16A E3F0 C100 0004          0000E218  20522          LG    15,@lit_1664_922 ; rd_kafka_op_new0
0000E170                                   20523 @@gen_label1305 DS    0H
0000E170 05EF                              20524          BALR  14,15
0000E172                                   20525 @@gen_label1306 DS    0H
                                           20526 * ***
                                           20527 * ***           rko->rko_u.mock.broker_id = broker_id;
0000E172 5810 200C               0000000C  20528          L     1,12(0,2)   ; broker_id
0000E176 5010 F08C               0000008C  20529          ST    1,140(0,15) ; offset of broker_id in 0000081
                                           20530 * ***           rko->rko_u.mock.lo = 0;
0000E17A E548 F090 0000          00000090  20531          MVGHI 144(15),0   ; offset of lo in 0000081
                                           20532 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_BROKER_SET_UPD\
                                           20533 * OWN;
0000E180 E54C F070 0005          00000070  20534          MVHI  112(15),5   ; offset of rko_u in rd_kafka_op_s
                                           20535 * ***
                                           20536 * ***           return rd_kafka_op_err_destroy(
                                           20537 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000E186 E310 2000 0004          00000000  20538          LG    1,0(0,2)    ; mcluster
0000E18C E310 10B8 0004          000000B8  20539          LG    1,184(0,1)
0000E192 E310 D0B0 0024          000000B0  20540          STG   1,176(0,13)
0000E198 E3F0 D0B8 0024          000000B8  20541          STG   15,184(0,13)
0000E19E E548 D0C0 FFFF          000000C0  20542          MVGHI 192(13),-1
0000E1A4 4110 D0B0               000000B0  20543          LA    1,176(0,13)
0000E1A8 E3F0 C108 0004          0000E220  20544          LG    15,@lit_1664_923 ; rd_kafka_op_req
0000E1AE                                   20545 @@gen_label1307 DS    0H
0000E1AE 05EF                              20546          BALR  14,15
0000E1B0                                   20547 @@gen_label1308 DS    0H
0000E1B0 E3F0 D0B0 0024          000000B0  20548          STG   15,176(0,13)
0000E1B6 4110 D0B0               000000B0  20549          LA    1,176(0,13)
0000E1BA E3F0 C110 0004          0000E228  20550          LG    15,@lit_1664_924 ; rd_kafka_op_err_destroy
0000E1C0                                   20551 @@gen_label1309 DS    0H
0000E1C0 05EF                              20552          BALR  14,15
0000E1C2                                   20553 @@gen_label1310 DS    0H
0000E1C2 B914 00FF                         20554          LGFR  15,15
                                           20555 * ***   }
                                           20556 * * **** Start of Epilogue
                                                                                                                           Page  412 
  Active Usings: @REGION_1664_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20557          DCCEPIL
0000E1C6                                   20558+         ds 0h                                                          01-DCCEP
                                           20559+* Epilog
0000E1C6 D707 D088 D088 00000088 00000088  20560+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E1CC E3D0 D080 0004          00000080  20561+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E1D2 E3C0 D090 0004          00000090  20562+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000E1D8 E3B0 C018 0004          00000018  20563+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000E1DE E3C0 B010 0021          00000010  20564+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000E1E4 E3E0 D008 0004          00000008  20565+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000E1EA EB1C D020 0004          00000020  20566+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000E1F0 078E                              20567+         bcr 8,14                if same dsab, just return              01-DCCEP
0000E1F2 E3F0 D010 0024          00000010  20568+         stg 15,16(0,13)         save return code                       01-DCCEP
0000E1F8 E300 D018 0024          00000018  20569+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000E1FE E3F0 D090 0004          00000090  20570+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000E204 E3F0 F018 0004          00000018  20571+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000E20A 47F0 F040               00000040  20572+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           20573+* End of Epilog
                                           20574 * * **** End of Epilogue
0000E210                                   20575          DS    0D
0000E210 000000C8                          20576 @FRAMESIZE_1664 DC F'200'
0000E214 00000000
0000E218 0000000000000000                  20577 @lit_1664_922 DC AD(rd_kafka_op_new0)
0000E220 0000000000000000                  20578 @lit_1664_923 DC AD(rd_kafka_op_req)
0000E228 0000000000000000                  20579 @lit_1664_924 DC AD(rd_kafka_op_err_destroy)
                                           20580          DROP  12
                                           20581 *
                                           20582 *   DSECT for automatic variables in "rd_kafka_mock_broker_set_down"
                                           20583 *      (FUNCTION #1664)
                                           20584 *
00000000                00000000 000000A8  20585 @AUTO#rd_kafka_mock_broker_set_down DSECT
00000000                                   20586          DS    XL168
                                           20587 *
0000E230                00000000 00010480  20588 @CODE    CSECT
                                           20589 *
                                           20590 *
                                           20591 *
                                           20592 * ....... start of rd_kafka_mock_broker_set_up
                                           20593 rd_kafka_mock_broker_set_up ALIAS X'99846D92818692816D949683926D8299969*
                                                                285996DA285A36DA497'
0000E230                                   20594 @LNAME1665 DS  0H
0000E230 0000001B                          20595          DC    X'0000001B'
0000E234 99846D9281869281                  20596          DC    C'rd_kafka_mock_broker_set_up'
0000E24F 00                                20597          DC    X'00'
                                           20598 rd_kafka_mock_broker_set_up DCCPRLG CINDEX=1665,BASER=12,FRAME=200,ENTR*
                                                                Y=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1665
                                           20599          macro
                                           20600          dccextrn &m
                                           20601          gblc    &$dccext(1000)
                                           20602          gbla    &$dccexti
                                           20603          lcla    &i
                                           20604 &$dccext(&$dccexti+1) setc    '&m'
                                           20605 &i       seta    1
                                                                                                                           Page  413 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20606 .loop    aif    (&i gt &$dccexti).around
                                           20607          aif    ('&$dccext(&i)' eq '&m').getout
                                           20608 &i       seta    &i+1
                                           20609          ago     .loop
                                           20610 .around  anop
                                           20611 &$dccexti seta &$dccexti+1
                                           20612          extrn  &m
                                           20613 .getout  anop
                                           20614          mend
0000E250                                   20615+$eye0320    ds    0d                                                    02-DCCCA
0000E250 C4C3C3                            20616+         dc cl3'DCC'                                                    02-DCCCA
0000E253 01                                20617+         dc xl1'01' format one                                          02-DCCCA
0000E254 00000000                          20618+         dc a(0)                                                        02-DCCCA
0000E258 000000000000E2C2                  20619+         dc ad(@PER_1665)                                               02-DCCCA
0000E260 00000000000000C8                  20620+         dc ad(200)                                                     02-DCCCA
0000E268 0000000000000000                  20621+         dc ad(0)                                                       02-DCCCA
0000E270 0000000000001000                  20622+         dc ad(4096)                                                    02-DCCCA
0000E278 20                                20623+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000E279 03                                20624+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000E27A 03                                20625+         dc al1(3)                                                      02-DCCCA
0000E27B 08                                20626+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000E27C 00                                20627+         dc bl.8'00000000'                                              02-DCCCA
0000E27D 000000                            20628+         dc al3(0)                                                      02-DCCCA
0000E280 000000000000E230                  20629+         dc ad(@LNAME1665)                                              02-DCCCA
0000E288                                   20630+         ds 0d                                                          02-DCCCA
0000E288 000000000000E250                  20631+         dc ad($eye0320)                                                02-DCCCA
0000E290 0000000000000000                  20632+         dc ad(0)                                                       02-DCCCA
0000E298                                   20633+         ds    0d                                                       01-DCCPR
                                           20634+         entry rd_kafka_mock_broker_set_up                              01-DCCPR
0000E298                                   20635+rd_kafka_mock_broker_set_up ds 0d                                       01-DCCPR
0000E298                                   20636+@REGION_1665_1 ds 0h                                                    01-DCCPR
0000E298 EBEC D008 0024          00000008  20637+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000E29E E3E0 D088 0004          00000088  20638+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000E2A4 E3C0 D090 0004          00000090  20639+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000E2AA B904 002E                         20640+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000E2AE E3B0 C018 0004          00000018  20641+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000E2B4 A7EB 00C8               000000C8  20642+         aghi  14,200              increase by frame size               01-DCCPR
0000E2B8 E3E0 C020 0021          00000020  20643+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000E2BE 4720 B020               00000020  20644+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000E2C2                                   20645+@PER_1665 ds   0h                                                       01-DCCPR
0000E2C2 EBDE 2080 0024          00000080  20646+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000E2C8 E3C0 2090 0024          00000090  20647+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000E2CE B904 00D2                         20648+         lgr   13,2                set real frame pointer               01-DCCPR
0000E2D2 B904 00CF                         20649+         lgr   12,15               set base reg                         01-DCCPR
                        0000E298           20650+         using @REGION_1665_1,12                                        01-DCCPR
0000E2D6 B904 0021                         20651          LGR   2,1         ; ptr to parm area
                                           20652 * ******* End of Prologue
                                           20653 * *
                                           20654 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20655 * KAFKA_OP_MOCK);
0000E2DA D707 D0B0 D0B0 000000B0 000000B0  20656          XC    176(8,13),176(13)
0000E2E0 E548 D0B8 002D          000000B8  20657          MVGHI 184(13),45
                                                                                                                           Page  414 
  Active Usings: @REGION_1665_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E2E6 4110 D0B0               000000B0  20658          LA    1,176(0,13)
0000E2EA E3F0 C100 0004          0000E398  20659          LG    15,@lit_1665_926 ; rd_kafka_op_new0
0000E2F0                                   20660 @@gen_label1311 DS    0H
0000E2F0 05EF                              20661          BALR  14,15
0000E2F2                                   20662 @@gen_label1312 DS    0H
                                           20663 * ***
                                           20664 * ***           rko->rko_u.mock.broker_id = broker_id;
0000E2F2 5810 200C               0000000C  20665          L     1,12(0,2)   ; broker_id
0000E2F6 5010 F08C               0000008C  20666          ST    1,140(0,15) ; offset of broker_id in 0000081
                                           20667 * ***           rko->rko_u.mock.lo = 1;
0000E2FA E548 F090 0001          00000090  20668          MVGHI 144(15),1   ; offset of lo in 0000081
                                           20669 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_BROKER_SET_UPD\
                                           20670 * OWN;
0000E300 E54C F070 0005          00000070  20671          MVHI  112(15),5   ; offset of rko_u in rd_kafka_op_s
                                           20672 * ***
                                           20673 * ***           return rd_kafka_op_err_destroy(
                                           20674 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000E306 E310 2000 0004          00000000  20675          LG    1,0(0,2)    ; mcluster
0000E30C E310 10B8 0004          000000B8  20676          LG    1,184(0,1)
0000E312 E310 D0B0 0024          000000B0  20677          STG   1,176(0,13)
0000E318 E3F0 D0B8 0024          000000B8  20678          STG   15,184(0,13)
0000E31E E548 D0C0 FFFF          000000C0  20679          MVGHI 192(13),-1
0000E324 4110 D0B0               000000B0  20680          LA    1,176(0,13)
0000E328 E3F0 C108 0004          0000E3A0  20681          LG    15,@lit_1665_927 ; rd_kafka_op_req
0000E32E                                   20682 @@gen_label1313 DS    0H
0000E32E 05EF                              20683          BALR  14,15
0000E330                                   20684 @@gen_label1314 DS    0H
0000E330 E3F0 D0B0 0024          000000B0  20685          STG   15,176(0,13)
0000E336 4110 D0B0               000000B0  20686          LA    1,176(0,13)
0000E33A E3F0 C110 0004          0000E3A8  20687          LG    15,@lit_1665_928 ; rd_kafka_op_err_destroy
0000E340                                   20688 @@gen_label1315 DS    0H
0000E340 05EF                              20689          BALR  14,15
0000E342                                   20690 @@gen_label1316 DS    0H
0000E342 B914 00FF                         20691          LGFR  15,15
                                           20692 * ***   }
                                           20693 * * **** Start of Epilogue
                                           20694          DCCEPIL
0000E346                                   20695+         ds 0h                                                          01-DCCEP
                                           20696+* Epilog
0000E346 D707 D088 D088 00000088 00000088  20697+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E34C E3D0 D080 0004          00000080  20698+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E352 E3C0 D090 0004          00000090  20699+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000E358 E3B0 C018 0004          00000018  20700+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000E35E E3C0 B010 0021          00000010  20701+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000E364 E3E0 D008 0004          00000008  20702+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000E36A EB1C D020 0004          00000020  20703+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000E370 078E                              20704+         bcr 8,14                if same dsab, just return              01-DCCEP
0000E372 E3F0 D010 0024          00000010  20705+         stg 15,16(0,13)         save return code                       01-DCCEP
0000E378 E300 D018 0024          00000018  20706+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000E37E E3F0 D090 0004          00000090  20707+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000E384 E3F0 F018 0004          00000018  20708+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000E38A 47F0 F040               00000040  20709+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                                                                                                           Page  415 
  Active Usings: @REGION_1665_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20710+* End of Epilog
                                           20711 * * **** End of Epilogue
0000E390                                   20712          DS    0D
0000E390 000000C8                          20713 @FRAMESIZE_1665 DC F'200'
0000E394 00000000
0000E398 0000000000000000                  20714 @lit_1665_926 DC AD(rd_kafka_op_new0)
0000E3A0 0000000000000000                  20715 @lit_1665_927 DC AD(rd_kafka_op_req)
0000E3A8 0000000000000000                  20716 @lit_1665_928 DC AD(rd_kafka_op_err_destroy)
                                           20717          DROP  12
                                           20718 *
                                           20719 *   DSECT for automatic variables in "rd_kafka_mock_broker_set_up"
                                           20720 *      (FUNCTION #1665)
                                           20721 *
00000000                00000000 000000A8  20722 @AUTO#rd_kafka_mock_broker_set_up DSECT
00000000                                   20723          DS    XL168
                                           20724 *
0000E3B0                00000000 00010480  20725 @CODE    CSECT
                                           20726 *
                                           20727 *
                                           20728 *
                                           20729 * ....... start of rd_kafka_mock_broker_set_rtt
                                           20730 rd_kafka_mock_broker_set_rtt ALIAS X'99846D92818692816D949683926D829996*
                                                                9285996DA285A36D99A3A3'
0000E3B0                                   20731 @LNAME1666 DS  0H
0000E3B0 0000001C                          20732          DC    X'0000001C'
0000E3B4 99846D9281869281                  20733          DC    C'rd_kafka_mock_broker_set_rtt'
0000E3D0 00                                20734          DC    X'00'
                                           20735 rd_kafka_mock_broker_set_rtt DCCPRLG CINDEX=1666,BASER=12,FRAME=200,ENT*
                                                                RY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1666
                                           20736          macro
                                           20737          dccextrn &m
                                           20738          gblc    &$dccext(1000)
                                           20739          gbla    &$dccexti
                                           20740          lcla    &i
                                           20741 &$dccext(&$dccexti+1) setc    '&m'
                                           20742 &i       seta    1
                                           20743 .loop    aif    (&i gt &$dccexti).around
                                           20744          aif    ('&$dccext(&i)' eq '&m').getout
                                           20745 &i       seta    &i+1
                                           20746          ago     .loop
                                           20747 .around  anop
                                           20748 &$dccexti seta &$dccexti+1
                                           20749          extrn  &m
                                           20750 .getout  anop
                                           20751          mend
0000E3D8                                   20752+$eye0323    ds    0d                                                    02-DCCCA
0000E3D8 C4C3C3                            20753+         dc cl3'DCC'                                                    02-DCCCA
0000E3DB 01                                20754+         dc xl1'01' format one                                          02-DCCCA
0000E3DC 00000000                          20755+         dc a(0)                                                        02-DCCCA
0000E3E0 000000000000E44A                  20756+         dc ad(@PER_1666)                                               02-DCCCA
0000E3E8 00000000000000C8                  20757+         dc ad(200)                                                     02-DCCCA
0000E3F0 0000000000000000                  20758+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page  416 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E3F8 0000000000001000                  20759+         dc ad(4096)                                                    02-DCCCA
0000E400 20                                20760+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000E401 03                                20761+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000E402 03                                20762+         dc al1(3)                                                      02-DCCCA
0000E403 08                                20763+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000E404 00                                20764+         dc bl.8'00000000'                                              02-DCCCA
0000E405 000000                            20765+         dc al3(0)                                                      02-DCCCA
0000E408 000000000000E3B0                  20766+         dc ad(@LNAME1666)                                              02-DCCCA
0000E410                                   20767+         ds 0d                                                          02-DCCCA
0000E410 000000000000E3D8                  20768+         dc ad($eye0323)                                                02-DCCCA
0000E418 0000000000000000                  20769+         dc ad(0)                                                       02-DCCCA
0000E420                                   20770+         ds    0d                                                       01-DCCPR
                                           20771+         entry rd_kafka_mock_broker_set_rtt                             01-DCCPR
0000E420                                   20772+rd_kafka_mock_broker_set_rtt ds 0d                                      01-DCCPR
0000E420                                   20773+@REGION_1666_1 ds 0h                                                    01-DCCPR
0000E420 EBEC D008 0024          00000008  20774+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000E426 E3E0 D088 0004          00000088  20775+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000E42C E3C0 D090 0004          00000090  20776+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000E432 B904 002E                         20777+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000E436 E3B0 C018 0004          00000018  20778+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000E43C A7EB 00C8               000000C8  20779+         aghi  14,200              increase by frame size               01-DCCPR
0000E440 E3E0 C020 0021          00000020  20780+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000E446 4720 B020               00000020  20781+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000E44A                                   20782+@PER_1666 ds   0h                                                       01-DCCPR
0000E44A EBDE 2080 0024          00000080  20783+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000E450 E3C0 2090 0024          00000090  20784+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000E456 B904 00D2                         20785+         lgr   13,2                set real frame pointer               01-DCCPR
0000E45A B904 00CF                         20786+         lgr   12,15               set base reg                         01-DCCPR
                        0000E420           20787+         using @REGION_1666_1,12                                        01-DCCPR
0000E45E B904 0021                         20788          LGR   2,1         ; ptr to parm area
                                           20789 * ******* End of Prologue
                                           20790 * *
                                           20791 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20792 * KAFKA_OP_MOCK);
0000E462 D707 D0B0 D0B0 000000B0 000000B0  20793          XC    176(8,13),176(13)
0000E468 E548 D0B8 002D          000000B8  20794          MVGHI 184(13),45
0000E46E 4110 D0B0               000000B0  20795          LA    1,176(0,13)
0000E472 E3F0 C108 0004          0000E528  20796          LG    15,@lit_1666_930 ; rd_kafka_op_new0
0000E478                                   20797 @@gen_label1317 DS    0H
0000E478 05EF                              20798          BALR  14,15
0000E47A                                   20799 @@gen_label1318 DS    0H
                                           20800 * ***
                                           20801 * ***           rko->rko_u.mock.broker_id = broker_id;
0000E47A 5810 200C               0000000C  20802          L     1,12(0,2)   ; broker_id
0000E47E 5010 F08C               0000008C  20803          ST    1,140(0,15) ; offset of broker_id in 0000081
                                           20804 * ***           rko->rko_u.mock.lo = rtt_ms;
0000E482 E310 2014 0014          00000014  20805          LGF   1,20(0,2)   ; rtt_ms
0000E488 E310 F090 0024          00000090  20806          STG   1,144(0,15) ; offset of lo in 0000081
                                           20807 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_BROKER_SET_RTT\
                                           20808 * ;
0000E48E E54C F070 0006          00000070  20809          MVHI  112(15),6   ; offset of rko_u in rd_kafka_op_s
                                           20810 * ***
                                                                                                                           Page  417 
  Active Usings: @REGION_1666_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20811 * ***           return rd_kafka_op_err_destroy(
                                           20812 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000E494 E310 2000 0004          00000000  20813          LG    1,0(0,2)    ; mcluster
0000E49A E310 10B8 0004          000000B8  20814          LG    1,184(0,1)
0000E4A0 E310 D0B0 0024          000000B0  20815          STG   1,176(0,13)
0000E4A6 E3F0 D0B8 0024          000000B8  20816          STG   15,184(0,13)
0000E4AC E548 D0C0 FFFF          000000C0  20817          MVGHI 192(13),-1
0000E4B2 4110 D0B0               000000B0  20818          LA    1,176(0,13)
0000E4B6 E3F0 C110 0004          0000E530  20819          LG    15,@lit_1666_931 ; rd_kafka_op_req
0000E4BC                                   20820 @@gen_label1319 DS    0H
0000E4BC 05EF                              20821          BALR  14,15
0000E4BE                                   20822 @@gen_label1320 DS    0H
0000E4BE E3F0 D0B0 0024          000000B0  20823          STG   15,176(0,13)
0000E4C4 4110 D0B0               000000B0  20824          LA    1,176(0,13)
0000E4C8 E3F0 C118 0004          0000E538  20825          LG    15,@lit_1666_932 ; rd_kafka_op_err_destroy
0000E4CE                                   20826 @@gen_label1321 DS    0H
0000E4CE 05EF                              20827          BALR  14,15
0000E4D0                                   20828 @@gen_label1322 DS    0H
0000E4D0 B914 00FF                         20829          LGFR  15,15
                                           20830 * ***   }
                                           20831 * * **** Start of Epilogue
                                           20832          DCCEPIL
0000E4D4                                   20833+         ds 0h                                                          01-DCCEP
                                           20834+* Epilog
0000E4D4 D707 D088 D088 00000088 00000088  20835+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E4DA E3D0 D080 0004          00000080  20836+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E4E0 E3C0 D090 0004          00000090  20837+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000E4E6 E3B0 C018 0004          00000018  20838+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000E4EC E3C0 B010 0021          00000010  20839+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000E4F2 E3E0 D008 0004          00000008  20840+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000E4F8 EB1C D020 0004          00000020  20841+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000E4FE 078E                              20842+         bcr 8,14                if same dsab, just return              01-DCCEP
0000E500 E3F0 D010 0024          00000010  20843+         stg 15,16(0,13)         save return code                       01-DCCEP
0000E506 E300 D018 0024          00000018  20844+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000E50C E3F0 D090 0004          00000090  20845+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000E512 E3F0 F018 0004          00000018  20846+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000E518 47F0 F040               00000040  20847+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           20848+* End of Epilog
                                           20849 * * **** End of Epilogue
0000E520                                   20850          DS    0D
0000E520 000000C8                          20851 @FRAMESIZE_1666 DC F'200'
0000E524 00000000
0000E528 0000000000000000                  20852 @lit_1666_930 DC AD(rd_kafka_op_new0)
0000E530 0000000000000000                  20853 @lit_1666_931 DC AD(rd_kafka_op_req)
0000E538 0000000000000000                  20854 @lit_1666_932 DC AD(rd_kafka_op_err_destroy)
                                           20855          DROP  12
                                           20856 *
                                           20857 *   DSECT for automatic variables in "rd_kafka_mock_broker_set_rtt"
                                           20858 *      (FUNCTION #1666)
                                           20859 *
00000000                00000000 000000A8  20860 @AUTO#rd_kafka_mock_broker_set_rtt DSECT
00000000                                   20861          DS    XL168
                                                                                                                           Page  418 
  Active Usings: None
D-Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           20862 *
0000E540                00000000 00010480  20863 @CODE    CSECT
                                           20864 *
                                           20865 *
                                           20866 *
                                           20867 * ....... start of rd_kafka_mock_broker_set_rack
                                           20868 rd_kafka_mock_broker_set_rack ALIAS X'99846D92818692816D949683926D82999*
                                                                69285996DA285A36D99818392'
0000E540                                   20869 @LNAME1667 DS  0H
0000E540 0000001D                          20870          DC    X'0000001D'
0000E544 99846D9281869281                  20871          DC    C'rd_kafka_mock_broker_set_rack'
0000E561 00                                20872          DC    X'00'
                                           20873 rd_kafka_mock_broker_set_rack DCCPRLG CINDEX=1667,BASER=12,FRAME=200,EN*
                                                                TRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1667
                                           20874          macro
                                           20875          dccextrn &m
                                           20876          gblc    &$dccext(1000)
                                           20877          gbla    &$dccexti
                                           20878          lcla    &i
                                           20879 &$dccext(&$dccexti+1) setc    '&m'
                                           20880 &i       seta    1
                                           20881 .loop    aif    (&i gt &$dccexti).around
                                           20882          aif    ('&$dccext(&i)' eq '&m').getout
                                           20883 &i       seta    &i+1
                                           20884          ago     .loop
                                           20885 .around  anop
                                           20886 &$dccexti seta &$dccexti+1
                                           20887          extrn  &m
                                           20888 .getout  anop
                                           20889          mend
0000E568                                   20890+$eye0326    ds    0d                                                    02-DCCCA
0000E568 C4C3C3                            20891+         dc cl3'DCC'                                                    02-DCCCA
0000E56B 01                                20892+         dc xl1'01' format one                                          02-DCCCA
0000E56C 00000000                          20893+         dc a(0)                                                        02-DCCCA
0000E570 000000000000E5DA                  20894+         dc ad(@PER_1667)                                               02-DCCCA
0000E578 00000000000000C8                  20895+         dc ad(200)                                                     02-DCCCA
0000E580 0000000000000000                  20896+         dc ad(0)                                                       02-DCCCA
0000E588 0000000000001000                  20897+         dc ad(4096)                                                    02-DCCCA
0000E590 20                                20898+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000E591 03                                20899+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000E592 03                                20900+         dc al1(3)                                                      02-DCCCA
0000E593 08                                20901+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000E594 00                                20902+         dc bl.8'00000000'                                              02-DCCCA
0000E595 000000                            20903+         dc al3(0)                                                      02-DCCCA
0000E598 000000000000E540                  20904+         dc ad(@LNAME1667)                                              02-DCCCA
0000E5A0                                   20905+         ds 0d                                                          02-DCCCA
0000E5A0 000000000000E568                  20906+         dc ad($eye0326)                                                02-DCCCA
0000E5A8 0000000000000000                  20907+         dc ad(0)                                                       02-DCCCA
0000E5B0                                   20908+         ds    0d                                                       01-DCCPR
                                           20909+         entry rd_kafka_mock_broker_set_rack                            01-DCCPR
0000E5B0                                   20910+rd_kafka_mock_broker_set_rack ds 0d                                     01-DCCPR
0000E5B0                                   20911+@REGION_1667_1 ds 0h                                                    01-DCCPR
                                                                                                                           Page  419 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E5B0 EBEC D008 0024          00000008  20912+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000E5B6 E3E0 D088 0004          00000088  20913+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000E5BC E3C0 D090 0004          00000090  20914+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000E5C2 B904 002E                         20915+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000E5C6 E3B0 C018 0004          00000018  20916+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000E5CC A7EB 00C8               000000C8  20917+         aghi  14,200              increase by frame size               01-DCCPR
0000E5D0 E3E0 C020 0021          00000020  20918+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000E5D6 4720 B020               00000020  20919+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000E5DA                                   20920+@PER_1667 ds   0h                                                       01-DCCPR
0000E5DA EBDE 2080 0024          00000080  20921+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000E5E0 E3C0 2090 0024          00000090  20922+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000E5E6 B904 00D2                         20923+         lgr   13,2                set real frame pointer               01-DCCPR
0000E5EA B904 00CF                         20924+         lgr   12,15               set base reg                         01-DCCPR
                        0000E5B0           20925+         using @REGION_1667_1,12                                        01-DCCPR
0000E5EE B904 0031                         20926          LGR   3,1         ; ptr to parm area
                                           20927 * ******* End of Prologue
                                           20928 * *
                                           20929 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           20930 * KAFKA_OP_MOCK);
0000E5F2 D707 D0B0 D0B0 000000B0 000000B0  20931          XC    176(8,13),176(13)
0000E5F8 E548 D0B8 002D          000000B8  20932          MVGHI 184(13),45
0000E5FE 4110 D0B0               000000B0  20933          LA    1,176(0,13)
0000E602 E3F0 C120 0004          0000E6D0  20934          LG    15,@lit_1667_934 ; rd_kafka_op_new0
0000E608                                   20935 @@gen_label1323 DS    0H
0000E608 05EF                              20936          BALR  14,15
0000E60A                                   20937 @@gen_label1324 DS    0H
0000E60A B904 002F                         20938          LGR   2,15
                                           20939 * ***
                                           20940 * ***           rko->rko_u.mock.broker_id = broker_id;
0000E60E 5810 300C               0000000C  20941          L     1,12(0,3)   ; broker_id
0000E612 5010 208C               0000008C  20942          ST    1,140(0,2)  ; offset of broker_id in 0000081
                                           20943 * ***           rko->rko_u.mock.name = rd_strdup(rack);
0000E616 E3F0 3010 0004          00000010  20944          LG    15,16(0,3)  ; rack
0000E61C E3F0 D0B0 0024          000000B0  20945          STG   15,176(0,13)
0000E622 4110 D0B0               000000B0  20946          LA    1,176(0,13)
0000E626 E3F0 C128 0004          0000E6D8  20947          LG    15,@lit_1667_935 ; rd_strdup
0000E62C                                   20948 @@gen_label1325 DS    0H
0000E62C 05EF                              20949          BALR  14,15
0000E62E                                   20950 @@gen_label1326 DS    0H
0000E62E E3F0 2078 0024          00000078  20951          STG   15,120(0,2)
                                           20952 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_BROKER_SET_RAC\
                                           20953 * K;
0000E634 E54C 2070 0007          00000070  20954          MVHI  112(2),7    ; offset of rko_u in rd_kafka_op_s
                                           20955 * ***
                                           20956 * ***           return rd_kafka_op_err_destroy(
                                           20957 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000E63A E3F0 3000 0004          00000000  20958          LG    15,0(0,3)   ; mcluster
0000E640 E3F0 F0B8 0004          000000B8  20959          LG    15,184(0,15)
0000E646 E3F0 D0B0 0024          000000B0  20960          STG   15,176(0,13)
0000E64C E320 D0B8 0024          000000B8  20961          STG   2,184(0,13)
0000E652 E548 D0C0 FFFF          000000C0  20962          MVGHI 192(13),-1
0000E658 4110 D0B0               000000B0  20963          LA    1,176(0,13)
                                                                                                                           Page  420 
  Active Usings: @REGION_1667_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E65C E3F0 C130 0004          0000E6E0  20964          LG    15,@lit_1667_936 ; rd_kafka_op_req
0000E662                                   20965 @@gen_label1327 DS    0H
0000E662 05EF                              20966          BALR  14,15
0000E664                                   20967 @@gen_label1328 DS    0H
0000E664 E3F0 D0B0 0024          000000B0  20968          STG   15,176(0,13)
0000E66A 4110 D0B0               000000B0  20969          LA    1,176(0,13)
0000E66E E3F0 C138 0004          0000E6E8  20970          LG    15,@lit_1667_937 ; rd_kafka_op_err_destroy
0000E674                                   20971 @@gen_label1329 DS    0H
0000E674 05EF                              20972          BALR  14,15
0000E676                                   20973 @@gen_label1330 DS    0H
0000E676 B914 00FF                         20974          LGFR  15,15
                                           20975 * ***   }
                                           20976 * * **** Start of Epilogue
                                           20977          DCCEPIL
0000E67A                                   20978+         ds 0h                                                          01-DCCEP
                                           20979+* Epilog
0000E67A D707 D088 D088 00000088 00000088  20980+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E680 E3D0 D080 0004          00000080  20981+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E686 E3C0 D090 0004          00000090  20982+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000E68C E3B0 C018 0004          00000018  20983+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000E692 E3C0 B010 0021          00000010  20984+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000E698 E3E0 D008 0004          00000008  20985+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000E69E EB1C D020 0004          00000020  20986+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000E6A4 078E                              20987+         bcr 8,14                if same dsab, just return              01-DCCEP
0000E6A6 E3F0 D010 0024          00000010  20988+         stg 15,16(0,13)         save return code                       01-DCCEP
0000E6AC E300 D018 0024          00000018  20989+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000E6B2 E3F0 D090 0004          00000090  20990+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000E6B8 E3F0 F018 0004          00000018  20991+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000E6BE 47F0 F040               00000040  20992+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           20993+* End of Epilog
                                           20994 * * **** End of Epilogue
0000E6C8                                   20995          DS    0D
0000E6C8 000000C8                          20996 @FRAMESIZE_1667 DC F'200'
0000E6CC 00000000
0000E6D0 0000000000000000                  20997 @lit_1667_934 DC AD(rd_kafka_op_new0)
0000E6D8 0000000000000C80                  20998 @lit_1667_935 DC AD(rd_strdup)
0000E6E0 0000000000000000                  20999 @lit_1667_936 DC AD(rd_kafka_op_req)
0000E6E8 0000000000000000                  21000 @lit_1667_937 DC AD(rd_kafka_op_err_destroy)
                                           21001          DROP  12
                                           21002 *
                                           21003 *   DSECT for automatic variables in "rd_kafka_mock_broker_set_rack"
                                           21004 *      (FUNCTION #1667)
                                           21005 *
00000000                00000000 000000A8  21006 @AUTO#rd_kafka_mock_broker_set_rack DSECT
00000000                                   21007          DS    XL168
                                           21008 *
0000E6F0                00000000 00010480  21009 @CODE    CSECT
                                           21010 *
                                           21011 *
                                           21012 *
                                           21013 * ....... start of rd_kafka_mock_coordinator_set
                                           21014 rd_kafka_mock_coordinator_set ALIAS X'99846D92818692816D949683926D83969*
                                                                                                                           Page  421 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                                                69984899581A396996DA285A3'
0000E6F0                                   21015 @LNAME1668 DS  0H
0000E6F0 0000001D                          21016          DC    X'0000001D'
0000E6F4 99846D9281869281                  21017          DC    C'rd_kafka_mock_coordinator_set'
0000E711 00                                21018          DC    X'00'
                                           21019 rd_kafka_mock_coordinator_set DCCPRLG CINDEX=1668,BASER=12,FRAME=200,EN*
                                                                TRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1668
                                           21020          macro
                                           21021          dccextrn &m
                                           21022          gblc    &$dccext(1000)
                                           21023          gbla    &$dccexti
                                           21024          lcla    &i
                                           21025 &$dccext(&$dccexti+1) setc    '&m'
                                           21026 &i       seta    1
                                           21027 .loop    aif    (&i gt &$dccexti).around
                                           21028          aif    ('&$dccext(&i)' eq '&m').getout
                                           21029 &i       seta    &i+1
                                           21030          ago     .loop
                                           21031 .around  anop
                                           21032 &$dccexti seta &$dccexti+1
                                           21033          extrn  &m
                                           21034 .getout  anop
                                           21035          mend
0000E718                                   21036+$eye0329    ds    0d                                                    02-DCCCA
0000E718 C4C3C3                            21037+         dc cl3'DCC'                                                    02-DCCCA
0000E71B 01                                21038+         dc xl1'01' format one                                          02-DCCCA
0000E71C 00000000                          21039+         dc a(0)                                                        02-DCCCA
0000E720 000000000000E78A                  21040+         dc ad(@PER_1668)                                               02-DCCCA
0000E728 00000000000000C8                  21041+         dc ad(200)                                                     02-DCCCA
0000E730 0000000000000000                  21042+         dc ad(0)                                                       02-DCCCA
0000E738 0000000000001000                  21043+         dc ad(4096)                                                    02-DCCCA
0000E740 20                                21044+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000E741 03                                21045+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000E742 03                                21046+         dc al1(3)                                                      02-DCCCA
0000E743 08                                21047+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000E744 00                                21048+         dc bl.8'00000000'                                              02-DCCCA
0000E745 000000                            21049+         dc al3(0)                                                      02-DCCCA
0000E748 000000000000E6F0                  21050+         dc ad(@LNAME1668)                                              02-DCCCA
0000E750                                   21051+         ds 0d                                                          02-DCCCA
0000E750 000000000000E718                  21052+         dc ad($eye0329)                                                02-DCCCA
0000E758 0000000000000000                  21053+         dc ad(0)                                                       02-DCCCA
0000E760                                   21054+         ds    0d                                                       01-DCCPR
                                           21055+         entry rd_kafka_mock_coordinator_set                            01-DCCPR
0000E760                                   21056+rd_kafka_mock_coordinator_set ds 0d                                     01-DCCPR
0000E760                                   21057+@REGION_1668_1 ds 0h                                                    01-DCCPR
0000E760 EBEC D008 0024          00000008  21058+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000E766 E3E0 D088 0004          00000088  21059+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000E76C E3C0 D090 0004          00000090  21060+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000E772 B904 002E                         21061+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000E776 E3B0 C018 0004          00000018  21062+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000E77C A7EB 00C8               000000C8  21063+         aghi  14,200              increase by frame size               01-DCCPR
0000E780 E3E0 C020 0021          00000020  21064+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
                                                                                                                           Page  422 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E786 4720 B020               00000020  21065+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000E78A                                   21066+@PER_1668 ds   0h                                                       01-DCCPR
0000E78A EBDE 2080 0024          00000080  21067+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000E790 E3C0 2090 0024          00000090  21068+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000E796 B904 00D2                         21069+         lgr   13,2                set real frame pointer               01-DCCPR
0000E79A B904 00CF                         21070+         lgr   12,15               set base reg                         01-DCCPR
                        0000E760           21071+         using @REGION_1668_1,12                                        01-DCCPR
0000E79E B904 0031                         21072          LGR   3,1         ; ptr to parm area
                                           21073 * ******* End of Prologue
                                           21074 * *
                                           21075 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           21076 * KAFKA_OP_MOCK);
0000E7A2 D707 D0B0 D0B0 000000B0 000000B0  21077          XC    176(8,13),176(13)
0000E7A8 E548 D0B8 002D          000000B8  21078          MVGHI 184(13),45
0000E7AE 4110 D0B0               000000B0  21079          LA    1,176(0,13)
0000E7B2 E3F0 C140 0004          0000E8A0  21080          LG    15,@lit_1668_939 ; rd_kafka_op_new0
0000E7B8                                   21081 @@gen_label1331 DS    0H
0000E7B8 05EF                              21082          BALR  14,15
0000E7BA                                   21083 @@gen_label1332 DS    0H
0000E7BA B904 002F                         21084          LGR   2,15
                                           21085 * ***
                                           21086 * ***           rko->rko_u.mock.name = rd_strdup(key_type);
0000E7BE E3F0 3008 0004          00000008  21087          LG    15,8(0,3)   ; key_type
0000E7C4 E3F0 D0B0 0024          000000B0  21088          STG   15,176(0,13)
0000E7CA 4110 D0B0               000000B0  21089          LA    1,176(0,13)
0000E7CE E340 C148 0004          0000E8A8  21090          LG    4,@lit_1668_940 ; rd_strdup
0000E7D4 B904 00F4                         21091          LGR   15,4
0000E7D8                                   21092 @@gen_label1333 DS    0H
0000E7D8 05EF                              21093          BALR  14,15
0000E7DA                                   21094 @@gen_label1334 DS    0H
0000E7DA E3F0 2078 0024          00000078  21095          STG   15,120(0,2)
                                           21096 * ***           rko->rko_u.mock.str = rd_strdup(key);
0000E7E0 E3F0 3010 0004          00000010  21097          LG    15,16(0,3)  ; key
0000E7E6 E3F0 D0B0 0024          000000B0  21098          STG   15,176(0,13)
0000E7EC 4110 D0B0               000000B0  21099          LA    1,176(0,13)
0000E7F0 B904 00F4                         21100          LGR   15,4
0000E7F4                                   21101 @@gen_label1335 DS    0H
0000E7F4 05EF                              21102          BALR  14,15
0000E7F6                                   21103 @@gen_label1336 DS    0H
0000E7F6 E3F0 2080 0024          00000080  21104          STG   15,128(0,2)
                                           21105 * ***           rko->rko_u.mock.broker_id = broker_id;
0000E7FC 58F0 301C               0000001C  21106          L     15,28(0,3)  ; broker_id
0000E800 50F0 208C               0000008C  21107          ST    15,140(0,2) ; offset of broker_id in 0000081
                                           21108 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_COORD_SET;
0000E804 E54C 2070 0008          00000070  21109          MVHI  112(2),8    ; offset of rko_u in rd_kafka_op_s
                                           21110 * ***
                                           21111 * ***           return rd_kafka_op_err_destroy(
                                           21112 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000E80A E3F0 3000 0004          00000000  21113          LG    15,0(0,3)   ; mcluster
0000E810 E3F0 F0B8 0004          000000B8  21114          LG    15,184(0,15)
0000E816 E3F0 D0B0 0024          000000B0  21115          STG   15,176(0,13)
0000E81C E320 D0B8 0024          000000B8  21116          STG   2,184(0,13)
                                                                                                                           Page  423 
  Active Usings: @REGION_1668_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E822 E548 D0C0 FFFF          000000C0  21117          MVGHI 192(13),-1
0000E828 4110 D0B0               000000B0  21118          LA    1,176(0,13)
0000E82C E3F0 C150 0004          0000E8B0  21119          LG    15,@lit_1668_942 ; rd_kafka_op_req
0000E832                                   21120 @@gen_label1337 DS    0H
0000E832 05EF                              21121          BALR  14,15
0000E834                                   21122 @@gen_label1338 DS    0H
0000E834 E3F0 D0B0 0024          000000B0  21123          STG   15,176(0,13)
0000E83A 4110 D0B0               000000B0  21124          LA    1,176(0,13)
0000E83E E3F0 C158 0004          0000E8B8  21125          LG    15,@lit_1668_943 ; rd_kafka_op_err_destroy
0000E844                                   21126 @@gen_label1339 DS    0H
0000E844 05EF                              21127          BALR  14,15
0000E846                                   21128 @@gen_label1340 DS    0H
0000E846 B914 00FF                         21129          LGFR  15,15
                                           21130 * ***   }
                                           21131 * * **** Start of Epilogue
                                           21132          DCCEPIL
0000E84A                                   21133+         ds 0h                                                          01-DCCEP
                                           21134+* Epilog
0000E84A D707 D088 D088 00000088 00000088  21135+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E850 E3D0 D080 0004          00000080  21136+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E856 E3C0 D090 0004          00000090  21137+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000E85C E3B0 C018 0004          00000018  21138+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000E862 E3C0 B010 0021          00000010  21139+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000E868 E3E0 D008 0004          00000008  21140+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000E86E EB1C D020 0004          00000020  21141+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000E874 078E                              21142+         bcr 8,14                if same dsab, just return              01-DCCEP
0000E876 E3F0 D010 0024          00000010  21143+         stg 15,16(0,13)         save return code                       01-DCCEP
0000E87C E300 D018 0024          00000018  21144+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000E882 E3F0 D090 0004          00000090  21145+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000E888 E3F0 F018 0004          00000018  21146+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000E88E 47F0 F040               00000040  21147+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           21148+* End of Epilog
                                           21149 * * **** End of Epilogue
0000E898                                   21150          DS    0D
0000E898 000000C8                          21151 @FRAMESIZE_1668 DC F'200'
0000E89C 00000000
0000E8A0 0000000000000000                  21152 @lit_1668_939 DC AD(rd_kafka_op_new0)
0000E8A8 0000000000000C80                  21153 @lit_1668_940 DC AD(rd_strdup)
0000E8B0 0000000000000000                  21154 @lit_1668_942 DC AD(rd_kafka_op_req)
0000E8B8 0000000000000000                  21155 @lit_1668_943 DC AD(rd_kafka_op_err_destroy)
                                           21156          DROP  12
                                           21157 *
                                           21158 *   DSECT for automatic variables in "rd_kafka_mock_coordinator_set"
                                           21159 *      (FUNCTION #1668)
                                           21160 *
00000000                00000000 000000A8  21161 @AUTO#rd_kafka_mock_coordinator_set DSECT
00000000                                   21162          DS    XL168
                                           21163 *
0000E8C0                00000000 00010480  21164 @CODE    CSECT
                                           21165 *
                                           21166 *
                                           21167 *
                                                                                                                           Page  424 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           21168 * ....... start of rd_kafka_mock_set_apiversion
                                           21169 rd_kafka_mock_set_apiversion ALIAS X'99846D92818692816D949683926DA285A3*
                                                                6D819789A58599A2899695'
0000E8C0                                   21170 @LNAME1669 DS  0H
0000E8C0 0000001C                          21171          DC    X'0000001C'
0000E8C4 99846D9281869281                  21172          DC    C'rd_kafka_mock_set_apiversion'
0000E8E0 00                                21173          DC    X'00'
                                           21174 rd_kafka_mock_set_apiversion DCCPRLG CINDEX=1669,BASER=12,FRAME=200,ENT*
                                                                RY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1669
                                           21175          macro
                                           21176          dccextrn &m
                                           21177          gblc    &$dccext(1000)
                                           21178          gbla    &$dccexti
                                           21179          lcla    &i
                                           21180 &$dccext(&$dccexti+1) setc    '&m'
                                           21181 &i       seta    1
                                           21182 .loop    aif    (&i gt &$dccexti).around
                                           21183          aif    ('&$dccext(&i)' eq '&m').getout
                                           21184 &i       seta    &i+1
                                           21185          ago     .loop
                                           21186 .around  anop
                                           21187 &$dccexti seta &$dccexti+1
                                           21188          extrn  &m
                                           21189 .getout  anop
                                           21190          mend
0000E8E8                                   21191+$eye0332    ds    0d                                                    02-DCCCA
0000E8E8 C4C3C3                            21192+         dc cl3'DCC'                                                    02-DCCCA
0000E8EB 01                                21193+         dc xl1'01' format one                                          02-DCCCA
0000E8EC 00000000                          21194+         dc a(0)                                                        02-DCCCA
0000E8F0 000000000000E95A                  21195+         dc ad(@PER_1669)                                               02-DCCCA
0000E8F8 00000000000000C8                  21196+         dc ad(200)                                                     02-DCCCA
0000E900 0000000000000000                  21197+         dc ad(0)                                                       02-DCCCA
0000E908 0000000000001000                  21198+         dc ad(4096)                                                    02-DCCCA
0000E910 20                                21199+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000E911 03                                21200+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000E912 03                                21201+         dc al1(3)                                                      02-DCCCA
0000E913 08                                21202+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000E914 00                                21203+         dc bl.8'00000000'                                              02-DCCCA
0000E915 000000                            21204+         dc al3(0)                                                      02-DCCCA
0000E918 000000000000E8C0                  21205+         dc ad(@LNAME1669)                                              02-DCCCA
0000E920                                   21206+         ds 0d                                                          02-DCCCA
0000E920 000000000000E8E8                  21207+         dc ad($eye0332)                                                02-DCCCA
0000E928 0000000000000000                  21208+         dc ad(0)                                                       02-DCCCA
0000E930                                   21209+         ds    0d                                                       01-DCCPR
                                           21210+         entry rd_kafka_mock_set_apiversion                             01-DCCPR
0000E930                                   21211+rd_kafka_mock_set_apiversion ds 0d                                      01-DCCPR
0000E930                                   21212+@REGION_1669_1 ds 0h                                                    01-DCCPR
0000E930 EBEC D008 0024          00000008  21213+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000E936 E3E0 D088 0004          00000088  21214+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000E93C E3C0 D090 0004          00000090  21215+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000E942 B904 002E                         21216+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000E946 E3B0 C018 0004          00000018  21217+         lg    11,24(0,12)         get dvt address                      01-DCCPR
                                                                                                                           Page  425 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E94C A7EB 00C8               000000C8  21218+         aghi  14,200              increase by frame size               01-DCCPR
0000E950 E3E0 C020 0021          00000020  21219+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000E956 4720 B020               00000020  21220+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000E95A                                   21221+@PER_1669 ds   0h                                                       01-DCCPR
0000E95A EBDE 2080 0024          00000080  21222+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000E960 E3C0 2090 0024          00000090  21223+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000E966 B904 00D2                         21224+         lgr   13,2                set real frame pointer               01-DCCPR
0000E96A B904 00CF                         21225+         lgr   12,15               set base reg                         01-DCCPR
                        0000E930           21226+         using @REGION_1669_1,12                                        01-DCCPR
0000E96E B904 0021                         21227          LGR   2,1         ; ptr to parm area
                                           21228 * ******* End of Prologue
                                           21229 * *
                                           21230 * ***           rd_kafka_op_t *rko = rd_kafka_op_new0(((void *)0), RD_\
                                           21231 * KAFKA_OP_MOCK);
0000E972 D707 D0B0 D0B0 000000B0 000000B0  21232          XC    176(8,13),176(13)
0000E978 E548 D0B8 002D          000000B8  21233          MVGHI 184(13),45
0000E97E 4110 D0B0               000000B0  21234          LA    1,176(0,13)
0000E982 E3F0 C110 0004          0000EA40  21235          LG    15,@lit_1669_945 ; rd_kafka_op_new0
0000E988                                   21236 @@gen_label1341 DS    0H
0000E988 05EF                              21237          BALR  14,15
0000E98A                                   21238 @@gen_label1342 DS    0H
                                           21239 * ***
                                           21240 * ***           rko->rko_u.mock.partition = ApiKey;
0000E98A 4810 200E               0000000E  21241          LH    1,14(0,2)   ; ApiKey
0000E98E 5010 F088               00000088  21242          ST    1,136(0,15) ; offset of partition in 0000081
                                           21243 * ***           rko->rko_u.mock.lo = MinVersion;
0000E992 E310 2016 0015          00000016  21244          LGH   1,22(0,2)   ; MinVersion
0000E998 E310 F090 0024          00000090  21245          STG   1,144(0,15) ; offset of lo in 0000081
                                           21246 * ***           rko->rko_u.mock.hi = MaxVersion;
0000E99E E310 201E 0015          0000001E  21247          LGH   1,30(0,2)   ; MaxVersion
0000E9A4 E310 F098 0024          00000098  21248          STG   1,152(0,15) ; offset of hi in 0000081
                                           21249 * ***           rko->rko_u.mock.cmd = RD_KAFKA_MOCK_CMD_APIVERSION_SET\
                                           21250 * ;
0000E9AA E54C F070 0009          00000070  21251          MVHI  112(15),9   ; offset of rko_u in rd_kafka_op_s
                                           21252 * ***
                                           21253 * ***           return rd_kafka_op_err_destroy(
                                           21254 * ***                   rd_kafka_op_req(mcluster->ops, rko, -1));
0000E9B0 E310 2000 0004          00000000  21255          LG    1,0(0,2)    ; mcluster
0000E9B6 E310 10B8 0004          000000B8  21256          LG    1,184(0,1)
0000E9BC E310 D0B0 0024          000000B0  21257          STG   1,176(0,13)
0000E9C2 E3F0 D0B8 0024          000000B8  21258          STG   15,184(0,13)
0000E9C8 E548 D0C0 FFFF          000000C0  21259          MVGHI 192(13),-1
0000E9CE 4110 D0B0               000000B0  21260          LA    1,176(0,13)
0000E9D2 E3F0 C118 0004          0000EA48  21261          LG    15,@lit_1669_946 ; rd_kafka_op_req
0000E9D8                                   21262 @@gen_label1343 DS    0H
0000E9D8 05EF                              21263          BALR  14,15
0000E9DA                                   21264 @@gen_label1344 DS    0H
0000E9DA E3F0 D0B0 0024          000000B0  21265          STG   15,176(0,13)
0000E9E0 4110 D0B0               000000B0  21266          LA    1,176(0,13)
0000E9E4 E3F0 C120 0004          0000EA50  21267          LG    15,@lit_1669_947 ; rd_kafka_op_err_destroy
0000E9EA                                   21268 @@gen_label1345 DS    0H
0000E9EA 05EF                              21269          BALR  14,15
                                                                                                                           Page  426 
  Active Usings: @REGION_1669_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000E9EC                                   21270 @@gen_label1346 DS    0H
0000E9EC B914 00FF                         21271          LGFR  15,15
                                           21272 * ***   }
                                           21273 * * **** Start of Epilogue
                                           21274          DCCEPIL
0000E9F0                                   21275+         ds 0h                                                          01-DCCEP
                                           21276+* Epilog
0000E9F0 D707 D088 D088 00000088 00000088  21277+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000E9F6 E3D0 D080 0004          00000080  21278+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000E9FC E3C0 D090 0004          00000090  21279+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000EA02 E3B0 C018 0004          00000018  21280+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000EA08 E3C0 B010 0021          00000010  21281+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000EA0E E3E0 D008 0004          00000008  21282+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000EA14 EB1C D020 0004          00000020  21283+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000EA1A 078E                              21284+         bcr 8,14                if same dsab, just return              01-DCCEP
0000EA1C E3F0 D010 0024          00000010  21285+         stg 15,16(0,13)         save return code                       01-DCCEP
0000EA22 E300 D018 0024          00000018  21286+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000EA28 E3F0 D090 0004          00000090  21287+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000EA2E E3F0 F018 0004          00000018  21288+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000EA34 47F0 F040               00000040  21289+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           21290+* End of Epilog
                                           21291 * * **** End of Epilogue
0000EA38                                   21292          DS    0D
0000EA38 000000C8                          21293 @FRAMESIZE_1669 DC F'200'
0000EA3C 00000000
0000EA40 0000000000000000                  21294 @lit_1669_945 DC AD(rd_kafka_op_new0)
0000EA48 0000000000000000                  21295 @lit_1669_946 DC AD(rd_kafka_op_req)
0000EA50 0000000000000000                  21296 @lit_1669_947 DC AD(rd_kafka_op_err_destroy)
                                           21297          DROP  12
                                           21298 *
                                           21299 *   DSECT for automatic variables in "rd_kafka_mock_set_apiversion"
                                           21300 *      (FUNCTION #1669)
                                           21301 *
00000000                00000000 000000A8  21302 @AUTO#rd_kafka_mock_set_apiversion DSECT
00000000                                   21303          DS    XL168
                                           21304 *
0000EA58                00000000 00010480  21305 @CODE    CSECT
                                           21306 *
                                           21307 *
                                           21308 *
                                           21309 * ....... start of rd_kafka_mock_cluster_cmd
0000EA58                                   21310 @LNAME2016 DS  0H
0000EA58 00000019                          21311          DC    X'00000019'
0000EA5C 99846D9281869281                  21312          DC    C'rd_kafka_mock_cluster_cmd'
0000EA75 00                                21313          DC    X'00'
                                           21314 rd_kafka_mock_cluster_cmd DCCPRLG CINDEX=2016,BASER=12,FRAME=264,ENTRY=*
                                                                NO,ARCH=ZARCH,LNAMEADDR=@LNAME2016
                                           21315          macro
                                           21316          dccextrn &m
                                           21317          gblc    &$dccext(1000)
                                           21318          gbla    &$dccexti
                                           21319          lcla    &i
                                                                                                                           Page  427 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           21320 &$dccext(&$dccexti+1) setc    '&m'
                                           21321 &i       seta    1
                                           21322 .loop    aif    (&i gt &$dccexti).around
                                           21323          aif    ('&$dccext(&i)' eq '&m').getout
                                           21324 &i       seta    &i+1
                                           21325          ago     .loop
                                           21326 .around  anop
                                           21327 &$dccexti seta &$dccexti+1
                                           21328          extrn  &m
                                           21329 .getout  anop
                                           21330          mend
0000EA78                                   21331+$eye0335    ds    0d                                                    02-DCCCA
0000EA78 C4C3C3                            21332+         dc cl3'DCC'                                                    02-DCCCA
0000EA7B 01                                21333+         dc xl1'01' format one                                          02-DCCCA
0000EA7C 00000000                          21334+         dc a(0)                                                        02-DCCCA
0000EA80 000000000000EAEA                  21335+         dc ad(@PER_2016)                                               02-DCCCA
0000EA88 0000000000000108                  21336+         dc ad(264)                                                     02-DCCCA
0000EA90 0000000000000000                  21337+         dc ad(0)                                                       02-DCCCA
0000EA98 0000000000001000                  21338+         dc ad(4096)                                                    02-DCCCA
0000EAA0 20                                21339+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000EAA1 03                                21340+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000EAA2 03                                21341+         dc al1(3)                                                      02-DCCCA
0000EAA3 08                                21342+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000EAA4 00                                21343+         dc bl.8'00000000'                                              02-DCCCA
0000EAA5 000000                            21344+         dc al3(0)                                                      02-DCCCA
0000EAA8 000000000000EA58                  21345+         dc ad(@LNAME2016)                                              02-DCCCA
0000EAB0                                   21346+         ds 0d                                                          02-DCCCA
0000EAB0 000000000000EA78                  21347+         dc ad($eye0335)                                                02-DCCCA
0000EAB8 0000000000000000                  21348+         dc ad(0)                                                       02-DCCCA
0000EAC0                                   21349+         ds    0d                                                       01-DCCPR
0000EAC0                                   21350+rd_kafka_mock_cluster_cmd ds 0d                                         01-DCCPR
0000EAC0                                   21351+@REGION_2016_1 ds 0h                                                    01-DCCPR
0000EAC0 EBEC D008 0024          00000008  21352+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000EAC6 E3E0 D088 0004          00000088  21353+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000EACC E3C0 D090 0004          00000090  21354+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000EAD2 B904 002E                         21355+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000EAD6 E3B0 C018 0004          00000018  21356+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000EADC A7EB 0108               00000108  21357+         aghi  14,264              increase by frame size               01-DCCPR
0000EAE0 E3E0 C020 0021          00000020  21358+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000EAE6 4720 B020               00000020  21359+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000EAEA                                   21360+@PER_2016 ds   0h                                                       01-DCCPR
0000EAEA EBDE 2080 0024          00000080  21361+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000EAF0 E3C0 2090 0024          00000090  21362+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000EAF6 B904 00D2                         21363+         lgr   13,2                set real frame pointer               01-DCCPR
0000EAFA B904 00CF                         21364+         lgr   12,15               set base reg                         01-DCCPR
                        0000EAC0           21365+         using @REGION_2016_1,12                                        01-DCCPR
                                           21366 * ******* End of Prologue
                                           21367 * *
0000EAFE EB45 1000 0004          00000000  21368          LMG   4,5,0(1)    ; mcluster
                                           21369 * ***           rd_kafka_mock_topic_t *mtopic;
                                           21370 * ***           rd_kafka_mock_partition_t *mpart;
                                           21371 * ***           rd_kafka_mock_broker_t *mrkb;
                                                                                                                           Page  428 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           21372 * ***
                                           21373 * ***           switch (rko->rko_u.mock.cmd)
0000EB04 47F0 C6AE               0000F16E  21374          B     @L1355
0000EB08                                   21375          DS    0D
0000EB08 00000108                          21376 @FRAMESIZE_2016 DC F'264'
0000EB0C 00000000
0000EB10 0000000000005898                  21377 @lit_2016_949 DC AD(rd_kafka_mock_topic_find)
0000EB18 00000000000055E0                  21378 @lit_2016_951 DC AD(rd_kafka_mock_topic_new)
0000EB20 0000000000005CB8                  21379 @lit_2016_953 DC AD(rd_kafka_mock_topic_get)
0000EB28 0000000000005E38                  21380 @lit_2016_954 DC AD(rd_kafka_mock_partition_get)
0000EB30 0000000000003638                  21381 @lit_2016_956 DC AD(rd_kafka_mock_broker_find)
0000EB38 0000000000000000                  21382 @lit_2016_961 DC AD(rd_kafka_log0)
0000EB40 0000000000010840                  21383 @lit_2016_960 DC AD(@strings@)
0000EB48 0000000000004700                  21384 @lit_2016_962 DC AD(rd_kafka_mock_partition_set_leader0)
0000EB50 000000000000B6F0                  21385 @lit_2016_976 DC AD(rd_kafka_mock_broker_close_all)
0000EB58 000000000000A408                  21386 @lit_2016_979 DC AD(rd_kafka_mock_broker_connections_write_out)
0000EB60 0000000000000B78                  21387 @lit_2016_982 DC AD(rd_free)
0000EB68 0000000000000C80                  21388 @lit_2016_983 DC AD(rd_strdup)
0000EB70 000000000000C858                  21389 @lit_2016_985 DC AD(rd_kafka_mock_coord_set)
0000EB78 0000000000000000                  21390 @lit_2016_990 DC AD(__assert)
0000EB80 0000000000010480                  21391 @lit_2016_989 DC AD(@DATA)
0000EB88 00000732                          21392 @lit_region_diff_2016_1_2  DC A(@REGION_2016_2-@REGION_2016_1)
                                           21393 * ***           {
                                           21394 * ***           case RD_KAFKA_MOCK_CMD_TOPIC_CREATE:
0000EB8C                                   21395 @L1357   DS    0H
                                           21396 * ***                   if (rd_kafka_mock_topic_find(mcluster, rko->rk\
                                           21397 * o_u.mock.name))
0000EB8C E340 D0B0 0024          000000B0  21398          STG   4,176(0,13)
0000EB92 E3F0 5078 0004          00000078  21399          LG    15,120(0,5)
0000EB98 E3F0 D0B8 0024          000000B8  21400          STG   15,184(0,13)
0000EB9E 4110 D0B0               000000B0  21401          LA    1,176(0,13)
0000EBA2 E3F0 C050 0004          0000EB10  21402          LG    15,@lit_2016_949 ; rd_kafka_mock_topic_find
0000EBA8                                   21403 @@gen_label1347 DS    0H
0000EBA8 05EF                              21404          BALR  14,15
0000EBAA                                   21405 @@gen_label1348 DS    0H
0000EBAA B902 00FF                         21406          LTGR  15,15
0000EBAE 4780 C0FA               0000EBBA  21407          BZ    @L1358
                                           21408 * ***                           return RD_KAFKA_RESP_ERR_TOPIC_ALREADY\
                                           21409 * _EXISTS;
0000EBB2 A7F9 0024               00000024  21410          LGHI  15,36       ; 36
0000EBB6 47F0 C72C               0000F1EC  21411          B     @ret_lab_2016
0000EBBA                                   21412 @L1358   DS    0H
                                           21413 * ***
                                           21414 * ***                   if (!rd_kafka_mock_topic_new(mcluster, rko->rk\
                                           21415 * o_u.mock.name,
                                           21416 * ***
                                           21417 * ***                                                (int)rko->rko_u.m\
                                           21418 * ock.lo,
                                           21419 * ***
                                           21420 * ***                                                (int)rko->rko_u.m\
                                           21421 * ock.hi))
0000EBBA E340 D0B0 0024          000000B0  21422          STG   4,176(0,13)
                                                                                                                           Page  429 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000EBC0 E3F0 5078 0004          00000078  21423          LG    15,120(0,5)
0000EBC6 E3F0 D0B8 0024          000000B8  21424          STG   15,184(0,13)
0000EBCC E3F0 5094 0014          00000094  21425          LGF   15,148(0,5)
0000EBD2 E3F0 D0C0 0024          000000C0  21426          STG   15,192(0,13)
0000EBD8 E3F0 509C 0014          0000009C  21427          LGF   15,156(0,5)
0000EBDE E3F0 D0C8 0024          000000C8  21428          STG   15,200(0,13)
0000EBE4 4110 D0B0               000000B0  21429          LA    1,176(0,13)
0000EBE8 E3F0 C058 0004          0000EB18  21430          LG    15,@lit_2016_951 ; rd_kafka_mock_topic_new
0000EBEE                                   21431 @@gen_label1350 DS    0H
0000EBEE 05EF                              21432          BALR  14,15
0000EBF0                                   21433 @@gen_label1351 DS    0H
0000EBF0 B902 00FF                         21434          LTGR  15,15
0000EBF4 4770 C728               0000F1E8  21435          BNZ   @L1356
                                           21436 * ***                           return RD_KAFKA_RESP_ERR_TOPIC_EXCEPTI\
                                           21437 * ON;
0000EBF8 A7F9 0011               00000011  21438          LGHI  15,17       ; 17
0000EBFC 47F0 C72C               0000F1EC  21439          B     @ret_lab_2016
                                           21440 * ***                   break;
                                           21441 * ***
                                           21442 * ***           case RD_KAFKA_MOCK_CMD_TOPIC_SET_ERROR:
0000EC00                                   21443 @L1360   DS    0H
                                           21444 * ***                   mtopic = rd_kafka_mock_topic_get(mcluster,
                                           21445 * ***                                                    rko->rko_u.mo\
                                           21446 * ck.name, -1);
0000EC00 E340 D0B0 0024          000000B0  21447          STG   4,176(0,13)
0000EC06 E3F0 5078 0004          00000078  21448          LG    15,120(0,5)
0000EC0C E3F0 D0B8 0024          000000B8  21449          STG   15,184(0,13)
0000EC12 E548 D0C0 FFFF          000000C0  21450          MVGHI 192(13),-1
0000EC18 4110 D0B0               000000B0  21451          LA    1,176(0,13)
0000EC1C E3F0 C060 0004          0000EB20  21452          LG    15,@lit_2016_953 ; rd_kafka_mock_topic_get
0000EC22                                   21453 @@gen_label1353 DS    0H
0000EC22 05EF                              21454          BALR  14,15
0000EC24                                   21455 @@gen_label1354 DS    0H
                                           21456 * ***                   mtopic->err = rko->rko_u.mock.err;
0000EC24 5810 5074               00000074  21457          L     1,116(0,5)  ; offset of err in 0000081
0000EC28 5010 F024               00000024  21458          ST    1,36(0,15)  ; offset of err in rd_kafka_mock_topic_s
                                           21459 * ***                   break;
0000EC2C 47F0 C728               0000F1E8  21460          B     @L1356
                                           21461 * ***
                                           21462 * ***           case RD_KAFKA_MOCK_CMD_PART_SET_LEADER:
0000EC30                                   21463 @L1361   DS    0H
                                           21464 * ***                   mpart = rd_kafka_mock_partition_get(mcluster,
                                           21465 * ***                                                       rko->rko_u\
                                           21466 * .mock.name,
                                           21467 * ***                                                       rko->rko_u\
                                           21468 * .mock.partition);
0000EC30 E340 D0B0 0024          000000B0  21469          STG   4,176(0,13)
0000EC36 E3F0 5078 0004          00000078  21470          LG    15,120(0,5)
0000EC3C E3F0 D0B8 0024          000000B8  21471          STG   15,184(0,13)
0000EC42 E3F0 5088 0014          00000088  21472          LGF   15,136(0,5)
0000EC48 E3F0 D0C0 0024          000000C0  21473          STG   15,192(0,13)
0000EC4E 4110 D0B0               000000B0  21474          LA    1,176(0,13)
                                                                                                                           Page  430 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000EC52 E3F0 C068 0004          0000EB28  21475          LG    15,@lit_2016_954 ; rd_kafka_mock_partition_get
0000EC58                                   21476 @@gen_label1355 DS    0H
0000EC58 05EF                              21477          BALR  14,15
0000EC5A                                   21478 @@gen_label1356 DS    0H
0000EC5A B902 002F                         21479          LTGR  2,15        ; mpart
                                           21480 * ***                   if (!mpart)
0000EC5E 4770 C1AA               0000EC6A  21481          BNZ   @L1362
                                           21482 * ***                           return RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC\
                                           21483 * _OR_PART;
0000EC62 A7F9 0003               00000003  21484          LGHI  15,3        ; 3
0000EC66 47F0 C72C               0000F1EC  21485          B     @ret_lab_2016
0000EC6A                                   21486 @L1362   DS    0H
                                           21487 * ***
                                           21488 * ***                   if (rko->rko_u.mock.broker_id != -1) {
0000EC6A E55C 508C FFFF          0000008C  21489          CHSI  140(5),-1
0000EC70 4780 C1E2               0000ECA2  21490          BE    @L1363
                                           21491 * ***                           mrkb = rd_kafka_mock_broker_find(
                                           21492 * ***                                   mcluster, rko->rko_u.mock.brok\
                                           21493 * er_id);
0000EC74 E340 D0B0 0024          000000B0  21494          STG   4,176(0,13)
0000EC7A E3F0 508C 0014          0000008C  21495          LGF   15,140(0,5)
0000EC80 E3F0 D0B8 0024          000000B8  21496          STG   15,184(0,13)
0000EC86 4110 D0B0               000000B0  21497          LA    1,176(0,13)
0000EC8A E3F0 C070 0004          0000EB30  21498          LG    15,@lit_2016_956 ; rd_kafka_mock_broker_find
0000EC90                                   21499 @@gen_label1359 DS    0H
0000EC90 05EF                              21500          BALR  14,15
0000EC92                                   21501 @@gen_label1360 DS    0H
0000EC92 B902 003F                         21502          LTGR  3,15        ; mrkb
                                           21503 * ***                           if (!mrkb)
0000EC96 4770 C1E6               0000ECA6  21504          BNZ   @L1366
                                           21505 * ***                                   return RD_KAFKA_RESP_ERR_BROKE\
                                           21506 * R_NOT_AVAILABLE;
0000EC9A A7F9 0008               00000008  21507          LGHI  15,8        ; 8
0000EC9E 47F0 C72C               0000F1EC  21508          B     @ret_lab_2016
                                           21509 * ***                   } else {
0000ECA2                                   21510 @L1363   DS    0H
                                           21511 * ***                           mrkb = ((void *)0);
0000ECA2 A739 0000               00000000  21512          LGHI  3,0         ; 0
                                           21513 * ***                   }
0000ECA6                                   21514 @L1365   DS    0H
                                           21515 * ***
                                           21516 * ***                   do { if ((((mcluster->rk)->rk_conf.debug & (0x\
                                           21517 * 10000)))) rd_kafka_log0(&mcluster->rk->rk_conf,mcluster->rk,((void *\
                                           21518 * )0), 7,(0x10000), "MOCK","Set %s [%" "d" "] leader to %" "d", rko->r\
                                           21519 * ko_u.mock.name, rko->rko_u.mock.partition, rko->rko_u.mock.broker_id\
                                           21520 * ); } while (0);
0000ECA6                                   21521 @L1366   DS    0H
0000ECA6 E3F0 4020 0004          00000020  21522          LG    15,32(0,4)  ; offset of rk in rd_kafka_mock_cluster_s
0000ECAC 9101 F321      00000321 00000001  21523          TM    801(15),1
0000ECB0 4780 C272               0000ED32  21524          BZ    @L1369
0000ECB4 E3F0 4020 0004          00000020  21525          LG    15,32(0,4)  ; offset of rk in rd_kafka_mock_cluster_s
0000ECBA 41F0 F210               00000210  21526          LA    15,528(0,15)
                                                                                                                           Page  431 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000ECBE E3F0 D0B0 0024          000000B0  21527          STG   15,176(0,13)
0000ECC4 E3F0 4020 0004          00000020  21528          LG    15,32(0,4)
0000ECCA E3F0 D0B8 0024          000000B8  21529          STG   15,184(0,13)
0000ECD0 D707 D0C0 D0C0 000000C0 000000C0  21530          XC    192(8,13),192(13)
0000ECD6 E548 D0C8 0007          000000C8  21531          MVGHI 200(13),7
0000ECDC C0FF 0001 0000                    21532          LLILF 15,X'00010000' ; 65536
0000ECE2 E3F0 D0D0 0024          000000D0  21533          STG   15,208(0,13)
0000ECE8 E3F0 C080 0004          0000EB40  21534          LG    15,@lit_2016_960
0000ECEE 4110 F15E               0000015E  21535          LA    1,350(0,15)
0000ECF2 E310 D0D8 0024          000000D8  21536          STG   1,216(0,13)
0000ECF8 41F0 F856               00000856  21537          LA    15,2134(0,15)
0000ECFC E3F0 D0E0 0024          000000E0  21538          STG   15,224(0,13)
0000ED02 E3F0 5078 0004          00000078  21539          LG    15,120(0,5)
0000ED08 E3F0 D0E8 0024          000000E8  21540          STG   15,232(0,13)
0000ED0E E3F0 5088 0014          00000088  21541          LGF   15,136(0,5)
0000ED14 E3F0 D0F0 0024          000000F0  21542          STG   15,240(0,13)
0000ED1A E3F0 508C 0014          0000008C  21543          LGF   15,140(0,5)
0000ED20 E3F0 D0F8 0024          000000F8  21544          STG   15,248(0,13)
0000ED26 4110 D0B0               000000B0  21545          LA    1,176(0,13)
0000ED2A E3F0 C078 0004          0000EB38  21546          LG    15,@lit_2016_961 ; rd_kafka_log0
0000ED30                                   21547 @@gen_label1363 DS    0H
0000ED30 05EF                              21548          BALR  14,15
0000ED32                                   21549 @@gen_label1364 DS    0H
0000ED32                                   21550 @L1369   DS    0H
                                           21551 * ***
                                           21552 * ***
                                           21553 * ***
                                           21554 * ***
                                           21555 * ***                   rd_kafka_mock_partition_set_leader0(mpart, mrk\
                                           21556 * b);
0000ED32 EB23 D0B0 0024          000000B0  21557          STMG  2,3,176(13)
0000ED38 4110 D0B0               000000B0  21558          LA    1,176(0,13)
0000ED3C E3F0 C088 0004          0000EB48  21559          LG    15,@lit_2016_962 ; rd_kafka_mock_partition_set_leader0
0000ED42                                   21560 @@gen_label1365 DS    0H
0000ED42 05EF                              21561          BALR  14,15
0000ED44                                   21562 @@gen_label1366 DS    0H
                                           21563 * ***                   break;
0000ED44 47F0 C728               0000F1E8  21564          B     @L1356
                                           21565 * ***
                                           21566 * ***           case RD_KAFKA_MOCK_CMD_PART_SET_FOLLOWER:
0000ED48                                   21567 @L1370   DS    0H
                                           21568 * ***                   mpart = rd_kafka_mock_partition_get(mcluster,
                                           21569 * ***                                                       rko->rko_u\
                                           21570 * .mock.name,
                                           21571 * ***                                                       rko->rko_u\
                                           21572 * .mock.partition);
0000ED48 E340 D0B0 0024          000000B0  21573          STG   4,176(0,13)
0000ED4E E3F0 5078 0004          00000078  21574          LG    15,120(0,5)
0000ED54 E3F0 D0B8 0024          000000B8  21575          STG   15,184(0,13)
0000ED5A E3F0 5088 0014          00000088  21576          LGF   15,136(0,5)
0000ED60 E3F0 D0C0 0024          000000C0  21577          STG   15,192(0,13)
0000ED66 4110 D0B0               000000B0  21578          LA    1,176(0,13)
                                                                                                                           Page  432 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000ED6A E3F0 C068 0004          0000EB28  21579          LG    15,@lit_2016_954 ; rd_kafka_mock_partition_get
0000ED70                                   21580 @@gen_label1367 DS    0H
0000ED70 05EF                              21581          BALR  14,15
0000ED72                                   21582 @@gen_label1368 DS    0H
0000ED72 B902 002F                         21583          LTGR  2,15        ; mpart
                                           21584 * ***                   if (!mpart)
0000ED76 4770 C2C2               0000ED82  21585          BNZ   @L1372
                                           21586 * ***                           return RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC\
                                           21587 * _OR_PART;
0000ED7A A7F9 0003               00000003  21588          LGHI  15,3        ; 3
0000ED7E 47F0 C72C               0000F1EC  21589          B     @ret_lab_2016
                                           21590 * ***
                                           21591 * ***                   do { if ((((mcluster->rk)->rk_conf.debug & (0x\
                                           21592 * 10000)))) rd_kafka_log0(&mcluster->rk->rk_conf,mcluster->rk,((void *\
                                           21593 * )0), 7,(0x10000), "MOCK","Set %s [%" "d" "] preferred follower " "to\
                                           21594 *  %" "d", rko->rko_u.mock.name, rko->rko_u.mock.partition, rko->rko_u\
                                           21595 * .mock.broker_id); } while (0);
0000ED82                                   21596 @L1372   DS    0H
0000ED82 E3F0 4020 0004          00000020  21597          LG    15,32(0,4)  ; offset of rk in rd_kafka_mock_cluster_s
0000ED88 9101 F321      00000321 00000001  21598          TM    801(15),1
0000ED8C 4780 C34E               0000EE0E  21599          BZ    @L1375
0000ED90 E3F0 4020 0004          00000020  21600          LG    15,32(0,4)  ; offset of rk in rd_kafka_mock_cluster_s
0000ED96 41F0 F210               00000210  21601          LA    15,528(0,15)
0000ED9A E3F0 D0B0 0024          000000B0  21602          STG   15,176(0,13)
0000EDA0 E3F0 4020 0004          00000020  21603          LG    15,32(0,4)
0000EDA6 E3F0 D0B8 0024          000000B8  21604          STG   15,184(0,13)
0000EDAC D707 D0C0 D0C0 000000C0 000000C0  21605          XC    192(8,13),192(13)
0000EDB2 E548 D0C8 0007          000000C8  21606          MVGHI 200(13),7
0000EDB8 C0FF 0001 0000                    21607          LLILF 15,X'00010000' ; 65536
0000EDBE E3F0 D0D0 0024          000000D0  21608          STG   15,208(0,13)
0000EDC4 E3F0 C080 0004          0000EB40  21609          LG    15,@lit_2016_960
0000EDCA 4110 F15E               0000015E  21610          LA    1,350(0,15)
0000EDCE E310 D0D8 0024          000000D8  21611          STG   1,216(0,13)
0000EDD4 41F0 F870               00000870  21612          LA    15,2160(0,15)
0000EDD8 E3F0 D0E0 0024          000000E0  21613          STG   15,224(0,13)
0000EDDE E3F0 5078 0004          00000078  21614          LG    15,120(0,5)
0000EDE4 E3F0 D0E8 0024          000000E8  21615          STG   15,232(0,13)
0000EDEA E3F0 5088 0014          00000088  21616          LGF   15,136(0,5)
0000EDF0 E3F0 D0F0 0024          000000F0  21617          STG   15,240(0,13)
0000EDF6 E3F0 508C 0014          0000008C  21618          LGF   15,140(0,5)
0000EDFC E3F0 D0F8 0024          000000F8  21619          STG   15,248(0,13)
0000EE02 4110 D0B0               000000B0  21620          LA    1,176(0,13)
0000EE06 E3F0 C078 0004          0000EB38  21621          LG    15,@lit_2016_961 ; rd_kafka_log0
0000EE0C                                   21622 @@gen_label1371 DS    0H
0000EE0C 05EF                              21623          BALR  14,15
0000EE0E                                   21624 @@gen_label1372 DS    0H
0000EE0E                                   21625 @L1375   DS    0H
                                           21626 * ***
                                           21627 * ***
                                           21628 * ***
                                           21629 * ***
                                           21630 * ***
                                                                                                                           Page  433 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           21631 * ***                   mpart->follower_id = rko->rko_u.mock.broker_id\
                                           21632 * ;
0000EE0E 58F0 508C               0000008C  21633          L     15,140(0,5) ; offset of broker_id in 0000081
0000EE12 50F0 2094               00000094  21634          ST    15,148(0,2) ; offset of follower_id in rd_kafka_mock_par*
                                                                tition_s
                                           21635 * ***                   break;
0000EE16 47F0 C728               0000F1E8  21636          B     @L1356
                                           21637 * ***
                                           21638 * ***           case RD_KAFKA_MOCK_CMD_PART_SET_FOLLOWER_WMARKS:
0000EE1A                                   21639 @L1376   DS    0H
                                           21640 * ***                   mpart = rd_kafka_mock_partition_get(mcluster,
                                           21641 * ***                                                       rko->rko_u\
                                           21642 * .mock.name,
                                           21643 * ***                                                       rko->rko_u\
                                           21644 * .mock.partition);
0000EE1A E340 D0B0 0024          000000B0  21645          STG   4,176(0,13)
0000EE20 E3F0 5078 0004          00000078  21646          LG    15,120(0,5)
0000EE26 E3F0 D0B8 0024          000000B8  21647          STG   15,184(0,13)
0000EE2C E3F0 5088 0014          00000088  21648          LGF   15,136(0,5)
0000EE32 E3F0 D0C0 0024          000000C0  21649          STG   15,192(0,13)
0000EE38 4110 D0B0               000000B0  21650          LA    1,176(0,13)
0000EE3C E3F0 C068 0004          0000EB28  21651          LG    15,@lit_2016_954 ; rd_kafka_mock_partition_get
0000EE42                                   21652 @@gen_label1373 DS    0H
0000EE42 05EF                              21653          BALR  14,15
0000EE44                                   21654 @@gen_label1374 DS    0H
0000EE44 B902 002F                         21655          LTGR  2,15        ; mpart
                                           21656 * ***                   if (!mpart)
0000EE48 4770 C394               0000EE54  21657          BNZ   @L1378
                                           21658 * ***                           return RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC\
                                           21659 * _OR_PART;
0000EE4C A7F9 0003               00000003  21660          LGHI  15,3        ; 3
0000EE50 47F0 C72C               0000F1EC  21661          B     @ret_lab_2016
                                           21662 * ***
                                           21663 * ***                   do { if ((((mcluster->rk)->rk_conf.debug & (0x\
                                           21664 * 10000)))) rd_kafka_log0(&mcluster->rk->rk_conf,mcluster->rk,((void *\
                                           21665 * )0), 7,(0x10000), "MOCK","Set %s [%" "d" "] follower " "watermark of\
                                           21666 * fsets to %" "lld" "..%" "lld", rko->rko_u.mock.name, rko->rko_u.mock\
                                           21667 * .partition, rko->rko_u.mock.lo, rko->rko_u.mock.hi); } while (0);
0000EE54                                   21668 @L1378   DS    0H
0000EE54 E3F0 4020 0004          00000020  21669          LG    15,32(0,4)  ; offset of rk in rd_kafka_mock_cluster_s
0000EE5A 9101 F321      00000321 00000001  21670          TM    801(15),1
0000EE5E 4780 C42C               0000EEEC  21671          BZ    @L1381
0000EE62 E3F0 4020 0004          00000020  21672          LG    15,32(0,4)  ; offset of rk in rd_kafka_mock_cluster_s
0000EE68 41F0 F210               00000210  21673          LA    15,528(0,15)
0000EE6C E3F0 D0B0 0024          000000B0  21674          STG   15,176(0,13)
0000EE72 E3F0 4020 0004          00000020  21675          LG    15,32(0,4)
0000EE78 E3F0 D0B8 0024          000000B8  21676          STG   15,184(0,13)
0000EE7E D707 D0C0 D0C0 000000C0 000000C0  21677          XC    192(8,13),192(13)
0000EE84 E548 D0C8 0007          000000C8  21678          MVGHI 200(13),7
0000EE8A C0FF 0001 0000                    21679          LLILF 15,X'00010000' ; 65536
0000EE90 E3F0 D0D0 0024          000000D0  21680          STG   15,208(0,13)
0000EE96 E3F0 C080 0004          0000EB40  21681          LG    15,@lit_2016_960
                                                                                                                           Page  434 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000EE9C 4110 F15E               0000015E  21682          LA    1,350(0,15)
0000EEA0 E310 D0D8 0024          000000D8  21683          STG   1,216(0,13)
0000EEA6 41F0 F896               00000896  21684          LA    15,2198(0,15)
0000EEAA E3F0 D0E0 0024          000000E0  21685          STG   15,224(0,13)
0000EEB0 E3F0 5078 0004          00000078  21686          LG    15,120(0,5)
0000EEB6 E3F0 D0E8 0024          000000E8  21687          STG   15,232(0,13)
0000EEBC E3F0 5088 0014          00000088  21688          LGF   15,136(0,5)
0000EEC2 E3F0 D0F0 0024          000000F0  21689          STG   15,240(0,13)
0000EEC8 E3F0 5090 0004          00000090  21690          LG    15,144(0,5)
0000EECE E3F0 D0F8 0024          000000F8  21691          STG   15,248(0,13)
0000EED4 E3F0 5098 0004          00000098  21692          LG    15,152(0,5)
0000EEDA E3F0 D100 0024          00000100  21693          STG   15,256(0,13)
0000EEE0 4110 D0B0               000000B0  21694          LA    1,176(0,13)
0000EEE4 E3F0 C078 0004          0000EB38  21695          LG    15,@lit_2016_961 ; rd_kafka_log0
0000EEEA                                   21696 @@gen_label1377 DS    0H
0000EEEA 05EF                              21697          BALR  14,15
0000EEEC                                   21698 @@gen_label1378 DS    0H
0000EEEC                                   21699 @L1381   DS    0H
                                           21700 * ***
                                           21701 * ***
                                           21702 * ***
                                           21703 * ***
                                           21704 * ***
                                           21705 * ***                   if (rko->rko_u.mock.lo == -1) {
0000EEEC E558 5090 FFFF          00000090  21706          CGHSI 144(5),-1
0000EEF2 4770 C44A               0000EF0A  21707          BNE   @L1382
                                           21708 * ***                           mpart->follower_start_offset = mpart->\
                                           21709 * start_offset;
0000EEF6 E3F0 2018 0004          00000018  21710          LG    15,24(0,2)  ; offset of start_offset in rd_kafka_mock_pa*
                                                                rtition_s
0000EEFC E3F0 2028 0024          00000028  21711          STG   15,40(0,2)  ; offset of follower_start_offset in rd_kafk*
                                                                a_mock_partition_s
                                           21712 * ***                           mpart->update_follower_start_offset = \
                                           21713 * 1;
0000EF02 9201 2038      00000038 00000001  21714          MVI   56(2),1     ; offset of update_follower_start_offset in *
                                                                rd_kafka_mock_partition_s
                                           21715 * ***                   } else {
0000EF06 47F0 C45A               0000EF1A  21716          B     @L1383
0000EF0A                                   21717 @L1382   DS    0H
                                           21718 * ***                           mpart->follower_start_offset = rko->rk\
                                           21719 * o_u.mock.lo;
0000EF0A E3F0 5090 0004          00000090  21720          LG    15,144(0,5) ; offset of lo in 0000081
0000EF10 E3F0 2028 0024          00000028  21721          STG   15,40(0,2)  ; offset of follower_start_offset in rd_kafk*
                                                                a_mock_partition_s
                                           21722 * ***                           mpart->update_follower_start_offset = \
                                           21723 * 0;
0000EF16 9200 2038      00000038 00000000  21724          MVI   56(2),0     ; offset of update_follower_start_offset in *
                                                                rd_kafka_mock_partition_s
                                           21725 * ***                   }
0000EF1A                                   21726 @L1383   DS    0H
                                           21727 * ***
                                           21728 * ***                   if (rko->rko_u.mock.hi == -1) {
                                                                                                                           Page  435 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000EF1A E558 5098 FFFF          00000098  21729          CGHSI 152(5),-1
0000EF20 4770 C478               0000EF38  21730          BNE   @L1384
                                           21731 * ***                           mpart->follower_end_offset = mpart->en\
                                           21732 * d_offset;
0000EF24 E3F0 2020 0004          00000020  21733          LG    15,32(0,2)  ; offset of end_offset in rd_kafka_mock_part*
                                                                ition_s
0000EF2A E3F0 2030 0024          00000030  21734          STG   15,48(0,2)  ; offset of follower_end_offset in rd_kafka_*
                                                                mock_partition_s
                                           21735 * ***                           mpart->update_follower_end_offset = 1;
0000EF30 9201 2039      00000039 00000001  21736          MVI   57(2),1     ; offset of update_follower_end_offset in rd*
                                                                _kafka_mock_partition_s
                                           21737 * ***                   } else {
0000EF34 47F0 C728               0000F1E8  21738          B     @L1356
0000EF38                                   21739 @L1384   DS    0H
                                           21740 * ***                           mpart->follower_end_offset = rko->rko_\
                                           21741 * u.mock.hi;
0000EF38 E3F0 5098 0004          00000098  21742          LG    15,152(0,5) ; offset of hi in 0000081
0000EF3E E3F0 2030 0024          00000030  21743          STG   15,48(0,2)  ; offset of follower_end_offset in rd_kafka_*
                                                                mock_partition_s
                                           21744 * ***                           mpart->update_follower_end_offset = 0;
0000EF44 9200 2039      00000039 00000000  21745          MVI   57(2),0     ; offset of update_follower_end_offset in rd*
                                                                _kafka_mock_partition_s
                                           21746 * ***                   }
0000EF48                                   21747 @L1385   DS    0H
                                           21748 * ***                   break;
0000EF48 47F0 C728               0000F1E8  21749          B     @L1356
                                           21750 * ***
                                           21751 * ***           case RD_KAFKA_MOCK_CMD_BROKER_SET_UPDOWN:
0000EF4C                                   21752 @L1386   DS    0H
                                           21753 * ***                   mrkb = rd_kafka_mock_broker_find(mcluster,
                                           21754 * ***                                                    rko->rko_u.mo\
                                           21755 * ck.broker_id);
0000EF4C E340 D0B0 0024          000000B0  21756          STG   4,176(0,13)
0000EF52 E3F0 508C 0014          0000008C  21757          LGF   15,140(0,5)
0000EF58 E3F0 D0B8 0024          000000B8  21758          STG   15,184(0,13)
0000EF5E 4110 D0B0               000000B0  21759          LA    1,176(0,13)
0000EF62 E3F0 C070 0004          0000EB30  21760          LG    15,@lit_2016_956 ; rd_kafka_mock_broker_find
0000EF68                                   21761 @@gen_label1381 DS    0H
0000EF68 05EF                              21762          BALR  14,15
0000EF6A                                   21763 @@gen_label1382 DS    0H
0000EF6A B902 003F                         21764          LTGR  3,15        ; mrkb
                                           21765 * ***                   if (!mrkb)
0000EF6E 4770 C4BA               0000EF7A  21766          BNZ   @L1387
                                           21767 * ***                           return RD_KAFKA_RESP_ERR_BROKER_NOT_AV\
                                           21768 * AILABLE;
0000EF72 A7F9 0008               00000008  21769          LGHI  15,8        ; 8
0000EF76 47F0 C72C               0000F1EC  21770          B     @ret_lab_2016
0000EF7A                                   21771 @L1387   DS    0H
                                           21772 * ***
                                           21773 * ***                   mrkb->up = (rd_bool_t)rko->rko_u.mock.lo;
0000EF7A E3F0 5090 0004          00000090  21774          LG    15,144(0,5) ; offset of lo in 0000081
0000EF80 42F0 30A0               000000A0  21775          STC   15,160(0,3) ; offset of up in rd_kafka_mock_broker_s
                                                                                                                           Page  436 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           21776 * ***
                                           21777 * ***                   if (!mrkb->up)
0000EF84 9500 30A0      000000A0 00000000  21778          CLI   160(3),0
0000EF88 4770 C728               0000F1E8  21779          BNE   @L1356
                                           21780 * ***                           rd_kafka_mock_broker_close_all(mrkb, "\
                                           21781 * Broker down");
0000EF8C E330 D0B0 0024          000000B0  21782          STG   3,176(0,13)
0000EF92 E3F0 C080 0004          0000EB40  21783          LG    15,@lit_2016_960
0000EF98 41F0 F8CC               000008CC  21784          LA    15,2252(0,15)
0000EF9C E3F0 D0B8 0024          000000B8  21785          STG   15,184(0,13)
0000EFA2 4110 D0B0               000000B0  21786          LA    1,176(0,13)
0000EFA6 E3F0 C090 0004          0000EB50  21787          LG    15,@lit_2016_976 ; rd_kafka_mock_broker_close_all
0000EFAC                                   21788 @@gen_label1385 DS    0H
0000EFAC 05EF                              21789          BALR  14,15
0000EFAE                                   21790 @@gen_label1386 DS    0H
0000EFAE                                   21791 @L1388   DS    0H
                                           21792 * ***                   break;
0000EFAE 47F0 C728               0000F1E8  21793          B     @L1356
                                           21794 * ***
                                           21795 * ***           case RD_KAFKA_MOCK_CMD_BROKER_SET_RTT:
0000EFB2                                   21796 @L1389   DS    0H
                                           21797 * ***                   mrkb = rd_kafka_mock_broker_find(mcluster,
                                           21798 * ***                                                    rko->rko_u.mo\
                                           21799 * ck.broker_id);
0000EFB2 E340 D0B0 0024          000000B0  21800          STG   4,176(0,13)
0000EFB8 E3F0 508C 0014          0000008C  21801          LGF   15,140(0,5)
0000EFBE E3F0 D0B8 0024          000000B8  21802          STG   15,184(0,13)
0000EFC4 4110 D0B0               000000B0  21803          LA    1,176(0,13)
0000EFC8 E3F0 C070 0004          0000EB30  21804          LG    15,@lit_2016_956 ; rd_kafka_mock_broker_find
0000EFCE                                   21805 @@gen_label1387 DS    0H
0000EFCE 05EF                              21806          BALR  14,15
0000EFD0                                   21807 @@gen_label1388 DS    0H
0000EFD0 B902 003F                         21808          LTGR  3,15        ; mrkb
                                           21809 * ***                   if (!mrkb)
0000EFD4 4770 C520               0000EFE0  21810          BNZ   @L1390
                                           21811 * ***                           return RD_KAFKA_RESP_ERR_BROKER_NOT_AV\
                                           21812 * AILABLE;
0000EFD8 A7F9 0008               00000008  21813          LGHI  15,8        ; 8
0000EFDC 47F0 C72C               0000F1EC  21814          B     @ret_lab_2016
0000EFE0                                   21815 @L1390   DS    0H
                                           21816 * ***
                                           21817 * ***                   mrkb->rtt = (rd_ts_t)rko->rko_u.mock.lo * 1000\
                                           21818 * ;
0000EFE0 E3F0 5090 0004          00000090  21819          LG    15,144(0,5) ; offset of lo in 0000081
0000EFE6 A7FD 03E8               000003E8  21820          MGHI  15,1000
0000EFEA E3F0 30A8 0024          000000A8  21821          STG   15,168(0,3) ; offset of rtt in rd_kafka_mock_broker_s
                                           21822 * ***
                                           21823 * ***
                                           21824 * ***
                                           21825 * ***                   rd_kafka_mock_broker_connections_write_out(mrk\
                                           21826 * b);
0000EFF0 E330 D0B0 0024          000000B0  21827          STG   3,176(0,13)
                                                                                                                           Page  437 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000EFF6 4110 D0B0               000000B0  21828          LA    1,176(0,13)
0000EFFA E3F0 C098 0004          0000EB58  21829          LG    15,@lit_2016_979 ; rd_kafka_mock_broker_connections_writ*
                                                                e_out
0000F000                                   21830 @@gen_label1390 DS    0H
0000F000 05EF                              21831          BALR  14,15
0000F002                                   21832 @@gen_label1391 DS    0H
                                           21833 * ***                   break;
0000F002 47F0 C728               0000F1E8  21834          B     @L1356
                                           21835 * ***
                                           21836 * ***           case RD_KAFKA_MOCK_CMD_BROKER_SET_RACK:
0000F006                                   21837 @L1391   DS    0H
                                           21838 * ***                   mrkb = rd_kafka_mock_broker_find(mcluster,
                                           21839 * ***                                                    rko->rko_u.mo\
                                           21840 * ck.broker_id);
0000F006 E340 D0B0 0024          000000B0  21841          STG   4,176(0,13)
0000F00C E3F0 508C 0014          0000008C  21842          LGF   15,140(0,5)
0000F012 E3F0 D0B8 0024          000000B8  21843          STG   15,184(0,13)
0000F018 4110 D0B0               000000B0  21844          LA    1,176(0,13)
0000F01C E3F0 C070 0004          0000EB30  21845          LG    15,@lit_2016_956 ; rd_kafka_mock_broker_find
0000F022                                   21846 @@gen_label1392 DS    0H
0000F022 05EF                              21847          BALR  14,15
0000F024                                   21848 @@gen_label1393 DS    0H
0000F024 B902 003F                         21849          LTGR  3,15        ; mrkb
                                           21850 * ***                   if (!mrkb)
0000F028 4770 C574               0000F034  21851          BNZ   @L1392
                                           21852 * ***                           return RD_KAFKA_RESP_ERR_BROKER_NOT_AV\
                                           21853 * AILABLE;
0000F02C A7F9 0008               00000008  21854          LGHI  15,8        ; 8
0000F030 47F0 C72C               0000F1EC  21855          B     @ret_lab_2016
0000F034                                   21856 @L1392   DS    0H
                                           21857 * ***
                                           21858 * ***                   if (mrkb->rack)
0000F034 E3F0 3098 0002          00000098  21859          LTG   15,152(0,3) ; offset of rack in rd_kafka_mock_broker_s
0000F03A 4780 C596               0000F056  21860          BZ    @L1393
                                           21861 * ***                           rd_free(mrkb->rack);
0000F03E E3F0 3098 0004          00000098  21862          LG    15,152(0,3)
0000F044 E3F0 D0B0 0024          000000B0  21863          STG   15,176(0,13)
0000F04A 4110 D0B0               000000B0  21864          LA    1,176(0,13)
0000F04E E3F0 C0A0 0004          0000EB60  21865          LG    15,@lit_2016_982 ; rd_free
0000F054                                   21866 @@gen_label1396 DS    0H
0000F054 05EF                              21867          BALR  14,15
0000F056                                   21868 @@gen_label1397 DS    0H
0000F056                                   21869 @L1393   DS    0H
                                           21870 * ***
                                           21871 * ***                   if (rko->rko_u.mock.name)
0000F056 E3F0 5078 0002          00000078  21872          LTG   15,120(0,5) ; offset of name in 0000081
0000F05C 4780 C5C2               0000F082  21873          BZ    @L1394
                                           21874 * ***                           mrkb->rack = rd_strdup(rko->rko_u.mock\
                                           21875 * .name);
0000F060 E3F0 5078 0004          00000078  21876          LG    15,120(0,5)
0000F066 E3F0 D0B0 0024          000000B0  21877          STG   15,176(0,13)
0000F06C 4110 D0B0               000000B0  21878          LA    1,176(0,13)
                                                                                                                           Page  438 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F070 E3F0 C0A8 0004          0000EB68  21879          LG    15,@lit_2016_983 ; rd_strdup
0000F076                                   21880 @@gen_label1399 DS    0H
0000F076 05EF                              21881          BALR  14,15
0000F078                                   21882 @@gen_label1400 DS    0H
0000F078 E3F0 3098 0024          00000098  21883          STG   15,152(0,3)
0000F07E 47F0 C728               0000F1E8  21884          B     @L1356
                                           21885 * ***                   else
0000F082                                   21886 @L1394   DS    0H
                                           21887 * ***                           mrkb->rack = ((void *)0);
0000F082 A7F9 0000               00000000  21888          LGHI  15,0        ; 0
0000F086 E3F0 3098 0024          00000098  21889          STG   15,152(0,3) ; offset of rack in rd_kafka_mock_broker_s
0000F08C                                   21890 @L1395   DS    0H
                                           21891 * ***                   break;
0000F08C 47F0 C728               0000F1E8  21892          B     @L1356
                                           21893 * ***
                                           21894 * ***           case RD_KAFKA_MOCK_CMD_COORD_SET:
0000F090                                   21895 @L1396   DS    0H
                                           21896 * ***                   if (!rd_kafka_mock_coord_set(mcluster,
                                           21897 * ***                                                rko->rko_u.mock.n\
                                           21898 * ame,
                                           21899 * ***                                                rko->rko_u.mock.s\
                                           21900 * tr,
                                           21901 * ***                                                rko->rko_u.mock.b\
                                           21902 * roker_id))
0000F090 E340 D0B0 0024          000000B0  21903          STG   4,176(0,13)
0000F096 E3F0 5078 0004          00000078  21904          LG    15,120(0,5)
0000F09C E3F0 D0B8 0024          000000B8  21905          STG   15,184(0,13)
0000F0A2 E3F0 5080 0004          00000080  21906          LG    15,128(0,5)
0000F0A8 E3F0 D0C0 0024          000000C0  21907          STG   15,192(0,13)
0000F0AE E3F0 508C 0014          0000008C  21908          LGF   15,140(0,5)
0000F0B4 E3F0 D0C8 0024          000000C8  21909          STG   15,200(0,13)
0000F0BA 4110 D0B0               000000B0  21910          LA    1,176(0,13)
0000F0BE E3F0 C0B0 0004          0000EB70  21911          LG    15,@lit_2016_985 ; rd_kafka_mock_coord_set
0000F0C4                                   21912 @@gen_label1401 DS    0H
0000F0C4 05EF                              21913          BALR  14,15
0000F0C6                                   21914 @@gen_label1402 DS    0H
0000F0C6 B902 00FF                         21915          LTGR  15,15
0000F0CA 4770 C728               0000F1E8  21916          BNZ   @L1356
                                           21917 * ***                           return RD_KAFKA_RESP_ERR__INVALID_ARG;
0000F0CE A7F9 FF46               0000FF46  21918          LGHI  15,-186     ; -186
0000F0D2 47F0 C72C               0000F1EC  21919          B     @ret_lab_2016
                                           21920 * ***                   break;
                                           21921 * ***
                                           21922 * ***           case RD_KAFKA_MOCK_CMD_APIVERSION_SET:
0000F0D6                                   21923 @L1398   DS    0H
                                           21924 * ***                   if (rko->rko_u.mock.partition < 0 ||
0000F0D6 E55C 5088 0000          00000088  21925          CHSI  136(5),0
0000F0DC 4740 C62A               0000F0EA  21926          BL    @L1400
                                           21927 * ***                       rko->rko_u.mock.partition >= 59)
0000F0E0 E55C 5088 003B          00000088  21928          CHSI  136(5),59
0000F0E6 4740 C632               0000F0F2  21929          BL    @L1399
0000F0EA                                   21930 @L1400   DS    0H
                                                                                                                           Page  439 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           21931 * ***                           return RD_KAFKA_RESP_ERR__INVALID_ARG;
0000F0EA A7F9 FF46               0000FF46  21932          LGHI  15,-186     ; -186
0000F0EE 47F0 C72C               0000F1EC  21933          B     @ret_lab_2016
0000F0F2                                   21934 @L1399   DS    0H
                                           21935 * ***
                                           21936 * ***                   mcluster->api_handlers[(int)rko->rko_u.mock.pa\
                                           21937 * rtition].
                                           21938 * ***                           MinVersion = (int16_t)rko->rko_u.mock.\
                                           21939 * lo;
0000F0F2 E3F0 5088 0014          00000088  21940          LGF   15,136(0,5)
0000F0F8 EBFF 0004 000D          00000004  21941          SLLG  15,15,4(0)  ; *0x10
0000F0FE E310 5090 0004          00000090  21942          LG    1,144(0,5)  ; offset of lo in 0000081
0000F104 401F 4108               00000108  21943          STH   1,264(15,4)
                                           21944 * ***                   mcluster->api_handlers[(int)rko->rko_u.mock.pa\
                                           21945 * rtition].
                                           21946 * ***                           MaxVersion = (int16_t)rko->rko_u.mock.\
                                           21947 * hi;
0000F108 E3F0 5088 0014          00000088  21948          LGF   15,136(0,5)
0000F10E EBFF 0004 000D          00000004  21949          SLLG  15,15,4(0)  ; *0x10
0000F114 E310 5098 0004          00000098  21950          LG    1,152(0,5)  ; offset of hi in 0000081
0000F11A 401F 410A               0000010A  21951          STH   1,266(15,4) ; offset of MaxVersion in rd_kafka_mock_api_*
                                                                handler
                                           21952 * ***                   break;
0000F11E 47F0 C728               0000F1E8  21953          B     @L1356
                                           21954 * ***
                                           21955 * ***           default:
                                           21956 * ***                   ((!*"unknown mock cmd") ? (void)0 : __assert(_\
                                           21957 * _func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 1995, "!*\\
                                           21958 * "unknown mock cmd\""));
0000F122                                   21959 @L1401   DS    0H
0000F122 E3F0 C080 0004          0000EB40  21960          LG    15,@lit_2016_960
0000F128 4110 F8D8               000008D8  21961          LA    1,2264(0,15)
0000F12C 9500 1000      00000000 00000000  21962          CLI   0(1),0
0000F130 4780 C728               0000F1E8  21963          BE    @L1356
0000F134                                   21964 @L1402   DS    0H
0000F134 E310 C0C0 0004          0000EB80  21965          LG    1,@lit_2016_989
0000F13A 4110 132E               0000032E  21966          LA    1,814(0,1)
0000F13E E310 D0B0 0024          000000B0  21967          STG   1,176(0,13)
0000F144 4110 F0FA               000000FA  21968          LA    1,250(0,15)
0000F148 E310 D0B8 0024          000000B8  21969          STG   1,184(0,13)
0000F14E E548 D0C0 07CB          000000C0  21970          MVGHI 192(13),1995
0000F154 41F0 F8EA               000008EA  21971          LA    15,2282(0,15)
0000F158 E3F0 D0C8 0024          000000C8  21972          STG   15,200(0,13)
0000F15E 4110 D0B0               000000B0  21973          LA    1,176(0,13)
0000F162 E3F0 C0B8 0004          0000EB78  21974          LG    15,@lit_2016_990 ; __assert
0000F168                                   21975 @@gen_label1407 DS    0H
0000F168 05EF                              21976          BALR  14,15
0000F16A                                   21977 @@gen_label1408 DS    0H
0000F16A                                   21978 @L1403   DS    0H
                                           21979 * ***                   break;
0000F16A 47F0 C728               0000F1E8  21980          B     @L1356
                                           21981 * ***           }
                                                                                                                           Page  440 
  Active Usings: @REGION_2016_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F16E                                   21982 @L1355   DS    0H
0000F16E 58F0 5070               00000070  21983          L     15,112(0,5) ; offset of rko_u in rd_kafka_op_s
0000F172 C2FF 0000 0009                    21984          CLFI  15,X'00000009'
0000F178 4720 C662               0000F122  21985          BH    @L1401
0000F17C B914 00FF                         21986          LGFR  15,15
0000F180 4110 C6D8               0000F198  21987          LA    1,@@gen_label1409
0000F184 EBFF 0003 000D          00000003  21988          SLLG  15,15,3(0)
0000F18A E3F1 F000 0004          00000000  21989          LG    15,0(1,15)
0000F190 47FF C000               00000000  21990          B     0(15,12)
0000F198                                   21991 @@gen_label1409 DS    0D
0000F198 0000000000000140                  21992          DC AD(@L1360-@REGION_2016_1)
0000F1A0 00000000000000CC                  21993          DC AD(@L1357-@REGION_2016_1)
0000F1A8 0000000000000170                  21994          DC AD(@L1361-@REGION_2016_1)
0000F1B0 0000000000000288                  21995          DC AD(@L1370-@REGION_2016_1)
0000F1B8 000000000000035A                  21996          DC AD(@L1376-@REGION_2016_1)
0000F1C0 000000000000048C                  21997          DC AD(@L1386-@REGION_2016_1)
0000F1C8 00000000000004F2                  21998          DC AD(@L1389-@REGION_2016_1)
0000F1D0 0000000000000546                  21999          DC AD(@L1391-@REGION_2016_1)
0000F1D8 00000000000005D0                  22000          DC AD(@L1396-@REGION_2016_1)
0000F1E0 0000000000000616                  22001          DC AD(@L1398-@REGION_2016_1)
0000F1E8                                   22002 @L1356   DS    0H
                                           22003 * ***
                                           22004 * ***           return RD_KAFKA_RESP_ERR_NO_ERROR;
0000F1E8 A7F9 0000               00000000  22005          LGHI  15,0        ; 0
                                           22006 * ***   }
0000F1EC                                   22007 @ret_lab_2016 DS 0H
0000F1EC E3C0 C0C8 001A          0000EB88  22008          ALGF  12,@lit_region_diff_2016_1_2
0000F1F2                                   22009 @REGION_2016_2 DS 0H
                                           22010          DROP  12
                        0000F1F2           22011          USING @REGION_2016_2,12
                                           22012 * * **** Start of Epilogue
                                           22013          DCCEPIL
0000F1F2                                   22014+         ds 0h                                                          01-DCCEP
                                           22015+* Epilog
0000F1F2 D707 D088 D088 00000088 00000088  22016+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000F1F8 E3D0 D080 0004          00000080  22017+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000F1FE E3C0 D090 0004          00000090  22018+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000F204 E3B0 C018 0004          00000018  22019+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000F20A E3C0 B010 0021          00000010  22020+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000F210 E3E0 D008 0004          00000008  22021+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000F216 EB1C D020 0004          00000020  22022+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000F21C 078E                              22023+         bcr 8,14                if same dsab, just return              01-DCCEP
0000F21E E3F0 D010 0024          00000010  22024+         stg 15,16(0,13)         save return code                       01-DCCEP
0000F224 E300 D018 0024          00000018  22025+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000F22A E3F0 D090 0004          00000090  22026+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000F230 E3F0 F018 0004          00000018  22027+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000F236 47F0 F040               00000040  22028+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           22029+* End of Epilog
                                           22030 * * **** End of Epilogue
                                           22031          DROP  12
                                           22032 *
                                           22033 *   DSECT for automatic variables in "rd_kafka_mock_cluster_cmd"
                                                                                                                           Page  441 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           22034 *      (FUNCTION #2016)
                                           22035 *
00000000                00000000 000000A8  22036 @AUTO#rd_kafka_mock_cluster_cmd DSECT
00000000                                   22037          DS    XL168
                                           22038 *
0000F23A                00000000 00010480  22039 @CODE    CSECT
                                           22040 *
                                           22041 *
                                           22042 *
                                           22043 * ....... start of rd_kafka_mock_cluster_op_serve
0000F23A                                   22044 @LNAME2017 DS  0H
0000F23A 0000001E                          22045          DC    X'0000001E'
0000F23E 99846D9281869281                  22046          DC    C'rd_kafka_mock_cluster_op_serve'
0000F25C 00                                22047          DC    X'00'
                                           22048 rd_kafka_mock_cluster_op_serve DCCPRLG CINDEX=2017,BASER=12,FRAME=208,E*
                                                                NTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME2017
                                           22049          macro
                                           22050          dccextrn &m
                                           22051          gblc    &$dccext(1000)
                                           22052          gbla    &$dccexti
                                           22053          lcla    &i
                                           22054 &$dccext(&$dccexti+1) setc    '&m'
                                           22055 &i       seta    1
                                           22056 .loop    aif    (&i gt &$dccexti).around
                                           22057          aif    ('&$dccext(&i)' eq '&m').getout
                                           22058 &i       seta    &i+1
                                           22059          ago     .loop
                                           22060 .around  anop
                                           22061 &$dccexti seta &$dccexti+1
                                           22062          extrn  &m
                                           22063 .getout  anop
                                           22064          mend
0000F260                                   22065+$eye0338    ds    0d                                                    02-DCCCA
0000F260 C4C3C3                            22066+         dc cl3'DCC'                                                    02-DCCCA
0000F263 01                                22067+         dc xl1'01' format one                                          02-DCCCA
0000F264 00000000                          22068+         dc a(0)                                                        02-DCCCA
0000F268 000000000000F2D2                  22069+         dc ad(@PER_2017)                                               02-DCCCA
0000F270 00000000000000D0                  22070+         dc ad(208)                                                     02-DCCCA
0000F278 0000000000000000                  22071+         dc ad(0)                                                       02-DCCCA
0000F280 0000000000001000                  22072+         dc ad(4096)                                                    02-DCCCA
0000F288 20                                22073+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000F289 03                                22074+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000F28A 03                                22075+         dc al1(3)                                                      02-DCCCA
0000F28B 08                                22076+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000F28C 00                                22077+         dc bl.8'00000000'                                              02-DCCCA
0000F28D 000000                            22078+         dc al3(0)                                                      02-DCCCA
0000F290 000000000000F23A                  22079+         dc ad(@LNAME2017)                                              02-DCCCA
0000F298                                   22080+         ds 0d                                                          02-DCCCA
0000F298 000000000000F260                  22081+         dc ad($eye0338)                                                02-DCCCA
0000F2A0 0000000000000000                  22082+         dc ad(0)                                                       02-DCCCA
0000F2A8                                   22083+         ds    0d                                                       01-DCCPR
0000F2A8                                   22084+rd_kafka_mock_cluster_op_serve ds 0d                                    01-DCCPR
                                                                                                                           Page  442 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F2A8                                   22085+@REGION_2017_1 ds 0h                                                    01-DCCPR
0000F2A8 EBEC D008 0024          00000008  22086+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000F2AE E3E0 D088 0004          00000088  22087+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000F2B4 E3C0 D090 0004          00000090  22088+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000F2BA B904 002E                         22089+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000F2BE E3B0 C018 0004          00000018  22090+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000F2C4 A7EB 00D0               000000D0  22091+         aghi  14,208              increase by frame size               01-DCCPR
0000F2C8 E3E0 C020 0021          00000020  22092+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000F2CE 4720 B020               00000020  22093+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000F2D2                                   22094+@PER_2017 ds   0h                                                       01-DCCPR
0000F2D2 EBDE 2080 0024          00000080  22095+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000F2D8 E3C0 2090 0024          00000090  22096+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000F2DE B904 00D2                         22097+         lgr   13,2                set real frame pointer               01-DCCPR
0000F2E2 B904 00CF                         22098+         lgr   12,15               set base reg                         01-DCCPR
                        0000F2A8           22099+         using @REGION_2017_1,12                                        01-DCCPR
                                           22100 * ******* End of Prologue
                                           22101 * *
                                           22102 * ***           rd_kafka_mock_cluster_t *mcluster = opaque;
0000F2E6 E330 1010 0004          00000010  22103          LG    3,16(0,1)   ; rko
0000F2EC E3F0 1020 0004          00000020  22104          LG    15,32(0,1)  ; opaque
                                           22105 * ***           rd_kafka_resp_err_t err = RD_KAFKA_RESP_ERR_NO_ERROR;
0000F2F2 A728 0000               00000000  22106          LHI   2,0         ; 0
                                           22107 * ***
                                           22108 * ***           switch ((int)rko->rko_type)
0000F2F6 47F0 C0FA               0000F3A2  22109          B     @L1404
0000F300                                   22110          DS    0D
0000F300 000000D0                          22111 @FRAMESIZE_2017 DC F'208'
0000F304 00000000
0000F308 000000000000EAC0                  22112 @lit_2017_996 DC AD(rd_kafka_mock_cluster_cmd)
0000F310 0000000000010840                  22113 @lit_2017_997 DC AD(@strings@)
0000F318 0000000000000000                  22114 @lit_2017_999 DC AD(__assert)
0000F320 0000000000010480                  22115 @lit_2017_998 DC AD(@DATA)
0000F328 0000000000000000                  22116 @lit_2017_1000 DC AD(rd_kafka_op_reply)
                                           22117 * ***           {
                                           22118 * ***           case RD_KAFKA_OP_TERMINATE:
0000F330                                   22119 @L1406   DS    0H
                                           22120 * ***                   mcluster->run = 0;
0000F330 9200 F0C8      000000C8 00000000  22121          MVI   200(15),0   ; offset of run in rd_kafka_mock_cluster_s
                                           22122 * ***                   break;
0000F334 47F0 C11A               0000F3C2  22123          B     @L1405
                                           22124 * ***
                                           22125 * ***           case RD_KAFKA_OP_MOCK:
0000F338                                   22126 @L1407   DS    0H
                                           22127 * ***                   err = rd_kafka_mock_cluster_cmd(mcluster, rko)\
                                           22128 * ;
0000F338 E3F0 D0B0 0024          000000B0  22129          STG   15,176(0,13)
0000F33E E330 D0B8 0024          000000B8  22130          STG   3,184(0,13)
0000F344 4110 D0B0               000000B0  22131          LA    1,176(0,13)
0000F348 E3F0 C060 0004          0000F308  22132          LG    15,@lit_2017_996 ; rd_kafka_mock_cluster_cmd
0000F34E                                   22133 @@gen_label1410 DS    0H
0000F34E 05EF                              22134          BALR  14,15
0000F350                                   22135 @@gen_label1411 DS    0H
                                                                                                                           Page  443 
  Active Usings: @REGION_2017_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F350 182F                              22136          LR    2,15        ; err
                                           22137 * ***                   break;
0000F352 47F0 C11A               0000F3C2  22138          B     @L1405
                                           22139 * ***
                                           22140 * ***           default:
                                           22141 * ***                   ((!"*unhandled op") ? (void)0 : __assert(__fun\
                                           22142 * c__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 2021, "!\"*unh\
                                           22143 * andled op\""));
0000F356                                   22144 @L1408   DS    0H
0000F356 E3F0 C068 0004          0000F310  22145          LG    15,@lit_2017_997
0000F35C 4110 F900               00000900  22146          LA    1,2304(0,15)
0000F360 B902 0011                         22147          LTGR  1,1
0000F364 4780 C11A               0000F3C2  22148          BZ    @L1405
0000F368                                   22149 @L1409   DS    0H
0000F368 E310 C078 0004          0000F320  22150          LG    1,@lit_2017_998
0000F36E 4110 1348               00000348  22151          LA    1,840(0,1)
0000F372 E310 D0B0 0024          000000B0  22152          STG   1,176(0,13)
0000F378 4110 F0FA               000000FA  22153          LA    1,250(0,15)
0000F37C E310 D0B8 0024          000000B8  22154          STG   1,184(0,13)
0000F382 E548 D0C0 07E5          000000C0  22155          MVGHI 192(13),2021
0000F388 41F0 F90E               0000090E  22156          LA    15,2318(0,15)
0000F38C E3F0 D0C8 0024          000000C8  22157          STG   15,200(0,13)
0000F392 4110 D0B0               000000B0  22158          LA    1,176(0,13)
0000F396 E3F0 C070 0004          0000F318  22159          LG    15,@lit_2017_999 ; __assert
0000F39C                                   22160 @@gen_label1413 DS    0H
0000F39C 05EF                              22161          BALR  14,15
0000F39E                                   22162 @@gen_label1414 DS    0H
0000F39E                                   22163 @L1410   DS    0H
                                           22164 * ***                   break;
0000F39E 47F0 C11A               0000F3C2  22165          B     @L1405
                                           22166 * ***           }
0000F3A2                                   22167 @L1404   DS    0H
0000F3A2 5810 3010               00000010  22168          L     1,16(0,3)   ; offset of rko_type in rd_kafka_op_s
0000F3A6 A71E 0013               00000013  22169          CHI   1,19
0000F3AA 4740 C0AE               0000F356  22170          BL    @L1408
0000F3AE A71E 0013               00000013  22171          CHI   1,19
0000F3B2 4780 C088               0000F330  22172          BE    @L1406
0000F3B6 A71E 002D               0000002D  22173          CHI   1,45
0000F3BA 4780 C090               0000F338  22174          BE    @L1407
0000F3BE 47F0 C0AE               0000F356  22175          B     @L1408
0000F3C2                                   22176 @L1405   DS    0H
                                           22177 * ***
                                           22178 * ***           rd_kafka_op_reply(rko, err);
0000F3C2 E330 D0B0 0024          000000B0  22179          STG   3,176(0,13)
0000F3C8 B914 00F2                         22180          LGFR  15,2
0000F3CC E3F0 D0B8 0024          000000B8  22181          STG   15,184(0,13)
0000F3D2 4110 D0B0               000000B0  22182          LA    1,176(0,13)
0000F3D6 E3F0 C080 0004          0000F328  22183          LG    15,@lit_2017_1000 ; rd_kafka_op_reply
0000F3DC                                   22184 @@gen_label1415 DS    0H
0000F3DC 05EF                              22185          BALR  14,15
0000F3DE                                   22186 @@gen_label1416 DS    0H
                                           22187 * ***
                                                                                                                           Page  444 
  Active Usings: @REGION_2017_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           22188 * ***           return RD_KAFKA_OP_RES_HANDLED;
0000F3DE A7F9 0001               00000001  22189          LGHI  15,1        ; 1
                                           22190 * ***   }
                                           22191 * * **** Start of Epilogue
                                           22192          DCCEPIL
0000F3E2                                   22193+         ds 0h                                                          01-DCCEP
                                           22194+* Epilog
0000F3E2 D707 D088 D088 00000088 00000088  22195+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000F3E8 E3D0 D080 0004          00000080  22196+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000F3EE E3C0 D090 0004          00000090  22197+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000F3F4 E3B0 C018 0004          00000018  22198+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000F3FA E3C0 B010 0021          00000010  22199+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000F400 E3E0 D008 0004          00000008  22200+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000F406 EB1C D020 0004          00000020  22201+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000F40C 078E                              22202+         bcr 8,14                if same dsab, just return              01-DCCEP
0000F40E E3F0 D010 0024          00000010  22203+         stg 15,16(0,13)         save return code                       01-DCCEP
0000F414 E300 D018 0024          00000018  22204+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000F41A E3F0 D090 0004          00000090  22205+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000F420 E3F0 F018 0004          00000018  22206+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000F426 47F0 F040               00000040  22207+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           22208+* End of Epilog
                                           22209 * * **** End of Epilogue
                                           22210          DROP  12
                                           22211 *
                                           22212 *   DSECT for automatic variables in "rd_kafka_mock_cluster_op_serve"
                                           22213 *      (FUNCTION #2017)
                                           22214 *
00000000                00000000 000000AC  22215 @AUTO#rd_kafka_mock_cluster_op_serve DSECT
00000000                                   22216          DS    XL168
000000A8                                   22217 rd_kafka_mock_cluster_op_serve#err#0 DS 1F ; err
                                           22218 *
0000F42A                00000000 00010480  22219 @CODE    CSECT
                                           22220 *
                                           22221 *
                                           22222 *
                                           22223 * ....... start of rd_kafka_mock_cluster_destroy0
0000F42A                                   22224 @LNAME1975 DS  0H
0000F42A 0000001E                          22225          DC    X'0000001E'
0000F42E 99846D9281869281                  22226          DC    C'rd_kafka_mock_cluster_destroy0'
0000F44C 00                                22227          DC    X'00'
                                           22228 rd_kafka_mock_cluster_destroy0 DCCPRLG CINDEX=1975,BASER=12,FRAME=208,E*
                                                                NTRY=NO,ARCH=ZARCH,LNAMEADDR=@LNAME1975
                                           22229          macro
                                           22230          dccextrn &m
                                           22231          gblc    &$dccext(1000)
                                           22232          gbla    &$dccexti
                                           22233          lcla    &i
                                           22234 &$dccext(&$dccexti+1) setc    '&m'
                                           22235 &i       seta    1
                                           22236 .loop    aif    (&i gt &$dccexti).around
                                           22237          aif    ('&$dccext(&i)' eq '&m').getout
                                           22238 &i       seta    &i+1
                                                                                                                           Page  445 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           22239          ago     .loop
                                           22240 .around  anop
                                           22241 &$dccexti seta &$dccexti+1
                                           22242          extrn  &m
                                           22243 .getout  anop
                                           22244          mend
0000F450                                   22245+$eye0341    ds    0d                                                    02-DCCCA
0000F450 C4C3C3                            22246+         dc cl3'DCC'                                                    02-DCCCA
0000F453 01                                22247+         dc xl1'01' format one                                          02-DCCCA
0000F454 00000000                          22248+         dc a(0)                                                        02-DCCCA
0000F458 000000000000F4C2                  22249+         dc ad(@PER_1975)                                               02-DCCCA
0000F460 00000000000000D0                  22250+         dc ad(208)                                                     02-DCCCA
0000F468 0000000000000000                  22251+         dc ad(0)                                                       02-DCCCA
0000F470 0000000000001000                  22252+         dc ad(4096)                                                    02-DCCCA
0000F478 20                                22253+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000F479 03                                22254+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000F47A 03                                22255+         dc al1(3)                                                      02-DCCCA
0000F47B 08                                22256+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000F47C 00                                22257+         dc bl.8'00000000'                                              02-DCCCA
0000F47D 000000                            22258+         dc al3(0)                                                      02-DCCCA
0000F480 000000000000F42A                  22259+         dc ad(@LNAME1975)                                              02-DCCCA
0000F488                                   22260+         ds 0d                                                          02-DCCCA
0000F488 000000000000F450                  22261+         dc ad($eye0341)                                                02-DCCCA
0000F490 0000000000000000                  22262+         dc ad(0)                                                       02-DCCCA
0000F498                                   22263+         ds    0d                                                       01-DCCPR
0000F498                                   22264+rd_kafka_mock_cluster_destroy0 ds 0d                                    01-DCCPR
0000F498                                   22265+@REGION_1975_1 ds 0h                                                    01-DCCPR
0000F498 EBEC D008 0024          00000008  22266+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000F49E E3E0 D088 0004          00000088  22267+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000F4A4 E3C0 D090 0004          00000090  22268+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000F4AA B904 002E                         22269+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000F4AE E3B0 C018 0004          00000018  22270+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000F4B4 A7EB 00D0               000000D0  22271+         aghi  14,208              increase by frame size               01-DCCPR
0000F4B8 E3E0 C020 0021          00000020  22272+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000F4BE 4720 B020               00000020  22273+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000F4C2                                   22274+@PER_1975 ds   0h                                                       01-DCCPR
0000F4C2 EBDE 2080 0024          00000080  22275+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000F4C8 E3C0 2090 0024          00000090  22276+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000F4CE B904 00D2                         22277+         lgr   13,2                set real frame pointer               01-DCCPR
0000F4D2 B904 00CF                         22278+         lgr   12,15               set base reg                         01-DCCPR
                        0000F498           22279+         using @REGION_1975_1,12                                        01-DCCPR
                                           22280 * ******* End of Prologue
                                           22281 * *
0000F4D6 E320 1000 0004          00000000  22282          LG    2,0(0,1)    ; mcluster
                                           22283 * ***           rd_kafka_mock_topic_t *mtopic;
                                           22284 * ***           rd_kafka_mock_broker_t *mrkb;
                                           22285 * ***           rd_kafka_mock_cgrp_t *mcgrp;
                                           22286 * ***           rd_kafka_mock_coord_t *mcoord;
                                           22287 * ***           rd_kafka_mock_error_stack_t *errstack;
                                           22288 * ***           thrd_t dummy_rkb_thread;
                                           22289 * ***           int ret;
                                           22290 * ***
                                                                                                                           Page  446 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           22291 * ***           while ((mtopic = ((&mcluster->topics)->tqh_first)))
0000F4DC 47F0 C0FA               0000F592  22292          B     @L1414
0000F4E0                                   22293          DS    0D
0000F4E0 000000D0                          22294 @FRAMESIZE_1975 DC F'208'
0000F4E4 00000000
0000F4E8 00000000000053F8                  22295 @lit_1975_1003 DC AD(rd_kafka_mock_topic_destroy)
0000F4F0 000000000000B970                  22296 @lit_1975_1004 DC AD(rd_kafka_mock_broker_destroy)
0000F4F8 0000000000000000                  22297 @lit_1975_1005 DC AD(rd_kafka_mock_cgrp_destroy)
0000F500 000000000000C318                  22298 @lit_1975_1006 DC AD(rd_kafka_mock_coord_destroy)
0000F508 0000000000000000                  22299 @lit_1975_1007 DC AD(rd_list_destroy)
0000F510 000000000000B830                  22300 @lit_1975_1008 DC AD(rd_kafka_mock_error_stack_destroy)
0000F518 0000000000000000                  22301 @lit_1975_1009 DC AD(rd_kafka_op_new0)
0000F520 00000000000029C0                  22302 @lit_1975_1010 DC AD(rd_kafka_q_enq)
0000F528 0000000000000DF0                  22303 @lit_1975_1011 DC AD(rd_refcnt_sub0)
0000F530 0000000000000000                  22304 @lit_1975_1012 DC AD(rd_kafka_broker_destroy_final)
0000F538 0000000000000000                  22305 @lit_1975_1013 DC AD(thrd_join)
0000F540 0000000000010840                  22306 @lit_1975_1014 DC AD(@strings@)
0000F548 0000000000000000                  22307 @lit_1975_1016 DC AD(__assert)
0000F550 0000000000010480                  22308 @lit_1975_1015 DC AD(@DATA)
0000F558 0000000000001FA0                  22309 @lit_1975_1017 DC AD(rd_kafka_q_destroy_owner)
0000F560 0000000000000000                  22310 @lit_1975_1018 DC AD(rd_kafka_timers_destroy)
0000F568 0000000000000B78                  22311 @lit_1975_1019 DC AD(rd_free)
0000F570 0000000000000000                  22312 @lit_1975_1021 DC AD(mtx_destroy)
0000F578 0000000000000000                  22313 @lit_1975_1023 DC AD(close)
0000F580                                   22314 @L1413   DS    0H
                                           22315 * ***                   rd_kafka_mock_topic_destroy(mtopic);
0000F580 E3F0 D0B0 0024          000000B0  22316          STG   15,176(0,13)
0000F586 4110 D0B0               000000B0  22317          LA    1,176(0,13)
0000F58A E3F0 C050 0004          0000F4E8  22318          LG    15,@lit_1975_1003 ; rd_kafka_mock_topic_destroy
0000F590                                   22319 @@gen_label1417 DS    0H
0000F590 05EF                              22320          BALR  14,15
0000F592                                   22321 @@gen_label1418 DS    0H
0000F592                                   22322 @L1414   DS    0H
0000F592 E3F0 2048 0004          00000048  22323          LG    15,72(0,2)  ; offset of topics in rd_kafka_mock_cluster_*
                                                                s
0000F598 B902 001F                         22324          LTGR  1,15
0000F59C 4770 C0E8               0000F580  22325          BNZ   @L1413
                                           22326 * ***
                                           22327 * ***           while ((mrkb = ((&mcluster->brokers)->tqh_first)))
0000F5A0 47F0 C11E               0000F5B6  22328          B     @L1418
0000F5A4                                   22329 @L1417   DS    0H
                                           22330 * ***                   rd_kafka_mock_broker_destroy(mrkb);
0000F5A4 E3F0 D0B0 0024          000000B0  22331          STG   15,176(0,13)
0000F5AA 4110 D0B0               000000B0  22332          LA    1,176(0,13)
0000F5AE E3F0 C058 0004          0000F4F0  22333          LG    15,@lit_1975_1004 ; rd_kafka_mock_broker_destroy
0000F5B4                                   22334 @@gen_label1420 DS    0H
0000F5B4 05EF                              22335          BALR  14,15
0000F5B6                                   22336 @@gen_label1421 DS    0H
0000F5B6                                   22337 @L1418   DS    0H
0000F5B6 E3F0 2030 0004          00000030  22338          LG    15,48(0,2)  ; offset of brokers in rd_kafka_mock_cluster*
                                                                _s
0000F5BC B902 001F                         22339          LTGR  1,15
                                                                                                                           Page  447 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F5C0 4770 C10C               0000F5A4  22340          BNZ   @L1417
                                           22341 * ***
                                           22342 * ***           while ((mcgrp = ((&mcluster->cgrps)->tqh_first)))
0000F5C4 47F0 C142               0000F5DA  22343          B     @L1422
0000F5C8                                   22344 @L1421   DS    0H
                                           22345 * ***                   rd_kafka_mock_cgrp_destroy(mcgrp);
0000F5C8 E3F0 D0B0 0024          000000B0  22346          STG   15,176(0,13)
0000F5CE 4110 D0B0               000000B0  22347          LA    1,176(0,13)
0000F5D2 E3F0 C060 0004          0000F4F8  22348          LG    15,@lit_1975_1005 ; rd_kafka_mock_cgrp_destroy
0000F5D8                                   22349 @@gen_label1423 DS    0H
0000F5D8 05EF                              22350          BALR  14,15
0000F5DA                                   22351 @@gen_label1424 DS    0H
0000F5DA                                   22352 @L1422   DS    0H
0000F5DA E3F0 2060 0004          00000060  22353          LG    15,96(0,2)  ; offset of cgrps in rd_kafka_mock_cluster_s
0000F5E0 B902 001F                         22354          LTGR  1,15
0000F5E4 4770 C130               0000F5C8  22355          BNZ   @L1421
                                           22356 * ***
                                           22357 * ***           while ((mcoord = ((&mcluster->coords)->tqh_first)))
0000F5E8 47F0 C16C               0000F604  22358          B     @L1426
0000F5EC                                   22359 @L1425   DS    0H
                                           22360 * ***                   rd_kafka_mock_coord_destroy(mcluster, mcoord);
0000F5EC E320 D0B0 0024          000000B0  22361          STG   2,176(0,13)
0000F5F2 E3F0 D0B8 0024          000000B8  22362          STG   15,184(0,13)
0000F5F8 4110 D0B0               000000B0  22363          LA    1,176(0,13)
0000F5FC E3F0 C068 0004          0000F500  22364          LG    15,@lit_1975_1006 ; rd_kafka_mock_coord_destroy
0000F602                                   22365 @@gen_label1426 DS    0H
0000F602 05EF                              22366          BALR  14,15
0000F604                                   22367 @@gen_label1427 DS    0H
0000F604                                   22368 @L1426   DS    0H
0000F604 E3F0 2070 0004          00000070  22369          LG    15,112(0,2) ; offset of coords in rd_kafka_mock_cluster_*
                                                                s
0000F60A B902 001F                         22370          LTGR  1,15
0000F60E 4770 C154               0000F5EC  22371          BNZ   @L1425
                                           22372 * ***
                                           22373 * ***           rd_list_destroy(&mcluster->pids);
0000F612 41F0 2080               00000080  22374          LA    15,128(0,2)
0000F616 E3F0 D0B0 0024          000000B0  22375          STG   15,176(0,13)
0000F61C 4110 D0B0               000000B0  22376          LA    1,176(0,13)
0000F620 E3F0 C070 0004          0000F508  22377          LG    15,@lit_1975_1007 ; rd_list_destroy
0000F626                                   22378 @@gen_label1429 DS    0H
0000F626 05EF                              22379          BALR  14,15
0000F628                                   22380 @@gen_label1430 DS    0H
                                           22381 * ***
                                           22382 * ***           while ((errstack = ((&mcluster->errstacks)->tqh_first)\
                                           22383 * )) {
0000F628 47F0 C1E4               0000F67C  22384          B     @L1430
                                           22385 * ***                   do {   if (((errstack)->link .tqe_next) != (((\
                                           22386 * void *)0))) (errstack)->link .tqe_next->link .tqe_prev = (errstack)-\
                                           22387 * >link .tqe_prev; else (&mcluster->errstacks)->tqh_last = (errstack)-\
                                           22388 * >link .tqe_prev; *(errstack)->link .tqe_prev = (errstack)->link .tqe\
                                           22389 * _next; ; } while ( 0);
0000F62C                                   22390 @L1431   DS    0H
                                                                                                                           Page  448 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F62C E310 F000 0002          00000000  22391          LTG   1,0(0,15)   ; errstack
0000F632 4780 C1B4               0000F64C  22392          BE    @L1434
0000F636 E310 F000 0004          00000000  22393          LG    1,0(0,15)   ; errstack
0000F63C E330 F008 0004          00000008  22394          LG    3,8(0,15)   ; offset of tqe_prev in 0000155
0000F642 E330 1008 0024          00000008  22395          STG   3,8(0,1)    ; offset of tqe_prev in 0000155
0000F648 47F0 C1C0               0000F658  22396          B     @L1435
0000F64C                                   22397 @L1434   DS    0H
0000F64C E310 F008 0004          00000008  22398          LG    1,8(0,15)   ; offset of tqe_prev in 0000155
0000F652 E310 2100 0024          00000100  22399          STG   1,256(0,2)  ; offset of tqh_last in rd_kafka_mock_error_*
                                                                stack_head_s
0000F658                                   22400 @L1435   DS    0H
0000F658 E310 F008 0004          00000008  22401          LG    1,8(0,15)   ; offset of tqe_prev in 0000155
0000F65E E330 F000 0004          00000000  22402          LG    3,0(0,15)   ; errstack
0000F664 E330 1000 0024          00000000  22403          STG   3,0(0,1)
                                           22404 * ***                   rd_kafka_mock_error_stack_destroy(errstack);
0000F66A E3F0 D0B0 0024          000000B0  22405          STG   15,176(0,13)
0000F670 4110 D0B0               000000B0  22406          LA    1,176(0,13)
0000F674 E3F0 C078 0004          0000F510  22407          LG    15,@lit_1975_1008 ; rd_kafka_mock_error_stack_destroy
0000F67A                                   22408 @@gen_label1432 DS    0H
0000F67A 05EF                              22409          BALR  14,15
0000F67C                                   22410 @@gen_label1433 DS    0H
                                           22411 * ***           }
0000F67C                                   22412 @L1430   DS    0H
0000F67C E3F0 20F8 0004          000000F8  22413          LG    15,248(0,2) ; offset of errstacks in rd_kafka_mock_clust*
                                                                er_s
0000F682 B902 001F                         22414          LTGR  1,15
0000F686 4770 C194               0000F62C  22415          BNZ   @L1431
                                           22416 * ***
                                           22417 * ***
                                           22418 * ***
                                           22419 * ***
                                           22420 * ***           rd_kafka_q_enq(mcluster->dummy_rkb->rkb_ops,
                                           22421 * ***                          rd_kafka_op_new0(((void *)0), RD_KAFKA_\
                                           22422 * OP_TERMINATE));
0000F68A D707 D0B0 D0B0 000000B0 000000B0  22423          XC    176(8,13),176(13)
0000F690 E548 D0B8 0013          000000B8  22424          MVGHI 184(13),19
0000F696 4110 D0B0               000000B0  22425          LA    1,176(0,13)
0000F69A E3F0 C080 0004          0000F518  22426          LG    15,@lit_1975_1009 ; rd_kafka_op_new0
0000F6A0                                   22427 @@gen_label1435 DS    0H
0000F6A0 05EF                              22428          BALR  14,15
0000F6A2                                   22429 @@gen_label1436 DS    0H
0000F6A2 E310 20E0 0004          000000E0  22430          LG    1,224(0,2)  ; offset of dummy_rkb in rd_kafka_mock_clust*
                                                                er_s
0000F6A8 E310 1040 0004          00000040  22431          LG    1,64(0,1)
0000F6AE E310 D0B0 0024          000000B0  22432          STG   1,176(0,13)
0000F6B4 E3F0 D0B8 0024          000000B8  22433          STG   15,184(0,13)
0000F6BA 4110 D0B0               000000B0  22434          LA    1,176(0,13)
0000F6BE E3F0 C088 0004          0000F520  22435          LG    15,@lit_1975_1010 ; rd_kafka_q_enq
0000F6C4                                   22436 @@gen_label1437 DS    0H
0000F6C4 05EF                              22437          BALR  14,15
0000F6C6                                   22438 @@gen_label1438 DS    0H
                                           22439 * ***
                                                                                                                           Page  449 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           22440 * ***           dummy_rkb_thread = mcluster->dummy_rkb->rkb_thread;
0000F6C6 E3F0 20E0 0004          000000E0  22441          LG    15,224(0,2) ; offset of dummy_rkb in rd_kafka_mock_clust*
                                                                er_s
0000F6CC E330 FF98 0004          00000F98  22442          LG    3,3992(0,15) ; offset of rkb_thread in rd_kafka_broker_s
                                           22443 * ***
                                           22444 * ***           do { if (rd_refcnt_sub0(&(mcluster->dummy_rkb)->rkb_re\
                                           22445 * fcnt) > 0) break; rd_kafka_broker_destroy_final(mcluster->dummy_rkb)\
                                           22446 * ; } while (0);
0000F6D2                                   22447 @L1436   DS    0H
0000F6D2 E3F0 20E0 0004          000000E0  22448          LG    15,224(0,2) ; offset of dummy_rkb in rd_kafka_mock_clust*
                                                                er_s
0000F6D8 41F0 FFA0               00000FA0  22449          LA    15,4000(0,15)
0000F6DC E3F0 D0B0 0024          000000B0  22450          STG   15,176(0,13)
0000F6E2 4110 D0B0               000000B0  22451          LA    1,176(0,13)
0000F6E6 E3F0 C090 0004          0000F528  22452          LG    15,@lit_1975_1011 ; rd_refcnt_sub0
0000F6EC                                   22453 @@gen_label1439 DS    0H
0000F6EC 05EF                              22454          BALR  14,15
0000F6EE                                   22455 @@gen_label1440 DS    0H
0000F6EE 12FF                              22456          LTR   15,15
0000F6F0 4720 C274               0000F70C  22457          BH    @L1437
0000F6F4                                   22458 @L1439   DS    0H
0000F6F4 E3F0 20E0 0004          000000E0  22459          LG    15,224(0,2)
0000F6FA E3F0 D0B0 0024          000000B0  22460          STG   15,176(0,13)
0000F700 4110 D0B0               000000B0  22461          LA    1,176(0,13)
0000F704 E3F0 C098 0004          0000F530  22462          LG    15,@lit_1975_1012 ; rd_kafka_broker_destroy_final
0000F70A                                   22463 @@gen_label1442 DS    0H
0000F70A 05EF                              22464          BALR  14,15
0000F70C                                   22465 @@gen_label1443 DS    0H
0000F70C                                   22466 @L1437   DS    0H
                                           22467 * ***
                                           22468 * ***           if (thrd_join(dummy_rkb_thread, &ret) != 0)
0000F70C E330 D0B0 0024          000000B0  22469          STG   3,176(0,13)
0000F712 41F0 D0A8               000000A8  22470          LA    15,168(0,13)
0000F716 E3F0 D0B8 0024          000000B8  22471          STG   15,184(0,13)
0000F71C 4110 D0B0               000000B0  22472          LA    1,176(0,13)
0000F720 E3F0 C0A0 0004          0000F538  22473          LG    15,@lit_1975_1013 ; thrd_join
0000F726                                   22474 @@gen_label1444 DS    0H
0000F726 05EF                              22475          BALR  14,15
0000F728                                   22476 @@gen_label1445 DS    0H
0000F728 12FF                              22477          LTR   15,15
0000F72A 4780 C2DE               0000F776  22478          BE    @L1440
                                           22479 * ***                   ((!*"failed to join mock dummy broker thread")\
                                           22480 *  ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdka\
                                           22481 * fka_mock.c", 2074, "!*\"failed to join mock dummy broker thread\""))\
                                           22482 * ;
0000F72E E3F0 C0A8 0004          0000F540  22483          LG    15,@lit_1975_1014
0000F734 4110 F920               00000920  22484          LA    1,2336(0,15)
0000F738 9500 1000      00000000 00000000  22485          CLI   0(1),0
0000F73C 4780 C2DE               0000F776  22486          BE    @L1440
0000F740                                   22487 @L1441   DS    0H
0000F740 E310 C0B8 0004          0000F550  22488          LG    1,@lit_1975_1015
0000F746 4110 1368               00000368  22489          LA    1,872(0,1)
                                                                                                                           Page  450 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F74A E310 D0B0 0024          000000B0  22490          STG   1,176(0,13)
0000F750 4110 F0FA               000000FA  22491          LA    1,250(0,15)
0000F754 E310 D0B8 0024          000000B8  22492          STG   1,184(0,13)
0000F75A E548 D0C0 081A          000000C0  22493          MVGHI 192(13),2074
0000F760 41F0 F948               00000948  22494          LA    15,2376(0,15)
0000F764 E3F0 D0C8 0024          000000C8  22495          STG   15,200(0,13)
0000F76A 4110 D0B0               000000B0  22496          LA    1,176(0,13)
0000F76E E3F0 C0B0 0004          0000F548  22497          LG    15,@lit_1975_1016 ; __assert
0000F774                                   22498 @@gen_label1448 DS    0H
0000F774 05EF                              22499          BALR  14,15
0000F776                                   22500 @@gen_label1449 DS    0H
0000F776                                   22501 @L1442   DS    0H
0000F776                                   22502 @L1440   DS    0H
                                           22503 * ***
                                           22504 * ***
                                           22505 * ***           rd_kafka_q_destroy_owner(mcluster->ops);
0000F776 E3F0 20B8 0004          000000B8  22506          LG    15,184(0,2)
0000F77C E3F0 D0B0 0024          000000B0  22507          STG   15,176(0,13)
0000F782 4110 D0B0               000000B0  22508          LA    1,176(0,13)
0000F786 E3F0 C0C0 0004          0000F558  22509          LG    15,@lit_1975_1017 ; rd_kafka_q_destroy_owner
0000F78C                                   22510 @@gen_label1450 DS    0H
0000F78C 05EF                              22511          BALR  14,15
0000F78E                                   22512 @@gen_label1451 DS    0H
                                           22513 * ***
                                           22514 * ***           rd_kafka_timers_destroy(&mcluster->timers);
0000F78E 41F0 24E0               000004E0  22515          LA    15,1248(0,2)
0000F792 E3F0 D0B0 0024          000000B0  22516          STG   15,176(0,13)
0000F798 4110 D0B0               000000B0  22517          LA    1,176(0,13)
0000F79C E3F0 C0C8 0004          0000F560  22518          LG    15,@lit_1975_1018 ; rd_kafka_timers_destroy
0000F7A2                                   22519 @@gen_label1452 DS    0H
0000F7A2 05EF                              22520          BALR  14,15
0000F7A4                                   22521 @@gen_label1453 DS    0H
                                           22522 * ***
                                           22523 * ***           if (mcluster->fd_size > 0) {
0000F7A4 E55C 20D0 0000          000000D0  22524          CHSI  208(2),0
0000F7AA 47D0 C348               0000F7E0  22525          BNH   @L1443
                                           22526 * ***                   rd_free(mcluster->fds);
0000F7AE E3F0 20D8 0004          000000D8  22527          LG    15,216(0,2)
0000F7B4 E3F0 D0B0 0024          000000B0  22528          STG   15,176(0,13)
0000F7BA 4110 D0B0               000000B0  22529          LA    1,176(0,13)
0000F7BE E330 C0D0 0004          0000F568  22530          LG    3,@lit_1975_1019 ; rd_free
0000F7C4 B904 00F3                         22531          LGR   15,3
0000F7C8                                   22532 @@gen_label1455 DS    0H
0000F7C8 05EF                              22533          BALR  14,15
0000F7CA                                   22534 @@gen_label1456 DS    0H
                                           22535 * ***                   rd_free(mcluster->handlers);
0000F7CA E3F0 20F0 0004          000000F0  22536          LG    15,240(0,2)
0000F7D0 E3F0 D0B0 0024          000000B0  22537          STG   15,176(0,13)
0000F7D6 4110 D0B0               000000B0  22538          LA    1,176(0,13)
0000F7DA B904 00F3                         22539          LGR   15,3
0000F7DE                                   22540 @@gen_label1457 DS    0H
0000F7DE 05EF                              22541          BALR  14,15
                                                                                                                           Page  451 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F7E0                                   22542 @@gen_label1458 DS    0H
                                           22543 * ***           }
0000F7E0                                   22544 @L1443   DS    0H
                                           22545 * ***
                                           22546 * ***           mtx_destroy(&mcluster->lock);
0000F7E0 41F0 24B8               000004B8  22547          LA    15,1208(0,2)
0000F7E4 E3F0 D0B0 0024          000000B0  22548          STG   15,176(0,13)
0000F7EA 4110 D0B0               000000B0  22549          LA    1,176(0,13)
0000F7EE E3F0 C0D8 0004          0000F570  22550          LG    15,@lit_1975_1021 ; mtx_destroy
0000F7F4                                   22551 @@gen_label1459 DS    0H
0000F7F4 05EF                              22552          BALR  14,15
0000F7F6                                   22553 @@gen_label1460 DS    0H
                                           22554 * ***
                                           22555 * ***           rd_free(mcluster->bootstraps);
0000F7F6 E3F0 20A8 0004          000000A8  22556          LG    15,168(0,2)
0000F7FC E3F0 D0B0 0024          000000B0  22557          STG   15,176(0,13)
0000F802 4110 D0B0               000000B0  22558          LA    1,176(0,13)
0000F806 E3F0 C0D0 0004          0000F568  22559          LG    15,@lit_1975_1019 ; rd_free
0000F80C                                   22560 @@gen_label1461 DS    0H
0000F80C 05EF                              22561          BALR  14,15
0000F80E                                   22562 @@gen_label1462 DS    0H
                                           22563 * ***
                                           22564 * ***           close(mcluster->wakeup_fds[0]);
0000F80E E3F0 20C0 0014          000000C0  22565          LGF   15,192(0,2)
0000F814 E3F0 D0B0 0024          000000B0  22566          STG   15,176(0,13)
0000F81A 4110 D0B0               000000B0  22567          LA    1,176(0,13)
0000F81E E330 C0E0 0004          0000F578  22568          LG    3,@lit_1975_1023 ; close
0000F824 B904 00F3                         22569          LGR   15,3
0000F828                                   22570 @@gen_label1463 DS    0H
0000F828 05EF                              22571          BALR  14,15
0000F82A                                   22572 @@gen_label1464 DS    0H
                                           22573 * ***           close(mcluster->wakeup_fds[1]);
0000F82A E3F0 20C4 0014          000000C4  22574          LGF   15,196(0,2)
0000F830 E3F0 D0B0 0024          000000B0  22575          STG   15,176(0,13)
0000F836 4110 D0B0               000000B0  22576          LA    1,176(0,13)
0000F83A B904 00F3                         22577          LGR   15,3
0000F83E                                   22578 @@gen_label1465 DS    0H
0000F83E 05EF                              22579          BALR  14,15
0000F840                                   22580 @@gen_label1466 DS    0H
                                           22581 * ***   }
0000F840                                   22582 @ret_lab_1975 DS 0H
                                           22583 * * **** Start of Epilogue
                                           22584          DCCEPIL
0000F840                                   22585+         ds 0h                                                          01-DCCEP
                                           22586+* Epilog
0000F840 D707 D088 D088 00000088 00000088  22587+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000F846 E3D0 D080 0004          00000080  22588+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000F84C E3C0 D090 0004          00000090  22589+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000F852 E3B0 C018 0004          00000018  22590+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000F858 E3C0 B010 0021          00000010  22591+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000F85E E3E0 D008 0004          00000008  22592+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000F864 EB1C D020 0004          00000020  22593+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
                                                                                                                           Page  452 
  Active Usings: @REGION_1975_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F86A 078E                              22594+         bcr 8,14                if same dsab, just return              01-DCCEP
0000F86C E3F0 D010 0024          00000010  22595+         stg 15,16(0,13)         save return code                       01-DCCEP
0000F872 E300 D018 0024          00000018  22596+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000F878 E3F0 D090 0004          00000090  22597+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000F87E E3F0 F018 0004          00000018  22598+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000F884 47F0 F040               00000040  22599+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           22600+* End of Epilog
                                           22601 * * **** End of Epilogue
                                           22602          DROP  12
                                           22603 *
                                           22604 *   DSECT for automatic variables in "rd_kafka_mock_cluster_destroy0"
                                           22605 *      (FUNCTION #1975)
                                           22606 *
00000000                00000000 000000AC  22607 @AUTO#rd_kafka_mock_cluster_destroy0 DSECT
00000000                                   22608          DS    XL168
000000A8                                   22609 rd_kafka_mock_cluster_destroy0#ret#0 DS 1F ; ret
                                           22610 *
0000F888                00000000 00010480  22611 @CODE    CSECT
                                           22612 *
                                           22613 *
                                           22614 *
                                           22615 * ....... start of rd_kafka_mock_cluster_destroy
                                           22616 rd_kafka_mock_cluster_destroy ALIAS X'99846D92818692816D949683926D8393A*
                                                                4A2A385996D8485A2A39996A8'
0000F888                                   22617 @LNAME1651 DS  0H
0000F888 0000001D                          22618          DC    X'0000001D'
0000F88C 99846D9281869281                  22619          DC    C'rd_kafka_mock_cluster_destroy'
0000F8A9 00                                22620          DC    X'00'
                                           22621 rd_kafka_mock_cluster_destroy DCCPRLG CINDEX=1651,BASER=12,FRAME=232,EN*
                                                                TRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1651
                                           22622          macro
                                           22623          dccextrn &m
                                           22624          gblc    &$dccext(1000)
                                           22625          gbla    &$dccexti
                                           22626          lcla    &i
                                           22627 &$dccext(&$dccexti+1) setc    '&m'
                                           22628 &i       seta    1
                                           22629 .loop    aif    (&i gt &$dccexti).around
                                           22630          aif    ('&$dccext(&i)' eq '&m').getout
                                           22631 &i       seta    &i+1
                                           22632          ago     .loop
                                           22633 .around  anop
                                           22634 &$dccexti seta &$dccexti+1
                                           22635          extrn  &m
                                           22636 .getout  anop
                                           22637          mend
0000F8B0                                   22638+$eye0344    ds    0d                                                    02-DCCCA
0000F8B0 C4C3C3                            22639+         dc cl3'DCC'                                                    02-DCCCA
0000F8B3 01                                22640+         dc xl1'01' format one                                          02-DCCCA
0000F8B4 00000000                          22641+         dc a(0)                                                        02-DCCCA
0000F8B8 000000000000F922                  22642+         dc ad(@PER_1651)                                               02-DCCCA
0000F8C0 00000000000000E8                  22643+         dc ad(232)                                                     02-DCCCA
                                                                                                                           Page  453 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F8C8 0000000000000000                  22644+         dc ad(0)                                                       02-DCCCA
0000F8D0 0000000000001000                  22645+         dc ad(4096)                                                    02-DCCCA
0000F8D8 20                                22646+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000F8D9 03                                22647+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000F8DA 03                                22648+         dc al1(3)                                                      02-DCCCA
0000F8DB 08                                22649+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000F8DC 00                                22650+         dc bl.8'00000000'                                              02-DCCCA
0000F8DD 000000                            22651+         dc al3(0)                                                      02-DCCCA
0000F8E0 000000000000F888                  22652+         dc ad(@LNAME1651)                                              02-DCCCA
0000F8E8                                   22653+         ds 0d                                                          02-DCCCA
0000F8E8 000000000000F8B0                  22654+         dc ad($eye0344)                                                02-DCCCA
0000F8F0 0000000000000000                  22655+         dc ad(0)                                                       02-DCCCA
0000F8F8                                   22656+         ds    0d                                                       01-DCCPR
                                           22657+         entry rd_kafka_mock_cluster_destroy                            01-DCCPR
0000F8F8                                   22658+rd_kafka_mock_cluster_destroy ds 0d                                     01-DCCPR
0000F8F8                                   22659+@REGION_1651_1 ds 0h                                                    01-DCCPR
0000F8F8 EBEC D008 0024          00000008  22660+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000F8FE E3E0 D088 0004          00000088  22661+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000F904 E3C0 D090 0004          00000090  22662+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000F90A B904 002E                         22663+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000F90E E3B0 C018 0004          00000018  22664+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000F914 A7EB 00E8               000000E8  22665+         aghi  14,232              increase by frame size               01-DCCPR
0000F918 E3E0 C020 0021          00000020  22666+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000F91E 4720 B020               00000020  22667+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000F922                                   22668+@PER_1651 ds   0h                                                       01-DCCPR
0000F922 EBDE 2080 0024          00000080  22669+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000F928 E3C0 2090 0024          00000090  22670+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000F92E B904 00D2                         22671+         lgr   13,2                set real frame pointer               01-DCCPR
0000F932 B904 00CF                         22672+         lgr   12,15               set base reg                         01-DCCPR
                        0000F8F8           22673+         using @REGION_1651_1,12                                        01-DCCPR
                                           22674 * ******* End of Prologue
                                           22675 * *
0000F936 E320 1000 0004          00000000  22676          LG    2,0(0,1)    ; mcluster
                                           22677 * ***           int res;
                                           22678 * ***           rd_kafka_op_t *rko;
                                           22679 * ***
                                           22680 * ***           do { if ((((mcluster->rk)->rk_conf.debug & (0x10000)))\
                                           22681 * ) rd_kafka_log0(&mcluster->rk->rk_conf,mcluster->rk,((void *)0), 7,(\
                                           22682 * 0x10000), "MOCK","Destroying cluster"); } while (0);
0000F93C                                   22683 @L1444   DS    0H
0000F93C E3F0 2020 0004          00000020  22684          LG    15,32(0,2)  ; offset of rk in rd_kafka_mock_cluster_s
0000F942 9101 F321      00000321 00000001  22685          TM    801(15),1
0000F946 4780 C0AC               0000F9A4  22686          BZ    @L1447
0000F94A E3F0 2020 0004          00000020  22687          LG    15,32(0,2)  ; offset of rk in rd_kafka_mock_cluster_s
0000F950 41F0 F210               00000210  22688          LA    15,528(0,15)
0000F954 E3F0 D0B0 0024          000000B0  22689          STG   15,176(0,13)
0000F95A E3F0 2020 0004          00000020  22690          LG    15,32(0,2)
0000F960 E3F0 D0B8 0024          000000B8  22691          STG   15,184(0,13)
0000F966 D707 D0C0 D0C0 000000C0 000000C0  22692          XC    192(8,13),192(13)
0000F96C E548 D0C8 0007          000000C8  22693          MVGHI 200(13),7
0000F972 C0FF 0001 0000                    22694          LLILF 15,X'00010000' ; 65536
0000F978 E3F0 D0D0 0024          000000D0  22695          STG   15,208(0,13)
                                                                                                                           Page  454 
  Active Usings: @REGION_1651_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000F97E E3F0 C248 0004          0000FB40  22696          LG    15,@lit_1651_1027
0000F984 4110 F15E               0000015E  22697          LA    1,350(0,15)
0000F988 E310 D0D8 0024          000000D8  22698          STG   1,216(0,13)
0000F98E 41F0 F974               00000974  22699          LA    15,2420(0,15)
0000F992 E3F0 D0E0 0024          000000E0  22700          STG   15,224(0,13)
0000F998 4110 D0B0               000000B0  22701          LA    1,176(0,13)
0000F99C E3F0 C240 0004          0000FB38  22702          LG    15,@lit_1651_1028 ; rd_kafka_log0
0000F9A2                                   22703 @@gen_label1468 DS    0H
0000F9A2 05EF                              22704          BALR  14,15
0000F9A4                                   22705 @@gen_label1469 DS    0H
0000F9A4                                   22706 @L1447   DS    0H
                                           22707 * ***
                                           22708 * ***           ((rd_atomic32_get(&mcluster->rk->rk_mock.cluster_cnt) \
                                           22709 * > 0) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\\
                                           22710 * rdkafka_mock.c", 2102, "rd_atomic32_get(&mcluster->rk->rk_mock.clust\
                                           22711 * er_cnt) > 0"));
0000F9A4 E3F0 2020 0004          00000020  22712          LG    15,32(0,2)  ; offset of rk in rd_kafka_mock_cluster_s
0000F9AA A739 11A0               000011A0  22713          LGHI  3,4512      ; 4512
0000F9AE 41F3 F008               00000008  22714          LA    15,8(3,15)
0000F9B2 E3F0 D0B0 0024          000000B0  22715          STG   15,176(0,13)
0000F9B8 4110 D0B0               000000B0  22716          LA    1,176(0,13)
0000F9BC E3F0 C250 0004          0000FB48  22717          LG    15,@lit_1651_1030 ; rd_atomic32_get
0000F9C2                                   22718 @@gen_label1470 DS    0H
0000F9C2 05EF                              22719          BALR  14,15
0000F9C4                                   22720 @@gen_label1471 DS    0H
0000F9C4 12FF                              22721          LTR   15,15
0000F9C6 4720 C10E               0000FA06  22722          BH    @L1449
0000F9CA                                   22723 @L1448   DS    0H
0000F9CA E3F0 C260 0004          0000FB58  22724          LG    15,@lit_1651_1031
0000F9D0 41F0 F388               00000388  22725          LA    15,904(0,15)
0000F9D4 E3F0 D0B0 0024          000000B0  22726          STG   15,176(0,13)
0000F9DA E3F0 C248 0004          0000FB40  22727          LG    15,@lit_1651_1027
0000F9E0 4110 F0FA               000000FA  22728          LA    1,250(0,15)
0000F9E4 E310 D0B8 0024          000000B8  22729          STG   1,184(0,13)
0000F9EA E548 D0C0 0836          000000C0  22730          MVGHI 192(13),2102
0000F9F0 41F0 F988               00000988  22731          LA    15,2440(0,15)
0000F9F4 E3F0 D0C8 0024          000000C8  22732          STG   15,200(0,13)
0000F9FA 4110 D0B0               000000B0  22733          LA    1,176(0,13)
0000F9FE E3F0 C258 0004          0000FB50  22734          LG    15,@lit_1651_1033 ; __assert
0000FA04                                   22735 @@gen_label1473 DS    0H
0000FA04 05EF                              22736          BALR  14,15
0000FA06                                   22737 @@gen_label1474 DS    0H
0000FA06                                   22738 @L1449   DS    0H
                                           22739 * ***           rd_atomic32_sub(&mcluster->rk->rk_mock.cluster_cnt, 1)\
                                           22740 * ;
0000FA06 E3F0 2020 0004          00000020  22741          LG    15,32(0,2)  ; offset of rk in rd_kafka_mock_cluster_s
0000FA0C 41F3 F008               00000008  22742          LA    15,8(3,15)
0000FA10 E3F0 D0B0 0024          000000B0  22743          STG   15,176(0,13)
0000FA16 E548 D0B8 0001          000000B8  22744          MVGHI 184(13),1
0000FA1C 4110 D0B0               000000B0  22745          LA    1,176(0,13)
0000FA20 E3F0 C268 0004          0000FB60  22746          LG    15,@lit_1651_1035 ; rd_atomic32_sub
0000FA26                                   22747 @@gen_label1475 DS    0H
                                                                                                                           Page  455 
  Active Usings: @REGION_1651_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FA26 05EF                              22748          BALR  14,15
0000FA28                                   22749 @@gen_label1476 DS    0H
                                           22750 * ***
                                           22751 * ***           rko = rd_kafka_op_req2(mcluster->ops, RD_KAFKA_OP_TERM\
                                           22752 * INATE);
0000FA28 E3F0 20B8 0004          000000B8  22753          LG    15,184(0,2)
0000FA2E E3F0 D0B0 0024          000000B0  22754          STG   15,176(0,13)
0000FA34 E548 D0B8 0013          000000B8  22755          MVGHI 184(13),19
0000FA3A 4110 D0B0               000000B0  22756          LA    1,176(0,13)
0000FA3E E3F0 C270 0004          0000FB68  22757          LG    15,@lit_1651_1036 ; rd_kafka_op_req2
0000FA44                                   22758 @@gen_label1477 DS    0H
0000FA44 05EF                              22759          BALR  14,15
0000FA46                                   22760 @@gen_label1478 DS    0H
                                           22761 * ***
                                           22762 * ***           if (rko)
0000FA46 B902 001F                         22763          LTGR  1,15
0000FA4A 4780 C168               0000FA60  22764          BZ    @L1450
                                           22765 * ***                   rd_kafka_op_destroy(rko);
0000FA4E E3F0 D0B0 0024          000000B0  22766          STG   15,176(0,13)
0000FA54 4110 D0B0               000000B0  22767          LA    1,176(0,13)
0000FA58 E3F0 C278 0004          0000FB70  22768          LG    15,@lit_1651_1037 ; rd_kafka_op_destroy
0000FA5E                                   22769 @@gen_label1480 DS    0H
0000FA5E 05EF                              22770          BALR  14,15
0000FA60                                   22771 @@gen_label1481 DS    0H
0000FA60                                   22772 @L1450   DS    0H
                                           22773 * ***
                                           22774 * ***           if (thrd_join(mcluster->thread, &res) != 0)
0000FA60 E3F0 20B0 0004          000000B0  22775          LG    15,176(0,2)
0000FA66 E3F0 D0B0 0024          000000B0  22776          STG   15,176(0,13)
0000FA6C 41F0 D0A8               000000A8  22777          LA    15,168(0,13)
0000FA70 E3F0 D0B8 0024          000000B8  22778          STG   15,184(0,13)
0000FA76 4110 D0B0               000000B0  22779          LA    1,176(0,13)
0000FA7A E3F0 C280 0004          0000FB78  22780          LG    15,@lit_1651_1038 ; thrd_join
0000FA80                                   22781 @@gen_label1482 DS    0H
0000FA80 05EF                              22782          BALR  14,15
0000FA82                                   22783 @@gen_label1483 DS    0H
0000FA82 12FF                              22784          LTR   15,15
0000FA84 4780 C1D8               0000FAD0  22785          BE    @L1451
                                           22786 * ***                   ((!*"failed to join mock thread") ? (void)0 : \
                                           22787 * __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", \
                                           22788 * 2111, "!*\"failed to join mock thread\""));
0000FA88 E3F0 C248 0004          0000FB40  22789          LG    15,@lit_1651_1027
0000FA8E 4110 F9C0               000009C0  22790          LA    1,2496(0,15)
0000FA92 9500 1000      00000000 00000000  22791          CLI   0(1),0
0000FA96 4780 C1D8               0000FAD0  22792          BE    @L1451
0000FA9A                                   22793 @L1452   DS    0H
0000FA9A E310 C260 0004          0000FB58  22794          LG    1,@lit_1651_1031
0000FAA0 4110 1388               00000388  22795          LA    1,904(0,1)
0000FAA4 E310 D0B0 0024          000000B0  22796          STG   1,176(0,13)
0000FAAA 4110 F0FA               000000FA  22797          LA    1,250(0,15)
0000FAAE E310 D0B8 0024          000000B8  22798          STG   1,184(0,13)
0000FAB4 E548 D0C0 083F          000000C0  22799          MVGHI 192(13),2111
                                                                                                                           Page  456 
  Active Usings: @REGION_1651_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FABA 41F0 F9DC               000009DC  22800          LA    15,2524(0,15)
0000FABE E3F0 D0C8 0024          000000C8  22801          STG   15,200(0,13)
0000FAC4 4110 D0B0               000000B0  22802          LA    1,176(0,13)
0000FAC8 E3F0 C258 0004          0000FB50  22803          LG    15,@lit_1651_1033 ; __assert
0000FACE                                   22804 @@gen_label1486 DS    0H
0000FACE 05EF                              22805          BALR  14,15
0000FAD0                                   22806 @@gen_label1487 DS    0H
0000FAD0                                   22807 @L1453   DS    0H
0000FAD0                                   22808 @L1451   DS    0H
                                           22809 * ***
                                           22810 * ***           rd_free(mcluster);
0000FAD0 E320 D0B0 0024          000000B0  22811          STG   2,176(0,13)
0000FAD6 4110 D0B0               000000B0  22812          LA    1,176(0,13)
0000FADA E3F0 C288 0004          0000FB80  22813          LG    15,@lit_1651_1042 ; rd_free
0000FAE0                                   22814 @@gen_label1488 DS    0H
0000FAE0 05EF                              22815          BALR  14,15
0000FAE2                                   22816 @@gen_label1489 DS    0H
                                           22817 * ***   }
0000FAE2                                   22818 @ret_lab_1651 DS 0H
                                           22819 * * **** Start of Epilogue
                                           22820          DCCEPIL
0000FAE2                                   22821+         ds 0h                                                          01-DCCEP
                                           22822+* Epilog
0000FAE2 D707 D088 D088 00000088 00000088  22823+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0000FAE8 E3D0 D080 0004          00000080  22824+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
0000FAEE E3C0 D090 0004          00000090  22825+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
0000FAF4 E3B0 C018 0004          00000018  22826+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0000FAFA E3C0 B010 0021          00000010  22827+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
0000FB00 E3E0 D008 0004          00000008  22828+         lg  14,8(0,13)          load up return address                 01-DCCEP
0000FB06 EB1C D020 0004          00000020  22829+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
0000FB0C 078E                              22830+         bcr 8,14                if same dsab, just return              01-DCCEP
0000FB0E E3F0 D010 0024          00000010  22831+         stg 15,16(0,13)         save return code                       01-DCCEP
0000FB14 E300 D018 0024          00000018  22832+         stg 0,24(0,13)          save more return code                  01-DCCEP
0000FB1A E3F0 D090 0004          00000090  22833+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
0000FB20 E3F0 F018 0004          00000018  22834+         lg  15,24(0,15)         load dvt address                       01-DCCEP
0000FB26 47F0 F040               00000040  22835+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           22836+* End of Epilog
                                           22837 * * **** End of Epilogue
0000FB30                                   22838          DS    0D
0000FB30 000000E8                          22839 @FRAMESIZE_1651 DC F'232'
0000FB34 00000000
0000FB38 0000000000000000                  22840 @lit_1651_1028 DC AD(rd_kafka_log0)
0000FB40 0000000000010840                  22841 @lit_1651_1027 DC AD(@strings@)
0000FB48 00000000000002F0                  22842 @lit_1651_1030 DC AD(rd_atomic32_get)
0000FB50 0000000000000000                  22843 @lit_1651_1033 DC AD(__assert)
0000FB58 0000000000010480                  22844 @lit_1651_1031 DC AD(@DATA)
0000FB60 00000000000001A8                  22845 @lit_1651_1035 DC AD(rd_atomic32_sub)
0000FB68 0000000000000000                  22846 @lit_1651_1036 DC AD(rd_kafka_op_req2)
0000FB70 0000000000000000                  22847 @lit_1651_1037 DC AD(rd_kafka_op_destroy)
0000FB78 0000000000000000                  22848 @lit_1651_1038 DC AD(thrd_join)
0000FB80 0000000000000B78                  22849 @lit_1651_1042 DC AD(rd_free)
                                           22850          DROP  12
                                                                                                                           Page  457 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           22851 *
                                           22852 *   DSECT for automatic variables in "rd_kafka_mock_cluster_destroy"
                                           22853 *      (FUNCTION #1651)
                                           22854 *
00000000                00000000 000000AC  22855 @AUTO#rd_kafka_mock_cluster_destroy DSECT
00000000                                   22856          DS    XL168
000000A8                                   22857 rd_kafka_mock_cluster_destroy#res#0 DS 1F ; res
                                           22858 *
0000FB88                00000000 00010480  22859 @CODE    CSECT
                                           22860 *
                                           22861 *
                                           22862 *
                                           22863 * ....... start of rd_kafka_mock_cluster_new
                                           22864 rd_kafka_mock_cluster_new ALIAS X'99846D92818692816D949683926D8393A4A2A*
                                                                385996D9585A6'
0000FB88                                   22865 @LNAME1650 DS  0H
0000FB88 00000019                          22866          DC    X'00000019'
0000FB8C 99846D9281869281                  22867          DC    C'rd_kafka_mock_cluster_new'
0000FBA5 00                                22868          DC    X'00'
                                           22869 rd_kafka_mock_cluster_new DCCPRLG CINDEX=1650,BASER=12,FRAME=248,ENTRY=*
                                                                YES,ARCH=ZARCH,LNAMEADDR=@LNAME1650
                                           22870          macro
                                           22871          dccextrn &m
                                           22872          gblc    &$dccext(1000)
                                           22873          gbla    &$dccexti
                                           22874          lcla    &i
                                           22875 &$dccext(&$dccexti+1) setc    '&m'
                                           22876 &i       seta    1
                                           22877 .loop    aif    (&i gt &$dccexti).around
                                           22878          aif    ('&$dccext(&i)' eq '&m').getout
                                           22879 &i       seta    &i+1
                                           22880          ago     .loop
                                           22881 .around  anop
                                           22882 &$dccexti seta &$dccexti+1
                                           22883          extrn  &m
                                           22884 .getout  anop
                                           22885          mend
0000FBA8                                   22886+$eye0347    ds    0d                                                    02-DCCCA
0000FBA8 C4C3C3                            22887+         dc cl3'DCC'                                                    02-DCCCA
0000FBAB 01                                22888+         dc xl1'01' format one                                          02-DCCCA
0000FBAC 00000000                          22889+         dc a(0)                                                        02-DCCCA
0000FBB0 000000000000FC1A                  22890+         dc ad(@PER_1650)                                               02-DCCCA
0000FBB8 00000000000000F8                  22891+         dc ad(248)                                                     02-DCCCA
0000FBC0 0000000000000000                  22892+         dc ad(0)                                                       02-DCCCA
0000FBC8 0000000000001000                  22893+         dc ad(4096)                                                    02-DCCCA
0000FBD0 20                                22894+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
0000FBD1 03                                22895+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0000FBD2 03                                22896+         dc al1(3)                                                      02-DCCCA
0000FBD3 08                                22897+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0000FBD4 00                                22898+         dc bl.8'00000000'                                              02-DCCCA
0000FBD5 000000                            22899+         dc al3(0)                                                      02-DCCCA
0000FBD8 000000000000FB88                  22900+         dc ad(@LNAME1650)                                              02-DCCCA
                                                                                                                           Page  458 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FBE0                                   22901+         ds 0d                                                          02-DCCCA
0000FBE0 000000000000FBA8                  22902+         dc ad($eye0347)                                                02-DCCCA
0000FBE8 0000000000000000                  22903+         dc ad(0)                                                       02-DCCCA
0000FBF0                                   22904+         ds    0d                                                       01-DCCPR
                                           22905+         entry rd_kafka_mock_cluster_new                                01-DCCPR
0000FBF0                                   22906+rd_kafka_mock_cluster_new ds 0d                                         01-DCCPR
0000FBF0                                   22907+@REGION_1650_1 ds 0h                                                    01-DCCPR
0000FBF0 EBEC D008 0024          00000008  22908+         stmg  14,12,8(13)                         Save regs            01-DCCPR
0000FBF6 E3E0 D088 0004          00000088  22909+         lg    14,17*8(0,13)       addr of next savearea                01-DCCPR
0000FBFC E3C0 D090 0004          00000090  22910+         lg    12,18*8(0,13)       addr of DSAB                         01-DCCPR
0000FC02 B904 002E                         22911+         lgr   2,14                copy addr of our savearea            01-DCCPR
0000FC06 E3B0 C018 0004          00000018  22912+         lg    11,24(0,12)         get dvt address                      01-DCCPR
0000FC0C A7EB 00F8               000000F8  22913+         aghi  14,248              increase by frame size               01-DCCPR
0000FC10 E3E0 C020 0021          00000020  22914+         clg   14,32(0,12)  Will this DSAB hold this stack frame?       01-DCCPR
0000FC16 4720 B020               00000020  22915+         bc    2,32(0,11)          goto prolog expansion                01-DCCPR
0000FC1A                                   22916+@PER_1650 ds   0h                                                       01-DCCPR
0000FC1A EBDE 2080 0024          00000080  22917+         stmg  13,14,16*8(2)       back/forwards sa                     01-DCCPR
0000FC20 E3C0 2090 0024          00000090  22918+         stg   12,18*8(0,2)        dsab sa                              01-DCCPR
0000FC26 B904 00D2                         22919+         lgr   13,2                set real frame pointer               01-DCCPR
0000FC2A B904 00CF                         22920+         lgr   12,15               set base reg                         01-DCCPR
                        0000FBF0           22921+         using @REGION_1650_1,12                                        01-DCCPR
                                           22922          DCCPRV REG=8      ; Get PRV from DVT
0000FC2E E380 B008 0004          00000008  22923+         LG 8,8(0,11)                                                   01-DCCPR
                                           22924 * ******* End of Prologue
                                           22925 * *
0000FC34 E350 1000 0004          00000000  22926          LG    5,0(0,1)    ; rk
0000FC3A 5860 100C               0000000C  22927          L     6,12(0,1)   ; broker_cnt
                                           22928 * ***           rd_kafka_mock_cluster_t *mcluster;
                                           22929 * ***           rd_kafka_mock_broker_t *mrkb;
                                           22930 * ***           int i, r;
                                           22931 * ***           size_t bootstraps_len = 0;
0000FC3E A749 0000               00000000  22932          LGHI  4,0         ; 0
                                           22933 * ***           size_t of;
                                           22934 * ***
                                           22935 * ***           mcluster = rd_calloc(1, sizeof(*mcluster));
0000FC42 E548 D0B0 0001          000000B0  22936          MVGHI 176(13),1
0000FC48 E548 D0B8 0560          000000B8  22937          MVGHI 184(13),1376
0000FC4E 4110 D0B0               000000B0  22938          LA    1,176(0,13)
0000FC52 E3F0 C108 0004          0000FCF8  22939          LG    15,@lit_1650_1045 ; rd_calloc
0000FC58                                   22940 @@gen_label1490 DS    0H
0000FC58 05EF                              22941          BALR  14,15
0000FC5A                                   22942 @@gen_label1491 DS    0H
0000FC5A B904 007F                         22943          LGR   7,15
                                           22944 * ***           mcluster->rk = rk;
0000FC5E E350 7020 0024          00000020  22945          STG   5,32(0,7)   ; offset of rk in rd_kafka_mock_cluster_s
                                           22946 * ***
                                           22947 * ***           mcluster->dummy_rkb = rd_kafka_broker_add(rk, RD_KAFKA\
                                           22948 * _INTERNAL,
                                           22949 * ***                                                     RD_KAFKA_PRO\
                                           22950 * TO_PLAINTEXT,
                                           22951 * ***                                                     "mock", 0,
                                           22952 * ***                                                     -1);
                                                                                                                           Page  459 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FC64 E350 D0B0 0024          000000B0  22953          STG   5,176(0,13)
0000FC6A E548 D0B8 0002          000000B8  22954          MVGHI 184(13),2
0000FC70 D707 D0C0 D0C0 000000C0 000000C0  22955          XC    192(8,13),192(13)
0000FC76 E320 C118 0004          0000FD08  22956          LG    2,@lit_1650_1046
0000FC7C 41F0 26B4               000006B4  22957          LA    15,1716(0,2)
0000FC80 E3F0 D0C8 0024          000000C8  22958          STG   15,200(0,13)
0000FC86 D707 D0D0 D0D0 000000D0 000000D0  22959          XC    208(8,13),208(13)
0000FC8C E548 D0D8 FFFF          000000D8  22960          MVGHI 216(13),-1
0000FC92 4110 D0B0               000000B0  22961          LA    1,176(0,13)
0000FC96 E3F0 C110 0004          0000FD00  22962          LG    15,@lit_1650_1047 ; rd_kafka_broker_add
0000FC9C                                   22963 @@gen_label1492 DS    0H
0000FC9C 05EF                              22964          BALR  14,15
0000FC9E                                   22965 @@gen_label1493 DS    0H
0000FC9E E3F0 70E0 0024          000000E0  22966          STG   15,224(0,7)
                                           22967 * ***           snprintf(mcluster->id, sizeof(mcluster->id), "mockClus\
                                           22968 * ter%lx", (intptr_t)mcluster >> 2);
0000FCA4 E370 D0B0 0024          000000B0  22969          STG   7,176(0,13)
0000FCAA E548 D0B8 0020          000000B8  22970          MVGHI 184(13),32
0000FCB0 41F0 29FC               000009FC  22971          LA    15,2556(0,2)
0000FCB4 E3F0 D0C0 0024          000000C0  22972          STG   15,192(0,13)
0000FCBA EBF7 0002 000A          00000002  22973          SRAG  15,7,2(0)
0000FCC0 E3F0 D0C8 0024          000000C8  22974          STG   15,200(0,13)
0000FCC6 4110 D0B0               000000B0  22975          LA    1,176(0,13)
0000FCCA E3F0 C120 0004          0000FD10  22976          LG    15,@lit_1650_1048 ; snprintf
0000FCD0                                   22977 @@gen_label1494 DS    0H
0000FCD0 05EF                              22978          BALR  14,15
0000FCD2                                   22979 @@gen_label1495 DS    0H
                                           22980 * ***
                                           22981 * ***
                                           22982 * ***           do { (&mcluster->brokers)->tqh_first = (((void *)0)); \
                                           22983 * (&mcluster->brokers)->tqh_last = &(&mcluster->brokers)->tqh_first; }\
                                           22984 *  while ( 0);
0000FCD2                                   22985 @L1454   DS    0H
0000FCD2 A7F9 0000               00000000  22986          LGHI  15,0        ; 0
0000FCD6 E3F0 7030 0024          00000030  22987          STG   15,48(0,7)  ; offset of brokers in rd_kafka_mock_cluster*
                                                                _s
0000FCDC 41F0 7030               00000030  22988          LA    15,48(0,7)
0000FCE0 E3F0 7038 0024          00000038  22989          STG   15,56(0,7)  ; offset of tqh_last in 0000170
                                           22990 * ***
                                           22991 * ***           for (i = 1 ; i <= broker_cnt ; i++) {
0000FCE6 A738 0001               00000001  22992          LHI   3,1         ; 1
0000FCEA 47F0 C22E               0000FE1E  22993          B     @L1458
0000FCF0                                   22994          DS    0D
0000FCF0 000000F8                          22995 @FRAMESIZE_1650 DC F'248'
0000FCF4 00000000
0000FCF8 0000000000000728                  22996 @lit_1650_1045 DC AD(rd_calloc)
0000FD00 0000000000000000                  22997 @lit_1650_1047 DC AD(rd_kafka_broker_add)
0000FD08 0000000000010840                  22998 @lit_1650_1046 DC AD(@strings@)
0000FD10 0000000000000000                  22999 @lit_1650_1048 DC AD(snprintf)
0000FD18 000000000000BBC8                  23000 @lit_1650_1051 DC AD(rd_kafka_mock_broker_new)
0000FD20 000000000000F8F8                  23001 @lit_1650_1052 DC AD(rd_kafka_mock_cluster_destroy)
0000FD28 0000000000000000                  23002 @lit_1650_1054 DC AD(mtx_init)
                                                                                                                           Page  460 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FD30 0000000000000000                  23003 @lit_1650_1060 DC AD(rd_list_init)
0000FD38 0000000000000B78                  23004 @lit_1650_1059 DC AD(rd_free)
0000FD40 0000000000000000                  23005 @lit_1650_1064 DC AD(rd_kafka_q_new0)
0000FD48 0000000000010480                  23006 @lit_1650_1063 DC AD(@DATA)
0000FD50 00000000                          23007 @lit_1650_1062 DC Q(rd_kafka_mock_api_handlers)
0000FD54 00000000
0000FD58 0000000000000000                  23008 @lit_1650_1066 DC AD(rd_kafka_timers_init)
0000FD60 000000000000F2A8                  23009 @lit_1650_1065 DC AD(rd_kafka_mock_cluster_op_serve)
0000FD68 00000000000005B0                  23010 @lit_1650_1067 DC AD(rd_pipe_nonblocking)
0000FD70 0000000000000000                  23011 @lit_1650_1068 DC AD(strerror)
0000FD78 0000000000000000                  23012 @lit_1650_1070 DC AD(rd_kafka_log0)
0000FD80 0000000000000000                  23013 @lit_1650_1071 DC AD(rd_kafka_q_io_event_enable)
0000FD88 0000000000000000                  23014 @lit_1650_1073 DC AD(thrd_create)
0000FD90 000000000000B138                  23015 @lit_1650_1072 DC AD(rd_kafka_mock_cluster_thread_main)
0000FD98 0000000000000000                  23016 @lit_1650_1074 DC AD(__error)
0000FDA0 0000000000000898                  23017 @lit_1650_1080 DC AD(rd_malloc)
0000FDA8 0000000000000000                  23018 @lit_1650_1087 DC AD(__assert)
0000FDB0 0000000000000060                  23019 @lit_1650_1092 DC AD(rd_atomic32_add)
0000FDB8                                   23020 @L1457   DS    0H
                                           23021 * ***                   if (!(mrkb = rd_kafka_mock_broker_new(mcluster\
                                           23022 * , i))) {
0000FDB8 E370 D0B0 0024          000000B0  23023          STG   7,176(0,13)
0000FDBE B914 00F3                         23024          LGFR  15,3
0000FDC2 E3F0 D0B8 0024          000000B8  23025          STG   15,184(0,13)
0000FDC8 4110 D0B0               000000B0  23026          LA    1,176(0,13)
0000FDCC E3F0 C128 0004          0000FD18  23027          LG    15,@lit_1650_1051 ; rd_kafka_mock_broker_new
0000FDD2                                   23028 @@gen_label1496 DS    0H
0000FDD2 05EF                              23029          BALR  14,15
0000FDD4                                   23030 @@gen_label1497 DS    0H
0000FDD4 B902 002F                         23031          LTGR  2,15        ; mrkb
0000FDD8 4770 C206               0000FDF6  23032          BNZ   @L1461
                                           23033 * ***                           rd_kafka_mock_cluster_destroy(mcluster\
                                           23034 * );
0000FDDC E370 D0B0 0024          000000B0  23035          STG   7,176(0,13)
0000FDE2 4110 D0B0               000000B0  23036          LA    1,176(0,13)
0000FDE6 E3F0 C130 0004          0000FD20  23037          LG    15,@lit_1650_1052 ; rd_kafka_mock_cluster_destroy
0000FDEC                                   23038 @@gen_label1499 DS    0H
0000FDEC 05EF                              23039          BALR  14,15
0000FDEE                                   23040 @@gen_label1500 DS    0H
                                           23041 * ***                           return ((void *)0);
0000FDEE A7F9 0000               00000000  23042          LGHI  15,0        ; 0
0000FDF2 47F0 C694               00010284  23043          B     @ret_lab_1650
                                           23044 * ***                   }
0000FDF6                                   23045 @L1461   DS    0H
                                           23046 * ***
                                           23047 * ***
                                           23048 * ***                   bootstraps_len += __strlen(mrkb->advertised_li\
                                           23049 * stener) + 6 + 1;
0000FDF6 41F0 2014               00000014  23050          LA    15,20(0,2)
0000FDFA B904 001F                         23051          LGR   1,15
0000FDFE A709 0000               00000000  23052          LGHI  0,0
0000FE02                                   23053 @@gen_label1501 DS 0H
                                                                                                                           Page  461 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FE02 B25E 000F                         23054          SRST  0,15
0000FE06 4710 C212               0000FE02  23055          BC  1,@@gen_label1501
0000FE0A B90B 0001                         23056          SLGR  0,1
0000FE0E A70B 0006               00000006  23057          AGHI  0,6
0000FE12 A70B 0001               00000001  23058          AGHI  0,1
0000FE16 B90A 0040                         23059          ALGR  4,0
                                           23060 * ***           }
0000FE1A A73A 0001               00000001  23061          AHI   3,1
0000FE1E                                   23062 @L1458   DS    0H
0000FE1E 1936                              23063          CR    3,6
0000FE20 47D0 C1C8               0000FDB8  23064          BNH   @L1457
                                           23065 * ***
                                           23066 * ***           mtx_init(&mcluster->lock, 0);
0000FE24 41F0 74B8               000004B8  23067          LA    15,1208(0,7)
0000FE28 E3F0 D0B0 0024          000000B0  23068          STG   15,176(0,13)
0000FE2E D707 D0B8 D0B8 000000B8 000000B8  23069          XC    184(8,13),184(13)
0000FE34 4110 D0B0               000000B0  23070          LA    1,176(0,13)
0000FE38 E3F0 C138 0004          0000FD28  23071          LG    15,@lit_1650_1054 ; mtx_init
0000FE3E                                   23072 @@gen_label1503 DS    0H
0000FE3E 05EF                              23073          BALR  14,15
0000FE40                                   23074 @@gen_label1504 DS    0H
                                           23075 * ***
                                           23076 * ***           do { (&mcluster->topics)->tqh_first = (((void *)0)); (\
                                           23077 * &mcluster->topics)->tqh_last = &(&mcluster->topics)->tqh_first; } wh\
                                           23078 * ile ( 0);
0000FE40                                   23079 @L1462   DS    0H
0000FE40 A7F9 0000               00000000  23080          LGHI  15,0        ; 0
0000FE44 E3F0 7048 0024          00000048  23081          STG   15,72(0,7)  ; offset of topics in rd_kafka_mock_cluster_*
                                                                s
0000FE4A 41F0 7048               00000048  23082          LA    15,72(0,7)
0000FE4E E3F0 7050 0024          00000050  23083          STG   15,80(0,7)  ; offset of tqh_last in 0000171
                                           23084 * ***           mcluster->defaults.partition_cnt = 4;
0000FE54 E54C 70E8 0004          000000E8  23085          MVHI  232(7),4    ; offset of defaults in rd_kafka_mock_cluste*
                                                                r_s
                                           23086 * ***           mcluster->defaults.replication_factor = ((3) < (broker\
                                           23087 * _cnt) ? (3) : (broker_cnt));
0000FE5A A76E 0003               00000003  23088          CHI   6,3
0000FE5E 47D0 C27A               0000FE6A  23089          BNH   @L1465
0000FE62 A768 0003               00000003  23090          LHI   6,3         ; 3
0000FE66 47F0 C27A               0000FE6A  23091          B     @L1466
0000FE6A                                   23092 @L1465   DS    0H
0000FE6A                                   23093 @L1466   DS    0H
0000FE6A 5060 70EC               000000EC  23094          ST    6,236(0,7)
                                           23095 * ***
                                           23096 * ***           do { (&mcluster->cgrps)->tqh_first = (((void *)0)); (&\
                                           23097 * mcluster->cgrps)->tqh_last = &(&mcluster->cgrps)->tqh_first; } while\
                                           23098 *  ( 0);
0000FE6E                                   23099 @L1467   DS    0H
0000FE6E A7F9 0000               00000000  23100          LGHI  15,0        ; 0
0000FE72 E3F0 7060 0024          00000060  23101          STG   15,96(0,7)  ; offset of cgrps in rd_kafka_mock_cluster_s
0000FE78 41F0 7060               00000060  23102          LA    15,96(0,7)
0000FE7C E3F0 7068 0024          00000068  23103          STG   15,104(0,7) ; offset of tqh_last in 0000172
                                                                                                                           Page  462 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           23104 * ***
                                           23105 * ***           do { (&mcluster->coords)->tqh_first = (((void *)0)); (\
                                           23106 * &mcluster->coords)->tqh_last = &(&mcluster->coords)->tqh_first; } wh\
                                           23107 * ile ( 0);
0000FE82                                   23108 @L1470   DS    0H
0000FE82 A7F9 0000               00000000  23109          LGHI  15,0        ; 0
0000FE86 E3F0 7070 0024          00000070  23110          STG   15,112(0,7) ; offset of coords in rd_kafka_mock_cluster_*
                                                                s
0000FE8C 41F0 7070               00000070  23111          LA    15,112(0,7)
0000FE90 E3F0 7078 0024          00000078  23112          STG   15,120(0,7) ; offset of tqh_last in 0000173
                                           23113 * ***
                                           23114 * ***           rd_list_init(&mcluster->pids, 16, rd_free);
0000FE96 41F0 7080               00000080  23115          LA    15,128(0,7)
0000FE9A E3F0 D0B0 0024          000000B0  23116          STG   15,176(0,13)
0000FEA0 E548 D0B8 0010          000000B8  23117          MVGHI 184(13),16
0000FEA6 E3F0 C148 0004          0000FD38  23118          LG    15,@lit_1650_1059 ; rd_free
0000FEAC E3F0 D0C0 0024          000000C0  23119          STG   15,192(0,13)
0000FEB2 4110 D0B0               000000B0  23120          LA    1,176(0,13)
0000FEB6 E3F0 C140 0004          0000FD30  23121          LG    15,@lit_1650_1060 ; rd_list_init
0000FEBC                                   23122 @@gen_label1506 DS    0H
0000FEBC 05EF                              23123          BALR  14,15
0000FEBE                                   23124 @@gen_label1507 DS    0H
                                           23125 * ***
                                           23126 * ***           do { (&mcluster->errstacks)->tqh_first = (((void *)0))\
                                           23127 * ; (&mcluster->errstacks)->tqh_last = &(&mcluster->errstacks)->tqh_fi\
                                           23128 * rst; } while ( 0);
0000FEBE                                   23129 @L1473   DS    0H
0000FEBE A739 0000               00000000  23130          LGHI  3,0         ; 0
0000FEC2 E330 70F8 0024          000000F8  23131          STG   3,248(0,7)  ; offset of errstacks in rd_kafka_mock_clust*
                                                                er_s
0000FEC8 41F0 70F8               000000F8  23132          LA    15,248(0,7)
0000FECC E3F0 7100 0024          00000100  23133          STG   15,256(0,7) ; offset of tqh_last in rd_kafka_mock_error_*
                                                                stack_head_s
                                           23134 * ***
                                           23135 * ***           __memcpy(mcluster->api_handlers,rd_kafka_mock_api_hand\
                                           23136 * lers,sizeof(mcluster->api_handlers));
0000FED2 E3F0 C160 0016          0000FD50  23137          LLGF  15,@lit_1650_1062 ; rd_kafka_mock_api_handlers
0000FED8 41FF 8000               00000000  23138          LA    15,0(15,8)
0000FEDC 4110 7108               00000108  23139          LA    1,264(0,7)
0000FEE0 D2FF 1000 F000 00000000 00000000  23140          MVC   0(256,1),0(15)
0000FEE6 4110 1100               00000100  23141          LA    1,256(0,1)
0000FEEA 41F0 F100               00000100  23142          LA    15,256(0,15)
0000FEEE D2FF 1000 F000 00000000 00000000  23143          MVC   0(256,1),0(15)
0000FEF4 4110 1100               00000100  23144          LA    1,256(0,1)
0000FEF8 41F0 F100               00000100  23145          LA    15,256(0,15)
0000FEFC D2FF 1000 F000 00000000 00000000  23146          MVC   0(256,1),0(15)
0000FF02 4110 1100               00000100  23147          LA    1,256(0,1)
0000FF06 41F0 F100               00000100  23148          LA    15,256(0,15)
0000FF0A D2AF 1000 F000 00000000 00000000  23149          MVC   0(176,1),0(15)
                                           23150 * ***
                                           23151 * ***
                                           23152 * ***
                                                                                                                           Page  463 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           23153 * ***
                                           23154 * ***           mcluster->ops = rd_kafka_q_new0(rk,__FUNCTION__,2167);
0000FF10 E350 D0B0 0024          000000B0  23155          STG   5,176(0,13)
0000FF16 E3F0 C158 0004          0000FD48  23156          LG    15,@lit_1650_1063
0000FF1C 41F0 F3A6               000003A6  23157          LA    15,934(0,15)
0000FF20 E3F0 D0B8 0024          000000B8  23158          STG   15,184(0,13)
0000FF26 E548 D0C0 0877          000000C0  23159          MVGHI 192(13),2167
0000FF2C 4110 D0B0               000000B0  23160          LA    1,176(0,13)
0000FF30 E3F0 C150 0004          0000FD40  23161          LG    15,@lit_1650_1064 ; rd_kafka_q_new0
0000FF36                                   23162 @@gen_label1508 DS    0H
0000FF36 05EF                              23163          BALR  14,15
0000FF38                                   23164 @@gen_label1509 DS    0H
0000FF38 E3F0 70B8 0024          000000B8  23165          STG   15,184(0,7)
                                           23166 * ***           mcluster->ops->rkq_serve = rd_kafka_mock_cluster_op_se\
                                           23167 * rve;
0000FF3E E310 C170 0004          0000FD60  23168          LG    1,@lit_1650_1065 ; rd_kafka_mock_cluster_op_serve
0000FF44 E310 F098 0024          00000098  23169          STG   1,152(0,15) ; offset of rkq_serve in rd_kafka_q_s
                                           23170 * ***           mcluster->ops->rkq_opaque = mcluster;
0000FF4A E3F0 70B8 0004          000000B8  23171          LG    15,184(0,7) ; offset of ops in rd_kafka_mock_cluster_s
0000FF50 E370 F0A0 0024          000000A0  23172          STG   7,160(0,15) ; offset of rkq_opaque in rd_kafka_q_s
                                           23173 * ***
                                           23174 * ***           rd_kafka_timers_init(&mcluster->timers, rk, mcluster->\
                                           23175 * ops);
0000FF56 41F0 74E0               000004E0  23176          LA    15,1248(0,7)
0000FF5A E3F0 D0B0 0024          000000B0  23177          STG   15,176(0,13)
0000FF60 E350 D0B8 0024          000000B8  23178          STG   5,184(0,13)
0000FF66 E3F0 70B8 0004          000000B8  23179          LG    15,184(0,7)
0000FF6C E3F0 D0C0 0024          000000C0  23180          STG   15,192(0,13)
0000FF72 4110 D0B0               000000B0  23181          LA    1,176(0,13)
0000FF76 E3F0 C168 0004          0000FD58  23182          LG    15,@lit_1650_1066 ; rd_kafka_timers_init
0000FF7C                                   23183 @@gen_label1510 DS    0H
0000FF7C 05EF                              23184          BALR  14,15
0000FF7E                                   23185 @@gen_label1511 DS    0H
                                           23186 * ***
                                           23187 * ***           if ((r = rd_pipe_nonblocking(mcluster->wakeup_fds)) ==\
                                           23188 *  -1) {
0000FF7E 41F0 70C0               000000C0  23189          LA    15,192(0,7)
0000FF82 E3F0 D0B0 0024          000000B0  23190          STG   15,176(0,13)
0000FF88 4110 D0B0               000000B0  23191          LA    1,176(0,13)
0000FF8C E3F0 C178 0004          0000FD68  23192          LG    15,@lit_1650_1067 ; rd_pipe_nonblocking
0000FF92                                   23193 @@gen_label1512 DS    0H
0000FF92 05EF                              23194          BALR  14,15
0000FF94                                   23195 @@gen_label1513 DS    0H
0000FF94 A7FE FFFF               0000FFFF  23196          CHI   15,-1
0000FF98 4770 C414               00010004  23197          BNE   @L1476
                                           23198 * ***                   rd_kafka_log0(&rk->rk_conf, rk, ((void *)0), 3\
                                           23199 * , 0x0, "MOCK", "Failed to setup mock cluster wake-up fds: %s", strer\
                                           23200 * ror(r));
0000FF9C B914 00FF                         23201          LGFR  15,15
0000FFA0 E3F0 D0B0 0024          000000B0  23202          STG   15,176(0,13)
0000FFA6 4110 D0B0               000000B0  23203          LA    1,176(0,13)
0000FFAA E3F0 C180 0004          0000FD70  23204          LG    15,@lit_1650_1068 ; strerror
                                                                                                                           Page  464 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0000FFB0                                   23205 @@gen_label1515 DS    0H
0000FFB0 05EF                              23206          BALR  14,15
0000FFB2                                   23207 @@gen_label1516 DS    0H
0000FFB2 4110 5210               00000210  23208          LA    1,528(0,5)
0000FFB6 E310 D0B0 0024          000000B0  23209          STG   1,176(0,13)
0000FFBC E350 D0B8 0024          000000B8  23210          STG   5,184(0,13)
0000FFC2 D707 D0C0 D0C0 000000C0 000000C0  23211          XC    192(8,13),192(13)
0000FFC8 E548 D0C8 0003          000000C8  23212          MVGHI 200(13),3
0000FFCE D707 D0D0 D0D0 000000D0 000000D0  23213          XC    208(8,13),208(13)
0000FFD4 E310 C118 0004          0000FD08  23214          LG    1,@lit_1650_1046
0000FFDA 4120 115E               0000015E  23215          LA    2,350(0,1)
0000FFDE E320 D0D8 0024          000000D8  23216          STG   2,216(0,13)
0000FFE4 4110 1A0C               00000A0C  23217          LA    1,2572(0,1)
0000FFE8 E310 D0E0 0024          000000E0  23218          STG   1,224(0,13)
0000FFEE E3F0 D0E8 0024          000000E8  23219          STG   15,232(0,13)
0000FFF4 4110 D0B0               000000B0  23220          LA    1,176(0,13)
0000FFF8 E3F0 C188 0004          0000FD78  23221          LG    15,@lit_1650_1070 ; rd_kafka_log0
0000FFFE                                   23222 @@gen_label1517 DS    0H
0000FFFE 05EF                              23223          BALR  14,15
00010000                                   23224 @@gen_label1518 DS    0H
                                           23225 * ***
                                           23226 * ***
                                           23227 * ***           } else {
00010000 47F0 C44C               0001003C  23228          B     @L1477
00010004                                   23229 @L1476   DS    0H
                                           23230 * ***                   const char onebyte = 1;
00010004 9201 D0A8      000000A8 00000001  23231          MVI   168(13),1   ; onebyte
                                           23232 * ***                   rd_kafka_q_io_event_enable(mcluster->ops,
                                           23233 * ***                                              mcluster->wakeup_fd\
                                           23234 * s[1],
                                           23235 * ***                                              &onebyte, sizeof(on\
                                           23236 * ebyte));
00010008 E3F0 70B8 0004          000000B8  23237          LG    15,184(0,7)
0001000E E3F0 D0B0 0024          000000B0  23238          STG   15,176(0,13)
00010014 E3F0 70C4 0014          000000C4  23239          LGF   15,196(0,7)
0001001A E3F0 D0B8 0024          000000B8  23240          STG   15,184(0,13)
00010020 41F0 D0A8               000000A8  23241          LA    15,168(0,13)
00010024 E3F0 D0C0 0024          000000C0  23242          STG   15,192(0,13)
0001002A E548 D0C8 0001          000000C8  23243          MVGHI 200(13),1
00010030 4110 D0B0               000000B0  23244          LA    1,176(0,13)
00010034 E3F0 C190 0004          0000FD80  23245          LG    15,@lit_1650_1071 ; rd_kafka_q_io_event_enable
0001003A                                   23246 @@gen_label1519 DS    0H
0001003A 05EF                              23247          BALR  14,15
0001003C                                   23248 @@gen_label1520 DS    0H
                                           23249 * ***           }
0001003C                                   23250 @L1477   DS    0H
                                           23251 * ***
                                           23252 * ***
                                           23253 * ***           if (thrd_create(&mcluster->thread,
                                           23254 * ***                           rd_kafka_mock_cluster_thread_main, mcl\
                                           23255 * uster) !=
0001003C 41F0 70B0               000000B0  23256          LA    15,176(0,7)
                                                                                                                           Page  465 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010040 E3F0 D0B0 0024          000000B0  23257          STG   15,176(0,13)
00010046 E3F0 C1A0 0004          0000FD90  23258          LG    15,@lit_1650_1072 ; rd_kafka_mock_cluster_thread_main
0001004C E3F0 D0B8 0024          000000B8  23259          STG   15,184(0,13)
00010052 E370 D0C0 0024          000000C0  23260          STG   7,192(0,13)
00010058 4110 D0B0               000000B0  23261          LA    1,176(0,13)
0001005C E3F0 C198 0004          0000FD88  23262          LG    15,@lit_1650_1073 ; thrd_create
00010062                                   23263 @@gen_label1521 DS    0H
00010062 05EF                              23264          BALR  14,15
00010064                                   23265 @@gen_label1522 DS    0H
                                           23266 * ***               0) {
00010064 12FF                              23267          LTR   15,15
00010066 4780 C504               000100F4  23268          BE    @L1478
                                           23269 * ***                   rd_kafka_log0(&rk->rk_conf, rk, ((void *)0), 2\
                                           23270 * , 0x0, "MOCK", "Failed to create mock cluster thread: %s", strerror(\
                                           23271 * (* __error())));
0001006A E3F0 C1A8 0004          0000FD98  23272          LG    15,@lit_1650_1074 ; __error
00010070                                   23273 @@gen_label1524 DS    0H
00010070 05EF                              23274          BALR  14,15
00010072                                   23275 @@gen_label1525 DS    0H
00010072 58F0 F000               00000000  23276          L     15,0(0,15)
00010076 B914 00FF                         23277          LGFR  15,15
0001007A E3F0 D0B0 0024          000000B0  23278          STG   15,176(0,13)
00010080 4110 D0B0               000000B0  23279          LA    1,176(0,13)
00010084 E3F0 C180 0004          0000FD70  23280          LG    15,@lit_1650_1068 ; strerror
0001008A                                   23281 @@gen_label1526 DS    0H
0001008A 05EF                              23282          BALR  14,15
0001008C                                   23283 @@gen_label1527 DS    0H
0001008C 4110 5210               00000210  23284          LA    1,528(0,5)
00010090 E310 D0B0 0024          000000B0  23285          STG   1,176(0,13)
00010096 E350 D0B8 0024          000000B8  23286          STG   5,184(0,13)
0001009C D707 D0C0 D0C0 000000C0 000000C0  23287          XC    192(8,13),192(13)
000100A2 E548 D0C8 0002          000000C8  23288          MVGHI 200(13),2
000100A8 D707 D0D0 D0D0 000000D0 000000D0  23289          XC    208(8,13),208(13)
000100AE E310 C118 0004          0000FD08  23290          LG    1,@lit_1650_1046
000100B4 4120 115E               0000015E  23291          LA    2,350(0,1)
000100B8 E320 D0D8 0024          000000D8  23292          STG   2,216(0,13)
000100BE 4110 1A3A               00000A3A  23293          LA    1,2618(0,1)
000100C2 E310 D0E0 0024          000000E0  23294          STG   1,224(0,13)
000100C8 E3F0 D0E8 0024          000000E8  23295          STG   15,232(0,13)
000100CE 4110 D0B0               000000B0  23296          LA    1,176(0,13)
000100D2 E3F0 C188 0004          0000FD78  23297          LG    15,@lit_1650_1070 ; rd_kafka_log0
000100D8                                   23298 @@gen_label1528 DS    0H
000100D8 05EF                              23299          BALR  14,15
000100DA                                   23300 @@gen_label1529 DS    0H
                                           23301 * ***
                                           23302 * ***
                                           23303 * ***                   rd_kafka_mock_cluster_destroy(mcluster);
000100DA E370 D0B0 0024          000000B0  23304          STG   7,176(0,13)
000100E0 4110 D0B0               000000B0  23305          LA    1,176(0,13)
000100E4 E3F0 C130 0004          0000FD20  23306          LG    15,@lit_1650_1052 ; rd_kafka_mock_cluster_destroy
000100EA                                   23307 @@gen_label1530 DS    0H
000100EA 05EF                              23308          BALR  14,15
                                                                                                                           Page  466 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000100EC                                   23309 @@gen_label1531 DS    0H
                                           23310 * ***                   return ((void *)0);
000100EC B904 00F3                         23311          LGR   15,3
000100F0 47F0 C694               00010284  23312          B     @ret_lab_1650
                                           23313 * ***           }
000100F4                                   23314 @L1478   DS    0H
                                           23315 * ***
                                           23316 * ***
                                           23317 * ***
                                           23318 * ***           mcluster->bootstraps = rd_malloc(bootstraps_len + 1);
000100F4 B904 00F4                         23319          LGR   15,4
000100F8 A7FB 0001               00000001  23320          AGHI  15,1
000100FC E3F0 D0B0 0024          000000B0  23321          STG   15,176(0,13)
00010102 4110 D0B0               000000B0  23322          LA    1,176(0,13)
00010106 E3F0 C1B0 0004          0000FDA0  23323          LG    15,@lit_1650_1080 ; rd_malloc
0001010C                                   23324 @@gen_label1532 DS    0H
0001010C 05EF                              23325          BALR  14,15
0001010E                                   23326 @@gen_label1533 DS    0H
0001010E E3F0 70A8 0024          000000A8  23327          STG   15,168(0,7)
                                           23328 * ***           of = 0;
                                           23329 * ***           for ((mrkb) = ((&mcluster->brokers)->tqh_first); (mrkb\
                                           23330 * ) != (((void *)0)); (mrkb) = ((mrkb)->link .tqe_next)) {
00010114 E320 7030 0004          00000030  23331          LG    2,48(0,7)   ; offset of brokers in rd_kafka_mock_cluster*
                                                                _s
0001011A 47F0 C5F2               000101E2  23332          B     @L1480
0001011E                                   23333 @L1479   DS    0H
                                           23334 * ***                   r = snprintf(&mcluster->bootstraps[of], bootst\
                                           23335 * raps_len - of, "%s%s:%d", of > 0 ? "," : "", mrkb->advertised_listen\
                                           23336 * er, mrkb->port);
0001011E C23E 0000 0000                    23337          CLGFI 3,X'00000000'
00010124 47D0 C546               00010136  23338          BNH   @L1483
00010128 E3F0 C118 0004          0000FD08  23339          LG    15,@lit_1650_1046
0001012E 41F0 FA64               00000A64  23340          LA    15,2660(0,15)
00010132 47F0 C550               00010140  23341          B     @L1484
00010136                                   23342 @L1483   DS    0H
00010136 E3F0 C118 0004          0000FD08  23343          LG    15,@lit_1650_1046
0001013C 41F0 F4AE               000004AE  23344          LA    15,1198(0,15)
00010140                                   23345 @L1484   DS    0H
00010140 E310 70A8 0004          000000A8  23346          LG    1,168(0,7)  ; offset of bootstraps in rd_kafka_mock_clus*
                                                                ter_s
00010146 4113 1000               00000000  23347          LA    1,0(3,1)
0001014A E310 D0B0 0024          000000B0  23348          STG   1,176(0,13)
00010150 B904 0014                         23349          LGR   1,4
00010154 B90B 0013                         23350          SLGR  1,3
00010158 E310 D0B8 0024          000000B8  23351          STG   1,184(0,13)
0001015E E360 C118 0004          0000FD08  23352          LG    6,@lit_1650_1046
00010164 4110 6A66               00000A66  23353          LA    1,2662(0,6)
00010168 E310 D0C0 0024          000000C0  23354          STG   1,192(0,13)
0001016E E3F0 D0C8 0024          000000C8  23355          STG   15,200(0,13)
00010174 41F0 2014               00000014  23356          LA    15,20(0,2)
00010178 E3F0 D0D0 0024          000000D0  23357          STG   15,208(0,13)
0001017E E3F0 2094 0014          00000094  23358          LGF   15,148(0,2)
                                                                                                                           Page  467 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010184 E3F0 D0D8 0024          000000D8  23359          STG   15,216(0,13)
0001018A 4110 D0B0               000000B0  23360          LA    1,176(0,13)
0001018E E3F0 C120 0004          0000FD10  23361          LG    15,@lit_1650_1048 ; snprintf
00010194                                   23362 @@gen_label1535 DS    0H
00010194 05EF                              23363          BALR  14,15
00010196                                   23364 @@gen_label1536 DS    0H
                                           23365 * ***
                                           23366 * ***
                                           23367 * ***
                                           23368 * ***
                                           23369 * ***                   of += r;
00010196 B914 00FF                         23370          LGFR  15,15
0001019A B90A 003F                         23371          ALGR  3,15
                                           23372 * ***                   ((of < bootstraps_len) ? (void)0 : __assert(__\
                                           23373 * func__, "C:\\asgkafka\\librdkafka\\src\\rdkafka_mock.c", 2206, "of <\
                                           23374 *  bootstraps_len"));
0001019E B921 0034                         23375          CLGR  3,4
000101A2 4740 C5EC               000101DC  23376          BL    @L1486
000101A6                                   23377 @L1485   DS    0H
000101A6 E3F0 C158 0004          0000FD48  23378          LG    15,@lit_1650_1063
000101AC 41F0 F3A6               000003A6  23379          LA    15,934(0,15)
000101B0 E3F0 D0B0 0024          000000B0  23380          STG   15,176(0,13)
000101B6 41F0 60FA               000000FA  23381          LA    15,250(0,6)
000101BA E3F0 D0B8 0024          000000B8  23382          STG   15,184(0,13)
000101C0 E548 D0C0 089E          000000C0  23383          MVGHI 192(13),2206
000101C6 41F0 6A6E               00000A6E  23384          LA    15,2670(0,6)
000101CA E3F0 D0C8 0024          000000C8  23385          STG   15,200(0,13)
000101D0 4110 D0B0               000000B0  23386          LA    1,176(0,13)
000101D4 E3F0 C1B8 0004          0000FDA8  23387          LG    15,@lit_1650_1087 ; __assert
000101DA                                   23388 @@gen_label1538 DS    0H
000101DA 05EF                              23389          BALR  14,15
000101DC                                   23390 @@gen_label1539 DS    0H
000101DC                                   23391 @L1486   DS    0H
                                           23392 * ***           }
000101DC E320 2000 0004          00000000  23393          LG    2,0(0,2)    ; mrkb
000101E2                                   23394 @L1480   DS    0H
000101E2 B902 00F2                         23395          LTGR  15,2
000101E6 4770 C52E               0001011E  23396          BNE   @L1479
                                           23397 * ***           mcluster->bootstraps[of] = '\0';
000101EA E3F0 70A8 0004          000000A8  23398          LG    15,168(0,7) ; offset of bootstraps in rd_kafka_mock_clus*
                                                                ter_s
000101F0 41F3 F000               00000000  23399          LA    15,0(3,15)
000101F4 9200 F000      00000000 00000000  23400          MVI   0(15),0
                                           23401 * ***
                                           23402 * ***           do { if ((((rk)->rk_conf.debug & (0x10000)))) rd_kafka\
                                           23403 * _log0(&rk->rk_conf,rk,((void *)0), 7,(0x10000), "MOCK","Mock cluster\
                                           23404 *  %s bootstrap.servers=%s", mcluster->id, mcluster->bootstraps); } wh\
                                           23405 * ile (0);
000101F8                                   23406 @L1487   DS    0H
000101F8 9101 5321      00000321 00000001  23407          TM    801(5),1
000101FC 4780 C670               00010260  23408          BZ    @L1490
00010200 41F0 5210               00000210  23409          LA    15,528(0,5)
                                                                                                                           Page  468 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010204 E3F0 D0B0 0024          000000B0  23410          STG   15,176(0,13)
0001020A E350 D0B8 0024          000000B8  23411          STG   5,184(0,13)
00010210 D707 D0C0 D0C0 000000C0 000000C0  23412          XC    192(8,13),192(13)
00010216 E548 D0C8 0007          000000C8  23413          MVGHI 200(13),7
0001021C C0FF 0001 0000                    23414          LLILF 15,X'00010000' ; 65536
00010222 E3F0 D0D0 0024          000000D0  23415          STG   15,208(0,13)
00010228 E3F0 C118 0004          0000FD08  23416          LG    15,@lit_1650_1046
0001022E 4110 F15E               0000015E  23417          LA    1,350(0,15)
00010232 E310 D0D8 0024          000000D8  23418          STG   1,216(0,13)
00010238 41F0 FA82               00000A82  23419          LA    15,2690(0,15)
0001023C E3F0 D0E0 0024          000000E0  23420          STG   15,224(0,13)
00010242 E370 D0E8 0024          000000E8  23421          STG   7,232(0,13)
00010248 E3F0 70A8 0004          000000A8  23422          LG    15,168(0,7)
0001024E E3F0 D0F0 0024          000000F0  23423          STG   15,240(0,13)
00010254 4110 D0B0               000000B0  23424          LA    1,176(0,13)
00010258 E3F0 C188 0004          0000FD78  23425          LG    15,@lit_1650_1070 ; rd_kafka_log0
0001025E                                   23426 @@gen_label1542 DS    0H
0001025E 05EF                              23427          BALR  14,15
00010260                                   23428 @@gen_label1543 DS    0H
00010260                                   23429 @L1490   DS    0H
                                           23430 * ***
                                           23431 * ***
                                           23432 * ***           rd_atomic32_add(&rk->rk_mock.cluster_cnt, 1);
00010260 A7F9 11A0               000011A0  23433          LGHI  15,4512     ; 4512
00010264 41FF 5008               00000008  23434          LA    15,8(15,5)
00010268 E3F0 D0B0 0024          000000B0  23435          STG   15,176(0,13)
0001026E E548 D0B8 0001          000000B8  23436          MVGHI 184(13),1
00010274 4110 D0B0               000000B0  23437          LA    1,176(0,13)
00010278 E3F0 C1C0 0004          0000FDB0  23438          LG    15,@lit_1650_1092 ; rd_atomic32_add
0001027E                                   23439 @@gen_label1544 DS    0H
0001027E 05EF                              23440          BALR  14,15
00010280                                   23441 @@gen_label1545 DS    0H
                                           23442 * ***
                                           23443 * ***           return mcluster;
00010280 B904 00F7                         23444          LGR   15,7
                                           23445 * ***   }
00010284                                   23446 @ret_lab_1650 DS 0H
                                           23447 * * **** Start of Epilogue
                                           23448          DCCEPIL
00010284                                   23449+         ds 0h                                                          01-DCCEP
                                           23450+* Epilog
00010284 D707 D088 D088 00000088 00000088  23451+         xc  17*8(8,13),17*8(13)             clear next DSA             01-DCCEP
0001028A E3D0 D080 0004          00000080  23452+         lg  13,16*8(0,13)       get the prev DSA                       01-DCCEP
00010290 E3C0 D090 0004          00000090  23453+         lg  12,18*8(0,13)       get the DSAB ptr                       01-DCCEP
00010296 E3B0 C018 0004          00000018  23454+         lg  11,24(0,12)         fetch dvt                              01-DCCEP
0001029C E3C0 B010 0021          00000010  23455+         clg 12,16(0,11)         does the dsab change?                  01-DCCEP
000102A2 E3E0 D008 0004          00000008  23456+         lg  14,8(0,13)          load up return address                 01-DCCEP
000102A8 EB1C D020 0004          00000020  23457+         lmg 1,12,32(13)         load rest of regs                      01-DCCEP
000102AE 078E                              23458+         bcr 8,14                if same dsab, just return              01-DCCEP
000102B0 E3F0 D010 0024          00000010  23459+         stg 15,16(0,13)         save return code                       01-DCCEP
000102B6 E300 D018 0024          00000018  23460+         stg 0,24(0,13)          save more return code                  01-DCCEP
000102BC E3F0 D090 0004          00000090  23461+         lg  15,18*8(0,13)       load dsab address                      01-DCCEP
                                                                                                                           Page  469 
  Active Usings: @REGION_1650_1,R12  
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000102C2 E3F0 F018 0004          00000018  23462+         lg  15,24(0,15)         load dvt address                       01-DCCEP
000102C8 47F0 F040               00000040  23463+         bc  15,64(0,15)         branch to contraction                  01-DCCEP
                                           23464+* End of Epilog
                                           23465 * * **** End of Epilogue
                                           23466          DROP  12
                                           23467 *
                                           23468 *   DSECT for automatic variables in "rd_kafka_mock_cluster_new"
                                           23469 *      (FUNCTION #1650)
                                           23470 *
00000000                00000000 000000B0  23471 @AUTO#rd_kafka_mock_cluster_new DSECT
00000000                                   23472          DS    XL168
000000A8                                   23473 rd_kafka_mock_cluster_new#onebyte#9 DS 1CL1 ; onebyte
000000A9                000000A9 000000A8  23474          ORG   @AUTO#rd_kafka_mock_cluster_new+168
000000A8                                   23475 rd_kafka_mock_cluster_new#of#0 DS 8XL1 ; of
000000B0                000000B0 000000A8  23476          ORG   @AUTO#rd_kafka_mock_cluster_new+168
000000A8                                   23477 rd_kafka_mock_cluster_new#bootstraps_len#0 DS 8XL1 ; bootstraps_len
000000B0                000000B0 000000A8  23478          ORG   @AUTO#rd_kafka_mock_cluster_new+168
000000A8                                   23479 rd_kafka_mock_cluster_new#r#0 DS 1F ; r
000000AC                000000AC 000000A8  23480          ORG   @AUTO#rd_kafka_mock_cluster_new+168
000000A8                                   23481 rd_kafka_mock_cluster_new#i#0 DS 1F ; i
                                           23482 *
000102CC                00000000 00010480  23483 @CODE    CSECT
                                           23484 *
                                           23485 *
                                           23486 *
                                           23487 * ....... start of rd_kafka_mock_cluster_handle
                                           23488 rd_kafka_mock_cluster_handle ALIAS X'99846D92818692816D949683926D8393A4*
                                                                A2A385996D888195849385'
000102CC                                   23489 @LNAME1652 DS  0H
000102CC 0000001C                          23490          DC    X'0000001C'
000102D0 99846D9281869281                  23491          DC    C'rd_kafka_mock_cluster_handle'
000102EC 00                                23492          DC    X'00'
                                           23493 rd_kafka_mock_cluster_handle DCCPRLG CINDEX=1652,BASER=0,FRAME=168,SAVE*
                                                                AREA=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1652
                                           23494          macro
                                           23495          dccextrn &m
                                           23496          gblc    &$dccext(1000)
                                           23497          gbla    &$dccexti
                                           23498          lcla    &i
                                           23499 &$dccext(&$dccexti+1) setc    '&m'
                                           23500 &i       seta    1
                                           23501 .loop    aif    (&i gt &$dccexti).around
                                           23502          aif    ('&$dccext(&i)' eq '&m').getout
                                           23503 &i       seta    &i+1
                                           23504          ago     .loop
                                           23505 .around  anop
                                           23506 &$dccexti seta &$dccexti+1
                                           23507          extrn  &m
                                           23508 .getout  anop
                                           23509          mend
000102F0                                   23510+$eye0351    ds    0d                                                    02-DCCCA
000102F0 C4C3C3                            23511+         dc cl3'DCC'                                                    02-DCCCA
                                                                                                                           Page  470 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000102F3 01                                23512+         dc xl1'01' format one                                          02-DCCCA
000102F4 00000000                          23513+         dc a(0)                                                        02-DCCCA
000102F8 0000000000000000                  23514+         dc ad(0)                                                       02-DCCCA
00010300 00000000000000A8                  23515+         dc ad(168)                                                     02-DCCCA
00010308 0000000000000000                  23516+         dc ad(0)                                                       02-DCCCA
00010310 0000000000001000                  23517+         dc ad(4096)                                                    02-DCCCA
00010318 20                                23518+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00010319 03                                23519+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
0001031A 03                                23520+         dc al1(3)                                                      02-DCCCA
0001031B 08                                23521+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
0001031C 00                                23522+         dc bl.8'00000000'                                              02-DCCCA
0001031D 000000                            23523+         dc al3(0)                                                      02-DCCCA
00010320 00000000000102CC                  23524+         dc ad(@LNAME1652)                                              02-DCCCA
00010328                                   23525+         ds 0d                                                          02-DCCCA
00010328 00000000000102F0                  23526+         dc ad($eye0351)                                                02-DCCCA
00010330 0000000000000000                  23527+         dc ad(0)                                                       02-DCCCA
00010338                                   23528+         ds    0d                                                       01-DCCPR
                                           23529+         entry rd_kafka_mock_cluster_handle                             01-DCCPR
00010338                                   23530+rd_kafka_mock_cluster_handle ds 0d                                      01-DCCPR
00010338                                   23531+@REGION_1652_1 ds 0h                                                    01-DCCPR
00010338 EBEC D008 0024          00000008  23532+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                           23533 * ******* End of Prologue
                                           23534 * *
                                           23535 * ***           return (rd_kafka_t *)mcluster->rk;
0001033E E3F0 1000 0004          00000000  23536          LG    15,0(0,1)   ; mcluster
00010344 E3F0 F020 0004          00000020  23537          LG    15,32(0,15) ; offset of rk in rd_kafka_mock_cluster_s
                                           23538 * ***   }
                                           23539 * * **** Start of Epilogue
                                           23540          DCCEPIL
0001034A                                   23541+         ds 0h                                                          01-DCCEP
                                           23542+* Epilog
                                           23543+* Epilog
0001034A E3E0 D008 0004          00000008  23544+         lg    14,8(,13) restore the reg                                01-DCCEP
00010350 EB1C D020 0004          00000020  23545+         lmg   1,12,32(13)                                              01-DCCEP
00010356 07FE                              23546+         br   14                                                        01-DCCEP
                                           23547+* End of Epilog
                                           23548 * * **** End of Epilogue
                                           23549 *
                                           23550 *   DSECT for automatic variables in "rd_kafka_mock_cluster_handle"
                                           23551 *      (FUNCTION #1652)
                                           23552 *
00000000                00000000 000000A8  23553 @AUTO#rd_kafka_mock_cluster_handle DSECT
00000000                                   23554          DS    XL168
                                           23555 *
00010358                00000000 00010480  23556 @CODE    CSECT
                                           23557 *
                                           23558 *
                                           23559 *
                                           23560 * ....... start of rd_kafka_handle_mock_cluster
                                           23561 rd_kafka_handle_mock_cluster ALIAS X'99846D92818692816D8881958493856D94*
                                                                9683926D8393A4A2A38599'
00010358                                   23562 @LNAME1653 DS  0H
                                                                                                                           Page  471 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010358 0000001C                          23563          DC    X'0000001C'
0001035C 99846D9281869281                  23564          DC    C'rd_kafka_handle_mock_cluster'
00010378 00                                23565          DC    X'00'
                                           23566 rd_kafka_handle_mock_cluster DCCPRLG CINDEX=1653,BASER=0,FRAME=168,SAVE*
                                                                AREA=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1653
                                           23567          macro
                                           23568          dccextrn &m
                                           23569          gblc    &$dccext(1000)
                                           23570          gbla    &$dccexti
                                           23571          lcla    &i
                                           23572 &$dccext(&$dccexti+1) setc    '&m'
                                           23573 &i       seta    1
                                           23574 .loop    aif    (&i gt &$dccexti).around
                                           23575          aif    ('&$dccext(&i)' eq '&m').getout
                                           23576 &i       seta    &i+1
                                           23577          ago     .loop
                                           23578 .around  anop
                                           23579 &$dccexti seta &$dccexti+1
                                           23580          extrn  &m
                                           23581 .getout  anop
                                           23582          mend
00010380                                   23583+$eye0354    ds    0d                                                    02-DCCCA
00010380 C4C3C3                            23584+         dc cl3'DCC'                                                    02-DCCCA
00010383 01                                23585+         dc xl1'01' format one                                          02-DCCCA
00010384 00000000                          23586+         dc a(0)                                                        02-DCCCA
00010388 0000000000000000                  23587+         dc ad(0)                                                       02-DCCCA
00010390 00000000000000A8                  23588+         dc ad(168)                                                     02-DCCCA
00010398 0000000000000000                  23589+         dc ad(0)                                                       02-DCCCA
000103A0 0000000000001000                  23590+         dc ad(4096)                                                    02-DCCCA
000103A8 20                                23591+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
000103A9 03                                23592+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
000103AA 03                                23593+         dc al1(3)                                                      02-DCCCA
000103AB 08                                23594+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
000103AC 00                                23595+         dc bl.8'00000000'                                              02-DCCCA
000103AD 000000                            23596+         dc al3(0)                                                      02-DCCCA
000103B0 0000000000010358                  23597+         dc ad(@LNAME1653)                                              02-DCCCA
000103B8                                   23598+         ds 0d                                                          02-DCCCA
000103B8 0000000000010380                  23599+         dc ad($eye0354)                                                02-DCCCA
000103C0 0000000000000000                  23600+         dc ad(0)                                                       02-DCCCA
000103C8                                   23601+         ds    0d                                                       01-DCCPR
                                           23602+         entry rd_kafka_handle_mock_cluster                             01-DCCPR
000103C8                                   23603+rd_kafka_handle_mock_cluster ds 0d                                      01-DCCPR
000103C8                                   23604+@REGION_1653_1 ds 0h                                                    01-DCCPR
000103C8 EBEC D008 0024          00000008  23605+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                           23606 * ******* End of Prologue
                                           23607 * *
                                           23608 * ***           return (rd_kafka_mock_cluster_t *)rk->rk_mock.cluster;
000103CE E3F0 1000 0004          00000000  23609          LG    15,0(0,1)   ; rk
000103D4 A719 11A0               000011A0  23610          LGHI  1,4512      ; 4512
000103D8 E3F1 F000 0004          00000000  23611          LG    15,0(1,15)  ; offset of rk_mock in rd_kafka_s
                                           23612 * ***   }
                                           23613 * * **** Start of Epilogue
                                                                                                                           Page  472 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           23614          DCCEPIL
000103DE                                   23615+         ds 0h                                                          01-DCCEP
                                           23616+* Epilog
                                           23617+* Epilog
000103DE E3E0 D008 0004          00000008  23618+         lg    14,8(,13) restore the reg                                01-DCCEP
000103E4 EB1C D020 0004          00000020  23619+         lmg   1,12,32(13)                                              01-DCCEP
000103EA 07FE                              23620+         br   14                                                        01-DCCEP
                                           23621+* End of Epilog
                                           23622 * * **** End of Epilogue
                                           23623 *
                                           23624 *   DSECT for automatic variables in "rd_kafka_handle_mock_cluster"
                                           23625 *      (FUNCTION #1653)
                                           23626 *
00000000                00000000 000000A8  23627 @AUTO#rd_kafka_handle_mock_cluster DSECT
00000000                                   23628          DS    XL168
                                           23629 *
000103EC                00000000 00010480  23630 @CODE    CSECT
                                           23631 *
                                           23632 *
                                           23633 *
                                           23634 * ....... start of rd_kafka_mock_cluster_bootstraps
                                           23635 rd_kafka_mock_cluster_bootstraps ALIAS X'99846D92818692816D949683926D83*
                                                                93A4A2A385996D829696A3A2A3998197A2'
000103EC                                   23636 @LNAME1654 DS  0H
000103EC 00000020                          23637          DC    X'00000020'
000103F0 99846D9281869281                  23638          DC    C'rd_kafka_mock_cluster_bootstraps'
00010410 00                                23639          DC    X'00'
                                           23640 rd_kafka_mock_cluster_bootstraps DCCPRLG CINDEX=1654,BASER=0,FRAME=168,*
                                                                SAVEAREA=NO,ENTRY=YES,ARCH=ZARCH,LNAMEADDR=@LNAME1654
                                           23641          macro
                                           23642          dccextrn &m
                                           23643          gblc    &$dccext(1000)
                                           23644          gbla    &$dccexti
                                           23645          lcla    &i
                                           23646 &$dccext(&$dccexti+1) setc    '&m'
                                           23647 &i       seta    1
                                           23648 .loop    aif    (&i gt &$dccexti).around
                                           23649          aif    ('&$dccext(&i)' eq '&m').getout
                                           23650 &i       seta    &i+1
                                           23651          ago     .loop
                                           23652 .around  anop
                                           23653 &$dccexti seta &$dccexti+1
                                           23654          extrn  &m
                                           23655 .getout  anop
                                           23656          mend
00010418                                   23657+$eye0357    ds    0d                                                    02-DCCCA
00010418 C4C3C3                            23658+         dc cl3'DCC'                                                    02-DCCCA
0001041B 01                                23659+         dc xl1'01' format one                                          02-DCCCA
0001041C 00000000                          23660+         dc a(0)                                                        02-DCCCA
00010420 0000000000000000                  23661+         dc ad(0)                                                       02-DCCCA
00010428 00000000000000A8                  23662+         dc ad(168)                                                     02-DCCCA
00010430 0000000000000000                  23663+         dc ad(0)                                                       02-DCCCA
                                                                                                                           Page  473 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010438 0000000000001000                  23664+         dc ad(4096)                                                    02-DCCCA
00010440 20                                23665+         dc bl.4'0010',bl.2'00',bl.2'00'                                02-DCCCA
00010441 03                                23666+         dc bl.3'000',bl.1'0',bl.4'0011'                                02-DCCCA
00010442 03                                23667+         dc al1(3)                                                      02-DCCCA
00010443 08                                23668+         dc al.4(0000),bl.4'1000'                                       02-DCCCA
00010444 00                                23669+         dc bl.8'00000000'                                              02-DCCCA
00010445 000000                            23670+         dc al3(0)                                                      02-DCCCA
00010448 00000000000103EC                  23671+         dc ad(@LNAME1654)                                              02-DCCCA
00010450                                   23672+         ds 0d                                                          02-DCCCA
00010450 0000000000010418                  23673+         dc ad($eye0357)                                                02-DCCCA
00010458 0000000000000000                  23674+         dc ad(0)                                                       02-DCCCA
00010460                                   23675+         ds    0d                                                       01-DCCPR
                                           23676+         entry rd_kafka_mock_cluster_bootstraps                         01-DCCPR
00010460                                   23677+rd_kafka_mock_cluster_bootstraps ds 0d                                  01-DCCPR
00010460                                   23678+@REGION_1654_1 ds 0h                                                    01-DCCPR
00010460 EBEC D008 0024          00000008  23679+         stmg  14,12,8(13)                         Save regs            01-DCCPR
                                           23680 * ******* End of Prologue
                                           23681 * *
                                           23682 * ***           return mcluster->bootstraps;
00010466 E3F0 1000 0004          00000000  23683          LG    15,0(0,1)   ; mcluster
0001046C E3F0 F0A8 0004          000000A8  23684          LG    15,168(0,15) ; offset of bootstraps in rd_kafka_mock_clu*
                                                                ster_s
                                           23685 * ***   }
                                           23686 * * **** Start of Epilogue
                                           23687          DCCEPIL
00010472                                   23688+         ds 0h                                                          01-DCCEP
                                           23689+* Epilog
                                           23690+* Epilog
00010472 E3E0 D008 0004          00000008  23691+         lg    14,8(,13) restore the reg                                01-DCCEP
00010478 EB1C D020 0004          00000020  23692+         lmg   1,12,32(13)                                              01-DCCEP
0001047E 07FE                              23693+         br   14                                                        01-DCCEP
                                           23694+* End of Epilog
                                           23695 * * **** End of Epilogue
                                           23696 *
                                           23697 *   DSECT for automatic variables in "rd_kafka_mock_cluster_bootstraps"
                                           23698 *      (FUNCTION #1654)
                                           23699 *
00000000                00000000 000000A8  23700 @AUTO#rd_kafka_mock_cluster_bootstraps DSECT
00000000                                   23701          DS    XL168
                                           23702 *
00010480                00000000 00010480  23703 @CODE    CSECT
                                           23704 @@STATIC ALIAS X'7C998492818692816D9496839250'
                                           23705 @@STATIC DXD   219D
                                           23706 *
                                           23707 *  Non-Re-Entrant Data Section
                                           23708 *
00010480                00010480 000013A2  23709 @DATA    CSECT
                                           23710 @DATA    RMODE ANY
                                           23711 @DATA    AMODE ANY
00010480 99846D8381939396                  23712 @@T48F   DC    X'99846D838193939683'               rd.calloc
00010489 00                                23713          DC    1X'00'
0001048A 99846D9481939396                  23714 @@T493   DC    X'99846D948193939683'               rd.malloc
                                                                                                                           Page  474 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010493 00                                23715          DC    1X'00'
00010494 99846D9985819393                  23716 @@T498   DC    X'99846D99858193939683'             rd.realloc
0001049E 0000                              23717          DC    2X'00'
000104A0 99846DA2A39984A4                  23718 @@T49E   DC    X'99846DA2A39984A497'               rd.strdup
000104A9 00                                23719          DC    1X'00'
000104AA 99846DA2A3999584                  23720 @@T4A3   DC    X'99846DA2A3999584A497'             rd.strndup
000104B4 0000                              23721          DC    2X'00'
000104B6 99846D9985868395                  23722 @@T4AB   DC    X'99846D9985868395A36DA2A482F0'     rd.refcnt.sub0
000104C4 00000000                          23723          DC    4X'00'
000104C8 00000000                          23724 @@T65A   DC    4X'00'
000104CC 0000001A00000000                  23725          DC    X'0000001A000000000000002200000000' ................
000104DC 00000024                          23726          DC    X'00000024'                         ....
000104E0 99846D9281869281                  23727 @@T67D   DC    X'99846D92818692816D94A287986D8485' rd.kafka.msgq.de
000104F0 98                                23728          DC    X'98'                               q
000104F1 00                                23729          DC    1X'00'
000104F2 99846D9281869281                  23730 @@T704   DC    X'99846D92818692816D986D8485A2A399' rd.kafka.q.destr
00010502 96A8F0                            23731          DC    X'96A8F0'                           oy0
00010505 00                                23732          DC    1X'00'
00010506 99846D9281869281                  23733 @@T785   DC    X'99846D92818692816D8595986D969583' rd.kafka.enq.onc
00010516 856D8485A2A39996                  23734          DC    X'856D8485A2A39996A8F0'             e.destroy0
00010520 0000                              23735          DC    2X'00'
00010522 99846D9281869281                  23736 @@T78D   DC    X'99846D92818692816D8595986D969583' rd.kafka.enq.onc
00010532 856D8485936DA296                  23737          DC    X'856D8485936DA296A4998385'         e.del.source
0001053E 0000                              23738          DC    2X'00'
00010540 99846D9281869281                  23739 @@T794   DC    X'99846D92818692816D8595986D969583' rd.kafka.enq.onc
00010550 856D8485936DA296                  23740          DC    X'856D8485936DA296A49983856D9985A3' e.del.source.ret
00010560 A49995                            23741          DC    X'A49995'                           urn
00010563 00                                23742          DC    1X'00'
00010564 99846D9281869281                  23743 @@T79C   DC    X'99846D92818692816D8595986D969583' rd.kafka.enq.onc
00010574 856DA39989878785                  23744          DC    X'856DA3998987878599'               e.trigger
0001057D 00                                23745          DC    1X'00'
0001057E 99846D9281869281                  23746 @@T7A0   DC    X'99846D92818692816D8595986D969583' rd.kafka.enq.onc
0001058E 856D8485A2A39996                  23747          DC    X'856D8485A2A39996A8'               e.destroy
00010597 00                                23748          DC    1X'00'
00010598 99846D9281869281                  23749 @@T7A5   DC    X'99846D92818692816D8595986D969583' rd.kafka.enq.onc
000105A8 856D8489A2818293                  23750          DC    X'856D8489A281829385'               e.disable
000105B1 00                                23751          DC    1X'00'
000105B2 99846DA394978182                  23752 @@T7C5   DC    X'99846DA394978182A4866D8193939683' rd.tmpabuf.alloc
000105C2 F0                                23753          DC    X'F0'                               0
000105C3 00                                23754          DC    1X'00'
000105C4 99846D9281869281                  23755 @@T7F9   DC    X'99846D92818692816D82A4866DA49784' rd.kafka.buf.upd
000105D4 81A385                            23756          DC    X'81A385'                           ate
000105D7 00                                23757          DC    1X'00'
000105D8 99846D9281869281                  23758 @@T81A   DC    X'99846D92818692816D82A4866D868995' rd.kafka.buf.fin
000105E8 819389A9856D8199                  23759          DC    X'819389A9856D81999981A88395A3'     alize.arraycnt
000105F6 0000                              23760          DC    2X'00'
000105F8 99846D9281869281                  23761 @@T857   DC    X'99846D92818692816D82A4866D839983' rd.kafka.buf.crc
00010608 6D899589A3                        23762          DC    X'6D899589A3'                       .init
0001060D 00                                23763          DC    1X'00'
0001060E 99846D9281869281                  23764 @@TA27   DC    X'99846D92818692816D83A499996D94A2' rd.kafka.curr.ms
0001061E 87A26DA2A482                      23765          DC    X'87A26DA2A482'                     gs.sub
00010624 0000                              23766          DC    2X'00'
                                                                                                                           Page  475 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010626 99846D9281869281                  23767 @@TA9B   DC    X'99846D92818692816D949683926D94A2' rd.kafka.mock.ms
00010636 87A285A36D8485A2                  23768          DC    X'87A285A36D8485A2A39996A8'         gset.destroy
00010642 0000                              23769          DC    2X'00'
00010644 99846D9281869281                  23770 @@TAA6   DC    X'99846D92818692816D949683926D94A2' rd.kafka.mock.ms
00010654 87A285A36D9585A6                  23771          DC    X'87A285A36D9585A6'                 gset.new
0001065C 0000                              23772          DC    2X'00'
0001065E 99846D9281869281                  23773 @@TAB8   DC    X'99846D92818692816D949683926D9781' rd.kafka.mock.pa
0001066E 99A389A38996956D                  23774          DC    X'99A389A38996956D9396876D81979785' rtition.log.appe
0001067E 9584                              23775          DC    X'9584'                             nd
00010680 0000                              23776          DC    2X'00'
00010682 99846D9281869281                  23777 @@TAFE   DC    X'99846D92818692816D949683926DA396' rd.kafka.mock.to
00010692 9789836D81A4A396                  23778          DC    X'9789836D81A4A3966D83998581A385'   pic.auto.create
000106A1 00                                23779          DC    1X'00'
000106A2 99846D9281869281                  23780 @@TB11   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
000106B2 A4A2A385996D8996                  23781          DC    X'A4A2A385996D89966DA285A36D85A585' uster.io.set.eve
000106C2 95A3A2                            23782          DC    X'95A3A2'                           nts
000106C5 00                                23783          DC    1X'00'
000106C6 99846D9281869281                  23784 @@TB18   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
000106D6 A4A2A385996D8996                  23785          DC    X'A4A2A385996D89966DA285A36D85A585' uster.io.set.eve
000106E6 95A3                              23786          DC    X'95A3'                             nt
000106E8 0000                              23787          DC    2X'00'
000106EA 99846D9281869281                  23788 @@TB1E   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
000106FA A4A2A385996D8996                  23789          DC    X'A4A2A385996D89966D83938581996D85' uster.io.clear.e
0001070A A58595A3A2                        23790          DC    X'A58595A3A2'                       vents
0001070F 00                                23791          DC    1X'00'
00010710 99846D9281869281                  23792 @@TB23   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
00010720 A4A2A385996D8996                  23793          DC    X'A4A2A385996D89966D848593'         uster.io.del
0001072C 0000                              23794          DC    2X'00'
0001072E 99846D9281869281                  23795 @@TB3C   DC    X'99846D92818692816D949683926D8396' rd.kafka.mock.co
0001073E 95958583A3899695                  23796          DC    X'95958583A38996956D998581846D9985' nnection.read.re
0001074E 98A485A2A3                        23797          DC    X'98A485A2A3'                       quest
00010753 00                                23798          DC    1X'00'
00010754 99846D9281869281                  23799 @@TBB9   DC    X'99846D92818692816D949683926D8299' rd.kafka.mock.br
00010764 969285996D9389A2                  23800          DC    X'969285996D9389A2A385956D8996'     oker.listen.io
00010772 0000                              23801          DC    2X'00'
00010774 99846D9281869281                  23802 @@TBCD   DC    X'99846D92818692816D949683926D8299' rd.kafka.mock.br
00010784 969285996D9585A6                  23803          DC    X'969285996D9585A6'                 oker.new
0001078C 0000                              23804          DC    2X'00'
0001078E 99846D9281869281                  23805 @@TBE5   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
0001079E A4A2A385996D8785                  23806          DC    X'A4A2A385996D8785A36D8396969984'   uster.get.coord
000107AD 00                                23807          DC    1X'00'
000107AE 99846D9281869281                  23808 @@TC4C   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
000107BE A4A2A385996D8394                  23809          DC    X'A4A2A385996D839484'               uster.cmd
000107C7 00                                23810          DC    1X'00'
000107C8 99846D9281869281                  23811 @@TC55   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
000107D8 A4A2A385996D9697                  23812          DC    X'A4A2A385996D96976DA28599A585'     uster.op.serve
000107E6 0000                              23813          DC    2X'00'
000107E8 99846D9281869281                  23814 @@TC5E   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
000107F8 A4A2A385996D8485                  23815          DC    X'A4A2A385996D8485A2A39996A8F0'     uster.destroy0
00010806 0000                              23816          DC    2X'00'
00010808 99846D9281869281                  23817 @@TC62   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
00010818 A4A2A385996D8485                  23818          DC    X'A4A2A385996D8485A2A39996A8'       uster.destroy
                                                                                                                           Page  476 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010825 00                                23819          DC    1X'00'
00010826 99846D9281869281                  23820 @@TC6C   DC    X'99846D92818692816D949683926D8393' rd.kafka.mock.cl
00010836 A4A2A385996D9585                  23821          DC    X'A4A2A385996D9585A6'               uster.new
0001083F 00                                23822          DC    1X'00'
00010840                                   23823 @strings@ DS   0H
00010840 C37AE081A2879281                  23824          DC    X'C37AE081A2879281869281E093898299' C..asgkafka.libr
00010850 849281869281E0A2                  23825          DC    X'849281869281E0A29983E099844B8800' dkafka.src.rd.h.
00010860 9700950099858683                  23826          DC    X'970095009985868395A340A2A48260A9' p.n.refcnt.sub.z
00010870 859996005A5C7F99                  23827          DC    X'859996005A5C7F9985868395A340A2A4' ero....refcnt.su
00010880 8260A98599967F00                  23828          DC    X'8260A98599967F00E495929596A69560' b.zero..Unknown.
00010890 6C88846F0000C37A                  23829          DC    X'6C88846F0000C37AE081A28792818692' .hd...C..asgkafk
000108A0 81E0938982998492                  23830          DC    X'81E093898299849281869281E0A29983' a.librdkafka.src
000108B0 E099849281869281                  23831          DC    X'E0998492818692816D98A485A4854B88' .rdkafka.queue.h
000108C0 000081A2A28599A3                  23832          DC    X'000081A2A28599A37A40999298606E99' ..assert..rkq..r
000108D0 92986D9985868395                  23833          DC    X'92986D9985868395A3406E40F000C37A' kq.refcnt...0.C.
000108E0 E081A28792818692                  23834          DC    X'E081A2879281869281E0938982998492' .asgkafka.librdk
000108F0 81869281E0A29983                  23835          DC    X'81869281E0A29983E099849281869281' afka.src.rdkafka
00010900 6D82A4864B880000                  23836          DC    X'6D82A4864B88000081A2A28599A37A40' .buf.h..assert..
00010910 5A4D999282A48660                  23837          DC    X'5A4D999282A486606E999282A4866D86' ..rkbuf..rkbuf.f
00010920 938187A2405040D9                  23838          DC    X'938187A2405040D9C46DD2C1C6D2C16D' lags...RD.KAFKA.
00010930 D6D76DC66DC3D9C3                  23839          DC    X'D6D76DC66DC3D9C35D00C37AE081A287' OP.F.CRC..C..asg
00010940 9281869281E09389                  23840          DC    X'9281869281E093898299849281869281' kafka.librdkafka
00010950 E0A29983E0998492                  23841          DC    X'E0A29983E0998492818692816D949683' .src.rdkafka.moc
00010960 924B830094978199                  23842          DC    X'924B830094978199A3606E8395A3406E' k.c.mpart..cnt..
00010970 40F000005A4D4D82                  23843          DC    X'40F000005A4D4D82A8A385A25D606E93' .0.....bytes...l
00010980 8595407E7E4060F1                  23844          DC    X'8595407E7E4060F15D0094A285A3405A' en.....1..mset..
00010990 7E404D4DA5968984                  23845          DC    X'7E404D4DA5968984405C5DF05D00D4D6' ....void...0..MO
000109A0 C3D20000C2999692                  23846          DC    X'C3D20000C29996928599406C847A40D3' CK..Broker..d..L
000109B0 9687408197978595                  23847          DC    X'968740819797859584406CA240AD6C84' og.append..s...d
000109C0 BD406CA9A4409485                  23848          DC    X'BD406CA9A4409485A2A2818785A26B40' ...zu.messages..
000109D0 6C844082A8A385A2                  23849          DC    X'6C844082A8A385A24081A340968686A2' .d.bytes.at.offs
000109E0 85A3406C93938440                  23850          DC    X'85A3406C939384404D939687409596A6' et..lld..log.now
000109F0 406C9393844B4B6C                  23851          DC    X'406C9393844B4B6C9393846B40969989' ..lld...lld..ori
00010A00 878995819340A2A3                  23852          DC    X'878995819340A2A38199A3406C939384' ginal.start..lld
00010A10 5D0081A2A28599A3                  23853          DC    X'5D0081A2A28599A37A40999282A48660' ..assert..rkbuf.
00010A20 6E999282A4866D99                  23854          DC    X'6E999282A4866D99928200007A400000' .rkbuf.rkb......
00010A30 8995839699998583                  23855          DC    X'8995839699998583A340829996928599' incorrect.broker
00010A40 4BA58599A2899695                  23856          DC    X'4BA58599A28996954B86819393828183' .version.fallbac
00010A50 926F0000D7D9D6E3                  23857          DC    X'926F0000D7D9D6E3D6E4C6D3D6E60000' k...PROTOUFLOW..
00010A60 D79996A396839693                  23858          DC    X'D79996A39683969340998581844082A4' Protocol.read.bu
00010A70 8686859940A49584                  23859          DC    X'8686859940A495848599869396A64086' ffer.underflow.f
00010A80 9699406CA240A56C                  23860          DC    X'9699406CA240A56C88844081A3406CA9' or..s.v.hd.at..z
00010A90 A4616CA9A4404D6C                  23861          DC    X'A4616CA9A4404D6CA27A6C895D7A4085' u..zu...s..i...e
00010AA0 A7978583A3858440                  23862          DC    X'A7978583A38584406CA9A44082A8A385' xpected..zu.byte
00010AB0 A2406E406CA9A440                  23863          DC    X'A2406E406CA9A4409985948189958995' s....zu.remainin
00010AC0 874082A8A385A240                  23864          DC    X'874082A8A385A2404D6CA25D6CA20000' g.bytes...s..s..
00010AD0 E396978983406CA2                  23865          DC    X'E396978983406CA240AD6C84BD408396' Topic..s...d..co
00010AE0 949489A3A3899587                  23866          DC    X'949489A3A389958740968686A285A340' mmitting.offset.
00010AF0 6C93938440869699                  23867          DC    X'6C9393844086969940879996A497406C' .lld.for.group..
00010B00 4B5CA200C3998581                  23868          DC    X'4B5CA200C3998581A3858440A3969789' ..s.Created.topi
00010B10 83407F6CA27F40A6                  23869          DC    X'83407F6CA27F40A689A388406C844097' c...s..with..d.p
00010B20 8199A389A3899695                  23870          DC    X'8199A389A38996954DA25D4081958440' artition.s..and.
                                                                                                                           Page  477 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010B30 99859793898381A3                  23871          DC    X'99859793898381A389969560868183A3' replication.fact
00010B40 9699406C84005A99                  23872          DC    X'9699406C84005A99846D92818692816D' or..d..rd.kafka.
00010B50 949683926DA39697                  23873          DC    X'949683926DA3969789836D868995844D' mock.topic.find.
00010B60 948393A4A2A38599                  23874          DC    X'948393A4A2A385996B40A3969789835D' mcluster..topic.
00010B70 0000949683926D83                  23875          DC    X'0000949683926D8393A4A2A385996D89' ..mock.cluster.i
00010B80 966DA285A36D85A5                  23876          DC    X'966DA285A36D85A58595A3A27A408684' o.set.events..fd
00010B90 409596A3408696A4                  23877          DC    X'409596A3408696A4958400005A5C7F94' .not.found.....m
00010BA0 9683926D8393A4A2                  23878          DC    X'9683926D8393A4A2A385996D89966DA2' ock.cluster.io.s
00010BB0 85A36D85A58595A3                  23879          DC    X'85A36D85A58595A3A27A408684409596' et.events..fd.no
00010BC0 A3408696A495847F                  23880          DC    X'A3408696A495847F0000949683926D83' t.found...mock.c
00010BD0 93A4A2A385996D89                  23881          DC    X'93A4A2A385996D89966DA285A36D85A5' luster.io.set.ev
00010BE0 8595A37A40868440                  23882          DC    X'8595A37A408684409596A3408696A495' ent..fd.not.foun
00010BF0 84005A5C7F949683                  23883          DC    X'84005A5C7F949683926D8393A4A2A385' d....mock.cluste
00010C00 996D89966DA285A3                  23884          DC    X'996D89966DA285A36D85A58595A37A40' r.io.set.event..
00010C10 8684409596A34086                  23885          DC    X'8684409596A3408696A495847F009496' fd.not.found..mo
00010C20 83926D8393A4A2A3                  23886          DC    X'83926D8393A4A2A385996D89966D8485' ck.cluster.io.de
00010C30 937A408684409596                  23887          DC    X'937A408684409596A3408696A4958400' l..fd.not.found.
00010C40 5A5C7F949683926D                  23888          DC    X'5A5C7F949683926D8393A4A2A385996D' ...mock.cluster.
00010C50 89966D8485937A40                  23889          DC    X'89966D8485937A408684409596A34086' io.del..fd.not.f
00010C60 96A495847F00C299                  23890          DC    X'96A495847F00C29996928599406C847A' ound..Broker..d.
00010C70 40C39695958583A3                  23891          DC    X'40C39695958583A38996954086999694' .Connection.from
00010C80 406CA240839396A2                  23892          DC    X'406CA240839396A285847A406CA20000' ..s.closed...s..
00010C90 C29996928599406C                  23893          DC    X'C29996928599406C847A40E285958489' Broker..d..Sendi
00010CA0 9587406CA2D985A2                  23894          DC    X'9587406CA2D985A2979695A285E56C88' ng..sResponseV.h
00010CB0 8440A396406CA200                  23895          DC    X'8440A396406CA200C29996928599406C' d.to..s.Broker..
00010CC0 847A40C396959585                  23896          DC    X'847A40C39695958583A3899695406CA2' d..Connection..s
00010CD0 7A409985838589A5                  23897          DC    X'7A409985838589A58540868189938584' ..receive.failed
00010CE0 7A406CA200004D86                  23898          DC    X'7A406CA200004D869385A75D00000000' ...s...flex.....
00010CF0 D7D9D6E3D6C5D9D9                  23899          DC    X'D7D9D6E3D6C5D9D90000D79996A39683' PROTOERR..Protoc
00010D00 969340978199A285                  23900          DC    X'969340978199A2854086818993A49985' ol.parse.failure
00010D10 40869699406CA240                  23901          DC    X'40869699406CA240A56C88846CA24081' .for..s.v.hd.s.a
00010D20 A3406CA9A4616CA9                  23902          DC    X'A3406CA9A4616CA9A4404D6CA27A6C89' t..zu..zu...s..i
00010D30 5D404D8995839699                  23903          DC    X'5D404D8995839699998583A340829996' ...incorrect.bro
00010D40 9285994BA58599A2                  23904          DC    X'9285994BA58599A28996954B86819393' ker.version.fall
00010D50 828183926F5D0000                  23905          DC    X'828183926F5D0000C995A58193898440' back....Invalid.
00010D60 C19789D285A8406C                  23906          DC    X'C19789D285A8406C8884408699969440' ApiKey..hd.from.
00010D70 6CA20000C995A581                  23907          DC    X'6CA20000C995A58193898440998598A4' .s..Invalid.requ
00010D80 85A2A340A289A985                  23908          DC    X'85A2A340A289A985406C844086999694' est.size..d.from
00010D90 406CA2007A40A4A5                  23909          DC    X'406CA2007A40A4A581998995A3409781' ..s...uvarint.pa
00010DA0 99A2899587408681                  23910          DC    X'99A2899587408681899385840000C299' rsing.failed..Br
00010DB0 96928599406C847A                  23911          DC    X'96928599406C847A40A495A2A4979796' oker..d..unsuppo
00010DC0 99A38584406CA2D9                  23912          DC    X'99A38584406CA2D98598A485A2A3E56C' rted..sRequestV.
00010DD0 8884408699969440                  23913          DC    X'88844086999694406CA20000C2999692' hd.from..s..Brok
00010DE0 8599406C847A40A4                  23914          DC    X'8599406C847A40A495A2A497979699A3' er..d..unsupport
00010DF0 8584406CA2D98598                  23915          DC    X'8584406CA2D98598A485A2A340A58599' ed..sRequest.ver
00010E00 A2899695406C8884                  23916          DC    X'A2899695406C88844086999694406CA2' sion..hd.from..s
00010E10 0000C29996928599                  23917          DC    X'0000C29996928599406C847A40D98583' ..Broker..d..Rec
00010E20 8589A58584406CA2                  23918          DC    X'8589A58584406CA2D98598A485A2A3E5' eived..sRequestV
00010E30 6C88844086999694                  23919          DC    X'6C88844086999694406CA200D9858184' .hd.from..s.Read
00010E40 4085999996990000                  23920          DC    X'4085999996990000D78199A285408599' .error..Parse.er
00010E50 99969900C489A283                  23921          DC    X'99969900C489A2839695958583A38584' ror.Disconnected
00010E60 0000E69989A38540                  23922          DC    X'0000E69989A38540859999969900C681' ..Write.error.Fa
                                                                                                                           Page  478 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00010E70 8993858440A39640                  23923          DC    X'8993858440A3964083998581A38540A3' iled.to.create.t
00010E80 998195A2979699A3                  23924          DC    X'998195A2979699A340869699409585A6' ransport.for.new
00010E90 4094968392408396                  23925          DC    X'409496839240839695958583A3899695' .mock.connection
00010EA0 7A406CA20000C299                  23926          DC    X'7A406CA20000C29996928599406C847A' ...s..Broker..d.
00010EB0 40D585A640839695                  23927          DC    X'40D585A640839695958583A389969540' .New.connection.
00010EC0 86999694406CA200                  23928          DC    X'86999694406CA200D4968392408393A4' from..s.Mock.clu
00010ED0 A2A3859940868189                  23929          DC    X'A2A385994086818993858440A3964097' ster.failed.to.p
00010EE0 969393406C844086                  23930          DC    X'969393406C84408684A27A406C847A40' oll..d.fds...d..
00010EF0 6CA2000094968392                  23931          DC    X'6CA200009496839200009984927A9496' .s..mock..rdk.mo
00010F00 83920000D4968392                  23932          DC    X'83920000D49683924082999692859940' ck..Mock.broker.
00010F10 9389A2A3859540A2                  23933          DC    X'9389A2A3859540A296839285A3408599' listen.socket.er
00010F20 999699005A5C7FD4                  23934          DC    X'999699005A5C7FD49683924082999692' ror....Mock.brok
00010F30 8599409389A2A385                  23935          DC    X'8599409389A2A3859540A296839285A3' er.listen.socket
00010F40 4085999996997F00                  23936          DC    X'4085999996997F00C6818993858440A3' .error..Failed.t
00010F50 96408183838597A3                  23937          DC    X'96408183838597A34094968392408299' o.accept.mock.br
00010F60 9692859940A29683                  23938          DC    X'9692859940A296839285A37A406CA200' oker.socket...s.
00010F70 C485A2A39996A889                  23939          DC    X'C485A2A39996A8899587408299969285' Destroying.broke
00010F80 9900E49581829385                  23940          DC    X'9900E4958182938540A3964083998581' r.Unable.to.crea
00010F90 A385409496839240                  23941          DC    X'A3854094968392408299969285994093' te.mock.broker.l
00010FA0 89A2A3859540A296                  23942          DC    X'89A2A3859540A296839285A37A406CA2' isten.socket...s
00010FB0 0000C68189938584                  23943          DC    X'0000C6818993858440A3964082899584' ..Failed.to.bind
00010FC0 4094968392408299                  23944          DC    X'40949683924082999692859940A29683' .mock.broker.soc
00010FD0 9285A340A396406C                  23945          DC    X'9285A340A396406CA27A406CA200C681' ket.to..s...s.Fa
00010FE0 8993858440A39640                  23946          DC    X'8993858440A396408785A34094968392' iled.to.get.mock
00010FF0 4082999692859940                  23947          DC    X'4082999692859940A296839285A34095' .broker.socket.n
00011000 8194857A406CA200                  23948          DC    X'8194857A406CA200A289954BA289956D' ame...s.sin.sin.
00011010 8681948993A8407E                  23949          DC    X'8681948993A8407E7E40F200C6818993' family....2.Fail
00011020 858440A396409389                  23950          DC    X'858440A396409389A2A3859540969540' ed.to.listen.on.
00011030 9496839240829996                  23951          DC    X'949683924082999692859940A2968392' mock.broker.sock
00011040 85A37A406CA20000                  23952          DC    X'85A37A406CA200006CA20000A3998195' et...s...s..tran
00011050 A28183A389969500                  23953          DC    X'A28183A389969500879996A49700615C' saction.group...
00011060 40D5D6E3D9C5C1C3                  23954          DC    X'40D5D6E3D9C5C1C3C8C5C4405C6140A5' .NOTREACHED....v
00011070 89969381A3858400                  23955          DC    X'89969381A38584005A5C7F615C40D5D6' iolated.......NO
00011080 E3D9C5C1C3C8C5C4                  23956          DC    X'E3D9C5C1C3C8C5C4405C6140A5899693' TREACHED....viol
00011090 81A385847F00E285                  23957          DC    X'81A385847F00E285A3406CA240AD6C84' ated..Set..s...d
000110A0 BD40938581848599                  23958          DC    X'BD4093858184859940A396406C840000' ..leader.to..d..
000110B0 E285A3406CA240AD                  23959          DC    X'E285A3406CA240AD6C84BD4097998586' Set..s...d..pref
000110C0 8599998584408696                  23960          DC    X'8599998584408696939396A6859940A3' erred.follower.t
000110D0 96406C840000E285                  23961          DC    X'96406C840000E285A3406CA240AD6C84' o..d..Set..s...d
000110E0 BD408696939396A6                  23962          DC    X'BD408696939396A6859940A681A38599' ..follower.water
000110F0 9481999240968686                  23963          DC    X'9481999240968686A285A3A240A39640' mark.offsets.to.
00011100 6C9393844B4B6C93                  23964          DC    X'6C9393844B4B6C9393840000C2999692' .lld...lld..Brok
00011110 8599408496A69500                  23965          DC    X'8599408496A69500A495929596A69540' er.down.unknown.
00011120 9496839240839484                  23966          DC    X'949683924083948400005A5C7FA49592' mock.cmd.....unk
00011130 9596A69540949683                  23967          DC    X'9596A6954094968392408394847F0000' nown.mock.cmd...
00011140 5CA4958881958493                  23968          DC    X'5CA49588819584938584409697005A7F' .unhandled.op...
00011150 5CA4958881958493                  23969          DC    X'5CA495888195849385844096977F0000' .unhandled.op...
00011160 86818993858440A3                  23970          DC    X'86818993858440A39640919689954094' failed.to.join.m
00011170 9683924084A49494                  23971          DC    X'9683924084A49494A840829996928599' ock.dummy.broker
00011180 40A3889985818400                  23972          DC    X'40A38899858184005A5C7F8681899385' .thread....faile
00011190 8440A39640919689                  23973          DC    X'8440A396409196899540949683924084' d.to.join.mock.d
000111A0 A49494A840829996                  23974          DC    X'A49494A84082999692859940A3889985' ummy.broker.thre
                                                                                                                           Page  479 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000111B0 81847F00C485A2A3                  23975          DC    X'81847F00C485A2A39996A88995874083' ad..Destroying.c
000111C0 93A4A2A385990000                  23976          DC    X'93A4A2A38599000099846D81A3969489' luster..rd.atomi
000111D0 83F3F26D8785A34D                  23977          DC    X'83F3F26D8785A34D50948393A4A2A385' c32.get..mcluste
000111E0 99606E9992606E99                  23978          DC    X'99606E9992606E99926D949683924B83' r..rk..rk.mock.c
000111F0 93A4A2A385996D83                  23979          DC    X'93A4A2A385996D8395A35D406E40F000' luster.cnt....0.
00011200 86818993858440A3                  23980          DC    X'86818993858440A39640919689954094' failed.to.join.m
00011210 96839240A3889985                  23981          DC    X'96839240A3889985818400005A5C7F86' ock.thread.....f
00011220 818993858440A396                  23982          DC    X'818993858440A3964091968995409496' ailed.to.join.mo
00011230 839240A388998581                  23983          DC    X'839240A388998581847F000094968392' ck.thread...mock
00011240 C393A4A2A385996C                  23984          DC    X'C393A4A2A385996C93A70000C6818993' Cluster.lx..Fail
00011250 858440A39640A285                  23985          DC    X'858440A39640A285A3A4974094968392' ed.to.setup.mock
00011260 408393A4A2A38599                  23986          DC    X'408393A4A2A3859940A681928560A497' .cluster.wake.up
00011270 408684A27A406CA2                  23987          DC    X'408684A27A406CA20000C68189938584' .fds...s..Failed
00011280 40A3964083998581                  23988          DC    X'40A3964083998581A385409496839240' .to.create.mock.
00011290 8393A4A2A3859940                  23989          DC    X'8393A4A2A3859940A388998581847A40' cluster.thread..
000112A0 6CA200006B006CA2                  23990          DC    X'6CA200006B006CA26CA27A6C84009686' .s.....s.s..d.of
000112B0 404C40829696A3A2                  23991          DC    X'404C40829696A3A2A3998197A26D9385' ...bootstraps.le
000112C0 9500D49683924083                  23992          DC    X'9500D4968392408393A4A2A38599406C' n.Mock.cluster..
000112D0 A240829696A3A2A3                  23993          DC    X'A240829696A3A2A39981974BA28599A5' s.bootstrap.serv
000112E0 8599A27E6CA20000                  23994          DC    X'8599A27E6CA20000D7999684A4838500' ers..s..Produce.
000112F0 C685A3838800D686                  23995          DC    X'C685A3838800D68686A285A30000D485' Fetch.Offset..Me
00011300 A3818481A3810000                  23996          DC    X'A3818481A3810000D38581848599C195' tadata..LeaderAn
00011310 84C9A2990000E2A3                  23997          DC    X'84C9A2990000E2A39697D98597938983' dIsr..StopReplic
00011320 8100E4978481A385                  23998          DC    X'8100E4978481A385D485A3818481A381' a.UpdateMetadata
00011330 0000C39695A39996                  23999          DC    X'0000C39695A3999693938584E288A4A3' ..ControlledShut
00011340 8496A6950000D686                  24000          DC    X'8496A6950000D68686A285A3C3969494' down..OffsetComm
00011350 89A30000D68686A2                  24001          DC    X'89A30000D68686A285A3C685A3838800' it..OffsetFetch.
00011360 C6899584C3969699                  24002          DC    X'C6899584C396969984899581A3969900' FindCoordinator.
00011370 D1968995C79996A4                  24003          DC    X'D1968995C79996A49700C8858199A382' JoinGroup.Heartb
00011380 8581A300D38581A5                  24004          DC    X'8581A300D38581A585C79996A4970000' eat.LeaveGroup..
00011390 E2A89583C79996A4                  24005          DC    X'E2A89583C79996A49700C485A2839989' SyncGroup.Descri
000113A0 8285C79996A497A2                  24006          DC    X'8285C79996A497A20000D389A2A3C799' beGroups..ListGr
000113B0 96A497A20000E281                  24007          DC    X'96A497A20000E281A293C8819584A288' oups..SaslHandsh
000113C0 81928500C19789E5                  24008          DC    X'81928500C19789E58599A28996950000' ake.ApiVersion..
000113D0 C3998581A385E396                  24009          DC    X'C3998581A385E396978983A20000C485' CreateTopics..De
000113E0 9385A385E3969789                  24010          DC    X'9385A385E396978983A20000C4859385' leteTopics..Dele
000113F0 A385D98583969984                  24011          DC    X'A385D98583969984A200C99589A3D799' teRecords.InitPr
00011400 9684A4838599C984                  24012          DC    X'9684A4838599C9840000D68686A285A3' oducerId..Offset
00011410 C69699D385818485                  24013          DC    X'C69699D38581848599C5979683880000' ForLeaderEpoch..
00011420 C18484D78199A389                  24014          DC    X'C18484D78199A389A3899695A2E396E3' AddPartitionsToT
00011430 A7950000C18484D6                  24015          DC    X'A7950000C18484D68686A285A3A2E396' xn..AddOffsetsTo
00011440 E3A79500C59584E3                  24016          DC    X'E3A79500C59584E3A7950000E69989A3' Txn.EndTxn..Writ
00011450 85E3A795D4819992                  24017          DC    X'85E3A795D48199928599A200E3A795D6' eTxnMarkers.TxnO
00011460 8686A285A3C39694                  24018          DC    X'8686A285A3C396949489A300C485A283' ffsetCommit.Desc
00011470 99898285C18393A2                  24019          DC    X'99898285C18393A20000C3998581A385' ribeAcls..Create
00011480 C18393A20000C485                  24020          DC    X'C18393A20000C4859385A385C18393A2' Acls..DeleteAcls
00011490 0000C485A2839989                  24021          DC    X'0000C485A28399898285C39695868987' ..DescribeConfig
000114A0 A200C193A38599C3                  24022          DC    X'A200C193A38599C39695868987A20000' s.AlterConfigs..
000114B0 C193A38599D98597                  24023          DC    X'C193A38599D9859793898381D39687C4' AlterReplicaLogD
000114C0 8999A200C485A283                  24024          DC    X'8999A200C485A28399898285D39687C4' irs.DescribeLogD
000114D0 8999A200E281A293                  24025          DC    X'8999A200E281A293C1A4A3888595A389' irs.SaslAuthenti
000114E0 8381A3850000C399                  24026          DC    X'8381A3850000C3998581A385D78199A3' cate..CreatePart
                                                                                                                           Page  480 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000114F0 89A3899695A20000                  24027          DC    X'89A3899695A20000C3998581A385C485' itions..CreateDe
00011500 93858781A3899695                  24028          DC    X'93858781A3899695E39692859500D985' legationToken.Re
00011510 9585A6C485938587                  24029          DC    X'9585A6C48593858781A3899695E39692' newDelegationTok
00011520 85950000C5A79789                  24030          DC    X'85950000C5A797899985C48593858781' en..ExpireDelega
00011530 A3899695E3969285                  24031          DC    X'A3899695E39692859500C485A2839989' tionToken.Descri
00011540 8285C48593858781                  24032          DC    X'8285C48593858781A3899695E3969285' beDelegationToke
00011550 9500C4859385A385                  24033          DC    X'9500C4859385A385C79996A497A20000' n.DeleteGroups..
00011560 C5938583A3D38581                  24034          DC    X'C5938583A3D38581848599A2D98598A4' ElectLeadersRequ
00011570 85A2A300C9958399                  24035          DC    X'85A2A300C995839985948595A38193C1' est.IncrementalA
00011580 93A38599C3969586                  24036          DC    X'93A38599C39695868987A2D98598A485' lterConfigsReque
00011590 A2A30000C193A385                  24037          DC    X'A2A30000C193A38599D78199A389A389' st..AlterPartiti
000115A0 9695D98581A2A289                  24038          DC    X'9695D98581A2A2898795948595A3A2D9' onReassignmentsR
000115B0 8598A485A2A30000                  24039          DC    X'8598A485A2A30000D389A2A3D78199A3' equest..ListPart
000115C0 89A3899695D98581                  24040          DC    X'89A3899695D98581A2A2898795948595' itionReassignmen
000115D0 A3A2D98598A485A2                  24041          DC    X'A3A2D98598A485A2A300D68686A285A3' tsRequest.Offset
000115E0 C4859385A385D985                  24042          DC    X'C4859385A385D98598A485A2A300C485' DeleteRequest.De
000115F0 A28399898285C393                  24043          DC    X'A28399898285C393898595A3D8A496A3' scribeClientQuot
00011600 81A2D98598A485A2                  24044          DC    X'81A2D98598A485A2A300C193A38599C3' asRequest.AlterC
00011610 93898595A3D8A496                  24045          DC    X'93898595A3D8A496A381A2D98598A485' lientQuotasReque
00011620 A2A30000C485A283                  24046          DC    X'A2A30000C485A28399898285E4A28599' st..DescribeUser
00011630 E283998194C39985                  24047          DC    X'E283998194C39985848595A3898193A2' ScramCredentials
00011640 D98598A485A2A300                  24048          DC    X'D98598A485A2A300C193A38599E4A285' Request.AlterUse
00011650 99E283998194C399                  24049          DC    X'99E283998194C39985848595A3898193' rScramCredential
00011660 A2D98598A485A2A3                  24050          DC    X'A2D98598A485A2A30000E596A385D985' sRequest..VoteRe
00011670 98A485A2A300C285                  24051          DC    X'98A485A2A300C285878995D8A49699A4' quest.BeginQuoru
00011680 94C597968388D985                  24052          DC    X'94C597968388D98598A485A2A300C595' mEpochRequest.En
00011690 84D8A49699A494C5                  24053          DC    X'84D8A49699A494C597968388D98598A4' dQuorumEpochRequ
000116A0 85A2A300C485A283                  24054          DC    X'85A2A300C485A28399898285D8A49699' est.DescribeQuor
000116B0 A494D98598A485A2                  24055          DC    X'A494D98598A485A2A300C193A38599C9' umRequest.AlterI
000116C0 A299D98598A485A2                  24056          DC    X'A299D98598A485A2A300E4978481A385' srRequest.Update
000116D0 C68581A3A49985A2                  24057          DC    X'C68581A3A49985A2D98598A485A2A300' FeaturesRequest.
000116E0 C595A58593969785                  24058          DC    X'C595A58593969785D98598A485A2A300' EnvelopeRequest.
000116F0 95969585000087A9                  24059          DC    X'95969585000087A989970000A2958197' none..gzip..snap
00011700 97A8000093A9F400                  24060          DC    X'97A8000093A9F400A9A2A38400008995' py..lz4.zstd..in
00011710 88859989A3008396                  24061          DC    X'88859989A300839695868987A4998584' herit.configured
00011720 0000938581999585                  24062          DC    X'000093858199958584008995A3859995' ..learned.intern
00011730 8193000093968789                  24063          DC    X'819300009396878983819300C99589A3' al..logical.Init
00011740 0000E38599948995                  24064          DC    X'0000E3859994899581A38500C681A381' ..Terminate.Fata
00011750 93C5999996990000                  24065          DC    X'93C5999996990000D98598A485A2A3D7' lError..RequestP
00011760 C9C40000E68189A3                  24066          DC    X'C9C40000E68189A3E3998195A2979699' ID..WaitTranspor
00011770 A300E68189A3D7C9                  24067          DC    X'A300E68189A3D7C9C400C1A2A2898795' t.WaitPID.Assign
00011780 85840000C4998189                  24068          DC    X'85840000C499818995D985A285A30000' ed..DrainReset..
00011790 C499818995C2A494                  24069          DC    X'C499818995C2A4949700D9858184A8D5' DrainBump.ReadyN
000117A0 96A3C18392858400                  24070          DC    X'96A3C18392858400D9858184A800C995' otAcked.Ready.In
000117B0 E3998195A28183A3                  24071          DC    X'E3998195A28183A389969500C2858789' Transaction.Begi
000117C0 95C396949489A300                  24072          DC    X'95C396949489A300C396949489A3A389' nCommit.Committi
000117D0 9587E3998195A281                  24073          DC    X'9587E3998195A28183A389969500C396' ngTransaction.Co
000117E0 949489A3D596A3C1                  24074          DC    X'949489A3D596A3C1839285840000C182' mmitNotAcked..Ab
000117F0 9699A3899587E399                  24075          DC    X'9699A3899587E3998195A28183A38996' ortingTransactio
00011800 9500C1829699A385                  24076          DC    X'9500C1829699A38584D596A3C1839285' n.AbortedNotAcke
00011810 8400C1829699A381                  24077          DC    X'8400C1829699A381829385C599999699' d.AbortableError
00011820 0000                              24078          DC    X'0000'                             ..
                                                                                                                           Page  481 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           24079 @Erd_kafka_mock_api_handlers ALIAS X'99846D92818692816D949683926D819789*
                                                                6D88819584938599A2'
                                           24080          EXTRN @Erd_kafka_mock_api_handlers
                                           24081 @Ecrc_table ALIAS X'8399836DA381829385'
                                           24082          EXTRN @Ecrc_table
                                           24083 @Erd_kafka_thread_cnt_curr ALIAS X'99846D92818692816DA388998581846D8395*
                                                                A36D83A49999'
                                           24084          EXTRN @Erd_kafka_thread_cnt_curr
                                           24085 *
                                           24086 *
                                           24087 *   Re-entrant Data Initialization Section
                                           24088 *
                                           24089 @@INIT@  ALIAS C'rdkafka_mock:'
00011828                00011828 00001040  24090 @@INIT@  CSECT
                                           24091 @@INIT@  AMODE ANY
                                           24092 @@INIT@  RMODE ANY
00011828 05                                24093          DC    XL1'5'
00011829 000000                            24094          DC    AL3(0)
0001182C 00000120                          24095          DC    AL4(288)
00011830 00000000                          24096          DC    4X'00'
00011834 00000000                          24097          DC    Q(@@STATIC)
00011838 00000000                          24098          DC    X'00000000'
0001183C 00000001                          24099          DC    X'00000001'
00011840 00000000                          24100          DC    X'00000000'
00011844 000000FF                          24101          DC    X'000000FF'
00011848 0102039C09867F97                  24102          DC    X'0102039C09867F978D8E0B0C0D0E0F10' .....f.p........
00011858 1112139D85088718                  24103          DC    X'1112139D8508871819928F1C1D1E1F80' ....e.g..k......
00011868 818283840A171B88                  24104          DC    X'818283840A171B88898A8B8C05060790' abcd...hi.......
00011878 9116939495960498                  24105          DC    X'9116939495960498999A9B14159E1A20' j.lmno.qr.......
00011888 A0E2E4E0E1E3E5E7                  24106          DC    X'A0E2E4E0E1E3E5E7F1A22E3C282B7C26' .SU..TVX1s......
00011898 E9EAEBE8EDEEEFEC                  24107          DC    X'E9EAEBE8EDEEEFECDF21242A293B5E2D' Z..Y............
000118A8 2FC2C4C0C1C3C5C7                  24108          DC    X'2FC2C4C0C1C3C5C7D1A62C255F3E3FF8' .BD.ACEGJw.....8
000118B8 C9CACBC8CDCECFCC                  24109          DC    X'C9CACBC8CDCECFCC603A2340273D22D8' I..H...........Q
000118C8 6162636465666768                  24110          DC    X'616263646566676869ABBBF0FDFEB1B0' ...........0....
000118D8 6A6B6C6D6E6F7071                  24111          DC    X'6A6B6C6D6E6F707172AABAE6B8C6A4B5' ...........W.Fu.
000118E8 7E73747576777879                  24112          DC    X'7E737475767778797AA1BFD05BDEAEAC' ................
000118F8 A3A5B7A9A7B6BCBD                  24113          DC    X'A3A5B7A9A7B6BCBDBEDDA8AF5DB4D77B' tv.zx.....y...P.
00011908 4142434445464748                  24114          DC    X'414243444546474849ADF4F6F2F3F57D' ..........46235.
00011918 4A4B4C4D4E4F5051                  24115          DC    X'4A4B4C4D4E4F505152B9FBFCF9FAFF5C' ............9...
00011928 F753545556575859                  24116          DC    X'F7535455565758595AB2D4D6D2D3D530' 7.........MOKLN.
00011938 3132333435363738                  24117          DC    X'313233343536373839B3DBDCD9DA9F40' ............R...
                                           24118 *
00011948 05                                24119          DC    XL1'5'
00011949 000000                            24120          DC    AL3(0)
0001194C 000001E0                          24121          DC    AL4(480)
00011950 00000000                          24122          DC    4X'00'
00011954 00000000                          24123          DC    Q(@@STATIC)
00011958 00000000                          24124          DC    X'00000000'
0001195C 00000101                          24125          DC    X'00000101'
00011960 00000000                          24126          DC    X'00000000'
00011964 000000A0                          24127          DC    X'000000A0'
00011968 010203372D2E2F16                  24128          DC    X'010203372D2E2F1605150B0C0D0E0F10' ................
                                                                                                                           Page  482 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011978 1112133C3D322618                  24129          DC    X'1112133C3D322618193F271C1D1E1F40' ................
00011988 5A7F7B5B6C507D4D                  24130          DC    X'5A7F7B5B6C507D4D5D5C4E6B604B61F0' ...............0
00011998 F1F2F3F4F5F6F7F8                  24131          DC    X'F1F2F3F4F5F6F7F8F97A5E4C7E6E6F7C' 123456789.......
000119A8 C1C2C3C4C5C6C7C8                  24132          DC    X'C1C2C3C4C5C6C7C8C9D1D2D3D4D5D6D7' ABCDEFGHIJKLMNOP
000119B8 D8D9E2E3E4E5E6E7                  24133          DC    X'D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D79' QRSTUVWXYZ......
000119C8 8182838485868788                  24134          DC    X'81828384858687888991929394959697' abcdefghijklmnop
000119D8 9899A2A3A4A5A6A7                  24135          DC    X'9899A2A3A4A5A6A7A8A9C04FD0A10720' qrstuvwxyz......
000119E8 2122232425061728                  24136          DC    X'2122232425061728292A2B2C090A1B30' ................
000119F8 311A333435360838                  24137          DC    X'311A333435360838393A3B04143EFF80' ................
                                           24138 *
00011A08 05                                24139          DC    XL1'5'
00011A09 000000                            24140          DC    AL3(0)
00011A0C 00000208                          24141          DC    AL4(520)
00011A10 00000000                          24142          DC    4X'00'
00011A14 00000000                          24143          DC    Q(@@STATIC)
00011A18 00000000                          24144          DC    X'00000000'
00011A1C 000001C0                          24145          DC    X'000001C0'
00011A20 00000000                          24146          DC    X'00000000'
00011A24 00000001                          24147          DC    X'00000001'
00011A28 8A40404040404040                  24148          DC    X'8A40404040404040'                 ........
                                           24149 *
00011A30 05                                24150          DC    XL1'5'
00011A31 000000                            24151          DC    AL3(0)
00011A34 00000230                          24152          DC    AL4(560)
00011A38 00000000                          24153          DC    4X'00'
00011A3C 00000000                          24154          DC    Q(@@STATIC)
00011A40 00000000                          24155          DC    X'00000000'
00011A44 000001E0                          24156          DC    X'000001E0'
00011A48 00000000                          24157          DC    X'00000000'
00011A4C 00000001                          24158          DC    X'00000001'
00011A50 8B40404040404040                  24159          DC    X'8B40404040404040'                 ........
                                           24160 *
00011A58 0D                                24161          DC    XL1'D'
00011A59 000000                            24162          DC    AL3(0)
00011A5C 00000258                          24163          DC    AL4(600)
00011A60 00000000                          24164          DC    4X'00'
00011A64 00000000                          24165          DC    Q(@@STATIC)
00011A68 00000000                          24166          DC    X'00000000'
00011A6C 00000220                          24167          DC    X'00000220'
00011A70 0000000000010480                  24168          DC    ADL8(@DATA)
00011A78 00000000                          24169          DC    X'00000000'
00011A7C 00000E68                          24170          DC    X'00000E68'
                                           24171 *
00011A80 0D                                24172          DC    XL1'D'
00011A81 000000                            24173          DC    AL3(0)
00011A84 00000280                          24174          DC    AL4(640)
00011A88 00000000                          24175          DC    4X'00'
00011A8C 00000000                          24176          DC    Q(@@STATIC)
00011A90 00000000                          24177          DC    X'00000000'
00011A94 00000228                          24178          DC    X'00000228'
00011A98 0000000000010480                  24179          DC    ADL8(@DATA)
00011AA0 00000000                          24180          DC    X'00000000'
                                                                                                                           Page  483 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011AA4 00000E70                          24181          DC    X'00000E70'
                                           24182 *
00011AA8 0D                                24183          DC    XL1'D'
00011AA9 000000                            24184          DC    AL3(0)
00011AAC 000002A8                          24185          DC    AL4(680)
00011AB0 00000000                          24186          DC    4X'00'
00011AB4 00000000                          24187          DC    Q(@@STATIC)
00011AB8 00000000                          24188          DC    X'00000000'
00011ABC 00000230                          24189          DC    X'00000230'
00011AC0 0000000000010480                  24190          DC    ADL8(@DATA)
00011AC8 00000000                          24191          DC    X'00000000'
00011ACC 00000E76                          24192          DC    X'00000E76'
                                           24193 *
00011AD0 0D                                24194          DC    XL1'D'
00011AD1 000000                            24195          DC    AL3(0)
00011AD4 000002D0                          24196          DC    AL4(720)
00011AD8 00000000                          24197          DC    4X'00'
00011ADC 00000000                          24198          DC    Q(@@STATIC)
00011AE0 00000000                          24199          DC    X'00000000'
00011AE4 00000238                          24200          DC    X'00000238'
00011AE8 0000000000010480                  24201          DC    ADL8(@DATA)
00011AF0 00000000                          24202          DC    X'00000000'
00011AF4 00000E7E                          24203          DC    X'00000E7E'
                                           24204 *
00011AF8 0D                                24205          DC    XL1'D'
00011AF9 000000                            24206          DC    AL3(0)
00011AFC 000002F8                          24207          DC    AL4(760)
00011B00 00000000                          24208          DC    4X'00'
00011B04 00000000                          24209          DC    Q(@@STATIC)
00011B08 00000000                          24210          DC    X'00000000'
00011B0C 00000240                          24211          DC    X'00000240'
00011B10 0000000000010480                  24212          DC    ADL8(@DATA)
00011B18 00000000                          24213          DC    X'00000000'
00011B1C 00000E88                          24214          DC    X'00000E88'
                                           24215 *
00011B20 0D                                24216          DC    XL1'D'
00011B21 000000                            24217          DC    AL3(0)
00011B24 00000320                          24218          DC    AL4(800)
00011B28 00000000                          24219          DC    4X'00'
00011B2C 00000000                          24220          DC    Q(@@STATIC)
00011B30 00000000                          24221          DC    X'00000000'
00011B34 00000248                          24222          DC    X'00000248'
00011B38 0000000000010480                  24223          DC    ADL8(@DATA)
00011B40 00000000                          24224          DC    X'00000000'
00011B44 00000E96                          24225          DC    X'00000E96'
                                           24226 *
00011B48 0D                                24227          DC    XL1'D'
00011B49 000000                            24228          DC    AL3(0)
00011B4C 00000348                          24229          DC    AL4(840)
00011B50 00000000                          24230          DC    4X'00'
00011B54 00000000                          24231          DC    Q(@@STATIC)
00011B58 00000000                          24232          DC    X'00000000'
                                                                                                                           Page  484 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011B5C 00000250                          24233          DC    X'00000250'
00011B60 0000000000010480                  24234          DC    ADL8(@DATA)
00011B68 00000000                          24235          DC    X'00000000'
00011B6C 00000EA2                          24236          DC    X'00000EA2'
                                           24237 *
00011B70 0D                                24238          DC    XL1'D'
00011B71 000000                            24239          DC    AL3(0)
00011B74 00000370                          24240          DC    AL4(880)
00011B78 00000000                          24241          DC    4X'00'
00011B7C 00000000                          24242          DC    Q(@@STATIC)
00011B80 00000000                          24243          DC    X'00000000'
00011B84 00000258                          24244          DC    X'00000258'
00011B88 0000000000010480                  24245          DC    ADL8(@DATA)
00011B90 00000000                          24246          DC    X'00000000'
00011B94 00000EB2                          24247          DC    X'00000EB2'
                                           24248 *
00011B98 0D                                24249          DC    XL1'D'
00011B99 000000                            24250          DC    AL3(0)
00011B9C 00000398                          24251          DC    AL4(920)
00011BA0 00000000                          24252          DC    4X'00'
00011BA4 00000000                          24253          DC    Q(@@STATIC)
00011BA8 00000000                          24254          DC    X'00000000'
00011BAC 00000260                          24255          DC    X'00000260'
00011BB0 0000000000010480                  24256          DC    ADL8(@DATA)
00011BB8 00000000                          24257          DC    X'00000000'
00011BBC 00000EC6                          24258          DC    X'00000EC6'
                                           24259 *
00011BC0 0D                                24260          DC    XL1'D'
00011BC1 000000                            24261          DC    AL3(0)
00011BC4 000003C0                          24262          DC    AL4(960)
00011BC8 00000000                          24263          DC    4X'00'
00011BCC 00000000                          24264          DC    Q(@@STATIC)
00011BD0 00000000                          24265          DC    X'00000000'
00011BD4 00000268                          24266          DC    X'00000268'
00011BD8 0000000000010480                  24267          DC    ADL8(@DATA)
00011BE0 00000000                          24268          DC    X'00000000'
00011BE4 00000ED4                          24269          DC    X'00000ED4'
                                           24270 *
00011BE8 0D                                24271          DC    XL1'D'
00011BE9 000000                            24272          DC    AL3(0)
00011BEC 000003E8                          24273          DC    AL4(1000)
00011BF0 00000000                          24274          DC    4X'00'
00011BF4 00000000                          24275          DC    Q(@@STATIC)
00011BF8 00000000                          24276          DC    X'00000000'
00011BFC 00000270                          24277          DC    X'00000270'
00011C00 0000000000010480                  24278          DC    ADL8(@DATA)
00011C08 00000000                          24279          DC    X'00000000'
00011C0C 00000EE0                          24280          DC    X'00000EE0'
                                           24281 *
00011C10 0D                                24282          DC    XL1'D'
00011C11 000000                            24283          DC    AL3(0)
00011C14 00000410                          24284          DC    AL4(1040)
                                                                                                                           Page  485 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011C18 00000000                          24285          DC    4X'00'
00011C1C 00000000                          24286          DC    Q(@@STATIC)
00011C20 00000000                          24287          DC    X'00000000'
00011C24 00000278                          24288          DC    X'00000278'
00011C28 0000000000010480                  24289          DC    ADL8(@DATA)
00011C30 00000000                          24290          DC    X'00000000'
00011C34 00000EF0                          24291          DC    X'00000EF0'
                                           24292 *
00011C38 0D                                24293          DC    XL1'D'
00011C39 000000                            24294          DC    AL3(0)
00011C3C 00000438                          24295          DC    AL4(1080)
00011C40 00000000                          24296          DC    4X'00'
00011C44 00000000                          24297          DC    Q(@@STATIC)
00011C48 00000000                          24298          DC    X'00000000'
00011C4C 00000280                          24299          DC    X'00000280'
00011C50 0000000000010480                  24300          DC    ADL8(@DATA)
00011C58 00000000                          24301          DC    X'00000000'
00011C5C 00000EFA                          24302          DC    X'00000EFA'
                                           24303 *
00011C60 0D                                24304          DC    XL1'D'
00011C61 000000                            24305          DC    AL3(0)
00011C64 00000460                          24306          DC    AL4(1120)
00011C68 00000000                          24307          DC    4X'00'
00011C6C 00000000                          24308          DC    Q(@@STATIC)
00011C70 00000000                          24309          DC    X'00000000'
00011C74 00000288                          24310          DC    X'00000288'
00011C78 0000000000010480                  24311          DC    ADL8(@DATA)
00011C80 00000000                          24312          DC    X'00000000'
00011C84 00000F04                          24313          DC    X'00000F04'
                                           24314 *
00011C88 0D                                24315          DC    XL1'D'
00011C89 000000                            24316          DC    AL3(0)
00011C8C 00000488                          24317          DC    AL4(1160)
00011C90 00000000                          24318          DC    4X'00'
00011C94 00000000                          24319          DC    Q(@@STATIC)
00011C98 00000000                          24320          DC    X'00000000'
00011C9C 00000290                          24321          DC    X'00000290'
00011CA0 0000000000010480                  24322          DC    ADL8(@DATA)
00011CA8 00000000                          24323          DC    X'00000000'
00011CAC 00000F10                          24324          DC    X'00000F10'
                                           24325 *
00011CB0 0D                                24326          DC    XL1'D'
00011CB1 000000                            24327          DC    AL3(0)
00011CB4 000004B0                          24328          DC    AL4(1200)
00011CB8 00000000                          24329          DC    4X'00'
00011CBC 00000000                          24330          DC    Q(@@STATIC)
00011CC0 00000000                          24331          DC    X'00000000'
00011CC4 00000298                          24332          DC    X'00000298'
00011CC8 0000000000010480                  24333          DC    ADL8(@DATA)
00011CD0 00000000                          24334          DC    X'00000000'
00011CD4 00000F1A                          24335          DC    X'00000F1A'
                                           24336 *
                                                                                                                           Page  486 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011CD8 0D                                24337          DC    XL1'D'
00011CD9 000000                            24338          DC    AL3(0)
00011CDC 000004D8                          24339          DC    AL4(1240)
00011CE0 00000000                          24340          DC    4X'00'
00011CE4 00000000                          24341          DC    Q(@@STATIC)
00011CE8 00000000                          24342          DC    X'00000000'
00011CEC 000002A0                          24343          DC    X'000002A0'
00011CF0 0000000000010480                  24344          DC    ADL8(@DATA)
00011CF8 00000000                          24345          DC    X'00000000'
00011CFC 00000F2A                          24346          DC    X'00000F2A'
                                           24347 *
00011D00 0D                                24348          DC    XL1'D'
00011D01 000000                            24349          DC    AL3(0)
00011D04 00000500                          24350          DC    AL4(1280)
00011D08 00000000                          24351          DC    4X'00'
00011D0C 00000000                          24352          DC    Q(@@STATIC)
00011D10 00000000                          24353          DC    X'00000000'
00011D14 000002A8                          24354          DC    X'000002A8'
00011D18 0000000000010480                  24355          DC    ADL8(@DATA)
00011D20 00000000                          24356          DC    X'00000000'
00011D24 00000F36                          24357          DC    X'00000F36'
                                           24358 *
00011D28 0D                                24359          DC    XL1'D'
00011D29 000000                            24360          DC    AL3(0)
00011D2C 00000528                          24361          DC    AL4(1320)
00011D30 00000000                          24362          DC    4X'00'
00011D34 00000000                          24363          DC    Q(@@STATIC)
00011D38 00000000                          24364          DC    X'00000000'
00011D3C 000002B0                          24365          DC    X'000002B0'
00011D40 0000000000010480                  24366          DC    ADL8(@DATA)
00011D48 00000000                          24367          DC    X'00000000'
00011D4C 00000F44                          24368          DC    X'00000F44'
                                           24369 *
00011D50 0D                                24370          DC    XL1'D'
00011D51 000000                            24371          DC    AL3(0)
00011D54 00000550                          24372          DC    AL4(1360)
00011D58 00000000                          24373          DC    4X'00'
00011D5C 00000000                          24374          DC    Q(@@STATIC)
00011D60 00000000                          24375          DC    X'00000000'
00011D64 000002B8                          24376          DC    X'000002B8'
00011D68 0000000000010480                  24377          DC    ADL8(@DATA)
00011D70 00000000                          24378          DC    X'00000000'
00011D74 00000F50                          24379          DC    X'00000F50'
                                           24380 *
00011D78 0D                                24381          DC    XL1'D'
00011D79 000000                            24382          DC    AL3(0)
00011D7C 00000578                          24383          DC    AL4(1400)
00011D80 00000000                          24384          DC    4X'00'
00011D84 00000000                          24385          DC    Q(@@STATIC)
00011D88 00000000                          24386          DC    X'00000000'
00011D8C 000002C0                          24387          DC    X'000002C0'
00011D90 0000000000010480                  24388          DC    ADL8(@DATA)
                                                                                                                           Page  487 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011D98 00000000                          24389          DC    X'00000000'
00011D9C 00000F5E                          24390          DC    X'00000F5E'
                                           24391 *
00011DA0 0D                                24392          DC    XL1'D'
00011DA1 000000                            24393          DC    AL3(0)
00011DA4 000005A0                          24394          DC    AL4(1440)
00011DA8 00000000                          24395          DC    4X'00'
00011DAC 00000000                          24396          DC    Q(@@STATIC)
00011DB0 00000000                          24397          DC    X'00000000'
00011DB4 000002C8                          24398          DC    X'000002C8'
00011DB8 0000000000010480                  24399          DC    ADL8(@DATA)
00011DC0 00000000                          24400          DC    X'00000000'
00011DC4 00000F6C                          24401          DC    X'00000F6C'
                                           24402 *
00011DC8 0D                                24403          DC    XL1'D'
00011DC9 000000                            24404          DC    AL3(0)
00011DCC 000005C8                          24405          DC    AL4(1480)
00011DD0 00000000                          24406          DC    4X'00'
00011DD4 00000000                          24407          DC    Q(@@STATIC)
00011DD8 00000000                          24408          DC    X'00000000'
00011DDC 000002D0                          24409          DC    X'000002D0'
00011DE0 0000000000010480                  24410          DC    ADL8(@DATA)
00011DE8 00000000                          24411          DC    X'00000000'
00011DEC 00000F7A                          24412          DC    X'00000F7A'
                                           24413 *
00011DF0 0D                                24414          DC    XL1'D'
00011DF1 000000                            24415          DC    AL3(0)
00011DF4 000005F0                          24416          DC    AL4(1520)
00011DF8 00000000                          24417          DC    4X'00'
00011DFC 00000000                          24418          DC    Q(@@STATIC)
00011E00 00000000                          24419          DC    X'00000000'
00011E04 000002D8                          24420          DC    X'000002D8'
00011E08 0000000000010480                  24421          DC    ADL8(@DATA)
00011E10 00000000                          24422          DC    X'00000000'
00011E14 00000F8A                          24423          DC    X'00000F8A'
                                           24424 *
00011E18 0D                                24425          DC    XL1'D'
00011E19 000000                            24426          DC    AL3(0)
00011E1C 00000618                          24427          DC    AL4(1560)
00011E20 00000000                          24428          DC    4X'00'
00011E24 00000000                          24429          DC    Q(@@STATIC)
00011E28 00000000                          24430          DC    X'00000000'
00011E2C 000002E0                          24431          DC    X'000002E0'
00011E30 0000000000010480                  24432          DC    ADL8(@DATA)
00011E38 00000000                          24433          DC    X'00000000'
00011E3C 00000FA0                          24434          DC    X'00000FA0'
                                           24435 *
00011E40 0D                                24436          DC    XL1'D'
00011E41 000000                            24437          DC    AL3(0)
00011E44 00000640                          24438          DC    AL4(1600)
00011E48 00000000                          24439          DC    4X'00'
00011E4C 00000000                          24440          DC    Q(@@STATIC)
                                                                                                                           Page  488 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011E50 00000000                          24441          DC    X'00000000'
00011E54 000002E8                          24442          DC    X'000002E8'
00011E58 0000000000010480                  24443          DC    ADL8(@DATA)
00011E60 00000000                          24444          DC    X'00000000'
00011E64 00000FB4                          24445          DC    X'00000FB4'
                                           24446 *
00011E68 0D                                24447          DC    XL1'D'
00011E69 000000                            24448          DC    AL3(0)
00011E6C 00000668                          24449          DC    AL4(1640)
00011E70 00000000                          24450          DC    4X'00'
00011E74 00000000                          24451          DC    Q(@@STATIC)
00011E78 00000000                          24452          DC    X'00000000'
00011E7C 000002F0                          24453          DC    X'000002F0'
00011E80 0000000000010480                  24454          DC    ADL8(@DATA)
00011E88 00000000                          24455          DC    X'00000000'
00011E8C 00000FC4                          24456          DC    X'00000FC4'
                                           24457 *
00011E90 0D                                24458          DC    XL1'D'
00011E91 000000                            24459          DC    AL3(0)
00011E94 00000690                          24460          DC    AL4(1680)
00011E98 00000000                          24461          DC    4X'00'
00011E9C 00000000                          24462          DC    Q(@@STATIC)
00011EA0 00000000                          24463          DC    X'00000000'
00011EA4 000002F8                          24464          DC    X'000002F8'
00011EA8 0000000000010480                  24465          DC    ADL8(@DATA)
00011EB0 00000000                          24466          DC    X'00000000'
00011EB4 00000FCC                          24467          DC    X'00000FCC'
                                           24468 *
00011EB8 0D                                24469          DC    XL1'D'
00011EB9 000000                            24470          DC    AL3(0)
00011EBC 000006B8                          24471          DC    AL4(1720)
00011EC0 00000000                          24472          DC    4X'00'
00011EC4 00000000                          24473          DC    Q(@@STATIC)
00011EC8 00000000                          24474          DC    X'00000000'
00011ECC 00000300                          24475          DC    X'00000300'
00011ED0 0000000000010480                  24476          DC    ADL8(@DATA)
00011ED8 00000000                          24477          DC    X'00000000'
00011EDC 00000FDC                          24478          DC    X'00000FDC'
                                           24479 *
00011EE0 0D                                24480          DC    XL1'D'
00011EE1 000000                            24481          DC    AL3(0)
00011EE4 000006E0                          24482          DC    AL4(1760)
00011EE8 00000000                          24483          DC    4X'00'
00011EEC 00000000                          24484          DC    Q(@@STATIC)
00011EF0 00000000                          24485          DC    X'00000000'
00011EF4 00000308                          24486          DC    X'00000308'
00011EF8 0000000000010480                  24487          DC    ADL8(@DATA)
00011F00 00000000                          24488          DC    X'00000000'
00011F04 00000FEC                          24489          DC    X'00000FEC'
                                           24490 *
00011F08 0D                                24491          DC    XL1'D'
00011F09 000000                            24492          DC    AL3(0)
                                                                                                                           Page  489 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00011F0C 00000708                          24493          DC    AL4(1800)
00011F10 00000000                          24494          DC    4X'00'
00011F14 00000000                          24495          DC    Q(@@STATIC)
00011F18 00000000                          24496          DC    X'00000000'
00011F1C 00000310                          24497          DC    X'00000310'
00011F20 0000000000010480                  24498          DC    ADL8(@DATA)
00011F28 00000000                          24499          DC    X'00000000'
00011F2C 00000FFA                          24500          DC    X'00000FFA'
                                           24501 *
00011F30 0D                                24502          DC    XL1'D'
00011F31 000000                            24503          DC    AL3(0)
00011F34 00000730                          24504          DC    AL4(1840)
00011F38 00000000                          24505          DC    4X'00'
00011F3C 00000000                          24506          DC    Q(@@STATIC)
00011F40 00000000                          24507          DC    X'00000000'
00011F44 00000318                          24508          DC    X'00000318'
00011F48 0000000000010480                  24509          DC    ADL8(@DATA)
00011F50 00000000                          24510          DC    X'00000000'
00011F54 00001006                          24511          DC    X'00001006'
                                           24512 *
00011F58 0D                                24513          DC    XL1'D'
00011F59 000000                            24514          DC    AL3(0)
00011F5C 00000758                          24515          DC    AL4(1880)
00011F60 00000000                          24516          DC    4X'00'
00011F64 00000000                          24517          DC    Q(@@STATIC)
00011F68 00000000                          24518          DC    X'00000000'
00011F6C 00000320                          24519          DC    X'00000320'
00011F70 0000000000010480                  24520          DC    ADL8(@DATA)
00011F78 00000000                          24521          DC    X'00000000'
00011F7C 00001012                          24522          DC    X'00001012'
                                           24523 *
00011F80 0D                                24524          DC    XL1'D'
00011F81 000000                            24525          DC    AL3(0)
00011F84 00000780                          24526          DC    AL4(1920)
00011F88 00000000                          24527          DC    4X'00'
00011F8C 00000000                          24528          DC    Q(@@STATIC)
00011F90 00000000                          24529          DC    X'00000000'
00011F94 00000328                          24530          DC    X'00000328'
00011F98 0000000000010480                  24531          DC    ADL8(@DATA)
00011FA0 00000000                          24532          DC    X'00000000'
00011FA4 00001022                          24533          DC    X'00001022'
                                           24534 *
00011FA8 0D                                24535          DC    XL1'D'
00011FA9 000000                            24536          DC    AL3(0)
00011FAC 000007A8                          24537          DC    AL4(1960)
00011FB0 00000000                          24538          DC    4X'00'
00011FB4 00000000                          24539          DC    Q(@@STATIC)
00011FB8 00000000                          24540          DC    X'00000000'
00011FBC 00000330                          24541          DC    X'00000330'
00011FC0 0000000000010480                  24542          DC    ADL8(@DATA)
00011FC8 00000000                          24543          DC    X'00000000'
00011FCC 00001030                          24544          DC    X'00001030'
                                                                                                                           Page  490 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           24545 *
00011FD0 0D                                24546          DC    XL1'D'
00011FD1 000000                            24547          DC    AL3(0)
00011FD4 000007D0                          24548          DC    AL4(2000)
00011FD8 00000000                          24549          DC    4X'00'
00011FDC 00000000                          24550          DC    Q(@@STATIC)
00011FE0 00000000                          24551          DC    X'00000000'
00011FE4 00000338                          24552          DC    X'00000338'
00011FE8 0000000000010480                  24553          DC    ADL8(@DATA)
00011FF0 00000000                          24554          DC    X'00000000'
00011FF4 00001044                          24555          DC    X'00001044'
                                           24556 *
00011FF8 0D                                24557          DC    XL1'D'
00011FF9 000000                            24558          DC    AL3(0)
00011FFC 000007F8                          24559          DC    AL4(2040)
00012000 00000000                          24560          DC    4X'00'
00012004 00000000                          24561          DC    Q(@@STATIC)
00012008 00000000                          24562          DC    X'00000000'
0001200C 00000340                          24563          DC    X'00000340'
00012010 0000000000010480                  24564          DC    ADL8(@DATA)
00012018 00000000                          24565          DC    X'00000000'
0001201C 00001054                          24566          DC    X'00001054'
                                           24567 *
00012020 0D                                24568          DC    XL1'D'
00012021 000000                            24569          DC    AL3(0)
00012024 00000820                          24570          DC    AL4(2080)
00012028 00000000                          24571          DC    4X'00'
0001202C 00000000                          24572          DC    Q(@@STATIC)
00012030 00000000                          24573          DC    X'00000000'
00012034 00000348                          24574          DC    X'00000348'
00012038 0000000000010480                  24575          DC    ADL8(@DATA)
00012040 00000000                          24576          DC    X'00000000'
00012044 00001066                          24577          DC    X'00001066'
                                           24578 *
00012048 0D                                24579          DC    XL1'D'
00012049 000000                            24580          DC    AL3(0)
0001204C 00000848                          24581          DC    AL4(2120)
00012050 00000000                          24582          DC    4X'00'
00012054 00000000                          24583          DC    Q(@@STATIC)
00012058 00000000                          24584          DC    X'00000000'
0001205C 00000350                          24585          DC    X'00000350'
00012060 0000000000010480                  24586          DC    ADL8(@DATA)
00012068 00000000                          24587          DC    X'00000000'
0001206C 00001078                          24588          DC    X'00001078'
                                           24589 *
00012070 0D                                24590          DC    XL1'D'
00012071 000000                            24591          DC    AL3(0)
00012074 00000870                          24592          DC    AL4(2160)
00012078 00000000                          24593          DC    4X'00'
0001207C 00000000                          24594          DC    Q(@@STATIC)
00012080 00000000                          24595          DC    X'00000000'
00012084 00000358                          24596          DC    X'00000358'
                                                                                                                           Page  491 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00012088 0000000000010480                  24597          DC    ADL8(@DATA)
00012090 00000000                          24598          DC    X'00000000'
00012094 0000108E                          24599          DC    X'0000108E'
                                           24600 *
00012098 0D                                24601          DC    XL1'D'
00012099 000000                            24602          DC    AL3(0)
0001209C 00000898                          24603          DC    AL4(2200)
000120A0 00000000                          24604          DC    4X'00'
000120A4 00000000                          24605          DC    Q(@@STATIC)
000120A8 00000000                          24606          DC    X'00000000'
000120AC 00000360                          24607          DC    X'00000360'
000120B0 0000000000010480                  24608          DC    ADL8(@DATA)
000120B8 00000000                          24609          DC    X'00000000'
000120BC 000010A4                          24610          DC    X'000010A4'
                                           24611 *
000120C0 0D                                24612          DC    XL1'D'
000120C1 000000                            24613          DC    AL3(0)
000120C4 000008C0                          24614          DC    AL4(2240)
000120C8 00000000                          24615          DC    4X'00'
000120CC 00000000                          24616          DC    Q(@@STATIC)
000120D0 00000000                          24617          DC    X'00000000'
000120D4 00000368                          24618          DC    X'00000368'
000120D8 0000000000010480                  24619          DC    ADL8(@DATA)
000120E0 00000000                          24620          DC    X'00000000'
000120E4 000010BA                          24621          DC    X'000010BA'
                                           24622 *
000120E8 0D                                24623          DC    XL1'D'
000120E9 000000                            24624          DC    AL3(0)
000120EC 000008E8                          24625          DC    AL4(2280)
000120F0 00000000                          24626          DC    4X'00'
000120F4 00000000                          24627          DC    Q(@@STATIC)
000120F8 00000000                          24628          DC    X'00000000'
000120FC 00000370                          24629          DC    X'00000370'
00012100 0000000000010480                  24630          DC    ADL8(@DATA)
00012108 00000000                          24631          DC    X'00000000'
0001210C 000010D2                          24632          DC    X'000010D2'
                                           24633 *
00012110 0D                                24634          DC    XL1'D'
00012111 000000                            24635          DC    AL3(0)
00012114 00000910                          24636          DC    AL4(2320)
00012118 00000000                          24637          DC    4X'00'
0001211C 00000000                          24638          DC    Q(@@STATIC)
00012120 00000000                          24639          DC    X'00000000'
00012124 00000378                          24640          DC    X'00000378'
00012128 0000000000010480                  24641          DC    ADL8(@DATA)
00012130 00000000                          24642          DC    X'00000000'
00012134 000010E0                          24643          DC    X'000010E0'
                                           24644 *
00012138 0D                                24645          DC    XL1'D'
00012139 000000                            24646          DC    AL3(0)
0001213C 00000938                          24647          DC    AL4(2360)
00012140 00000000                          24648          DC    4X'00'
                                                                                                                           Page  492 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00012144 00000000                          24649          DC    Q(@@STATIC)
00012148 00000000                          24650          DC    X'00000000'
0001214C 00000380                          24651          DC    X'00000380'
00012150 0000000000010480                  24652          DC    ADL8(@DATA)
00012158 00000000                          24653          DC    X'00000000'
0001215C 000010F4                          24654          DC    X'000010F4'
                                           24655 *
00012160 0D                                24656          DC    XL1'D'
00012161 000000                            24657          DC    AL3(0)
00012164 00000960                          24658          DC    AL4(2400)
00012168 00000000                          24659          DC    4X'00'
0001216C 00000000                          24660          DC    Q(@@STATIC)
00012170 00000000                          24661          DC    X'00000000'
00012174 00000388                          24662          DC    X'00000388'
00012178 0000000000010480                  24663          DC    ADL8(@DATA)
00012180 00000000                          24664          DC    X'00000000'
00012184 00001114                          24665          DC    X'00001114'
                                           24666 *
00012188 0D                                24667          DC    XL1'D'
00012189 000000                            24668          DC    AL3(0)
0001218C 00000988                          24669          DC    AL4(2440)
00012190 00000000                          24670          DC    4X'00'
00012194 00000000                          24671          DC    Q(@@STATIC)
00012198 00000000                          24672          DC    X'00000000'
0001219C 00000390                          24673          DC    X'00000390'
000121A0 0000000000010480                  24674          DC    ADL8(@DATA)
000121A8 00000000                          24675          DC    X'00000000'
000121AC 00001138                          24676          DC    X'00001138'
                                           24677 *
000121B0 0D                                24678          DC    XL1'D'
000121B1 000000                            24679          DC    AL3(0)
000121B4 000009B0                          24680          DC    AL4(2480)
000121B8 00000000                          24681          DC    4X'00'
000121BC 00000000                          24682          DC    Q(@@STATIC)
000121C0 00000000                          24683          DC    X'00000000'
000121C4 00000398                          24684          DC    X'00000398'
000121C8 0000000000010480                  24685          DC    ADL8(@DATA)
000121D0 00000000                          24686          DC    X'00000000'
000121D4 0000115A                          24687          DC    X'0000115A'
                                           24688 *
000121D8 0D                                24689          DC    XL1'D'
000121D9 000000                            24690          DC    AL3(0)
000121DC 000009D8                          24691          DC    AL4(2520)
000121E0 00000000                          24692          DC    4X'00'
000121E4 00000000                          24693          DC    Q(@@STATIC)
000121E8 00000000                          24694          DC    X'00000000'
000121EC 000003A0                          24695          DC    X'000003A0'
000121F0 0000000000010480                  24696          DC    ADL8(@DATA)
000121F8 00000000                          24697          DC    X'00000000'
000121FC 0000116E                          24698          DC    X'0000116E'
                                           24699 *
00012200 0D                                24700          DC    XL1'D'
                                                                                                                           Page  493 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00012201 000000                            24701          DC    AL3(0)
00012204 00000A00                          24702          DC    AL4(2560)
00012208 00000000                          24703          DC    4X'00'
0001220C 00000000                          24704          DC    Q(@@STATIC)
00012210 00000000                          24705          DC    X'00000000'
00012214 000003A8                          24706          DC    X'000003A8'
00012218 0000000000010480                  24707          DC    ADL8(@DATA)
00012220 00000000                          24708          DC    X'00000000'
00012224 0000118A                          24709          DC    X'0000118A'
                                           24710 *
00012228 0D                                24711          DC    XL1'D'
00012229 000000                            24712          DC    AL3(0)
0001222C 00000A28                          24713          DC    AL4(2600)
00012230 00000000                          24714          DC    4X'00'
00012234 00000000                          24715          DC    Q(@@STATIC)
00012238 00000000                          24716          DC    X'00000000'
0001223C 000003B0                          24717          DC    X'000003B0'
00012240 0000000000010480                  24718          DC    ADL8(@DATA)
00012248 00000000                          24719          DC    X'00000000'
0001224C 000011A4                          24720          DC    X'000011A4'
                                           24721 *
00012250 0D                                24722          DC    XL1'D'
00012251 000000                            24723          DC    AL3(0)
00012254 00000A50                          24724          DC    AL4(2640)
00012258 00000000                          24725          DC    4X'00'
0001225C 00000000                          24726          DC    Q(@@STATIC)
00012260 00000000                          24727          DC    X'00000000'
00012264 000003B8                          24728          DC    X'000003B8'
00012268 0000000000010480                  24729          DC    ADL8(@DATA)
00012270 00000000                          24730          DC    X'00000000'
00012274 000011C8                          24731          DC    X'000011C8'
                                           24732 *
00012278 0D                                24733          DC    XL1'D'
00012279 000000                            24734          DC    AL3(0)
0001227C 00000A78                          24735          DC    AL4(2680)
00012280 00000000                          24736          DC    4X'00'
00012284 00000000                          24737          DC    Q(@@STATIC)
00012288 00000000                          24738          DC    X'00000000'
0001228C 000003C0                          24739          DC    X'000003C0'
00012290 0000000000010480                  24740          DC    ADL8(@DATA)
00012298 00000000                          24741          DC    X'00000000'
0001229C 000011EA                          24742          DC    X'000011EA'
                                           24743 *
000122A0 0D                                24744          DC    XL1'D'
000122A1 000000                            24745          DC    AL3(0)
000122A4 00000AA0                          24746          DC    AL4(2720)
000122A8 00000000                          24747          DC    4X'00'
000122AC 00000000                          24748          DC    Q(@@STATIC)
000122B0 00000000                          24749          DC    X'00000000'
000122B4 000003C8                          24750          DC    X'000003C8'
000122B8 0000000000010480                  24751          DC    ADL8(@DATA)
000122C0 00000000                          24752          DC    X'00000000'
                                                                                                                           Page  494 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000122C4 000011F6                          24753          DC    X'000011F6'
                                           24754 *
000122C8 0D                                24755          DC    XL1'D'
000122C9 000000                            24756          DC    AL3(0)
000122CC 00000AC8                          24757          DC    AL4(2760)
000122D0 00000000                          24758          DC    4X'00'
000122D4 00000000                          24759          DC    Q(@@STATIC)
000122D8 00000000                          24760          DC    X'00000000'
000122DC 000003D0                          24761          DC    X'000003D0'
000122E0 0000000000010480                  24762          DC    ADL8(@DATA)
000122E8 00000000                          24763          DC    X'00000000'
000122EC 0000120E                          24764          DC    X'0000120E'
                                           24765 *
000122F0 0D                                24766          DC    XL1'D'
000122F1 000000                            24767          DC    AL3(0)
000122F4 00000AF0                          24768          DC    AL4(2800)
000122F8 00000000                          24769          DC    4X'00'
000122FC 00000000                          24770          DC    Q(@@STATIC)
00012300 00000000                          24771          DC    X'00000000'
00012304 000003D8                          24772          DC    X'000003D8'
00012308 0000000000010480                  24773          DC    ADL8(@DATA)
00012310 00000000                          24774          DC    X'00000000'
00012314 00001224                          24775          DC    X'00001224'
                                           24776 *
00012318 0D                                24777          DC    XL1'D'
00012319 000000                            24778          DC    AL3(0)
0001231C 00000B18                          24779          DC    AL4(2840)
00012320 00000000                          24780          DC    4X'00'
00012324 00000000                          24781          DC    Q(@@STATIC)
00012328 00000000                          24782          DC    X'00000000'
0001232C 000003E0                          24783          DC    X'000003E0'
00012330 0000000000010480                  24784          DC    ADL8(@DATA)
00012338 00000000                          24785          DC    X'00000000'
0001233C 0000123A                          24786          DC    X'0000123A'
                                           24787 *
00012340 0D                                24788          DC    XL1'D'
00012341 000000                            24789          DC    AL3(0)
00012344 00000B40                          24790          DC    AL4(2880)
00012348 00000000                          24791          DC    4X'00'
0001234C 00000000                          24792          DC    Q(@@STATIC)
00012350 00000000                          24793          DC    X'00000000'
00012354 000003E8                          24794          DC    X'000003E8'
00012358 0000000000010480                  24795          DC    ADL8(@DATA)
00012360 00000000                          24796          DC    X'00000000'
00012364 0000124A                          24797          DC    X'0000124A'
                                           24798 *
00012368 0D                                24799          DC    XL1'D'
00012369 000000                            24800          DC    AL3(0)
0001236C 00000B68                          24801          DC    AL4(2920)
00012370 00000000                          24802          DC    4X'00'
00012374 00000000                          24803          DC    Q(@@STATIC)
00012378 00000000                          24804          DC    X'00000000'
                                                                                                                           Page  495 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0001237C 000003F0                          24805          DC    X'000003F0'
00012380 0000000000010480                  24806          DC    ADL8(@DATA)
00012388 00000000                          24807          DC    X'00000000'
0001238C 00001260                          24808          DC    X'00001260'
                                           24809 *
00012390 0D                                24810          DC    XL1'D'
00012391 000000                            24811          DC    AL3(0)
00012394 00000B90                          24812          DC    AL4(2960)
00012398 00000000                          24813          DC    4X'00'
0001239C 00000000                          24814          DC    Q(@@STATIC)
000123A0 00000000                          24815          DC    X'00000000'
000123A4 000004C0                          24816          DC    X'000004C0'
000123A8 0000000000010480                  24817          DC    ADL8(@DATA)
000123B0 00000000                          24818          DC    X'00000000'
000123B4 00001270                          24819          DC    X'00001270'
                                           24820 *
000123B8 0D                                24821          DC    XL1'D'
000123B9 000000                            24822          DC    AL3(0)
000123BC 00000BB8                          24823          DC    AL4(3000)
000123C0 00000000                          24824          DC    4X'00'
000123C4 00000000                          24825          DC    Q(@@STATIC)
000123C8 00000000                          24826          DC    X'00000000'
000123CC 000004C8                          24827          DC    X'000004C8'
000123D0 0000000000010480                  24828          DC    ADL8(@DATA)
000123D8 00000000                          24829          DC    X'00000000'
000123DC 00001276                          24830          DC    X'00001276'
                                           24831 *
000123E0 0D                                24832          DC    XL1'D'
000123E1 000000                            24833          DC    AL3(0)
000123E4 00000BE0                          24834          DC    AL4(3040)
000123E8 00000000                          24835          DC    4X'00'
000123EC 00000000                          24836          DC    Q(@@STATIC)
000123F0 00000000                          24837          DC    X'00000000'
000123F4 000004D0                          24838          DC    X'000004D0'
000123F8 0000000000010480                  24839          DC    ADL8(@DATA)
00012400 00000000                          24840          DC    X'00000000'
00012404 0000127C                          24841          DC    X'0000127C'
                                           24842 *
00012408 0D                                24843          DC    XL1'D'
00012409 000000                            24844          DC    AL3(0)
0001240C 00000C08                          24845          DC    AL4(3080)
00012410 00000000                          24846          DC    4X'00'
00012414 00000000                          24847          DC    Q(@@STATIC)
00012418 00000000                          24848          DC    X'00000000'
0001241C 000004D8                          24849          DC    X'000004D8'
00012420 0000000000010480                  24850          DC    ADL8(@DATA)
00012428 00000000                          24851          DC    X'00000000'
0001242C 00001284                          24852          DC    X'00001284'
                                           24853 *
00012430 0D                                24854          DC    XL1'D'
00012431 000000                            24855          DC    AL3(0)
00012434 00000C30                          24856          DC    AL4(3120)
                                                                                                                           Page  496 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00012438 00000000                          24857          DC    4X'00'
0001243C 00000000                          24858          DC    Q(@@STATIC)
00012440 00000000                          24859          DC    X'00000000'
00012444 000004E0                          24860          DC    X'000004E0'
00012448 0000000000010480                  24861          DC    ADL8(@DATA)
00012450 00000000                          24862          DC    X'00000000'
00012454 00001288                          24863          DC    X'00001288'
                                           24864 *
00012458 0D                                24865          DC    XL1'D'
00012459 000000                            24866          DC    AL3(0)
0001245C 00000C58                          24867          DC    AL4(3160)
00012460 00000000                          24868          DC    4X'00'
00012464 00000000                          24869          DC    Q(@@STATIC)
00012468 00000000                          24870          DC    X'00000000'
0001246C 000004E8                          24871          DC    X'000004E8'
00012470 0000000000010480                  24872          DC    ADL8(@DATA)
00012478 00000000                          24873          DC    X'00000000'
0001247C 0000128E                          24874          DC    X'0000128E'
                                           24875 *
00012480 0D                                24876          DC    XL1'D'
00012481 000000                            24877          DC    AL3(0)
00012484 00000C80                          24878          DC    AL4(3200)
00012488 00000000                          24879          DC    4X'00'
0001248C 00000000                          24880          DC    Q(@@STATIC)
00012490 00000000                          24881          DC    X'00000000'
00012494 00000510                          24882          DC    X'00000510'
00012498 0000000000010480                  24883          DC    ADL8(@DATA)
000124A0 00000000                          24884          DC    X'00000000'
000124A4 00001296                          24885          DC    X'00001296'
                                           24886 *
000124A8 0D                                24887          DC    XL1'D'
000124A9 000000                            24888          DC    AL3(0)
000124AC 00000CA8                          24889          DC    AL4(3240)
000124B0 00000000                          24890          DC    4X'00'
000124B4 00000000                          24891          DC    Q(@@STATIC)
000124B8 00000000                          24892          DC    X'00000000'
000124BC 00000518                          24893          DC    X'00000518'
000124C0 0000000000010480                  24894          DC    ADL8(@DATA)
000124C8 00000000                          24895          DC    X'00000000'
000124CC 000012A2                          24896          DC    X'000012A2'
                                           24897 *
000124D0 0D                                24898          DC    XL1'D'
000124D1 000000                            24899          DC    AL3(0)
000124D4 00000CD0                          24900          DC    AL4(3280)
000124D8 00000000                          24901          DC    4X'00'
000124DC 00000000                          24902          DC    Q(@@STATIC)
000124E0 00000000                          24903          DC    X'00000000'
000124E4 00000520                          24904          DC    X'00000520'
000124E8 0000000000010480                  24905          DC    ADL8(@DATA)
000124F0 00000000                          24906          DC    X'00000000'
000124F4 000012AA                          24907          DC    X'000012AA'
                                           24908 *
                                                                                                                           Page  497 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000124F8 0D                                24909          DC    XL1'D'
000124F9 000000                            24910          DC    AL3(0)
000124FC 00000CF8                          24911          DC    AL4(3320)
00012500 00000000                          24912          DC    4X'00'
00012504 00000000                          24913          DC    Q(@@STATIC)
00012508 00000000                          24914          DC    X'00000000'
0001250C 00000528                          24915          DC    X'00000528'
00012510 0000000000010480                  24916          DC    ADL8(@DATA)
00012518 00000000                          24917          DC    X'00000000'
0001251C 000012B4                          24918          DC    X'000012B4'
                                           24919 *
00012520 0D                                24920          DC    XL1'D'
00012521 000000                            24921          DC    AL3(0)
00012524 00000D20                          24922          DC    AL4(3360)
00012528 00000000                          24923          DC    4X'00'
0001252C 00000000                          24924          DC    Q(@@STATIC)
00012530 00000000                          24925          DC    X'00000000'
00012534 00000630                          24926          DC    X'00000630'
00012538 0000000000010480                  24927          DC    ADL8(@DATA)
00012540 00000000                          24928          DC    X'00000000'
00012544 000012BC                          24929          DC    X'000012BC'
                                           24930 *
00012548 0D                                24931          DC    XL1'D'
00012549 000000                            24932          DC    AL3(0)
0001254C 00000D48                          24933          DC    AL4(3400)
00012550 00000000                          24934          DC    4X'00'
00012554 00000000                          24935          DC    Q(@@STATIC)
00012558 00000000                          24936          DC    X'00000000'
0001255C 00000638                          24937          DC    X'00000638'
00012560 0000000000010480                  24938          DC    ADL8(@DATA)
00012568 00000000                          24939          DC    X'00000000'
0001256C 000012C2                          24940          DC    X'000012C2'
                                           24941 *
00012570 0D                                24942          DC    XL1'D'
00012571 000000                            24943          DC    AL3(0)
00012574 00000D70                          24944          DC    AL4(3440)
00012578 00000000                          24945          DC    4X'00'
0001257C 00000000                          24946          DC    Q(@@STATIC)
00012580 00000000                          24947          DC    X'00000000'
00012584 00000640                          24948          DC    X'00000640'
00012588 0000000000010480                  24949          DC    ADL8(@DATA)
00012590 00000000                          24950          DC    X'00000000'
00012594 000012CC                          24951          DC    X'000012CC'
                                           24952 *
00012598 0D                                24953          DC    XL1'D'
00012599 000000                            24954          DC    AL3(0)
0001259C 00000D98                          24955          DC    AL4(3480)
000125A0 00000000                          24956          DC    4X'00'
000125A4 00000000                          24957          DC    Q(@@STATIC)
000125A8 00000000                          24958          DC    X'00000000'
000125AC 00000648                          24959          DC    X'00000648'
000125B0 0000000000010480                  24960          DC    ADL8(@DATA)
                                                                                                                           Page  498 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
000125B8 00000000                          24961          DC    X'00000000'
000125BC 000012D8                          24962          DC    X'000012D8'
                                           24963 *
000125C0 0D                                24964          DC    XL1'D'
000125C1 000000                            24965          DC    AL3(0)
000125C4 00000DC0                          24966          DC    AL4(3520)
000125C8 00000000                          24967          DC    4X'00'
000125CC 00000000                          24968          DC    Q(@@STATIC)
000125D0 00000000                          24969          DC    X'00000000'
000125D4 00000650                          24970          DC    X'00000650'
000125D8 0000000000010480                  24971          DC    ADL8(@DATA)
000125E0 00000000                          24972          DC    X'00000000'
000125E4 000012E4                          24973          DC    X'000012E4'
                                           24974 *
000125E8 0D                                24975          DC    XL1'D'
000125E9 000000                            24976          DC    AL3(0)
000125EC 00000DE8                          24977          DC    AL4(3560)
000125F0 00000000                          24978          DC    4X'00'
000125F4 00000000                          24979          DC    Q(@@STATIC)
000125F8 00000000                          24980          DC    X'00000000'
000125FC 00000658                          24981          DC    X'00000658'
00012600 0000000000010480                  24982          DC    ADL8(@DATA)
00012608 00000000                          24983          DC    X'00000000'
0001260C 000012F2                          24984          DC    X'000012F2'
                                           24985 *
00012610 0D                                24986          DC    XL1'D'
00012611 000000                            24987          DC    AL3(0)
00012614 00000E10                          24988          DC    AL4(3600)
00012618 00000000                          24989          DC    4X'00'
0001261C 00000000                          24990          DC    Q(@@STATIC)
00012620 00000000                          24991          DC    X'00000000'
00012624 00000660                          24992          DC    X'00000660'
00012628 0000000000010480                  24993          DC    ADL8(@DATA)
00012630 00000000                          24994          DC    X'00000000'
00012634 000012FA                          24995          DC    X'000012FA'
                                           24996 *
00012638 0D                                24997          DC    XL1'D'
00012639 000000                            24998          DC    AL3(0)
0001263C 00000E38                          24999          DC    AL4(3640)
00012640 00000000                          25000          DC    4X'00'
00012644 00000000                          25001          DC    Q(@@STATIC)
00012648 00000000                          25002          DC    X'00000000'
0001264C 00000668                          25003          DC    X'00000668'
00012650 0000000000010480                  25004          DC    ADL8(@DATA)
00012658 00000000                          25005          DC    X'00000000'
0001265C 00001304                          25006          DC    X'00001304'
                                           25007 *
00012660 0D                                25008          DC    XL1'D'
00012661 000000                            25009          DC    AL3(0)
00012664 00000E60                          25010          DC    AL4(3680)
00012668 00000000                          25011          DC    4X'00'
0001266C 00000000                          25012          DC    Q(@@STATIC)
                                                                                                                           Page  499 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
00012670 00000000                          25013          DC    X'00000000'
00012674 00000670                          25014          DC    X'00000670'
00012678 0000000000010480                  25015          DC    ADL8(@DATA)
00012680 00000000                          25016          DC    X'00000000'
00012684 00001310                          25017          DC    X'00001310'
                                           25018 *
00012688 0D                                25019          DC    XL1'D'
00012689 000000                            25020          DC    AL3(0)
0001268C 00000E88                          25021          DC    AL4(3720)
00012690 00000000                          25022          DC    4X'00'
00012694 00000000                          25023          DC    Q(@@STATIC)
00012698 00000000                          25024          DC    X'00000000'
0001269C 00000678                          25025          DC    X'00000678'
000126A0 0000000000010480                  25026          DC    ADL8(@DATA)
000126A8 00000000                          25027          DC    X'00000000'
000126AC 000012BC                          25028          DC    X'000012BC'
                                           25029 *
000126B0 0D                                25030          DC    XL1'D'
000126B1 000000                            25031          DC    AL3(0)
000126B4 00000EB0                          25032          DC    AL4(3760)
000126B8 00000000                          25033          DC    4X'00'
000126BC 00000000                          25034          DC    Q(@@STATIC)
000126C0 00000000                          25035          DC    X'00000000'
000126C4 00000680                          25036          DC    X'00000680'
000126C8 0000000000010480                  25037          DC    ADL8(@DATA)
000126D0 00000000                          25038          DC    X'00000000'
000126D4 000012F2                          25039          DC    X'000012F2'
                                           25040 *
000126D8 0D                                25041          DC    XL1'D'
000126D9 000000                            25042          DC    AL3(0)
000126DC 00000ED8                          25043          DC    AL4(3800)
000126E0 00000000                          25044          DC    4X'00'
000126E4 00000000                          25045          DC    Q(@@STATIC)
000126E8 00000000                          25046          DC    X'00000000'
000126EC 00000688                          25047          DC    X'00000688'
000126F0 0000000000010480                  25048          DC    ADL8(@DATA)
000126F8 00000000                          25049          DC    X'00000000'
000126FC 0000131A                          25050          DC    X'0000131A'
                                           25051 *
00012700 0D                                25052          DC    XL1'D'
00012701 000000                            25053          DC    AL3(0)
00012704 00000F00                          25054          DC    AL4(3840)
00012708 00000000                          25055          DC    4X'00'
0001270C 00000000                          25056          DC    Q(@@STATIC)
00012710 00000000                          25057          DC    X'00000000'
00012714 00000690                          25058          DC    X'00000690'
00012718 0000000000010480                  25059          DC    ADL8(@DATA)
00012720 00000000                          25060          DC    X'00000000'
00012724 00001328                          25061          DC    X'00001328'
                                           25062 *
00012728 0D                                25063          DC    XL1'D'
00012729 000000                            25064          DC    AL3(0)
                                                                                                                           Page  500 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
0001272C 00000F28                          25065          DC    AL4(3880)
00012730 00000000                          25066          DC    4X'00'
00012734 00000000                          25067          DC    Q(@@STATIC)
00012738 00000000                          25068          DC    X'00000000'
0001273C 00000698                          25069          DC    X'00000698'
00012740 0000000000010480                  25070          DC    ADL8(@DATA)
00012748 00000000                          25071          DC    X'00000000'
0001274C 0000132E                          25072          DC    X'0000132E'
                                           25073 *
00012750 0D                                25074          DC    XL1'D'
00012751 000000                            25075          DC    AL3(0)
00012754 00000F50                          25076          DC    AL4(3920)
00012758 00000000                          25077          DC    4X'00'
0001275C 00000000                          25078          DC    Q(@@STATIC)
00012760 00000000                          25079          DC    X'00000000'
00012764 000006A0                          25080          DC    X'000006A0'
00012768 0000000000010480                  25081          DC    ADL8(@DATA)
00012770 00000000                          25082          DC    X'00000000'
00012774 0000133C                          25083          DC    X'0000133C'
                                           25084 *
00012778 0D                                25085          DC    XL1'D'
00012779 000000                            25086          DC    AL3(0)
0001277C 00000F78                          25087          DC    AL4(3960)
00012780 00000000                          25088          DC    4X'00'
00012784 00000000                          25089          DC    Q(@@STATIC)
00012788 00000000                          25090          DC    X'00000000'
0001278C 000006A8                          25091          DC    X'000006A8'
00012790 0000000000010480                  25092          DC    ADL8(@DATA)
00012798 00000000                          25093          DC    X'00000000'
0001279C 00001348                          25094          DC    X'00001348'
                                           25095 *
000127A0 0D                                25096          DC    XL1'D'
000127A1 000000                            25097          DC    AL3(0)
000127A4 00000FA0                          25098          DC    AL4(4000)
000127A8 00000000                          25099          DC    4X'00'
000127AC 00000000                          25100          DC    Q(@@STATIC)
000127B0 00000000                          25101          DC    X'00000000'
000127B4 000006B0                          25102          DC    X'000006B0'
000127B8 0000000000010480                  25103          DC    ADL8(@DATA)
000127C0 00000000                          25104          DC    X'00000000'
000127C4 0000135E                          25105          DC    X'0000135E'
                                           25106 *
000127C8 0D                                25107          DC    XL1'D'
000127C9 000000                            25108          DC    AL3(0)
000127CC 00000FC8                          25109          DC    AL4(4040)
000127D0 00000000                          25110          DC    4X'00'
000127D4 00000000                          25111          DC    Q(@@STATIC)
000127D8 00000000                          25112          DC    X'00000000'
000127DC 000006B8                          25113          DC    X'000006B8'
000127E0 0000000000010480                  25114          DC    ADL8(@DATA)
000127E8 00000000                          25115          DC    X'00000000'
000127EC 0000136E                          25116          DC    X'0000136E'
                                                                                                                           Page  501 
  Active Usings: None
  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement                                    DASM V1.95.14 2021/04/29 12:43 
                                           25117 *
000127F0 0D                                25118          DC    XL1'D'
000127F1 000000                            25119          DC    AL3(0)
000127F4 00000FF0                          25120          DC    AL4(4080)
000127F8 00000000                          25121          DC    4X'00'
000127FC 00000000                          25122          DC    Q(@@STATIC)
00012800 00000000                          25123          DC    X'00000000'
00012804 000006C0                          25124          DC    X'000006C0'
00012808 0000000000010480                  25125          DC    ADL8(@DATA)
00012810 00000000                          25126          DC    X'00000000'
00012814 00001382                          25127          DC    X'00001382'
                                           25128 *
00012818 0D                                25129          DC    XL1'D'
00012819 000000                            25130          DC    AL3(0)
0001281C 00001018                          25131          DC    AL4(4120)
00012820 00000000                          25132          DC    4X'00'
00012824 00000000                          25133          DC    Q(@@STATIC)
00012828 00000000                          25134          DC    X'00000000'
0001282C 000006C8                          25135          DC    X'000006C8'
00012830 0000000000010480                  25136          DC    ADL8(@DATA)
00012838 00000000                          25137          DC    X'00000000'
0001283C 00001392                          25138          DC    X'00001392'
                                           25139 *
00012840 0D                                25140          DC    XL1'D'
00012841 000000                            25141          DC    AL3(0)
00012844 00000000                          25142          DC    AL4(0)
00012848 00000000                          25143          DC    4X'00'
0001284C 00000000                          25144          DC    Q(@@STATIC)
00012850 00000000                          25145          DC    X'00000000'
00012854 000006D0                          25146          DC    X'000006D0'
00012858 0000000000010480                  25147          DC    ADL8(@DATA)
00012860 00000000                          25148          DC    X'00000000'
00012864 000012CC                          25149          DC    X'000012CC'
                                           25150 *
                                           25151          EXTRN @@ALLOCA
                                           25152          END
                                                 Relocation Dictionary                                                     Page  502 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 00000020   A 4      +
 00000002 00000002 00000048   A 4      +
 00000002 00000002 00000050   A 4      +
 00000002 00000038 00000138   A 4      +
 00000002 0000003A 00000140   A 4      +
 00000002 00000002 00000168   A 4      +
 00000002 00000002 00000190   A 4      +
 00000002 00000002 00000198   A 4      +
 00000002 00000038 00000280   A 4      +
 00000002 0000003A 00000288   A 4      +
 00000002 00000002 000002B0   A 4      +
 00000002 00000002 000002D8   A 4      +
 00000002 00000002 000002E0   A 4      +
 00000002 00000038 000003B8   A 4      +
 00000002 0000003A 000003C0   A 4      +
 00000002 00000002 000003F0   A 4      +
 00000002 00000002 00000418   A 4      +
 00000002 00000002 00000420   A 4      +
 00000002 00000053 000004F0   A 4      +
 00000002 00000005 000004F8   A 4      +
 00000002 00000002 00000570   A 4      +
 00000002 00000002 00000598   A 4      +
 00000002 00000002 000005A0   A 4      +
 00000002 0000004E 00000668   A 4      +
 00000002 00000002 00000670   A 4      +
 00000002 00000005 00000678   A 4      +
 00000002 00000002 000006E8   A 4      +
 00000002 00000002 00000710   A 4      +
 00000002 00000002 00000718   A 4      +
 00000002 00000029 00000820   A 4      +
 00000002 00000008 00000828   A 4      +
 00000002 00000058 00000830   A 4      +
 00000002 00000058 00000838   A 4      +
 00000002 00000002 00000858   A 4      +
 00000002 00000002 00000880   A 4      +
 00000002 00000002 00000888   A 4      +
 00000002 00000030 00000988   A 4      +
 00000002 00000008 00000990   A 4      +
 00000002 00000058 00000998   A 4      +
 00000002 00000058 000009A0   A 4      +
 00000002 00000002 000009C0   A 4      +
 00000002 00000002 000009E8   A 4      +
 00000002 00000002 000009F0   A 4      +
 00000002 00000036 00000B00   A 4      +
 00000002 00000008 00000B08   A 4      +
 00000002 00000058 00000B10   A 4      +
 00000002 00000058 00000B18   A 4      +
 00000002 00000002 00000B38   A 4      +
 00000002 00000002 00000B60   A 4      +
 00000002 00000002 00000B68   A 4      +
 00000002 0000002C 00000C20   A 4      +
 00000002 00000002 00000C40   A 4      +
 00000002 00000002 00000C68   A 4      +
                                                 Relocation Dictionary                                                     Page  503 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 00000C70   A 4      +
 00000002 00000050 00000D70   A 4      +
 00000002 00000008 00000D78   A 4      +
 00000002 00000058 00000D80   A 4      +
 00000002 00000058 00000D88   A 4      +
 00000002 00000002 00000DB0   A 4      +
 00000002 00000002 00000DD8   A 4      +
 00000002 00000002 00000DE0   A 4      +
 00000002 00000002 00000EF0   A 4      +
 00000002 00000058 00000EF8   A 4      +
 00000002 00000008 00000F00   A 4      +
 00000002 00000058 00000F08   A 4      +
 00000002 00000002 00000F28   A 4      +
 00000002 00000002 00000F50   A 4      +
 00000002 00000002 00000F58   A 4      +
 00000002 00000037 00001028   A 4      +
 00000002 00000002 00001078   A 4      +
 00000002 00000002 00001080   A 4      +
 00000002 00000002 00001118   A 4      +
 00000002 00000002 00001120   A 4      +
 00000002 00000002 00001198   A 4      +
 00000002 00000002 000011A0   A 4      +
 00000002 00000002 00001240   A 4      +
 00000002 00000002 00001248   A 4      +
 00000002 00000002 000012D0   A 4      +
 00000002 00000002 000012F8   A 4      +
 00000002 00000002 00001300   A 4      +
 00000002 00000057 000013DC   Q 4      +
 00000002 00000027 000013E0   A 4      +
 00000002 00000058 000013E8   A 4      +
 00000002 00000002 00001470   A 4      +
 00000002 00000002 00001498   A 4      +
 00000002 00000002 000014A0   A 4      +
 00000002 00000002 00001558   A 4      +
 00000002 00000002 00001580   A 4      +
 00000002 00000002 000015A8   A 4      +
 00000002 00000002 000015B0   A 4      +
 00000002 00000002 00001620   A 4      +
 00000002 00000002 00001768   A 4      +
 00000002 00000002 00001790   A 4      +
 00000002 00000002 00001798   A 4      +
 00000002 00000002 00001860   A 4      +
 00000002 00000002 000018B8   A 4      +
 00000002 00000002 000018C0   A 4      +
 00000002 00000002 000019E0   A 4      +
 00000002 00000002 000019E8   A 4      +
 00000002 00000002 00001AC8   A 4      +
 00000002 00000002 00001AF0   A 4      +
 00000002 00000002 00001AF8   A 4      +
 00000002 00000010 00001BD0   A 4      +
 00000002 00000014 00001BD8   A 4      +
 00000002 00000002 00001C00   A 4      +
 00000002 00000002 00001C28   A 4      +
                                                 Relocation Dictionary                                                     Page  504 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 00001C30   A 4      +
 00000002 00000010 00001D18   A 4      +
 00000002 00000014 00001D20   A 4      +
 00000002 00000002 00001D48   A 4      +
 00000002 00000002 00001D70   A 4      +
 00000002 00000002 00001D78   A 4      +
 00000002 00000002 00001EF8   A 4      +
 00000002 0000002A 00001F00   A 4      +
 00000002 00000010 00001F08   A 4      +
 00000002 00000051 00001F10   A 4      +
 00000002 00000058 00001F18   A 4      +
 00000002 00000058 00001F20   A 4      +
 00000002 00000014 00001F28   A 4      +
 00000002 00000023 00001F30   A 4      +
 00000002 00000002 00001F60   A 4      +
 00000002 00000002 00001F88   A 4      +
 00000002 00000002 00001F90   A 4      +
 00000002 00000002 00002050   A 4      +
 00000002 00000002 00002078   A 4      +
 00000002 00000002 000020A0   A 4      +
 00000002 00000002 000020A8   A 4      +
 00000002 00000010 000021A8   A 4      +
 00000002 00000002 000021B0   A 4      +
 00000002 00000014 000021B8   A 4      +
 00000002 00000002 000021E0   A 4      +
 00000002 00000002 00002208   A 4      +
 00000002 00000002 00002210   A 4      +
 00000002 00000004 000022C0   A 4      +
 00000002 00000002 000023B8   A 4      +
 00000002 00000002 000023C0   A 4      +
 00000002 00000002 00002440   A 4      +
 00000002 00000002 00002468   A 4      +
 00000002 00000002 00002470   A 4      +
 00000002 00000002 00002508   A 4      +
 00000002 00000002 000026C8   A 4      +
 00000002 00000002 000026F0   A 4      +
 00000002 00000002 000026F8   A 4      +
 00000002 00000010 000027B8   A 4      +
 00000002 00000014 000027C0   A 4      +
 00000002 00000013 000027C8   A 4      +
 00000002 00000002 000027D0   A 4      +
 00000002 00000002 000027D8   A 4      +
 00000002 00000016 000027E0   A 4      +
 00000002 00000002 000027E8   A 4      +
 00000002 00000002 000027F0   A 4      +
 00000002 00000002 000027F8   A 4      +
 00000002 00000002 00002980   A 4      +
 00000002 00000002 000029A8   A 4      +
 00000002 00000002 000029B0   A 4      +
 00000002 00000002 00002A90   A 4      +
 00000002 00000002 00002AE0   A 4      +
 00000002 00000002 00002AE8   A 4      +
 00000002 00000002 00002B30   A 4      +
                                                 Relocation Dictionary                                                     Page  505 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 00002B58   A 4      +
 00000002 00000002 00002B60   A 4      +
 00000002 00000019 00002BCC   Q 4      +
 00000002 00000002 00002CB0   A 4      +
 00000002 00000002 00002CB8   A 4      +
 00000002 00000002 00002D00   A 4      +
 00000002 00000002 00002D28   A 4      +
 00000002 00000002 00002D30   A 4      +
 00000002 00000002 00002E28   A 4      +
 00000002 00000002 00002E30   A 4      +
 00000002 00000002 00002E38   A 4      +
 00000002 00000002 00002E60   A 4      +
 00000002 00000002 00002E88   A 4      +
 00000002 00000002 00002E90   A 4      +
 00000002 00000007 00002FB0   A 4      +
 00000002 00000002 00002FB8   A 4      +
 00000002 00000002 00002FE0   A 4      +
 00000002 00000002 00003008   A 4      +
 00000002 00000002 00003010   A 4      +
 00000002 00000051 00003140   A 4      +
 00000002 00000058 00003148   A 4      +
 00000002 00000058 00003150   A 4      +
 00000002 00000009 00003158   A 4      +
 00000002 00000002 00003188   A 4      +
 00000002 00000002 000031B0   A 4      +
 00000002 00000002 000031B8   A 4      +
 00000002 00000002 00003280   A 4      +
 00000002 00000002 000032B0   A 4      +
 00000002 00000002 000032D8   A 4      +
 00000002 00000002 000032E0   A 4      +
 00000002 00000002 000033B0   A 4      +
 00000002 00000002 000033E0   A 4      +
 00000002 00000002 00003408   A 4      +
 00000002 00000002 00003410   A 4      +
 00000002 00000002 000034E8   A 4      +
 00000002 00000002 00003550   A 4      +
 00000002 00000002 00003558   A 4      +
 00000002 00000002 00003620   A 4      +
 00000002 00000002 00003628   A 4      +
 00000002 00000002 000036B0   A 4      +
 00000002 00000002 000036D8   A 4      +
 00000002 00000002 000036E0   A 4      +
 00000002 00000008 00003760   A 4      +
 00000002 00000058 00003768   A 4      +
 00000002 00000058 00003770   A 4      +
 00000002 00000002 00003778   A 4      +
 00000002 00000002 000038F0   A 4      +
 00000002 00000002 00003918   A 4      +
 00000002 00000002 00003920   A 4      +
 00000002 00000008 00003998   A 4      +
 00000002 00000058 000039A0   A 4      +
 00000002 00000058 000039A8   A 4      +
 00000002 00000002 000039B0   A 4      +
                                                 Relocation Dictionary                                                     Page  506 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 000039C0   A 4      +
 00000002 00000056 000039C8   A 4      +
 00000002 00000002 00003D80   A 4      +
 00000002 00000002 00003D88   A 4      +
 00000002 00000002 00003E70   A 4      +
 00000002 00000002 00003E98   A 4      +
 00000002 00000002 00003EA0   A 4      +
 00000002 00000048 00003F18   A 4      +
 00000002 00000020 00003F20   A 4      +
 00000002 00000002 00003F28   A 4      +
 00000002 00000051 00003F30   A 4      +
 00000002 00000058 00003F38   A 4      +
 00000002 00000058 00003F40   A 4      +
 00000002 00000027 00003F48   A 4      +
 00000002 00000010 00003F50   A 4      +
 00000002 00000002 00003F58   A 4      +
 00000002 00000014 00003F60   A 4      +
 00000002 00000002 00003F68   A 4      +
 00000002 00000002 00003F70   A 4      +
 00000002 00000056 00003F78   A 4      +
 00000002 00000002 00003F88   A 4      +
 00000002 00000042 00003F90   A 4      +
 00000002 00000002 00003F98   A 4      +
 00000002 00000002 000046E8   A 4      +
 00000002 00000002 000046F0   A 4      +
 00000002 00000002 00004760   A 4      +
 00000002 00000002 00004788   A 4      +
 00000002 00000002 00004790   A 4      +
 00000002 00000002 00004810   A 4      +
 00000002 00000002 00004818   A 4      +
 00000002 0000001B 00004820   A 4      +
 00000002 00000002 00004828   A 4      +
 00000002 00000002 00004988   A 4      +
 00000002 00000002 000049B0   A 4      +
 00000002 00000002 000049B8   A 4      +
 00000002 00000002 00004A50   A 4      +
 00000002 00000002 00004A58   A 4      +
 00000002 00000002 00004B10   A 4      +
 00000002 00000002 00004B38   A 4      +
 00000002 00000002 00004B40   A 4      +
 00000002 00000002 00004BB0   A 4      +
 00000002 00000002 00004C70   A 4      +
 00000002 00000002 00004C98   A 4      +
 00000002 00000002 00004CA0   A 4      +
 00000002 00000002 00004D30   A 4      +
 00000002 00000002 00004D38   A 4      +
 00000002 00000002 00004D48   A 4      +
 00000002 00000002 00004D50   A 4      +
 00000002 00000056 00004D58   A 4      +
 00000002 00000058 00004D60   A 4      +
 00000002 00000002 00004FD8   A 4      +
 00000002 00000002 00005000   A 4      +
 00000002 00000002 00005008   A 4      +
                                                 Relocation Dictionary                                                     Page  507 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 00005070   A 4      +
 00000002 00000002 00005078   A 4      +
 00000002 00000002 00005080   A 4      +
 00000002 00000002 00005178   A 4      +
 00000002 00000002 000051A0   A 4      +
 00000002 00000002 000051A8   A 4      +
 00000002 00000002 000052C0   A 4      +
 00000002 00000002 00005320   A 4      +
 00000002 00000002 00005328   A 4      +
 00000002 00000002 000053B8   A 4      +
 00000002 00000002 000053E0   A 4      +
 00000002 00000002 000053E8   A 4      +
 00000002 00000002 00005450   A 4      +
 00000002 00000002 00005458   A 4      +
 00000002 00000002 000055A0   A 4      +
 00000002 00000002 000055C8   A 4      +
 00000002 00000002 000055D0   A 4      +
 00000002 00000002 000056A8   A 4      +
 00000002 00000002 000056B0   A 4      +
 00000002 00000002 000056B8   A 4      +
 00000002 00000056 000056C0   A 4      +
 00000002 00000058 000056C8   A 4      +
 00000002 00000002 00005880   A 4      +
 00000002 00000002 00005888   A 4      +
 00000002 00000002 00005968   A 4      +
 00000002 00000002 00005970   A 4      +
 00000002 00000002 00005A98   A 4      +
 00000002 00000002 00005AC0   A 4      +
 00000002 00000002 00005AC8   A 4      +
 00000002 00000002 00005BA8   A 4      +
 00000002 00000008 00005BB0   A 4      +
 00000002 00000058 00005BB8   A 4      +
 00000002 00000058 00005BC0   A 4      +
 00000002 00000002 00005BC8   A 4      +
 00000002 00000002 00005C78   A 4      +
 00000002 00000002 00005CA0   A 4      +
 00000002 00000002 00005CA8   A 4      +
 00000002 00000002 00005D38   A 4      +
 00000002 00000002 00005D40   A 4      +
 00000002 00000002 00005DF8   A 4      +
 00000002 00000002 00005E20   A 4      +
 00000002 00000002 00005E28   A 4      +
 00000002 00000002 00005F00   A 4      +
 00000002 00000002 00005F08   A 4      +
 00000002 00000002 00005FA8   A 4      +
 00000002 00000002 00005FD0   A 4      +
 00000002 00000002 00005FD8   A 4      +
 00000002 00000058 00006040   A 4      +
 00000002 00000008 00006048   A 4      +
 00000002 00000058 00006050   A 4      +
 00000002 00000002 00006160   A 4      +
 00000002 00000002 00006188   A 4      +
 00000002 00000002 00006190   A 4      +
                                                 Relocation Dictionary                                                     Page  508 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000058 000061F8   A 4      +
 00000002 00000008 00006200   A 4      +
 00000002 00000058 00006208   A 4      +
 00000002 00000002 00006350   A 4      +
 00000002 00000002 00006378   A 4      +
 00000002 00000002 00006380   A 4      +
 00000002 00000058 000063E8   A 4      +
 00000002 00000008 000063F0   A 4      +
 00000002 00000058 000063F8   A 4      +
 00000002 00000002 00006510   A 4      +
 00000002 00000002 00006538   A 4      +
 00000002 00000002 00006540   A 4      +
 00000002 0000004D 000065A8   A 4      +
 00000002 00000058 000065B0   A 4      +
 00000002 00000008 000065B8   A 4      +
 00000002 00000058 000065C0   A 4      +
 00000002 00000002 00006788   A 4      +
 00000002 00000002 000067B0   A 4      +
 00000002 00000002 000067B8   A 4      +
 00000002 00000002 00006998   A 4      +
 00000002 00000002 000069D0   A 4      +
 00000002 00000002 000069F8   A 4      +
 00000002 00000002 00006A00   A 4      +
 00000002 00000040 00006B88   A 4      +
 00000002 00000056 00006B90   A 4      +
 00000002 00000058 00006B98   A 4      +
 00000002 00000043 00006BA0   A 4      +
 00000002 0000003B 00006BA8   A 4      +
 00000002 0000004B 00006BB0   A 4      +
 00000002 00000002 00006BB8   A 4      +
 00000002 00000042 00006BC0   A 4      +
 00000002 00000002 00006BC8   A 4      +
 00000002 00000033 00006BD0   A 4      +
 00000002 00000002 00006BD8   A 4      +
 00000002 00000002 00006D98   A 4      +
 00000002 00000002 00006DC0   A 4      +
 00000002 00000002 00006DC8   A 4      +
 00000002 00000002 00007048   A 4      +
 00000002 00000002 00007050   A 4      +
 00000002 00000002 00007058   A 4      +
 00000002 00000002 00007060   A 4      +
 00000002 00000002 00007068   A 4      +
 00000002 00000040 00007070   A 4      +
 00000002 00000056 00007078   A 4      +
 00000002 00000058 00007080   A 4      +
 00000002 0000001E 00007088   A 4      +
 00000002 0000004A 00007090   A 4      +
 00000002 00000002 00007098   A 4      +
 00000002 00000002 000070D8   A 4      +
 00000002 00000002 00007100   A 4      +
 00000002 00000002 00007108   A 4      +
 00000002 00000046 000072F0   A 4      +
 00000002 00000002 000072F8   A 4      +
                                                 Relocation Dictionary                                                     Page  509 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000012 00007300   A 4      +
 00000002 0000002F 00007308   A 4      +
 00000002 00000040 00007310   A 4      +
 00000002 00000056 00007318   A 4      +
 00000002 00000058 00007320   A 4      +
 00000002 00000002 00007330   A 4      +
 00000002 0000001D 00007340   A 4      +
 00000002 0000001F 00007348   A 4      +
 00000002 00000002 00007350   A 4      +
 00000002 00000051 00007358   A 4      +
 00000002 00000058 00007360   A 4      +
 00000002 00000027 00007368   A 4      +
 00000002 00000010 00007370   A 4      +
 00000002 00000002 00007378   A 4      +
 00000002 00000014 00007380   A 4      +
 00000002 00000002 00007388   A 4      +
 00000002 00000002 00007390   A 4      +
 00000002 00000051 00007B98   A 4      +
 00000002 00000058 00007BA0   A 4      +
 00000002 00000058 00007BA8   A 4      +
 00000002 00000027 00007BB0   A 4      +
 00000002 00000010 00007BB8   A 4      +
 00000002 00000002 00007BC0   A 4      +
 00000002 00000014 00007BC8   A 4      +
 00000002 00000002 00007BD0   A 4      +
 00000002 00000002 00007BD8   A 4      +
 00000002 00000002 00007BE0   A 4      +
 00000002 00000056 00007BE8   A 4      +
 00000002 00000040 00007BF8   A 4      +
 00000002 0000001F 00007C00   A 4      +
 00000002 00000058 00008630   A 4      +
 00000002 00000002 00008638   A 4      +
 00000002 00000056 00008640   A 4      +
 00000002 00000058 00008648   A 4      +
 00000002 00000010 00008650   A 4      +
 00000002 00000002 00008658   A 4      +
 00000002 00000014 00008660   A 4      +
 00000002 00000040 00008668   A 4      +
 00000002 00000012 00008678   A 4      +
 00000002 00000002 00008680   A 4      +
 00000002 0000001D 00008688   A 4      +
 00000002 0000001F 00008690   A 4      +
 00000002 00000002 00008698   A 4      +
 00000002 00000051 000086A0   A 4      +
 00000002 00000027 000086A8   A 4      +
 00000002 00000002 000086B0   A 4      +
 00000002 00000022 000086B8   A 4      +
 00000002 00000010 00008F20   A 4      +
 00000002 00000002 00008F28   A 4      +
 00000002 00000014 00008F30   A 4      +
 00000002 00000002 00008F38   A 4      +
 00000002 00000002 00008F40   A 4      +
 00000002 00000002 00008F48   A 4      +
                                                 Relocation Dictionary                                                     Page  510 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000058 00008F50   A 4      +
 00000002 00000056 00008F58   A 4      +
 00000002 00000058 00008F60   A 4      +
 00000002 00000022 00008F70   A 4      +
 00000002 00000051 00008F78   A 4      +
 00000002 00000027 00008F80   A 4      +
 00000002 0000001F 00008F88   A 4      +
 00000002 00000056 000098C0   A 4      +
 00000002 00000058 000098C8   A 4      +
 00000002 00000058 000098D0   A 4      +
 00000002 00000002 000099A8   A 4      +
 00000002 00000002 000099D0   A 4      +
 00000002 00000002 000099D8   A 4      +
 00000002 00000046 00009B18   A 4      +
 00000002 00000002 00009B20   A 4      +
 00000002 00000002 00009B28   A 4      +
 00000002 00000002 00009B68   A 4      +
 00000002 00000002 00009B90   A 4      +
 00000002 00000002 00009B98   A 4      +
 00000002 00000002 00009CE8   A 4      +
 00000002 00000040 00009CF0   A 4      +
 00000002 00000056 00009CF8   A 4      +
 00000002 00000058 00009D00   A 4      +
 00000002 00000002 00009D08   A 4      +
 00000002 00000002 00009F60   A 4      +
 00000002 00000002 00009F88   A 4      +
 00000002 00000002 00009F90   A 4      +
 00000002 00000002 0000A070   A 4      +
 00000002 00000002 0000A0A8   A 4      +
 00000002 00000002 0000A0D0   A 4      +
 00000002 00000002 0000A0D8   A 4      +
 00000002 00000002 0000A150   A 4      +
 00000002 0000003C 0000A158   A 4      +
 00000002 00000002 0000A160   A 4      +
 00000002 0000002E 0000A168   A 4      +
 00000002 00000002 0000A170   A 4      +
 00000002 0000004B 0000A178   A 4      +
 00000002 00000002 0000A180   A 4      +
 00000002 00000042 0000A188   A 4      +
 00000002 00000002 0000A190   A 4      +
 00000002 00000002 0000A3C8   A 4      +
 00000002 00000002 0000A3F0   A 4      +
 00000002 00000002 0000A3F8   A 4      +
 00000002 00000002 0000A460   A 4      +
 00000002 00000002 0000A500   A 4      +
 00000002 00000002 0000A528   A 4      +
 00000002 00000002 0000A530   A 4      +
 00000002 00000002 0000A5C0   A 4      +
 00000002 00000002 0000A5C8   A 4      +
 00000002 00000058 0000A5D0   A 4      +
 00000002 00000002 0000A5D8   A 4      +
 00000002 00000002 0000A5E0   A 4      +
 00000002 00000042 0000A5E8   A 4      +
                                                 Relocation Dictionary                                                     Page  511 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 0000A5F0   A 4      +
 00000002 00000002 0000A7A0   A 4      +
 00000002 00000002 0000A7C8   A 4      +
 00000002 00000002 0000A7D0   A 4      +
 00000002 00000002 0000A8C8   A 4      +
 00000002 00000002 0000A908   A 4      +
 00000002 00000002 0000A930   A 4      +
 00000002 00000002 0000A938   A 4      +
 00000002 00000035 0000A9C8   A 4      +
 00000002 00000031 0000A9D0   A 4      +
 00000002 00000056 0000A9D8   A 4      +
 00000002 00000058 0000A9E0   A 4      +
 00000002 00000032 0000A9E8   A 4      +
 00000002 00000002 0000A9F0   A 4      +
 00000002 0000004C 0000A9F8   A 4      +
 00000002 00000002 0000AA00   A 4      +
 00000002 00000002 0000AA08   A 4      +
 00000002 00000040 0000AA10   A 4      +
 00000002 00000002 0000ACC8   A 4      +
 00000002 00000002 0000ACF0   A 4      +
 00000002 00000002 0000ACF8   A 4      +
 00000002 0000004F 0000AD58   A 4      +
 00000002 00000002 0000AE08   A 4      +
 00000002 00000002 0000AE30   A 4      +
 00000002 00000002 0000AE38   A 4      +
 00000002 0000002B 0000AF68   A 4      +
 00000002 00000005 0000AF70   A 4      +
 00000002 00000052 0000AF78   A 4      +
 00000002 00000056 0000AF80   A 4      +
 00000002 00000058 0000AF88   A 4      +
 00000002 00000034 0000AF90   A 4      +
 00000002 00000002 0000B0F8   A 4      +
 00000002 00000002 0000B120   A 4      +
 00000002 00000002 0000B128   A 4      +
 00000002 0000000E 0000B240   A 4      +
 00000002 00000058 0000B248   A 4      +
 00000002 00000011 0000B250   A 4      +
 00000002 00000025 0000B258   A 4      +
 00000002 00000002 0000B260   A 4      +
 00000002 0000000B 0000B268   Q 4      +
 00000002 00000002 0000B270   A 4      +
 00000002 00000002 0000B278   A 4      +
 00000002 00000044 0000B280   A 4      +
 00000002 00000002 0000B288   A 4      +
 00000002 00000045 0000B298   A 4      +
 00000002 00000002 0000B2A0   A 4      +
 00000002 00000026 0000B2A8   A 4      +
 00000002 00000002 0000B2B0   A 4      +
 00000002 00000002 0000B2B8   A 4      +
 00000002 00000002 0000B428   A 4      +
 00000002 00000002 0000B450   A 4      +
 00000002 00000002 0000B458   A 4      +
 00000002 00000058 0000B5D0   A 4      +
                                                 Relocation Dictionary                                                     Page  512 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000008 0000B5D8   A 4      +
 00000002 00000058 0000B5E0   A 4      +
 00000002 00000054 0000B5E8   A 4      +
 00000002 00000005 0000B5F0   A 4      +
 00000002 00000052 0000B5F8   A 4      +
 00000002 00000056 0000B600   A 4      +
 00000002 00000002 0000B608   A 4      +
 00000002 00000002 0000B6B0   A 4      +
 00000002 00000002 0000B6D8   A 4      +
 00000002 00000002 0000B6E0   A 4      +
 00000002 00000002 0000B740   A 4      +
 00000002 00000002 0000B7F0   A 4      +
 00000002 00000002 0000B818   A 4      +
 00000002 00000002 0000B820   A 4      +
 00000002 00000002 0000B8F8   A 4      +
 00000002 00000002 0000B930   A 4      +
 00000002 00000002 0000B958   A 4      +
 00000002 00000002 0000B960   A 4      +
 00000002 00000002 0000BA20   A 4      +
 00000002 00000058 0000BA28   A 4      +
 00000002 00000002 0000BA30   A 4      +
 00000002 00000035 0000BA38   A 4      +
 00000002 00000002 0000BA40   A 4      +
 00000002 00000002 0000BA48   A 4      +
 00000002 00000002 0000BB88   A 4      +
 00000002 00000002 0000BBB0   A 4      +
 00000002 00000002 0000BBB8   A 4      +
 00000002 00000024 0000BCF0   A 4      +
 00000002 00000005 0000BCF8   A 4      +
 00000002 00000052 0000BD00   A 4      +
 00000002 00000056 0000BD08   A 4      +
 00000002 00000058 0000BD10   A 4      +
 00000002 00000055 0000BD18   A 4      +
 00000002 00000040 0000BD20   A 4      +
 00000002 00000035 0000BD28   A 4      +
 00000002 00000003 0000BD30   A 4      +
 00000002 00000008 0000BD38   A 4      +
 00000002 00000058 0000BD40   A 4      +
 00000002 00000006 0000BD48   A 4      +
 00000002 00000002 0000BD50   A 4      +
 00000002 00000027 0000BD58   A 4      +
 00000002 00000002 0000BD60   A 4      +
 00000002 00000002 0000BD68   A 4      +
 00000002 00000002 0000C1E8   A 4      +
 00000002 00000002 0000C1F0   A 4      +
 00000002 00000058 0000C250   A 4      +
 00000002 00000002 0000C2D8   A 4      +
 00000002 00000002 0000C300   A 4      +
 00000002 00000002 0000C308   A 4      +
 00000002 00000002 0000C388   A 4      +
 00000002 00000002 0000C478   A 4      +
 00000002 00000002 0000C480   A 4      +
 00000002 00000002 0000C540   A 4      +
                                                 Relocation Dictionary                                                     Page  513 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 0000C568   A 4      +
 00000002 00000002 0000C570   A 4      +
 00000002 0000005D 0000C5F0   A 4      +
 00000002 00000002 0000C600   A 4      +
 00000002 00000002 0000C608   A 4      +
 00000002 00000002 0000C610   A 4      +
 00000002 00000058 0000C618   A 4      +
 00000002 00000008 0000C620   A 4      +
 00000002 00000058 0000C628   A 4      +
 00000002 00000002 0000C818   A 4      +
 00000002 00000002 0000C840   A 4      +
 00000002 00000002 0000C848   A 4      +
 00000002 00000002 0000C8D8   A 4      +
 00000002 00000002 0000C8E0   A 4      +
 00000002 00000002 0000C8E8   A 4      +
 00000002 00000002 0000C8F0   A 4      +
 00000002 00000002 0000C8F8   A 4      +
 00000002 00000002 0000CA30   A 4      +
 00000002 00000002 0000CA58   A 4      +
 00000002 00000002 0000CA60   A 4      +
 00000002 0000004D 0000CAE0   A 4      +
 00000002 00000002 0000CBF0   A 4      +
 00000002 00000002 0000CBF8   A 4      +
 00000002 00000002 0000CC80   A 4      +
 00000002 00000002 0000CCA8   A 4      +
 00000002 00000002 0000CCB0   A 4      +
 00000002 00000002 0000CD40   A 4      +
 00000002 00000002 0000CD48   A 4      +
 00000002 00000002 0000CE10   A 4      +
 00000002 00000002 0000CE38   A 4      +
 00000002 00000002 0000CE40   A 4      +
 00000002 00000010 0000CF40   A 4      +
 00000002 00000002 0000CF48   A 4      +
 00000002 00000014 0000CF50   A 4      +
 00000002 00000002 0000CF58   A 4      +
 00000002 00000002 0000D028   A 4      +
 00000002 00000002 0000D050   A 4      +
 00000002 00000002 0000D058   A 4      +
 00000002 00000010 0000D160   A 4      +
 00000002 00000002 0000D168   A 4      +
 00000002 00000014 0000D170   A 4      +
 00000002 00000002 0000D1B0   A 4      +
 00000002 00000002 0000D1D8   A 4      +
 00000002 00000002 0000D1E0   A 4      +
 00000002 00000010 0000D2D8   A 4      +
 00000002 00000002 0000D2E0   A 4      +
 00000002 00000002 0000D2E8   A 4      +
 00000002 00000014 0000D2F0   A 4      +
 00000002 00000002 0000D3E8   A 4      +
 00000002 00000002 0000D410   A 4      +
 00000002 00000002 0000D418   A 4      +
 00000002 0000005D 0000D4A0   A 4      +
 00000002 00000002 0000D4A8   A 4      +
                                                 Relocation Dictionary                                                     Page  514 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 0000D590   A 4      +
 00000002 00000002 0000D5B8   A 4      +
 00000002 00000002 0000D5C0   A 4      +
 00000002 00000010 0000D680   A 4      +
 00000002 00000002 0000D688   A 4      +
 00000002 00000014 0000D690   A 4      +
 00000002 00000002 0000D698   A 4      +
 00000002 00000002 0000D6A0   A 4      +
 00000002 00000002 0000D828   A 4      +
 00000002 00000002 0000D850   A 4      +
 00000002 00000002 0000D858   A 4      +
 00000002 0000000D 0000D988   A 4      +
 00000002 00000002 0000D990   A 4      +
 00000002 00000015 0000D998   A 4      +
 00000002 0000000A 0000D9A0   A 4      +
 00000002 00000002 0000D9D0   A 4      +
 00000002 00000002 0000D9F8   A 4      +
 00000002 00000002 0000DA00   A 4      +
 00000002 0000000D 0000DB40   A 4      +
 00000002 00000002 0000DB48   A 4      +
 00000002 00000015 0000DB50   A 4      +
 00000002 00000018 0000DB58   A 4      +
 00000002 00000002 0000DB90   A 4      +
 00000002 00000002 0000DBB8   A 4      +
 00000002 00000002 0000DBC0   A 4      +
 00000002 0000000D 0000DCF8   A 4      +
 00000002 00000002 0000DD00   A 4      +
 00000002 00000015 0000DD08   A 4      +
 00000002 00000018 0000DD10   A 4      +
 00000002 00000002 0000DD50   A 4      +
 00000002 00000002 0000DD78   A 4      +
 00000002 00000002 0000DD80   A 4      +
 00000002 0000000D 0000DEB8   A 4      +
 00000002 00000002 0000DEC0   A 4      +
 00000002 00000015 0000DEC8   A 4      +
 00000002 00000018 0000DED0   A 4      +
 00000002 00000002 0000DF10   A 4      +
 00000002 00000002 0000DF38   A 4      +
 00000002 00000002 0000DF40   A 4      +
 00000002 0000000D 0000E088   A 4      +
 00000002 00000002 0000E090   A 4      +
 00000002 00000015 0000E098   A 4      +
 00000002 00000018 0000E0A0   A 4      +
 00000002 00000002 0000E0D8   A 4      +
 00000002 00000002 0000E100   A 4      +
 00000002 00000002 0000E108   A 4      +
 00000002 0000000D 0000E218   A 4      +
 00000002 00000015 0000E220   A 4      +
 00000002 00000018 0000E228   A 4      +
 00000002 00000002 0000E258   A 4      +
 00000002 00000002 0000E280   A 4      +
 00000002 00000002 0000E288   A 4      +
 00000002 0000000D 0000E398   A 4      +
                                                 Relocation Dictionary                                                     Page  515 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000015 0000E3A0   A 4      +
 00000002 00000018 0000E3A8   A 4      +
 00000002 00000002 0000E3E0   A 4      +
 00000002 00000002 0000E408   A 4      +
 00000002 00000002 0000E410   A 4      +
 00000002 0000000D 0000E528   A 4      +
 00000002 00000015 0000E530   A 4      +
 00000002 00000018 0000E538   A 4      +
 00000002 00000002 0000E570   A 4      +
 00000002 00000002 0000E598   A 4      +
 00000002 00000002 0000E5A0   A 4      +
 00000002 0000000D 0000E6D0   A 4      +
 00000002 00000002 0000E6D8   A 4      +
 00000002 00000015 0000E6E0   A 4      +
 00000002 00000018 0000E6E8   A 4      +
 00000002 00000002 0000E720   A 4      +
 00000002 00000002 0000E748   A 4      +
 00000002 00000002 0000E750   A 4      +
 00000002 0000000D 0000E8A0   A 4      +
 00000002 00000002 0000E8A8   A 4      +
 00000002 00000015 0000E8B0   A 4      +
 00000002 00000018 0000E8B8   A 4      +
 00000002 00000002 0000E8F0   A 4      +
 00000002 00000002 0000E918   A 4      +
 00000002 00000002 0000E920   A 4      +
 00000002 0000000D 0000EA40   A 4      +
 00000002 00000015 0000EA48   A 4      +
 00000002 00000018 0000EA50   A 4      +
 00000002 00000002 0000EA80   A 4      +
 00000002 00000002 0000EAA8   A 4      +
 00000002 00000002 0000EAB0   A 4      +
 00000002 00000002 0000EB10   A 4      +
 00000002 00000002 0000EB18   A 4      +
 00000002 00000002 0000EB20   A 4      +
 00000002 00000002 0000EB28   A 4      +
 00000002 00000002 0000EB30   A 4      +
 00000002 00000056 0000EB38   A 4      +
 00000002 00000058 0000EB40   A 4      +
 00000002 00000002 0000EB48   A 4      +
 00000002 00000002 0000EB50   A 4      +
 00000002 00000002 0000EB58   A 4      +
 00000002 00000002 0000EB60   A 4      +
 00000002 00000002 0000EB68   A 4      +
 00000002 00000002 0000EB70   A 4      +
 00000002 00000008 0000EB78   A 4      +
 00000002 00000058 0000EB80   A 4      +
 00000002 00000002 0000F268   A 4      +
 00000002 00000002 0000F290   A 4      +
 00000002 00000002 0000F298   A 4      +
 00000002 00000002 0000F308   A 4      +
 00000002 00000058 0000F310   A 4      +
 00000002 00000008 0000F318   A 4      +
 00000002 00000058 0000F320   A 4      +
                                                 Relocation Dictionary                                                     Page  516 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000013 0000F328   A 4      +
 00000002 00000002 0000F458   A 4      +
 00000002 00000002 0000F480   A 4      +
 00000002 00000002 0000F488   A 4      +
 00000002 00000002 0000F4E8   A 4      +
 00000002 00000002 0000F4F0   A 4      +
 00000002 0000003F 0000F4F8   A 4      +
 00000002 00000002 0000F500   A 4      +
 00000002 00000039 0000F508   A 4      +
 00000002 00000002 0000F510   A 4      +
 00000002 0000000D 0000F518   A 4      +
 00000002 00000002 0000F520   A 4      +
 00000002 00000002 0000F528   A 4      +
 00000002 0000003E 0000F530   A 4      +
 00000002 0000001C 0000F538   A 4      +
 00000002 00000058 0000F540   A 4      +
 00000002 00000008 0000F548   A 4      +
 00000002 00000058 0000F550   A 4      +
 00000002 00000002 0000F558   A 4      +
 00000002 00000047 0000F560   A 4      +
 00000002 00000002 0000F568   A 4      +
 00000002 0000000F 0000F570   A 4      +
 00000002 00000035 0000F578   A 4      +
 00000002 00000002 0000F8B8   A 4      +
 00000002 00000002 0000F8E0   A 4      +
 00000002 00000002 0000F8E8   A 4      +
 00000002 00000056 0000FB38   A 4      +
 00000002 00000058 0000FB40   A 4      +
 00000002 00000002 0000FB48   A 4      +
 00000002 00000008 0000FB50   A 4      +
 00000002 00000058 0000FB58   A 4      +
 00000002 00000002 0000FB60   A 4      +
 00000002 00000017 0000FB68   A 4      +
 00000002 0000000A 0000FB70   A 4      +
 00000002 0000001C 0000FB78   A 4      +
 00000002 00000002 0000FB80   A 4      +
 00000002 00000002 0000FBB0   A 4      +
 00000002 00000002 0000FBD8   A 4      +
 00000002 00000002 0000FBE0   A 4      +
 00000002 00000002 0000FCF8   A 4      +
 00000002 00000041 0000FD00   A 4      +
 00000002 00000058 0000FD08   A 4      +
 00000002 00000027 0000FD10   A 4      +
 00000002 00000002 0000FD18   A 4      +
 00000002 00000002 0000FD20   A 4      +
 00000002 0000000C 0000FD28   A 4      +
 00000002 0000002D 0000FD30   A 4      +
 00000002 00000002 0000FD38   A 4      +
 00000002 00000021 0000FD40   A 4      +
 00000002 00000058 0000FD48   A 4      +
 00000002 00000028 0000FD50   Q 4      +
 00000002 00000049 0000FD58   A 4      +
 00000002 00000002 0000FD60   A 4      +
                                                 Relocation Dictionary                                                     Page  517 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 00000002 00000002 0000FD68   A 4      +
 00000002 00000052 0000FD70   A 4      +
 00000002 00000056 0000FD78   A 4      +
 00000002 0000003D 0000FD80   A 4      +
 00000002 0000001A 0000FD88   A 4      +
 00000002 00000002 0000FD90   A 4      +
 00000002 00000005 0000FD98   A 4      +
 00000002 00000002 0000FDA0   A 4      +
 00000002 00000008 0000FDA8   A 4      +
 00000002 00000002 0000FDB0   A 4      +
 00000002 00000002 00010320   A 4      +
 00000002 00000002 00010328   A 4      +
 00000002 00000002 000103B0   A 4      +
 00000002 00000002 000103B8   A 4      +
 00000002 00000002 00010448   A 4      +
 00000002 00000002 00010450   A 4      +
 0000005C 00000057 00011834   Q 4      +
 0000005C 00000057 00011954   Q 4      +
 0000005C 00000057 00011A14   Q 4      +
 0000005C 00000057 00011A3C   Q 4      +
 0000005C 00000057 00011A64   Q 4      +
 0000005C 00000058 00011A70   A 4      +
 0000005C 00000057 00011A8C   Q 4      +
 0000005C 00000058 00011A98   A 4      +
 0000005C 00000057 00011AB4   Q 4      +
 0000005C 00000058 00011AC0   A 4      +
 0000005C 00000057 00011ADC   Q 4      +
 0000005C 00000058 00011AE8   A 4      +
 0000005C 00000057 00011B04   Q 4      +
 0000005C 00000058 00011B10   A 4      +
 0000005C 00000057 00011B2C   Q 4      +
 0000005C 00000058 00011B38   A 4      +
 0000005C 00000057 00011B54   Q 4      +
 0000005C 00000058 00011B60   A 4      +
 0000005C 00000057 00011B7C   Q 4      +
 0000005C 00000058 00011B88   A 4      +
 0000005C 00000057 00011BA4   Q 4      +
 0000005C 00000058 00011BB0   A 4      +
 0000005C 00000057 00011BCC   Q 4      +
 0000005C 00000058 00011BD8   A 4      +
 0000005C 00000057 00011BF4   Q 4      +
 0000005C 00000058 00011C00   A 4      +
 0000005C 00000057 00011C1C   Q 4      +
 0000005C 00000058 00011C28   A 4      +
 0000005C 00000057 00011C44   Q 4      +
 0000005C 00000058 00011C50   A 4      +
 0000005C 00000057 00011C6C   Q 4      +
 0000005C 00000058 00011C78   A 4      +
 0000005C 00000057 00011C94   Q 4      +
 0000005C 00000058 00011CA0   A 4      +
 0000005C 00000057 00011CBC   Q 4      +
 0000005C 00000058 00011CC8   A 4      +
 0000005C 00000057 00011CE4   Q 4      +
                                                 Relocation Dictionary                                                     Page  518 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 0000005C 00000058 00011CF0   A 4      +
 0000005C 00000057 00011D0C   Q 4      +
 0000005C 00000058 00011D18   A 4      +
 0000005C 00000057 00011D34   Q 4      +
 0000005C 00000058 00011D40   A 4      +
 0000005C 00000057 00011D5C   Q 4      +
 0000005C 00000058 00011D68   A 4      +
 0000005C 00000057 00011D84   Q 4      +
 0000005C 00000058 00011D90   A 4      +
 0000005C 00000057 00011DAC   Q 4      +
 0000005C 00000058 00011DB8   A 4      +
 0000005C 00000057 00011DD4   Q 4      +
 0000005C 00000058 00011DE0   A 4      +
 0000005C 00000057 00011DFC   Q 4      +
 0000005C 00000058 00011E08   A 4      +
 0000005C 00000057 00011E24   Q 4      +
 0000005C 00000058 00011E30   A 4      +
 0000005C 00000057 00011E4C   Q 4      +
 0000005C 00000058 00011E58   A 4      +
 0000005C 00000057 00011E74   Q 4      +
 0000005C 00000058 00011E80   A 4      +
 0000005C 00000057 00011E9C   Q 4      +
 0000005C 00000058 00011EA8   A 4      +
 0000005C 00000057 00011EC4   Q 4      +
 0000005C 00000058 00011ED0   A 4      +
 0000005C 00000057 00011EEC   Q 4      +
 0000005C 00000058 00011EF8   A 4      +
 0000005C 00000057 00011F14   Q 4      +
 0000005C 00000058 00011F20   A 4      +
 0000005C 00000057 00011F3C   Q 4      +
 0000005C 00000058 00011F48   A 4      +
 0000005C 00000057 00011F64   Q 4      +
 0000005C 00000058 00011F70   A 4      +
 0000005C 00000057 00011F8C   Q 4      +
 0000005C 00000058 00011F98   A 4      +
 0000005C 00000057 00011FB4   Q 4      +
 0000005C 00000058 00011FC0   A 4      +
 0000005C 00000057 00011FDC   Q 4      +
 0000005C 00000058 00011FE8   A 4      +
 0000005C 00000057 00012004   Q 4      +
 0000005C 00000058 00012010   A 4      +
 0000005C 00000057 0001202C   Q 4      +
 0000005C 00000058 00012038   A 4      +
 0000005C 00000057 00012054   Q 4      +
 0000005C 00000058 00012060   A 4      +
 0000005C 00000057 0001207C   Q 4      +
 0000005C 00000058 00012088   A 4      +
 0000005C 00000057 000120A4   Q 4      +
 0000005C 00000058 000120B0   A 4      +
 0000005C 00000057 000120CC   Q 4      +
 0000005C 00000058 000120D8   A 4      +
 0000005C 00000057 000120F4   Q 4      +
 0000005C 00000058 00012100   A 4      +
                                                 Relocation Dictionary                                                     Page  519 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 0000005C 00000057 0001211C   Q 4      +
 0000005C 00000058 00012128   A 4      +
 0000005C 00000057 00012144   Q 4      +
 0000005C 00000058 00012150   A 4      +
 0000005C 00000057 0001216C   Q 4      +
 0000005C 00000058 00012178   A 4      +
 0000005C 00000057 00012194   Q 4      +
 0000005C 00000058 000121A0   A 4      +
 0000005C 00000057 000121BC   Q 4      +
 0000005C 00000058 000121C8   A 4      +
 0000005C 00000057 000121E4   Q 4      +
 0000005C 00000058 000121F0   A 4      +
 0000005C 00000057 0001220C   Q 4      +
 0000005C 00000058 00012218   A 4      +
 0000005C 00000057 00012234   Q 4      +
 0000005C 00000058 00012240   A 4      +
 0000005C 00000057 0001225C   Q 4      +
 0000005C 00000058 00012268   A 4      +
 0000005C 00000057 00012284   Q 4      +
 0000005C 00000058 00012290   A 4      +
 0000005C 00000057 000122AC   Q 4      +
 0000005C 00000058 000122B8   A 4      +
 0000005C 00000057 000122D4   Q 4      +
 0000005C 00000058 000122E0   A 4      +
 0000005C 00000057 000122FC   Q 4      +
 0000005C 00000058 00012308   A 4      +
 0000005C 00000057 00012324   Q 4      +
 0000005C 00000058 00012330   A 4      +
 0000005C 00000057 0001234C   Q 4      +
 0000005C 00000058 00012358   A 4      +
 0000005C 00000057 00012374   Q 4      +
 0000005C 00000058 00012380   A 4      +
 0000005C 00000057 0001239C   Q 4      +
 0000005C 00000058 000123A8   A 4      +
 0000005C 00000057 000123C4   Q 4      +
 0000005C 00000058 000123D0   A 4      +
 0000005C 00000057 000123EC   Q 4      +
 0000005C 00000058 000123F8   A 4      +
 0000005C 00000057 00012414   Q 4      +
 0000005C 00000058 00012420   A 4      +
 0000005C 00000057 0001243C   Q 4      +
 0000005C 00000058 00012448   A 4      +
 0000005C 00000057 00012464   Q 4      +
 0000005C 00000058 00012470   A 4      +
 0000005C 00000057 0001248C   Q 4      +
 0000005C 00000058 00012498   A 4      +
 0000005C 00000057 000124B4   Q 4      +
 0000005C 00000058 000124C0   A 4      +
 0000005C 00000057 000124DC   Q 4      +
 0000005C 00000058 000124E8   A 4      +
 0000005C 00000057 00012504   Q 4      +
 0000005C 00000058 00012510   A 4      +
 0000005C 00000057 0001252C   Q 4      +
                                                 Relocation Dictionary                                                     Page  520 
  Pos.Id   Rel.Id   Address  Type   Action                                                            DASM V1.95.14 2021/04/29 12:43 
 0000005C 00000058 00012538   A 4      +
 0000005C 00000057 00012554   Q 4      +
 0000005C 00000058 00012560   A 4      +
 0000005C 00000057 0001257C   Q 4      +
 0000005C 00000058 00012588   A 4      +
 0000005C 00000057 000125A4   Q 4      +
 0000005C 00000058 000125B0   A 4      +
 0000005C 00000057 000125CC   Q 4      +
 0000005C 00000058 000125D8   A 4      +
 0000005C 00000057 000125F4   Q 4      +
 0000005C 00000058 00012600   A 4      +
 0000005C 00000057 0001261C   Q 4      +
 0000005C 00000058 00012628   A 4      +
 0000005C 00000057 00012644   Q 4      +
 0000005C 00000058 00012650   A 4      +
 0000005C 00000057 0001266C   Q 4      +
 0000005C 00000058 00012678   A 4      +
 0000005C 00000057 00012694   Q 4      +
 0000005C 00000058 000126A0   A 4      +
 0000005C 00000057 000126BC   Q 4      +
 0000005C 00000058 000126C8   A 4      +
 0000005C 00000057 000126E4   Q 4      +
 0000005C 00000058 000126F0   A 4      +
 0000005C 00000057 0001270C   Q 4      +
 0000005C 00000058 00012718   A 4      +
 0000005C 00000057 00012734   Q 4      +
 0000005C 00000058 00012740   A 4      +
 0000005C 00000057 0001275C   Q 4      +
 0000005C 00000058 00012768   A 4      +
 0000005C 00000057 00012784   Q 4      +
 0000005C 00000058 00012790   A 4      +
 0000005C 00000057 000127AC   Q 4      +
 0000005C 00000058 000127B8   A 4      +
 0000005C 00000057 000127D4   Q 4      +
 0000005C 00000058 000127E0   A 4      +
 0000005C 00000057 000127FC   Q 4      +
 0000005C 00000058 00012808   A 4      +
 0000005C 00000057 00012824   Q 4      +
 0000005C 00000058 00012830   A 4      +
 0000005C 00000057 0001284C   Q 4      +
 0000005C 00000058 00012858   A 4      +
                                                 DSECT Cross Reference                                                     Page  521 
DSECT     LENGTH    ID   DEFN                                                                         DASM V1.95.14 2021/04/29 12:43 
@AUTO#rd_atomic32_add
         000000AC  FFFFFFFF  00308
@AUTO#rd_atomic32_get
         000000AC  FFFFFFFD  00557
@AUTO#rd_atomic32_sub
         000000AC  FFFFFFFE  00435
@AUTO#rd_buf_len
         000000A8  FFFFFFF2  01871
@AUTO#rd_buf_write_pos
         000000A8  FFFFFFF3  01800
@AUTO#rd_calloc
         000000A8  FFFFFFFA  00966
@AUTO#rd_clock
         000000B8  FFFFFFF4  01705
@AUTO#rd_crc32
         000000A8  FFFFFFDC  04857
@AUTO#rd_crc32_finalize
         000000A8  FFFFFFDD  04734
@AUTO#rd_crc32_init
         000000A8  FFFFFFDF  04523
@AUTO#rd_crc32_update
         000000AC  FFFFFFDE  04657
@AUTO#rd_fd_set_nonblocking
         000000AC  FFFFFFFC  00694
@AUTO#rd_free
         000000A8  FFFFFFF7  01325
@AUTO#rd_kafka_$Api$Key2str
         000000A8  FFFFFFEF  02261
@AUTO#rd_kafka_buf_update
         000000A8  FFFFFFDA  05129
@AUTO#rd_kafka_buf_update_i32
         000000A8  FFFFFFD7  05451
@AUTO#rd_kafka_buf_write
         000000B0  FFFFFFDB  04991
@AUTO#rd_kafka_buf_write_i32
         000000A8  FFFFFFD8  05341
@AUTO#rd_kafka_buf_write_i8
         000000A8  FFFFFFD9  05234
@AUTO#rd_kafka_handle_mock_cluster
         000000A8  FFFFFF8B  23627
@AUTO#rd_kafka_mock_broker_close_all
         000000A8  FFFFFFAD  16747
@AUTO#rd_kafka_mock_broker_connections_write_out
         000000A8  FFFFFFB5  15082
@AUTO#rd_kafka_mock_broker_destroy
         000000A8  FFFFFFAB  17065
@AUTO#rd_kafka_mock_broker_find
         000000A8  FFFFFFD5  05641
@AUTO#rd_kafka_mock_broker_listen_io
         000000BC  FFFFFFAE  16627
@AUTO#rd_kafka_mock_broker_new
         000000BC  FFFFFFAA  17585
@AUTO#rd_kafka_mock_broker_push_request_error_rtts
                                                 DSECT Cross Reference                                                     Page  522 
DSECT     LENGTH    ID   DEFN                                                                         DASM V1.95.14 2021/04/29 12:43 
         000000B0  FFFFFF9D  19693
@AUTO#rd_kafka_mock_broker_set_down
         000000A8  FFFFFF97  20585
@AUTO#rd_kafka_mock_broker_set_rack
         000000A8  FFFFFF94  21006
@AUTO#rd_kafka_mock_broker_set_rtt
         000000A8  FFFFFF95  20860
@AUTO#rd_kafka_mock_broker_set_up
         000000A8  FFFFFF96  20722
@AUTO#rd_kafka_mock_buf_new_response
         000000A8  FFFFFFB9  14233
@AUTO#rd_kafka_mock_clear_request_errors
         000000A8  FFFFFFA0  19097
@AUTO#rd_kafka_mock_cluster_$Api$Version_check
         000000A8  FFFFFFD6  05547
@AUTO#rd_kafka_mock_cluster_bootstraps
         000000A8  FFFFFF8A  23700
@AUTO#rd_kafka_mock_cluster_cmd
         000000A8  FFFFFF91  22036
@AUTO#rd_kafka_mock_cluster_destroy
         000000AC  FFFFFF8E  22855
@AUTO#rd_kafka_mock_cluster_destroy0
         000000AC  FFFFFF8F  22607
@AUTO#rd_kafka_mock_cluster_get_coord
         000000B0  FFFFFFA6  18198
@AUTO#rd_kafka_mock_cluster_handle
         000000A8  FFFFFF8C  23553
@AUTO#rd_kafka_mock_cluster_io_add
         000000A8  FFFFFFBD  10223
@AUTO#rd_kafka_mock_cluster_io_clear_events
         000000AC  FFFFFFBF  09819
@AUTO#rd_kafka_mock_cluster_io_del
         000000AC  FFFFFFBE  10035
@AUTO#rd_kafka_mock_cluster_io_poll
         000000AC  FFFFFFB0  16136
@AUTO#rd_kafka_mock_cluster_io_set_event
         000000AC  FFFFFFC0  09663
@AUTO#rd_kafka_mock_cluster_io_set_events
         000000AC  FFFFFFC1  09491
@AUTO#rd_kafka_mock_cluster_new
         000000B0  FFFFFF8D  23471
@AUTO#rd_kafka_mock_cluster_op_io
         000004A8  FFFFFFB1  15889
@AUTO#rd_kafka_mock_cluster_op_serve
         000000AC  FFFFFF90  22215
@AUTO#rd_kafka_mock_cluster_thread_main
         000000AC  FFFFFFAF  16412
@AUTO#rd_kafka_mock_commit_offset
         000000B0  FFFFFFCC  07841
@AUTO#rd_kafka_mock_committed_offset_destroy
         000000A8  FFFFFFCE  07428
@AUTO#rd_kafka_mock_committed_offset_find
         000000A8  FFFFFFCD  07562
                                                 DSECT Cross Reference                                                     Page  523 
DSECT     LENGTH    ID   DEFN                                                                         DASM V1.95.14 2021/04/29 12:43 
@AUTO#rd_kafka_mock_connection_close
         000000A8  FFFFFFBC  10529
@AUTO#rd_kafka_mock_connection_io
         000000AC  FFFFFFB4  15343
@AUTO#rd_kafka_mock_connection_new
         00000128  FFFFFFB2  15774
@AUTO#rd_kafka_mock_connection_parse_request
         000000A8  FFFFFFB8  14549
@AUTO#rd_kafka_mock_connection_read_request
         00000369  FFFFFFBA  13958
@AUTO#rd_kafka_mock_connection_send_response
         000000A8  FFFFFFBB  10792
@AUTO#rd_kafka_mock_connection_set_blocking
         000000A8  FFFFFFB3  15468
@AUTO#rd_kafka_mock_connection_write_out
         00000128  FFFFFFB6  14951
@AUTO#rd_kafka_mock_connection_write_out_tmr_cb
         000000A8  FFFFFFB7  14666
@AUTO#rd_kafka_mock_coord_destroy
         000000A8  FFFFFFA8  17838
@AUTO#rd_kafka_mock_coord_find
         000000A8  FFFFFFA7  17948
@AUTO#rd_kafka_mock_coord_set
         000000AC  FFFFFFA5  18387
@AUTO#rd_kafka_mock_coord_str2type
         000000A8  FFFFFFA9  17707
@AUTO#rd_kafka_mock_coordinator_set
         000000A8  FFFFFF93  21161
@AUTO#rd_kafka_mock_error_stack_destroy
         000000A8  FFFFFFAC  16864
@AUTO#rd_kafka_mock_error_stack_find
         000000A8  FFFFFFA3  18624
@AUTO#rd_kafka_mock_error_stack_get
         000000A8  FFFFFFA2  18765
@AUTO#rd_kafka_mock_error_stack_next
         000000B8  FFFFFFA4  18528
@AUTO#rd_kafka_mock_msgset_destroy
         000000A8  FFFFFFD4  05835
@AUTO#rd_kafka_mock_msgset_find
         000000A8  FFFFFFD2  06322
@AUTO#rd_kafka_mock_msgset_new
         000000B0  FFFFFFD3  06183
@AUTO#rd_kafka_mock_next_request_error
         000000B8  FFFFFFA1  18956
@AUTO#rd_kafka_mock_partition_assign_replicas
         000000AC  FFFFFFCF  07291
@AUTO#rd_kafka_mock_partition_destroy
         000000A8  FFFFFFCB  07996
@AUTO#rd_kafka_mock_partition_find
         000000A8  FFFFFFC9  08234
@AUTO#rd_kafka_mock_partition_get
         000000AC  FFFFFFC2  09337
@AUTO#rd_kafka_mock_partition_init
                                                 DSECT Cross Reference                                                     Page  524 
DSECT     LENGTH    ID   DEFN                                                                         DASM V1.95.14 2021/04/29 12:43 
         000000A8  FFFFFFCA  08139
@AUTO#rd_kafka_mock_partition_log_append
         000002B4  FFFFFFD1  06994
@AUTO#rd_kafka_mock_partition_set_follower
         000000A8  FFFFFF99  20294
@AUTO#rd_kafka_mock_partition_set_follower_wmarks
         000000A8  FFFFFF98  20448
@AUTO#rd_kafka_mock_partition_set_leader
         000000A8  FFFFFF9A  20143
@AUTO#rd_kafka_mock_partition_set_leader0
         000000A8  FFFFFFD0  07094
@AUTO#rd_kafka_mock_push_request_errors
         000000B0  FFFFFF9E  19446
@AUTO#rd_kafka_mock_push_request_errors_array
         000000B0  FFFFFF9F  19290
@AUTO#rd_kafka_mock_set_apiversion
         000000A8  FFFFFF92  21302
@AUTO#rd_kafka_mock_topic_auto_create
         000000A8  FFFFFFC4  09050
@AUTO#rd_kafka_mock_topic_create
         000000A8  FFFFFF9B  19992
@AUTO#rd_kafka_mock_topic_destroy
         000000AC  FFFFFFC8  08406
@AUTO#rd_kafka_mock_topic_find
         000000A8  FFFFFFC6  08746
@AUTO#rd_kafka_mock_topic_find_by_kstr
         000000A8  FFFFFFC5  08890
@AUTO#rd_kafka_mock_topic_get
         000000AC  FFFFFFC3  09186
@AUTO#rd_kafka_mock_topic_new
         000000AC  FFFFFFC7  08636
@AUTO#rd_kafka_mock_topic_set_error
         000000A8  FFFFFF9C  19844
@AUTO#rd_kafka_op_cmp_prio
         000000A8  FFFFFFE3  03850
@AUTO#rd_kafka_q_destroy_owner
         000000A8  FFFFFFE6  03457
@AUTO#rd_kafka_q_destroy0
         000000AC  FFFFFFE7  03352
@AUTO#rd_kafka_q_disable0
         000000A8  FFFFFFE8  03166
@AUTO#rd_kafka_q_enq
         000000A8  FFFFFFE0  04449
@AUTO#rd_kafka_q_enq0
         000000A8  FFFFFFE2  04079
@AUTO#rd_kafka_q_enq1
         000000A8  FFFFFFE1  04340
@AUTO#rd_kafka_q_fwd_get
         000000A8  FFFFFFE5  03594
@AUTO#rd_kafka_q_io_event
         000000A8  FFFFFFE4  03757
@AUTO#rd_kafka_q_keep
         000000A8  FFFFFFE9  03043
                                                 DSECT Cross Reference                                                     Page  525 
DSECT     LENGTH    ID   DEFN                                                                         DASM V1.95.14 2021/04/29 12:43 
@AUTO#rd_kafkap_str_cmp_str
         000000AC  FFFFFFEB  02795
@AUTO#rd_kafkap_str_copy
         000000A8  FFFFFFEC  02659
@AUTO#rd_kafkap_str_destroy
         000000A8  FFFFFFEE  02364
@AUTO#rd_kafkap_str_new
         000000AA  FFFFFFED  02553
@AUTO#rd_malloc
         000000A8  FFFFFFF9  01093
@AUTO#rd_pipe_nonblocking
         000000A8  FFFFFFFB  00838
@AUTO#rd_realloc
         000000A8  FFFFFFF8  01222
@AUTO#rd_refcnt_sub0
         000000AC  FFFFFFF5  01592
@AUTO#rd_slice_abs_offset
         000000A8  FFFFFFF1  01957
@AUTO#rd_slice_offset
         000000A8  FFFFFFF0  02047
@AUTO#rd_strdup
         000000A8  FFFFFFF6  01456
@AUTO#rd_strlcpy
         000000B0  FFFFFFEA  02924
                                          Macro and Copy Code Source Summary                                               Page  526 
Source                                                    Members                                     DASM V1.95.14 2021/04/29 12:43 

C:\DIGNUS\MACLIB                                          DCCCATR  DCCEPIL  DCCPRLG  DCCPRV   dccextrn
                                                      Using Map                                                            Page  527 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
  Stmt  -----Location----- Action ----------------Using----------------- Reg Max     Last Label and Using Text
          Count      Id           Type          Value    Range     Id        Disp    Stmt
   245  0000009E  00000002 USING  ORDINARY    00000060 00001000 00000002  12 000E0    270 @REGION_1059_1,12
   303  00000148  00000002 DROP                                           12              12
   372  000001E6  00000002 USING  ORDINARY    000001A8 00001000 00000002  12 000E0    397 @REGION_1060_1,12
   430  00000290  00000002 DROP                                           12              12
   499  0000032E  00000002 USING  ORDINARY    000002F0 00001000 00000002  12 000D0    519 @REGION_1061_1,12
   552  000003C8  00000002 DROP                                           12              12
   621  0000046E  00000002 USING  ORDINARY    00000430 00001000 00000002  12 000D4    660 @REGION_1070_1,12
   689  0000054C  00000002 DROP                                           12              12
   758  000005EE  00000002 USING  ORDINARY    000005B0 00001000 00000002  12 000D4    800 @REGION_1071_1,12
   833  000006CC  00000002 DROP                                           12              12
   901  00000766  00000002 USING  ORDINARY    00000728 00001000 00000002  12 00110    928 @REGION_1077_1,12
   961  00000840  00000002 DROP                                           12              12
  1029  000008D6  00000002 USING  ORDINARY    00000898 00001000 00000002  12 00108   1055 @REGION_1078_1,12
  1088  000009A8  00000002 DROP                                           12              12
  1156  00000A3E  00000002 USING  ORDINARY    00000A00 00001000 00000002  12 00118   1184 @REGION_1079_1,12
  1217  00000B20  00000002 DROP                                           12              12
  1285  00000BB6  00000002 USING  ORDINARY    00000B78 00001000 00000002  12 000A8   1292 @REGION_1080_1,12
  1320  00000C28  00000002 DROP                                           12              12
  1388  00000CBE  00000002 USING  ORDINARY    00000C80 00001000 00000002  12 00108   1418 @REGION_1081_1,12
  1451  00000D90  00000002 DROP                                           12              12
  1519  00000E2E  00000002 USING  ORDINARY    00000DF0 00001000 00000002  12 00118   1553 @REGION_1084_1,12
  1587  00000F10  00000002 DROP                                           12              12
  1656  00000FA6  00000002 USING  ORDINARY    00000F68 00001000 00000002  12 000C0   1666 @REGION_1088_1,12
  1700  00001030  00000002 DROP                                           12              12
  1758  0000109A  00000002 USING  ORDINARY    00001090 00001000 00000002  12 00036   1773 @REGION_1266_1,12
  1795  000010D4  00000002 DROP                                           12              12
  1923  000011BA  00000002 USING  ORDINARY    000011B0 00001000 00000002  12 0003A   1932 @REGION_1286_1,12
  1952  000011F8  00000002 DROP                                           12              12
  2009  00001262  00000002 USING  ORDINARY    00001258 00001000 00000002  12 0004A   2020 @REGION_1287_1,12
  2042  000012B0  00000002 DROP                                           12              12
  2110  0000134E  00000002 USING  ORDINARY    00001310 00001000 00000002  12 000F2   2222 @REGION_1314_1,12
  2256  0000144A  00000002 DROP                                           12              12
  2324  000014EE  00000002 USING  ORDINARY    000014B0 00001000 00000002  12 000A8   2331 @REGION_1316_1,12
  2359  00001560  00000002 DROP                                           12              12
  2427  000015FE  00000002 USING  ORDINARY    000015C0 00001000 00000002  12 00140   2517 @REGION_1317_1,12
  2548  00001748  00000002 DROP                                           12              12
  2617  000017E6  00000002 USING  ORDINARY    000017A8 00001000 00000002  12 000B8   2627 @REGION_1318_1,12
  2654  00001868  00000002 DROP                                           12              12
  2711  000018DA  00000002 USING  ORDINARY    000018D0 00001000 00000002  12 000C0   2772 @REGION_1320_1,12
  2790  0000199E  00000002 DROP                                           12              12
  2852  00001A02  00000002 USING  ORDINARY    000019F8 00001000 00000002  12 000A6   2898 @REGION_1384_1,12
  2919  00001AAC  00000002 DROP                                           12              12
  2990  00001B46  00000002 USING  ORDINARY    00001B08 00001000 00000002  12 000D0   3008 @REGION_1428_1,12
  3038  00001BE0  00000002 DROP                                           12              12
  3106  00001C7E  00000002 USING  ORDINARY    00001C40 00001000 00000002  12 000E0   3131 @REGION_1432_1,12
  3161  00001D28  00000002 DROP                                           12              12
  3229  00001DC6  00000002 USING  ORDINARY    00001D88 00001000 00000002  12 001A8   3311 @REGION_1435_1,12
  3347  00001F38  00000002 DROP                                           12              12
  3416  00001FDE  00000002 USING  ORDINARY    00001FA0 00001000 00000002  12 000B0   3424 @REGION_1436_1,12
  3452  00002058  00000002 DROP                                           12              12
  3520  000020F6  00000002 USING  ORDINARY    000020B8 00001000 00000002  12 00100   3556 @REGION_1439_1,12
                                                      Using Map                                                            Page  528 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
  3589  000021C0  00000002 DROP                                           12              12
  3657  0000225E  00000002 USING  ORDINARY    00002220 00001000 00000002  12 00102   3724 @REGION_1441_1,12
  3752  0000236A  00000002 DROP                                           12              12
  3809  000023DA  00000002 USING  ORDINARY    000023D0 00001000 00000002  12 00042   3828 @REGION_1442_1,12
  3845  00002424  00000002 DROP                                           12              12
  3913  000024BE  00000002 USING  ORDINARY    00002480 00001000 00000002  12 001C2   4039 @REGION_1444_1,12
  4074  000026A8  00000002 DROP                                           12              12
  4142  00002746  00000002 USING  ORDINARY    00002708 00001000 00000002  12 00212   4305 @REGION_1445_1,12
  4335  00002962  00000002 DROP                                           12              12
  4403  000029FE  00000002 USING  ORDINARY    000029C0 00001000 00000002  12 000D0   4416 @REGION_1446_1,12
  4444  00002A98  00000002 DROP                                           12              12
  4586  00002BAE  00000002 USING  ORDINARY    00002B70 00001000 00000002  12 00090   4628 @REGION_1485_1,12
  4652  00002C68  00000002 DROP                                           12              12
  4797  00002D7E  00000002 USING  ORDINARY    00002D40 00001000 00000002  12 000F8   4822 @REGION_1487_1,12
  4852  00002E40  00000002 DROP                                           12              12
  4920  00002EDE  00000002 USING  ORDINARY    00002EA0 00001000 00000002  12 00118   4953 @REGION_1517_1,12
  4986  00002FC0  00000002 DROP                                           12              12
  5055  0000305E  00000002 USING  ORDINARY    00003020 00001000 00000002  12 00138   5093 @REGION_1518_1,12
  5124  00003160  00000002 DROP                                           12              12
  5192  00003206  00000002 USING  ORDINARY    000031C8 00001000 00000002  12 000B8   5202 @REGION_1519_1,12
  5229  00003288  00000002 DROP                                           12              12
  5297  0000332E  00000002 USING  ORDINARY    000032F0 00001000 00000002  12 000C0   5309 @REGION_1523_1,12
  5336  000033B8  00000002 DROP                                           12              12
  5404  0000345E  00000002 USING  ORDINARY    00003420 00001000 00000002  12 000C8   5418 @REGION_1524_1,12
  5446  000034F0  00000002 DROP                                           12              12
  5504  00003572  00000002 USING  ORDINARY    00003568 00001000 00000002  12 00054   5529 @REGION_1950_1,12
  5541  000035D0  00000002 DROP                                           12              12
  5599  00003642  00000002 USING  ORDINARY    00003638 00001000 00000002  12 0003C   5622 @REGION_1976_1,12
  5636  00003682  00000002 DROP                                           12              12
  5704  0000372E  00000002 USING  ORDINARY    000036F0 00001000 00000002  12 0016A   5805 @REGION_1977_1,12
  5830  000038C6  00000002 DROP                                           12              12
  5898  0000396E  00000002 USING  ORDINARY    00003930 00001000 00000002  12 003B0   6149 @REGION_1978_1,12
  6178  00003D2C  00000002 DROP                                           12              12
  6242  00003DA2  00000002 USING  ORDINARY    00003D98 00001000 00000002  12 0009A   6301 @REGION_1947_1,12
  6317  00003E40  00000002 DROP                                           12              12
  6388  00003EEE  00000002 USING  ORDINARY    00003EB0 00001000 00000002  12 00792   6965 @REGION_1949_1,12
  6967  00004648  00000002 DROP                                           12              12
  6968  00004648  00000002 USING  ORDINARY    00004648 00001000 00000002  12 00000        @REGION_1949_2,12
  6988  00004690  00000002 DROP                                           12              12
  7158  000047DE  00000002 USING  ORDINARY    000047A0 00001000 00000002  12 0011C   7260 @REGION_1980_1,12
  7285  00004952  00000002 DROP                                           12              12
  7358  00004A06  00000002 USING  ORDINARY    000049C8 00001000 00000002  12 000AA   7397 @REGION_1981_1,12
  7422  00004ADE  00000002 DROP                                           12              12
  7494  00004B8E  00000002 USING  ORDINARY    00004B50 00001000 00000002  12 000AC   7531 @REGION_1945_1,12
  7556  00004C44  00000002 DROP                                           12              12
  7627  00004CEE  00000002 USING  ORDINARY    00004CB0 00001000 00000002  12 002AA   7804 @REGION_1946_1,12
  7836  00004FA6  00000002 DROP                                           12              12
  7905  00005056  00000002 USING  ORDINARY    00005018 00001000 00000002  12 000D6   7966 @REGION_1982_1,12
  7991  0000514E  00000002 DROP                                           12              12
  8059  000051F6  00000002 USING  ORDINARY    000051B8 00001000 00000002  12 00108   8106 @REGION_1983_1,12
  8134  000052C8  00000002 DROP                                           12              12
  8193  00005342  00000002 USING  ORDINARY    00005338 00001000 00000002  12 00048   8206 @REGION_1940_1,12
  8229  0000538E  00000002 DROP                                           12              12
                                                      Using Map                                                            Page  529 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
  8297  00005436  00000002 USING  ORDINARY    000053F8 00001000 00000002  12 000D6   8360 @REGION_1984_1,12
  8401  0000557C  00000002 DROP                                           12              12
  8470  0000561E  00000002 USING  ORDINARY    000055E0 00001000 00000002  12 00206   8600 @REGION_1985_1,12
  8631  00005832  00000002 DROP                                           12              12
  8691  000058A2  00000002 USING  ORDINARY    00005898 00001000 00000002  12 00066   8725 @REGION_1942_1,12
  8741  0000590C  00000002 DROP                                           12              12
  8800  0000598A  00000002 USING  ORDINARY    00005980 00001000 00000002  12 000D8   8869 @REGION_1943_1,12
  8885  00005A66  00000002 DROP                                           12              12
  8955  00005B16  00000002 USING  ORDINARY    00005AD8 00001000 00000002  12 000FC   9021 @REGION_1941_1,12
  9045  00005C50  00000002 DROP                                           12              12
  9115  00005CF6  00000002 USING  ORDINARY    00005CB8 00001000 00000002  12 000CA   9156 @REGION_1986_1,12
  9181  00005DCA  00000002 DROP                                           12              12
  9250  00005E76  00000002 USING  ORDINARY    00005E38 00001000 00000002  12 000F6   9297 @REGION_1987_1,12
  9332  00005F76  00000002 DROP                                           12              12
  9402  00006026  00000002 USING  ORDINARY    00005FE8 00001000 00000002  12 00100   9459 @REGION_1988_1,12
  9485  00006130  00000002 DROP                                           12              12
  9556  000061DE  00000002 USING  ORDINARY    000061A0 00001000 00000002  12 00130   9631 @REGION_1989_1,12
  9657  00006318  00000002 DROP                                           12              12
  9728  000063CE  00000002 USING  ORDINARY    00006390 00001000 00000002  12 00108   9787 @REGION_1990_1,12
  9813  000064E0  00000002 DROP                                           12              12
  9883  0000658E  00000002 USING  ORDINARY    00006550 00001000 00000002  12 001C0  10004 @REGION_1991_1,12
 10030  00006758  00000002 DROP                                           12              12
 10099  00006806  00000002 USING  ORDINARY    000067C8 00001000 00000002  12 001D0  10125 @REGION_1992_1,12
 10218  000069A0  00000002 DROP                                           12              12
 10286  00006A4E  00000002 USING  ORDINARY    00006A10 00001000 00000002  12 002CE  10499 @REGION_1993_1,12
 10524  00006D62  00000002 DROP                                           12              12
 10595  00006E16  00000002 USING  ORDINARY    00006DD8 00001000 00000002  12 002C0  10748 @REGION_1938_1,12
 10786  000070A0  00000002 DROP                                           12              12
 10856  00007156  00000002 USING  ORDINARY    00007118 00001000 00000002  12 00284  10991 @REGION_1994_1,12
 10992  000072DE  00000002 DROP                                           12              12
 10993  000072DE  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00144  10994 @REGION_1994_5,12
 10995  000072E2  00000002 DROP                                           12              12
 10996  000072E2  00000002 USING  ORDINARY    00007118 00001000 00000002  12 0029A  11027 @REGION_1994_1,12
 11028  000073AE  00000002 DROP                                           12              12
 11029  000073AE  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00144  11030 @REGION_1994_5,12
 11031  000073B2  00000002 DROP                                           12              12
 11032  000073B2  00000002 USING  ORDINARY    00007118 00001000 00000002  12 002C6  11048 @REGION_1994_1,12
 11049  000073DA  00000002 DROP                                           12              12
 11050  000073DA  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 002FC  11051 @REGION_1994_3,12
 11052  000073DE  00000002 DROP                                           12              12
 11053  000073DE  00000002 USING  ORDINARY    00007118 00001000 00000002  12 005AE  11274 @REGION_1994_1,12
 11275  000076C2  00000002 DROP                                           12              12
 11276  000076C2  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  11277 @REGION_1994_5,12
 11278  000076C6  00000002 DROP                                           12              12
 11279  000076C6  00000002 USING  ORDINARY    00007118 00001000 00000002  12 00872  11486 @REGION_1994_1,12
 11487  00007986  00000002 DROP                                           12              12
 11488  00007986  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  11489 @REGION_1994_5,12
 11490  0000798A  00000002 DROP                                           12              12
 11491  0000798A  00000002 USING  ORDINARY    00007118 00001000 00000002  12 008B4  11536 @REGION_1994_1,12
 11537  000079C8  00000002 DROP                                           12              12
 11538  000079C8  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 002C8  11539 @REGION_1994_2,12
 11540  000079CC  00000002 DROP                                           12              12
 11541  000079CC  00000002 USING  ORDINARY    00007118 00001000 00000002  12 008E6  11554 @REGION_1994_1,12
                                                      Using Map                                                            Page  530 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
 11555  000079FA  00000002 DROP                                           12              12
 11556  000079FA  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 002C8  11557 @REGION_1994_2,12
 11558  000079FE  00000002 DROP                                           12              12
 11559  000079FE  00000002 USING  ORDINARY    00007118 00001000 00000002  12 008F8  11563 @REGION_1994_1,12
 11564  00007A0C  00000002 DROP                                           12              12
 11565  00007A0C  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 002B8  11566 @REGION_1994_2,12
 11567  00007A10  00000002 DROP                                           12              12
 11568  00007A10  00000002 USING  ORDINARY    00007118 00001000 00000002  12 0090C  11572 @REGION_1994_1,12
 11573  00007A20  00000002 DROP                                           12              12
 11574  00007A20  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 00042  11575 @REGION_1994_2,12
 11576  00007A24  00000002 DROP                                           12              12
 11577  00007A24  00000002 USING  ORDINARY    00007118 00001000 00000002  12 00280  11578 @REGION_1994_1,12
 11580  00007A2A  00000002 DROP                                           12              12
 11581  00007A2A  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 001EC  11741 @REGION_1994_2,12
 11742  00007CEE  00000002 DROP                                           12              12
 11743  00007CEE  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  11744 @REGION_1994_5,12
 11745  00007CF2  00000002 DROP                                           12              12
 11746  00007CF2  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 005CA  11962 @REGION_1994_2,12
 11963  00007FF0  00000002 DROP                                           12              12
 11964  00007FF0  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  11965 @REGION_1994_5,12
 11966  00007FF4  00000002 DROP                                           12              12
 11967  00007FF4  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 008C2  12201 @REGION_1994_2,12
 12202  000082E8  00000002 DROP                                           12              12
 12203  000082E8  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  12204 @REGION_1994_5,12
 12205  000082EC  00000002 DROP                                           12              12
 12206  000082EC  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 00904  12229 @REGION_1994_2,12
 12230  0000832A  00000002 DROP                                           12              12
 12231  0000832A  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00288  12232 @REGION_1994_3,12
 12233  0000832E  00000002 DROP                                           12              12
 12234  0000832E  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 00916  12261 @REGION_1994_2,12
 12262  0000833C  00000002 DROP                                           12              12
 12263  0000833C  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 001E0  12264 @REGION_1994_3,12
 12265  00008340  00000002 DROP                                           12              12
 12266  00008340  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 009FE  12326 @REGION_1994_2,12
 12327  00008424  00000002 DROP                                           12              12
 12328  00008424  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00000  12329 @REGION_1994_3,12
 12330  00008428  00000002 DROP                                           12              12
 12331  00008428  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 001DE  12334 @REGION_1994_2,12
 12335  00008438  00000002 DROP                                           12              12
 12336  00008438  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 0000A  12337 @REGION_1994_3,12
 12338  0000843C  00000002 DROP                                           12              12
 12339  0000843C  00000002 USING  ORDINARY    00007A2A 00001000 00000002  12 00000        @REGION_1994_2,12
 12341  0000843C  00000002 DROP                                           12              12
 12342  0000843C  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00234  12456 @REGION_1994_3,12
 12457  00008628  00000002 DROP                                           12              12
 12458  00008628  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  12459 @REGION_1994_5,12
 12460  0000862C  00000002 DROP                                           12              12
 12461  0000862C  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 002C4  12507 @REGION_1994_3,12
 12508  000086FC  00000002 DROP                                           12              12
 12509  000086FC  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00144  12510 @REGION_1994_5,12
 12511  00008700  00000002 DROP                                           12              12
 12512  00008700  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 0023C  12533 @REGION_1994_3,12
 12534  00008734  00000002 DROP                                           12              12
                                                      Using Map                                                            Page  531 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
 12535  00008734  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00138  12536 @REGION_1994_5,12
 12537  00008738  00000002 DROP                                           12              12
 12538  00008738  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00328  12551 @REGION_1994_3,12
 12552  00008760  00000002 DROP                                           12              12
 12553  00008760  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00138  12554 @REGION_1994_5,12
 12555  00008764  00000002 DROP                                           12              12
 12556  00008764  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 0062A  12812 @REGION_1994_3,12
 12813  00008A62  00000002 DROP                                           12              12
 12814  00008A62  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  12815 @REGION_1994_5,12
 12816  00008A66  00000002 DROP                                           12              12
 12817  00008A66  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00908  13005 @REGION_1994_3,12
 13006  00008D40  00000002 DROP                                           12              12
 13007  00008D40  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  13008 @REGION_1994_5,12
 13009  00008D44  00000002 DROP                                           12              12
 13010  00008D44  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 0091A  13108 @REGION_1994_3,12
 13109  00008D52  00000002 DROP                                           12              12
 13110  00008D52  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 0011A  13111 @REGION_1994_5,12
 13112  00008D56  00000002 DROP                                           12              12
 13113  00008D56  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 0094C  13126 @REGION_1994_3,12
 13127  00008D84  00000002 DROP                                           12              12
 13128  00008D84  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00230  13129 @REGION_1994_4,12
 13130  00008D88  00000002 DROP                                           12              12
 13131  00008D88  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 0095E  13135 @REGION_1994_3,12
 13136  00008D96  00000002 DROP                                           12              12
 13137  00008D96  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00220  13138 @REGION_1994_4,12
 13139  00008D9A  00000002 DROP                                           12              12
 13140  00008D9A  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00A00  13180 @REGION_1994_3,12
 13181  00008E38  00000002 DROP                                           12              12
 13182  00008E38  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00000  13183 @REGION_1994_4,12
 13184  00008E3C  00000002 DROP                                           12              12
 13185  00008E3C  00000002 USING  ORDINARY    0000843C 00001000 00000002  12 00284  13188 @REGION_1994_3,12
 13190  00008E46  00000002 DROP                                           12              12
 13191  00008E46  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00154  13312 @REGION_1994_4,12
 13313  00009072  00000002 DROP                                           12              12
 13314  00009072  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  13315 @REGION_1994_5,12
 13316  00009076  00000002 DROP                                           12              12
 13317  00009076  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00122  13321 @REGION_1994_4,12
 13322  00009088  00000002 DROP                                           12              12
 13323  00009088  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 000F2  13324 @REGION_1994_5,12
 13325  0000908C  00000002 DROP                                           12              12
 13326  0000908C  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 004D0  13488 @REGION_1994_4,12
 13489  00009312  00000002 DROP                                           12              12
 13490  00009312  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  13491 @REGION_1994_5,12
 13492  00009316  00000002 DROP                                           12              12
 13493  00009316  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00766  13658 @REGION_1994_4,12
 13659  000095A8  00000002 DROP                                           12              12
 13660  000095A8  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  13661 @REGION_1994_5,12
 13662  000095AC  00000002 DROP                                           12              12
 13663  000095AC  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00786  13669 @REGION_1994_4,12
 13670  000095C8  00000002 DROP                                           12              12
 13671  000095C8  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 000F2  13672 @REGION_1994_5,12
 13673  000095CC  00000002 DROP                                           12              12
 13674  000095CC  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 007A2  13680 @REGION_1994_4,12
                                                      Using Map                                                            Page  532 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
 13681  000095E4  00000002 DROP                                           12              12
 13682  000095E4  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 000F2  13683 @REGION_1994_5,12
 13684  000095E8  00000002 DROP                                           12              12
 13685  000095E8  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 007D6  13697 @REGION_1994_4,12
 13698  00009618  00000002 DROP                                           12              12
 13699  00009618  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 000F2  13700 @REGION_1994_5,12
 13701  0000961C  00000002 DROP                                           12              12
 13702  0000961C  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00808  13715 @REGION_1994_4,12
 13716  0000964A  00000002 DROP                                           12              12
 13717  0000964A  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 000F2  13718 @REGION_1994_5,12
 13719  0000964E  00000002 DROP                                           12              12
 13720  0000964E  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 0081A  13724 @REGION_1994_4,12
 13725  0000965C  00000002 DROP                                           12              12
 13726  0000965C  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 000CC  13727 @REGION_1994_5,12
 13728  00009660  00000002 DROP                                           12              12
 13729  00009660  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00994  13829 @REGION_1994_4,12
 13830  000097D6  00000002 DROP                                           12              12
 13831  000097D6  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00000  13832 @REGION_1994_5,12
 13833  000097DA  00000002 DROP                                           12              12
 13834  000097DA  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00122  13838 @REGION_1994_4,12
 13840  000097EA  00000002 DROP                                           12              12
 13841  000097EA  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00140  13901 @REGION_1994_5,12
 13902  00009900  00000002 DROP                                           12              12
 13903  00009900  00000002 USING  ORDINARY    00008E46 00001000 00000002  12 00246  13904 @REGION_1994_4,12
 13905  00009904  00000002 DROP                                           12              12
 13906  00009904  00000002 USING  ORDINARY    000097EA 00001000 00000002  12 00144  13924 @REGION_1994_5,12
 13952  00009976  00000002 DROP                                           12              12
 14134  00009A26  00000002 USING  ORDINARY    000099E8 00001000 00000002  12 00140  14193 @REGION_1937_1,12
 14228  00009B30  00000002 DROP                                           12              12
 14297  00009BE6  00000002 USING  ORDINARY    00009BA8 00001000 00000002  12 0033A  14502 @REGION_1995_1,12
 14543  00009F2A  00000002 DROP                                           12              12
 14613  00009FDE  00000002 USING  ORDINARY    00009FA0 00001000 00000002  12 000D0  14632 @REGION_1996_1,12
 14660  0000A078  00000002 DROP                                           12              12
 14730  0000A126  00000002 USING  ORDINARY    0000A0E8 00001000 00000002  12 0025C  14917 @REGION_1997_1,12
 14945  0000A38C  00000002 DROP                                           12              12
 15024  0000A446  00000002 USING  ORDINARY    0000A408 00001000 00000002  12 00088  15053 @REGION_1998_1,12
 15076  0000A4D8  00000002 DROP                                           12              12
 15145  0000A57E  00000002 USING  ORDINARY    0000A540 00001000 00000002  12 001E0  15309 @REGION_1999_1,12
 15338  0000A768  00000002 DROP                                           12              12
 15410  0000A81E  00000002 USING  ORDINARY    0000A7E0 00001000 00000002  12 000F0  15433 @REGION_1939_1,12
 15462  0000A8D8  00000002 DROP                                           12              12
 15531  0000A986  00000002 USING  ORDINARY    0000A948 00001000 00000002  12 0030E  15737 @REGION_2000_1,12
 15769  0000AC9E  00000002 DROP                                           12              12
 15838  0000AD46  00000002 USING  ORDINARY    0000AD08 00001000 00000002  12 00058  15862 @REGION_2001_1,12
 15884  0000ADD8  00000002 DROP                                           12              12
 15953  0000AE86  00000002 USING  ORDINARY    0000AE48 00001000 00000002  12 00236  16105 @REGION_2002_1,12
 16131  0000B0C6  00000002 DROP                                           12              12
 16203  0000B176  00000002 USING  ORDINARY    0000B138 00001000 00000002  12 00206  16379 @REGION_2003_1,12
 16406  0000B3FA  00000002 DROP                                           12              12
 16476  0000B4A6  00000002 USING  ORDINARY    0000B468 00001000 00000002  12 001CE  16595 @REGION_2004_1,12
 16622  0000B67E  00000002 DROP                                           12              12
 16695  0000B72E  00000002 USING  ORDINARY    0000B6F0 00001000 00000002  12 00076  16720 @REGION_2005_1,12
 16742  0000B7C2  00000002 DROP                                           12              12
                                                      Using Map                                                            Page  533 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
 16811  0000B86E  00000002 USING  ORDINARY    0000B830 00001000 00000002  12 000C8  16830 @REGION_2006_1,12
 16858  0000B900  00000002 DROP                                           12              12
 16927  0000B9AE  00000002 USING  ORDINARY    0000B970 00001000 00000002  12 00170  17035 @REGION_2007_1,12
 17060  0000BB5E  00000002 DROP                                           12              12
 17128  0000BC06  00000002 USING  ORDINARY    0000BBC8 00001000 00000002  12 00582  17552 @REGION_2008_1,12
 17580  0000C192  00000002 DROP                                           12              12
 17642  0000C20A  00000002 USING  ORDINARY    0000C200 00001000 00000002  12 0009E  17685 @REGION_2009_1,12
 17702  0000C2AC  00000002 DROP                                           12              12
 17770  0000C356  00000002 USING  ORDINARY    0000C318 00001000 00000002  12 0008A  17800 @REGION_2010_1,12
 17833  0000C428  00000002 DROP                                           12              12
 17890  0000C49A  00000002 USING  ORDINARY    0000C490 00001000 00000002  12 00072  17927 @REGION_2011_1,12
 17943  0000C510  00000002 DROP                                           12              12
 18013  0000C5BE  00000002 USING  ORDINARY    0000C580 00001000 00000002  12 00226  18165 @REGION_1944_1,12
 18193  0000C7EE  00000002 DROP                                           12              12
 18266  0000C896  00000002 USING  ORDINARY    0000C858 00001000 00000002  12 00162  18337 @REGION_2012_1,12
 18382  0000CA02  00000002 DROP                                           12              12
 18451  0000CAAE  00000002 USING  ORDINARY    0000CA70 00001000 00000002  12 000DE  18494 @REGION_2013_1,12
 18523  0000CB96  00000002 DROP                                           12              12
 18581  0000CC12  00000002 USING  ORDINARY    0000CC08 00001000 00000002  12 0003C  18605 @REGION_2014_1,12
 18619  0000CC52  00000002 DROP                                           12              12
 18687  0000CCFE  00000002 USING  ORDINARY    0000CCC0 00001000 00000002  12 000D6  18718 @REGION_2015_1,12
 18760  0000CDDE  00000002 DROP                                           12              12
 18830  0000CE8E  00000002 USING  ORDINARY    0000CE50 00001000 00000002  12 0015A  18923 @REGION_1948_1,12
 18951  0000CFF2  00000002 DROP                                           12              12
 19023  0000D0A6  00000002 USING  ORDINARY    0000D068 00001000 00000002  12 00108  19061 @REGION_1655_1,12
 19091  0000D178  00000002 DROP                                           12              12
 19163  0000D22E  00000002 USING  ORDINARY    0000D1F0 00001000 00000002  12 0015C  19259 @REGION_1657_1,12
 19284  0000D3B4  00000002 DROP                                           12              12
 19357  0000D466  00000002 USING  ORDINARY    0000D428 00001000 00000002  12 000A2  19415 @REGION_1656_1,12
 19440  0000D552  00000002 DROP                                           12              12
 19513  0000D60E  00000002 USING  ORDINARY    0000D5D0 00001000 00000002  12 001E4  19659 @REGION_1658_1,12
 19687  0000D7FC  00000002 DROP                                           12              12
 19759  0000D8A6  00000002 USING  ORDINARY    0000D868 00001000 00000002  12 00138  19807 @REGION_1659_1,12
 19839  0000D9A8  00000002 DROP                                           12              12
 19909  0000DA4E  00000002 USING  ORDINARY    0000DA10 00001000 00000002  12 00148  19956 @REGION_1660_1,12
 19987  0000DB60  00000002 DROP                                           12              12
 20058  0000DC0E  00000002 USING  ORDINARY    0000DBD0 00001000 00000002  12 00140  20106 @REGION_1661_1,12
 20137  0000DD18  00000002 DROP                                           12              12
 20209  0000DDCE  00000002 USING  ORDINARY    0000DD90 00001000 00000002  12 00140  20257 @REGION_1662_1,12
 20288  0000DED8  00000002 DROP                                           12              12
 20360  0000DF8E  00000002 USING  ORDINARY    0000DF50 00001000 00000002  12 00150  20411 @REGION_1663_1,12
 20442  0000E0A8  00000002 DROP                                           12              12
 20513  0000E156  00000002 USING  ORDINARY    0000E118 00001000 00000002  12 00110  20550 @REGION_1664_1,12
 20580  0000E230  00000002 DROP                                           12              12
 20650  0000E2D6  00000002 USING  ORDINARY    0000E298 00001000 00000002  12 00110  20687 @REGION_1665_1,12
 20717  0000E3B0  00000002 DROP                                           12              12
 20787  0000E45E  00000002 USING  ORDINARY    0000E420 00001000 00000002  12 00118  20825 @REGION_1666_1,12
 20855  0000E540  00000002 DROP                                           12              12
 20925  0000E5EE  00000002 USING  ORDINARY    0000E5B0 00001000 00000002  12 00138  20970 @REGION_1667_1,12
 21001  0000E6F0  00000002 DROP                                           12              12
 21071  0000E79E  00000002 USING  ORDINARY    0000E760 00001000 00000002  12 00158  21125 @REGION_1668_1,12
 21156  0000E8C0  00000002 DROP                                           12              12
 21226  0000E96E  00000002 USING  ORDINARY    0000E930 00001000 00000002  12 00120  21267 @REGION_1669_1,12
                                                      Using Map                                                            Page  534 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
 21297  0000EA58  00000002 DROP                                           12              12
 21365  0000EAFE  00000002 USING  ORDINARY    0000EAC0 00001000 00000002  12 0072C  22008 @REGION_2016_1,12
 22010  0000F1F2  00000002 DROP                                           12              12
 22011  0000F1F2  00000002 USING  ORDINARY    0000F1F2 00001000 00000002  12 00000        @REGION_2016_2,12
 22031  0000F23A  00000002 DROP                                           12              12
 22099  0000F2E6  00000002 USING  ORDINARY    0000F2A8 00001000 00000002  12 0011A  22183 @REGION_2017_1,12
 22210  0000F42A  00000002 DROP                                           12              12
 22279  0000F4D6  00000002 USING  ORDINARY    0000F498 00001000 00000002  12 00348  22568 @REGION_1975_1,12
 22602  0000F888  00000002 DROP                                           12              12
 22673  0000F936  00000002 USING  ORDINARY    0000F8F8 00001000 00000002  12 00288  22813 @REGION_1651_1,12
 22850  0000FB88  00000002 DROP                                           12              12
 22921  0000FC2E  00000002 USING  ORDINARY    0000FBF0 00001000 00000002  12 00694  23438 @REGION_1650_1,12
 23466  000102CC  00000002 DROP                                           12              12
                                   Diagnostic Cross Reference and Assembler Summary                                        Page  535 
                                                                                                      DASM V1.95.14 2021/04/29 12:43 
      No Statements Flagged in this Assembly
DASM Dignus Systems/ASM, VERSION 1.95.14
SYSTEM: Windows 6.2                JOBNAME: (NOJOB)     STEPNAME: (NOSTEP)   PROCSTEP: (NOPROC)
Datasets Used for this Assembly
 Con  DDname   Dataset Name
  P1  RDKAFKA_MOCK ..\asg\asm\rdkafka_mock.asm
  L2  DCCPRLG  C:\DIGNUS\MACLIB\dccprlg
  L3  DCCCATR  C:\DIGNUS\MACLIB\dcccatr
  L4  DCCEPIL  C:\DIGNUS\MACLIB\dccepil
  L5  DCCPRV   C:\DIGNUS\MACLIB\dccprv

Assembly Start Time: 12.43.07 Stop Time: 12.43.07 Processor Time: 00.00.00.1640
Return Code 000
