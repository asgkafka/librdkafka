Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     1
                                       * * * * *   P R O L O G   * * * * *
  Command options:
    Overriding Parameters . . . . : -DHOST_MVS -I. -fwarn_disable=2356,2357,2405,2610,2011,2282,2284,1130 -fc11 -fextended_variadic_
macros -fanonstruct -march=z7 -mlp64 -DSYSC=1 -frent -IC:\dignus\include -fpreinclude=sysc.h -flisting=../asg/clst/lz4hc.clst -o../a
sg/asm/lz4hc.asm C:\asgkafka\librdkafka\src\lz4hc.c
    Program name. . . . . . . . . : C:\asgkafka\librdkafka\src\lz4hc.c
Compiler options. . . . . . . : -DHOST_MVS -DSYSC=1 -I. -IC:\dignus\include -O0 -fnoaddh -falias_stmts -famode=64 -fanonstruct
                              : -fnoansi_bitfield_packing -fnoasciiout -fasmcomm=expanded -fnoasmlnno -fnoat -fnoatid -fc11 -fc99
                              : -fno_common -fctrlz_is_eof -fcxx_comments -fdfe -fnodfp -fnodollar -fno_dwarf_extern
                              : -fextended_variadic_macros -ffar=ao -fnofar_align -fno_fnio -ffplocal -fno_gnu89_inline
                              : -fnohfpfloatpromote -fnoignore_case -fnoincrepsuf -fnoincstripdir -fnoincstripsuf
                              : -finline=1:128:256 -fno_instrument_functions -flinkageospromote
                              : -flisting=../asg/clst/lz4hc.clst -fnollgrande -flnameaddr -flong_names -fnolowerh -fno_mapat
                              : -fnomargins -fmesg=microsoft -fmin_lm_reg=2 -fmin_stm_reg=2 -fnomrc -fnonint_bitfield -fpack=0 
                              : -fpagesize=60 -fnopatch -fnopic -fpreinclude=sysc.h -frent -fnosascdigraphs -fsave_dsa_over_call
                              : -fno_sched_inst -fsearchlocal -fshow_skipped -fshowinc -fsname -fsource_enc=ascii -fstructmap
                              : -fnostructmaphex -fno_test -fnotrim -funsigned_bitfields -funsigned_char -fuser_sys_hdrmap
                              : -fwarn_disable=2356,2357,2405,2610,2011,2282,2284,1130 -fwchar=4 -fnowchar_ucs -fno_xref
                              : -mno-decimal-floating-point-packed-conversion-facility -mno-distinct-operands
                              : -mno-fp-extensions -mno-high-word-facility -mno-load-store-on-condition
                              : -mno-misc-instruction-extensions-facility-1 -mno-misc-instruction-extensions-facility-2
                              : -mno-misc-instruction-extensions-facility-3 -mno-mvcle -mno-population-count-facility
                              : -mno-tpf-trace -mno-tpf-trace-skip -mno-transaction-facility -march=z7
                              : -mdecimal-floating-point-facility -mextended-immediate
                              : -mfloating-point-support-sign-handling-facility -mfp-support-extension -mfp16
                              : -mfpr-gr-transfer-facility -mgeneral-instructions-extension -mhfp-extensions
                              : -mhfp-multiply-add -mlong-displacement -mlong-double-128 -mlp64 -mpfpo -msquare-root
                              : -o ../asg/asm/lz4hc.asm
                                * * * * *   E N D   O F   P R O L O G   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     2


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
*=Warning===> cc: #2181 license: license will expire in one day
     1       |//                                                                                               |     1     2
     2       |//  sysc.h                                                                                       |     2     2
     3       |//                                                                                               |     3     2
     4       |//  Created by Mike Arnold on 5/5/20.                                                            |     4     2
     5       |//  Copyright Â© 2020 Mike Arnold. All rights reserved.                                          |     5     2
     6       |//                                                                                               |     6     2
     7       |                                                                                                 |     7     2
     8       |#ifndef sysc_h                                                                                   |     8     2
     9       |#define sysc_h                                                                                   |     9     2
    10       |                                                                                                 |    10     2
    11       |#ifdef SYSC                                                                                      |    11     2
    12       |#define INLINE __inline                                                                          |    12     2
    13       |#define max(a,b) ({__typeof__ (a) _a = (a), _b = (b); _a > _b ? _a : _b; })                      |    13     2
    14       |#define min(a,b) ({__typeof__ (a) _a = (a), _b = (b); _a < _b ? _a : _b; })                      |    14     2
    15       |                                                                                                 |    15     2
    16       |#define __builtin_expect(x,y) (x)                                                                |    16     2
    17       |                                                                                                 |    17     2
    18       |#ifndef CLOCK_MONOTONIC                                                                          |    18     2
    19       |#define CLOCK_MONOTONIC CLOCK_REALTIME                                                           |    19     2
    20       |#endif                                                                                           |    20     2
    21       |#include <sys/types.h>                                                                           |    21     2
     1       |/* release 2.25.00 */                                                                            |    22     3
     2       |#pragma pack()                                                                                   |    23     3
     3       |/*-                                                                                              |    24     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    |    25     3
     5       | *      The Regents of the University of California.  All rights reserved.                       |    26     3
     6       | * (c) UNIX System Laboratories, Inc.                                                            |    27     3
     7       | * All or some portions of this file are derived from material licensed                          |    28     3
     8       | * to the University of California by American Telephone and Telegraph                           |    29     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |    30     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              |    31     3
    11       | *                                                                                               |    32     3
    12       | * Redistribution and use in source and binary forms, with or without                            |    33     3
    13       | * modification, are permitted provided that the following conditions                            |    34     3
    14       | * are met:                                                                                      |    35     3
    15       | * 1. Redistributions of source code must retain the above copyright                             |    36     3
    16       | *    notice, this list of conditions and the following disclaimer.                              |    37     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |    38     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        |    39     3
    19       | *    documentation and/or other materials provided with the distribution.                       |    40     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       |    41     3
    21       | *    may be used to endorse or promote products derived from this software                      |    42     3
    22       | *    without specific prior written permission.                                                 |    43     3
    23       | *                                                                                               |    44     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |    45     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |    46     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |    47     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |    48     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |    49     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |    50     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |    51     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |    52     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     3


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |    53     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |    54     3
    34       | * SUCH DAMAGE.                                                                                  |    55     3
    35       | *                                                                                               |    56     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   |    57     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        |    58     3
    38       | */                                                                                              |    59     3
    39       |                                                                                                 |    60     3
    40       |#ifndef _SYS_TYPES_H_                                                                            |    61     3
    41       |#define _SYS_TYPES_H_                                                                            |    62     3
    42       |                                                                                                 |    63     3
    43       |#include <sys/cdefs.h>                                                                           |    64     3
     1       |/* release 2.25.00 */                                                                            |    65     4
     2       |#pragma pack()                                                                                   |    66     4
     3       |/*                                                                                               |    67     4
     4       | * Copyright (c) 1991, 1993                                                                      |    68     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |    69     4
     6       | *                                                                                               |    70     4
     7       | * This code is derived from software contributed to Berkeley by                                 |    71     4
     8       | * Berkeley Software Design, Inc.                                                                |    72     4
     9       | *                                                                                               |    73     4
    10       | * Redistribution and use in source and binary forms, with or without                            |    74     4
    11       | * modification, are permitted provided that the following conditions                            |    75     4
    12       | * are met:                                                                                      |    76     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |    77     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |    78     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |    79     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |    80     4
    17       | *    documentation and/or other materials provided with the distribution.                       |    81     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |    82     4
    19       | *    must display the following acknowledgement:                                                |    83     4
    20       | *      This product includes software developed by the University of                            |    84     4
    21       | *      California, Berkeley and its contributors.                                               |    85     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |    86     4
    23       | *    may be used to endorse or promote products derived from this software                      |    87     4
    24       | *    without specific prior written permission.                                                 |    88     4
    25       | *                                                                                               |    89     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |    90     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |    91     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |    92     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |    93     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |    94     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |    95     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |    96     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |    97     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |    98     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |    99     4
    36       | * SUCH DAMAGE.                                                                                  |   100     4
    37       | *                                                                                               |   101     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |   102     4
    39       | */                                                                                              |   103     4
    40       |                                                                                                 |   104     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |   105     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     4


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    42       |#define _SYS_CDEFS_H_                                                                            |   106     4
    43       |                                                                                                 |   107     4
    44       |#if defined(__cplusplus)                                                                         |   108     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |   109     4
    46       |#define __END_DECLS     }                                                                        |   110     4
    47       |#else                                                                                            |   111     4
    48       |#define __BEGIN_DECLS                                                                            |   112     4
    49       |#define __END_DECLS                                                                              |   113     4
    50       |#endif                                                                                           |   114     4
    51       |                                                                                                 |   115     4
    52       |/*                                                                                               |   116     4
    53       | * This code has been put in place to help reduce the addition of                                |   117     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |   118     4
    55       | * having a compiler-agnostic source tree.                                                       |   119     4
    56       | */                                                                                              |   120     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |   121     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |   122     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |   123     4
    60       |                                                                                                 |   124     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |   125     4
    62       |                                                                                                 |   126     4
    63       |                                                                                                 |   127     4
    64       |/*                                                                                               |   128     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |   129     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |   130     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |   131     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |   132     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |   133     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |   134     4
    71       | * this only works with ANSI C.                                                                  |   135     4
    72       | *                                                                                               |   136     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |   137     4
    74       | * first.  It is only available with ANSI C.                                                     |   138     4
    75       | */                                                                                              |   139     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |   140     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |   141     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |   142     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |   143     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |   144     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |   145     4
    82       |                                                                                                 |   146     4
    83       |#define __const         const           /* define reserved names to standard */                  |   147     4
    84       |#define __signed        signed                                                                   |   148     4
    85       |#define __volatile      volatile                                                                 |   149     4
    86       |#if defined(__cplusplus)                                                                         |   150     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |   151     4
    88       |#else                                                                                            |   152     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |   153     4
    90       |#endif /* !__cplusplus */                                                                        |   154     4
    91       |                                                                                                 |   155     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |   156     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |   157     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |   158     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     5


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    95       |#define __STRING(x)     "x"                                                                      |   159     4
    96       |                                                                                                 |   160     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |   161     4
    98       |#define __inline                                                                                 |   162     4
    99       |#define __signed                                                                                 |   163     4
   100       |#define __volatile                                                                               |   164     4
   101       |/*                                                                                               |   165     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |   166     4
   103       | * deleted from the program and old programs will want them left alone.                          |   167     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |   168     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |   169     4
   106       | */                                                                                              |   170     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |   171     4
   108       |#define const                           /* delete ANSI C keywords */                             |   172     4
   109       |#define inline                                                                                   |   173     4
   110       |#define signed                                                                                   |   174     4
   111       |#define volatile                                                                                 |   175     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |   176     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |   177     4
   114       |                                                                                                 |   178     4
   115       |/*                                                                                               |   179     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |   180     4
   117       | * pure (no side effects) functions, and unused variables.                                       |   181     4
   118       | */                                                                                              |   182     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |   183     4
   120       |#define __pure  __attribute__((__pure__))                                                        |   184     4
   121       |#define __pure2 __attribute__((__const__))                                                       |   185     4
   122       |#define __unused                                                                                 |   186     4
   123       |#define __aligned(x)                                                                             |   187     4
   124       |#define __section(x)                                                                             |   188     4
   125       |#define __nonnull(x)                                                                             |   189     4
   126       |#define __used                                                                                   |   190     4
   127       |                                                                                                 |   191     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |   192     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |   193     4
   130       |                                                                                                 |   194     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |   195     4
   132       |#define __func__  NULL                                                                           |   196     4
   133       |#endif                                                                                           |   197     4
   134       |                                                                                                 |   198     4
   134       +                                                                                                 +   198     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |   199     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |   200     4
   137       |#endif                                                                                           |   201     4
   138       |                                                                                                 |   202     4
   138       +                                                                                                 +   202     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |   203     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |   204     4
   141       | **/                                                                                             |   205     4
   142       |#ifndef __cplusplus                                                                              |   206     4
   143       |#define __restrict __restrict__                                                                  |   207     4
   144       |#else                                                                                            |   208     4
   145       |/* Systems/C++ does not */                                                                       |   209     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     6


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   146       |#define __restrict                                                                               |   210     4
   147       |#endif                                                                                           |   211     4
   148       |                                                                                                 |   212     4
   149       |/*                                                                                               |   213     4
   150       | * define-away GCC-specific branch-prediction markers                                            |   214     4
   151       | */                                                                                              |   215     4
   152       |#define __predict_true(exp)     (exp)                                                            |   216     4
   153       |#define __predict_false(exp)    (exp)                                                            |   217     4
   154       |                                                                                                 |   218     4
   155       |                                                                                                 |   219     4
   156       |/*                                                                                               |   220     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |   221     4
   158       | * <sys/types.h> reference __offsetof().                                                         |   222     4
   159       | *                                                                                               |   223     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |   224     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |   225     4
   162       | */                                                                                              |   226     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |   227     4
   164       |#undef __offsetof                                                                                |   228     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |   229     4
   166       |#endif                                                                                           |   230     4
   167       |                                                                                                 |   231     4
   167       +                                                                                                 +   231     4
   168       |/*                                                                                               |   232     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |   233     4
   170       | * or scanf-like arguments.                                                                      |   234     4
   171       | */                                                                                              |   235     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |   236     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |   237     4
   174       |#define __format_arg(fmtarg)                                                                     |   238     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |   239     4
   176       |                                                                                                 |   240     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |   241     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |   242     4
   179       |                                                                                                 |   243     4
   180       |  /* intended to generate a weak reference as an alias */                                        |   244     4
   181       |#define __weak_reference(sym,alias)                                                              |   245     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |   246     4
   183       |#define __warn_references(sym,msg)                                                               |   247     4
   184       |                                                                                                 |   248     4
   185       | /* This places the string into the resulting object.  It should */                              |   249     4
   186       | /* probably become #pragma ident */                                                             |   250     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |   251     4
   188       |                                                                                                 |   252     4
   189       |#ifndef __RCSID                                                                                  |   253     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |   254     4
   191       |#endif                                                                                           |   255     4
   192       |                                                                                                 |   256     4
   193       |/*                                                                                               |   257     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |   258     4
   195       | * Usage:                                                                                        |   259     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |   260     4
   197       |*                                            04:05:13 mikeh Exp $");                             |   261     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     7


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   198       | */                                                                                              |   262     4
   199       |#ifndef __SYSCID                                                                                 |   263     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |   264     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |   265     4
   202       |#else                                                                                            |   266     4
   203       |#define __SYSCID(s)     struct __hack                                                            |   267     4
   204       |#endif                                                                                           |   268     4
   205       |#endif                                                                                           |   269     4
   206       |                                                                                                 |   270     4
   207       |#ifndef __RCSID_SOURCE                                                                           |   271     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |   272     4
   209       |#endif                                                                                           |   273     4
   210       |                                                                                                 |   274     4
   211       |#ifndef __COPYRIGHT                                                                              |   275     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |   276     4
   213       |#endif                                                                                           |   277     4
   214       |                                                                                                 |   278     4
   215       |                                                                                                 |   279     4
   216       |#ifndef __DECONST                                                                                |   280     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |   281     4
   218       |#endif                                                                                           |   282     4
   219       |                                                                                                 |   283     4
   220       |#ifndef __DEVOLATILE                                                                             |   284     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |   285     4
   222       |#endif                                                                                           |   286     4
   223       |                                                                                                 |   287     4
   224       |#ifndef __DEQUALIFY                                                                              |   288     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |   289     4
   226       |#endif                                                                                           |   290     4
   227       |                                                                                                 |   291     4
   228       |                                                                                                 |   292     4
   229       |/*-                                                                                              |   293     4
   230       | * The following definitions are an extension of the behavior originally                         |   294     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   295     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |   296     4
   233       | * header file is included.                                                                      |   297     4
   234       | *                                                                                               |   298     4
   235       | * Here's a quick run-down of the versions:                                                      |   299     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   300     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   301     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   302     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   303     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   304     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   305     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   306     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   307     4
   244       | *                                                                                               |   308     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   309     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |   310     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   311     4
   248       | *                                                                                               |   312     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |   313     4
   250       | */                                                                                              |   314     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     8


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   251       |                                                                                                 |   315     4
   252       |/*                                                                                               |   316     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |   317     4
   254       | * available. Also make them available when requested so.                                        |   318     4
   255       | */                                                                                              |   319     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |   320     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |   321     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |   322     4
   259       |#define __DF_VISIBLE    1                                                                        |   323     4
   260       |#else                                                                                            |   324     4
   261       |#define __DF_VISIBLE    0                                                                        |   325     4
   262       |#endif                                                                                           |   326     4
   263       |                                                                                                 |   327     4
   264       |/*-                                                                                              |   328     4
   265       | * The following definitions are an extension of the behavior originally                         |   329     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   330     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |   331     4
   268       | * header file is included.                                                                      |   332     4
   269       | *                                                                                               |   333     4
   270       | * Here's a quick run-down of the versions:                                                      |   334     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   335     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   336     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   337     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   338     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   339     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   340     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   341     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   342     4
   279       | *                                                                                               |   343     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   344     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |   345     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   346     4
   283       | *                                                                                               |   347     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |   348     4
   285       | */                                                                                              |   349     4
   286       |                                                                                                 |   350     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |   351     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |   352     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |   353     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |   354     4
   291       |#endif                                                                                           |   355     4
   292       |                                                                                                 |   356     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |   357     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |   358     4
   295       |#undef _POSIX_C_SOURCE                                                                           |   359     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |   360     4
   297       |#endif                                                                                           |   361     4
   298       |                                                                                                 |   362     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |   363     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |   364     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |   365     4
   302       |#define __XSI_VISIBLE           700                                                              |   366     4
   303       |#undef _POSIX_C_SOURCE                                                                           |   367     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page     9


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   304       |#define _POSIX_C_SOURCE         200809                                                           |   368     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |   369     4
   306       |#define __XSI_VISIBLE           600                                                              |   370     4
   307       |#undef _POSIX_C_SOURCE                                                                           |   371     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |   372     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |   373     4
   310       |#define __XSI_VISIBLE           500                                                              |   374     4
   311       |#undef _POSIX_C_SOURCE                                                                           |   375     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |   376     4
   313       |#endif                                                                                           |   377     4
   314       |#endif                                                                                           |   378     4
   315       |                                                                                                 |   379     4
   316       |/*                                                                                               |   380     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |   381     4
   318       | * important.                                                                                    |   382     4
   319       | */                                                                                              |   383     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |   384     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |   385     4
   322       |#endif                                                                                           |   386     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |   387     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |   388     4
   325       |#define __POSIX_VISIBLE         200809                                                           |   389     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |   390     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |   391     4
   328       |#define __POSIX_VISIBLE         200112                                                           |   392     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |   393     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |   394     4
   331       |#define __POSIX_VISIBLE         199506                                                           |   395     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |   396     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |   397     4
   334       |#define __POSIX_VISIBLE         199309                                                           |   398     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |   399     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |   400     4
   337       |#define __POSIX_VISIBLE         199209                                                           |   401     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |   402     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |   403     4
   340       |#define __POSIX_VISIBLE         199009                                                           |   404     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |   405     4
   342       |#else                                                                                            |   406     4
   343       |#define __POSIX_VISIBLE         198808                                                           |   407     4
   344       |#define __ISO_C_VISIBLE         0                                                                |   408     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |   409     4
   346       |#else                                                                                            |   410     4
   347       |/*-                                                                                              |   411     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |   412     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |   413     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |   414     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |   415     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |   416     4
   353       | * a test program to print out the values.                                                       |   417     4
   354       | *                                                                                               |   418     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |   419     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |   420     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    10


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   357       | * environment (and in fact we will never get here).                                             |   421     4
   358       | */                                                                                              |   422     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |   423     4
   360       |#define __POSIX_VISIBLE         0                                                                |   424     4
   361       |#define __XSI_VISIBLE           0                                                                |   425     4
   362       |#define __BSD_VISIBLE           0                                                                |   426     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |   427     4
   364       |#define __EXT1_VISIBLE          0                                                                |   428     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |   429     4
   366       |#define __POSIX_VISIBLE         0                                                                |   430     4
   367       |#define __XSI_VISIBLE           0                                                                |   431     4
   368       |#define __BSD_VISIBLE           0                                                                |   432     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |   433     4
   370       |#define __EXT1_VISIBLE          0                                                                |   434     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |   435     4
   372       |#define __POSIX_VISIBLE         0                                                                |   436     4
   373       |#define __XSI_VISIBLE           0                                                                |   437     4
   374       |#define __BSD_VISIBLE           0                                                                |   438     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |   439     4
   376       |#define __EXT1_VISIBLE          0                                                                |   440     4
   377       |#else                           /* Default environment: show everything. */                      |   441     4
   378       |#define __POSIX_VISIBLE         200809                                                           |   442     4
   379       |#define __XSI_VISIBLE           700                                                              |   443     4
   380       |#define __BSD_VISIBLE           1                                                                |   444     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |   445     4
   382       |#define __EXT1_VISIBLE          1                                                                |   446     4
   383       |#endif                                                                                           |   447     4
   384       |#endif                                                                                           |   448     4
   385       |                                                                                                 |   449     4
   386       |/* User override __EXT1_VISIBLE */                                                               |   450     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |   451     4
   388       |#undef  __EXT1_VISIBLE                                                                           |   452     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |   453     4
   390       |#define __EXT1_VISIBLE          1                                                                |   454     4
   391       |#else                                                                                            |   455     4
   392       |#define __EXT1_VISIBLE          0                                                                |   456     4
   393       |#endif                                                                                           |   457     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |   458     4
   395       |                                                                                                 |   459     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |   460     4
   397       |#define __NO_TLS 1                                                                               |   461     4
   398       |#endif                                                                                           |   462     4
   399       |                                                                                                 |   463     4
   400       |                                                                                                 |   464     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |   465     4
   402       |#define __FBSDID(x)                                                                              |   466     4
   403       |                                                                                                 |   467     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |   468     4
   405       |#pragma pack(reset)                                                                              |   469     4
    44       |                                                                                                 |   470     3
    45       |/* Machine type dependent parameters. */                                                         |   471     3
    46       |#include <machine/endian.h>                                                                      |   472     3
     1       |/* release 2.25.00 */                                                                            |   473     5
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    11


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |   474     5
     3       |/*-                                                                                              |   475     5
     4       | * Copyright (c) 1987, 1991 Regents of the University of California.                             |   476     5
     5       | * All rights reserved.                                                                          |   477     5
     6       | *                                                                                               |   478     5
     7       | * Redistribution and use in source and binary forms, with or without                            |   479     5
     8       | * modification, are permitted provided that the following conditions                            |   480     5
     9       | * are met:                                                                                      |   481     5
    10       | * 1. Redistributions of source code must retain the above copyright                             |   482     5
    11       | *    notice, this list of conditions and the following disclaimer.                              |   483     5
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |   484     5
    13       | *    notice, this list of conditions and the following disclaimer in the                        |   485     5
    14       | *    documentation and/or other materials provided with the distribution.                       |   486     5
    15       | * 4. Neither the name of the University nor the names of its contributors                       |   487     5
    16       | *    may be used to endorse or promote products derived from this software                      |   488     5
    17       | *    without specific prior written permission.                                                 |   489     5
    18       | *                                                                                               |   490     5
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |   491     5
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   492     5
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   493     5
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |   494     5
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   495     5
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   496     5
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   497     5
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   498     5
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   499     5
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   500     5
    29       | * SUCH DAMAGE.                                                                                  |   501     5
    30       | *                                                                                               |   502     5
    31       | *      @(#)endian.h    7.8 (Berkeley) 4/3/91                                                    |   503     5
    32       | */                                                                                              |   504     5
    33       |                                                                                                 |   505     5
    34       |#ifndef _MACHINE_ENDIAN_H_                                                                       |   506     5
    35       |#define _MACHINE_ENDIAN_H_                                                                       |   507     5
    36       |                                                                                                 |   508     5
    37       |#include <sys/cdefs.h>                                                                           |   509     5
     1       |/* release 2.25.00 */                                                                            |   510     4
     2       |#pragma pack()                                                                                   |   511     4
     3       |/*                                                                                               |   512     4
     4       | * Copyright (c) 1991, 1993                                                                      |   513     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |   514     4
     6       | *                                                                                               |   515     4
     7       | * This code is derived from software contributed to Berkeley by                                 |   516     4
     8       | * Berkeley Software Design, Inc.                                                                |   517     4
     9       | *                                                                                               |   518     4
    10       | * Redistribution and use in source and binary forms, with or without                            |   519     4
    11       | * modification, are permitted provided that the following conditions                            |   520     4
    12       | * are met:                                                                                      |   521     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |   522     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |   523     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |   524     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |   525     4
    17       | *    documentation and/or other materials provided with the distribution.                       |   526     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    12


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       | * 3. All advertising materials mentioning features or use of this software                      |   527     4
    19       | *    must display the following acknowledgement:                                                |   528     4
    20       | *      This product includes software developed by the University of                            |   529     4
    21       | *      California, Berkeley and its contributors.                                               |   530     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |   531     4
    23       | *    may be used to endorse or promote products derived from this software                      |   532     4
    24       | *    without specific prior written permission.                                                 |   533     4
    25       | *                                                                                               |   534     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |   535     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   536     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   537     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |   538     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   539     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   540     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   541     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   542     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   543     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   544     4
    36       | * SUCH DAMAGE.                                                                                  |   545     4
    37       | *                                                                                               |   546     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |   547     4
    39       | */                                                                                              |   548     4
    40       |                                                                                                 |   549     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |   550     4
    42       |#define _SYS_CDEFS_H_                                                                            |   551     4
    43       |                                                                                                 |   552     4
    44       |#if defined(__cplusplus)                                                                         |   553     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |   554     4
    46       |#define __END_DECLS     }                                                                        |   555     4
    47       |#else                                                                                            |   556     4
    48       |#define __BEGIN_DECLS                                                                            |   557     4
    49       |#define __END_DECLS                                                                              |   558     4
    50       |#endif                                                                                           |   559     4
    51       |                                                                                                 |   560     4
    52       |/*                                                                                               |   561     4
    53       | * This code has been put in place to help reduce the addition of                                |   562     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |   563     4
    55       | * having a compiler-agnostic source tree.                                                       |   564     4
    56       | */                                                                                              |   565     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |   566     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |   567     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |   568     4
    60       |                                                                                                 |   569     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |   570     4
    62       |                                                                                                 |   571     4
    63       |                                                                                                 |   572     4
    64       |/*                                                                                               |   573     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |   574     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |   575     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |   576     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |   577     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |   578     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |   579     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    13


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    71       | * this only works with ANSI C.                                                                  |   580     4
    72       | *                                                                                               |   581     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |   582     4
    74       | * first.  It is only available with ANSI C.                                                     |   583     4
    75       | */                                                                                              |   584     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |   585     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |   586     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |   587     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |   588     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |   589     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |   590     4
    82       |                                                                                                 |   591     4
    83       |#define __const         const           /* define reserved names to standard */                  |   592     4
    84       |#define __signed        signed                                                                   |   593     4
    85       |#define __volatile      volatile                                                                 |   594     4
    86       |#if defined(__cplusplus)                                                                         |   595     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |   596     4
    88       |#else                                                                                            |   597     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |   598     4
    90       |#endif /* !__cplusplus */                                                                        |   599     4
    91       |                                                                                                 |   600     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |   601     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |   602     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |   603     4
    95       |#define __STRING(x)     "x"                                                                      |   604     4
    96       |                                                                                                 |   605     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |   606     4
    98       |#define __inline                                                                                 |   607     4
    99       |#define __signed                                                                                 |   608     4
   100       |#define __volatile                                                                               |   609     4
   101       |/*                                                                                               |   610     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |   611     4
   103       | * deleted from the program and old programs will want them left alone.                          |   612     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |   613     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |   614     4
   106       | */                                                                                              |   615     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |   616     4
   108       |#define const                           /* delete ANSI C keywords */                             |   617     4
   109       |#define inline                                                                                   |   618     4
   110       |#define signed                                                                                   |   619     4
   111       |#define volatile                                                                                 |   620     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |   621     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |   622     4
   114       |                                                                                                 |   623     4
   115       |/*                                                                                               |   624     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |   625     4
   117       | * pure (no side effects) functions, and unused variables.                                       |   626     4
   118       | */                                                                                              |   627     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |   628     4
   120       |#define __pure  __attribute__((__pure__))                                                        |   629     4
   121       |#define __pure2 __attribute__((__const__))                                                       |   630     4
   122       |#define __unused                                                                                 |   631     4
   123       |#define __aligned(x)                                                                             |   632     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    14


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   124       |#define __section(x)                                                                             |   633     4
   125       |#define __nonnull(x)                                                                             |   634     4
   126       |#define __used                                                                                   |   635     4
   127       |                                                                                                 |   636     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |   637     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |   638     4
   130       |                                                                                                 |   639     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |   640     4
   132       |#define __func__  NULL                                                                           |   641     4
   133       |#endif                                                                                           |   642     4
   134       |                                                                                                 |   643     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |   644     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |   645     4
   137       |#endif                                                                                           |   646     4
   138       |                                                                                                 |   647     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |   648     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |   649     4
   141       | **/                                                                                             |   650     4
   142       |#ifndef __cplusplus                                                                              |   651     4
   143       |#define __restrict __restrict__                                                                  |   652     4
   144       |#else                                                                                            |   653     4
   145       |/* Systems/C++ does not */                                                                       |   654     4
   146       |#define __restrict                                                                               |   655     4
   147       |#endif                                                                                           |   656     4
   148       |                                                                                                 |   657     4
   149       |/*                                                                                               |   658     4
   150       | * define-away GCC-specific branch-prediction markers                                            |   659     4
   151       | */                                                                                              |   660     4
   152       |#define __predict_true(exp)     (exp)                                                            |   661     4
   153       |#define __predict_false(exp)    (exp)                                                            |   662     4
   154       |                                                                                                 |   663     4
   155       |                                                                                                 |   664     4
   156       |/*                                                                                               |   665     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |   666     4
   158       | * <sys/types.h> reference __offsetof().                                                         |   667     4
   159       | *                                                                                               |   668     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |   669     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |   670     4
   162       | */                                                                                              |   671     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |   672     4
   164       |#undef __offsetof                                                                                |   673     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |   674     4
   166       |#endif                                                                                           |   675     4
   167       |                                                                                                 |   676     4
   168       |/*                                                                                               |   677     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |   678     4
   170       | * or scanf-like arguments.                                                                      |   679     4
   171       | */                                                                                              |   680     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |   681     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |   682     4
   174       |#define __format_arg(fmtarg)                                                                     |   683     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |   684     4
   176       |                                                                                                 |   685     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    15


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |   686     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |   687     4
   179       |                                                                                                 |   688     4
   180       |  /* intended to generate a weak reference as an alias */                                        |   689     4
   181       |#define __weak_reference(sym,alias)                                                              |   690     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |   691     4
   183       |#define __warn_references(sym,msg)                                                               |   692     4
   184       |                                                                                                 |   693     4
   185       | /* This places the string into the resulting object.  It should */                              |   694     4
   186       | /* probably become #pragma ident */                                                             |   695     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |   696     4
   188       |                                                                                                 |   697     4
   189       |#ifndef __RCSID                                                                                  |   698     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |   699     4
   191       |#endif                                                                                           |   700     4
   192       |                                                                                                 |   701     4
   193       |/*                                                                                               |   702     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |   703     4
   195       | * Usage:                                                                                        |   704     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |   705     4
   197       |*                                            04:05:13 mikeh Exp $");                             |   706     4
   198       | */                                                                                              |   707     4
   199       |#ifndef __SYSCID                                                                                 |   708     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |   709     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |   710     4
   202       |#else                                                                                            |   711     4
   203       |#define __SYSCID(s)     struct __hack                                                            |   712     4
   204       |#endif                                                                                           |   713     4
   205       |#endif                                                                                           |   714     4
   206       |                                                                                                 |   715     4
   207       |#ifndef __RCSID_SOURCE                                                                           |   716     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |   717     4
   209       |#endif                                                                                           |   718     4
   210       |                                                                                                 |   719     4
   211       |#ifndef __COPYRIGHT                                                                              |   720     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |   721     4
   213       |#endif                                                                                           |   722     4
   214       |                                                                                                 |   723     4
   215       |                                                                                                 |   724     4
   216       |#ifndef __DECONST                                                                                |   725     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |   726     4
   218       |#endif                                                                                           |   727     4
   219       |                                                                                                 |   728     4
   220       |#ifndef __DEVOLATILE                                                                             |   729     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |   730     4
   222       |#endif                                                                                           |   731     4
   223       |                                                                                                 |   732     4
   224       |#ifndef __DEQUALIFY                                                                              |   733     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |   734     4
   226       |#endif                                                                                           |   735     4
   227       |                                                                                                 |   736     4
   228       |                                                                                                 |   737     4
   229       |/*-                                                                                              |   738     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    16


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   230       | * The following definitions are an extension of the behavior originally                         |   739     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   740     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |   741     4
   233       | * header file is included.                                                                      |   742     4
   234       | *                                                                                               |   743     4
   235       | * Here's a quick run-down of the versions:                                                      |   744     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   745     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   746     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   747     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   748     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   749     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   750     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   751     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   752     4
   244       | *                                                                                               |   753     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   754     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |   755     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   756     4
   248       | *                                                                                               |   757     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |   758     4
   250       | */                                                                                              |   759     4
   251       |                                                                                                 |   760     4
   252       |/*                                                                                               |   761     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |   762     4
   254       | * available. Also make them available when requested so.                                        |   763     4
   255       | */                                                                                              |   764     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |   765     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |   766     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |   767     4
   259       |#define __DF_VISIBLE    1                                                                        |   768     4
   260       |#else                                                                                            |   769     4
   261       |#define __DF_VISIBLE    0                                                                        |   770     4
   262       |#endif                                                                                           |   771     4
   263       |                                                                                                 |   772     4
   264       |/*-                                                                                              |   773     4
   265       | * The following definitions are an extension of the behavior originally                         |   774     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   775     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |   776     4
   268       | * header file is included.                                                                      |   777     4
   269       | *                                                                                               |   778     4
   270       | * Here's a quick run-down of the versions:                                                      |   779     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   780     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   781     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   782     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   783     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   784     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   785     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   786     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   787     4
   279       | *                                                                                               |   788     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   789     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |   790     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   791     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    17


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   283       | *                                                                                               |   792     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |   793     4
   285       | */                                                                                              |   794     4
   286       |                                                                                                 |   795     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |   796     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |   797     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |   798     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |   799     4
   291       |#endif                                                                                           |   800     4
   292       |                                                                                                 |   801     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |   802     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |   803     4
   295       |#undef _POSIX_C_SOURCE                                                                           |   804     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |   805     4
   297       |#endif                                                                                           |   806     4
   298       |                                                                                                 |   807     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |   808     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |   809     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |   810     4
   302       |#define __XSI_VISIBLE           700                                                              |   811     4
   303       |#undef _POSIX_C_SOURCE                                                                           |   812     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |   813     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |   814     4
   306       |#define __XSI_VISIBLE           600                                                              |   815     4
   307       |#undef _POSIX_C_SOURCE                                                                           |   816     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |   817     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |   818     4
   310       |#define __XSI_VISIBLE           500                                                              |   819     4
   311       |#undef _POSIX_C_SOURCE                                                                           |   820     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |   821     4
   313       |#endif                                                                                           |   822     4
   314       |#endif                                                                                           |   823     4
   315       |                                                                                                 |   824     4
   316       |/*                                                                                               |   825     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |   826     4
   318       | * important.                                                                                    |   827     4
   319       | */                                                                                              |   828     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |   829     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |   830     4
   322       |#endif                                                                                           |   831     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |   832     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |   833     4
   325       |#define __POSIX_VISIBLE         200809                                                           |   834     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |   835     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |   836     4
   328       |#define __POSIX_VISIBLE         200112                                                           |   837     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |   838     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |   839     4
   331       |#define __POSIX_VISIBLE         199506                                                           |   840     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |   841     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |   842     4
   334       |#define __POSIX_VISIBLE         199309                                                           |   843     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |   844     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    18


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |   845     4
   337       |#define __POSIX_VISIBLE         199209                                                           |   846     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |   847     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |   848     4
   340       |#define __POSIX_VISIBLE         199009                                                           |   849     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |   850     4
   342       |#else                                                                                            |   851     4
   343       |#define __POSIX_VISIBLE         198808                                                           |   852     4
   344       |#define __ISO_C_VISIBLE         0                                                                |   853     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |   854     4
   346       |#else                                                                                            |   855     4
   347       |/*-                                                                                              |   856     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |   857     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |   858     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |   859     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |   860     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |   861     4
   353       | * a test program to print out the values.                                                       |   862     4
   354       | *                                                                                               |   863     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |   864     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |   865     4
   357       | * environment (and in fact we will never get here).                                             |   866     4
   358       | */                                                                                              |   867     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |   868     4
   360       |#define __POSIX_VISIBLE         0                                                                |   869     4
   361       |#define __XSI_VISIBLE           0                                                                |   870     4
   362       |#define __BSD_VISIBLE           0                                                                |   871     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |   872     4
   364       |#define __EXT1_VISIBLE          0                                                                |   873     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |   874     4
   366       |#define __POSIX_VISIBLE         0                                                                |   875     4
   367       |#define __XSI_VISIBLE           0                                                                |   876     4
   368       |#define __BSD_VISIBLE           0                                                                |   877     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |   878     4
   370       |#define __EXT1_VISIBLE          0                                                                |   879     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |   880     4
   372       |#define __POSIX_VISIBLE         0                                                                |   881     4
   373       |#define __XSI_VISIBLE           0                                                                |   882     4
   374       |#define __BSD_VISIBLE           0                                                                |   883     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |   884     4
   376       |#define __EXT1_VISIBLE          0                                                                |   885     4
   377       |#else                           /* Default environment: show everything. */                      |   886     4
   378       |#define __POSIX_VISIBLE         200809                                                           |   887     4
   379       |#define __XSI_VISIBLE           700                                                              |   888     4
   380       |#define __BSD_VISIBLE           1                                                                |   889     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |   890     4
   382       |#define __EXT1_VISIBLE          1                                                                |   891     4
   383       |#endif                                                                                           |   892     4
   384       |#endif                                                                                           |   893     4
   385       |                                                                                                 |   894     4
   386       |/* User override __EXT1_VISIBLE */                                                               |   895     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |   896     4
   388       |#undef  __EXT1_VISIBLE                                                                           |   897     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    19


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |   898     4
   390       |#define __EXT1_VISIBLE          1                                                                |   899     4
   391       |#else                                                                                            |   900     4
   392       |#define __EXT1_VISIBLE          0                                                                |   901     4
   393       |#endif                                                                                           |   902     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |   903     4
   395       |                                                                                                 |   904     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |   905     4
   397       |#define __NO_TLS 1                                                                               |   906     4
   398       |#endif                                                                                           |   907     4
   399       |                                                                                                 |   908     4
   400       |                                                                                                 |   909     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |   910     4
   402       |#define __FBSDID(x)                                                                              |   911     4
   403       |                                                                                                 |   912     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |   913     4
   405       |#pragma pack(reset)                                                                              |   914     4
    38       |#include <sys/_types.h>                                                                          |   915     5
     1       |/* release 2.25.00 */                                                                            |   916     6
     2       |#pragma pack()                                                                                   |   917     6
     3       |/*-                                                                                              |   918     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |   919     6
     5       | * All rights reserved.                                                                          |   920     6
     6       | *                                                                                               |   921     6
     7       | * Redistribution and use in source and binary forms, with or without                            |   922     6
     8       | * modification, are permitted provided that the following conditions                            |   923     6
     9       | * are met:                                                                                      |   924     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |   925     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |   926     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |   927     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |   928     6
    14       | *    documentation and/or other materials provided with the distribution.                       |   929     6
    15       | *                                                                                               |   930     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |   931     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   932     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   933     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |   934     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   935     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   936     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   937     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   938     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   939     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   940     6
    26       | * SUCH DAMAGE.                                                                                  |   941     6
    27       | *                                                                                               |   942     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |   943     6
    29       | */                                                                                              |   944     6
    30       |                                                                                                 |   945     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |   946     6
    32       |#define _SYS__TYPES_H_                                                                           |   947     6
    33       |                                                                                                 |   948     6
    34       |#include <sys/cdefs.h>                                                                           |   949     6
     1       |/* release 2.25.00 */                                                                            |   950     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    20


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |   951     4
     3       |/*                                                                                               |   952     4
     4       | * Copyright (c) 1991, 1993                                                                      |   953     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |   954     4
     6       | *                                                                                               |   955     4
     7       | * This code is derived from software contributed to Berkeley by                                 |   956     4
     8       | * Berkeley Software Design, Inc.                                                                |   957     4
     9       | *                                                                                               |   958     4
    10       | * Redistribution and use in source and binary forms, with or without                            |   959     4
    11       | * modification, are permitted provided that the following conditions                            |   960     4
    12       | * are met:                                                                                      |   961     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |   962     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |   963     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |   964     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |   965     4
    17       | *    documentation and/or other materials provided with the distribution.                       |   966     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |   967     4
    19       | *    must display the following acknowledgement:                                                |   968     4
    20       | *      This product includes software developed by the University of                            |   969     4
    21       | *      California, Berkeley and its contributors.                                               |   970     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |   971     4
    23       | *    may be used to endorse or promote products derived from this software                      |   972     4
    24       | *    without specific prior written permission.                                                 |   973     4
    25       | *                                                                                               |   974     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |   975     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   976     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   977     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |   978     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   979     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   980     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   981     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   982     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   983     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   984     4
    36       | * SUCH DAMAGE.                                                                                  |   985     4
    37       | *                                                                                               |   986     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |   987     4
    39       | */                                                                                              |   988     4
    40       |                                                                                                 |   989     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |   990     4
    42       |#define _SYS_CDEFS_H_                                                                            |   991     4
    43       |                                                                                                 |   992     4
    44       |#if defined(__cplusplus)                                                                         |   993     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |   994     4
    46       |#define __END_DECLS     }                                                                        |   995     4
    47       |#else                                                                                            |   996     4
    48       |#define __BEGIN_DECLS                                                                            |   997     4
    49       |#define __END_DECLS                                                                              |   998     4
    50       |#endif                                                                                           |   999     4
    51       |                                                                                                 |  1000     4
    52       |/*                                                                                               |  1001     4
    53       | * This code has been put in place to help reduce the addition of                                |  1002     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  1003     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    21


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       | * having a compiler-agnostic source tree.                                                       |  1004     4
    56       | */                                                                                              |  1005     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  1006     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  1007     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  1008     4
    60       |                                                                                                 |  1009     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  1010     4
    62       |                                                                                                 |  1011     4
    63       |                                                                                                 |  1012     4
    64       |/*                                                                                               |  1013     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  1014     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  1015     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  1016     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  1017     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  1018     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  1019     4
    71       | * this only works with ANSI C.                                                                  |  1020     4
    72       | *                                                                                               |  1021     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  1022     4
    74       | * first.  It is only available with ANSI C.                                                     |  1023     4
    75       | */                                                                                              |  1024     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  1025     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  1026     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  1027     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  1028     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  1029     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  1030     4
    82       |                                                                                                 |  1031     4
    83       |#define __const         const           /* define reserved names to standard */                  |  1032     4
    84       |#define __signed        signed                                                                   |  1033     4
    85       |#define __volatile      volatile                                                                 |  1034     4
    86       |#if defined(__cplusplus)                                                                         |  1035     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  1036     4
    88       |#else                                                                                            |  1037     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  1038     4
    90       |#endif /* !__cplusplus */                                                                        |  1039     4
    91       |                                                                                                 |  1040     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  1041     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  1042     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  1043     4
    95       |#define __STRING(x)     "x"                                                                      |  1044     4
    96       |                                                                                                 |  1045     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  1046     4
    98       |#define __inline                                                                                 |  1047     4
    99       |#define __signed                                                                                 |  1048     4
   100       |#define __volatile                                                                               |  1049     4
   101       |/*                                                                                               |  1050     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  1051     4
   103       | * deleted from the program and old programs will want them left alone.                          |  1052     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  1053     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  1054     4
   106       | */                                                                                              |  1055     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  1056     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    22


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   108       |#define const                           /* delete ANSI C keywords */                             |  1057     4
   109       |#define inline                                                                                   |  1058     4
   110       |#define signed                                                                                   |  1059     4
   111       |#define volatile                                                                                 |  1060     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  1061     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  1062     4
   114       |                                                                                                 |  1063     4
   115       |/*                                                                                               |  1064     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  1065     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  1066     4
   118       | */                                                                                              |  1067     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  1068     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  1069     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  1070     4
   122       |#define __unused                                                                                 |  1071     4
   123       |#define __aligned(x)                                                                             |  1072     4
   124       |#define __section(x)                                                                             |  1073     4
   125       |#define __nonnull(x)                                                                             |  1074     4
   126       |#define __used                                                                                   |  1075     4
   127       |                                                                                                 |  1076     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  1077     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  1078     4
   130       |                                                                                                 |  1079     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  1080     4
   132       |#define __func__  NULL                                                                           |  1081     4
   133       |#endif                                                                                           |  1082     4
   134       |                                                                                                 |  1083     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  1084     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  1085     4
   137       |#endif                                                                                           |  1086     4
   138       |                                                                                                 |  1087     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  1088     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  1089     4
   141       | **/                                                                                             |  1090     4
   142       |#ifndef __cplusplus                                                                              |  1091     4
   143       |#define __restrict __restrict__                                                                  |  1092     4
   144       |#else                                                                                            |  1093     4
   145       |/* Systems/C++ does not */                                                                       |  1094     4
   146       |#define __restrict                                                                               |  1095     4
   147       |#endif                                                                                           |  1096     4
   148       |                                                                                                 |  1097     4
   149       |/*                                                                                               |  1098     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  1099     4
   151       | */                                                                                              |  1100     4
   152       |#define __predict_true(exp)     (exp)                                                            |  1101     4
   153       |#define __predict_false(exp)    (exp)                                                            |  1102     4
   154       |                                                                                                 |  1103     4
   155       |                                                                                                 |  1104     4
   156       |/*                                                                                               |  1105     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  1106     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  1107     4
   159       | *                                                                                               |  1108     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  1109     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    23


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  1110     4
   162       | */                                                                                              |  1111     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  1112     4
   164       |#undef __offsetof                                                                                |  1113     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  1114     4
   166       |#endif                                                                                           |  1115     4
   167       |                                                                                                 |  1116     4
   168       |/*                                                                                               |  1117     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  1118     4
   170       | * or scanf-like arguments.                                                                      |  1119     4
   171       | */                                                                                              |  1120     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  1121     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  1122     4
   174       |#define __format_arg(fmtarg)                                                                     |  1123     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  1124     4
   176       |                                                                                                 |  1125     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  1126     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  1127     4
   179       |                                                                                                 |  1128     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  1129     4
   181       |#define __weak_reference(sym,alias)                                                              |  1130     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  1131     4
   183       |#define __warn_references(sym,msg)                                                               |  1132     4
   184       |                                                                                                 |  1133     4
   185       | /* This places the string into the resulting object.  It should */                              |  1134     4
   186       | /* probably become #pragma ident */                                                             |  1135     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  1136     4
   188       |                                                                                                 |  1137     4
   189       |#ifndef __RCSID                                                                                  |  1138     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  1139     4
   191       |#endif                                                                                           |  1140     4
   192       |                                                                                                 |  1141     4
   193       |/*                                                                                               |  1142     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  1143     4
   195       | * Usage:                                                                                        |  1144     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  1145     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  1146     4
   198       | */                                                                                              |  1147     4
   199       |#ifndef __SYSCID                                                                                 |  1148     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  1149     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  1150     4
   202       |#else                                                                                            |  1151     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  1152     4
   204       |#endif                                                                                           |  1153     4
   205       |#endif                                                                                           |  1154     4
   206       |                                                                                                 |  1155     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  1156     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  1157     4
   209       |#endif                                                                                           |  1158     4
   210       |                                                                                                 |  1159     4
   211       |#ifndef __COPYRIGHT                                                                              |  1160     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  1161     4
   213       |#endif                                                                                           |  1162     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    24


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   214       |                                                                                                 |  1163     4
   215       |                                                                                                 |  1164     4
   216       |#ifndef __DECONST                                                                                |  1165     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  1166     4
   218       |#endif                                                                                           |  1167     4
   219       |                                                                                                 |  1168     4
   220       |#ifndef __DEVOLATILE                                                                             |  1169     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  1170     4
   222       |#endif                                                                                           |  1171     4
   223       |                                                                                                 |  1172     4
   224       |#ifndef __DEQUALIFY                                                                              |  1173     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  1174     4
   226       |#endif                                                                                           |  1175     4
   227       |                                                                                                 |  1176     4
   228       |                                                                                                 |  1177     4
   229       |/*-                                                                                              |  1178     4
   230       | * The following definitions are an extension of the behavior originally                         |  1179     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  1180     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  1181     4
   233       | * header file is included.                                                                      |  1182     4
   234       | *                                                                                               |  1183     4
   235       | * Here's a quick run-down of the versions:                                                      |  1184     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  1185     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  1186     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  1187     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  1188     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  1189     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  1190     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  1191     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  1192     4
   244       | *                                                                                               |  1193     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  1194     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  1195     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  1196     4
   248       | *                                                                                               |  1197     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  1198     4
   250       | */                                                                                              |  1199     4
   251       |                                                                                                 |  1200     4
   252       |/*                                                                                               |  1201     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  1202     4
   254       | * available. Also make them available when requested so.                                        |  1203     4
   255       | */                                                                                              |  1204     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  1205     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  1206     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  1207     4
   259       |#define __DF_VISIBLE    1                                                                        |  1208     4
   260       |#else                                                                                            |  1209     4
   261       |#define __DF_VISIBLE    0                                                                        |  1210     4
   262       |#endif                                                                                           |  1211     4
   263       |                                                                                                 |  1212     4
   264       |/*-                                                                                              |  1213     4
   265       | * The following definitions are an extension of the behavior originally                         |  1214     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  1215     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    25


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  1216     4
   268       | * header file is included.                                                                      |  1217     4
   269       | *                                                                                               |  1218     4
   270       | * Here's a quick run-down of the versions:                                                      |  1219     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  1220     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  1221     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  1222     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  1223     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  1224     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  1225     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  1226     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  1227     4
   279       | *                                                                                               |  1228     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  1229     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  1230     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  1231     4
   283       | *                                                                                               |  1232     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  1233     4
   285       | */                                                                                              |  1234     4
   286       |                                                                                                 |  1235     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  1236     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  1237     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  1238     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  1239     4
   291       |#endif                                                                                           |  1240     4
   292       |                                                                                                 |  1241     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  1242     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  1243     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  1244     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  1245     4
   297       |#endif                                                                                           |  1246     4
   298       |                                                                                                 |  1247     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  1248     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  1249     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  1250     4
   302       |#define __XSI_VISIBLE           700                                                              |  1251     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  1252     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  1253     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  1254     4
   306       |#define __XSI_VISIBLE           600                                                              |  1255     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  1256     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  1257     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  1258     4
   310       |#define __XSI_VISIBLE           500                                                              |  1259     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  1260     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  1261     4
   313       |#endif                                                                                           |  1262     4
   314       |#endif                                                                                           |  1263     4
   315       |                                                                                                 |  1264     4
   316       |/*                                                                                               |  1265     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  1266     4
   318       | * important.                                                                                    |  1267     4
   319       | */                                                                                              |  1268     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    26


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  1269     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  1270     4
   322       |#endif                                                                                           |  1271     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  1272     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  1273     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  1274     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  1275     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  1276     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  1277     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  1278     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  1279     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  1280     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  1281     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  1282     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  1283     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  1284     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  1285     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  1286     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  1287     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  1288     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  1289     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  1290     4
   342       |#else                                                                                            |  1291     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  1292     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  1293     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  1294     4
   346       |#else                                                                                            |  1295     4
   347       |/*-                                                                                              |  1296     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  1297     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  1298     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  1299     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  1300     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  1301     4
   353       | * a test program to print out the values.                                                       |  1302     4
   354       | *                                                                                               |  1303     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  1304     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  1305     4
   357       | * environment (and in fact we will never get here).                                             |  1306     4
   358       | */                                                                                              |  1307     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  1308     4
   360       |#define __POSIX_VISIBLE         0                                                                |  1309     4
   361       |#define __XSI_VISIBLE           0                                                                |  1310     4
   362       |#define __BSD_VISIBLE           0                                                                |  1311     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  1312     4
   364       |#define __EXT1_VISIBLE          0                                                                |  1313     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  1314     4
   366       |#define __POSIX_VISIBLE         0                                                                |  1315     4
   367       |#define __XSI_VISIBLE           0                                                                |  1316     4
   368       |#define __BSD_VISIBLE           0                                                                |  1317     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  1318     4
   370       |#define __EXT1_VISIBLE          0                                                                |  1319     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  1320     4
   372       |#define __POSIX_VISIBLE         0                                                                |  1321     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    27


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   373       |#define __XSI_VISIBLE           0                                                                |  1322     4
   374       |#define __BSD_VISIBLE           0                                                                |  1323     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  1324     4
   376       |#define __EXT1_VISIBLE          0                                                                |  1325     4
   377       |#else                           /* Default environment: show everything. */                      |  1326     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  1327     4
   379       |#define __XSI_VISIBLE           700                                                              |  1328     4
   380       |#define __BSD_VISIBLE           1                                                                |  1329     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  1330     4
   382       |#define __EXT1_VISIBLE          1                                                                |  1331     4
   383       |#endif                                                                                           |  1332     4
   384       |#endif                                                                                           |  1333     4
   385       |                                                                                                 |  1334     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  1335     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  1336     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  1337     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  1338     4
   390       |#define __EXT1_VISIBLE          1                                                                |  1339     4
   391       |#else                                                                                            |  1340     4
   392       |#define __EXT1_VISIBLE          0                                                                |  1341     4
   393       |#endif                                                                                           |  1342     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  1343     4
   395       |                                                                                                 |  1344     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  1345     4
   397       |#define __NO_TLS 1                                                                               |  1346     4
   398       |#endif                                                                                           |  1347     4
   399       |                                                                                                 |  1348     4
   400       |                                                                                                 |  1349     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  1350     4
   402       |#define __FBSDID(x)                                                                              |  1351     4
   403       |                                                                                                 |  1352     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  1353     4
   405       |#pragma pack(reset)                                                                              |  1354     4
    35       |#include <machine/_types.h>                                                                      |  1355     6
     1       |/* release 2.25.00 */                                                                            |  1356     7
     2       |#pragma pack()                                                                                   |  1357     7
     3       |/*-                                                                                              |  1358     7
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  1359     7
     5       | * Copyright (c) 1990, 1993                                                                      |  1360     7
     6       | *      The Regents of the University of California.  All rights reserved.                       |  1361     7
     7       | *                                                                                               |  1362     7
     8       | * Redistribution and use in source and binary forms, with or without                            |  1363     7
     9       | * modification, are permitted provided that the following conditions                            |  1364     7
    10       | * are met:                                                                                      |  1365     7
    11       | * 1. Redistributions of source code must retain the above copyright                             |  1366     7
    12       | *    notice, this list of conditions and the following disclaimer.                              |  1367     7
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  1368     7
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  1369     7
    15       | *    documentation and/or other materials provided with the distribution.                       |  1370     7
    16       | * 3. All advertising materials mentioning features or use of this software                      |  1371     7
    17       | *    must display the following acknowledgement:                                                |  1372     7
    18       | *      This product includes software developed by the University of                            |  1373     7
    19       | *      California, Berkeley and its contributors.                                               |  1374     7
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    28


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  1375     7
    21       | *    may be used to endorse or promote products derived from this software                      |  1376     7
    22       | *    without specific prior written permission.                                                 |  1377     7
    23       | *                                                                                               |  1378     7
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  1379     7
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  1380     7
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  1381     7
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  1382     7
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  1383     7
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  1384     7
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  1385     7
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  1386     7
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  1387     7
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  1388     7
    34       | * SUCH DAMAGE.                                                                                  |  1389     7
    35       | *                                                                                               |  1390     7
    36       | *      From: @(#)ansi.h        8.2 (Berkeley) 1/4/94                                            |  1391     7
    37       | *      From: @(#)types.h       8.3 (Berkeley) 1/5/94                                            |  1392     7
    38       | * $FreeBSD: src/sys/i386/include/_types.h,v 1.12 2005/07/02 23:13:31                            |  1393     7
    39       | *  thompsa Exp $                                                                                |  1394     7
    40       | */                                                                                              |  1395     7
    41       |                                                                                                 |  1396     7
    42       |#ifndef _MACHINE__TYPES_H_                                                                       |  1397     7
    43       |#define _MACHINE__TYPES_H_                                                                       |  1398     7
    44       |                                                                                                 |  1399     7
    45       |#ifndef _SYS_CDEFS_H_                                                                            |  1400     7
    46       |#error this file needs sys/cdefs.h as a prerequisite                                             |  1401     7
    47       |#endif                                                                                           |  1402     7
    48       |                                                                                                 |  1403     7
    49       |#define __NO_STRICT_ALIGNMENT                                                                    |  1404     7
    50       |                                                                                                 |  1405     7
    51       |/*                                                                                               |  1406     7
    52       | * Basic types upon which most other types are built.                                            |  1407     7
    53       | */                                                                                              |  1408     7
    54       |typedef __signed char           __int8_t;                                                        |  1409     7
    54       +typedef signed char             __int8_t;                                                        +  1409     7
    55       |typedef unsigned char           __uint8_t;                                                       |  1410     7
    56       |typedef short                   __int16_t;                                                       |  1411     7
    57       |typedef unsigned short          __uint16_t;                                                      |  1412     7
    58       |typedef int                     __int32_t;                                                       |  1413     7
    59       |typedef unsigned int            __uint32_t;                                                      |  1414     7
    60       |                                                                                                 |  1415     7
    61       |#if defined(lint)                                                                                |  1416     7
    62       |/* LONGLONG */                                                                                   |  1417     7
    63       |typedef long long               __int64_t;                                                       |  1418     7
    64       |/* LONGLONG */                                                                                   |  1419     7
    65       |typedef unsigned long long      __uint64_t;                                                      |  1420     7
    66       |#elif defined(__GNUCLIKE_ATTRIBUTE_MODE_DI)                                                      |  1421     7
    67       |typedef int __attribute__((__mode__(__DI__)))           __int64_t;                               |  1422     7
    68       |typedef unsigned int __attribute__((__mode__(__DI__)))  __uint64_t;                              |  1423     7
    69       |#else                                                                                            |  1424     7
    70       |/* LONGLONG */                                                                                   |  1425     7
    71       |typedef long long               __int64_t;                                                       |  1426     7
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    29


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    72       |/* LONGLONG */                                                                                   |  1427     7
    73       |typedef unsigned long long      __uint64_t;                                                      |  1428     7
    74       |#endif                                                                                           |  1429     7
    75       |                                                                                                 |  1430     7
    76       |/*                                                                                               |  1431     7
    77       | * Standard type definitions.                                                                    |  1432     7
    78       | */                                                                                              |  1433     7
    79       |typedef unsigned long   __clock_t;              /* clock()... */                                 |  1434     7
    80       |typedef unsigned int    __cpumask_t;                                                             |  1435     7
    81       |typedef __int32_t       __critical_t;                                                            |  1436     7
    82       |typedef double          __double_t;                                                              |  1437     7
    83       |typedef double          __float_t;                                                               |  1438     7
    84       |#ifdef __SYSC_64BIT__                                                                            |  1439     7
    85       |typedef __int64_t       __intfptr_t;                                                             |  1440     7
    86       |#else /* !__SYSC_64_BIT__: */                                                                    |  1441     7
    87       |typedef __int32_t       __intfptr_t;                                                             |  1442     7
    88       |#endif /* __SYSC_64_BIT__ */                                                                     |  1443     7
    89       |typedef __int64_t       __intmax_t;                                                              |  1444     7
    90       |typedef __int32_t       __int_fast8_t;                                                           |  1445     7
    91       |typedef __int32_t       __int_fast16_t;                                                          |  1446     7
    92       |typedef __int32_t       __int_fast32_t;                                                          |  1447     7
    93       |typedef __int64_t       __int_fast64_t;                                                          |  1448     7
    94       |typedef __int8_t        __int_least8_t;                                                          |  1449     7
    95       |typedef __int16_t       __int_least16_t;                                                         |  1450     7
    96       |typedef __int32_t       __int_least32_t;                                                         |  1451     7
    97       |typedef __int64_t       __int_least64_t;                                                         |  1452     7
    98       |#ifdef __SYSC_64BIT__                                                                            |  1453     7
    99       |typedef __int64_t       __ptrdiff_t;            /* ptr1 - ptr2 */                                |  1454     7
   100       |typedef __int64_t       __register_t;                                                            |  1455     7
   101       |typedef __int64_t       __segsz_t;              /* segment size (in pages) */                    |  1456     7
   102       |/* was "__uint64_t" for __size_t, but I am using "unsigned long" instead                         |  1457     7
   103       | * because it's what the C++ compiler prefers, and it should be the same.  Note                  |  1458     7
   104       | * that this will fall over if (pointer_is_64_bits && !long_is_64_bits), but                     |  1459     7
   105       | * that's not possible at the moment. - Greg 2008/09/24 */                                       |  1460     7
   106       |typedef unsigned long   __size_t;               /* sizeof() */                                   |  1461     7
   107       |typedef __int64_t       __ssize_t;              /* byte count or error */                        |  1462     7
   108       |typedef __int64_t       __time_t;               /* time()... */                                  |  1463     7
   109       |typedef __uint64_t      __uintfptr_t;                                                            |  1464     7
   110       |typedef __int64_t       __intptr_t;                                                              |  1465     7
   111       |typedef __uint64_t      __uintptr_t;                                                             |  1466     7
   112       |typedef __uint64_t      __u_register_t;                                                          |  1467     7
   113       |typedef __uint64_t      __vm_offset_t;                                                           |  1468     7
   114       |typedef __uint64_t      __vm_size_t;                                                             |  1469     7
   115       |#else /* !__SYSC_64_BIT__: */                                                                    |  1470     7
   116       |typedef __int32_t       __ptrdiff_t;            /* ptr1 - ptr2 */                                |  1471     7
   117       |typedef __int32_t       __register_t;                                                            |  1472     7
   118       |typedef __int32_t       __segsz_t;              /* segment size (in pages) */                    |  1473     7
   119       |typedef __uint32_t      __size_t;               /* sizeof() */                                   |  1474     7
   120       |typedef __int32_t       __ssize_t;              /* byte count or error */                        |  1475     7
   121       |typedef __int64_t       __time_t;               /* time()... */                                  |  1476     7
   122       |typedef __uint32_t      __uintfptr_t;                                                            |  1477     7
   123       |typedef __int32_t       __intptr_t;                                                              |  1478     7
   124       |typedef __uint32_t      __uintptr_t;                                                             |  1479     7
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    30


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   125       |typedef __uint32_t      __u_register_t;                                                          |  1480     7
   126       |typedef __uint32_t      __vm_offset_t;                                                           |  1481     7
   127       |typedef __uint32_t      __vm_size_t;                                                             |  1482     7
   128       |#endif /* __SYSC_64_BIT__ */                                                                     |  1483     7
   129       |typedef __uint64_t      __uintmax_t;                                                             |  1484     7
   130       |typedef __uint32_t      __uint_fast8_t;                                                          |  1485     7
   131       |typedef __uint32_t      __uint_fast16_t;                                                         |  1486     7
   132       |typedef __uint32_t      __uint_fast32_t;                                                         |  1487     7
   133       |typedef __uint64_t      __uint_fast64_t;                                                         |  1488     7
   134       |typedef __uint8_t       __uint_least8_t;                                                         |  1489     7
   135       |typedef __uint16_t      __uint_least16_t;                                                        |  1490     7
   136       |typedef __uint32_t      __uint_least32_t;                                                        |  1491     7
   137       |typedef __uint64_t      __uint_least64_t;                                                        |  1492     7
   138       |typedef __int64_t       __vm_ooffset_t;                                                          |  1493     7
   139       |#if defined(PAE) || defined(__SYSC_64BIT__)                                                      |  1494     7
   140       |typedef __uint64_t      __vm_paddr_t;                                                            |  1495     7
   141       |#else                                                                                            |  1496     7
   142       |typedef __uint32_t      __vm_paddr_t;                                                            |  1497     7
   143       |#endif                                                                                           |  1498     7
   144       |typedef __uint64_t      __vm_pindex_t;                                                           |  1499     7
   145       |                                                                                                 |  1500     7
   146       |/*                                                                                               |  1501     7
   147       | * Unusual type definitions.                                                                     |  1502     7
   148       | */                                                                                              |  1503     7
   149       |#ifdef __GNUCLIKE_BUILTIN_VARARGS                                                                |  1504     7
   150       |typedef __builtin_va_list       __va_list;      /* internally known to gcc */                    |  1505     7
   151       |#else                                                                                            |  1506     7
   152       |typedef char *                  __va_list;                                                       |  1507     7
   153       |#endif /* __GNUCLIKE_BUILTIN_VARARGS */                                                          |  1508     7
   154       |#if defined(__GNUC_VA_LIST_COMPATIBILITY) && !defined(__GNUC_VA_LIST) \                          |  1509     7
   155       |    && !defined(__NO_GNUC_VA_LIST)                                                               |  1510     7
   156       |#define __GNUC_VA_LIST                                                                           |  1511     7
   157       |typedef __va_list               __gnuc_va_list; /* compatibility w/GNU headers*/                 |  1512     7
   158       |#endif                                                                                           |  1513     7
   159       |                                                                                                 |  1514     7
   160       |#endif /* !_MACHINE__TYPES_H_ */                                                                 |  1515     7
   161       |#pragma pack(reset)                                                                              |  1516     7
    36       |                                                                                                 |  1517     6
    37       |/*                                                                                               |  1518     6
    38       | * Standard type definitions.                                                                    |  1519     6
    39       | */                                                                                              |  1520     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  1521     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  1522     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  1523     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  1524     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  1525     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  1526     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  1527     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  1528     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  1529     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  1530     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  1531     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  1532     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    31


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |typedef int             __nl_item;                                                               |  1533     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  1534     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  1535     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  1536     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  1537     6
    57       |                                        /* signed, because of legacy code */                     |  1538     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  1539     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  1540     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  1541     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  1542     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  1543     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  1544     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  1545     6
    65       |                                                                                                 |  1546     6
    66       |/*                                                                                               |  1547     6
    67       | * Unusual type definitions.                                                                     |  1548     6
    68       | */                                                                                              |  1549     6
    69       |/*                                                                                               |  1550     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  1551     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  1552     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  1553     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  1554     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  1555     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  1556     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  1557     6
    77       | *                                                                                               |  1558     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  1559     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  1560     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  1561     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  1562     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  1563     6
    83       | */                                                                                              |  1564     6
    84       |#ifdef __cplusplus                                                                               |  1565     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  1566     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  1567     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  1568     6
    88       |#else                                                                                            |  1569     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  1570     6
    90       |#endif                                                                                           |  1571     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  1572     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  1573     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  1574     6
    94       |                                                                                                 |  1575     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  1576     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  1577     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  1578     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  1579     6
    99       |#endif                                                                                           |  1580     6
   100       |                                                                                                 |  1581     6
   101       |#if !defined(__cplusplus)                                                                        |  1582     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  1583     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  1584     6
   104       |#endif                                                                                           |  1585     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    32


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   105       |                                                                                                 |  1586     6
   106       |                                                                                                 |  1587     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  1588     6
   108       |                                                                                                 |  1589     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  1590     6
   110       |                                                                                                 |  1591     6
   111       |/*                                                                                               |  1592     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  1593     6
   113       | * stream conversions.                                                                           |  1594     6
   114       | */                                                                                              |  1595     6
   115       |typedef union {                                                                                  |  1596     6
   116       |        char            __mbstate8[128];                                                         |  1597     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  1598     6
   118       |} __mbstate_t;                                                                                   |  1599     6
   119       |                                                                                                 |  1600     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  1601     6
   121       |#pragma pack(reset)                                                                              |  1602     6
    39       |                                                                                                 |  1603     5
    40       |#ifdef __cplusplus                                                                               |  1604     5
    41       |extern "C" {                                                                                     |  1605     5
    42       |#endif                                                                                           |  1606     5
    43       |                                                                                                 |  1607     5
    44       |/*                                                                                               |  1608     5
    45       | * Define the order of 32-bit words in 64-bit words.                                             |  1609     5
    46       | */                                                                                              |  1610     5
    47       |#define _QUAD_HIGHWORD 1                                                                         |  1611     5
    48       |#define _QUAD_LOWWORD 0                                                                          |  1612     5
    49       |                                                                                                 |  1613     5
    50       |/*                                                                                               |  1614     5
    51       | * Definitions for byte order, according to byte significance from low                           |  1615     5
    52       | * address to high.                                                                              |  1616     5
    53       | */                                                                                              |  1617     5
    54       |#define _LITTLE_ENDIAN  1234    /* LSB first: i386, vax */                                       |  1618     5
    55       |#define _BIG_ENDIAN     4321    /* MSB first: 68000, ibm, net */                                 |  1619     5
    56       |#define _PDP_ENDIAN     3412    /* LSB first in word, MSW first in long */                       |  1620     5
    57       |                                                                                                 |  1621     5
    58       |#define _BYTE_ORDER     _BIG_ENDIAN                                                              |  1622     5
    59       |                                                                                                 |  1623     5
    60       |/*                                                                                               |  1624     5
    61       | * Deprecated variants that don't have enough underscores to be useful in more                   |  1625     5
    62       | * strict namespaces.                                                                            |  1626     5
    63       | */                                                                                              |  1627     5
    64       |#if __BSD_VISIBLE                                                                                |  1628     5
    65       |#define LITTLE_ENDIAN   _LITTLE_ENDIAN                                                           |  1629     5
    66       |#define BIG_ENDIAN      _BIG_ENDIAN                                                              |  1630     5
    67       |#define PDP_ENDIAN      _PDP_ENDIAN                                                              |  1631     5
    68       |#define BYTE_ORDER      _BYTE_ORDER                                                              |  1632     5
    69       |#endif                                                                                           |  1633     5
    70       |                                                                                                 |  1634     5
    70       +                                                                                                 +  1634     5
    71       |/*                                                                                               |  1635     5
    72       | * The mainframe architecture is in "network" order, so there                                    |  1636     5
    73       | * is nothing for these macros to do.                                                            |  1637     5
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    33


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    74       | */                                                                                              |  1638     5
    75       |#define __htonl(x)      (x)                                                                      |  1639     5
    76       |#define __htons(x)      (x)                                                                      |  1640     5
    77       |#define __ntohl(x)      (x)                                                                      |  1641     5
    78       |#define __ntohs(x)      (x)                                                                      |  1642     5
    79       |                                                                                                 |  1643     5
    80       |#ifdef __cplusplus                                                                               |  1644     5
    81       |}                                                                                                |  1645     5
    82       |#endif                                                                                           |  1646     5
    83       |                                                                                                 |  1647     5
    84       |#endif /* !_MACHINE_ENDIAN_H_ */                                                                 |  1648     5
    85       |#pragma pack(reset)                                                                              |  1649     5
    47       |#include <sys/_types.h>                                                                          |  1650     3
     1       |/* release 2.25.00 */                                                                            |  1651     6
     2       |#pragma pack()                                                                                   |  1652     6
     3       |/*-                                                                                              |  1653     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  1654     6
     5       | * All rights reserved.                                                                          |  1655     6
     6       | *                                                                                               |  1656     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  1657     6
     8       | * modification, are permitted provided that the following conditions                            |  1658     6
     9       | * are met:                                                                                      |  1659     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  1660     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  1661     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  1662     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  1663     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  1664     6
    15       | *                                                                                               |  1665     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  1666     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  1667     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  1668     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  1669     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  1670     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  1671     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  1672     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  1673     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  1674     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  1675     6
    26       | * SUCH DAMAGE.                                                                                  |  1676     6
    27       | *                                                                                               |  1677     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  1678     6
    29       | */                                                                                              |  1679     6
    30       |                                                                                                 |  1680     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  1681     6
    32       |#define _SYS__TYPES_H_                                                                           |  1682     6
    33       |                                                                                                 |  1683     6
    34       |#include <sys/cdefs.h>                                                                           |  1684     6
    35       |#include <machine/_types.h>                                                                      |  1685     6
    36       |                                                                                                 |  1686     6
    37       |/*                                                                                               |  1687     6
    38       | * Standard type definitions.                                                                    |  1688     6
    39       | */                                                                                              |  1689     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  1690     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    34


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  1691     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  1692     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  1693     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  1694     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  1695     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  1696     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  1697     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  1698     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  1699     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  1700     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  1701     6
    52       |typedef int             __nl_item;                                                               |  1702     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  1703     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  1704     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  1705     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  1706     6
    57       |                                        /* signed, because of legacy code */                     |  1707     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  1708     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  1709     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  1710     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  1711     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  1712     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  1713     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  1714     6
    65       |                                                                                                 |  1715     6
    66       |/*                                                                                               |  1716     6
    67       | * Unusual type definitions.                                                                     |  1717     6
    68       | */                                                                                              |  1718     6
    69       |/*                                                                                               |  1719     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  1720     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  1721     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  1722     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  1723     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  1724     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  1725     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  1726     6
    77       | *                                                                                               |  1727     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  1728     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  1729     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  1730     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  1731     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  1732     6
    83       | */                                                                                              |  1733     6
    84       |#ifdef __cplusplus                                                                               |  1734     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  1735     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  1736     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  1737     6
    88       |#else                                                                                            |  1738     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  1739     6
    90       |#endif                                                                                           |  1740     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  1741     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  1742     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  1743     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    35


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    94       |                                                                                                 |  1744     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  1745     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  1746     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  1747     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  1748     6
    99       |#endif                                                                                           |  1749     6
   100       |                                                                                                 |  1750     6
   101       |#if !defined(__cplusplus)                                                                        |  1751     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  1752     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  1753     6
   104       |#endif                                                                                           |  1754     6
   105       |                                                                                                 |  1755     6
   106       |                                                                                                 |  1756     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  1757     6
   108       |                                                                                                 |  1758     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  1759     6
   110       |                                                                                                 |  1760     6
   111       |/*                                                                                               |  1761     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  1762     6
   113       | * stream conversions.                                                                           |  1763     6
   114       | */                                                                                              |  1764     6
   115       |typedef union {                                                                                  |  1765     6
   116       |        char            __mbstate8[128];                                                         |  1766     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  1767     6
   118       |} __mbstate_t;                                                                                   |  1768     6
   119       |                                                                                                 |  1769     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  1770     6
   121       |#pragma pack(reset)                                                                              |  1771     6
    48       |                                                                                                 |  1772     3
    49       |#include <sys/_pthreadtypes.h>                                                                   |  1773     3
     1       |/* release 2.25.00 */                                                                            |  1774     8
     2       |#pragma pack()                                                                                   |  1775     8
     3       |/*                                                                                               |  1776     8
     4       | * Copyright (c) 1993, 1994 by Chris Provenzano, proven@mit.edu                                  |  1777     8
     5       | * Copyright (c) 1995-1998 by John Birrell <jb@cimlogic.com.au>                                  |  1778     8
     6       | * All rights reserved.                                                                          |  1779     8
     7       | *                                                                                               |  1780     8
     8       | * Redistribution and use in source and binary forms, with or without                            |  1781     8
     9       | * modification, are permitted provided that the following conditions                            |  1782     8
    10       | * are met:                                                                                      |  1783     8
    11       | * 1. Redistributions of source code must retain the above copyright                             |  1784     8
    12       | *    notice, this list of conditions and the following disclaimer.                              |  1785     8
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  1786     8
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  1787     8
    15       | *    documentation and/or other materials provided with the distribution.                       |  1788     8
    16       | * 3. All advertising materials mentioning features or use of this software                      |  1789     8
    17       | *    must display the following acknowledgement:                                                |  1790     8
    18       | *  This product includes software developed by Chris Provenzano.                                |  1791     8
    19       | * 4. The name of Chris Provenzano may not be used to endorse or promote                         |  1792     8
    20       | *        products derived from this software without specific prior written                     |  1793     8
    21       | *        permission.                                                                            |  1794     8
    22       | *                                                                                               |  1795     8
    23       | * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND                                   |  1796     8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    36


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  1797     8
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  1798     8
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY                         |  1799     8
    27       | * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES                    |  1800     8
    28       | * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR                            |  1801     8
    29       | * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER                    |  1802     8
    30       | * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                            |  1803     8
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  1804     8
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  1805     8
    33       | * SUCH DAMAGE.                                                                                  |  1806     8
    34       | *                                                                                               |  1807     8
    35       | * $FreeBSD: src/sys/sys/_pthreadtypes.h,v 1.1 2005/05/31 15:18:17 rodrigc Exp $                 |  1808     8
    36       | */                                                                                              |  1809     8
    37       |                                                                                                 |  1810     8
    38       |#ifndef _SYS__PTHREADTYPES_H_                                                                    |  1811     8
    39       |#define _SYS__PTHREADTYPES_H_                                                                    |  1812     8
    40       |                                                                                                 |  1813     8
    41       |/*                                                                                               |  1814     8
    42       | * Forward structure definitions.                                                                |  1815     8
    43       | *                                                                                               |  1816     8
    44       | * These are mostly opaque to the user.                                                          |  1817     8
    45       | */                                                                                              |  1818     8
    46       |struct __pthread;                                                                                |  1819     8
    47       |struct pthread;                                                                                  |  1820     8
    48       |struct pthread_cond_attr;                                                                        |  1821     8
    49       |struct pthread_mutex_attr;                                                                       |  1822     8
    50       |struct pthread_once;                                                                             |  1823     8
    51       |struct pthread_rwlockattr;                                                                       |  1824     8
    52       |struct pthread_barrier_attr;                                                                     |  1825     8
    53       |struct pthread_spinlock;                                                                         |  1826     8
    54       |struct pthread_attr { union { int __i[16]; volatile int __vi[16];                                |  1827     8
    55       |                              unsigned long __s[8]; } __u; };                                    |  1828     8
    56       |struct pthread_mutex { union { int __i[10]; volatile int __vi[10];                               |  1829     8
    57       |                               volatile void *volatile __p[5]; } __u; };                         |  1830     8
    58       |struct pthread_cond { union { int __i[12]; volatile int __vi[12];                                |  1831     8
    59       |                              void *__p[6]; } __u; };                                            |  1832     8
    60       |struct pthread_rwlock { union { int __i[14]; volatile int __vi[14];                              |  1833     8
    61       |                                void *__p[7]; } __u; };                                          |  1834     8
    62       |struct pthread_barrier { union { int __i[8]; volatile int __vi[8];                               |  1835     8
    63       |                                 void *__p[4]; } __u; };                                         |  1836     8
    64       |                                                                                                 |  1837     8
    65       |                                                                                                 |  1838     8
    66       |/*                                                                                               |  1839     8
    67       | * Primitive system data type definitions required by P1003.1c.                                  |  1840     8
    68       | *                                                                                               |  1841     8
    69       | * Note that P1003.1c specifies that there are no defined comparison                             |  1842     8
    70       | * or assignment operators for the types pthread_attr_t, pthread_cond_t,                         |  1843     8
    71       | * pthread_condattr_t, pthread_mutex_t, pthread_mutexattr_t.                                     |  1844     8
    72       | */                                                                                              |  1845     8
    73       |#ifndef _PTHREAD_T_DECLARED                                                                      |  1846     8
    74       |typedef struct __pthread                        *pthread_t;                                      |  1847     8
    75       |#define _PTHREAD_T_DECLARED                                                                      |  1848     8
    76       |#endif                                                                                           |  1849     8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    37


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    77       |typedef struct  pthread_attr            pthread_attr_t;                                          |  1850     8
    78       |typedef struct  pthread_mutex           pthread_mutex_t;                                         |  1851     8
    79       |typedef struct { unsigned __attr; }     pthread_mutexattr_t;                                     |  1852     8
    80       |typedef struct  pthread_cond            pthread_cond_t;                                          |  1853     8
    81       |typedef struct { unsigned __attr; }     pthread_condattr_t;                                      |  1854     8
    82       |typedef unsigned int                    pthread_key_t;                                           |  1855     8
    83       |typedef int                             pthread_once_t;                                          |  1856     8
    84       |typedef struct { union { int __i[14]; volatile int __vi[14];                                     |  1857     8
    85       |                         void *__p[7]; } __u; } pthread_rwlock_t;                                |  1858     8
    86       |typedef struct { unsigned __attr[2]; }  pthread_rwlockattr_t;                                    |  1859     8
    87       |typedef struct pthread_barrier          pthread_barrier_t;                                       |  1860     8
    88       |typedef struct { unsigned __attr; }     pthread_barrierattr_t;                                   |  1861     8
    89       |typedef int                             pthread_spinlock_t;                                      |  1862     8
    90       |                                                                                                 |  1863     8
    91       |/*                                                                                               |  1864     8
    92       | * Additional type definitions:                                                                  |  1865     8
    93       | *                                                                                               |  1866     8
    94       | * Note that P1003.1c reserves the prefixes pthread_ and PTHREAD_ for                            |  1867     8
    95       | * use in header symbols.                                                                        |  1868     8
    96       | */                                                                                              |  1869     8
    97       |typedef void    *pthread_addr_t;                                                                 |  1870     8
    98       |typedef void    *(*pthread_startroutine_t)(void *);                                              |  1871     8
    99       |                                                                                                 |  1872     8
   100       |#endif /* ! _SYS__PTHREADTYPES_H_ */                                                             |  1873     8
   101       |#pragma pack(reset)                                                                              |  1874     8
    50       |                                                                                                 |  1875     3
    51       |#if __BSD_VISIBLE                                                                                |  1876     3
    52       |typedef unsigned char   u_char;                                                                  |  1877     3
    52       +typedef unsigned char   u_char;                                                                  +  1877     3
    53       |typedef unsigned short  u_short;                                                                 |  1878     3
    54       |typedef unsigned int    u_int;                                                                   |  1879     3
    55       |typedef unsigned long   u_long;                                                                  |  1880     3
    56       |#ifndef _KERNEL                                                                                  |  1881     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                |  1882     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                |  1883     3
    59       |#endif                                                                                           |  1884     3
    60       |#endif                                                                                           |  1885     3
    61       |                                                                                                 |  1886     3
    62       |/*                                                                                               |  1887     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          |  1888     3
    64       | */                                                                                              |  1889     3
    65       |#ifndef _INT8_T_DECLARED                                                                         |  1890     3
    66       |typedef __int8_t        int8_t;                                                                  |  1891     3
    67       |#define _INT8_T_DECLARED                                                                         |  1892     3
    68       |#endif                                                                                           |  1893     3
    69       |                                                                                                 |  1894     3
    70       |#ifndef _INT16_T_DECLARED                                                                        |  1895     3
    71       |typedef __int16_t       int16_t;                                                                 |  1896     3
    72       |#define _INT16_T_DECLARED                                                                        |  1897     3
    73       |#endif                                                                                           |  1898     3
    74       |                                                                                                 |  1899     3
    75       |#ifndef _INT32_T_DECLARED                                                                        |  1900     3
    76       |typedef __int32_t       int32_t;                                                                 |  1901     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    38


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    77       |#define _INT32_T_DECLARED                                                                        |  1902     3
    78       |#endif                                                                                           |  1903     3
    79       |                                                                                                 |  1904     3
    80       |#ifndef _INT64_T_DECLARED                                                                        |  1905     3
    81       |typedef __int64_t       int64_t;                                                                 |  1906     3
    82       |#define _INT64_T_DECLARED                                                                        |  1907     3
    83       |#endif                                                                                           |  1908     3
    84       |                                                                                                 |  1909     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        |  1910     3
    86       |typedef __uint8_t       uint8_t;                                                                 |  1911     3
    87       |#define _UINT8_T_DECLARED                                                                        |  1912     3
    88       |#endif                                                                                           |  1913     3
    89       |                                                                                                 |  1914     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       |  1915     3
    91       |typedef __uint16_t      uint16_t;                                                                |  1916     3
    92       |#define _UINT16_T_DECLARED                                                                       |  1917     3
    93       |#endif                                                                                           |  1918     3
    94       |                                                                                                 |  1919     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       |  1920     3
    96       |typedef __uint32_t      uint32_t;                                                                |  1921     3
    97       |#define _UINT32_T_DECLARED                                                                       |  1922     3
    98       |#endif                                                                                           |  1923     3
    99       |                                                                                                 |  1924     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       |  1925     3
   101       |typedef __uint64_t      uint64_t;                                                                |  1926     3
   102       |#define _UINT64_T_DECLARED                                                                       |  1927     3
   103       |#endif                                                                                           |  1928     3
   104       |                                                                                                 |  1929     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       |  1930     3
   106       |typedef __intptr_t      intptr_t;                                                                |  1931     3
   107       |typedef __uintptr_t     uintptr_t;                                                               |  1932     3
   108       |#define _INTPTR_T_DECLARED                                                                       |  1933     3
   109       |#endif                                                                                           |  1934     3
   110       |                                                                                                 |  1935     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    |  1936     3
   112       |typedef __uint16_t      u_int16_t;                                                               |  1937     3
   113       |typedef __uint32_t      u_int32_t;                                                               |  1938     3
   114       |typedef __uint64_t      u_int64_t;                                                               |  1939     3
   115       |                                                                                                 |  1940     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 |  1941     3
   117       |typedef __int64_t       quad_t;                                                                  |  1942     3
   118       |typedef quad_t *        qaddr_t;                                                                 |  1943     3
   119       |                                                                                                 |  1944     3
   120       |typedef char *          caddr_t;        /* core address */                                       |  1945     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     |  1946     3
   121       +typedef const char *    c_caddr_t;                                                               +  1946     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  |  1947     3
   122       +typedef volatile char *v_caddr_t;                                                                +  1947     3
   123       |                                                                                                 |  1948     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      |  1949     3
   125       |typedef __blksize_t     blksize_t;                                                               |  1950     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      |  1951     3
   127       |#endif                                                                                           |  1952     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    39


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   128       |                                                                                                 |  1953     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       |  1954     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                |  1955     3
   131       |#define _BLKCNT_T_DECLARED                                                                       |  1956     3
   132       |#endif                                                                                           |  1957     3
   133       |                                                                                                 |  1958     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        |  1959     3
   135       |typedef __clock_t       clock_t;                                                                 |  1960     3
   136       |#define _CLOCK_T_DECLARED                                                                        |  1961     3
   137       |#endif                                                                                           |  1962     3
   138       |                                                                                                 |  1963     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      |  1964     3
   140       |typedef __clockid_t     clockid_t;                                                               |  1965     3
   141       |#define _CLOCKID_T_DECLARED                                                                      |  1966     3
   142       |#endif                                                                                           |  1967     3
   143       |                                                                                                 |  1968     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             |  1969     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       |  1970     3
   146       |                                                                                                 |  1971     3
   147       |#ifndef _DEV_T_DECLARED                                                                          |  1972     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       |  1973     3
   149       |#define _DEV_T_DECLARED                                                                          |  1974     3
   150       |#endif                                                                                           |  1975     3
   151       |                                                                                                 |  1976     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       |  1977     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         |  1978     3
   154       |#define _FFLAGS_T_DECLARED                                                                       |  1979     3
   155       |#endif                                                                                           |  1980     3
   156       |                                                                                                 |  1981     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 |  1982     3
   158       |                                                                                                 |  1983     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      |  1984     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              |  1985     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              |  1986     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     |  1987     3
   163       |#endif                                                                                           |  1988     3
   164       |                                                                                                 |  1989     3
   165       |#ifndef _GID_T_DECLARED                                                                          |  1990     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           |  1991     3
   167       |#define _GID_T_DECLARED                                                                          |  1992     3
   168       |#endif                                                                                           |  1993     3
   169       |                                                                                                 |  1994     3
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      |  1995     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     |  1996     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      |  1997     3
   173       |#endif                                                                                           |  1998     3
   174       |                                                                                                 |  1999     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      |  2000     3
   176       |typedef __uint16_t      in_port_t;                                                               |  2001     3
   177       |#define _IN_PORT_T_DECLARED                                                                      |  2002     3
   178       |#endif                                                                                           |  2003     3
   179       |                                                                                                 |  2004     3
   180       |#ifndef _ID_T_DECLARED                                                                           |  2005     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    40


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          |  2006     3
   182       |#define _ID_T_DECLARED                                                                           |  2007     3
   183       |#endif                                                                                           |  2008     3
   184       |                                                                                                 |  2009     3
   185       |#ifndef _INO_T_DECLARED                                                                          |  2010     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       |  2011     3
   187       |#define _INO_T_DECLARED                                                                          |  2012     3
   188       |#endif                                                                                           |  2013     3
   189       |                                                                                                 |  2014     3
   190       |#ifndef _KEY_T_DECLARED                                                                          |  2015     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            |  2016     3
   192       |#define _KEY_T_DECLARED                                                                          |  2017     3
   193       |#endif                                                                                           |  2018     3
   194       |                                                                                                 |  2019     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        |  2020     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             |  2021     3
   197       |#define _LWPID_T_DECLARED                                                                        |  2022     3
   198       |#endif                                                                                           |  2023     3
   199       |                                                                                                 |  2024     3
   200       |#ifndef _MODE_T_DECLARED                                                                         |  2025     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        |  2026     3
   202       |#define _MODE_T_DECLARED                                                                         |  2027     3
   203       |#endif                                                                                           |  2028     3
   204       |                                                                                                 |  2029     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        |  2030     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         |  2031     3
   207       |#define _NLINK_T_DECLARED                                                                        |  2032     3
   208       |#endif                                                                                           |  2033     3
   209       |                                                                                                 |  2034     3
   210       |#ifndef _OFF_T_DECLARED                                                                          |  2035     3
   211       |typedef __off_t         off_t;          /* file offset */                                        |  2036     3
   212       |#define _OFF_T_DECLARED                                                                          |  2037     3
   213       |#endif                                                                                           |  2038     3
   214       |                                                                                                 |  2039     3
   215       |#ifndef _PID_T_DECLARED                                                                          |  2040     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         |  2041     3
   217       |#define _PID_T_DECLARED                                                                          |  2042     3
   218       |#endif                                                                                           |  2043     3
   219       |                                                                                                 |  2044     3
   220       |typedef __register_t    register_t;                                                              |  2045     3
   221       |                                                                                                 |  2046     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         |  2047     3
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     |  2048     3
   224       |#define _RLIM_T_DECLARED                                                                         |  2049     3
   225       |#endif                                                                                           |  2050     3
   226       |                                                                                                 |  2051     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            |  2052     3
   228       |                                                                                                 |  2053     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         |  2054     3
   230       |typedef __size_t        size_t;                                                                  |  2055     3
   231       |#define _SIZE_T_DECLARED                                                                         |  2056     3
   232       |#endif                                                                                           |  2057     3
   233       |                                                                                                 |  2058     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    41


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   234       |#ifndef _SSIZE_T_DECLARED                                                                        |  2059     3
   235       |typedef __ssize_t       ssize_t;                                                                 |  2060     3
   236       |#define _SSIZE_T_DECLARED                                                                        |  2061     3
   237       |#endif                                                                                           |  2062     3
   238       |                                                                                                 |  2063     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  2064     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              |  2065     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    |  2066     3
   242       |#endif                                                                                           |  2067     3
   243       |                                                                                                 |  2068     3
   244       |#ifndef _TIME_T_DECLARED                                                                         |  2069     3
   245       |typedef __time_t        time_t;                                                                  |  2070     3
   246       |#define _TIME_T_DECLARED                                                                         |  2071     3
   247       |#endif                                                                                           |  2072     3
   248       |                                                                                                 |  2073     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        |  2074     3
   250       |typedef __timer_t       timer_t;                                                                 |  2075     3
   251       |#define _TIMER_T_DECLARED                                                                        |  2076     3
   252       |#endif                                                                                           |  2077     3
   253       |                                                                                                 |  2078     3
   254       |typedef __u_register_t  u_register_t;                                                            |  2079     3
   255       |                                                                                                 |  2080     3
   256       |#ifndef _UID_T_DECLARED                                                                          |  2081     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            |  2082     3
   258       |#define _UID_T_DECLARED                                                                          |  2083     3
   259       |#endif                                                                                           |  2084     3
   260       |                                                                                                 |  2085     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     |  2086     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            |  2087     3
   263       |#define _USECONDS_T_DECLARED                                                                     |  2088     3
   264       |#endif                                                                                           |  2089     3
   265       |                                                                                                 |  2090     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             |  2091     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            |  2092     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              |  2093     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             |  2094     3
   270       |typedef __vm_size_t     vm_size_t;                                                               |  2095     3
   271       |                                                                                                 |  2096     3
   272       |#ifdef _KERNEL                                                                                   |  2097     3
   273       |typedef int             boolean_t;                                                               |  2098     3
   274       |typedef __cpumask_t     cpumask_t;                                                               |  2099     3
   275       |typedef __intfptr_t     intfptr_t;                                                               |  2100     3
   276       |                                                                                                 |  2101     3
   277       |/*-                                                                                              |  2102     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      |  2103     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           |  2104     3
   280       | * compatibility is essential.  Least-width types should be used even less                       |  2105     3
   281       | * since they provide smaller benefits.                                                          |  2106     3
   282       | * XXX should be MD.                                                                             |  2107     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     |  2108     3
   284       | */                                                                                              |  2109     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 |  2110     3
   286       |                                                                                                 |  2111     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    42


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   287       |typedef __uintfptr_t    uintfptr_t;                                                              |  2112     3
   288       |typedef __uint64_t      uoff_t;                                                                  |  2113     3
   289       |typedef struct vm_page  *vm_page_t;                                                              |  2114     3
   290       |                                                                                                 |  2115     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            |  2116     3
   292       |                                                                                                 |  2117     3
   293       |#endif /* !_KERNEL */                                                                            |  2118     3
   294       |                                                                                                 |  2119     3
   295       |/*                                                                                               |  2120     3
   296       | * The following are all things that really shouldn't exist in this header,                      |  2121     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          |  2122     3
   298       | */                                                                                              |  2123     3
   299       |#if __BSD_VISIBLE                                                                                |  2124     3
   300       |                                                                                                 |  2125     3
   300       +                                                                                                 +  2125     3
   301       |#include <sys/select.h>                                                                          |  2126     3
     1       |/* release 2.25.00 */                                                                            |  2127     9
     2       |#pragma pack()                                                                                   |  2128     9
     3       |/*-                                                                                              |  2129     9
     4       | * Copyright (c) 1992, 1993                                                                      |  2130     9
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2131     9
     6       | *                                                                                               |  2132     9
     7       | * Redistribution and use in source and binary forms, with or without                            |  2133     9
     8       | * modification, are permitted provided that the following conditions                            |  2134     9
     9       | * are met:                                                                                      |  2135     9
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2136     9
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2137     9
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2138     9
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2139     9
    14       | *    documentation and/or other materials provided with the distribution.                       |  2140     9
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  2141     9
    16       | *    may be used to endorse or promote products derived from this software                      |  2142     9
    17       | *    without specific prior written permission.                                                 |  2143     9
    18       | *                                                                                               |  2144     9
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2145     9
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2146     9
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2147     9
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2148     9
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2149     9
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2150     9
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2151     9
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2152     9
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2153     9
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2154     9
    29       | * SUCH DAMAGE.                                                                                  |  2155     9
    30       | *                                                                                               |  2156     9
    31       | * $FreeBSD: src/sys/sys/select.h,v 1.19.8.1 2006/01/13 03:11:16 marcel Exp $                    |  2157     9
    32       | */                                                                                              |  2158     9
    33       |                                                                                                 |  2159     9
    34       |#ifndef _SYS_SELECT_H_                                                                           |  2160     9
    35       |#define _SYS_SELECT_H_                                                                           |  2161     9
    36       |                                                                                                 |  2162     9
    37       |#include <sys/cdefs.h>                                                                           |  2163     9
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    43


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/* release 2.25.00 */                                                                            |  2164     4
     2       |#pragma pack()                                                                                   |  2165     4
     3       |/*                                                                                               |  2166     4
     4       | * Copyright (c) 1991, 1993                                                                      |  2167     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2168     4
     6       | *                                                                                               |  2169     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  2170     4
     8       | * Berkeley Software Design, Inc.                                                                |  2171     4
     9       | *                                                                                               |  2172     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  2173     4
    11       | * modification, are permitted provided that the following conditions                            |  2174     4
    12       | * are met:                                                                                      |  2175     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  2176     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  2177     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2178     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  2179     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  2180     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  2181     4
    19       | *    must display the following acknowledgement:                                                |  2182     4
    20       | *      This product includes software developed by the University of                            |  2183     4
    21       | *      California, Berkeley and its contributors.                                               |  2184     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  2185     4
    23       | *    may be used to endorse or promote products derived from this software                      |  2186     4
    24       | *    without specific prior written permission.                                                 |  2187     4
    25       | *                                                                                               |  2188     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2189     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2190     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2191     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2192     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2193     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2194     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2195     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2196     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2197     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2198     4
    36       | * SUCH DAMAGE.                                                                                  |  2199     4
    37       | *                                                                                               |  2200     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  2201     4
    39       | */                                                                                              |  2202     4
    40       |                                                                                                 |  2203     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  2204     4
    42       |#define _SYS_CDEFS_H_                                                                            |  2205     4
    43       |                                                                                                 |  2206     4
    44       |#if defined(__cplusplus)                                                                         |  2207     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  2208     4
    46       |#define __END_DECLS     }                                                                        |  2209     4
    47       |#else                                                                                            |  2210     4
    48       |#define __BEGIN_DECLS                                                                            |  2211     4
    49       |#define __END_DECLS                                                                              |  2212     4
    50       |#endif                                                                                           |  2213     4
    51       |                                                                                                 |  2214     4
    52       |/*                                                                                               |  2215     4
    53       | * This code has been put in place to help reduce the addition of                                |  2216     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    44


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  2217     4
    55       | * having a compiler-agnostic source tree.                                                       |  2218     4
    56       | */                                                                                              |  2219     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  2220     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  2221     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  2222     4
    60       |                                                                                                 |  2223     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  2224     4
    62       |                                                                                                 |  2225     4
    63       |                                                                                                 |  2226     4
    64       |/*                                                                                               |  2227     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  2228     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  2229     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  2230     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  2231     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  2232     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  2233     4
    71       | * this only works with ANSI C.                                                                  |  2234     4
    72       | *                                                                                               |  2235     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  2236     4
    74       | * first.  It is only available with ANSI C.                                                     |  2237     4
    75       | */                                                                                              |  2238     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  2239     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  2240     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  2241     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  2242     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  2243     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  2244     4
    82       |                                                                                                 |  2245     4
    83       |#define __const         const           /* define reserved names to standard */                  |  2246     4
    84       |#define __signed        signed                                                                   |  2247     4
    85       |#define __volatile      volatile                                                                 |  2248     4
    86       |#if defined(__cplusplus)                                                                         |  2249     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  2250     4
    88       |#else                                                                                            |  2251     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  2252     4
    90       |#endif /* !__cplusplus */                                                                        |  2253     4
    91       |                                                                                                 |  2254     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  2255     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  2256     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  2257     4
    95       |#define __STRING(x)     "x"                                                                      |  2258     4
    96       |                                                                                                 |  2259     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  2260     4
    98       |#define __inline                                                                                 |  2261     4
    99       |#define __signed                                                                                 |  2262     4
   100       |#define __volatile                                                                               |  2263     4
   101       |/*                                                                                               |  2264     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  2265     4
   103       | * deleted from the program and old programs will want them left alone.                          |  2266     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  2267     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  2268     4
   106       | */                                                                                              |  2269     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    45


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  2270     4
   108       |#define const                           /* delete ANSI C keywords */                             |  2271     4
   109       |#define inline                                                                                   |  2272     4
   110       |#define signed                                                                                   |  2273     4
   111       |#define volatile                                                                                 |  2274     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  2275     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  2276     4
   114       |                                                                                                 |  2277     4
   115       |/*                                                                                               |  2278     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  2279     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  2280     4
   118       | */                                                                                              |  2281     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  2282     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  2283     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  2284     4
   122       |#define __unused                                                                                 |  2285     4
   123       |#define __aligned(x)                                                                             |  2286     4
   124       |#define __section(x)                                                                             |  2287     4
   125       |#define __nonnull(x)                                                                             |  2288     4
   126       |#define __used                                                                                   |  2289     4
   127       |                                                                                                 |  2290     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  2291     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  2292     4
   130       |                                                                                                 |  2293     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  2294     4
   132       |#define __func__  NULL                                                                           |  2295     4
   133       |#endif                                                                                           |  2296     4
   134       |                                                                                                 |  2297     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  2298     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  2299     4
   137       |#endif                                                                                           |  2300     4
   138       |                                                                                                 |  2301     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  2302     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  2303     4
   141       | **/                                                                                             |  2304     4
   142       |#ifndef __cplusplus                                                                              |  2305     4
   143       |#define __restrict __restrict__                                                                  |  2306     4
   144       |#else                                                                                            |  2307     4
   145       |/* Systems/C++ does not */                                                                       |  2308     4
   146       |#define __restrict                                                                               |  2309     4
   147       |#endif                                                                                           |  2310     4
   148       |                                                                                                 |  2311     4
   149       |/*                                                                                               |  2312     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  2313     4
   151       | */                                                                                              |  2314     4
   152       |#define __predict_true(exp)     (exp)                                                            |  2315     4
   153       |#define __predict_false(exp)    (exp)                                                            |  2316     4
   154       |                                                                                                 |  2317     4
   155       |                                                                                                 |  2318     4
   156       |/*                                                                                               |  2319     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  2320     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  2321     4
   159       | *                                                                                               |  2322     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    46


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  2323     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  2324     4
   162       | */                                                                                              |  2325     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  2326     4
   164       |#undef __offsetof                                                                                |  2327     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  2328     4
   166       |#endif                                                                                           |  2329     4
   167       |                                                                                                 |  2330     4
   168       |/*                                                                                               |  2331     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  2332     4
   170       | * or scanf-like arguments.                                                                      |  2333     4
   171       | */                                                                                              |  2334     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  2335     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  2336     4
   174       |#define __format_arg(fmtarg)                                                                     |  2337     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  2338     4
   176       |                                                                                                 |  2339     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  2340     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  2341     4
   179       |                                                                                                 |  2342     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  2343     4
   181       |#define __weak_reference(sym,alias)                                                              |  2344     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  2345     4
   183       |#define __warn_references(sym,msg)                                                               |  2346     4
   184       |                                                                                                 |  2347     4
   185       | /* This places the string into the resulting object.  It should */                              |  2348     4
   186       | /* probably become #pragma ident */                                                             |  2349     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  2350     4
   188       |                                                                                                 |  2351     4
   189       |#ifndef __RCSID                                                                                  |  2352     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  2353     4
   191       |#endif                                                                                           |  2354     4
   192       |                                                                                                 |  2355     4
   193       |/*                                                                                               |  2356     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  2357     4
   195       | * Usage:                                                                                        |  2358     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  2359     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  2360     4
   198       | */                                                                                              |  2361     4
   199       |#ifndef __SYSCID                                                                                 |  2362     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  2363     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  2364     4
   202       |#else                                                                                            |  2365     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  2366     4
   204       |#endif                                                                                           |  2367     4
   205       |#endif                                                                                           |  2368     4
   206       |                                                                                                 |  2369     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  2370     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  2371     4
   209       |#endif                                                                                           |  2372     4
   210       |                                                                                                 |  2373     4
   211       |#ifndef __COPYRIGHT                                                                              |  2374     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  2375     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    47


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   213       |#endif                                                                                           |  2376     4
   214       |                                                                                                 |  2377     4
   215       |                                                                                                 |  2378     4
   216       |#ifndef __DECONST                                                                                |  2379     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  2380     4
   218       |#endif                                                                                           |  2381     4
   219       |                                                                                                 |  2382     4
   220       |#ifndef __DEVOLATILE                                                                             |  2383     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  2384     4
   222       |#endif                                                                                           |  2385     4
   223       |                                                                                                 |  2386     4
   224       |#ifndef __DEQUALIFY                                                                              |  2387     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  2388     4
   226       |#endif                                                                                           |  2389     4
   227       |                                                                                                 |  2390     4
   228       |                                                                                                 |  2391     4
   229       |/*-                                                                                              |  2392     4
   230       | * The following definitions are an extension of the behavior originally                         |  2393     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  2394     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  2395     4
   233       | * header file is included.                                                                      |  2396     4
   234       | *                                                                                               |  2397     4
   235       | * Here's a quick run-down of the versions:                                                      |  2398     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  2399     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  2400     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  2401     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  2402     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  2403     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  2404     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  2405     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  2406     4
   244       | *                                                                                               |  2407     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  2408     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  2409     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  2410     4
   248       | *                                                                                               |  2411     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  2412     4
   250       | */                                                                                              |  2413     4
   251       |                                                                                                 |  2414     4
   252       |/*                                                                                               |  2415     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  2416     4
   254       | * available. Also make them available when requested so.                                        |  2417     4
   255       | */                                                                                              |  2418     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  2419     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  2420     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  2421     4
   259       |#define __DF_VISIBLE    1                                                                        |  2422     4
   260       |#else                                                                                            |  2423     4
   261       |#define __DF_VISIBLE    0                                                                        |  2424     4
   262       |#endif                                                                                           |  2425     4
   263       |                                                                                                 |  2426     4
   264       |/*-                                                                                              |  2427     4
   265       | * The following definitions are an extension of the behavior originally                         |  2428     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    48


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  2429     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  2430     4
   268       | * header file is included.                                                                      |  2431     4
   269       | *                                                                                               |  2432     4
   270       | * Here's a quick run-down of the versions:                                                      |  2433     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  2434     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  2435     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  2436     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  2437     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  2438     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  2439     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  2440     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  2441     4
   279       | *                                                                                               |  2442     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  2443     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  2444     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  2445     4
   283       | *                                                                                               |  2446     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  2447     4
   285       | */                                                                                              |  2448     4
   286       |                                                                                                 |  2449     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  2450     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  2451     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  2452     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  2453     4
   291       |#endif                                                                                           |  2454     4
   292       |                                                                                                 |  2455     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  2456     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  2457     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  2458     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  2459     4
   297       |#endif                                                                                           |  2460     4
   298       |                                                                                                 |  2461     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  2462     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  2463     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  2464     4
   302       |#define __XSI_VISIBLE           700                                                              |  2465     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  2466     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  2467     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  2468     4
   306       |#define __XSI_VISIBLE           600                                                              |  2469     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  2470     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  2471     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  2472     4
   310       |#define __XSI_VISIBLE           500                                                              |  2473     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  2474     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  2475     4
   313       |#endif                                                                                           |  2476     4
   314       |#endif                                                                                           |  2477     4
   315       |                                                                                                 |  2478     4
   316       |/*                                                                                               |  2479     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  2480     4
   318       | * important.                                                                                    |  2481     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    49


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   319       | */                                                                                              |  2482     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  2483     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  2484     4
   322       |#endif                                                                                           |  2485     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  2486     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  2487     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  2488     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  2489     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  2490     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  2491     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  2492     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  2493     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  2494     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  2495     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  2496     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  2497     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  2498     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  2499     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  2500     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  2501     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  2502     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  2503     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  2504     4
   342       |#else                                                                                            |  2505     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  2506     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  2507     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  2508     4
   346       |#else                                                                                            |  2509     4
   347       |/*-                                                                                              |  2510     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  2511     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  2512     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  2513     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  2514     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  2515     4
   353       | * a test program to print out the values.                                                       |  2516     4
   354       | *                                                                                               |  2517     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  2518     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  2519     4
   357       | * environment (and in fact we will never get here).                                             |  2520     4
   358       | */                                                                                              |  2521     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  2522     4
   360       |#define __POSIX_VISIBLE         0                                                                |  2523     4
   361       |#define __XSI_VISIBLE           0                                                                |  2524     4
   362       |#define __BSD_VISIBLE           0                                                                |  2525     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  2526     4
   364       |#define __EXT1_VISIBLE          0                                                                |  2527     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  2528     4
   366       |#define __POSIX_VISIBLE         0                                                                |  2529     4
   367       |#define __XSI_VISIBLE           0                                                                |  2530     4
   368       |#define __BSD_VISIBLE           0                                                                |  2531     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  2532     4
   370       |#define __EXT1_VISIBLE          0                                                                |  2533     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  2534     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    50


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   372       |#define __POSIX_VISIBLE         0                                                                |  2535     4
   373       |#define __XSI_VISIBLE           0                                                                |  2536     4
   374       |#define __BSD_VISIBLE           0                                                                |  2537     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  2538     4
   376       |#define __EXT1_VISIBLE          0                                                                |  2539     4
   377       |#else                           /* Default environment: show everything. */                      |  2540     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  2541     4
   379       |#define __XSI_VISIBLE           700                                                              |  2542     4
   380       |#define __BSD_VISIBLE           1                                                                |  2543     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  2544     4
   382       |#define __EXT1_VISIBLE          1                                                                |  2545     4
   383       |#endif                                                                                           |  2546     4
   384       |#endif                                                                                           |  2547     4
   385       |                                                                                                 |  2548     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  2549     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  2550     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  2551     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  2552     4
   390       |#define __EXT1_VISIBLE          1                                                                |  2553     4
   391       |#else                                                                                            |  2554     4
   392       |#define __EXT1_VISIBLE          0                                                                |  2555     4
   393       |#endif                                                                                           |  2556     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  2557     4
   395       |                                                                                                 |  2558     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  2559     4
   397       |#define __NO_TLS 1                                                                               |  2560     4
   398       |#endif                                                                                           |  2561     4
   399       |                                                                                                 |  2562     4
   400       |                                                                                                 |  2563     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  2564     4
   402       |#define __FBSDID(x)                                                                              |  2565     4
   403       |                                                                                                 |  2566     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  2567     4
   405       |#pragma pack(reset)                                                                              |  2568     4
    38       |#include <sys/_types.h>                                                                          |  2569     9
     1       |/* release 2.25.00 */                                                                            |  2570     6
     2       |#pragma pack()                                                                                   |  2571     6
     3       |/*-                                                                                              |  2572     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2573     6
     5       | * All rights reserved.                                                                          |  2574     6
     6       | *                                                                                               |  2575     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  2576     6
     8       | * modification, are permitted provided that the following conditions                            |  2577     6
     9       | * are met:                                                                                      |  2578     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2579     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2580     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2581     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2582     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  2583     6
    15       | *                                                                                               |  2584     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2585     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2586     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2587     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    51


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2588     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2589     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2590     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2591     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2592     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2593     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2594     6
    26       | * SUCH DAMAGE.                                                                                  |  2595     6
    27       | *                                                                                               |  2596     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  2597     6
    29       | */                                                                                              |  2598     6
    30       |                                                                                                 |  2599     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  2600     6
    32       |#define _SYS__TYPES_H_                                                                           |  2601     6
    33       |                                                                                                 |  2602     6
    34       |#include <sys/cdefs.h>                                                                           |  2603     6
    35       |#include <machine/_types.h>                                                                      |  2604     6
    36       |                                                                                                 |  2605     6
    37       |/*                                                                                               |  2606     6
    38       | * Standard type definitions.                                                                    |  2607     6
    39       | */                                                                                              |  2608     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  2609     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  2610     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  2611     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  2612     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  2613     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  2614     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  2615     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  2616     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  2617     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  2618     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  2619     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  2620     6
    52       |typedef int             __nl_item;                                                               |  2621     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  2622     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  2623     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  2624     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  2625     6
    57       |                                        /* signed, because of legacy code */                     |  2626     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  2627     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  2628     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  2629     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  2630     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  2631     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  2632     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  2633     6
    65       |                                                                                                 |  2634     6
    66       |/*                                                                                               |  2635     6
    67       | * Unusual type definitions.                                                                     |  2636     6
    68       | */                                                                                              |  2637     6
    69       |/*                                                                                               |  2638     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  2639     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  2640     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    52


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  2641     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  2642     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  2643     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  2644     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  2645     6
    77       | *                                                                                               |  2646     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  2647     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  2648     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  2649     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  2650     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  2651     6
    83       | */                                                                                              |  2652     6
    84       |#ifdef __cplusplus                                                                               |  2653     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  2654     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  2655     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  2656     6
    88       |#else                                                                                            |  2657     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  2658     6
    90       |#endif                                                                                           |  2659     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  2660     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  2661     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  2662     6
    94       |                                                                                                 |  2663     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  2664     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  2665     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  2666     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  2667     6
    99       |#endif                                                                                           |  2668     6
   100       |                                                                                                 |  2669     6
   101       |#if !defined(__cplusplus)                                                                        |  2670     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  2671     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  2672     6
   104       |#endif                                                                                           |  2673     6
   105       |                                                                                                 |  2674     6
   106       |                                                                                                 |  2675     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  2676     6
   108       |                                                                                                 |  2677     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  2678     6
   110       |                                                                                                 |  2679     6
   111       |/*                                                                                               |  2680     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  2681     6
   113       | * stream conversions.                                                                           |  2682     6
   114       | */                                                                                              |  2683     6
   115       |typedef union {                                                                                  |  2684     6
   116       |        char            __mbstate8[128];                                                         |  2685     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  2686     6
   118       |} __mbstate_t;                                                                                   |  2687     6
   119       |                                                                                                 |  2688     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  2689     6
   121       |#pragma pack(reset)                                                                              |  2690     6
    39       |                                                                                                 |  2691     9
    40       |#include <sys/_sigset.h>                                                                         |  2692     9
     1       |/* release 2.25.00 */                                                                            |  2693    10
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    53


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |  2694    10
     3       |/*-                                                                                              |  2695    10
     4       | * Copyright (c) 1982, 1986, 1989, 1991, 1993                                                    |  2696    10
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2697    10
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  2698    10
     7       | * All or some portions of this file are derived from material licensed                          |  2699    10
     8       | * to the University of California by American Telephone and Telegraph                           |  2700    10
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  2701    10
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  2702    10
    11       | *                                                                                               |  2703    10
    12       | * Redistribution and use in source and binary forms, with or without                            |  2704    10
    13       | * modification, are permitted provided that the following conditions                            |  2705    10
    14       | * are met:                                                                                      |  2706    10
    15       | * 1. Redistributions of source code must retain the above copyright                             |  2707    10
    16       | *    notice, this list of conditions and the following disclaimer.                              |  2708    10
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2709    10
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  2710    10
    19       | *    documentation and/or other materials provided with the distribution.                       |  2711    10
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  2712    10
    21       | *    may be used to endorse or promote products derived from this software                      |  2713    10
    22       | *    without specific prior written permission.                                                 |  2714    10
    23       | *                                                                                               |  2715    10
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2716    10
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2717    10
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2718    10
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2719    10
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2720    10
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2721    10
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2722    10
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2723    10
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2724    10
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2725    10
    34       | * SUCH DAMAGE.                                                                                  |  2726    10
    35       | *                                                                                               |  2727    10
    36       | *      @(#)signal.h    8.4 (Berkeley) 5/4/95                                                    |  2728    10
    37       | * $FreeBSD: src/sys/sys/_sigset.h,v 1.36 2005/01/07 02:29:23 imp Exp $                          |  2729    10
    38       | */                                                                                              |  2730    10
    39       |                                                                                                 |  2731    10
    40       |#ifndef _SYS__SIGSET_H_                                                                          |  2732    10
    41       |#define _SYS__SIGSET_H_                                                                          |  2733    10
    42       |                                                                                                 |  2734    10
    43       |/*                                                                                               |  2735    10
    44       | * sigset_t macros.                                                                              |  2736    10
    45       | */                                                                                              |  2737    10
    46       |#define _SIG_WORDS      4                                                                        |  2738    10
    47       |#define _SIG_MAXSIG     128                                                                      |  2739    10
    48       |#define _SIG_IDX(sig)   ((sig) - 1)                                                              |  2740    10
    49       |#define _SIG_WORD(sig)  (_SIG_IDX(sig) >> 5)                                                     |  2741    10
    50       |#define _SIG_BIT(sig)   (1 << (_SIG_IDX(sig) & 31))                                              |  2742    10
    51       |#define _SIG_VALID(sig) ((sig) <= _SIG_MAXSIG && (sig) > 0)                                      |  2743    10
    52       |                                                                                                 |  2744    10
    53       |typedef struct __sigset {                                                                        |  2745    10
    54       |        __uint32_t __bits[_SIG_WORDS];                                                           |  2746    10
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    54


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       +                __uint32_t __bits[4];                                                            +  2746    10
    55       |} __sigset_t;                                                                                    |  2747    10
    56       |                                                                                                 |  2748    10
    57       |#if defined(_KERNEL) && defined(COMPAT_43)                                                       |  2749    10
    58       |typedef unsigned int osigset_t;                                                                  |  2750    10
    59       |#endif                                                                                           |  2751    10
    60       |                                                                                                 |  2752    10
    61       |#endif /* !_SYS__SIGSET_H_ */                                                                    |  2753    10
    62       |#pragma pack(reset)                                                                              |  2754    10
    41       |#include <sys/_timeval.h>                                                                        |  2755     9
     1       |/* release 2.25.00 */                                                                            |  2756    11
     2       |#pragma pack()                                                                                   |  2757    11
     3       |/*-                                                                                              |  2758    11
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2759    11
     5       | * All rights reserved.                                                                          |  2760    11
     6       | *                                                                                               |  2761    11
     7       | * Redistribution and use in source and binary forms, with or without                            |  2762    11
     8       | * modification, are permitted provided that the following conditions                            |  2763    11
     9       | * are met:                                                                                      |  2764    11
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2765    11
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2766    11
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2767    11
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2768    11
    14       | *    documentation and/or other materials provided with the distribution.                       |  2769    11
    15       | *                                                                                               |  2770    11
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2771    11
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2772    11
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2773    11
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2774    11
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2775    11
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2776    11
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2777    11
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2778    11
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2779    11
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2780    11
    26       | * SUCH DAMAGE.                                                                                  |  2781    11
    27       | *                                                                                               |  2782    11
    28       | * $FreeBSD: src/sys/sys/_timeval.h,v 1.1.12.1 2006/06/23 23:41:05 cognet Exp $                  |  2783    11
    29       | */                                                                                              |  2784    11
    30       |                                                                                                 |  2785    11
    31       |#ifndef _SYS__TIMEVAL_H_                                                                         |  2786    11
    32       |#define _SYS__TIMEVAL_H_                                                                         |  2787    11
    33       |                                                                                                 |  2788    11
    34       |#include <sys/_types.h>                                                                          |  2789    11
     1       |/* release 2.25.00 */                                                                            |  2790     6
     2       |#pragma pack()                                                                                   |  2791     6
     3       |/*-                                                                                              |  2792     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2793     6
     5       | * All rights reserved.                                                                          |  2794     6
     6       | *                                                                                               |  2795     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  2796     6
     8       | * modification, are permitted provided that the following conditions                            |  2797     6
     9       | * are met:                                                                                      |  2798     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    55


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2799     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2800     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2801     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2802     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  2803     6
    15       | *                                                                                               |  2804     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2805     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2806     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2807     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2808     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2809     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2810     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2811     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2812     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2813     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2814     6
    26       | * SUCH DAMAGE.                                                                                  |  2815     6
    27       | *                                                                                               |  2816     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  2817     6
    29       | */                                                                                              |  2818     6
    30       |                                                                                                 |  2819     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  2820     6
    32       |#define _SYS__TYPES_H_                                                                           |  2821     6
    33       |                                                                                                 |  2822     6
    34       |#include <sys/cdefs.h>                                                                           |  2823     6
    35       |#include <machine/_types.h>                                                                      |  2824     6
    36       |                                                                                                 |  2825     6
    37       |/*                                                                                               |  2826     6
    38       | * Standard type definitions.                                                                    |  2827     6
    39       | */                                                                                              |  2828     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  2829     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  2830     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  2831     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  2832     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  2833     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  2834     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  2835     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  2836     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  2837     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  2838     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  2839     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  2840     6
    52       |typedef int             __nl_item;                                                               |  2841     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  2842     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  2843     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  2844     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  2845     6
    57       |                                        /* signed, because of legacy code */                     |  2846     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  2847     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  2848     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  2849     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  2850     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  2851     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    56


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    63       |typedef __uint32_t      __uid_t;                                                                 |  2852     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  2853     6
    65       |                                                                                                 |  2854     6
    66       |/*                                                                                               |  2855     6
    67       | * Unusual type definitions.                                                                     |  2856     6
    68       | */                                                                                              |  2857     6
    69       |/*                                                                                               |  2858     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  2859     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  2860     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  2861     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  2862     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  2863     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  2864     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  2865     6
    77       | *                                                                                               |  2866     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  2867     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  2868     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  2869     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  2870     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  2871     6
    83       | */                                                                                              |  2872     6
    84       |#ifdef __cplusplus                                                                               |  2873     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  2874     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  2875     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  2876     6
    88       |#else                                                                                            |  2877     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  2878     6
    90       |#endif                                                                                           |  2879     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  2880     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  2881     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  2882     6
    94       |                                                                                                 |  2883     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  2884     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  2885     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  2886     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  2887     6
    99       |#endif                                                                                           |  2888     6
   100       |                                                                                                 |  2889     6
   101       |#if !defined(__cplusplus)                                                                        |  2890     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  2891     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  2892     6
   104       |#endif                                                                                           |  2893     6
   105       |                                                                                                 |  2894     6
   106       |                                                                                                 |  2895     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  2896     6
   108       |                                                                                                 |  2897     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  2898     6
   110       |                                                                                                 |  2899     6
   111       |/*                                                                                               |  2900     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  2901     6
   113       | * stream conversions.                                                                           |  2902     6
   114       | */                                                                                              |  2903     6
   115       |typedef union {                                                                                  |  2904     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    57


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   116       |        char            __mbstate8[128];                                                         |  2905     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  2906     6
   118       |} __mbstate_t;                                                                                   |  2907     6
   119       |                                                                                                 |  2908     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  2909     6
   121       |#pragma pack(reset)                                                                              |  2910     6
    35       |                                                                                                 |  2911    11
    36       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  2912    11
    37       |typedef __suseconds_t   suseconds_t;                                                             |  2913    11
    38       |#define _SUSECONDS_T_DECLARED                                                                    |  2914    11
    39       |#endif                                                                                           |  2915    11
    40       |                                                                                                 |  2916    11
    41       |#ifndef _TIME_T_DECLARED                                                                         |  2917    11
    42       |typedef __time_t        time_t;                                                                  |  2918    11
    43       |#define _TIME_T_DECLARED                                                                         |  2919    11
    44       |#endif                                                                                           |  2920    11
    45       |                                                                                                 |  2921    11
    46       |/*                                                                                               |  2922    11
    47       | * Structure returned by gettimeofday(2) system call, and used in other calls.                   |  2923    11
    48       | */                                                                                              |  2924    11
    49       |struct timeval {                                                                                 |  2925    11
    50       |        time_t          tv_sec;                                                                  |  2926    11
    51       |        suseconds_t     tv_usec;        /* and microseconds */                                   |  2927    11
    52       |};                                                                                               |  2928    11
    53       |                                                                                                 |  2929    11
    54       |#endif /* !_SYS__TIMEVAL_H_ */                                                                   |  2930    11
    55       |#pragma pack(reset)                                                                              |  2931    11
    42       |#include <sys/timespec.h>                                                                        |  2932     9
     1       |/* release 2.25.00 */                                                                            |  2933    12
     2       |#pragma pack()                                                                                   |  2934    12
     3       |/*-                                                                                              |  2935    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  2936    12
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2937    12
     6       | *                                                                                               |  2938    12
     7       | * Redistribution and use in source and binary forms, with or without                            |  2939    12
     8       | * modification, are permitted provided that the following conditions                            |  2940    12
     9       | * are met:                                                                                      |  2941    12
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2942    12
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2943    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2944    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2945    12
    14       | *    documentation and/or other materials provided with the distribution.                       |  2946    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  2947    12
    16       | *    may be used to endorse or promote products derived from this software                      |  2948    12
    17       | *    without specific prior written permission.                                                 |  2949    12
    18       | *                                                                                               |  2950    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2951    12
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2952    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2953    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2954    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2955    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2956    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2957    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    58


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2958    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2959    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2960    12
    29       | * SUCH DAMAGE.                                                                                  |  2961    12
    30       | *                                                                                               |  2962    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  2963    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          |  2964    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     |  2965    12
    34       | */                                                                                              |  2966    12
    35       |                                                                                                 |  2967    12
    36       |/*                                                                                               |  2968    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  |  2969    12
    38       | */                                                                                              |  2970    12
    39       |                                                                                                 |  2971    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         |  2972    12
    41       |#define _SYS_TIMESPEC_H_                                                                         |  2973    12
    42       |                                                                                                 |  2974    12
    43       |#include <sys/_types.h>                                                                          |  2975    12
     1       |/* release 2.25.00 */                                                                            |  2976     6
     2       |#pragma pack()                                                                                   |  2977     6
     3       |/*-                                                                                              |  2978     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2979     6
     5       | * All rights reserved.                                                                          |  2980     6
     6       | *                                                                                               |  2981     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  2982     6
     8       | * modification, are permitted provided that the following conditions                            |  2983     6
     9       | * are met:                                                                                      |  2984     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2985     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2986     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2987     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2988     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  2989     6
    15       | *                                                                                               |  2990     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2991     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2992     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2993     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2994     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2995     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2996     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2997     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2998     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2999     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3000     6
    26       | * SUCH DAMAGE.                                                                                  |  3001     6
    27       | *                                                                                               |  3002     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  3003     6
    29       | */                                                                                              |  3004     6
    30       |                                                                                                 |  3005     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  3006     6
    32       |#define _SYS__TYPES_H_                                                                           |  3007     6
    33       |                                                                                                 |  3008     6
    34       |#include <sys/cdefs.h>                                                                           |  3009     6
    35       |#include <machine/_types.h>                                                                      |  3010     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    59


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       |                                                                                                 |  3011     6
    37       |/*                                                                                               |  3012     6
    38       | * Standard type definitions.                                                                    |  3013     6
    39       | */                                                                                              |  3014     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  3015     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  3016     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  3017     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  3018     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  3019     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  3020     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  3021     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  3022     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  3023     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  3024     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  3025     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  3026     6
    52       |typedef int             __nl_item;                                                               |  3027     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  3028     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  3029     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  3030     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  3031     6
    57       |                                        /* signed, because of legacy code */                     |  3032     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  3033     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  3034     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  3035     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  3036     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  3037     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  3038     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  3039     6
    65       |                                                                                                 |  3040     6
    66       |/*                                                                                               |  3041     6
    67       | * Unusual type definitions.                                                                     |  3042     6
    68       | */                                                                                              |  3043     6
    69       |/*                                                                                               |  3044     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  3045     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  3046     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  3047     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  3048     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  3049     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  3050     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  3051     6
    77       | *                                                                                               |  3052     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  3053     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  3054     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  3055     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  3056     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  3057     6
    83       | */                                                                                              |  3058     6
    84       |#ifdef __cplusplus                                                                               |  3059     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  3060     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  3061     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  3062     6
    88       |#else                                                                                            |  3063     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    60


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  3064     6
    90       |#endif                                                                                           |  3065     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  3066     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  3067     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  3068     6
    94       |                                                                                                 |  3069     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  3070     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  3071     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  3072     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  3073     6
    99       |#endif                                                                                           |  3074     6
   100       |                                                                                                 |  3075     6
   101       |#if !defined(__cplusplus)                                                                        |  3076     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  3077     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  3078     6
   104       |#endif                                                                                           |  3079     6
   105       |                                                                                                 |  3080     6
   106       |                                                                                                 |  3081     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  3082     6
   108       |                                                                                                 |  3083     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  3084     6
   110       |                                                                                                 |  3085     6
   111       |/*                                                                                               |  3086     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  3087     6
   113       | * stream conversions.                                                                           |  3088     6
   114       | */                                                                                              |  3089     6
   115       |typedef union {                                                                                  |  3090     6
   116       |        char            __mbstate8[128];                                                         |  3091     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  3092     6
   118       |} __mbstate_t;                                                                                   |  3093     6
   119       |                                                                                                 |  3094     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  3095     6
   121       |#pragma pack(reset)                                                                              |  3096     6
    44       |                                                                                                 |  3097    12
    45       |#ifndef _TIME_T_DECLARED                                                                         |  3098    12
    46       |typedef __time_t        time_t;                                                                  |  3099    12
    47       |#define _TIME_T_DECLARED                                                                         |  3100    12
    48       |#endif                                                                                           |  3101    12
    49       |                                                                                                 |  3102    12
    50       |struct timespec {                                                                                |  3103    12
    51       |        time_t  tv_sec;         /* seconds */                                                    |  3104    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            |  3105    12
    53       |};                                                                                               |  3106    12
    54       |                                                                                                 |  3107    12
    55       |#if __BSD_VISIBLE                                                                                |  3108    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        |  3109    12
    57       |        do {                                                            \                        |  3110    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        |  3111    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        |  3112    12
    60       |        } while (0)                                                                              |  3113    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        |  3114    12
    62       |        do {                                                            \                        |  3115    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        |  3116    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    61


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        |  3117    12
    65       |        } while (0)                                                                              |  3118    12
    66       |                                                                                                 |  3119    12
    66       +                                                                                                 +  3119    12
    67       |#endif /* __BSD_VISIBLE */                                                                       |  3120    12
    68       |                                                                                                 |  3121    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    |  3122    12
    70       |#pragma pack(reset)                                                                              |  3123    12
    43       |                                                                                                 |  3124     9
    44       |typedef unsigned long   __fd_mask;                                                               |  3125     9
    45       |#if __BSD_VISIBLE                                                                                |  3126     9
    46       |typedef __fd_mask       fd_mask;                                                                 |  3127     9
    46       +typedef __fd_mask       fd_mask;                                                                 +  3127     9
    47       |#endif                                                                                           |  3128     9
    48       |                                                                                                 |  3129     9
    49       |#ifndef _SIGSET_T_DECLARED                                                                       |  3130     9
    50       |#define _SIGSET_T_DECLARED                                                                       |  3131     9
    51       |typedef __sigset_t      sigset_t;                                                                |  3132     9
    52       |#endif                                                                                           |  3133     9
    53       |                                                                                                 |  3134     9
    54       |/*                                                                                               |  3135     9
    55       | * Select uses bit masks of file descriptors in longs.  These macros                             |  3136     9
    56       | * manipulate such bit fields (the filesystem macros use chars).                                 |  3137     9
    57       | * FD_SETSIZE may be defined by the user, but the default here should                            |  3138     9
    58       | * be enough for most uses.                                                                      |  3139     9
    59       | */                                                                                              |  3140     9
    60       |#ifndef FD_SETSIZE                                                                               |  3141     9
    61       |#define FD_SETSIZE      1024U                                                                    |  3142     9
    62       |#endif                                                                                           |  3143     9
    63       |                                                                                                 |  3144     9
    64       |#define _NFDBITS        (sizeof(__fd_mask) * 8) /* bits per mask */                              |  3145     9
    65       |#if __BSD_VISIBLE                                                                                |  3146     9
    66       |#define NFDBITS         _NFDBITS                                                                 |  3147     9
    67       |#endif                                                                                           |  3148     9
    68       |                                                                                                 |  3149     9
    68       +                                                                                                 +  3149     9
    69       |#ifndef _howmany                                                                                 |  3150     9
    70       |#define _howmany(x, y)  (((x) + ((y) - 1)) / (y))                                                |  3151     9
    71       |#endif                                                                                           |  3152     9
    72       |                                                                                                 |  3153     9
    73       |typedef struct fd_set {                                                                          |  3154     9
    74       |        __fd_mask       __fds_bits[_howmany(FD_SETSIZE, _NFDBITS)];                              |  3155     9
    74       +                __fd_mask       __fds_bits[(((1024U) + (((sizeof(__fd_mask) * 8)) - 1)) / ((sizeo+  3155     9
    74       +f(__fd_mask) * 8)))];                                                                            +  3155     9
    75       |} fd_set;                                                                                        |  3156     9
    76       |#if __BSD_VISIBLE                                                                                |  3157     9
    77       |#define fds_bits        __fds_bits                                                               |  3158     9
    78       |#endif                                                                                           |  3159     9
    79       |                                                                                                 |  3160     9
    79       +                                                                                                 +  3160     9
    80       |#define __fdset_mask(n) ((__fd_mask)1 << ((n) % _NFDBITS))                                       |  3161     9
    81       |#define FD_CLR(n, p)    ((p)->__fds_bits[(n)/_NFDBITS] &= ~__fdset_mask(n))                      |  3162     9
    82       |#if __BSD_VISIBLE                                                                                |  3163     9
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    62


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    83       |#define FD_COPY(f, t)   (void)(*(t) = *(f))                                                      |  3164     9
    84       |#endif                                                                                           |  3165     9
    85       |#define FD_ISSET(n, p)  (((p)->__fds_bits[(n)/_NFDBITS] & __fdset_mask(n)) != 0)                 |  3166     9
    86       |#define FD_SET(n, p)    ((p)->__fds_bits[(n)/_NFDBITS] |= __fdset_mask(n))                       |  3167     9
    87       |#define FD_ZERO(p) do {                                 \                                        |  3168     9
    88       |        fd_set *_p;                                     \                                        |  3169     9
    89       |        __size_t _n;                                    \                                        |  3170     9
    90       |                                                        \                                        |  3171     9
    91       |        _p = (p);                                       \                                        |  3172     9
    92       |        _n = _howmany(FD_SETSIZE, _NFDBITS);            \                                        |  3173     9
    93       |        while (_n > 0)                                  \                                        |  3174     9
    94       |                _p->__fds_bits[--_n] = 0;               \                                        |  3175     9
    95       |} while (0)                                                                                      |  3176     9
    96       |                                                                                                 |  3177     9
    96       +                                                                                                 +  3177     9
    97       |#ifndef _KERNEL                                                                                  |  3178     9
    98       |                                                                                                 |  3179     9
    99       |__BEGIN_DECLS                                                                                    |  3180     9
    99       +                                                                                                 +  3180     9
   100       |int pselect(int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict,                     |  3181     9
   100       +int pselect(int, fd_set *__restrict__, fd_set *__restrict__, fd_set *__restrict__,               +  3181     9
   101       |        const struct timespec *__restrict, const sigset_t *__restrict);                          |  3182     9
   101       +                const struct timespec *__restrict__, const sigset_t *__restrict__);              +  3182     9
   102       |#ifndef _SELECT_DECLARED                                                                         |  3183     9
   103       |#define _SELECT_DECLARED                                                                         |  3184     9
   104       |/* XXX missing restrict type-qualifier */                                                        |  3185     9
   105       |int     select(int, fd_set *, fd_set *, fd_set *, struct timeval *);                             |  3186     9
   106       |int     selectex(int, fd_set *, fd_set *, fd_set *, struct timeval *,                            |  3187     9
   107       |                       int *ecbptr);                                                             |  3188     9
   108       |#endif                                                                                           |  3189     9
   109       |__END_DECLS                                                                                      |  3190     9
   109       +                                                                                                 +  3190     9
   110       |#endif /* !_KERNEL */                                                                            |  3191     9
   111       |                                                                                                 |  3192     9
   112       |#endif /* _SYS_SELECT_H_ */                                                                      |  3193     9
   113       |#pragma pack(reset)                                                                              |  3194     9
   302       |                                                                                                 |  3195     3
   303       |#ifndef _KERNEL                                                                                  |  3196     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    |  3197     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    |  3198     3
   306       |#endif /* !_KERNEL */                                                                            |  3199     3
   307       |                                                                                                 |  3200     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    |  3201     3
   309       |                                                                                                 |  3202     3
   310       |/*                                                                                               |  3203     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             |  3204     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             |  3205     3
   313       | * 64-bit off_t's.                                                                               |  3206     3
   314       | */                                                                                              |  3207     3
   315       |#ifndef _KERNEL                                                                                  |  3208     3
   316       |__BEGIN_DECLS                                                                                    |  3209     3
   316       +                                                                                                 +  3209     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      |  3210     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    63


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   318       |#define _FTRUNCATE_DECLARED                                                                      |  3211     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  3212     3
   320       |int      ftruncate(int, off_t);                                                                  |  3213     3
   321       |#endif                                                                                           |  3214     3
   322       |#ifndef _LSEEK_DECLARED                                                                          |  3215     3
   323       |#define _LSEEK_DECLARED                                                                          |  3216     3
   324       |off_t    lseek(int, off_t, int);                                                                 |  3217     3
   325       |#endif                                                                                           |  3218     3
   326       |#ifndef _MMAP_DECLARED                                                                           |  3219     3
   327       |#define _MMAP_DECLARED                                                                           |  3220     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             |  3221     3
   329       |#endif                                                                                           |  3222     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       |  3223     3
   331       |#define _TRUNCATE_DECLARED                                                                       |  3224     3
   332       |int      truncate(const char *, off_t);                                                          |  3225     3
   333       |#endif                                                                                           |  3226     3
   334       |__END_DECLS                                                                                      |  3227     3
   334       +                                                                                                 +  3227     3
   335       |#endif /* !_KERNEL */                                                                            |  3228     3
   336       |                                                                                                 |  3229     3
   337       |#endif /* __BSD_VISIBLE */                                                                       |  3230     3
   338       |                                                                                                 |  3231     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      |  3232     3
   340       |#pragma pack(reset)                                                                              |  3233     3
    22       |#include <unistd.h>                                                                              |  3234     2
     1       |/* release 2.25.00 */                                                                            |  3235    13
     2       |#pragma pack()                                                                                   |  3236    13
     3       |/*-                                                                                              |  3237    13
     4       | * Copyright (c) 1991, 1993, 1994                                                                |  3238    13
     5       | *      The Regents of the University of California.  All rights reserved.                       |  3239    13
     6       | *                                                                                               |  3240    13
     7       | * Redistribution and use in source and binary forms, with or without                            |  3241    13
     8       | * modification, are permitted provided that the following conditions                            |  3242    13
     9       | * are met:                                                                                      |  3243    13
    10       | * 1. Redistributions of source code must retain the above copyright                             |  3244    13
    11       | *    notice, this list of conditions and the following disclaimer.                              |  3245    13
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  3246    13
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  3247    13
    14       | *    documentation and/or other materials provided with the distribution.                       |  3248    13
    15       | * 3. All advertising materials mentioning features or use of this software                      |  3249    13
    16       | *    must display the following acknowledgement:                                                |  3250    13
    17       | *      This product includes software developed by the University of                            |  3251    13
    18       | *      California, Berkeley and its contributors.                                               |  3252    13
    19       | * 4. Neither the name of the University nor the names of its contributors                       |  3253    13
    20       | *    may be used to endorse or promote products derived from this software                      |  3254    13
    21       | *    without specific prior written permission.                                                 |  3255    13
    22       | *                                                                                               |  3256    13
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  3257    13
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  3258    13
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  3259    13
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  3260    13
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  3261    13
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  3262    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    64


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  3263    13
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  3264    13
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  3265    13
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3266    13
    33       | * SUCH DAMAGE.                                                                                  |  3267    13
    34       | *                                                                                               |  3268    13
    35       | *      @(#)unistd.h    8.12 (Berkeley) 4/27/95                                                  |  3269    13
    36       | */                                                                                              |  3270    13
    37       |                                                                                                 |  3271    13
    38       |#ifndef _UNISTD_H_                                                                               |  3272    13
    39       |#define _UNISTD_H_                                                                               |  3273    13
    40       |                                                                                                 |  3274    13
    41       |#include <sys/cdefs.h>                                                                           |  3275    13
     1       |/* release 2.25.00 */                                                                            |  3276     4
     2       |#pragma pack()                                                                                   |  3277     4
     3       |/*                                                                                               |  3278     4
     4       | * Copyright (c) 1991, 1993                                                                      |  3279     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  3280     4
     6       | *                                                                                               |  3281     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  3282     4
     8       | * Berkeley Software Design, Inc.                                                                |  3283     4
     9       | *                                                                                               |  3284     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  3285     4
    11       | * modification, are permitted provided that the following conditions                            |  3286     4
    12       | * are met:                                                                                      |  3287     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  3288     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  3289     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  3290     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  3291     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  3292     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  3293     4
    19       | *    must display the following acknowledgement:                                                |  3294     4
    20       | *      This product includes software developed by the University of                            |  3295     4
    21       | *      California, Berkeley and its contributors.                                               |  3296     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  3297     4
    23       | *    may be used to endorse or promote products derived from this software                      |  3298     4
    24       | *    without specific prior written permission.                                                 |  3299     4
    25       | *                                                                                               |  3300     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  3301     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  3302     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  3303     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  3304     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  3305     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  3306     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  3307     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  3308     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  3309     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3310     4
    36       | * SUCH DAMAGE.                                                                                  |  3311     4
    37       | *                                                                                               |  3312     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  3313     4
    39       | */                                                                                              |  3314     4
    40       |                                                                                                 |  3315     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    65


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  3316     4
    42       |#define _SYS_CDEFS_H_                                                                            |  3317     4
    43       |                                                                                                 |  3318     4
    44       |#if defined(__cplusplus)                                                                         |  3319     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  3320     4
    46       |#define __END_DECLS     }                                                                        |  3321     4
    47       |#else                                                                                            |  3322     4
    48       |#define __BEGIN_DECLS                                                                            |  3323     4
    49       |#define __END_DECLS                                                                              |  3324     4
    50       |#endif                                                                                           |  3325     4
    51       |                                                                                                 |  3326     4
    52       |/*                                                                                               |  3327     4
    53       | * This code has been put in place to help reduce the addition of                                |  3328     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  3329     4
    55       | * having a compiler-agnostic source tree.                                                       |  3330     4
    56       | */                                                                                              |  3331     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  3332     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  3333     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  3334     4
    60       |                                                                                                 |  3335     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  3336     4
    62       |                                                                                                 |  3337     4
    63       |                                                                                                 |  3338     4
    64       |/*                                                                                               |  3339     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  3340     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  3341     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  3342     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  3343     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  3344     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  3345     4
    71       | * this only works with ANSI C.                                                                  |  3346     4
    72       | *                                                                                               |  3347     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  3348     4
    74       | * first.  It is only available with ANSI C.                                                     |  3349     4
    75       | */                                                                                              |  3350     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  3351     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  3352     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  3353     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  3354     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  3355     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  3356     4
    82       |                                                                                                 |  3357     4
    83       |#define __const         const           /* define reserved names to standard */                  |  3358     4
    84       |#define __signed        signed                                                                   |  3359     4
    85       |#define __volatile      volatile                                                                 |  3360     4
    86       |#if defined(__cplusplus)                                                                         |  3361     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  3362     4
    88       |#else                                                                                            |  3363     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  3364     4
    90       |#endif /* !__cplusplus */                                                                        |  3365     4
    91       |                                                                                                 |  3366     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  3367     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  3368     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    66


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  3369     4
    95       |#define __STRING(x)     "x"                                                                      |  3370     4
    96       |                                                                                                 |  3371     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  3372     4
    98       |#define __inline                                                                                 |  3373     4
    99       |#define __signed                                                                                 |  3374     4
   100       |#define __volatile                                                                               |  3375     4
   101       |/*                                                                                               |  3376     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  3377     4
   103       | * deleted from the program and old programs will want them left alone.                          |  3378     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  3379     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  3380     4
   106       | */                                                                                              |  3381     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  3382     4
   108       |#define const                           /* delete ANSI C keywords */                             |  3383     4
   109       |#define inline                                                                                   |  3384     4
   110       |#define signed                                                                                   |  3385     4
   111       |#define volatile                                                                                 |  3386     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  3387     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  3388     4
   114       |                                                                                                 |  3389     4
   115       |/*                                                                                               |  3390     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  3391     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  3392     4
   118       | */                                                                                              |  3393     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  3394     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  3395     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  3396     4
   122       |#define __unused                                                                                 |  3397     4
   123       |#define __aligned(x)                                                                             |  3398     4
   124       |#define __section(x)                                                                             |  3399     4
   125       |#define __nonnull(x)                                                                             |  3400     4
   126       |#define __used                                                                                   |  3401     4
   127       |                                                                                                 |  3402     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  3403     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  3404     4
   130       |                                                                                                 |  3405     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  3406     4
   132       |#define __func__  NULL                                                                           |  3407     4
   133       |#endif                                                                                           |  3408     4
   134       |                                                                                                 |  3409     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  3410     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  3411     4
   137       |#endif                                                                                           |  3412     4
   138       |                                                                                                 |  3413     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  3414     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  3415     4
   141       | **/                                                                                             |  3416     4
   142       |#ifndef __cplusplus                                                                              |  3417     4
   143       |#define __restrict __restrict__                                                                  |  3418     4
   144       |#else                                                                                            |  3419     4
   145       |/* Systems/C++ does not */                                                                       |  3420     4
   146       |#define __restrict                                                                               |  3421     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    67


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   147       |#endif                                                                                           |  3422     4
   148       |                                                                                                 |  3423     4
   149       |/*                                                                                               |  3424     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  3425     4
   151       | */                                                                                              |  3426     4
   152       |#define __predict_true(exp)     (exp)                                                            |  3427     4
   153       |#define __predict_false(exp)    (exp)                                                            |  3428     4
   154       |                                                                                                 |  3429     4
   155       |                                                                                                 |  3430     4
   156       |/*                                                                                               |  3431     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  3432     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  3433     4
   159       | *                                                                                               |  3434     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  3435     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  3436     4
   162       | */                                                                                              |  3437     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  3438     4
   164       |#undef __offsetof                                                                                |  3439     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  3440     4
   166       |#endif                                                                                           |  3441     4
   167       |                                                                                                 |  3442     4
   168       |/*                                                                                               |  3443     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  3444     4
   170       | * or scanf-like arguments.                                                                      |  3445     4
   171       | */                                                                                              |  3446     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  3447     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  3448     4
   174       |#define __format_arg(fmtarg)                                                                     |  3449     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  3450     4
   176       |                                                                                                 |  3451     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  3452     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  3453     4
   179       |                                                                                                 |  3454     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  3455     4
   181       |#define __weak_reference(sym,alias)                                                              |  3456     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  3457     4
   183       |#define __warn_references(sym,msg)                                                               |  3458     4
   184       |                                                                                                 |  3459     4
   185       | /* This places the string into the resulting object.  It should */                              |  3460     4
   186       | /* probably become #pragma ident */                                                             |  3461     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  3462     4
   188       |                                                                                                 |  3463     4
   189       |#ifndef __RCSID                                                                                  |  3464     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  3465     4
   191       |#endif                                                                                           |  3466     4
   192       |                                                                                                 |  3467     4
   193       |/*                                                                                               |  3468     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  3469     4
   195       | * Usage:                                                                                        |  3470     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  3471     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  3472     4
   198       | */                                                                                              |  3473     4
   199       |#ifndef __SYSCID                                                                                 |  3474     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    68


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  3475     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  3476     4
   202       |#else                                                                                            |  3477     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  3478     4
   204       |#endif                                                                                           |  3479     4
   205       |#endif                                                                                           |  3480     4
   206       |                                                                                                 |  3481     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  3482     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  3483     4
   209       |#endif                                                                                           |  3484     4
   210       |                                                                                                 |  3485     4
   211       |#ifndef __COPYRIGHT                                                                              |  3486     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  3487     4
   213       |#endif                                                                                           |  3488     4
   214       |                                                                                                 |  3489     4
   215       |                                                                                                 |  3490     4
   216       |#ifndef __DECONST                                                                                |  3491     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  3492     4
   218       |#endif                                                                                           |  3493     4
   219       |                                                                                                 |  3494     4
   220       |#ifndef __DEVOLATILE                                                                             |  3495     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  3496     4
   222       |#endif                                                                                           |  3497     4
   223       |                                                                                                 |  3498     4
   224       |#ifndef __DEQUALIFY                                                                              |  3499     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  3500     4
   226       |#endif                                                                                           |  3501     4
   227       |                                                                                                 |  3502     4
   228       |                                                                                                 |  3503     4
   229       |/*-                                                                                              |  3504     4
   230       | * The following definitions are an extension of the behavior originally                         |  3505     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  3506     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  3507     4
   233       | * header file is included.                                                                      |  3508     4
   234       | *                                                                                               |  3509     4
   235       | * Here's a quick run-down of the versions:                                                      |  3510     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  3511     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  3512     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  3513     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  3514     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  3515     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  3516     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  3517     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  3518     4
   244       | *                                                                                               |  3519     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  3520     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  3521     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  3522     4
   248       | *                                                                                               |  3523     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  3524     4
   250       | */                                                                                              |  3525     4
   251       |                                                                                                 |  3526     4
   252       |/*                                                                                               |  3527     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    69


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   253       | * If no special macro was specified, make the DragonFly extensions                              |  3528     4
   254       | * available. Also make them available when requested so.                                        |  3529     4
   255       | */                                                                                              |  3530     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  3531     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  3532     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  3533     4
   259       |#define __DF_VISIBLE    1                                                                        |  3534     4
   260       |#else                                                                                            |  3535     4
   261       |#define __DF_VISIBLE    0                                                                        |  3536     4
   262       |#endif                                                                                           |  3537     4
   263       |                                                                                                 |  3538     4
   264       |/*-                                                                                              |  3539     4
   265       | * The following definitions are an extension of the behavior originally                         |  3540     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  3541     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  3542     4
   268       | * header file is included.                                                                      |  3543     4
   269       | *                                                                                               |  3544     4
   270       | * Here's a quick run-down of the versions:                                                      |  3545     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  3546     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  3547     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  3548     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  3549     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  3550     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  3551     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  3552     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  3553     4
   279       | *                                                                                               |  3554     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  3555     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  3556     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  3557     4
   283       | *                                                                                               |  3558     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  3559     4
   285       | */                                                                                              |  3560     4
   286       |                                                                                                 |  3561     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  3562     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  3563     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  3564     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  3565     4
   291       |#endif                                                                                           |  3566     4
   292       |                                                                                                 |  3567     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  3568     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  3569     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  3570     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  3571     4
   297       |#endif                                                                                           |  3572     4
   298       |                                                                                                 |  3573     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  3574     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  3575     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  3576     4
   302       |#define __XSI_VISIBLE           700                                                              |  3577     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  3578     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  3579     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  3580     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    70


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   306       |#define __XSI_VISIBLE           600                                                              |  3581     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  3582     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  3583     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  3584     4
   310       |#define __XSI_VISIBLE           500                                                              |  3585     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  3586     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  3587     4
   313       |#endif                                                                                           |  3588     4
   314       |#endif                                                                                           |  3589     4
   315       |                                                                                                 |  3590     4
   316       |/*                                                                                               |  3591     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  3592     4
   318       | * important.                                                                                    |  3593     4
   319       | */                                                                                              |  3594     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  3595     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  3596     4
   322       |#endif                                                                                           |  3597     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  3598     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  3599     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  3600     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  3601     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  3602     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  3603     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  3604     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  3605     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  3606     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  3607     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  3608     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  3609     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  3610     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  3611     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  3612     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  3613     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  3614     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  3615     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  3616     4
   342       |#else                                                                                            |  3617     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  3618     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  3619     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  3620     4
   346       |#else                                                                                            |  3621     4
   347       |/*-                                                                                              |  3622     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  3623     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  3624     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  3625     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  3626     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  3627     4
   353       | * a test program to print out the values.                                                       |  3628     4
   354       | *                                                                                               |  3629     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  3630     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  3631     4
   357       | * environment (and in fact we will never get here).                                             |  3632     4
   358       | */                                                                                              |  3633     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    71


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  3634     4
   360       |#define __POSIX_VISIBLE         0                                                                |  3635     4
   361       |#define __XSI_VISIBLE           0                                                                |  3636     4
   362       |#define __BSD_VISIBLE           0                                                                |  3637     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  3638     4
   364       |#define __EXT1_VISIBLE          0                                                                |  3639     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  3640     4
   366       |#define __POSIX_VISIBLE         0                                                                |  3641     4
   367       |#define __XSI_VISIBLE           0                                                                |  3642     4
   368       |#define __BSD_VISIBLE           0                                                                |  3643     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  3644     4
   370       |#define __EXT1_VISIBLE          0                                                                |  3645     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  3646     4
   372       |#define __POSIX_VISIBLE         0                                                                |  3647     4
   373       |#define __XSI_VISIBLE           0                                                                |  3648     4
   374       |#define __BSD_VISIBLE           0                                                                |  3649     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  3650     4
   376       |#define __EXT1_VISIBLE          0                                                                |  3651     4
   377       |#else                           /* Default environment: show everything. */                      |  3652     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  3653     4
   379       |#define __XSI_VISIBLE           700                                                              |  3654     4
   380       |#define __BSD_VISIBLE           1                                                                |  3655     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  3656     4
   382       |#define __EXT1_VISIBLE          1                                                                |  3657     4
   383       |#endif                                                                                           |  3658     4
   384       |#endif                                                                                           |  3659     4
   385       |                                                                                                 |  3660     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  3661     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  3662     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  3663     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  3664     4
   390       |#define __EXT1_VISIBLE          1                                                                |  3665     4
   391       |#else                                                                                            |  3666     4
   392       |#define __EXT1_VISIBLE          0                                                                |  3667     4
   393       |#endif                                                                                           |  3668     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  3669     4
   395       |                                                                                                 |  3670     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  3671     4
   397       |#define __NO_TLS 1                                                                               |  3672     4
   398       |#endif                                                                                           |  3673     4
   399       |                                                                                                 |  3674     4
   400       |                                                                                                 |  3675     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  3676     4
   402       |#define __FBSDID(x)                                                                              |  3677     4
   403       |                                                                                                 |  3678     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  3679     4
   405       |#pragma pack(reset)                                                                              |  3680     4
    42       |#include <sys/types.h>                  /* XXX adds too much pollution. */                       |  3681    13
     1       |/* release 2.25.00 */                                                                            |  3682     3
     2       |#pragma pack()                                                                                   |  3683     3
     3       |/*-                                                                                              |  3684     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    |  3685     3
     5       | *      The Regents of the University of California.  All rights reserved.                       |  3686     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    72


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  3687     3
     7       | * All or some portions of this file are derived from material licensed                          |  3688     3
     8       | * to the University of California by American Telephone and Telegraph                           |  3689     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  3690     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  3691     3
    11       | *                                                                                               |  3692     3
    12       | * Redistribution and use in source and binary forms, with or without                            |  3693     3
    13       | * modification, are permitted provided that the following conditions                            |  3694     3
    14       | * are met:                                                                                      |  3695     3
    15       | * 1. Redistributions of source code must retain the above copyright                             |  3696     3
    16       | *    notice, this list of conditions and the following disclaimer.                              |  3697     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  3698     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  3699     3
    19       | *    documentation and/or other materials provided with the distribution.                       |  3700     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  3701     3
    21       | *    may be used to endorse or promote products derived from this software                      |  3702     3
    22       | *    without specific prior written permission.                                                 |  3703     3
    23       | *                                                                                               |  3704     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  3705     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  3706     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  3707     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  3708     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  3709     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  3710     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  3711     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  3712     3
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  3713     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3714     3
    34       | * SUCH DAMAGE.                                                                                  |  3715     3
    35       | *                                                                                               |  3716     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   |  3717     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        |  3718     3
    38       | */                                                                                              |  3719     3
    39       |                                                                                                 |  3720     3
    40       |#ifndef _SYS_TYPES_H_                                                                            |  3721     3
    41       |#define _SYS_TYPES_H_                                                                            |  3722     3
    42       |                                                                                                 |  3723     3
    43       |#include <sys/cdefs.h>                                                                           |  3724     3
    44       |                                                                                                 |  3725     3
    45       |/* Machine type dependent parameters. */                                                         |  3726     3
    46       |#include <machine/endian.h>                                                                      |  3727     3
    47       |#include <sys/_types.h>                                                                          |  3728     3
    48       |                                                                                                 |  3729     3
    49       |#include <sys/_pthreadtypes.h>                                                                   |  3730     3
    50       |                                                                                                 |  3731     3
    51       |#if __BSD_VISIBLE                                                                                |  3732     3
    52       |typedef unsigned char   u_char;                                                                  |  3733     3
    53       |typedef unsigned short  u_short;                                                                 |  3734     3
    54       |typedef unsigned int    u_int;                                                                   |  3735     3
    55       |typedef unsigned long   u_long;                                                                  |  3736     3
    56       |#ifndef _KERNEL                                                                                  |  3737     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                |  3738     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                |  3739     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    73


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    59       |#endif                                                                                           |  3740     3
    60       |#endif                                                                                           |  3741     3
    61       |                                                                                                 |  3742     3
    62       |/*                                                                                               |  3743     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          |  3744     3
    64       | */                                                                                              |  3745     3
    65       |#ifndef _INT8_T_DECLARED                                                                         |  3746     3
    66       |typedef __int8_t        int8_t;                                                                  |  3747     3
    67       |#define _INT8_T_DECLARED                                                                         |  3748     3
    68       |#endif                                                                                           |  3749     3
    69       |                                                                                                 |  3750     3
    70       |#ifndef _INT16_T_DECLARED                                                                        |  3751     3
    71       |typedef __int16_t       int16_t;                                                                 |  3752     3
    72       |#define _INT16_T_DECLARED                                                                        |  3753     3
    73       |#endif                                                                                           |  3754     3
    74       |                                                                                                 |  3755     3
    75       |#ifndef _INT32_T_DECLARED                                                                        |  3756     3
    76       |typedef __int32_t       int32_t;                                                                 |  3757     3
    77       |#define _INT32_T_DECLARED                                                                        |  3758     3
    78       |#endif                                                                                           |  3759     3
    79       |                                                                                                 |  3760     3
    80       |#ifndef _INT64_T_DECLARED                                                                        |  3761     3
    81       |typedef __int64_t       int64_t;                                                                 |  3762     3
    82       |#define _INT64_T_DECLARED                                                                        |  3763     3
    83       |#endif                                                                                           |  3764     3
    84       |                                                                                                 |  3765     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        |  3766     3
    86       |typedef __uint8_t       uint8_t;                                                                 |  3767     3
    87       |#define _UINT8_T_DECLARED                                                                        |  3768     3
    88       |#endif                                                                                           |  3769     3
    89       |                                                                                                 |  3770     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       |  3771     3
    91       |typedef __uint16_t      uint16_t;                                                                |  3772     3
    92       |#define _UINT16_T_DECLARED                                                                       |  3773     3
    93       |#endif                                                                                           |  3774     3
    94       |                                                                                                 |  3775     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       |  3776     3
    96       |typedef __uint32_t      uint32_t;                                                                |  3777     3
    97       |#define _UINT32_T_DECLARED                                                                       |  3778     3
    98       |#endif                                                                                           |  3779     3
    99       |                                                                                                 |  3780     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       |  3781     3
   101       |typedef __uint64_t      uint64_t;                                                                |  3782     3
   102       |#define _UINT64_T_DECLARED                                                                       |  3783     3
   103       |#endif                                                                                           |  3784     3
   104       |                                                                                                 |  3785     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       |  3786     3
   106       |typedef __intptr_t      intptr_t;                                                                |  3787     3
   107       |typedef __uintptr_t     uintptr_t;                                                               |  3788     3
   108       |#define _INTPTR_T_DECLARED                                                                       |  3789     3
   109       |#endif                                                                                           |  3790     3
   110       |                                                                                                 |  3791     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    |  3792     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    74


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   112       |typedef __uint16_t      u_int16_t;                                                               |  3793     3
   113       |typedef __uint32_t      u_int32_t;                                                               |  3794     3
   114       |typedef __uint64_t      u_int64_t;                                                               |  3795     3
   115       |                                                                                                 |  3796     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 |  3797     3
   117       |typedef __int64_t       quad_t;                                                                  |  3798     3
   118       |typedef quad_t *        qaddr_t;                                                                 |  3799     3
   119       |                                                                                                 |  3800     3
   120       |typedef char *          caddr_t;        /* core address */                                       |  3801     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     |  3802     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  |  3803     3
   123       |                                                                                                 |  3804     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      |  3805     3
   125       |typedef __blksize_t     blksize_t;                                                               |  3806     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      |  3807     3
   127       |#endif                                                                                           |  3808     3
   128       |                                                                                                 |  3809     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       |  3810     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                |  3811     3
   131       |#define _BLKCNT_T_DECLARED                                                                       |  3812     3
   132       |#endif                                                                                           |  3813     3
   133       |                                                                                                 |  3814     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        |  3815     3
   135       |typedef __clock_t       clock_t;                                                                 |  3816     3
   136       |#define _CLOCK_T_DECLARED                                                                        |  3817     3
   137       |#endif                                                                                           |  3818     3
   138       |                                                                                                 |  3819     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      |  3820     3
   140       |typedef __clockid_t     clockid_t;                                                               |  3821     3
   141       |#define _CLOCKID_T_DECLARED                                                                      |  3822     3
   142       |#endif                                                                                           |  3823     3
   143       |                                                                                                 |  3824     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             |  3825     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       |  3826     3
   146       |                                                                                                 |  3827     3
   147       |#ifndef _DEV_T_DECLARED                                                                          |  3828     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       |  3829     3
   149       |#define _DEV_T_DECLARED                                                                          |  3830     3
   150       |#endif                                                                                           |  3831     3
   151       |                                                                                                 |  3832     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       |  3833     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         |  3834     3
   154       |#define _FFLAGS_T_DECLARED                                                                       |  3835     3
   155       |#endif                                                                                           |  3836     3
   156       |                                                                                                 |  3837     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 |  3838     3
   158       |                                                                                                 |  3839     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      |  3840     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              |  3841     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              |  3842     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     |  3843     3
   163       |#endif                                                                                           |  3844     3
   164       |                                                                                                 |  3845     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    75


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   165       |#ifndef _GID_T_DECLARED                                                                          |  3846     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           |  3847     3
   167       |#define _GID_T_DECLARED                                                                          |  3848     3
   168       |#endif                                                                                           |  3849     3
   169       |                                                                                                 |  3850     3
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      |  3851     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     |  3852     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      |  3853     3
   173       |#endif                                                                                           |  3854     3
   174       |                                                                                                 |  3855     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      |  3856     3
   176       |typedef __uint16_t      in_port_t;                                                               |  3857     3
   177       |#define _IN_PORT_T_DECLARED                                                                      |  3858     3
   178       |#endif                                                                                           |  3859     3
   179       |                                                                                                 |  3860     3
   180       |#ifndef _ID_T_DECLARED                                                                           |  3861     3
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          |  3862     3
   182       |#define _ID_T_DECLARED                                                                           |  3863     3
   183       |#endif                                                                                           |  3864     3
   184       |                                                                                                 |  3865     3
   185       |#ifndef _INO_T_DECLARED                                                                          |  3866     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       |  3867     3
   187       |#define _INO_T_DECLARED                                                                          |  3868     3
   188       |#endif                                                                                           |  3869     3
   189       |                                                                                                 |  3870     3
   190       |#ifndef _KEY_T_DECLARED                                                                          |  3871     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            |  3872     3
   192       |#define _KEY_T_DECLARED                                                                          |  3873     3
   193       |#endif                                                                                           |  3874     3
   194       |                                                                                                 |  3875     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        |  3876     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             |  3877     3
   197       |#define _LWPID_T_DECLARED                                                                        |  3878     3
   198       |#endif                                                                                           |  3879     3
   199       |                                                                                                 |  3880     3
   200       |#ifndef _MODE_T_DECLARED                                                                         |  3881     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        |  3882     3
   202       |#define _MODE_T_DECLARED                                                                         |  3883     3
   203       |#endif                                                                                           |  3884     3
   204       |                                                                                                 |  3885     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        |  3886     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         |  3887     3
   207       |#define _NLINK_T_DECLARED                                                                        |  3888     3
   208       |#endif                                                                                           |  3889     3
   209       |                                                                                                 |  3890     3
   210       |#ifndef _OFF_T_DECLARED                                                                          |  3891     3
   211       |typedef __off_t         off_t;          /* file offset */                                        |  3892     3
   212       |#define _OFF_T_DECLARED                                                                          |  3893     3
   213       |#endif                                                                                           |  3894     3
   214       |                                                                                                 |  3895     3
   215       |#ifndef _PID_T_DECLARED                                                                          |  3896     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         |  3897     3
   217       |#define _PID_T_DECLARED                                                                          |  3898     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    76


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   218       |#endif                                                                                           |  3899     3
   219       |                                                                                                 |  3900     3
   220       |typedef __register_t    register_t;                                                              |  3901     3
   221       |                                                                                                 |  3902     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         |  3903     3
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     |  3904     3
   224       |#define _RLIM_T_DECLARED                                                                         |  3905     3
   225       |#endif                                                                                           |  3906     3
   226       |                                                                                                 |  3907     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            |  3908     3
   228       |                                                                                                 |  3909     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         |  3910     3
   230       |typedef __size_t        size_t;                                                                  |  3911     3
   231       |#define _SIZE_T_DECLARED                                                                         |  3912     3
   232       |#endif                                                                                           |  3913     3
   233       |                                                                                                 |  3914     3
   234       |#ifndef _SSIZE_T_DECLARED                                                                        |  3915     3
   235       |typedef __ssize_t       ssize_t;                                                                 |  3916     3
   236       |#define _SSIZE_T_DECLARED                                                                        |  3917     3
   237       |#endif                                                                                           |  3918     3
   238       |                                                                                                 |  3919     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  3920     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              |  3921     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    |  3922     3
   242       |#endif                                                                                           |  3923     3
   243       |                                                                                                 |  3924     3
   244       |#ifndef _TIME_T_DECLARED                                                                         |  3925     3
   245       |typedef __time_t        time_t;                                                                  |  3926     3
   246       |#define _TIME_T_DECLARED                                                                         |  3927     3
   247       |#endif                                                                                           |  3928     3
   248       |                                                                                                 |  3929     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        |  3930     3
   250       |typedef __timer_t       timer_t;                                                                 |  3931     3
   251       |#define _TIMER_T_DECLARED                                                                        |  3932     3
   252       |#endif                                                                                           |  3933     3
   253       |                                                                                                 |  3934     3
   254       |typedef __u_register_t  u_register_t;                                                            |  3935     3
   255       |                                                                                                 |  3936     3
   256       |#ifndef _UID_T_DECLARED                                                                          |  3937     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            |  3938     3
   258       |#define _UID_T_DECLARED                                                                          |  3939     3
   259       |#endif                                                                                           |  3940     3
   260       |                                                                                                 |  3941     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     |  3942     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            |  3943     3
   263       |#define _USECONDS_T_DECLARED                                                                     |  3944     3
   264       |#endif                                                                                           |  3945     3
   265       |                                                                                                 |  3946     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             |  3947     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            |  3948     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              |  3949     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             |  3950     3
   270       |typedef __vm_size_t     vm_size_t;                                                               |  3951     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    77


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   271       |                                                                                                 |  3952     3
   272       |#ifdef _KERNEL                                                                                   |  3953     3
   273       |typedef int             boolean_t;                                                               |  3954     3
   274       |typedef __cpumask_t     cpumask_t;                                                               |  3955     3
   275       |typedef __intfptr_t     intfptr_t;                                                               |  3956     3
   276       |                                                                                                 |  3957     3
   277       |/*-                                                                                              |  3958     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      |  3959     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           |  3960     3
   280       | * compatibility is essential.  Least-width types should be used even less                       |  3961     3
   281       | * since they provide smaller benefits.                                                          |  3962     3
   282       | * XXX should be MD.                                                                             |  3963     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     |  3964     3
   284       | */                                                                                              |  3965     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 |  3966     3
   286       |                                                                                                 |  3967     3
   287       |typedef __uintfptr_t    uintfptr_t;                                                              |  3968     3
   288       |typedef __uint64_t      uoff_t;                                                                  |  3969     3
   289       |typedef struct vm_page  *vm_page_t;                                                              |  3970     3
   290       |                                                                                                 |  3971     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            |  3972     3
   292       |                                                                                                 |  3973     3
   293       |#endif /* !_KERNEL */                                                                            |  3974     3
   294       |                                                                                                 |  3975     3
   295       |/*                                                                                               |  3976     3
   296       | * The following are all things that really shouldn't exist in this header,                      |  3977     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          |  3978     3
   298       | */                                                                                              |  3979     3
   299       |#if __BSD_VISIBLE                                                                                |  3980     3
   300       |                                                                                                 |  3981     3
   301       |#include <sys/select.h>                                                                          |  3982     3
   302       |                                                                                                 |  3983     3
   303       |#ifndef _KERNEL                                                                                  |  3984     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    |  3985     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    |  3986     3
   306       |#endif /* !_KERNEL */                                                                            |  3987     3
   307       |                                                                                                 |  3988     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    |  3989     3
   309       |                                                                                                 |  3990     3
   310       |/*                                                                                               |  3991     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             |  3992     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             |  3993     3
   313       | * 64-bit off_t's.                                                                               |  3994     3
   314       | */                                                                                              |  3995     3
   315       |#ifndef _KERNEL                                                                                  |  3996     3
   316       |__BEGIN_DECLS                                                                                    |  3997     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      |  3998     3
   318       |#define _FTRUNCATE_DECLARED                                                                      |  3999     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  4000     3
   320       |int      ftruncate(int, off_t);                                                                  |  4001     3
   321       |#endif                                                                                           |  4002     3
   322       |#ifndef _LSEEK_DECLARED                                                                          |  4003     3
   323       |#define _LSEEK_DECLARED                                                                          |  4004     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    78


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   324       |off_t    lseek(int, off_t, int);                                                                 |  4005     3
   325       |#endif                                                                                           |  4006     3
   326       |#ifndef _MMAP_DECLARED                                                                           |  4007     3
   327       |#define _MMAP_DECLARED                                                                           |  4008     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             |  4009     3
   329       |#endif                                                                                           |  4010     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       |  4011     3
   331       |#define _TRUNCATE_DECLARED                                                                       |  4012     3
   332       |int      truncate(const char *, off_t);                                                          |  4013     3
   333       |#endif                                                                                           |  4014     3
   334       |__END_DECLS                                                                                      |  4015     3
   335       |#endif /* !_KERNEL */                                                                            |  4016     3
   336       |                                                                                                 |  4017     3
   337       |#endif /* __BSD_VISIBLE */                                                                       |  4018     3
   338       |                                                                                                 |  4019     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      |  4020     3
   340       |#pragma pack(reset)                                                                              |  4021     3
    43       |#include <sys/unistd.h>                                                                          |  4022    13
     1       |/* release 2.25.00 */                                                                            |  4023    14
     2       |#pragma pack()                                                                                   |  4024    14
     3       |/*-                                                                                              |  4025    14
     4       | * Copyright (c) 1989, 1993                                                                      |  4026    14
     5       | *      The Regents of the University of California.  All rights reserved.                       |  4027    14
     6       | *                                                                                               |  4028    14
     7       | * Redistribution and use in source and binary forms, with or without                            |  4029    14
     8       | * modification, are permitted provided that the following conditions                            |  4030    14
     9       | * are met:                                                                                      |  4031    14
    10       | * 1. Redistributions of source code must retain the above copyright                             |  4032    14
    11       | *    notice, this list of conditions and the following disclaimer.                              |  4033    14
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4034    14
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  4035    14
    14       | *    documentation and/or other materials provided with the distribution.                       |  4036    14
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  4037    14
    16       | *    may be used to endorse or promote products derived from this software                      |  4038    14
    17       | *    without specific prior written permission.                                                 |  4039    14
    18       | *                                                                                               |  4040    14
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  4041    14
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  4042    14
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  4043    14
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  4044    14
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  4045    14
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  4046    14
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  4047    14
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  4048    14
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  4049    14
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  4050    14
    29       | * SUCH DAMAGE.                                                                                  |  4051    14
    30       | *                                                                                               |  4052    14
    31       | *      @(#)unistd.h    8.2 (Berkeley) 1/7/94                                                    |  4053    14
    32       | */                                                                                              |  4054    14
    33       |                                                                                                 |  4055    14
    34       |#ifndef _SYS_UNISTD_H_                                                                           |  4056    14
    35       |#define _SYS_UNISTD_H_                                                                           |  4057    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    79


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       |                                                                                                 |  4058    14
    37       |#include <sys/cdefs.h>                                                                           |  4059    14
     1       |/* release 2.25.00 */                                                                            |  4060     4
     2       |#pragma pack()                                                                                   |  4061     4
     3       |/*                                                                                               |  4062     4
     4       | * Copyright (c) 1991, 1993                                                                      |  4063     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  4064     4
     6       | *                                                                                               |  4065     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  4066     4
     8       | * Berkeley Software Design, Inc.                                                                |  4067     4
     9       | *                                                                                               |  4068     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  4069     4
    11       | * modification, are permitted provided that the following conditions                            |  4070     4
    12       | * are met:                                                                                      |  4071     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  4072     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  4073     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4074     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  4075     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  4076     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  4077     4
    19       | *    must display the following acknowledgement:                                                |  4078     4
    20       | *      This product includes software developed by the University of                            |  4079     4
    21       | *      California, Berkeley and its contributors.                                               |  4080     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  4081     4
    23       | *    may be used to endorse or promote products derived from this software                      |  4082     4
    24       | *    without specific prior written permission.                                                 |  4083     4
    25       | *                                                                                               |  4084     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  4085     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  4086     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  4087     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  4088     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  4089     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  4090     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  4091     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  4092     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  4093     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  4094     4
    36       | * SUCH DAMAGE.                                                                                  |  4095     4
    37       | *                                                                                               |  4096     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  4097     4
    39       | */                                                                                              |  4098     4
    40       |                                                                                                 |  4099     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  4100     4
    42       |#define _SYS_CDEFS_H_                                                                            |  4101     4
    43       |                                                                                                 |  4102     4
    44       |#if defined(__cplusplus)                                                                         |  4103     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  4104     4
    46       |#define __END_DECLS     }                                                                        |  4105     4
    47       |#else                                                                                            |  4106     4
    48       |#define __BEGIN_DECLS                                                                            |  4107     4
    49       |#define __END_DECLS                                                                              |  4108     4
    50       |#endif                                                                                           |  4109     4
    51       |                                                                                                 |  4110     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    80


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |/*                                                                                               |  4111     4
    53       | * This code has been put in place to help reduce the addition of                                |  4112     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  4113     4
    55       | * having a compiler-agnostic source tree.                                                       |  4114     4
    56       | */                                                                                              |  4115     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  4116     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  4117     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  4118     4
    60       |                                                                                                 |  4119     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  4120     4
    62       |                                                                                                 |  4121     4
    63       |                                                                                                 |  4122     4
    64       |/*                                                                                               |  4123     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  4124     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  4125     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  4126     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  4127     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  4128     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  4129     4
    71       | * this only works with ANSI C.                                                                  |  4130     4
    72       | *                                                                                               |  4131     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  4132     4
    74       | * first.  It is only available with ANSI C.                                                     |  4133     4
    75       | */                                                                                              |  4134     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  4135     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  4136     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  4137     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  4138     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  4139     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  4140     4
    82       |                                                                                                 |  4141     4
    83       |#define __const         const           /* define reserved names to standard */                  |  4142     4
    84       |#define __signed        signed                                                                   |  4143     4
    85       |#define __volatile      volatile                                                                 |  4144     4
    86       |#if defined(__cplusplus)                                                                         |  4145     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  4146     4
    88       |#else                                                                                            |  4147     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  4148     4
    90       |#endif /* !__cplusplus */                                                                        |  4149     4
    91       |                                                                                                 |  4150     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  4151     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  4152     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  4153     4
    95       |#define __STRING(x)     "x"                                                                      |  4154     4
    96       |                                                                                                 |  4155     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  4156     4
    98       |#define __inline                                                                                 |  4157     4
    99       |#define __signed                                                                                 |  4158     4
   100       |#define __volatile                                                                               |  4159     4
   101       |/*                                                                                               |  4160     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  4161     4
   103       | * deleted from the program and old programs will want them left alone.                          |  4162     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  4163     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    81


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  4164     4
   106       | */                                                                                              |  4165     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  4166     4
   108       |#define const                           /* delete ANSI C keywords */                             |  4167     4
   109       |#define inline                                                                                   |  4168     4
   110       |#define signed                                                                                   |  4169     4
   111       |#define volatile                                                                                 |  4170     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  4171     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  4172     4
   114       |                                                                                                 |  4173     4
   115       |/*                                                                                               |  4174     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  4175     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  4176     4
   118       | */                                                                                              |  4177     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  4178     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  4179     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  4180     4
   122       |#define __unused                                                                                 |  4181     4
   123       |#define __aligned(x)                                                                             |  4182     4
   124       |#define __section(x)                                                                             |  4183     4
   125       |#define __nonnull(x)                                                                             |  4184     4
   126       |#define __used                                                                                   |  4185     4
   127       |                                                                                                 |  4186     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  4187     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  4188     4
   130       |                                                                                                 |  4189     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  4190     4
   132       |#define __func__  NULL                                                                           |  4191     4
   133       |#endif                                                                                           |  4192     4
   134       |                                                                                                 |  4193     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  4194     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  4195     4
   137       |#endif                                                                                           |  4196     4
   138       |                                                                                                 |  4197     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  4198     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  4199     4
   141       | **/                                                                                             |  4200     4
   142       |#ifndef __cplusplus                                                                              |  4201     4
   143       |#define __restrict __restrict__                                                                  |  4202     4
   144       |#else                                                                                            |  4203     4
   145       |/* Systems/C++ does not */                                                                       |  4204     4
   146       |#define __restrict                                                                               |  4205     4
   147       |#endif                                                                                           |  4206     4
   148       |                                                                                                 |  4207     4
   149       |/*                                                                                               |  4208     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  4209     4
   151       | */                                                                                              |  4210     4
   152       |#define __predict_true(exp)     (exp)                                                            |  4211     4
   153       |#define __predict_false(exp)    (exp)                                                            |  4212     4
   154       |                                                                                                 |  4213     4
   155       |                                                                                                 |  4214     4
   156       |/*                                                                                               |  4215     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  4216     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    82


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   158       | * <sys/types.h> reference __offsetof().                                                         |  4217     4
   159       | *                                                                                               |  4218     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  4219     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  4220     4
   162       | */                                                                                              |  4221     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  4222     4
   164       |#undef __offsetof                                                                                |  4223     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  4224     4
   166       |#endif                                                                                           |  4225     4
   167       |                                                                                                 |  4226     4
   168       |/*                                                                                               |  4227     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  4228     4
   170       | * or scanf-like arguments.                                                                      |  4229     4
   171       | */                                                                                              |  4230     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  4231     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  4232     4
   174       |#define __format_arg(fmtarg)                                                                     |  4233     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  4234     4
   176       |                                                                                                 |  4235     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  4236     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  4237     4
   179       |                                                                                                 |  4238     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  4239     4
   181       |#define __weak_reference(sym,alias)                                                              |  4240     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  4241     4
   183       |#define __warn_references(sym,msg)                                                               |  4242     4
   184       |                                                                                                 |  4243     4
   185       | /* This places the string into the resulting object.  It should */                              |  4244     4
   186       | /* probably become #pragma ident */                                                             |  4245     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  4246     4
   188       |                                                                                                 |  4247     4
   189       |#ifndef __RCSID                                                                                  |  4248     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  4249     4
   191       |#endif                                                                                           |  4250     4
   192       |                                                                                                 |  4251     4
   193       |/*                                                                                               |  4252     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  4253     4
   195       | * Usage:                                                                                        |  4254     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  4255     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  4256     4
   198       | */                                                                                              |  4257     4
   199       |#ifndef __SYSCID                                                                                 |  4258     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  4259     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  4260     4
   202       |#else                                                                                            |  4261     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  4262     4
   204       |#endif                                                                                           |  4263     4
   205       |#endif                                                                                           |  4264     4
   206       |                                                                                                 |  4265     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  4266     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  4267     4
   209       |#endif                                                                                           |  4268     4
   210       |                                                                                                 |  4269     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    83


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   211       |#ifndef __COPYRIGHT                                                                              |  4270     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  4271     4
   213       |#endif                                                                                           |  4272     4
   214       |                                                                                                 |  4273     4
   215       |                                                                                                 |  4274     4
   216       |#ifndef __DECONST                                                                                |  4275     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  4276     4
   218       |#endif                                                                                           |  4277     4
   219       |                                                                                                 |  4278     4
   220       |#ifndef __DEVOLATILE                                                                             |  4279     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  4280     4
   222       |#endif                                                                                           |  4281     4
   223       |                                                                                                 |  4282     4
   224       |#ifndef __DEQUALIFY                                                                              |  4283     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  4284     4
   226       |#endif                                                                                           |  4285     4
   227       |                                                                                                 |  4286     4
   228       |                                                                                                 |  4287     4
   229       |/*-                                                                                              |  4288     4
   230       | * The following definitions are an extension of the behavior originally                         |  4289     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  4290     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  4291     4
   233       | * header file is included.                                                                      |  4292     4
   234       | *                                                                                               |  4293     4
   235       | * Here's a quick run-down of the versions:                                                      |  4294     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  4295     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  4296     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  4297     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  4298     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  4299     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  4300     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  4301     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  4302     4
   244       | *                                                                                               |  4303     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  4304     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  4305     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  4306     4
   248       | *                                                                                               |  4307     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  4308     4
   250       | */                                                                                              |  4309     4
   251       |                                                                                                 |  4310     4
   252       |/*                                                                                               |  4311     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  4312     4
   254       | * available. Also make them available when requested so.                                        |  4313     4
   255       | */                                                                                              |  4314     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  4315     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  4316     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  4317     4
   259       |#define __DF_VISIBLE    1                                                                        |  4318     4
   260       |#else                                                                                            |  4319     4
   261       |#define __DF_VISIBLE    0                                                                        |  4320     4
   262       |#endif                                                                                           |  4321     4
   263       |                                                                                                 |  4322     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    84


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   264       |/*-                                                                                              |  4323     4
   265       | * The following definitions are an extension of the behavior originally                         |  4324     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  4325     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  4326     4
   268       | * header file is included.                                                                      |  4327     4
   269       | *                                                                                               |  4328     4
   270       | * Here's a quick run-down of the versions:                                                      |  4329     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  4330     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  4331     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  4332     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  4333     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  4334     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  4335     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  4336     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  4337     4
   279       | *                                                                                               |  4338     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  4339     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  4340     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  4341     4
   283       | *                                                                                               |  4342     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  4343     4
   285       | */                                                                                              |  4344     4
   286       |                                                                                                 |  4345     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  4346     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  4347     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  4348     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  4349     4
   291       |#endif                                                                                           |  4350     4
   292       |                                                                                                 |  4351     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  4352     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  4353     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  4354     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  4355     4
   297       |#endif                                                                                           |  4356     4
   298       |                                                                                                 |  4357     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  4358     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  4359     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  4360     4
   302       |#define __XSI_VISIBLE           700                                                              |  4361     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  4362     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  4363     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  4364     4
   306       |#define __XSI_VISIBLE           600                                                              |  4365     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  4366     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  4367     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  4368     4
   310       |#define __XSI_VISIBLE           500                                                              |  4369     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  4370     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  4371     4
   313       |#endif                                                                                           |  4372     4
   314       |#endif                                                                                           |  4373     4
   315       |                                                                                                 |  4374     4
   316       |/*                                                                                               |  4375     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    85


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  4376     4
   318       | * important.                                                                                    |  4377     4
   319       | */                                                                                              |  4378     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  4379     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  4380     4
   322       |#endif                                                                                           |  4381     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  4382     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  4383     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  4384     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  4385     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  4386     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  4387     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  4388     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  4389     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  4390     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  4391     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  4392     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  4393     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  4394     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  4395     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  4396     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  4397     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  4398     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  4399     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  4400     4
   342       |#else                                                                                            |  4401     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  4402     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  4403     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  4404     4
   346       |#else                                                                                            |  4405     4
   347       |/*-                                                                                              |  4406     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  4407     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  4408     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  4409     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  4410     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  4411     4
   353       | * a test program to print out the values.                                                       |  4412     4
   354       | *                                                                                               |  4413     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  4414     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  4415     4
   357       | * environment (and in fact we will never get here).                                             |  4416     4
   358       | */                                                                                              |  4417     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  4418     4
   360       |#define __POSIX_VISIBLE         0                                                                |  4419     4
   361       |#define __XSI_VISIBLE           0                                                                |  4420     4
   362       |#define __BSD_VISIBLE           0                                                                |  4421     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  4422     4
   364       |#define __EXT1_VISIBLE          0                                                                |  4423     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  4424     4
   366       |#define __POSIX_VISIBLE         0                                                                |  4425     4
   367       |#define __XSI_VISIBLE           0                                                                |  4426     4
   368       |#define __BSD_VISIBLE           0                                                                |  4427     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  4428     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    86


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   370       |#define __EXT1_VISIBLE          0                                                                |  4429     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  4430     4
   372       |#define __POSIX_VISIBLE         0                                                                |  4431     4
   373       |#define __XSI_VISIBLE           0                                                                |  4432     4
   374       |#define __BSD_VISIBLE           0                                                                |  4433     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  4434     4
   376       |#define __EXT1_VISIBLE          0                                                                |  4435     4
   377       |#else                           /* Default environment: show everything. */                      |  4436     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  4437     4
   379       |#define __XSI_VISIBLE           700                                                              |  4438     4
   380       |#define __BSD_VISIBLE           1                                                                |  4439     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  4440     4
   382       |#define __EXT1_VISIBLE          1                                                                |  4441     4
   383       |#endif                                                                                           |  4442     4
   384       |#endif                                                                                           |  4443     4
   385       |                                                                                                 |  4444     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  4445     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  4446     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  4447     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  4448     4
   390       |#define __EXT1_VISIBLE          1                                                                |  4449     4
   391       |#else                                                                                            |  4450     4
   392       |#define __EXT1_VISIBLE          0                                                                |  4451     4
   393       |#endif                                                                                           |  4452     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  4453     4
   395       |                                                                                                 |  4454     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  4455     4
   397       |#define __NO_TLS 1                                                                               |  4456     4
   398       |#endif                                                                                           |  4457     4
   399       |                                                                                                 |  4458     4
   400       |                                                                                                 |  4459     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  4460     4
   402       |#define __FBSDID(x)                                                                              |  4461     4
   403       |                                                                                                 |  4462     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  4463     4
   405       |#pragma pack(reset)                                                                              |  4464     4
    38       |                                                                                                 |  4465    14
    39       |/*                                                                                               |  4466    14
    40       | * POSIX options and option groups we unconditionally do or don't                                |  4467    14
    41       | * implement.  Those options which are implemented (or not) entirely                             |  4468    14
    42       | * in user mode are defined in <unistd.h>.  Please keep this list in                             |  4469    14
    43       | * alphabetical order.                                                                           |  4470    14
    44       | *                                                                                               |  4471    14
    45       | * Anything which is defined as zero below **must** have an                                      |  4472    14
    46       | * implementation for the corresponding sysconf() which is able to                               |  4473    14
    47       | * determine conclusively whether or not the feature is supported.                               |  4474    14
    48       | * Anything which is defined as other than -1 below **must** have                                |  4475    14
    49       | * complete headers, types, and function declarations as specified by                            |  4476    14
    50       | * the POSIX standard; however, if the relevant sysconf() function                               |  4477    14
    51       | * returns -1, the functions may be stubbed out.                                                 |  4478    14
    52       | */                                                                                              |  4479    14
    53       |#define _POSIX_ADVISORY_INFO            -1                                                       |  4480    14
    54       |#define _POSIX_ASYNCHRONOUS_IO          0                                                        |  4481    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    87


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       |#define _POSIX_CHOWN_RESTRICTED         1                                                        |  4482    14
    56       |#define _POSIX_CLOCK_SELECTION          -1                                                       |  4483    14
    57       |#define _POSIX_CPUTIME                  -1                                                       |  4484    14
    58       |#define _POSIX_FSYNC                    200112L                                                  |  4485    14
    59       |#define _POSIX_IPV6                     0                                                        |  4486    14
    60       |#define _POSIX_JOB_CONTROL              1                                                        |  4487    14
    61       |#define _POSIX_MAPPED_FILES             200112L                                                  |  4488    14
    62       |#define _POSIX_MEMLOCK                  -1                                                       |  4489    14
    63       |#define _POSIX_MEMLOCK_RANGE            200112L                                                  |  4490    14
    64       |#define _POSIX_MEMORY_PROTECTION        200112L                                                  |  4491    14
    65       |#define _POSIX_MESSAGE_PASSING          -1                                                       |  4492    14
    66       |#define _POSIX_MONOTONIC_CLOCK          -1                                                       |  4493    14
    67       |#define _POSIX_NO_TRUNC                 1                                                        |  4494    14
    68       |#define _POSIX_PRIORITIZED_IO           -1                                                       |  4495    14
    69       |#define _POSIX_PRIORITY_SCHEDULING      200112L                                                  |  4496    14
    70       |#define _POSIX_RAW_SOCKETS              200112L                                                  |  4497    14
    71       |#define _POSIX_REALTIME_SIGNALS         -1                                                       |  4498    14
    72       |#define _POSIX_SEMAPHORES               -1                                                       |  4499    14
    73       |#define _POSIX_SHARED_MEMORY_OBJECTS    200112L                                                  |  4500    14
    74       |#define _POSIX_SPORADIC_SERVER          -1                                                       |  4501    14
    75       |#define _POSIX_SYNCHRONIZED_IO          -1                                                       |  4502    14
    76       |#define _POSIX_TIMEOUTS                 -1                                                       |  4503    14
    77       |#define _POSIX_TYPED_MEMORY_OBJECTS     -1                                                       |  4504    14
    78       |#define _POSIX_VDISABLE                 0xff                                                     |  4505    14
    79       |                                                                                                 |  4506    14
    80       |#if __XSI_VISIBLE                                                                                |  4507    14
    81       |#define _XOPEN_SHM                      1                                                        |  4508    14
    82       |#define _XOPEN_STREAMS                  -1                                                       |  4509    14
    83       |#endif                                                                                           |  4510    14
    84       |                                                                                                 |  4511    14
    84       +                                                                                                 +  4511    14
    85       |/*                                                                                               |  4512    14
    86       | * Although we have saved user/group IDs, we do not use them in setuid                           |  4513    14
    87       | * as described in POSIX 1003.1, because the feature does not work for                           |  4514    14
    88       | * root.  We use the saved IDs in seteuid/setegid, which are not currently                       |  4515    14
    89       | * part of the POSIX 1003.1 specification.  XXX revisit for 1003.1-2001                          |  4516    14
    90       | * as this is now mandatory.                                                                     |  4517    14
    91       | */                                                                                              |  4518    14
    92       |#ifdef  _NOT_AVAILABLE                                                                           |  4519    14
    93       |#define _POSIX_SAVED_IDS        1 /* saved set-user-ID and set-group-ID */                       |  4520    14
    94       |#endif                                                                                           |  4521    14
    95       |                                                                                                 |  4522    14
    96       |/* Define the POSIX.1 version we target for compliance. */                                       |  4523    14
    97       |#define _POSIX_VERSION          200112L                                                          |  4524    14
    98       |                                                                                                 |  4525    14
    99       |/* access function */                                                                            |  4526    14
   100       |#define F_OK            0       /* test for existence of file */                                 |  4527    14
   101       |#define X_OK            0x01    /* test for execute or search permission */                      |  4528    14
   102       |#define W_OK            0x02    /* test for write permission */                                  |  4529    14
   103       |#define R_OK            0x04    /* test for read permission */                                   |  4530    14
   104       |                                                                                                 |  4531    14
   105       |/* whence values for lseek(2) */                                                                 |  4532    14
   106       |#ifndef SEEK_SET                                                                                 |  4533    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    88


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |#define SEEK_SET        0       /* set file offset to offset */                                  |  4534    14
   108       |#define SEEK_CUR        1       /* set file offset to current plus offset */                     |  4535    14
   109       |#define SEEK_END        2       /* set file offset to EOF plus offset */                         |  4536    14
   110       |#endif                                                                                           |  4537    14
   111       |                                                                                                 |  4538    14
   112       |#ifndef _POSIX_SOURCE                                                                            |  4539    14
   113       |/* whence values for lseek(2); renamed by POSIX 1003.1 */                                        |  4540    14
   114       |#define L_SET           SEEK_SET                                                                 |  4541    14
   115       |#define L_INCR          SEEK_CUR                                                                 |  4542    14
   116       |#define L_XTND          SEEK_END                                                                 |  4543    14
   117       |#endif                                                                                           |  4544    14
   118       |                                                                                                 |  4545    14
   119       |/* configurable pathname variables */                                                            |  4546    14
   120       |#define _PC_LINK_MAX             1                                                               |  4547    14
   121       |#define _PC_MAX_CANON            2                                                               |  4548    14
   122       |#define _PC_MAX_INPUT            3                                                               |  4549    14
   123       |#define _PC_NAME_MAX             4                                                               |  4550    14
   124       |#define _PC_PATH_MAX             5                                                               |  4551    14
   125       |#define _PC_PIPE_BUF             6                                                               |  4552    14
   126       |#define _PC_CHOWN_RESTRICTED     7                                                               |  4553    14
   127       |#define _PC_NO_TRUNC             8                                                               |  4554    14
   128       |#define _PC_VDISABLE             9                                                               |  4555    14
   129       |                                                                                                 |  4556    14
   130       |#if __POSIX_VISIBLE >= 199309                                                                    |  4557    14
   131       |#define _PC_ASYNC_IO            53                                                               |  4558    14
   132       |#define _PC_PRIO_IO             54                                                               |  4559    14
   133       |#define _PC_SYNC_IO             55                                                               |  4560    14
   134       |#endif                                                                                           |  4561    14
   135       |                                                                                                 |  4562    14
   135       +                                                                                                 +  4562    14
   136       |#if __POSIX_VISIBLE >= 200112                                                                    |  4563    14
   137       |#define _PC_ALLOC_SIZE_MIN      10                                                               |  4564    14
   138       |#define _PC_FILESIZEBITS        12                                                               |  4565    14
   139       |#define _PC_REC_INCR_XFER_SIZE  14                                                               |  4566    14
   140       |#define _PC_REC_MAX_XFER_SIZE   15                                                               |  4567    14
   141       |#define _PC_REC_MIN_XFER_SIZE   16                                                               |  4568    14
   142       |#define _PC_REC_XFER_ALIGN      17                                                               |  4569    14
   143       |#define _PC_SYMLINK_MAX         18                                                               |  4570    14
   144       |#endif                                                                                           |  4571    14
   145       |                                                                                                 |  4572    14
   145       +                                                                                                 +  4572    14
   146       |#if __BSD_VISIBLE                                                                                |  4573    14
   147       |#define _PC_ACL_EXTENDED        59                                                               |  4574    14
   148       |#define _PC_ACL_PATH_MAX        60                                                               |  4575    14
   149       |#define _PC_CAP_PRESENT         61                                                               |  4576    14
   150       |#define _PC_INF_PRESENT         62                                                               |  4577    14
   151       |#define _PC_MAC_PRESENT         63                                                               |  4578    14
   152       |#endif                                                                                           |  4579    14
   153       |                                                                                                 |  4580    14
   153       +                                                                                                 +  4580    14
   154       |#if __BSD_VISIBLE                                                                                |  4581    14
   155       |/*                                                                                               |  4582    14
   156       | * rfork() options.                                                                              |  4583    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    89


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   157       | *                                                                                               |  4584    14
   158       | * XXX currently, some operations without RFPROC set are not supported.                          |  4585    14
   159       | */                                                                                              |  4586    14
   159       +                                                                                                 +  4586    14
   160       |#define RFNAMEG         (1<<0)  /* UNIMPL new plan9 `name space' */                              |  4587    14
   161       |#define RFENVG          (1<<1)  /* UNIMPL copy plan9 `env space' */                              |  4588    14
   162       |#define RFFDG           (1<<2)  /* copy fd table */                                              |  4589    14
   163       |#define RFNOTEG         (1<<3)  /* UNIMPL create new plan9 `note group' */                       |  4590    14
   164       |#define RFPROC          (1<<4)  /* change child (else changes curproc) */                        |  4591    14
   165       |#define RFMEM           (1<<5)  /* share `address space' */                                      |  4592    14
   166       |#define RFNOWAIT        (1<<6)  /* give child to init */                                         |  4593    14
   167       |#define RFCNAMEG        (1<<10) /* UNIMPL zero plan9 `name space' */                             |  4594    14
   168       |#define RFCENVG         (1<<11) /* UNIMPL zero plan9 `env space' */                              |  4595    14
   169       |#define RFCFDG          (1<<12) /* close all fds, zero fd table */                               |  4596    14
   170       |#define RFTHREAD        (1<<13) /* enable kernel thread support */                               |  4597    14
   171       |#define RFSIGSHARE      (1<<14) /* share signal handlers */                                      |  4598    14
   172       |#define RFLINUXTHPN     (1<<16) /* do linux clone exit parent notification */                    |  4599    14
   173       |#define RFSTOPPED       (1<<17) /* leave child in a stopped state */                             |  4600    14
   174       |#define RFHIGHPID       (1<<18) /* use a pid higher then 10 (idleproc) */                        |  4601    14
   175       |#define RFPPWAIT        (1<<31) /* parent sleeps until child exits (vfork) */                    |  4602    14
   176       |#define RFKERNELONLY    (RFSTOPPED | RFHIGHPID | RFPPWAIT)                                       |  4603    14
   177       |                                                                                                 |  4604    14
   178       |#endif /* __BSD_VISIBLE */                                                                       |  4605    14
   179       |                                                                                                 |  4606    14
   180       |#endif /* !_SYS_UNISTD_H_ */                                                                     |  4607    14
   181       |#pragma pack(reset)                                                                              |  4608    14
    44       |#include <sys/_null.h>                                                                           |  4609    13
     1       |/* release 2.25.00 */                                                                            |  4610    15
     2       |#pragma pack()                                                                                   |  4611    15
     3       |/*-                                                                                              |  4612    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  4613    15
     5       | * All rights reserved.                                                                          |  4614    15
     6       | *                                                                                               |  4615    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  4616    15
     8       | * modification, are permitted provided that the following conditions                            |  4617    15
     9       | * are met:                                                                                      |  4618    15
    10       | *                                                                                               |  4619    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  4620    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  4621    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4622    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  4623    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  4624    15
    16       | *                                                                                               |  4625    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  4626    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  4627    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  4628    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  4629    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  4630    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  4631    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  4632    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  4633    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  4634    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  4635    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    90


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    27       | *                                                                                               |  4636    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  4637    15
    29       | */                                                                                              |  4638    15
    30       |                                                                                                 |  4639    15
    31       |#ifndef NULL                                                                                     |  4640    15
    32       |                                                                                                 |  4641    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  4642    15
    34       |#define NULL    ((void *)0)                                                                      |  4643    15
    35       |#else                                                                                            |  4644    15
    36       |#if defined(__LP64__)                                                                            |  4645    15
    37       |#define NULL    (0L)                                                                             |  4646    15
    38       |#else                                                                                            |  4647    15
    39       |#define NULL    0                                                                                |  4648    15
    40       |#endif  /* __LP64__ */                                                                           |  4649    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  4650    15
    42       |                                                                                                 |  4651    15
    43       |#endif                                                                                           |  4652    15
    44       |#pragma pack(reset)                                                                              |  4653    15
    45       |#include <sys/_types.h>                                                                          |  4654    13
     1       |/* release 2.25.00 */                                                                            |  4655     6
     2       |#pragma pack()                                                                                   |  4656     6
     3       |/*-                                                                                              |  4657     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  4658     6
     5       | * All rights reserved.                                                                          |  4659     6
     6       | *                                                                                               |  4660     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  4661     6
     8       | * modification, are permitted provided that the following conditions                            |  4662     6
     9       | * are met:                                                                                      |  4663     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  4664     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  4665     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4666     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  4667     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  4668     6
    15       | *                                                                                               |  4669     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  4670     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  4671     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  4672     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  4673     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  4674     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  4675     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  4676     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  4677     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  4678     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  4679     6
    26       | * SUCH DAMAGE.                                                                                  |  4680     6
    27       | *                                                                                               |  4681     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  4682     6
    29       | */                                                                                              |  4683     6
    30       |                                                                                                 |  4684     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  4685     6
    32       |#define _SYS__TYPES_H_                                                                           |  4686     6
    33       |                                                                                                 |  4687     6
    34       |#include <sys/cdefs.h>                                                                           |  4688     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    91


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    35       |#include <machine/_types.h>                                                                      |  4689     6
    36       |                                                                                                 |  4690     6
    37       |/*                                                                                               |  4691     6
    38       | * Standard type definitions.                                                                    |  4692     6
    39       | */                                                                                              |  4693     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  4694     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  4695     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  4696     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  4697     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  4698     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  4699     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  4700     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  4701     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  4702     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  4703     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  4704     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  4705     6
    52       |typedef int             __nl_item;                                                               |  4706     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  4707     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  4708     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  4709     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  4710     6
    57       |                                        /* signed, because of legacy code */                     |  4711     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  4712     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  4713     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  4714     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  4715     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  4716     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  4717     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  4718     6
    65       |                                                                                                 |  4719     6
    66       |/*                                                                                               |  4720     6
    67       | * Unusual type definitions.                                                                     |  4721     6
    68       | */                                                                                              |  4722     6
    69       |/*                                                                                               |  4723     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  4724     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  4725     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  4726     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  4727     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  4728     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  4729     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  4730     6
    77       | *                                                                                               |  4731     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  4732     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  4733     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  4734     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  4735     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  4736     6
    83       | */                                                                                              |  4737     6
    84       |#ifdef __cplusplus                                                                               |  4738     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  4739     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  4740     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  4741     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    92


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    88       |#else                                                                                            |  4742     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  4743     6
    90       |#endif                                                                                           |  4744     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  4745     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  4746     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  4747     6
    94       |                                                                                                 |  4748     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  4749     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  4750     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  4751     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  4752     6
    99       |#endif                                                                                           |  4753     6
   100       |                                                                                                 |  4754     6
   101       |#if !defined(__cplusplus)                                                                        |  4755     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  4756     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  4757     6
   104       |#endif                                                                                           |  4758     6
   105       |                                                                                                 |  4759     6
   106       |                                                                                                 |  4760     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  4761     6
   108       |                                                                                                 |  4762     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  4763     6
   110       |                                                                                                 |  4764     6
   111       |/*                                                                                               |  4765     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  4766     6
   113       | * stream conversions.                                                                           |  4767     6
   114       | */                                                                                              |  4768     6
   115       |typedef union {                                                                                  |  4769     6
   116       |        char            __mbstate8[128];                                                         |  4770     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  4771     6
   118       |} __mbstate_t;                                                                                   |  4772     6
   119       |                                                                                                 |  4773     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  4774     6
   121       |#pragma pack(reset)                                                                              |  4775     6
    46       |                                                                                                 |  4776    13
    47       |#ifndef _GID_T_DECLARED                                                                          |  4777    13
    48       |typedef __gid_t         gid_t;                                                                   |  4778    13
    49       |#define _GID_T_DECLARED                                                                          |  4779    13
    50       |#endif                                                                                           |  4780    13
    51       |                                                                                                 |  4781    13
    52       |#ifndef _OFF_T_DECLARED                                                                          |  4782    13
    53       |typedef __off_t         off_t;                                                                   |  4783    13
    54       |#define _OFF_T_DECLARED                                                                          |  4784    13
    55       |#endif                                                                                           |  4785    13
    56       |                                                                                                 |  4786    13
    57       |#ifndef _PID_T_DECLARED                                                                          |  4787    13
    58       |typedef __pid_t         pid_t;                                                                   |  4788    13
    59       |#define _PID_T_DECLARED                                                                          |  4789    13
    60       |#endif                                                                                           |  4790    13
    61       |                                                                                                 |  4791    13
    62       |#ifndef _SIZE_T_DECLARED                                                                         |  4792    13
    63       |typedef __size_t        size_t;                                                                  |  4793    13
    64       |#define _SIZE_T_DECLARED                                                                         |  4794    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    93


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    65       |#endif                                                                                           |  4795    13
    66       |                                                                                                 |  4796    13
    67       |#ifndef _SSIZE_T_DECLARED                                                                        |  4797    13
    68       |typedef __ssize_t       ssize_t;                                                                 |  4798    13
    69       |#define _SSIZE_T_DECLARED                                                                        |  4799    13
    70       |#endif                                                                                           |  4800    13
    71       |                                                                                                 |  4801    13
    72       |#ifndef _UID_T_DECLARED                                                                          |  4802    13
    73       |typedef __uid_t         uid_t;                                                                   |  4803    13
    74       |#define _UID_T_DECLARED                                                                          |  4804    13
    75       |#endif                                                                                           |  4805    13
    76       |                                                                                                 |  4806    13
    77       |#ifndef _USECONDS_T_DECLARED                                                                     |  4807    13
    78       |typedef __useconds_t    useconds_t;                                                              |  4808    13
    79       |#define _USECONDS_T_DECLARED                                                                     |  4809    13
    80       |#endif                                                                                           |  4810    13
    81       |                                                                                                 |  4811    13
    82       |#define  STDIN_FILENO   0       /* standard input file descriptor */                             |  4812    13
    83       |#define STDOUT_FILENO   1       /* standard output file descriptor */                            |  4813    13
    84       |#define STDERR_FILENO   2       /* standard error file descriptor */                             |  4814    13
    85       |                                                                                                 |  4815    13
    86       |#if __XSI_VISIBLE || __POSIX_VISIBLE >= 200112                                                   |  4816    13
    87       |#define F_ULOCK         0       /* unlock locked section */                                      |  4817    13
    88       |#define F_LOCK          1       /* lock a section for exclusive use */                           |  4818    13
    89       |#define F_TLOCK         2       /* test and lock a section for exclusive use */                  |  4819    13
    90       |#define F_TEST          3       /* test a section for locks by other procs */                    |  4820    13
    91       |#endif                                                                                           |  4821    13
    92       |                                                                                                 |  4822    13
    92       +                                                                                                 +  4822    13
    93       |/*                                                                                               |  4823    13
    94       | * POSIX options and option groups we unconditionally do or don't                                |  4824    13
    95       | * implement.  This list includes those options which are exclusively                            |  4825    13
    96       | * implemented (or not) in user mode.  Please keep this list in                                  |  4826    13
    97       | * alphabetical order.                                                                           |  4827    13
    98       | *                                                                                               |  4828    13
    99       | * Anything which is defined as zero below **must** have an                                      |  4829    13
   100       | * implementation for the corresponding sysconf() which is able to                               |  4830    13
   101       | * determine conclusively whether or not the feature is supported.                               |  4831    13
   102       | * Anything which is defined as other than -1 below **must** have                                |  4832    13
   103       | * complete headers, types, and function declarations as specified by                            |  4833    13
   104       | * the POSIX standard; however, if the relevant sysconf() function                               |  4834    13
   105       | * returns -1, the functions may be stubbed out.                                                 |  4835    13
   106       | */                                                                                              |  4836    13
   107       |#define _POSIX_BARRIERS                 -1                                                       |  4837    13
   108       |#define _POSIX_READER_WRITER_LOCKS      200112L                                                  |  4838    13
   109       |#define _POSIX_REGEXP                   1                                                        |  4839    13
   110       |#define _POSIX_SHELL                    1                                                        |  4840    13
   111       |#define _POSIX_SPAWN                    -1                                                       |  4841    13
   112       |#define _POSIX_SPIN_LOCKS               -1                                                       |  4842    13
   113       |#define _POSIX_THREAD_ATTR_STACKADDR    200112L                                                  |  4843    13
   114       |#define _POSIX_THREAD_ATTR_STACKSIZE    200112L                                                  |  4844    13
   115       |#define _POSIX_THREAD_CPUTIME           -1                                                       |  4845    13
   116       |#define _POSIX_THREAD_PRIO_INHERIT      200112L                                                  |  4846    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    94


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   117       |#define _POSIX_THREAD_PRIO_PROTECT      200112L                                                  |  4847    13
   118       |#if 0                                                                                            |  4848    13
   119       |  /* z/OS doesn't support THREAD_PRIORITY_SCHEDULING */                                          |  4849    13
   120       |#define _POSIX_THREAD_PRIORITY_SCHEDULING 200112L                                                |  4850    13
   121       |#endif                                                                                           |  4851    13
   122       |#define _POSIX_THREAD_PROCESS_SHARED    -1                                                       |  4852    13
   123       |#define _POSIX_THREAD_SAFE_FUNCTIONS    -1                                                       |  4853    13
   124       |#define _POSIX_THREAD_SPORADIC_SERVER   -1                                                       |  4854    13
   125       |#define _POSIX_THREADS                  200112L                                                  |  4855    13
   126       |#define _POSIX_TRACE                    -1                                                       |  4856    13
   127       |#define _POSIX_TRACE_EVENT_FILTER       -1                                                       |  4857    13
   128       |#define _POSIX_TRACE_INHERIT            -1                                                       |  4858    13
   129       |#define _POSIX_TRACE_LOG                -1                                                       |  4859    13
   130       |#define _POSIX2_C_BIND                  200112L /* mandatory */                                  |  4860    13
   131       |#define _POSIX2_C_DEV                   -1 /* need c99 utility */                                |  4861    13
   132       |#define _POSIX2_CHAR_TERM               1                                                        |  4862    13
   133       |#define _POSIX2_FORT_DEV                -1 /* need fort77 utility */                             |  4863    13
   134       |#define _POSIX2_FORT_RUN                200112L                                                  |  4864    13
   135       |#define _POSIX2_LOCALEDEF               -1                                                       |  4865    13
   136       |#define _POSIX2_PBS                     -1                                                       |  4866    13
   137       |#define _POSIX2_PBS_ACCOUNTING          -1                                                       |  4867    13
   138       |#define _POSIX2_PBS_CHECKPOINT          -1                                                       |  4868    13
   139       |#define _POSIX2_PBS_LOCATE              -1                                                       |  4869    13
   140       |#define _POSIX2_PBS_MESSAGE             -1                                                       |  4870    13
   141       |#define _POSIX2_PBS_TRACK               -1                                                       |  4871    13
   142       |#define _POSIX2_SW_DEV                  -1 /* XXX ??? */                                         |  4872    13
   143       |#define _POSIX2_UPE                     200112L                                                  |  4873    13
   144       |#define _V6_ILP32_OFF32                 -1                                                       |  4874    13
   145       |#define _V6_ILP32_OFFBIG                0                                                        |  4875    13
   146       |#define _V6_LP64_OFF64                  0                                                        |  4876    13
   147       |#define _V6_LPBIG_OFFBIG                -1                                                       |  4877    13
   148       |                                                                                                 |  4878    13
   149       |#if __XSI_VISIBLE                                                                                |  4879    13
   150       |#define _XOPEN_CRYPT                    -1 /* XXX ??? */                                         |  4880    13
   151       |#define _XOPEN_ENH_I18N                 -1 /* mandatory in XSI */                                |  4881    13
   152       |#define _XOPEN_LEGACY                   -1                                                       |  4882    13
   153       |#define _XOPEN_REALTIME                 -1                                                       |  4883    13
   154       |#define _XOPEN_REALTIME_THREADS         -1                                                       |  4884    13
   155       |#define _XOPEN_UNIX                     -1                                                       |  4885    13
   156       |#endif                                                                                           |  4886    13
   157       |                                                                                                 |  4887    13
   157       +                                                                                                 +  4887    13
   158       |/* Define the POSIX.2 version we target for compliance. */                                       |  4888    13
   159       |#define _POSIX2_VERSION         199212L                                                          |  4889    13
   160       |                                                                                                 |  4890    13
   161       |/*                                                                                               |  4891    13
   162       | * POSIX-style system configuration variable accessors (for the                                  |  4892    13
   163       | * sysconf function).  If these are -1 then they aren't supported                                |  4893    13
   164       | * by the sysconf function (sysconf will dutifully return -1.)                                   |  4894    13
   165       | *                                                                                               |  4895    13
   166       | * The sysconf() function on MVS is the BPX version, so only                                     |  4896    13
   167       | * the ones supported there are defined.                                                         |  4897    13
   168       | */                                                                                              |  4898    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    95


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   169       |                                                                                                 |  4899    13
   170       |#define _SC_ARG_MAX              1                                                               |  4900    13
   171       |#define _SC_CHILD_MAX            2                                                               |  4901    13
   172       |#define _SC_CLK_TCK              3                                                               |  4902    13
   173       |#define _SC_JOB_CONTROL          4                                                               |  4903    13
   174       |#define _SC_NGROUPS_MAX          5                                                               |  4904    13
   175       |#define _SC_OPEN_MAX             6                                                               |  4905    13
   176       |#define _SC_SAVED_IDS            7                                                               |  4906    13
   177       |#define _SC_TZNAME_MAX           9                                                               |  4907    13
   178       |#define _SC_VERSION             10                                                               |  4908    13
   179       |#define _SC_THREAD_TASKS_MAX_NP 11                                                               |  4909    13
   180       |#define _SC_2_CHAR_TERM         12                                                               |  4910    13
   181       |#define _SC_THREADS_MAX_NP      13                                                               |  4911    13
   182       |#define _SC_MMAP_MEM_MAX_NP     14                                                               |  4912    13
   183       |#define _SC_BC_BASE_MAX          -1                                                              |  4913    13
   184       |#define _SC_BC_DIM_MAX          -1                                                               |  4914    13
   185       |#define _SC_BC_SCALE_MAX        -1                                                               |  4915    13
   186       |#define _SC_BC_STRING_MAX       -1                                                               |  4916    13
   187       |#define _SC_COLL_WEIGHTS_MAX    -1                                                               |  4917    13
   188       |#define _SC_EXPR_NEST_MAX       -1                                                               |  4918    13
   189       |#define _SC_LINE_MAX            -1                                                               |  4919    13
   190       |#define _SC_RE_DUP_MAX          -1                                                               |  4920    13
   191       |#define _SC_2_VERSION           -1                                                               |  4921    13
   192       |#define _SC_2_C_BIND            -1                                                               |  4922    13
   193       |#define _SC_2_C_DEV             -1                                                               |  4923    13
   194       |#define _SC_2_FORT_DEV          -1                                                               |  4924    13
   195       |#define _SC_2_FORT_RUN          -1                                                               |  4925    13
   196       |#define _SC_2_LOCALEDEF         -1                                                               |  4926    13
   197       |#define _SC_2_SW_DEV            -1                                                               |  4927    13
   198       |#define _SC_2_UPE               -1                                                               |  4928    13
   199       |#define _SC_STREAM_MAX          118                                                              |  4929    13
   200       |                                                                                                 |  4930    13
   201       |#if __POSIX_VISIBLE >= 199309                                                                    |  4931    13
   202       |#define _SC_ASYNCHRONOUS_IO     -1                                                               |  4932    13
   203       |#define _SC_MAPPED_FILES        -1                                                               |  4933    13
   204       |#define _SC_MEMLOCK             -1                                                               |  4934    13
   205       |#define _SC_MEMLOCK_RANGE       -1                                                               |  4935    13
   206       |#define _SC_MEMORY_PROTECTION   -1                                                               |  4936    13
   207       |#define _SC_MESSAGE_PASSING     -1                                                               |  4937    13
   208       |#define _SC_PRIORITIZED_IO      -1                                                               |  4938    13
   209       |#define _SC_PRIORITY_SCHEDULING -1                                                               |  4939    13
   210       |#define _SC_REALTIME_SIGNALS    -1                                                               |  4940    13
   211       |#define _SC_SEMAPHORES          -1                                                               |  4941    13
   212       |#define _SC_FSYNC               -1                                                               |  4942    13
   213       |#define _SC_SHARED_MEMORY_OBJECTS -1                                                             |  4943    13
   214       |#define _SC_SYNCHRONIZED_IO     -1                                                               |  4944    13
   215       |#define _SC_TIMERS              -1                                                               |  4945    13
   216       |#define _SC_AIO_LISTIO_MAX      -1                                                               |  4946    13
   217       |#define _SC_AIO_MAX             -1                                                               |  4947    13
   218       |#define _SC_AIO_PRIO_DELTA_MAX  -1                                                               |  4948    13
   219       |#define _SC_DELAYTIMER_MAX      -1                                                               |  4949    13
   220       |#define _SC_MQ_OPEN_MAX         -1                                                               |  4950    13
   221       |#define _SC_PAGESIZE            16                                                               |  4951    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    96


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   222       |#define _SC_RTSIG_MAX           -1                                                               |  4952    13
   223       |#define _SC_SEM_NSEMS_MAX      210                                                               |  4953    13
   224       |#define _SC_SEM_VALUE_MAX      211                                                               |  4954    13
   225       |#define _SC_SIGQUEUE_MAX        -1                                                               |  4955    13
   226       |#define _SC_TIMER_MAX           -1                                                               |  4956    13
   227       |#endif                                                                                           |  4957    13
   228       |                                                                                                 |  4958    13
   228       +                                                                                                 +  4958    13
   229       |#if __POSIX_VISIBLE >= 200112                                                                    |  4959    13
   230       |#define _SC_2_PBS               -1                                                               |  4960    13
   231       |#define _SC_2_PBS_ACCOUNTING    -1                                                               |  4961    13
   232       |#define _SC_2_PBS_CHECKPOINT    -1                                                               |  4962    13
   233       |#define _SC_2_PBS_LOCATE        -1                                                               |  4963    13
   234       |#define _SC_2_PBS_MESSAGE       -1                                                               |  4964    13
   235       |#define _SC_2_PBS_TRACK         -1                                                               |  4965    13
   236       |#define _SC_ADVISORY_INFO       -1                                                               |  4966    13
   237       |#define _SC_BARRIERS            -1                                                               |  4967    13
   238       |#define _SC_CLOCK_SELECTION     -1                                                               |  4968    13
   239       |#define _SC_CPUTIME             -1                                                               |  4969    13
   240       |#define _SC_FILE_LOCKING        -1                                                               |  4970    13
   241       |#define _SC_GETGR_R_SIZE_MAX    -1                                                               |  4971    13
   242       |#define _SC_GETPW_R_SIZE_MAX    -1                                                               |  4972    13
   243       |#define _SC_HOST_NAME_MAX       -1                                                               |  4973    13
   244       |#define _SC_LOGIN_NAME_MAX      -1                                                               |  4974    13
   245       |#define _SC_MONOTONIC_CLOCK     -1                                                               |  4975    13
   246       |#define _SC_MQ_PRIO_MAX         -1                                                               |  4976    13
   247       |#define _SC_READER_WRITER_LOCKS -1                                                               |  4977    13
   248       |#define _SC_REGEXP              -1                                                               |  4978    13
   249       |#define _SC_SHELL               -1                                                               |  4979    13
   250       |#define _SC_SPAWN               -1                                                               |  4980    13
   251       |#define _SC_SPIN_LOCKS          171                                                              |  4981    13
   252       |#define _SC_SPORADIC_SERVER     172                                                              |  4982    13
   253       |#define _SC_THREAD_ATTR_STACKADDR 175                                                            |  4983    13
   254       |#define _SC_THREAD_ATTR_STACKSIZE 176                                                            |  4984    13
   255       |#define _SC_THREAD_CPUTIME        177                                                            |  4985    13
   256       |#define _SC_THREAD_DESTRUCTOR_ITERATIONS -1                                                      |  4986    13
   257       |#define _SC_THREAD_KEYS_MAX     207                                                              |  4987    13
   258       |#define _SC_THREAD_PRIO_INHERIT 178                                                              |  4988    13
   259       |#define _SC_THREAD_PRIO_PROTECT 179                                                              |  4989    13
   260       |#define _SC_THREAD_PRIORITY_SCHEDULING 180                                                       |  4990    13
   261       |#define _SC_THREAD_PROCESS_SHARED 181                                                            |  4991    13
   262       |#define _SC_THREAD_SAFE_FUNCTIONS 182                                                            |  4992    13
   263       |#define _SC_THREAD_SPORADIC_SERVER 183                                                           |  4993    13
   264       |#define _SC_THREAD_STACK_MIN    208                                                              |  4994    13
   265       |#define _SC_THREAD_THREADS_MAX  _SC_THREADS_MAX_NP                                               |  4995    13
   266       |#define _SC_THREADS             184                                                              |  4996    13
   267       |#define _SC_TIMEOUTS            185                                                              |  4997    13
   268       |#define _SC_TRACE               -1                                                               |  4998    13
   269       |#define _SC_TRACE_EVENT_FILTER  -1                                                               |  4999    13
   270       |#define _SC_TRACE_INHERIT       -1                                                               |  5000    13
   271       |#define _SC_TRACE_LOG           -1                                                               |  5001    13
   272       |#define _SC_TTY_NAME_MAX        -1                                                               |  5002    13
   273       |#define _SC_TYPED_MEMORY_OBJECTS -1                                                              |  5003    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    97


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   274       |#define _SC_V6_ILP32_OFF32      -1                                                               |  5004    13
   275       |#define _SC_V6_ILP32_OFFBIG     -1                                                               |  5005    13
   276       |#define _SC_V6_LP64_OFF64       -1                                                               |  5006    13
   277       |#define _SC_V6_LPBIG_OFFBIG     -1                                                               |  5007    13
   278       |#define _SC_IPV6                -1                                                               |  5008    13
   279       |#define _SC_RAW_SOCKETS         -1                                                               |  5009    13
   280       |#define _SC_SYMLOOP_MAX         -1                                                               |  5010    13
   281       |#endif                                                                                           |  5011    13
   282       |                                                                                                 |  5012    13
   282       +                                                                                                 +  5012    13
   283       |#if __XSI_VISIBLE                                                                                |  5013    13
   284       |#define _SC_ATEXIT_MAX          -1                                                               |  5014    13
   285       |#define _SC_IOV_MAX             -1                                                               |  5015    13
   286       |#define _SC_PAGE_SIZE           _SC_PAGESIZE                                                     |  5016    13
   287       |#define _SC_XOPEN_CRYPT         -1                                                               |  5017    13
   288       |#define _SC_XOPEN_ENH_I18N      -1                                                               |  5018    13
   289       |#define _SC_XOPEN_LEGACY        -1                                                               |  5019    13
   290       |#define _SC_XOPEN_REALTIME      -1                                                               |  5020    13
   291       |#define _SC_XOPEN_REALTIME_THREADS -1                                                            |  5021    13
   292       |#define _SC_XOPEN_SHM           -1                                                               |  5022    13
   293       |#define _SC_XOPEN_STREAMS       -1                                                               |  5023    13
   294       |#define _SC_XOPEN_UNIX          -1                                                               |  5024    13
   295       |#define _SC_XOPEN_VERSION       -1                                                               |  5025    13
   296       |#define _SC_XOPEN_XCU_VERSION   -1                                                               |  5026    13
   297       |#endif                                                                                           |  5027    13
   298       |                                                                                                 |  5028    13
   298       +                                                                                                 +  5028    13
   299       |#if ( defined(_LP64) || defined(__U98) )                                                         |  5029    13
   300       |#define _XBS5_ILP32_OFF32        1                                                               |  5030    13
   301       |#define _XBS5_ILP32_OFFBIG      -1                                                               |  5031    13
   302       |#define _XBS5_LP64_OFF64        -1                                                               |  5032    13
   303       |#define _XBS5_LPBIG_OFFBIG      -1                                                               |  5033    13
   304       |#endif  /*  _LP64  ||  __U98  */                                                                 |  5034    13
   305       |                                                                                                 |  5035    13
   306       |#if __BSD_VISIBLE                                                                                |  5036    13
   307       |#define _SC_NPROCESSORS_CONF    -1                                                               |  5037    13
   308       |#define _SC_NPROCESSORS_ONLN    -1                                                               |  5038    13
   309       |#endif                                                                                           |  5039    13
   310       |                                                                                                 |  5040    13
   310       +                                                                                                 +  5040    13
   311       |/* Keys for the confstr(3) function. */                                                          |  5041    13
   312       |#if __POSIX_VISIBLE >= 199209                                                                    |  5042    13
   313       |#define _CS_PATH                1       /* default value of PATH */                              |  5043    13
   314       |#endif                                                                                           |  5044    13
   315       |                                                                                                 |  5045    13
   315       +                                                                                                 +  5045    13
   316       |#if __POSIX_VISIBLE >= 200112                                                                    |  5046    13
   317       |#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS         2                                                |  5047    13
   318       |#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS        3                                                |  5048    13
   319       |#define _CS_POSIX_V6_ILP32_OFF32_LIBS           4                                                |  5049    13
   320       |#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS        5                                                |  5050    13
   321       |#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS       6                                                |  5051    13
   322       |#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS          7                                                |  5052    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    98


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   323       |#define _CS_POSIX_V6_LP64_OFF64_CFLAGS          8                                                |  5053    13
   324       |#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS         9                                                |  5054    13
   325       |#define _CS_POSIX_V6_LP64_OFF64_LIBS            10                                               |  5055    13
   326       |#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS        11                                               |  5056    13
   327       |#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS       12                                               |  5057    13
   328       |#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS          13                                               |  5058    13
   329       |#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS      14                                               |  5059    13
   330       |#endif                                                                                           |  5060    13
   331       |                                                                                                 |  5061    13
   331       +                                                                                                 +  5061    13
   332       |                                                                                                 |  5062    13
   333       |#ifndef _POSIX_SOURCE                                                                            |  5063    13
   334       |#define       F_ULOCK     0    /* unlock locked section */                                       |  5064    13
   335       |#define       F_LOCK      1    /* lock a section for exclusive use */                            |  5065    13
   336       |#define       F_TLOCK     2    /* test and lock a section for exclusive use */                   |  5066    13
   337       |#define       F_TEST      3    /* test a section for locks by other procs */                     |  5067    13
   338       |#endif                                                                                           |  5068    13
   339       |                                                                                                 |  5069    13
   340       |/* For z/OS BPX (posix-y) interface, we also have the */                                         |  5070    13
   341       |/* __querydub() function that determines if a task has */                                        |  5071    13
   342       |/* been "dub'd" into the POSIX system */                                                         |  5072    13
   343       |#define _QDB_DUBBED_FIRST    (1) /* The task has already been dubbed.  */                        |  5073    13
   344       |                                 /* This task and this RB caused the dub. */                     |  5074    13
   345       |#define _QDB_DUBBED          (2) /* The task has already been dubbed.  */                        |  5075    13
   346       |                                 /* Another task or another RB caused it */                      |  5076    13
   347       |#define _QDB_DUB_MAY_FAIL    (4) /* The task has not been dubbed; an attempt */                  |  5077    13
   348       |                                 /* to dub the task may fail. */                                 |  5078    13
   349       |#define _QDB_DUB_OKAY        (8) /* The task has not beed dubbed; an attempt */                  |  5079    13
   350       |                                 /* to dub will probably succeed. */                             |  5080    13
   351       |#define _QDB_DUB_AS_PROCESS (16) /* The task has not been dubbed; but its */                     |  5081    13
   352       |                                 /* address space has. If dubbed, if will */                     |  5082    13
   353       |                                 /* become another process. */                                   |  5083    13
   354       |#define _QDB_DUB_AS_THREAD  (32) /* The task has not been dubbed; but its */                     |  5084    13
   355       |                                 /* address space has. If dubbed, it will */                     |  5085    13
   356       |                                 /* become a thread within the process. */                       |  5086    13
   357       |                                                                                                 |  5087    13
   358       |__BEGIN_DECLS                                                                                    |  5088    13
   358       +                                                                                                 +  5088    13
   359       |#pragma map(__querydub,"@@QDUB")                                                                 |  5089    13
   360       |int __querydub(void);                                                                            |  5090    13
   361       |                                                                                                 |  5091    13
   362       |/* 1003.1-1990 */                                                                                |  5092    13
   363       |#pragma map (_exit, "@@EXIT")                                                                    |  5093    13
   364       |void     _exit(int) __dead2;                                                                     |  5094    13
   364       +void     _exit(int) __attribute__((__noreturn__));                                               +  5094    13
   365       |int      access(const char *, int);                                                              |  5095    13
   366       |unsigned int     alarm(unsigned int);                                                            |  5096    13
   367       |int      chdir(const char *);                                                                    |  5097    13
   368       |int      chown(const char *, uid_t, gid_t);                                                      |  5098    13
   369       |int      close(int);                                                                             |  5099    13
   370       |int      dup(int);                                                                               |  5100    13
   371       |int      dup2(int, int);                                                                         |  5101    13
   372       |int      eaccess(const char *, int);                                                             |  5102    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page    99


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   373       |int      execl(const char *, const char *, ...);                                                 |  5103    13
   374       |int      execle(const char *, const char *, ...);                                                |  5104    13
   375       |int      execlp(const char *, const char *, ...);                                                |  5105    13
   376       |int      execv(const char *, char * const *);                                                    |  5106    13
   377       |int      execve(const char *, char * const *, char * const *);                                   |  5107    13
   378       |int      execvp(const char *, char * const *);                                                   |  5108    13
   379       |pid_t    fork(void);                                                                             |  5109    13
   380       |#pragma map(fpathconf, "@@FPATHC")                                                               |  5110    13
   381       |long     fpathconf(int, int);                                                                    |  5111    13
   382       |char    *getcwd(char *, size_t);                                                                 |  5112    13
   383       |gid_t    getegid(void);                                                                          |  5113    13
   384       |uid_t    geteuid(void);                                                                          |  5114    13
   385       |gid_t    getgid(void);                                                                           |  5115    13
   386       |#pragma map(getgroups, "@@GETGRO")                                                               |  5116    13
   387       |int      getgroups(int, gid_t []);                                                               |  5117    13
   388       |char    *getlogin(void);                                                                         |  5118    13
   389       |pid_t    getpgrp(void);                                                                          |  5119    13
   390       |pid_t    getpid(void);                                                                           |  5120    13
   391       |pid_t    getppid(void);                                                                          |  5121    13
   392       |uid_t    getuid(void);                                                                           |  5122    13
   393       |int      isatty(int);                                                                            |  5123    13
   394       |int      link(const char *, const char *);                                                       |  5124    13
   395       |#ifndef _LSEEK_DECLARED                                                                          |  5125    13
   396       |#define _LSEEK_DECLARED                                                                          |  5126    13
   397       |off_t    lseek(int, off_t, int);                                                                 |  5127    13
   398       |#endif                                                                                           |  5128    13
   399       |long     pathconf(const char *, int);                                                            |  5129    13
   400       |int      pause(void);                                                                            |  5130    13
   401       |int      pipe(int *);                                                                            |  5131    13
   402       |ssize_t  read(int, void *, size_t);                                                              |  5132    13
   403       |int      rmdir(const char *);                                                                    |  5133    13
   404       |int      setgid(gid_t);                                                                          |  5134    13
   405       |int      setpgid(pid_t, pid_t);                                                                  |  5135    13
   406       |void     setproctitle(const char *_fmt, ...) __printf0like(1, 2);                                |  5136    13
   406       +void     setproctitle(const char *_fmt, ...) ;                                                   +  5136    13
   407       |pid_t    setsid(void);                                                                           |  5137    13
   408       |int      setuid(uid_t);                                                                          |  5138    13
   409       |unsigned int     sleep(unsigned int);                                                            |  5139    13
   410       |long     sysconf(int);                                                                           |  5140    13
   411       |#pragma map(tcgetpgrp, "@@TCGPGR")                                                               |  5141    13
   412       |pid_t    tcgetpgrp(int);                                                                         |  5142    13
   413       |#pragma map(tcsetpgrp, "@@TCSPGR")                                                               |  5143    13
   414       |int      tcsetpgrp(int, pid_t);                                                                  |  5144    13
   415       |char    *ttyname(int);                                                                           |  5145    13
   416       |int     ttyname_r(int, char *, size_t);                                                          |  5146    13
   417       |int      unlink(const char *);                                                                   |  5147    13
   418       |ssize_t  write(int, const void *, size_t);                                                       |  5148    13
   419       |                                                                                                 |  5149    13
   420       |/* 1003.2-1992 */                                                                                |  5150    13
   421       |#if __POSIX_VISIBLE >= 199209 || __XSI_VISIBLE                                                   |  5151    13
   422       |size_t   confstr(int, char *, size_t);                                                           |  5152    13
   422       +size_t   confstr(int, char *, size_t);                                                           +  5152    13
   423       |#ifndef _GETOPT_DECLARED                                                                         |  5153    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   100


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   424       |#define _GETOPT_DECLARED                                                                         |  5154    13
   425       |int      getopt(int, char * const [], const char *);                                             |  5155    13
   426       |                                                                                                 |  5156    13
   427       |extern char *optarg;                    /* getopt(3) external variables */                       |  5157    13
   428       |extern int optind, opterr, optopt;                                                               |  5158    13
   429       |#endif /* _GETOPT_DECLARED */                                                                    |  5159    13
   430       |#endif                                                                                           |  5160    13
   431       |                                                                                                 |  5161    13
   432       |/* ISO/IEC 9945-1: 1996 */                                                                       |  5162    13
   433       |#if __POSIX_VISIBLE >= 199506 || __XSI_VISIBLE                                                   |  5163    13
   434       |int      fsync(int);                                                                             |  5164    13
   434       +int      fsync(int);                                                                             +  5164    13
   435       |                                                                                                 |  5165    13
   436       |/*                                                                                               |  5166    13
   437       | * ftruncate() was in the POSIX Realtime Extension (it's used for shared                         |  5167    13
   438       | * memory), but truncate() was not.                                                              |  5168    13
   439       | */                                                                                              |  5169    13
   440       |#ifndef _FTRUNCATE_DECLARED                                                                      |  5170    13
   441       |#define _FTRUNCATE_DECLARED                                                                      |  5171    13
   442       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  5172    13
   443       |int      ftruncate(int, off_t);                                                                  |  5173    13
   444       |#endif                                                                                           |  5174    13
   445       |#endif                                                                                           |  5175    13
   446       |                                                                                                 |  5176    13
   447       |#if __POSIX_VISIBLE >= 199506                                                                    |  5177    13
   448       |int      getlogin_r(char *, int);                                                                |  5178    13
   448       +int      getlogin_r(char *, int);                                                                +  5178    13
   449       |#endif                                                                                           |  5179    13
   450       |                                                                                                 |  5180    13
   451       |/* 1003.1-2001 */                                                                                |  5181    13
   452       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   |  5182    13
   453       |int      fchown(int, uid_t, gid_t);                                                              |  5183    13
   453       +int      fchown(int, uid_t, gid_t);                                                              +  5183    13
   454       |int      readlink(const char *, char *, int);                                                    |  5184    13
   455       |#endif                                                                                           |  5185    13
   456       |#if __POSIX_VISIBLE >= 200112                                                                    |  5186    13
   457       |#pragma map (gethostname,"@@GHNAM")                                                              |  5187    13
   457       +#pragma map ( gethostname , "@@GHNAM" )                                                          +  5187    13
   458       |int      gethostname(char *, size_t);                                                            |  5188    13
   459       |int      setegid(gid_t);                                                                         |  5189    13
   460       |int      seteuid(uid_t);                                                                         |  5190    13
   461       |int    getpeereid(int, uid_t *, gid_t *);                                                        |  5191    13
   462       |int    getpgid(pid_t _pid);                                                                      |  5192    13
   463       |int    getresgid(gid_t *, gid_t *, gid_t *);                                                     |  5193    13
   464       |int    getresuid(uid_t *, uid_t *, uid_t *);                                                     |  5194    13
   465       |int    getsid(pid_t _pid);                                                                       |  5195    13
   466       |#endif                                                                                           |  5196    13
   467       |                                                                                                 |  5197    13
   468       |/*                                                                                               |  5198    13
   469       | * symlink() was originally in POSIX.1a, which was withdrawn after                               |  5199    13
   470       | * being overtaken by events (1003.1-2001).  It was in XPG4.2, and of                            |  5200    13
   471       | * course has been in BSD since 4.2.                                                             |  5201    13
   472       | */                                                                                              |  5202    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   101


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   473       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE >= 402 || __BSD_VISIBLE                           |  5203    13
   474       |int      symlink(const char * __restrict, const char * __restrict);                              |  5204    13
   474       +int      symlink(const char * __restrict__, const char * __restrict__);                          +  5204    13
   475       |#endif                                                                                           |  5205    13
   476       |                                                                                                 |  5206    13
   477       |/* X/Open System Interfaces */                                                                   |  5207    13
   478       |#if __XSI_VISIBLE                                                                                |  5208    13
   479       |char    *crypt(const char *, const char *);                                                      |  5209    13
   479       +char    *crypt(const char *, const char *);                                                      +  5209    13
   480       |/* char *ctermid(char *); */            /* XXX ??? */                                            |  5210    13
   481       |int      encrypt(char *, int);                                                                   |  5211    13
   482       |int      fchdir(int);                                                                            |  5212    13
   483       |#pragma map (gethostid,"@@GHTID")                                                                |  5213    13
   484       |long     gethostid(void);                                                                        |  5214    13
   485       |int      getpgid(pid_t _pid);                                                                    |  5215    13
   486       |int      getsid(pid_t _pid);                                                                     |  5216    13
   487       |char    *getwd(char *);                 /* LEGACY: obsoleted by getcwd() */                      |  5217    13
   488       |int      lchown(const char *, uid_t, gid_t);                                                     |  5218    13
   489       |int      lockf(int, int, off_t);                                                                 |  5219    13
   490       |int      nice(int);                                                                              |  5220    13
   491       |ssize_t  pread(int, void *, size_t, off_t);                                                      |  5221    13
   492       |ssize_t  pwrite(int, const void *, size_t, off_t);                                               |  5222    13
   493       |int      setpgrp(pid_t _pid, pid_t _pgrp); /* obsoleted by setpgid() */                          |  5223    13
   494       |int      setregid(gid_t, gid_t);                                                                 |  5224    13
   495       |int      setreuid(uid_t, uid_t);                                                                 |  5225    13
   496       |                                                                                                 |  5226    13
   497       |#ifndef _SWAB_DECLARED                                                                           |  5227    13
   498       |#define _SWAB_DECLARED                                                                           |  5228    13
   499       |void     swab(const void * __restrict, void * __restrict, ssize_t);                              |  5229    13
   499       +void     swab(const void * __restrict__, void * __restrict__, ssize_t);                          +  5229    13
   500       |#endif /* _SWAB_DECLARED */                                                                      |  5230    13
   501       |                                                                                                 |  5231    13
   502       |void     sync(void);                                                                             |  5232    13
   503       |useconds_t       ualarm(useconds_t, useconds_t);                                                 |  5233    13
   504       |int      usleep(useconds_t);                                                                     |  5234    13
   505       |pid_t    vfork(void);                                                                            |  5235    13
   506       |                                                                                                 |  5236    13
   507       |/* See comment at ftruncate() above. */                                                          |  5237    13
   508       |#ifndef _TRUNCATE_DECLARED                                                                       |  5238    13
   509       |#define _TRUNCATE_DECLARED                                                                       |  5239    13
   510       |int      truncate(const char *, off_t);                                                          |  5240    13
   511       |#endif                                                                                           |  5241    13
   512       |#endif /* __XSI_VISIBLE */                                                                       |  5242    13
   513       |                                                                                                 |  5243    13
   514       |#if __XSI_VISIBLE <= 500 || __BSD_VISIBLE                                                        |  5244    13
   515       |/* int   brk(const void *); */                                                                   |  5245    13
   515       +                                                                                                 +  5245    13
   516       |int      chroot(const char *);                                                                   |  5246    13
   517       |#pragma map (getdtablesize, "@GDTBLSZ")                                                          |  5247    13
   518       |int      getdtablesize(void);                                                                    |  5248    13
   519       |int      getpagesize(void) __pure2;                                                              |  5249    13
   519       +int      getpagesize(void) __attribute__((__const__));                                           +  5249    13
   520       |char    *getpass(const char *);                                                                  |  5250    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   102


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   521       |void    *sbrk(intptr_t);                                                                         |  5251    13
   522       |#endif                                                                                           |  5252    13
   523       |                                                                                                 |  5253    13
   524       |#pragma map(__isPosixOn, "@@ISPOSI")                                                             |  5254    13
   525       |int      __isPosixOn(void);                                                                      |  5255    13
   526       |                                                                                                 |  5256    13
   527       |#if __BSD_VISIBLE                                                                                |  5257    13
   528       |struct timeval;                         /* select(2) */                                          |  5258    13
   528       +struct timeval;                                                                                  +  5258    13
   529       |int      acct(const char *);                                                                     |  5259    13
   530       |int      async_daemon(void);                                                                     |  5260    13
   531       |int      check_utility_compat(const char *);                                                     |  5261    13
   532       |const char *                                                                                     |  5262    13
   533       |         crypt_get_format(void);                                                                 |  5263    13
   534       |int      crypt_set_format(const char *);                                                         |  5264    13
   535       |int      des_cipher(const char *, char *, long, int);                                            |  5265    13
   536       |int      des_setkey(const char *key);                                                            |  5266    13
   537       |void     endusershell(void);                                                                     |  5267    13
   538       |int      exect(const char *, char * const *, char * const *);                                    |  5268    13
   539       |int      execvP(const char *, const char *, char * const *);                                     |  5269    13
   540       |char    *fflagstostr(u_long);                                                                    |  5270    13
   541       |int      getdomainname(char *, int);                                                             |  5271    13
   542       |int      getgrouplist(const char *, gid_t, gid_t *, int *);                                      |  5272    13
   543       |mode_t   getmode(const void *, mode_t);                                                          |  5273    13
   544       |int      getpeereid(int, uid_t *, gid_t *);                                                      |  5274    13
   545       |int      getresgid(gid_t *, gid_t *, gid_t *);                                                   |  5275    13
   546       |int      getresuid(uid_t *, uid_t *, uid_t *);                                                   |  5276    13
   547       |char    *getusershell(void);                                                                     |  5277    13
   548       |int      initgroups(const char *, gid_t);                                                        |  5278    13
   549       |int      iruserok(unsigned long, int, const char *, const char *);                               |  5279    13
   550       |int      iruserok_sa(const void *, int, int, const char *, const char *);                        |  5280    13
   551       |#pragma map(issetugid, "ISSETUGI")                                                               |  5281    13
   552       |int      issetugid(void);                                                                        |  5282    13
   553       |char    *mkdtemp(char *);                                                                        |  5283    13
   554       |#ifndef _MKNOD_DECLARED                                                                          |  5284    13
   555       |int      mknod(const char *, mode_t, dev_t);                                                     |  5285    13
   556       |#define _MKNOD_DECLARED                                                                          |  5286    13
   557       |#endif                                                                                           |  5287    13
   558       |#ifndef _MKSTEMP_DECLARED                                                                        |  5288    13
   559       |int      mkstemp(char *);                                                                        |  5289    13
   560       |#define _MKSTEMP_DECLARED                                                                        |  5290    13
   561       |#endif                                                                                           |  5291    13
   562       |int      mkstemps(char *, int);                                                                  |  5292    13
   563       |#ifndef _MKTEMP_DECLARED                                                                         |  5293    13
   564       |char    *mktemp(char *);                                                                         |  5294    13
   565       |#define _MKTEMP_DECLARED                                                                         |  5295    13
   566       |#endif                                                                                           |  5296    13
   567       |int      nfssvc(int, void *);                                                                    |  5297    13
   568       |int      profil(char *, size_t, vm_offset_t, int);                                               |  5298    13
   569       |int      rcmd(char **, int, const char *, const char *, const char *, int *);                    |  5299    13
   570       |int      rcmd_af(char **, int, const char *,                                                     |  5300    13
   571       |                const char *, const char *, int *, int);                                         |  5301    13
   572       |int      rcmdsh(char **, int, const char *,                                                      |  5302    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   103


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   573       |                const char *, const char *, const char *);                                       |  5303    13
   574       |char    *re_comp(const char *);                                                                  |  5304    13
   575       |int      re_exec(const char *);                                                                  |  5305    13
   576       |int      reboot(int);                                                                            |  5306    13
   577       |int      revoke(const char *);                                                                   |  5307    13
   578       |pid_t    rfork(int);                                                                             |  5308    13
   579       |pid_t    rfork_thread(int, void *, int (*)(void *), void *);                                     |  5309    13
   580       |int      rresvport(int *);                                                                       |  5310    13
   581       |int      rresvport_af(int *, int);                                                               |  5311    13
   582       |int      ruserok(const char *, int, const char *, const char *);                                 |  5312    13
   583       |#if __BSD_VISIBLE                                                                                |  5313    13
   584       |#ifndef _SELECT_DECLARED                                                                         |  5314    13
   585       |#define _SELECT_DECLARED                                                                         |  5315    13
   586       |int      select(int, fd_set *, fd_set *, fd_set *, struct timeval *);                            |  5316    13
   587       |int      selectex(int, fd_set *, fd_set *, fd_set *, struct timeval *,                           |  5317    13
   588       |                       int *ecbptr);                                                             |  5318    13
   589       |                                                                                                 |  5319    13
   590       |#endif                                                                                           |  5320    13
   591       |#endif                                                                                           |  5321    13
   592       |int      setdomainname(const char *, int);                                                       |  5322    13
   592       +int      setdomainname(const char *, int);                                                       +  5322    13
   593       |#pragma map(setgroups, "@@SETGRP")                                                               |  5323    13
   594       |int      setgroups(int, const gid_t *);                                                          |  5324    13
   595       |void     sethostid(long);                                                                        |  5325    13
   596       |int      sethostname(const char *, int);                                                         |  5326    13
   597       |#ifndef _SETKEY_DECLARED                                                                         |  5327    13
   598       |int      setkey(const char *);                                                                   |  5328    13
   599       |#define _SETKEY_DECLARED                                                                         |  5329    13
   600       |#endif                                                                                           |  5330    13
   601       |int      setlogin(const char *);                                                                 |  5331    13
   602       |void    *setmode(const char *);                                                                  |  5332    13
   603       |int      setresgid(gid_t, gid_t, gid_t);                                                         |  5333    13
   604       |int      setresuid(uid_t, uid_t, uid_t);                                                         |  5334    13
   605       |int      setrgid(gid_t);                                                                         |  5335    13
   606       |int      setruid(uid_t);                                                                         |  5336    13
   607       |void     setusershell(void);                                                                     |  5337    13
   608       |int      strtofflags(char **, u_long *, u_long *);                                               |  5338    13
   609       |int      swapon(const char *);                                                                   |  5339    13
   610       |int      swapoff(const char *);                                                                  |  5340    13
   611       |int      syscall(int, ...);                                                                      |  5341    13
   612       |off_t    __syscall(quad_t, ...);                                                                 |  5342    13
   613       |int      ttyslot(void);                                                                          |  5343    13
   614       |int      undelete(const char *);                                                                 |  5344    13
   615       |int      unwhiteout(const char *);                                                               |  5345    13
   616       |void    *valloc(size_t);                        /* obsoleted by malloc() */                      |  5346    13
   617       |                                                                                                 |  5347    13
   618       |#ifndef _OPTRESET_DECLARED                                                                       |  5348    13
   619       |#define _OPTRESET_DECLARED                                                                       |  5349    13
   620       |extern int optreset;                    /* getopt(3) external variable */                        |  5350    13
   621       |#endif                                                                                           |  5351    13
   622       |#endif /* __BSD_VISIBLE */                                                                       |  5352    13
   623       |__END_DECLS                                                                                      |  5353    13
   623       +                                                                                                 +  5353    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   104


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   624       |                                                                                                 |  5354    13
   625       |#endif /* !_UNISTD_H_ */                                                                         |  5355    13
   626       |#pragma pack(reset)                                                                              |  5356    13
    23       |#include <time.h>                                                                                |  5357     2
     1       |/* release 2.25.00 */                                                                            |  5358    16
     2       |#pragma pack()                                                                                   |  5359    16
     3       |/*                                                                                               |  5360    16
     4       | * Copyright (c) 1989, 1993                                                                      |  5361    16
     5       | *      The Regents of the University of California.  All rights reserved.                       |  5362    16
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  5363    16
     7       | * All or some portions of this file are derived from material licensed                          |  5364    16
     8       | * to the University of California by American Telephone and Telegraph                           |  5365    16
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  5366    16
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  5367    16
    11       | *                                                                                               |  5368    16
    12       | * Redistribution and use in source and binary forms, with or without                            |  5369    16
    13       | * modification, are permitted provided that the following conditions                            |  5370    16
    14       | * are met:                                                                                      |  5371    16
    15       | * 1. Redistributions of source code must retain the above copyright                             |  5372    16
    16       | *    notice, this list of conditions and the following disclaimer.                              |  5373    16
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5374    16
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  5375    16
    19       | *    documentation and/or other materials provided with the distribution.                       |  5376    16
    20       | * 3. All advertising materials mentioning features or use of this software                      |  5377    16
    21       | *    must display the following acknowledgement:                                                |  5378    16
    22       | *      This product includes software developed by the University of                            |  5379    16
    23       | *      California, Berkeley and its contributors.                                               |  5380    16
    24       | * 4. Neither the name of the University nor the names of its contributors                       |  5381    16
    25       | *    may be used to endorse or promote products derived from this software                      |  5382    16
    26       | *    without specific prior written permission.                                                 |  5383    16
    27       | *                                                                                               |  5384    16
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  5385    16
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  5386    16
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  5387    16
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  5388    16
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  5389    16
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  5390    16
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  5391    16
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  5392    16
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  5393    16
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  5394    16
    38       | * SUCH DAMAGE.                                                                                  |  5395    16
    39       | *                                                                                               |  5396    16
    40       | *      @(#)time.h      8.3 (Berkeley) 1/21/94                                                   |  5397    16
    41       | */                                                                                              |  5398    16
    42       |                                                                                                 |  5399    16
    43       |/*                                                                                               |  5400    16
    44       | */                                                                                              |  5401    16
    45       |                                                                                                 |  5402    16
    46       |#ifndef _TIME_H_                                                                                 |  5403    16
    47       |#define _TIME_H_                                                                                 |  5404    16
    48       |                                                                                                 |  5405    16
    49       |#include <sys/cdefs.h>                                                                           |  5406    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   105


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/* release 2.25.00 */                                                                            |  5407     4
     2       |#pragma pack()                                                                                   |  5408     4
     3       |/*                                                                                               |  5409     4
     4       | * Copyright (c) 1991, 1993                                                                      |  5410     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  5411     4
     6       | *                                                                                               |  5412     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  5413     4
     8       | * Berkeley Software Design, Inc.                                                                |  5414     4
     9       | *                                                                                               |  5415     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  5416     4
    11       | * modification, are permitted provided that the following conditions                            |  5417     4
    12       | * are met:                                                                                      |  5418     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  5419     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  5420     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5421     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  5422     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  5423     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  5424     4
    19       | *    must display the following acknowledgement:                                                |  5425     4
    20       | *      This product includes software developed by the University of                            |  5426     4
    21       | *      California, Berkeley and its contributors.                                               |  5427     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  5428     4
    23       | *    may be used to endorse or promote products derived from this software                      |  5429     4
    24       | *    without specific prior written permission.                                                 |  5430     4
    25       | *                                                                                               |  5431     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  5432     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  5433     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  5434     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  5435     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  5436     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  5437     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  5438     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  5439     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  5440     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  5441     4
    36       | * SUCH DAMAGE.                                                                                  |  5442     4
    37       | *                                                                                               |  5443     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  5444     4
    39       | */                                                                                              |  5445     4
    40       |                                                                                                 |  5446     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  5447     4
    42       |#define _SYS_CDEFS_H_                                                                            |  5448     4
    43       |                                                                                                 |  5449     4
    44       |#if defined(__cplusplus)                                                                         |  5450     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  5451     4
    46       |#define __END_DECLS     }                                                                        |  5452     4
    47       |#else                                                                                            |  5453     4
    48       |#define __BEGIN_DECLS                                                                            |  5454     4
    49       |#define __END_DECLS                                                                              |  5455     4
    50       |#endif                                                                                           |  5456     4
    51       |                                                                                                 |  5457     4
    52       |/*                                                                                               |  5458     4
    53       | * This code has been put in place to help reduce the addition of                                |  5459     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   106


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  5460     4
    55       | * having a compiler-agnostic source tree.                                                       |  5461     4
    56       | */                                                                                              |  5462     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  5463     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  5464     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  5465     4
    60       |                                                                                                 |  5466     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  5467     4
    62       |                                                                                                 |  5468     4
    63       |                                                                                                 |  5469     4
    64       |/*                                                                                               |  5470     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  5471     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  5472     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  5473     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  5474     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  5475     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  5476     4
    71       | * this only works with ANSI C.                                                                  |  5477     4
    72       | *                                                                                               |  5478     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  5479     4
    74       | * first.  It is only available with ANSI C.                                                     |  5480     4
    75       | */                                                                                              |  5481     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  5482     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  5483     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  5484     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  5485     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  5486     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  5487     4
    82       |                                                                                                 |  5488     4
    83       |#define __const         const           /* define reserved names to standard */                  |  5489     4
    84       |#define __signed        signed                                                                   |  5490     4
    85       |#define __volatile      volatile                                                                 |  5491     4
    86       |#if defined(__cplusplus)                                                                         |  5492     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  5493     4
    88       |#else                                                                                            |  5494     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  5495     4
    90       |#endif /* !__cplusplus */                                                                        |  5496     4
    91       |                                                                                                 |  5497     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  5498     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  5499     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  5500     4
    95       |#define __STRING(x)     "x"                                                                      |  5501     4
    96       |                                                                                                 |  5502     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  5503     4
    98       |#define __inline                                                                                 |  5504     4
    99       |#define __signed                                                                                 |  5505     4
   100       |#define __volatile                                                                               |  5506     4
   101       |/*                                                                                               |  5507     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  5508     4
   103       | * deleted from the program and old programs will want them left alone.                          |  5509     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  5510     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  5511     4
   106       | */                                                                                              |  5512     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   107


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  5513     4
   108       |#define const                           /* delete ANSI C keywords */                             |  5514     4
   109       |#define inline                                                                                   |  5515     4
   110       |#define signed                                                                                   |  5516     4
   111       |#define volatile                                                                                 |  5517     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  5518     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  5519     4
   114       |                                                                                                 |  5520     4
   115       |/*                                                                                               |  5521     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  5522     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  5523     4
   118       | */                                                                                              |  5524     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  5525     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  5526     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  5527     4
   122       |#define __unused                                                                                 |  5528     4
   123       |#define __aligned(x)                                                                             |  5529     4
   124       |#define __section(x)                                                                             |  5530     4
   125       |#define __nonnull(x)                                                                             |  5531     4
   126       |#define __used                                                                                   |  5532     4
   127       |                                                                                                 |  5533     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  5534     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  5535     4
   130       |                                                                                                 |  5536     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  5537     4
   132       |#define __func__  NULL                                                                           |  5538     4
   133       |#endif                                                                                           |  5539     4
   134       |                                                                                                 |  5540     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  5541     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  5542     4
   137       |#endif                                                                                           |  5543     4
   138       |                                                                                                 |  5544     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  5545     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  5546     4
   141       | **/                                                                                             |  5547     4
   142       |#ifndef __cplusplus                                                                              |  5548     4
   143       |#define __restrict __restrict__                                                                  |  5549     4
   144       |#else                                                                                            |  5550     4
   145       |/* Systems/C++ does not */                                                                       |  5551     4
   146       |#define __restrict                                                                               |  5552     4
   147       |#endif                                                                                           |  5553     4
   148       |                                                                                                 |  5554     4
   149       |/*                                                                                               |  5555     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  5556     4
   151       | */                                                                                              |  5557     4
   152       |#define __predict_true(exp)     (exp)                                                            |  5558     4
   153       |#define __predict_false(exp)    (exp)                                                            |  5559     4
   154       |                                                                                                 |  5560     4
   155       |                                                                                                 |  5561     4
   156       |/*                                                                                               |  5562     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  5563     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  5564     4
   159       | *                                                                                               |  5565     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   108


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  5566     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  5567     4
   162       | */                                                                                              |  5568     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  5569     4
   164       |#undef __offsetof                                                                                |  5570     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  5571     4
   166       |#endif                                                                                           |  5572     4
   167       |                                                                                                 |  5573     4
   168       |/*                                                                                               |  5574     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  5575     4
   170       | * or scanf-like arguments.                                                                      |  5576     4
   171       | */                                                                                              |  5577     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  5578     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  5579     4
   174       |#define __format_arg(fmtarg)                                                                     |  5580     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  5581     4
   176       |                                                                                                 |  5582     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  5583     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  5584     4
   179       |                                                                                                 |  5585     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  5586     4
   181       |#define __weak_reference(sym,alias)                                                              |  5587     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  5588     4
   183       |#define __warn_references(sym,msg)                                                               |  5589     4
   184       |                                                                                                 |  5590     4
   185       | /* This places the string into the resulting object.  It should */                              |  5591     4
   186       | /* probably become #pragma ident */                                                             |  5592     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  5593     4
   188       |                                                                                                 |  5594     4
   189       |#ifndef __RCSID                                                                                  |  5595     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  5596     4
   191       |#endif                                                                                           |  5597     4
   192       |                                                                                                 |  5598     4
   193       |/*                                                                                               |  5599     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  5600     4
   195       | * Usage:                                                                                        |  5601     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  5602     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  5603     4
   198       | */                                                                                              |  5604     4
   199       |#ifndef __SYSCID                                                                                 |  5605     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  5606     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  5607     4
   202       |#else                                                                                            |  5608     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  5609     4
   204       |#endif                                                                                           |  5610     4
   205       |#endif                                                                                           |  5611     4
   206       |                                                                                                 |  5612     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  5613     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  5614     4
   209       |#endif                                                                                           |  5615     4
   210       |                                                                                                 |  5616     4
   211       |#ifndef __COPYRIGHT                                                                              |  5617     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  5618     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   109


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   213       |#endif                                                                                           |  5619     4
   214       |                                                                                                 |  5620     4
   215       |                                                                                                 |  5621     4
   216       |#ifndef __DECONST                                                                                |  5622     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  5623     4
   218       |#endif                                                                                           |  5624     4
   219       |                                                                                                 |  5625     4
   220       |#ifndef __DEVOLATILE                                                                             |  5626     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  5627     4
   222       |#endif                                                                                           |  5628     4
   223       |                                                                                                 |  5629     4
   224       |#ifndef __DEQUALIFY                                                                              |  5630     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  5631     4
   226       |#endif                                                                                           |  5632     4
   227       |                                                                                                 |  5633     4
   228       |                                                                                                 |  5634     4
   229       |/*-                                                                                              |  5635     4
   230       | * The following definitions are an extension of the behavior originally                         |  5636     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  5637     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  5638     4
   233       | * header file is included.                                                                      |  5639     4
   234       | *                                                                                               |  5640     4
   235       | * Here's a quick run-down of the versions:                                                      |  5641     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  5642     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  5643     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  5644     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  5645     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  5646     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  5647     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  5648     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  5649     4
   244       | *                                                                                               |  5650     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  5651     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  5652     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  5653     4
   248       | *                                                                                               |  5654     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  5655     4
   250       | */                                                                                              |  5656     4
   251       |                                                                                                 |  5657     4
   252       |/*                                                                                               |  5658     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  5659     4
   254       | * available. Also make them available when requested so.                                        |  5660     4
   255       | */                                                                                              |  5661     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  5662     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  5663     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  5664     4
   259       |#define __DF_VISIBLE    1                                                                        |  5665     4
   260       |#else                                                                                            |  5666     4
   261       |#define __DF_VISIBLE    0                                                                        |  5667     4
   262       |#endif                                                                                           |  5668     4
   263       |                                                                                                 |  5669     4
   264       |/*-                                                                                              |  5670     4
   265       | * The following definitions are an extension of the behavior originally                         |  5671     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   110


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  5672     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  5673     4
   268       | * header file is included.                                                                      |  5674     4
   269       | *                                                                                               |  5675     4
   270       | * Here's a quick run-down of the versions:                                                      |  5676     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  5677     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  5678     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  5679     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  5680     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  5681     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  5682     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  5683     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  5684     4
   279       | *                                                                                               |  5685     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  5686     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  5687     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  5688     4
   283       | *                                                                                               |  5689     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  5690     4
   285       | */                                                                                              |  5691     4
   286       |                                                                                                 |  5692     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  5693     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  5694     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  5695     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  5696     4
   291       |#endif                                                                                           |  5697     4
   292       |                                                                                                 |  5698     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  5699     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  5700     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  5701     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  5702     4
   297       |#endif                                                                                           |  5703     4
   298       |                                                                                                 |  5704     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  5705     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  5706     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  5707     4
   302       |#define __XSI_VISIBLE           700                                                              |  5708     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  5709     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  5710     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  5711     4
   306       |#define __XSI_VISIBLE           600                                                              |  5712     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  5713     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  5714     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  5715     4
   310       |#define __XSI_VISIBLE           500                                                              |  5716     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  5717     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  5718     4
   313       |#endif                                                                                           |  5719     4
   314       |#endif                                                                                           |  5720     4
   315       |                                                                                                 |  5721     4
   316       |/*                                                                                               |  5722     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  5723     4
   318       | * important.                                                                                    |  5724     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   111


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   319       | */                                                                                              |  5725     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  5726     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  5727     4
   322       |#endif                                                                                           |  5728     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  5729     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  5730     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  5731     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  5732     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  5733     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  5734     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  5735     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  5736     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  5737     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  5738     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  5739     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  5740     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  5741     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  5742     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  5743     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  5744     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  5745     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  5746     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  5747     4
   342       |#else                                                                                            |  5748     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  5749     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  5750     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  5751     4
   346       |#else                                                                                            |  5752     4
   347       |/*-                                                                                              |  5753     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  5754     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  5755     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  5756     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  5757     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  5758     4
   353       | * a test program to print out the values.                                                       |  5759     4
   354       | *                                                                                               |  5760     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  5761     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  5762     4
   357       | * environment (and in fact we will never get here).                                             |  5763     4
   358       | */                                                                                              |  5764     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  5765     4
   360       |#define __POSIX_VISIBLE         0                                                                |  5766     4
   361       |#define __XSI_VISIBLE           0                                                                |  5767     4
   362       |#define __BSD_VISIBLE           0                                                                |  5768     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  5769     4
   364       |#define __EXT1_VISIBLE          0                                                                |  5770     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  5771     4
   366       |#define __POSIX_VISIBLE         0                                                                |  5772     4
   367       |#define __XSI_VISIBLE           0                                                                |  5773     4
   368       |#define __BSD_VISIBLE           0                                                                |  5774     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  5775     4
   370       |#define __EXT1_VISIBLE          0                                                                |  5776     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  5777     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   112


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   372       |#define __POSIX_VISIBLE         0                                                                |  5778     4
   373       |#define __XSI_VISIBLE           0                                                                |  5779     4
   374       |#define __BSD_VISIBLE           0                                                                |  5780     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  5781     4
   376       |#define __EXT1_VISIBLE          0                                                                |  5782     4
   377       |#else                           /* Default environment: show everything. */                      |  5783     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  5784     4
   379       |#define __XSI_VISIBLE           700                                                              |  5785     4
   380       |#define __BSD_VISIBLE           1                                                                |  5786     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  5787     4
   382       |#define __EXT1_VISIBLE          1                                                                |  5788     4
   383       |#endif                                                                                           |  5789     4
   384       |#endif                                                                                           |  5790     4
   385       |                                                                                                 |  5791     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  5792     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  5793     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  5794     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  5795     4
   390       |#define __EXT1_VISIBLE          1                                                                |  5796     4
   391       |#else                                                                                            |  5797     4
   392       |#define __EXT1_VISIBLE          0                                                                |  5798     4
   393       |#endif                                                                                           |  5799     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  5800     4
   395       |                                                                                                 |  5801     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  5802     4
   397       |#define __NO_TLS 1                                                                               |  5803     4
   398       |#endif                                                                                           |  5804     4
   399       |                                                                                                 |  5805     4
   400       |                                                                                                 |  5806     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  5807     4
   402       |#define __FBSDID(x)                                                                              |  5808     4
   403       |                                                                                                 |  5809     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  5810     4
   405       |#pragma pack(reset)                                                                              |  5811     4
    50       |#include <sys/_null.h>                                                                           |  5812    16
     1       |/* release 2.25.00 */                                                                            |  5813    15
     2       |#pragma pack()                                                                                   |  5814    15
     3       |/*-                                                                                              |  5815    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  5816    15
     5       | * All rights reserved.                                                                          |  5817    15
     6       | *                                                                                               |  5818    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  5819    15
     8       | * modification, are permitted provided that the following conditions                            |  5820    15
     9       | * are met:                                                                                      |  5821    15
    10       | *                                                                                               |  5822    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  5823    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  5824    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5825    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  5826    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  5827    15
    16       | *                                                                                               |  5828    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  5829    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  5830    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   113


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  5831    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  5832    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  5833    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  5834    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  5835    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  5836    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  5837    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  5838    15
    27       | *                                                                                               |  5839    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  5840    15
    29       | */                                                                                              |  5841    15
    30       |                                                                                                 |  5842    15
    31       |#ifndef NULL                                                                                     |  5843    15
    32       |                                                                                                 |  5844    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  5845    15
    34       |#define NULL    ((void *)0)                                                                      |  5846    15
    35       |#else                                                                                            |  5847    15
    36       |#if defined(__LP64__)                                                                            |  5848    15
    37       |#define NULL    (0L)                                                                             |  5849    15
    38       |#else                                                                                            |  5850    15
    39       |#define NULL    0                                                                                |  5851    15
    40       |#endif  /* __LP64__ */                                                                           |  5852    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  5853    15
    42       |                                                                                                 |  5854    15
    43       |#endif                                                                                           |  5855    15
    44       |#pragma pack(reset)                                                                              |  5856    15
    51       |#include <sys/_types.h>                                                                          |  5857    16
     1       |/* release 2.25.00 */                                                                            |  5858     6
     2       |#pragma pack()                                                                                   |  5859     6
     3       |/*-                                                                                              |  5860     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  5861     6
     5       | * All rights reserved.                                                                          |  5862     6
     6       | *                                                                                               |  5863     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  5864     6
     8       | * modification, are permitted provided that the following conditions                            |  5865     6
     9       | * are met:                                                                                      |  5866     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  5867     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  5868     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5869     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  5870     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  5871     6
    15       | *                                                                                               |  5872     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  5873     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  5874     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  5875     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  5876     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  5877     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  5878     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  5879     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  5880     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  5881     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  5882     6
    26       | * SUCH DAMAGE.                                                                                  |  5883     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   114


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    27       | *                                                                                               |  5884     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  5885     6
    29       | */                                                                                              |  5886     6
    30       |                                                                                                 |  5887     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  5888     6
    32       |#define _SYS__TYPES_H_                                                                           |  5889     6
    33       |                                                                                                 |  5890     6
    34       |#include <sys/cdefs.h>                                                                           |  5891     6
    35       |#include <machine/_types.h>                                                                      |  5892     6
    36       |                                                                                                 |  5893     6
    37       |/*                                                                                               |  5894     6
    38       | * Standard type definitions.                                                                    |  5895     6
    39       | */                                                                                              |  5896     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  5897     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  5898     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  5899     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  5900     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  5901     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  5902     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  5903     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  5904     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  5905     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  5906     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  5907     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  5908     6
    52       |typedef int             __nl_item;                                                               |  5909     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  5910     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  5911     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  5912     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  5913     6
    57       |                                        /* signed, because of legacy code */                     |  5914     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  5915     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  5916     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  5917     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  5918     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  5919     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  5920     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  5921     6
    65       |                                                                                                 |  5922     6
    66       |/*                                                                                               |  5923     6
    67       | * Unusual type definitions.                                                                     |  5924     6
    68       | */                                                                                              |  5925     6
    69       |/*                                                                                               |  5926     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  5927     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  5928     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  5929     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  5930     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  5931     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  5932     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  5933     6
    77       | *                                                                                               |  5934     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  5935     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  5936     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   115


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  5937     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  5938     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  5939     6
    83       | */                                                                                              |  5940     6
    84       |#ifdef __cplusplus                                                                               |  5941     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  5942     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  5943     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  5944     6
    88       |#else                                                                                            |  5945     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  5946     6
    90       |#endif                                                                                           |  5947     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  5948     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  5949     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  5950     6
    94       |                                                                                                 |  5951     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  5952     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  5953     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  5954     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  5955     6
    99       |#endif                                                                                           |  5956     6
   100       |                                                                                                 |  5957     6
   101       |#if !defined(__cplusplus)                                                                        |  5958     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  5959     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  5960     6
   104       |#endif                                                                                           |  5961     6
   105       |                                                                                                 |  5962     6
   106       |                                                                                                 |  5963     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  5964     6
   108       |                                                                                                 |  5965     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  5966     6
   110       |                                                                                                 |  5967     6
   111       |/*                                                                                               |  5968     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  5969     6
   113       | * stream conversions.                                                                           |  5970     6
   114       | */                                                                                              |  5971     6
   115       |typedef union {                                                                                  |  5972     6
   116       |        char            __mbstate8[128];                                                         |  5973     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  5974     6
   118       |} __mbstate_t;                                                                                   |  5975     6
   119       |                                                                                                 |  5976     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  5977     6
   121       |#pragma pack(reset)                                                                              |  5978     6
    52       |                                                                                                 |  5979    16
    53       |#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE                             |  5980    16
    54       |/*                                                                                               |  5981    16
    55       | * Frequency of the clock ticks reported by times().  Deprecated - use                           |  5982    16
    56       | * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)                                      |  5983    16
    57       | *                                                                                               |  5984    16
    58       | */                                                                                              |  5985    16
    58       +                                                                                                 +  5985    16
    59       |#define CLK_TCK         10000                                                                    |  5986    16
    60       |#endif                                                                                           |  5987    16
    61       |                                                                                                 |  5988    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   116


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    62       |/* Frequency of the clock ticks reported by clock().  */                                         |  5989    16
    63       |#define CLOCKS_PER_SEC  128                                                                      |  5990    16
    64       |                                                                                                 |  5991    16
    65       |#ifndef _CLOCK_T_DECLARED                                                                        |  5992    16
    66       |typedef __clock_t       clock_t;                                                                 |  5993    16
    67       |#define _CLOCK_T_DECLARED                                                                        |  5994    16
    68       |#endif                                                                                           |  5995    16
    69       |                                                                                                 |  5996    16
    70       |#ifndef _TIME_T_DECLARED                                                                         |  5997    16
    71       |typedef __time_t        time_t;                                                                  |  5998    16
    72       |#define _TIME_T_DECLARED                                                                         |  5999    16
    73       |#endif                                                                                           |  6000    16
    74       |                                                                                                 |  6001    16
    75       |#ifndef _SIZE_T_DECLARED                                                                         |  6002    16
    76       |typedef __size_t        size_t;                                                                  |  6003    16
    77       |#define _SIZE_T_DECLARED                                                                         |  6004    16
    78       |#endif                                                                                           |  6005    16
    79       |                                                                                                 |  6006    16
    80       |#if __POSIX_VISIBLE >= 199309                                                                    |  6007    16
    81       |/*                                                                                               |  6008    16
    82       | * New in POSIX 1003.1b-1993.                                                                    |  6009    16
    83       | */                                                                                              |  6010    16
    83       +                                                                                                 +  6010    16
    84       |#ifndef _CLOCKID_T_DECLARED                                                                      |  6011    16
    85       |typedef __clockid_t     clockid_t;                                                               |  6012    16
    86       |#define _CLOCKID_T_DECLARED                                                                      |  6013    16
    87       |#endif                                                                                           |  6014    16
    88       |                                                                                                 |  6015    16
    89       |#ifndef _TIMER_T_DECLARED                                                                        |  6016    16
    90       |typedef __timer_t       timer_t;                                                                 |  6017    16
    91       |#define _TIMER_T_DECLARED                                                                        |  6018    16
    92       |#endif                                                                                           |  6019    16
    93       |                                                                                                 |  6020    16
    94       |#include <sys/timespec.h>                                                                        |  6021    16
     1       |/* release 2.25.00 */                                                                            |  6022    12
     2       |#pragma pack()                                                                                   |  6023    12
     3       |/*-                                                                                              |  6024    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  6025    12
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6026    12
     6       | *                                                                                               |  6027    12
     7       | * Redistribution and use in source and binary forms, with or without                            |  6028    12
     8       | * modification, are permitted provided that the following conditions                            |  6029    12
     9       | * are met:                                                                                      |  6030    12
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6031    12
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6032    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6033    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6034    12
    14       | *    documentation and/or other materials provided with the distribution.                       |  6035    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  6036    12
    16       | *    may be used to endorse or promote products derived from this software                      |  6037    12
    17       | *    without specific prior written permission.                                                 |  6038    12
    18       | *                                                                                               |  6039    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6040    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   117


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6041    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6042    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6043    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6044    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6045    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6046    12
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6047    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6048    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6049    12
    29       | * SUCH DAMAGE.                                                                                  |  6050    12
    30       | *                                                                                               |  6051    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  6052    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          |  6053    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     |  6054    12
    34       | */                                                                                              |  6055    12
    35       |                                                                                                 |  6056    12
    36       |/*                                                                                               |  6057    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  |  6058    12
    38       | */                                                                                              |  6059    12
    39       |                                                                                                 |  6060    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         |  6061    12
    41       |#define _SYS_TIMESPEC_H_                                                                         |  6062    12
    42       |                                                                                                 |  6063    12
    43       |#include <sys/_types.h>                                                                          |  6064    12
    44       |                                                                                                 |  6065    12
    45       |#ifndef _TIME_T_DECLARED                                                                         |  6066    12
    46       |typedef __time_t        time_t;                                                                  |  6067    12
    47       |#define _TIME_T_DECLARED                                                                         |  6068    12
    48       |#endif                                                                                           |  6069    12
    49       |                                                                                                 |  6070    12
    50       |struct timespec {                                                                                |  6071    12
    51       |        time_t  tv_sec;         /* seconds */                                                    |  6072    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            |  6073    12
    53       |};                                                                                               |  6074    12
    54       |                                                                                                 |  6075    12
    55       |#if __BSD_VISIBLE                                                                                |  6076    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        |  6077    12
    57       |        do {                                                            \                        |  6078    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        |  6079    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        |  6080    12
    60       |        } while (0)                                                                              |  6081    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        |  6082    12
    62       |        do {                                                            \                        |  6083    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        |  6084    12
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        |  6085    12
    65       |        } while (0)                                                                              |  6086    12
    66       |                                                                                                 |  6087    12
    67       |#endif /* __BSD_VISIBLE */                                                                       |  6088    12
    68       |                                                                                                 |  6089    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    |  6090    12
    70       |#pragma pack(reset)                                                                              |  6091    12
    95       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  6092    16
    96       |                                                                                                 |  6093    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   118


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    97       |/* These macros are also in sys/time.h. */                                                       |  6094    16
    98       |#if !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112                                        |  6095    16
    99       |#define CLOCK_REALTIME  0                                                                        |  6096    16
   100       |#if 0                                                                                            |  6097    16
   101       |  /* only CLOCK_REALTIME exists in this implementation */                                        |  6098    16
   102       |#ifdef __BSD_VISIBLE                                                                             |  6099    16
   103       |#define CLOCK_VIRTUAL   1                                                                        |  6100    16
   104       |#define CLOCK_PROF      2                                                                        |  6101    16
   105       |#endif                                                                                           |  6102    16
   106       |#define CLOCK_MONOTONIC 4                                                                        |  6103    16
   107       |#endif /* 0 */                                                                                   |  6104    16
   108       |#endif /* !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112 */                               |  6105    16
   109       |                                                                                                 |  6106    16
   109       +                                                                                                 +  6106    16
   110       |#if !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112                                         |  6107    16
   111       |#if __BSD_VISIBLE                                                                                |  6108    16
   112       |#define TIMER_RELTIME   0x0     /* relative timer */                                             |  6109    16
   113       |#endif                                                                                           |  6110    16
   114       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             |  6111    16
   115       |#endif /* !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112 */                                |  6112    16
   116       |                                                                                                 |  6113    16
   116       +                                                                                                 +  6113    16
   117       |struct tm {                                                                                      |  6114    16
   118       |        int     tm_sec;         /* seconds after the minute [0-60] */                            |  6115    16
   119       |        int     tm_min;         /* minutes after the hour [0-59] */                              |  6116    16
   120       |        int     tm_hour;        /* hours since midnight [0-23] */                                |  6117    16
   121       |        int     tm_mday;        /* day of the month [1-31] */                                    |  6118    16
   122       |        int     tm_mon;         /* months since January [0-11] */                                |  6119    16
   123       |        int     tm_year;        /* years since 1900 */                                           |  6120    16
   124       |        int     tm_wday;        /* days since Sunday [0-6] */                                    |  6121    16
   125       |        int     tm_yday;        /* days since January 1 [0-365] */                               |  6122    16
   126       |        int     tm_isdst;       /* Daylight Savings Time flag */                                 |  6123    16
   127       |        long    tm_gmtoff;      /* offset from UTC in seconds */                                 |  6124    16
   128       |        char    *tm_zone;       /* timezone abbreviation */                                      |  6125    16
   129       |};                                                                                               |  6126    16
   130       |                                                                                                 |  6127    16
   131       |#if __POSIX_VISIBLE                                                                              |  6128    16
   132       |extern char *tzname[];                                                                           |  6129    16
   132       +extern char *tzname[];                                                                           +  6129    16
   133       |#endif                                                                                           |  6130    16
   134       |                                                                                                 |  6131    16
   135       |__BEGIN_DECLS                                                                                    |  6132    16
   135       +                                                                                                 +  6132    16
   136       |char *asctime(const struct tm *);                                                                |  6133    16
   137       |clock_t clock(void);                                                                             |  6134    16
   138       |char *ctime(const time_t *);                                                                     |  6135    16
   139       |double difftime(time_t, time_t);                                                                 |  6136    16
   140       |/* XXX missing: getdate() */                                                                     |  6137    16
   141       |struct tm *gmtime(const time_t *);                                                               |  6138    16
   142       |#pragma map (localtime, "LC@LTIME")                                                              |  6139    16
   143       |struct tm *localtime(const time_t *);                                                            |  6140    16
   144       |time_t mktime(struct tm *);                                                                      |  6141    16
   145       |size_t strftime(char * __restrict, size_t, const char * __restrict,                              |  6142    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   119


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   145       +size_t strftime(char * __restrict__, size_t, const char * __restrict__,                          +  6142    16
   146       |    const struct tm * __restrict);                                                               |  6143    16
   146       +        const struct tm * __restrict__);                                                         +  6143    16
   147       |time_t time(time_t *);                                                                           |  6144    16
   148       |                                                                                                 |  6145    16
   149       |#if __POSIX_VISIBLE                                                                              |  6146    16
   150       |void tzset(void);                                                                                |  6147    16
   150       +void tzset(void);                                                                                +  6147    16
   151       |#endif                                                                                           |  6148    16
   152       |                                                                                                 |  6149    16
   153       |#if __POSIX_VISIBLE >= 199309                                                                    |  6150    16
   154       |#pragma map(clock_getres, "@@CLKRES")                                                            |  6151    16
   154       +#pragma map ( clock_getres , "@@CLKRES" )                                                        +  6151    16
   155       |int clock_getres(clockid_t, struct timespec *);                                                  |  6152    16
   156       |#pragma map(clock_gettime, "@@CLKGET")                                                           |  6153    16
   157       |int clock_gettime(clockid_t, struct timespec *);                                                 |  6154    16
   158       |#pragma map(clock_settime, "@@CLKSET")                                                           |  6155    16
   159       |int clock_settime(clockid_t, const struct timespec *);                                           |  6156    16
   160       |#pragma map(nanosleep,"@@NNOSLP")                                                                |  6157    16
   161       |int nanosleep(const struct timespec *, struct timespec *);                                       |  6158    16
   162       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  6159    16
   163       |                                                                                                 |  6160    16
   164       |#if __POSIX_VISIBLE >= 199506                                                                    |  6161    16
   165       |#pragma map(asctime_r, "@@ASCT@R")                                                               |  6162    16
   165       +#pragma map ( asctime_r , "@@ASCT@R" )                                                           +  6162    16
   166       |char *asctime_r(const struct tm *, char *);                                                      |  6163    16
   167       |#pragma map(ctime_r, "@@CTME@R")                                                                 |  6164    16
   168       |char *ctime_r(const time_t *, char *);                                                           |  6165    16
   169       |#pragma map(gmtime_r, "@@GMTM@R")                                                                |  6166    16
   170       |struct tm *gmtime_r(const time_t *, struct tm *);                                                |  6167    16
   171       |#pragma map(localtime_r, "@@LCLT@R")                                                             |  6168    16
   172       |struct tm *localtime_r(const time_t *, struct tm *);                                             |  6169    16
   173       |#endif                                                                                           |  6170    16
   174       |                                                                                                 |  6171    16
   175       |#if __XSI_VISIBLE                                                                                |  6172    16
   176       |char *strptime(const char * __restrict, const char * __restrict,                                 |  6173    16
   176       +char *strptime(const char * __restrict__, const char * __restrict__,                             +  6173    16
   177       |    struct tm * __restrict);                                                                     |  6174    16
   177       +        struct tm * __restrict__);                                                               +  6174    16
   178       |#endif                                                                                           |  6175    16
   179       |                                                                                                 |  6176    16
   180       |#if __BSD_VISIBLE                                                                                |  6177    16
   181       |char *timezone(int, int);       /* XXX XSI conflict */                                           |  6178    16
   181       +char *timezone(int, int);                                                                        +  6178    16
   182       |void tzsetwall(void);                                                                            |  6179    16
   183       |#pragma map (timelocal, "TIMELC@L")                                                              |  6180    16
   184       |time_t timelocal(struct tm * const);                                                             |  6181    16
   185       |time_t timegm(struct tm * const);                                                                |  6182    16
   186       |#endif /* __BSD_VISIBLE */                                                                       |  6183    16
   187       |__END_DECLS                                                                                      |  6184    16
   187       +                                                                                                 +  6184    16
   188       |                                                                                                 |  6185    16
   189       |#endif /* !_TIME_H_ */                                                                           |  6186    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   120


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   190       |#pragma pack(reset)                                                                              |  6187    16
    24       |#include <sys/time.h>                                                                            |  6188     2
     1       |/* release 2.25.00 */                                                                            |  6189    17
     2       |#pragma pack()                                                                                   |  6190    17
     3       |/*-                                                                                              |  6191    17
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  6192    17
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6193    17
     6       | *                                                                                               |  6194    17
     7       | * Redistribution and use in source and binary forms, with or without                            |  6195    17
     8       | * modification, are permitted provided that the following conditions                            |  6196    17
     9       | * are met:                                                                                      |  6197    17
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6198    17
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6199    17
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6200    17
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6201    17
    14       | *    documentation and/or other materials provided with the distribution.                       |  6202    17
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  6203    17
    16       | *    may be used to endorse or promote products derived from this software                      |  6204    17
    17       | *    without specific prior written permission.                                                 |  6205    17
    18       | *                                                                                               |  6206    17
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6207    17
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6208    17
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6209    17
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6210    17
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6211    17
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6212    17
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6213    17
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6214    17
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6215    17
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6216    17
    29       | * SUCH DAMAGE.                                                                                  |  6217    17
    30       | *                                                                                               |  6218    17
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  6219    17
    32       | * $FreeBSD: src/sys/sys/time.h,v 1.69 2005/04/02 12:33:27 das Exp $                             |  6220    17
    33       | */                                                                                              |  6221    17
    34       |                                                                                                 |  6222    17
    35       |#ifndef _SYS_TIME_H_                                                                             |  6223    17
    36       |#define _SYS_TIME_H_                                                                             |  6224    17
    37       |                                                                                                 |  6225    17
    38       |#include <sys/_timeval.h>                                                                        |  6226    17
     1       |/* release 2.25.00 */                                                                            |  6227    11
     2       |#pragma pack()                                                                                   |  6228    11
     3       |/*-                                                                                              |  6229    11
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  6230    11
     5       | * All rights reserved.                                                                          |  6231    11
     6       | *                                                                                               |  6232    11
     7       | * Redistribution and use in source and binary forms, with or without                            |  6233    11
     8       | * modification, are permitted provided that the following conditions                            |  6234    11
     9       | * are met:                                                                                      |  6235    11
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6236    11
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6237    11
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6238    11
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6239    11
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   121


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    14       | *    documentation and/or other materials provided with the distribution.                       |  6240    11
    15       | *                                                                                               |  6241    11
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  6242    11
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6243    11
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6244    11
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  6245    11
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6246    11
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6247    11
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6248    11
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6249    11
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6250    11
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6251    11
    26       | * SUCH DAMAGE.                                                                                  |  6252    11
    27       | *                                                                                               |  6253    11
    28       | * $FreeBSD: src/sys/sys/_timeval.h,v 1.1.12.1 2006/06/23 23:41:05 cognet Exp $                  |  6254    11
    29       | */                                                                                              |  6255    11
    30       |                                                                                                 |  6256    11
    31       |#ifndef _SYS__TIMEVAL_H_                                                                         |  6257    11
    32       |#define _SYS__TIMEVAL_H_                                                                         |  6258    11
    33       |                                                                                                 |  6259    11
    34       |#include <sys/_types.h>                                                                          |  6260    11
    35       |                                                                                                 |  6261    11
    36       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  6262    11
    37       |typedef __suseconds_t   suseconds_t;                                                             |  6263    11
    38       |#define _SUSECONDS_T_DECLARED                                                                    |  6264    11
    39       |#endif                                                                                           |  6265    11
    40       |                                                                                                 |  6266    11
    41       |#ifndef _TIME_T_DECLARED                                                                         |  6267    11
    42       |typedef __time_t        time_t;                                                                  |  6268    11
    43       |#define _TIME_T_DECLARED                                                                         |  6269    11
    44       |#endif                                                                                           |  6270    11
    45       |                                                                                                 |  6271    11
    46       |/*                                                                                               |  6272    11
    47       | * Structure returned by gettimeofday(2) system call, and used in other calls.                   |  6273    11
    48       | */                                                                                              |  6274    11
    49       |struct timeval {                                                                                 |  6275    11
    50       |        time_t          tv_sec;                                                                  |  6276    11
    51       |        suseconds_t     tv_usec;        /* and microseconds */                                   |  6277    11
    52       |};                                                                                               |  6278    11
    53       |                                                                                                 |  6279    11
    54       |#endif /* !_SYS__TIMEVAL_H_ */                                                                   |  6280    11
    55       |#pragma pack(reset)                                                                              |  6281    11
    39       |#include <sys/types.h>                                                                           |  6282    17
     1       |/* release 2.25.00 */                                                                            |  6283     3
     2       |#pragma pack()                                                                                   |  6284     3
     3       |/*-                                                                                              |  6285     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    |  6286     3
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6287     3
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  6288     3
     7       | * All or some portions of this file are derived from material licensed                          |  6289     3
     8       | * to the University of California by American Telephone and Telegraph                           |  6290     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  6291     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  6292     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   122


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    11       | *                                                                                               |  6293     3
    12       | * Redistribution and use in source and binary forms, with or without                            |  6294     3
    13       | * modification, are permitted provided that the following conditions                            |  6295     3
    14       | * are met:                                                                                      |  6296     3
    15       | * 1. Redistributions of source code must retain the above copyright                             |  6297     3
    16       | *    notice, this list of conditions and the following disclaimer.                              |  6298     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6299     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  6300     3
    19       | *    documentation and/or other materials provided with the distribution.                       |  6301     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  6302     3
    21       | *    may be used to endorse or promote products derived from this software                      |  6303     3
    22       | *    without specific prior written permission.                                                 |  6304     3
    23       | *                                                                                               |  6305     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6306     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6307     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6308     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6309     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6310     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6311     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6312     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6313     3
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6314     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6315     3
    34       | * SUCH DAMAGE.                                                                                  |  6316     3
    35       | *                                                                                               |  6317     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   |  6318     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        |  6319     3
    38       | */                                                                                              |  6320     3
    39       |                                                                                                 |  6321     3
    40       |#ifndef _SYS_TYPES_H_                                                                            |  6322     3
    41       |#define _SYS_TYPES_H_                                                                            |  6323     3
    42       |                                                                                                 |  6324     3
    43       |#include <sys/cdefs.h>                                                                           |  6325     3
    44       |                                                                                                 |  6326     3
    45       |/* Machine type dependent parameters. */                                                         |  6327     3
    46       |#include <machine/endian.h>                                                                      |  6328     3
    47       |#include <sys/_types.h>                                                                          |  6329     3
    48       |                                                                                                 |  6330     3
    49       |#include <sys/_pthreadtypes.h>                                                                   |  6331     3
    50       |                                                                                                 |  6332     3
    51       |#if __BSD_VISIBLE                                                                                |  6333     3
    52       |typedef unsigned char   u_char;                                                                  |  6334     3
    53       |typedef unsigned short  u_short;                                                                 |  6335     3
    54       |typedef unsigned int    u_int;                                                                   |  6336     3
    55       |typedef unsigned long   u_long;                                                                  |  6337     3
    56       |#ifndef _KERNEL                                                                                  |  6338     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                |  6339     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                |  6340     3
    59       |#endif                                                                                           |  6341     3
    60       |#endif                                                                                           |  6342     3
    61       |                                                                                                 |  6343     3
    62       |/*                                                                                               |  6344     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          |  6345     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   123


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    64       | */                                                                                              |  6346     3
    65       |#ifndef _INT8_T_DECLARED                                                                         |  6347     3
    66       |typedef __int8_t        int8_t;                                                                  |  6348     3
    67       |#define _INT8_T_DECLARED                                                                         |  6349     3
    68       |#endif                                                                                           |  6350     3
    69       |                                                                                                 |  6351     3
    70       |#ifndef _INT16_T_DECLARED                                                                        |  6352     3
    71       |typedef __int16_t       int16_t;                                                                 |  6353     3
    72       |#define _INT16_T_DECLARED                                                                        |  6354     3
    73       |#endif                                                                                           |  6355     3
    74       |                                                                                                 |  6356     3
    75       |#ifndef _INT32_T_DECLARED                                                                        |  6357     3
    76       |typedef __int32_t       int32_t;                                                                 |  6358     3
    77       |#define _INT32_T_DECLARED                                                                        |  6359     3
    78       |#endif                                                                                           |  6360     3
    79       |                                                                                                 |  6361     3
    80       |#ifndef _INT64_T_DECLARED                                                                        |  6362     3
    81       |typedef __int64_t       int64_t;                                                                 |  6363     3
    82       |#define _INT64_T_DECLARED                                                                        |  6364     3
    83       |#endif                                                                                           |  6365     3
    84       |                                                                                                 |  6366     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        |  6367     3
    86       |typedef __uint8_t       uint8_t;                                                                 |  6368     3
    87       |#define _UINT8_T_DECLARED                                                                        |  6369     3
    88       |#endif                                                                                           |  6370     3
    89       |                                                                                                 |  6371     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       |  6372     3
    91       |typedef __uint16_t      uint16_t;                                                                |  6373     3
    92       |#define _UINT16_T_DECLARED                                                                       |  6374     3
    93       |#endif                                                                                           |  6375     3
    94       |                                                                                                 |  6376     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       |  6377     3
    96       |typedef __uint32_t      uint32_t;                                                                |  6378     3
    97       |#define _UINT32_T_DECLARED                                                                       |  6379     3
    98       |#endif                                                                                           |  6380     3
    99       |                                                                                                 |  6381     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       |  6382     3
   101       |typedef __uint64_t      uint64_t;                                                                |  6383     3
   102       |#define _UINT64_T_DECLARED                                                                       |  6384     3
   103       |#endif                                                                                           |  6385     3
   104       |                                                                                                 |  6386     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       |  6387     3
   106       |typedef __intptr_t      intptr_t;                                                                |  6388     3
   107       |typedef __uintptr_t     uintptr_t;                                                               |  6389     3
   108       |#define _INTPTR_T_DECLARED                                                                       |  6390     3
   109       |#endif                                                                                           |  6391     3
   110       |                                                                                                 |  6392     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    |  6393     3
   112       |typedef __uint16_t      u_int16_t;                                                               |  6394     3
   113       |typedef __uint32_t      u_int32_t;                                                               |  6395     3
   114       |typedef __uint64_t      u_int64_t;                                                               |  6396     3
   115       |                                                                                                 |  6397     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 |  6398     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   124


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   117       |typedef __int64_t       quad_t;                                                                  |  6399     3
   118       |typedef quad_t *        qaddr_t;                                                                 |  6400     3
   119       |                                                                                                 |  6401     3
   120       |typedef char *          caddr_t;        /* core address */                                       |  6402     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     |  6403     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  |  6404     3
   123       |                                                                                                 |  6405     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      |  6406     3
   125       |typedef __blksize_t     blksize_t;                                                               |  6407     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      |  6408     3
   127       |#endif                                                                                           |  6409     3
   128       |                                                                                                 |  6410     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       |  6411     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                |  6412     3
   131       |#define _BLKCNT_T_DECLARED                                                                       |  6413     3
   132       |#endif                                                                                           |  6414     3
   133       |                                                                                                 |  6415     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        |  6416     3
   135       |typedef __clock_t       clock_t;                                                                 |  6417     3
   136       |#define _CLOCK_T_DECLARED                                                                        |  6418     3
   137       |#endif                                                                                           |  6419     3
   138       |                                                                                                 |  6420     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      |  6421     3
   140       |typedef __clockid_t     clockid_t;                                                               |  6422     3
   141       |#define _CLOCKID_T_DECLARED                                                                      |  6423     3
   142       |#endif                                                                                           |  6424     3
   143       |                                                                                                 |  6425     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             |  6426     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       |  6427     3
   146       |                                                                                                 |  6428     3
   147       |#ifndef _DEV_T_DECLARED                                                                          |  6429     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       |  6430     3
   149       |#define _DEV_T_DECLARED                                                                          |  6431     3
   150       |#endif                                                                                           |  6432     3
   151       |                                                                                                 |  6433     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       |  6434     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         |  6435     3
   154       |#define _FFLAGS_T_DECLARED                                                                       |  6436     3
   155       |#endif                                                                                           |  6437     3
   156       |                                                                                                 |  6438     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 |  6439     3
   158       |                                                                                                 |  6440     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      |  6441     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              |  6442     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              |  6443     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     |  6444     3
   163       |#endif                                                                                           |  6445     3
   164       |                                                                                                 |  6446     3
   165       |#ifndef _GID_T_DECLARED                                                                          |  6447     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           |  6448     3
   167       |#define _GID_T_DECLARED                                                                          |  6449     3
   168       |#endif                                                                                           |  6450     3
   169       |                                                                                                 |  6451     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   125


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      |  6452     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     |  6453     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      |  6454     3
   173       |#endif                                                                                           |  6455     3
   174       |                                                                                                 |  6456     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      |  6457     3
   176       |typedef __uint16_t      in_port_t;                                                               |  6458     3
   177       |#define _IN_PORT_T_DECLARED                                                                      |  6459     3
   178       |#endif                                                                                           |  6460     3
   179       |                                                                                                 |  6461     3
   180       |#ifndef _ID_T_DECLARED                                                                           |  6462     3
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          |  6463     3
   182       |#define _ID_T_DECLARED                                                                           |  6464     3
   183       |#endif                                                                                           |  6465     3
   184       |                                                                                                 |  6466     3
   185       |#ifndef _INO_T_DECLARED                                                                          |  6467     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       |  6468     3
   187       |#define _INO_T_DECLARED                                                                          |  6469     3
   188       |#endif                                                                                           |  6470     3
   189       |                                                                                                 |  6471     3
   190       |#ifndef _KEY_T_DECLARED                                                                          |  6472     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            |  6473     3
   192       |#define _KEY_T_DECLARED                                                                          |  6474     3
   193       |#endif                                                                                           |  6475     3
   194       |                                                                                                 |  6476     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        |  6477     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             |  6478     3
   197       |#define _LWPID_T_DECLARED                                                                        |  6479     3
   198       |#endif                                                                                           |  6480     3
   199       |                                                                                                 |  6481     3
   200       |#ifndef _MODE_T_DECLARED                                                                         |  6482     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        |  6483     3
   202       |#define _MODE_T_DECLARED                                                                         |  6484     3
   203       |#endif                                                                                           |  6485     3
   204       |                                                                                                 |  6486     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        |  6487     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         |  6488     3
   207       |#define _NLINK_T_DECLARED                                                                        |  6489     3
   208       |#endif                                                                                           |  6490     3
   209       |                                                                                                 |  6491     3
   210       |#ifndef _OFF_T_DECLARED                                                                          |  6492     3
   211       |typedef __off_t         off_t;          /* file offset */                                        |  6493     3
   212       |#define _OFF_T_DECLARED                                                                          |  6494     3
   213       |#endif                                                                                           |  6495     3
   214       |                                                                                                 |  6496     3
   215       |#ifndef _PID_T_DECLARED                                                                          |  6497     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         |  6498     3
   217       |#define _PID_T_DECLARED                                                                          |  6499     3
   218       |#endif                                                                                           |  6500     3
   219       |                                                                                                 |  6501     3
   220       |typedef __register_t    register_t;                                                              |  6502     3
   221       |                                                                                                 |  6503     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         |  6504     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   126


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     |  6505     3
   224       |#define _RLIM_T_DECLARED                                                                         |  6506     3
   225       |#endif                                                                                           |  6507     3
   226       |                                                                                                 |  6508     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            |  6509     3
   228       |                                                                                                 |  6510     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         |  6511     3
   230       |typedef __size_t        size_t;                                                                  |  6512     3
   231       |#define _SIZE_T_DECLARED                                                                         |  6513     3
   232       |#endif                                                                                           |  6514     3
   233       |                                                                                                 |  6515     3
   234       |#ifndef _SSIZE_T_DECLARED                                                                        |  6516     3
   235       |typedef __ssize_t       ssize_t;                                                                 |  6517     3
   236       |#define _SSIZE_T_DECLARED                                                                        |  6518     3
   237       |#endif                                                                                           |  6519     3
   238       |                                                                                                 |  6520     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  6521     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              |  6522     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    |  6523     3
   242       |#endif                                                                                           |  6524     3
   243       |                                                                                                 |  6525     3
   244       |#ifndef _TIME_T_DECLARED                                                                         |  6526     3
   245       |typedef __time_t        time_t;                                                                  |  6527     3
   246       |#define _TIME_T_DECLARED                                                                         |  6528     3
   247       |#endif                                                                                           |  6529     3
   248       |                                                                                                 |  6530     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        |  6531     3
   250       |typedef __timer_t       timer_t;                                                                 |  6532     3
   251       |#define _TIMER_T_DECLARED                                                                        |  6533     3
   252       |#endif                                                                                           |  6534     3
   253       |                                                                                                 |  6535     3
   254       |typedef __u_register_t  u_register_t;                                                            |  6536     3
   255       |                                                                                                 |  6537     3
   256       |#ifndef _UID_T_DECLARED                                                                          |  6538     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            |  6539     3
   258       |#define _UID_T_DECLARED                                                                          |  6540     3
   259       |#endif                                                                                           |  6541     3
   260       |                                                                                                 |  6542     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     |  6543     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            |  6544     3
   263       |#define _USECONDS_T_DECLARED                                                                     |  6545     3
   264       |#endif                                                                                           |  6546     3
   265       |                                                                                                 |  6547     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             |  6548     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            |  6549     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              |  6550     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             |  6551     3
   270       |typedef __vm_size_t     vm_size_t;                                                               |  6552     3
   271       |                                                                                                 |  6553     3
   272       |#ifdef _KERNEL                                                                                   |  6554     3
   273       |typedef int             boolean_t;                                                               |  6555     3
   274       |typedef __cpumask_t     cpumask_t;                                                               |  6556     3
   275       |typedef __intfptr_t     intfptr_t;                                                               |  6557     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   127


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   276       |                                                                                                 |  6558     3
   277       |/*-                                                                                              |  6559     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      |  6560     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           |  6561     3
   280       | * compatibility is essential.  Least-width types should be used even less                       |  6562     3
   281       | * since they provide smaller benefits.                                                          |  6563     3
   282       | * XXX should be MD.                                                                             |  6564     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     |  6565     3
   284       | */                                                                                              |  6566     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 |  6567     3
   286       |                                                                                                 |  6568     3
   287       |typedef __uintfptr_t    uintfptr_t;                                                              |  6569     3
   288       |typedef __uint64_t      uoff_t;                                                                  |  6570     3
   289       |typedef struct vm_page  *vm_page_t;                                                              |  6571     3
   290       |                                                                                                 |  6572     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            |  6573     3
   292       |                                                                                                 |  6574     3
   293       |#endif /* !_KERNEL */                                                                            |  6575     3
   294       |                                                                                                 |  6576     3
   295       |/*                                                                                               |  6577     3
   296       | * The following are all things that really shouldn't exist in this header,                      |  6578     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          |  6579     3
   298       | */                                                                                              |  6580     3
   299       |#if __BSD_VISIBLE                                                                                |  6581     3
   300       |                                                                                                 |  6582     3
   301       |#include <sys/select.h>                                                                          |  6583     3
   302       |                                                                                                 |  6584     3
   303       |#ifndef _KERNEL                                                                                  |  6585     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    |  6586     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    |  6587     3
   306       |#endif /* !_KERNEL */                                                                            |  6588     3
   307       |                                                                                                 |  6589     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    |  6590     3
   309       |                                                                                                 |  6591     3
   310       |/*                                                                                               |  6592     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             |  6593     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             |  6594     3
   313       | * 64-bit off_t's.                                                                               |  6595     3
   314       | */                                                                                              |  6596     3
   315       |#ifndef _KERNEL                                                                                  |  6597     3
   316       |__BEGIN_DECLS                                                                                    |  6598     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      |  6599     3
   318       |#define _FTRUNCATE_DECLARED                                                                      |  6600     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  6601     3
   320       |int      ftruncate(int, off_t);                                                                  |  6602     3
   321       |#endif                                                                                           |  6603     3
   322       |#ifndef _LSEEK_DECLARED                                                                          |  6604     3
   323       |#define _LSEEK_DECLARED                                                                          |  6605     3
   324       |off_t    lseek(int, off_t, int);                                                                 |  6606     3
   325       |#endif                                                                                           |  6607     3
   326       |#ifndef _MMAP_DECLARED                                                                           |  6608     3
   327       |#define _MMAP_DECLARED                                                                           |  6609     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             |  6610     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   128


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   329       |#endif                                                                                           |  6611     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       |  6612     3
   331       |#define _TRUNCATE_DECLARED                                                                       |  6613     3
   332       |int      truncate(const char *, off_t);                                                          |  6614     3
   333       |#endif                                                                                           |  6615     3
   334       |__END_DECLS                                                                                      |  6616     3
   335       |#endif /* !_KERNEL */                                                                            |  6617     3
   336       |                                                                                                 |  6618     3
   337       |#endif /* __BSD_VISIBLE */                                                                       |  6619     3
   338       |                                                                                                 |  6620     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      |  6621     3
   340       |#pragma pack(reset)                                                                              |  6622     3
    40       |#include <sys/timespec.h>                                                                        |  6623    17
     1       |/* release 2.25.00 */                                                                            |  6624    12
     2       |#pragma pack()                                                                                   |  6625    12
     3       |/*-                                                                                              |  6626    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  6627    12
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6628    12
     6       | *                                                                                               |  6629    12
     7       | * Redistribution and use in source and binary forms, with or without                            |  6630    12
     8       | * modification, are permitted provided that the following conditions                            |  6631    12
     9       | * are met:                                                                                      |  6632    12
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6633    12
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6634    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6635    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6636    12
    14       | *    documentation and/or other materials provided with the distribution.                       |  6637    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  6638    12
    16       | *    may be used to endorse or promote products derived from this software                      |  6639    12
    17       | *    without specific prior written permission.                                                 |  6640    12
    18       | *                                                                                               |  6641    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6642    12
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6643    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6644    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6645    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6646    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6647    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6648    12
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6649    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6650    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6651    12
    29       | * SUCH DAMAGE.                                                                                  |  6652    12
    30       | *                                                                                               |  6653    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  6654    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          |  6655    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     |  6656    12
    34       | */                                                                                              |  6657    12
    35       |                                                                                                 |  6658    12
    36       |/*                                                                                               |  6659    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  |  6660    12
    38       | */                                                                                              |  6661    12
    39       |                                                                                                 |  6662    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         |  6663    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   129


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |#define _SYS_TIMESPEC_H_                                                                         |  6664    12
    42       |                                                                                                 |  6665    12
    43       |#include <sys/_types.h>                                                                          |  6666    12
    44       |                                                                                                 |  6667    12
    45       |#ifndef _TIME_T_DECLARED                                                                         |  6668    12
    46       |typedef __time_t        time_t;                                                                  |  6669    12
    47       |#define _TIME_T_DECLARED                                                                         |  6670    12
    48       |#endif                                                                                           |  6671    12
    49       |                                                                                                 |  6672    12
    50       |struct timespec {                                                                                |  6673    12
    51       |        time_t  tv_sec;         /* seconds */                                                    |  6674    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            |  6675    12
    53       |};                                                                                               |  6676    12
    54       |                                                                                                 |  6677    12
    55       |#if __BSD_VISIBLE                                                                                |  6678    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        |  6679    12
    57       |        do {                                                            \                        |  6680    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        |  6681    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        |  6682    12
    60       |        } while (0)                                                                              |  6683    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        |  6684    12
    62       |        do {                                                            \                        |  6685    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        |  6686    12
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        |  6687    12
    65       |        } while (0)                                                                              |  6688    12
    66       |                                                                                                 |  6689    12
    67       |#endif /* __BSD_VISIBLE */                                                                       |  6690    12
    68       |                                                                                                 |  6691    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    |  6692    12
    70       |#pragma pack(reset)                                                                              |  6693    12
    41       |                                                                                                 |  6694    17
    42       |struct timezone {                                                                                |  6695    17
    43       |        int     tz_minuteswest; /* minutes west of Greenwich */                                  |  6696    17
    44       |        int     tz_dsttime;     /* type of dst correction */                                     |  6697    17
    45       |};                                                                                               |  6698    17
    46       |#define DST_NONE        0       /* not on dst */                                                 |  6699    17
    47       |#define DST_USA         1       /* USA style dst */                                              |  6700    17
    48       |#define DST_AUST        2       /* Australian style dst */                                       |  6701    17
    49       |#define DST_WET         3       /* Western European dst */                                       |  6702    17
    50       |#define DST_MET         4       /* Middle European dst */                                        |  6703    17
    51       |#define DST_EET         5       /* Eastern European dst */                                       |  6704    17
    52       |#define DST_CAN         6       /* Canada */                                                     |  6705    17
    53       |                                                                                                 |  6706    17
    54       |#if __BSD_VISIBLE                                                                                |  6707    17
    55       |struct bintime {                                                                                 |  6708    17
    55       +struct bintime {                                                                                 +  6708    17
    56       |        time_t  sec;                                                                             |  6709    17
    57       |        uint64_t frac;                                                                           |  6710    17
    58       |};                                                                                               |  6711    17
    59       |                                                                                                 |  6712    17
    60       |static __inline void                                                                             |  6713    17
    60       +static __inline__ void                                                                           +  6713    17
    61       |bintime_addx(struct bintime *bt, uint64_t x)                                                     |  6714    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   130


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    62       |{                                                                                                |  6715    17
    63       |        uint64_t u;                                                                              |  6716    17
    64       |                                                                                                 |  6717    17
    65       |        u = bt->frac;                                                                            |  6718    17
    66       |        bt->frac += x;                                                                           |  6719    17
    67       |        if (u > bt->frac)                                                                        |  6720    17
    68       |                bt->sec++;                                                                       |  6721    17
    69       |}                                                                                                |  6722    17
    70       |                                                                                                 |  6723    17
    71       |static __inline void                                                                             |  6724    17
    71       +static __inline__ void                                                                           +  6724    17
    72       |bintime_add(struct bintime *bt, const struct bintime *bt2)                                       |  6725    17
    73       |{                                                                                                |  6726    17
    74       |        uint64_t u;                                                                              |  6727    17
    75       |                                                                                                 |  6728    17
    76       |        u = bt->frac;                                                                            |  6729    17
    77       |        bt->frac += bt2->frac;                                                                   |  6730    17
    78       |        if (u > bt->frac)                                                                        |  6731    17
    79       |                bt->sec++;                                                                       |  6732    17
    80       |        bt->sec += bt2->sec;                                                                     |  6733    17
    81       |}                                                                                                |  6734    17
    82       |                                                                                                 |  6735    17
    83       |static __inline void                                                                             |  6736    17
    83       +static __inline__ void                                                                           +  6736    17
    84       |bintime_sub(struct bintime *bt, const struct bintime *bt2)                                       |  6737    17
    85       |{                                                                                                |  6738    17
    86       |        uint64_t u;                                                                              |  6739    17
    87       |                                                                                                 |  6740    17
    88       |        u = bt->frac;                                                                            |  6741    17
    89       |        bt->frac -= bt2->frac;                                                                   |  6742    17
    90       |        if (u < bt->frac)                                                                        |  6743    17
    91       |                bt->sec--;                                                                       |  6744    17
    92       |        bt->sec -= bt2->sec;                                                                     |  6745    17
    93       |}                                                                                                |  6746    17
    94       |                                                                                                 |  6747    17
    95       |/*-                                                                                              |  6748    17
    96       | * Background information:                                                                       |  6749    17
    97       | *                                                                                               |  6750    17
    98       | * When converting between timestamps on parallel timescales of differing                        |  6751    17
    99       | * resolutions it is historical and scientific practice to round down rather                     |  6752    17
   100       | * than doing 4/5 rounding.                                                                      |  6753    17
   101       | *                                                                                               |  6754    17
   102       | *   The date changes at midnight, not at noon.                                                  |  6755    17
   103       | *                                                                                               |  6756    17
   104       | *   Even at 15:59:59.999999999 it's not four'o'clock.                                           |  6757    17
   105       | *                                                                                               |  6758    17
   106       | *   time_second ticks after N.999999999 not after N.4999999999                                  |  6759    17
   107       | */                                                                                              |  6760    17
   108       |                                                                                                 |  6761    17
   109       |static __inline void                                                                             |  6762    17
   109       +static __inline__ void                                                                           +  6762    17
   110       |bintime2timespec(const struct bintime *bt, struct timespec *ts)                                  |  6763    17
   111       |{                                                                                                |  6764    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   131


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   112       |                                                                                                 |  6765    17
   113       |        ts->tv_sec = bt->sec;                                                                    |  6766    17
   114       |        ts->tv_nsec = ((uint64_t)1000000000 * (uint32_t)(bt->frac >> 32)) >> 32;                 |  6767    17
   115       |}                                                                                                |  6768    17
   116       |                                                                                                 |  6769    17
   117       |static __inline void                                                                             |  6770    17
   117       +static __inline__ void                                                                           +  6770    17
   118       |timespec2bintime(const struct timespec *ts, struct bintime *bt)                                  |  6771    17
   119       |{                                                                                                |  6772    17
   120       |                                                                                                 |  6773    17
   121       |        bt->sec = ts->tv_sec;                                                                    |  6774    17
   122       |        /* 18446744073 = int(2^64 / 1000000000) */                                               |  6775    17
   123       |        bt->frac = ts->tv_nsec * (uint64_t)18446744073LL;                                        |  6776    17
   124       |}                                                                                                |  6777    17
   125       |                                                                                                 |  6778    17
   126       |static __inline void                                                                             |  6779    17
   126       +static __inline__ void                                                                           +  6779    17
   127       |bintime2timeval(const struct bintime *bt, struct timeval *tv)                                    |  6780    17
   128       |{                                                                                                |  6781    17
   129       |                                                                                                 |  6782    17
   130       |        tv->tv_sec = bt->sec;                                                                    |  6783    17
   131       |        tv->tv_usec = ((uint64_t)1000000 * (uint32_t)(bt->frac >> 32)) >> 32;                    |  6784    17
   132       |}                                                                                                |  6785    17
   133       |                                                                                                 |  6786    17
   134       |static __inline void                                                                             |  6787    17
   134       +static __inline__ void                                                                           +  6787    17
   135       |timeval2bintime(const struct timeval *tv, struct bintime *bt)                                    |  6788    17
   136       |{                                                                                                |  6789    17
   137       |                                                                                                 |  6790    17
   138       |        bt->sec = tv->tv_sec;                                                                    |  6791    17
   139       |        /* 18446744073709 = int(2^64 / 1000000) */                                               |  6792    17
   140       |        bt->frac = tv->tv_usec * (uint64_t)18446744073709LL;                                     |  6793    17
   141       |}                                                                                                |  6794    17
   142       |#endif /* __BSD_VISIBLE */                                                                       |  6795    17
   143       |                                                                                                 |  6796    17
   144       |#ifdef _KERNEL                                                                                   |  6797    17
   145       |                                                                                                 |  6798    17
   146       |/* Operations on timespecs */                                                                    |  6799    17
   147       |#define timespecclear(tvp)      ((tvp)->tv_sec = (tvp)->tv_nsec = 0)                             |  6800    17
   148       |#define timespecisset(tvp)      ((tvp)->tv_sec || (tvp)->tv_nsec)                                |  6801    17
   149       |#define timespeccmp(tvp, uvp, cmp)                                      \                        |  6802    17
   150       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        |  6803    17
   151       |            ((tvp)->tv_nsec cmp (uvp)->tv_nsec) :                       \                        |  6804    17
   152       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   |  6805    17
   153       |#define timespecadd(vvp, uvp)                                           \                        |  6806    17
   154       |        do {                                                            \                        |  6807    17
   155       |                (vvp)->tv_sec += (uvp)->tv_sec;                         \                        |  6808    17
   156       |                (vvp)->tv_nsec += (uvp)->tv_nsec;                       \                        |  6809    17
   157       |                if ((vvp)->tv_nsec >= 1000000000) {                     \                        |  6810    17
   158       |                        (vvp)->tv_sec++;                                \                        |  6811    17
   159       |                        (vvp)->tv_nsec -= 1000000000;                   \                        |  6812    17
   160       |                }                                                       \                        |  6813    17
   161       |        } while (0)                                                                              |  6814    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   132


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   162       |#define timespecsub(vvp, uvp)                                           \                        |  6815    17
   163       |        do {                                                            \                        |  6816    17
   164       |                (vvp)->tv_sec -= (uvp)->tv_sec;                         \                        |  6817    17
   165       |                (vvp)->tv_nsec -= (uvp)->tv_nsec;                       \                        |  6818    17
   166       |                if ((vvp)->tv_nsec < 0) {                               \                        |  6819    17
   167       |                        (vvp)->tv_sec--;                                \                        |  6820    17
   168       |                        (vvp)->tv_nsec += 1000000000;                   \                        |  6821    17
   169       |                }                                                       \                        |  6822    17
   170       |        } while (0)                                                                              |  6823    17
   171       |                                                                                                 |  6824    17
   172       |/* Operations on timevals. */                                                                    |  6825    17
   173       |                                                                                                 |  6826    17
   174       |#define timevalclear(tvp)               ((tvp)->tv_sec = (tvp)->tv_usec = 0)                     |  6827    17
   175       |#define timevalisset(tvp)               ((tvp)->tv_sec || (tvp)->tv_usec)                        |  6828    17
   176       |#define timevalcmp(tvp, uvp, cmp)                                       \                        |  6829    17
   177       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        |  6830    17
   178       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        |  6831    17
   179       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   |  6832    17
   180       |                                                                                                 |  6833    17
   181       |/* timevaladd and timevalsub are not inlined */                                                  |  6834    17
   182       |                                                                                                 |  6835    17
   183       |#endif /* _KERNEL */                                                                             |  6836    17
   184       |                                                                                                 |  6837    17
   185       |#ifndef _KERNEL                 /* NetBSD/OpenBSD compatible interfaces */                       |  6838    17
   186       |                                                                                                 |  6839    17
   187       |#define timerclear(tvp)         ((tvp)->tv_sec = (tvp)->tv_usec = 0)                             |  6840    17
   188       |#define timerisset(tvp)         ((tvp)->tv_sec || (tvp)->tv_usec)                                |  6841    17
   189       |#define timercmp(tvp, uvp, cmp)                                 \                                |  6842    17
   190       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        |  6843    17
   191       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        |  6844    17
   192       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   |  6845    17
   193       |#define timeradd(tvp, uvp, vvp)                                         \                        |  6846    17
   194       |        do {                                                            \                        |  6847    17
   195       |                (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec;          \                        |  6848    17
   196       |                (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec;       \                        |  6849    17
   197       |                if ((vvp)->tv_usec >= 1000000) {                        \                        |  6850    17
   198       |                        (vvp)->tv_sec++;                                \                        |  6851    17
   199       |                        (vvp)->tv_usec -= 1000000;                      \                        |  6852    17
   200       |                }                                                       \                        |  6853    17
   201       |        } while (0)                                                                              |  6854    17
   202       |#define timersub(tvp, uvp, vvp)                                         \                        |  6855    17
   203       |        do {                                                            \                        |  6856    17
   204       |                (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec;          \                        |  6857    17
   205       |                (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec;       \                        |  6858    17
   206       |                if ((vvp)->tv_usec < 0) {                               \                        |  6859    17
   207       |                        (vvp)->tv_sec--;                                \                        |  6860    17
   208       |                        (vvp)->tv_usec += 1000000;                      \                        |  6861    17
   209       |                }                                                       \                        |  6862    17
   210       |        } while (0)                                                                              |  6863    17
   211       |#endif                                                                                           |  6864    17
   212       |                                                                                                 |  6865    17
   213       |/*                                                                                               |  6866    17
   214       | * Names of the interval timers, and structure                                                   |  6867    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   133


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   215       | * defining a timer setting.                                                                     |  6868    17
   216       | */                                                                                              |  6869    17
   217       |#define ITIMER_REAL     0                                                                        |  6870    17
   218       |#define ITIMER_VIRTUAL  1                                                                        |  6871    17
   219       |#define ITIMER_PROF     2                                                                        |  6872    17
   220       |                                                                                                 |  6873    17
   221       |struct itimerval {                                                                               |  6874    17
   222       |        struct  timeval it_interval;    /* timer interval */                                     |  6875    17
   223       |        struct  timeval it_value;       /* current value */                                      |  6876    17
   224       |};                                                                                               |  6877    17
   225       |                                                                                                 |  6878    17
   226       |/*                                                                                               |  6879    17
   227       | * Getkerninfo clock information structure                                                       |  6880    17
   228       | */                                                                                              |  6881    17
   229       |struct clockinfo {                                                                               |  6882    17
   230       |        int     hz;             /* clock frequency */                                            |  6883    17
   231       |        int     tick;           /* micro-seconds per hz tick */                                  |  6884    17
   232       |        int     spare;                                                                           |  6885    17
   233       |        int     stathz;         /* statistics clock frequency */                                 |  6886    17
   234       |        int     profhz;         /* profiling clock frequency */                                  |  6887    17
   235       |};                                                                                               |  6888    17
   236       |                                                                                                 |  6889    17
   237       |/* These macros are also in time.h. */                                                           |  6890    17
   238       |#ifndef CLOCK_REALTIME                                                                           |  6891    17
   239       |#define CLOCK_REALTIME  0                                                                        |  6892    17
   240       |#if 0                                                                                            |  6893    17
   241       |  /* only CLOCK_REALTIME exists in this implementation */                                        |  6894    17
   242       |#define CLOCK_VIRTUAL   1                                                                        |  6895    17
   243       |#define CLOCK_PROF      2                                                                        |  6896    17
   244       |#define CLOCK_MONOTONIC 4                                                                        |  6897    17
   245       |#endif                                                                                           |  6898    17
   246       |#endif                                                                                           |  6899    17
   247       |                                                                                                 |  6900    17
   248       |#ifndef TIMER_ABSTIME                                                                            |  6901    17
   249       |#define TIMER_RELTIME   0x0     /* relative timer */                                             |  6902    17
   250       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             |  6903    17
   251       |#endif                                                                                           |  6904    17
   252       |                                                                                                 |  6905    17
   253       |#ifdef _KERNEL                                                                                   |  6906    17
   254       |extern time_t   time_second;                                                                     |  6907    17
   255       |extern time_t   time_uptime;                                                                     |  6908    17
   256       |extern struct timeval boottime;                                                                  |  6909    17
   257       |                                                                                                 |  6910    17
   258       |/*                                                                                               |  6911    17
   259       | * Functions for looking at our clock: [get]{bin,nano,micro}[up]time()                           |  6912    17
   260       | *                                                                                               |  6913    17
   261       | * Functions without the "get" prefix returns the best timestamp                                 |  6914    17
   262       | * we can produce in the given format.                                                           |  6915    17
   263       | *                                                                                               |  6916    17
   264       | * "bin"   == struct bintime  == seconds + 64 bit fraction of seconds.                           |  6917    17
   265       | * "nano"  == struct timespec == seconds + nanoseconds.                                          |  6918    17
   266       | * "micro" == struct timeval  == seconds + microseconds.                                         |  6919    17
   267       | *                                                                                               |  6920    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   134


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   268       | * Functions containing "up" returns time relative to boot and                                   |  6921    17
   269       | * should be used for calculating time intervals.                                                |  6922    17
   270       | *                                                                                               |  6923    17
   271       | * Functions without "up" returns GMT time.                                                      |  6924    17
   272       | *                                                                                               |  6925    17
   273       | * Functions with the "get" prefix returns a less precise result                                 |  6926    17
   274       | * much faster than the functions without "get" prefix and should                                |  6927    17
   275       | * be used where a precision of 10 msec is acceptable or where                                   |  6928    17
   276       | * performance is priority. (NB: "precision", _not_ "resolution" !)                              |  6929    17
   277       | *                                                                                               |  6930    17
   278       | */                                                                                              |  6931    17
   279       |                                                                                                 |  6932    17
   280       |void    binuptime(struct bintime *bt);                                                           |  6933    17
   281       |void    nanouptime(struct timespec *tsp);                                                        |  6934    17
   282       |void    microuptime(struct timeval *tvp);                                                        |  6935    17
   283       |                                                                                                 |  6936    17
   284       |void    bintime(struct bintime *bt);                                                             |  6937    17
   285       |void    nanotime(struct timespec *tsp);                                                          |  6938    17
   286       |void    microtime(struct timeval *tvp);                                                          |  6939    17
   287       |                                                                                                 |  6940    17
   288       |void    getbinuptime(struct bintime *bt);                                                        |  6941    17
   289       |void    getnanouptime(struct timespec *tsp);                                                     |  6942    17
   290       |void    getmicrouptime(struct timeval *tvp);                                                     |  6943    17
   291       |                                                                                                 |  6944    17
   292       |void    getbintime(struct bintime *bt);                                                          |  6945    17
   293       |void    getnanotime(struct timespec *tsp);                                                       |  6946    17
   294       |void    getmicrotime(struct timeval *tvp);                                                       |  6947    17
   295       |                                                                                                 |  6948    17
   296       |/* Other functions */                                                                            |  6949    17
   297       |int     itimerdecr(struct itimerval *itp, int usec);                                             |  6950    17
   298       |int     itimerfix(struct timeval *tv);                                                           |  6951    17
   299       |int     ppsratecheck(struct timeval *, int *, int);                                              |  6952    17
   300       |int     ratecheck(struct timeval *, const struct timeval *);                                     |  6953    17
   301       |void    timevaladd(struct timeval *t1, const struct timeval *t2);                                |  6954    17
   302       |void    timevalsub(struct timeval *t1, const struct timeval *t2);                                |  6955    17
   303       |int     tvtohz(struct timeval *tv);                                                              |  6956    17
   304       |#else /* !_KERNEL */                                                                             |  6957    17
   305       |#include <time.h>                                                                                |  6958    17
     1       |/* release 2.25.00 */                                                                            |  6959    16
     2       |#pragma pack()                                                                                   |  6960    16
     3       |/*                                                                                               |  6961    16
     4       | * Copyright (c) 1989, 1993                                                                      |  6962    16
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6963    16
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  6964    16
     7       | * All or some portions of this file are derived from material licensed                          |  6965    16
     8       | * to the University of California by American Telephone and Telegraph                           |  6966    16
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  6967    16
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  6968    16
    11       | *                                                                                               |  6969    16
    12       | * Redistribution and use in source and binary forms, with or without                            |  6970    16
    13       | * modification, are permitted provided that the following conditions                            |  6971    16
    14       | * are met:                                                                                      |  6972    16
    15       | * 1. Redistributions of source code must retain the above copyright                             |  6973    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   135


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    16       | *    notice, this list of conditions and the following disclaimer.                              |  6974    16
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6975    16
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  6976    16
    19       | *    documentation and/or other materials provided with the distribution.                       |  6977    16
    20       | * 3. All advertising materials mentioning features or use of this software                      |  6978    16
    21       | *    must display the following acknowledgement:                                                |  6979    16
    22       | *      This product includes software developed by the University of                            |  6980    16
    23       | *      California, Berkeley and its contributors.                                               |  6981    16
    24       | * 4. Neither the name of the University nor the names of its contributors                       |  6982    16
    25       | *    may be used to endorse or promote products derived from this software                      |  6983    16
    26       | *    without specific prior written permission.                                                 |  6984    16
    27       | *                                                                                               |  6985    16
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6986    16
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6987    16
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6988    16
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6989    16
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6990    16
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6991    16
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6992    16
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6993    16
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6994    16
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6995    16
    38       | * SUCH DAMAGE.                                                                                  |  6996    16
    39       | *                                                                                               |  6997    16
    40       | *      @(#)time.h      8.3 (Berkeley) 1/21/94                                                   |  6998    16
    41       | */                                                                                              |  6999    16
    42       |                                                                                                 |  7000    16
    43       |/*                                                                                               |  7001    16
    44       | */                                                                                              |  7002    16
    45       |                                                                                                 |  7003    16
    46       |#ifndef _TIME_H_                                                                                 |  7004    16
    47       |#define _TIME_H_                                                                                 |  7005    16
    48       |                                                                                                 |  7006    16
    49       |#include <sys/cdefs.h>                                                                           |  7007    16
    50       |#include <sys/_null.h>                                                                           |  7008    16
    51       |#include <sys/_types.h>                                                                          |  7009    16
    52       |                                                                                                 |  7010    16
    53       |#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE                             |  7011    16
    54       |/*                                                                                               |  7012    16
    55       | * Frequency of the clock ticks reported by times().  Deprecated - use                           |  7013    16
    56       | * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)                                      |  7014    16
    57       | *                                                                                               |  7015    16
    58       | */                                                                                              |  7016    16
    59       |#define CLK_TCK         10000                                                                    |  7017    16
    60       |#endif                                                                                           |  7018    16
    61       |                                                                                                 |  7019    16
    62       |/* Frequency of the clock ticks reported by clock().  */                                         |  7020    16
    63       |#define CLOCKS_PER_SEC  128                                                                      |  7021    16
    64       |                                                                                                 |  7022    16
    65       |#ifndef _CLOCK_T_DECLARED                                                                        |  7023    16
    66       |typedef __clock_t       clock_t;                                                                 |  7024    16
    67       |#define _CLOCK_T_DECLARED                                                                        |  7025    16
    68       |#endif                                                                                           |  7026    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   136


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    69       |                                                                                                 |  7027    16
    70       |#ifndef _TIME_T_DECLARED                                                                         |  7028    16
    71       |typedef __time_t        time_t;                                                                  |  7029    16
    72       |#define _TIME_T_DECLARED                                                                         |  7030    16
    73       |#endif                                                                                           |  7031    16
    74       |                                                                                                 |  7032    16
    75       |#ifndef _SIZE_T_DECLARED                                                                         |  7033    16
    76       |typedef __size_t        size_t;                                                                  |  7034    16
    77       |#define _SIZE_T_DECLARED                                                                         |  7035    16
    78       |#endif                                                                                           |  7036    16
    79       |                                                                                                 |  7037    16
    80       |#if __POSIX_VISIBLE >= 199309                                                                    |  7038    16
    81       |/*                                                                                               |  7039    16
    82       | * New in POSIX 1003.1b-1993.                                                                    |  7040    16
    83       | */                                                                                              |  7041    16
    84       |#ifndef _CLOCKID_T_DECLARED                                                                      |  7042    16
    85       |typedef __clockid_t     clockid_t;                                                               |  7043    16
    86       |#define _CLOCKID_T_DECLARED                                                                      |  7044    16
    87       |#endif                                                                                           |  7045    16
    88       |                                                                                                 |  7046    16
    89       |#ifndef _TIMER_T_DECLARED                                                                        |  7047    16
    90       |typedef __timer_t       timer_t;                                                                 |  7048    16
    91       |#define _TIMER_T_DECLARED                                                                        |  7049    16
    92       |#endif                                                                                           |  7050    16
    93       |                                                                                                 |  7051    16
    94       |#include <sys/timespec.h>                                                                        |  7052    16
    95       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  7053    16
    96       |                                                                                                 |  7054    16
    97       |/* These macros are also in sys/time.h. */                                                       |  7055    16
    98       |#if !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112                                        |  7056    16
    99       |#define CLOCK_REALTIME  0                                                                        |  7057    16
   100       |#if 0                                                                                            |  7058    16
   101       |  /* only CLOCK_REALTIME exists in this implementation */                                        |  7059    16
   102       |#ifdef __BSD_VISIBLE                                                                             |  7060    16
   103       |#define CLOCK_VIRTUAL   1                                                                        |  7061    16
   104       |#define CLOCK_PROF      2                                                                        |  7062    16
   105       |#endif                                                                                           |  7063    16
   106       |#define CLOCK_MONOTONIC 4                                                                        |  7064    16
   107       |#endif /* 0 */                                                                                   |  7065    16
   108       |#endif /* !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112 */                               |  7066    16
   109       |                                                                                                 |  7067    16
   110       |#if !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112                                         |  7068    16
   111       |#if __BSD_VISIBLE                                                                                |  7069    16
   112       |#define TIMER_RELTIME   0x0     /* relative timer */                                             |  7070    16
   113       |#endif                                                                                           |  7071    16
   114       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             |  7072    16
   115       |#endif /* !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112 */                                |  7073    16
   116       |                                                                                                 |  7074    16
   117       |struct tm {                                                                                      |  7075    16
   118       |        int     tm_sec;         /* seconds after the minute [0-60] */                            |  7076    16
   119       |        int     tm_min;         /* minutes after the hour [0-59] */                              |  7077    16
   120       |        int     tm_hour;        /* hours since midnight [0-23] */                                |  7078    16
   121       |        int     tm_mday;        /* day of the month [1-31] */                                    |  7079    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   137


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   122       |        int     tm_mon;         /* months since January [0-11] */                                |  7080    16
   123       |        int     tm_year;        /* years since 1900 */                                           |  7081    16
   124       |        int     tm_wday;        /* days since Sunday [0-6] */                                    |  7082    16
   125       |        int     tm_yday;        /* days since January 1 [0-365] */                               |  7083    16
   126       |        int     tm_isdst;       /* Daylight Savings Time flag */                                 |  7084    16
   127       |        long    tm_gmtoff;      /* offset from UTC in seconds */                                 |  7085    16
   128       |        char    *tm_zone;       /* timezone abbreviation */                                      |  7086    16
   129       |};                                                                                               |  7087    16
   130       |                                                                                                 |  7088    16
   131       |#if __POSIX_VISIBLE                                                                              |  7089    16
   132       |extern char *tzname[];                                                                           |  7090    16
   133       |#endif                                                                                           |  7091    16
   134       |                                                                                                 |  7092    16
   135       |__BEGIN_DECLS                                                                                    |  7093    16
   136       |char *asctime(const struct tm *);                                                                |  7094    16
   137       |clock_t clock(void);                                                                             |  7095    16
   138       |char *ctime(const time_t *);                                                                     |  7096    16
   139       |double difftime(time_t, time_t);                                                                 |  7097    16
   140       |/* XXX missing: getdate() */                                                                     |  7098    16
   141       |struct tm *gmtime(const time_t *);                                                               |  7099    16
   142       |#pragma map (localtime, "LC@LTIME")                                                              |  7100    16
   143       |struct tm *localtime(const time_t *);                                                            |  7101    16
   144       |time_t mktime(struct tm *);                                                                      |  7102    16
   145       |size_t strftime(char * __restrict, size_t, const char * __restrict,                              |  7103    16
   146       |    const struct tm * __restrict);                                                               |  7104    16
   147       |time_t time(time_t *);                                                                           |  7105    16
   148       |                                                                                                 |  7106    16
   149       |#if __POSIX_VISIBLE                                                                              |  7107    16
   150       |void tzset(void);                                                                                |  7108    16
   151       |#endif                                                                                           |  7109    16
   152       |                                                                                                 |  7110    16
   153       |#if __POSIX_VISIBLE >= 199309                                                                    |  7111    16
   154       |#pragma map(clock_getres, "@@CLKRES")                                                            |  7112    16
   155       |int clock_getres(clockid_t, struct timespec *);                                                  |  7113    16
   156       |#pragma map(clock_gettime, "@@CLKGET")                                                           |  7114    16
   157       |int clock_gettime(clockid_t, struct timespec *);                                                 |  7115    16
   158       |#pragma map(clock_settime, "@@CLKSET")                                                           |  7116    16
   159       |int clock_settime(clockid_t, const struct timespec *);                                           |  7117    16
   160       |#pragma map(nanosleep,"@@NNOSLP")                                                                |  7118    16
   161       |int nanosleep(const struct timespec *, struct timespec *);                                       |  7119    16
   162       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  7120    16
   163       |                                                                                                 |  7121    16
   164       |#if __POSIX_VISIBLE >= 199506                                                                    |  7122    16
   165       |#pragma map(asctime_r, "@@ASCT@R")                                                               |  7123    16
   166       |char *asctime_r(const struct tm *, char *);                                                      |  7124    16
   167       |#pragma map(ctime_r, "@@CTME@R")                                                                 |  7125    16
   168       |char *ctime_r(const time_t *, char *);                                                           |  7126    16
   169       |#pragma map(gmtime_r, "@@GMTM@R")                                                                |  7127    16
   170       |struct tm *gmtime_r(const time_t *, struct tm *);                                                |  7128    16
   171       |#pragma map(localtime_r, "@@LCLT@R")                                                             |  7129    16
   172       |struct tm *localtime_r(const time_t *, struct tm *);                                             |  7130    16
   173       |#endif                                                                                           |  7131    16
   174       |                                                                                                 |  7132    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   138


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   175       |#if __XSI_VISIBLE                                                                                |  7133    16
   176       |char *strptime(const char * __restrict, const char * __restrict,                                 |  7134    16
   177       |    struct tm * __restrict);                                                                     |  7135    16
   178       |#endif                                                                                           |  7136    16
   179       |                                                                                                 |  7137    16
   180       |#if __BSD_VISIBLE                                                                                |  7138    16
   181       |char *timezone(int, int);       /* XXX XSI conflict */                                           |  7139    16
   182       |void tzsetwall(void);                                                                            |  7140    16
   183       |#pragma map (timelocal, "TIMELC@L")                                                              |  7141    16
   184       |time_t timelocal(struct tm * const);                                                             |  7142    16
   185       |time_t timegm(struct tm * const);                                                                |  7143    16
   186       |#endif /* __BSD_VISIBLE */                                                                       |  7144    16
   187       |__END_DECLS                                                                                      |  7145    16
   188       |                                                                                                 |  7146    16
   189       |#endif /* !_TIME_H_ */                                                                           |  7147    16
   190       |#pragma pack(reset)                                                                              |  7148    16
   306       |                                                                                                 |  7149    17
   307       |#include <sys/cdefs.h>                                                                           |  7150    17
     1       |/* release 2.25.00 */                                                                            |  7151     4
     2       |#pragma pack()                                                                                   |  7152     4
     3       |/*                                                                                               |  7153     4
     4       | * Copyright (c) 1991, 1993                                                                      |  7154     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  7155     4
     6       | *                                                                                               |  7156     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  7157     4
     8       | * Berkeley Software Design, Inc.                                                                |  7158     4
     9       | *                                                                                               |  7159     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  7160     4
    11       | * modification, are permitted provided that the following conditions                            |  7161     4
    12       | * are met:                                                                                      |  7162     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  7163     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  7164     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  7165     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  7166     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  7167     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  7168     4
    19       | *    must display the following acknowledgement:                                                |  7169     4
    20       | *      This product includes software developed by the University of                            |  7170     4
    21       | *      California, Berkeley and its contributors.                                               |  7171     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  7172     4
    23       | *    may be used to endorse or promote products derived from this software                      |  7173     4
    24       | *    without specific prior written permission.                                                 |  7174     4
    25       | *                                                                                               |  7175     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  7176     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  7177     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7178     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  7179     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  7180     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  7181     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  7182     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  7183     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  7184     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  7185     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   139


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       | * SUCH DAMAGE.                                                                                  |  7186     4
    37       | *                                                                                               |  7187     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  7188     4
    39       | */                                                                                              |  7189     4
    40       |                                                                                                 |  7190     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  7191     4
    42       |#define _SYS_CDEFS_H_                                                                            |  7192     4
    43       |                                                                                                 |  7193     4
    44       |#if defined(__cplusplus)                                                                         |  7194     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  7195     4
    46       |#define __END_DECLS     }                                                                        |  7196     4
    47       |#else                                                                                            |  7197     4
    48       |#define __BEGIN_DECLS                                                                            |  7198     4
    49       |#define __END_DECLS                                                                              |  7199     4
    50       |#endif                                                                                           |  7200     4
    51       |                                                                                                 |  7201     4
    52       |/*                                                                                               |  7202     4
    53       | * This code has been put in place to help reduce the addition of                                |  7203     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  7204     4
    55       | * having a compiler-agnostic source tree.                                                       |  7205     4
    56       | */                                                                                              |  7206     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  7207     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  7208     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  7209     4
    60       |                                                                                                 |  7210     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  7211     4
    62       |                                                                                                 |  7212     4
    63       |                                                                                                 |  7213     4
    64       |/*                                                                                               |  7214     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  7215     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  7216     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  7217     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  7218     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  7219     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  7220     4
    71       | * this only works with ANSI C.                                                                  |  7221     4
    72       | *                                                                                               |  7222     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  7223     4
    74       | * first.  It is only available with ANSI C.                                                     |  7224     4
    75       | */                                                                                              |  7225     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  7226     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  7227     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  7228     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  7229     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  7230     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  7231     4
    82       |                                                                                                 |  7232     4
    83       |#define __const         const           /* define reserved names to standard */                  |  7233     4
    84       |#define __signed        signed                                                                   |  7234     4
    85       |#define __volatile      volatile                                                                 |  7235     4
    86       |#if defined(__cplusplus)                                                                         |  7236     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  7237     4
    88       |#else                                                                                            |  7238     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   140


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  7239     4
    90       |#endif /* !__cplusplus */                                                                        |  7240     4
    91       |                                                                                                 |  7241     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  7242     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  7243     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  7244     4
    95       |#define __STRING(x)     "x"                                                                      |  7245     4
    96       |                                                                                                 |  7246     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  7247     4
    98       |#define __inline                                                                                 |  7248     4
    99       |#define __signed                                                                                 |  7249     4
   100       |#define __volatile                                                                               |  7250     4
   101       |/*                                                                                               |  7251     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  7252     4
   103       | * deleted from the program and old programs will want them left alone.                          |  7253     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  7254     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  7255     4
   106       | */                                                                                              |  7256     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  7257     4
   108       |#define const                           /* delete ANSI C keywords */                             |  7258     4
   109       |#define inline                                                                                   |  7259     4
   110       |#define signed                                                                                   |  7260     4
   111       |#define volatile                                                                                 |  7261     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  7262     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  7263     4
   114       |                                                                                                 |  7264     4
   115       |/*                                                                                               |  7265     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  7266     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  7267     4
   118       | */                                                                                              |  7268     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  7269     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  7270     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  7271     4
   122       |#define __unused                                                                                 |  7272     4
   123       |#define __aligned(x)                                                                             |  7273     4
   124       |#define __section(x)                                                                             |  7274     4
   125       |#define __nonnull(x)                                                                             |  7275     4
   126       |#define __used                                                                                   |  7276     4
   127       |                                                                                                 |  7277     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  7278     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  7279     4
   130       |                                                                                                 |  7280     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  7281     4
   132       |#define __func__  NULL                                                                           |  7282     4
   133       |#endif                                                                                           |  7283     4
   134       |                                                                                                 |  7284     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  7285     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  7286     4
   137       |#endif                                                                                           |  7287     4
   138       |                                                                                                 |  7288     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  7289     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  7290     4
   141       | **/                                                                                             |  7291     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   141


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   142       |#ifndef __cplusplus                                                                              |  7292     4
   143       |#define __restrict __restrict__                                                                  |  7293     4
   144       |#else                                                                                            |  7294     4
   145       |/* Systems/C++ does not */                                                                       |  7295     4
   146       |#define __restrict                                                                               |  7296     4
   147       |#endif                                                                                           |  7297     4
   148       |                                                                                                 |  7298     4
   149       |/*                                                                                               |  7299     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  7300     4
   151       | */                                                                                              |  7301     4
   152       |#define __predict_true(exp)     (exp)                                                            |  7302     4
   153       |#define __predict_false(exp)    (exp)                                                            |  7303     4
   154       |                                                                                                 |  7304     4
   155       |                                                                                                 |  7305     4
   156       |/*                                                                                               |  7306     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  7307     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  7308     4
   159       | *                                                                                               |  7309     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  7310     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  7311     4
   162       | */                                                                                              |  7312     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  7313     4
   164       |#undef __offsetof                                                                                |  7314     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  7315     4
   166       |#endif                                                                                           |  7316     4
   167       |                                                                                                 |  7317     4
   168       |/*                                                                                               |  7318     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  7319     4
   170       | * or scanf-like arguments.                                                                      |  7320     4
   171       | */                                                                                              |  7321     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  7322     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  7323     4
   174       |#define __format_arg(fmtarg)                                                                     |  7324     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  7325     4
   176       |                                                                                                 |  7326     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  7327     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  7328     4
   179       |                                                                                                 |  7329     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  7330     4
   181       |#define __weak_reference(sym,alias)                                                              |  7331     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  7332     4
   183       |#define __warn_references(sym,msg)                                                               |  7333     4
   184       |                                                                                                 |  7334     4
   185       | /* This places the string into the resulting object.  It should */                              |  7335     4
   186       | /* probably become #pragma ident */                                                             |  7336     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  7337     4
   188       |                                                                                                 |  7338     4
   189       |#ifndef __RCSID                                                                                  |  7339     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  7340     4
   191       |#endif                                                                                           |  7341     4
   192       |                                                                                                 |  7342     4
   193       |/*                                                                                               |  7343     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  7344     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   142


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   195       | * Usage:                                                                                        |  7345     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  7346     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  7347     4
   198       | */                                                                                              |  7348     4
   199       |#ifndef __SYSCID                                                                                 |  7349     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  7350     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  7351     4
   202       |#else                                                                                            |  7352     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  7353     4
   204       |#endif                                                                                           |  7354     4
   205       |#endif                                                                                           |  7355     4
   206       |                                                                                                 |  7356     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  7357     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  7358     4
   209       |#endif                                                                                           |  7359     4
   210       |                                                                                                 |  7360     4
   211       |#ifndef __COPYRIGHT                                                                              |  7361     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  7362     4
   213       |#endif                                                                                           |  7363     4
   214       |                                                                                                 |  7364     4
   215       |                                                                                                 |  7365     4
   216       |#ifndef __DECONST                                                                                |  7366     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  7367     4
   218       |#endif                                                                                           |  7368     4
   219       |                                                                                                 |  7369     4
   220       |#ifndef __DEVOLATILE                                                                             |  7370     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  7371     4
   222       |#endif                                                                                           |  7372     4
   223       |                                                                                                 |  7373     4
   224       |#ifndef __DEQUALIFY                                                                              |  7374     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  7375     4
   226       |#endif                                                                                           |  7376     4
   227       |                                                                                                 |  7377     4
   228       |                                                                                                 |  7378     4
   229       |/*-                                                                                              |  7379     4
   230       | * The following definitions are an extension of the behavior originally                         |  7380     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  7381     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  7382     4
   233       | * header file is included.                                                                      |  7383     4
   234       | *                                                                                               |  7384     4
   235       | * Here's a quick run-down of the versions:                                                      |  7385     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  7386     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  7387     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  7388     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  7389     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  7390     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  7391     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  7392     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  7393     4
   244       | *                                                                                               |  7394     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  7395     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  7396     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  7397     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   143


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   248       | *                                                                                               |  7398     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  7399     4
   250       | */                                                                                              |  7400     4
   251       |                                                                                                 |  7401     4
   252       |/*                                                                                               |  7402     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  7403     4
   254       | * available. Also make them available when requested so.                                        |  7404     4
   255       | */                                                                                              |  7405     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  7406     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  7407     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  7408     4
   259       |#define __DF_VISIBLE    1                                                                        |  7409     4
   260       |#else                                                                                            |  7410     4
   261       |#define __DF_VISIBLE    0                                                                        |  7411     4
   262       |#endif                                                                                           |  7412     4
   263       |                                                                                                 |  7413     4
   264       |/*-                                                                                              |  7414     4
   265       | * The following definitions are an extension of the behavior originally                         |  7415     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  7416     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  7417     4
   268       | * header file is included.                                                                      |  7418     4
   269       | *                                                                                               |  7419     4
   270       | * Here's a quick run-down of the versions:                                                      |  7420     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  7421     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  7422     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  7423     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  7424     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  7425     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  7426     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  7427     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  7428     4
   279       | *                                                                                               |  7429     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  7430     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  7431     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  7432     4
   283       | *                                                                                               |  7433     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  7434     4
   285       | */                                                                                              |  7435     4
   286       |                                                                                                 |  7436     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  7437     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  7438     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  7439     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  7440     4
   291       |#endif                                                                                           |  7441     4
   292       |                                                                                                 |  7442     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  7443     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  7444     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  7445     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  7446     4
   297       |#endif                                                                                           |  7447     4
   298       |                                                                                                 |  7448     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  7449     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  7450     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   144


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  7451     4
   302       |#define __XSI_VISIBLE           700                                                              |  7452     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  7453     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  7454     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  7455     4
   306       |#define __XSI_VISIBLE           600                                                              |  7456     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  7457     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  7458     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  7459     4
   310       |#define __XSI_VISIBLE           500                                                              |  7460     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  7461     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  7462     4
   313       |#endif                                                                                           |  7463     4
   314       |#endif                                                                                           |  7464     4
   315       |                                                                                                 |  7465     4
   316       |/*                                                                                               |  7466     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  7467     4
   318       | * important.                                                                                    |  7468     4
   319       | */                                                                                              |  7469     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  7470     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  7471     4
   322       |#endif                                                                                           |  7472     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  7473     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  7474     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  7475     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  7476     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  7477     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  7478     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  7479     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  7480     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  7481     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  7482     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  7483     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  7484     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  7485     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  7486     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  7487     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  7488     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  7489     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  7490     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  7491     4
   342       |#else                                                                                            |  7492     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  7493     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  7494     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  7495     4
   346       |#else                                                                                            |  7496     4
   347       |/*-                                                                                              |  7497     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  7498     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  7499     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  7500     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  7501     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  7502     4
   353       | * a test program to print out the values.                                                       |  7503     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   145


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   354       | *                                                                                               |  7504     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  7505     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  7506     4
   357       | * environment (and in fact we will never get here).                                             |  7507     4
   358       | */                                                                                              |  7508     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  7509     4
   360       |#define __POSIX_VISIBLE         0                                                                |  7510     4
   361       |#define __XSI_VISIBLE           0                                                                |  7511     4
   362       |#define __BSD_VISIBLE           0                                                                |  7512     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  7513     4
   364       |#define __EXT1_VISIBLE          0                                                                |  7514     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  7515     4
   366       |#define __POSIX_VISIBLE         0                                                                |  7516     4
   367       |#define __XSI_VISIBLE           0                                                                |  7517     4
   368       |#define __BSD_VISIBLE           0                                                                |  7518     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  7519     4
   370       |#define __EXT1_VISIBLE          0                                                                |  7520     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  7521     4
   372       |#define __POSIX_VISIBLE         0                                                                |  7522     4
   373       |#define __XSI_VISIBLE           0                                                                |  7523     4
   374       |#define __BSD_VISIBLE           0                                                                |  7524     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  7525     4
   376       |#define __EXT1_VISIBLE          0                                                                |  7526     4
   377       |#else                           /* Default environment: show everything. */                      |  7527     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  7528     4
   379       |#define __XSI_VISIBLE           700                                                              |  7529     4
   380       |#define __BSD_VISIBLE           1                                                                |  7530     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  7531     4
   382       |#define __EXT1_VISIBLE          1                                                                |  7532     4
   383       |#endif                                                                                           |  7533     4
   384       |#endif                                                                                           |  7534     4
   385       |                                                                                                 |  7535     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  7536     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  7537     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  7538     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  7539     4
   390       |#define __EXT1_VISIBLE          1                                                                |  7540     4
   391       |#else                                                                                            |  7541     4
   392       |#define __EXT1_VISIBLE          0                                                                |  7542     4
   393       |#endif                                                                                           |  7543     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  7544     4
   395       |                                                                                                 |  7545     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  7546     4
   397       |#define __NO_TLS 1                                                                               |  7547     4
   398       |#endif                                                                                           |  7548     4
   399       |                                                                                                 |  7549     4
   400       |                                                                                                 |  7550     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  7551     4
   402       |#define __FBSDID(x)                                                                              |  7552     4
   403       |                                                                                                 |  7553     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  7554     4
   405       |#pragma pack(reset)                                                                              |  7555     4
   308       |                                                                                                 |  7556    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   146


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   309       |__BEGIN_DECLS                                                                                    |  7557    17
   309       +                                                                                                 +  7557    17
   310       |int     adjtime(const struct timeval *, struct timeval *);                                       |  7558    17
   311       |int     futimes(int, const struct timeval *);                                                    |  7559    17
   312       |#pragma map (getitimer, "@@GITMR")                                                               |  7560    17
   313       |int     getitimer(int, struct itimerval *);                                                      |  7561    17
   314       |#pragma map (gettimeofday,"GETTFD@Y")                                                            |  7562    17
   315       |int     gettimeofday(struct timeval *, struct timezone *);                                       |  7563    17
   316       |int     lutimes(const char *, const struct timeval *);                                           |  7564    17
   317       |#pragma map (setitimer, "@@SITMR")                                                               |  7565    17
   318       |int     setitimer(int, const struct itimerval *, struct itimerval *);                            |  7566    17
   319       |int     settimeofday(const struct timeval *, const struct timezone *);                           |  7567    17
   320       |int     utimes(const char *, const struct timeval *);                                            |  7568    17
   321       |__END_DECLS                                                                                      |  7569    17
   321       +                                                                                                 +  7569    17
   322       |                                                                                                 |  7570    17
   323       |#endif /* !_KERNEL */                                                                            |  7571    17
   324       |                                                                                                 |  7572    17
   325       |#endif /* !_SYS_TIME_H_ */                                                                       |  7573    17
   326       |#pragma pack(reset)                                                                              |  7574    17
    25       |#else                                                                                            |  7575     2
    26       |#define INLINE                                                                                   |  7576     2
    27       |#endif                                                                                           |  7577     2
    28       |                                                                                                 |  7578     2
    29       |static unsigned char E2U[256] =                                                                  |  7579     2
    30       |{                                                                                                |  7580     2
    31       |    0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F,0x97,                                                |  7581     2
    32       |    0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,                                                |  7582     2
    33       |    0x12,0x13,0x9D,0x85,0x08,0x87,0x18,0x19,0x92,                                                |  7583     2
    34       |    0x8F,0x1C,0x1D,0x1E,0x1F,0x80,0x81,0x82,0x83,                                                |  7584     2
    35       |    0x84,0x0A,0x17,0x1B,0x88,0x89,0x8A,0x8B,0x8C,                                                |  7585     2
    36       |    0x05,0x06,0x07,0x90,0x91,0x16,0x93,0x94,0x95,                                                |  7586     2
    37       |    0x96,0x04,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,                                                |  7587     2
    38       |    0x1A,0x20,0xA0,0xE2,0xE4,0xE0,0xE1,0xE3,0xE5,                                                |  7588     2
    39       |    0xE7,0xF1,0xA2,0x2E,0x3C,0x28,0x2B,0x7C,0x26,                                                |  7589     2
    40       |    0xE9,0xEA,0xEB,0xE8,0xED,0xEE,0xEF,0xEC,0xDF,                                                |  7590     2
    41       |    0x21,0x24,0x2A,0x29,0x3B,0x5E,0x2D,0x2F,0xC2,                                                |  7591     2
    42       |    0xC4,0xC0,0xC1,0xC3,0xC5,0xC7,0xD1,0xA6,0x2C,                                                |  7592     2
    43       |    0x25,0x5F,0x3E,0x3F,0xF8,0xC9,0xCA,0xCB,0xC8,                                                |  7593     2
    44       |    0xCD,0xCE,0xCF,0xCC,0x60,0x3A,0x23,0x40,0x27,                                                |  7594     2
    45       |    0x3D,0x22,0xD8,0x61,0x62,0x63,0x64,0x65,0x66,                                                |  7595     2
    46       |    0x67,0x68,0x69,0xAB,0xBB,0xF0,0xFD,0xFE,0xB1,                                                |  7596     2
    47       |    0xB0,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,                                                |  7597     2
    48       |    0x72,0xAA,0xBA,0xE6,0xB8,0xC6,0xA4,0xB5,0x7E,                                                |  7598     2
    49       |    0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xA1,                                                |  7599     2
    50       |    0xBF,0xD0,0x5B,0xDE,0xAE,0xAC,0xA3,0xA5,0xB7,                                                |  7600     2
    51       |    0xA9,0xA7,0xB6,0xBC,0xBD,0xBE,0xDD,0xA8,0xAF,                                                |  7601     2
    52       |    0x5D,0xB4,0xD7,0x7B,0x41,0x42,0x43,0x44,0x45,                                                |  7602     2
    53       |    0x46,0x47,0x48,0x49,0xAD,0xF4,0xF6,0xF2,0xF3,                                                |  7603     2
    54       |    0xF5,0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,                                                |  7604     2
    55       |    0x51,0x52,0xB9,0xFB,0xFC,0xF9,0xFA,0xFF,0x5C,                                                |  7605     2
    56       |    0xF7,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,                                                |  7606     2
    57       |    0xB2,0xD4,0xD6,0xD2,0xD3,0xD5,0x30,0x31,0x32,                                                |  7607     2
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   147


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    58       |    0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xB3,0xDB,                                                |  7608     2
    59       |    0xDC,0xD9,0xDA,0x9F                                                                          |  7609     2
    60       |};                                                                                               |  7610     2
    61       |                                                                                                 |  7611     2
    62       |static unsigned char U2E[256] =                                                                  |  7612     2
    63       |{                                                                                                |  7613     2
    64       |    0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,                                                |  7614     2
    65       |    0x05,0x15,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,                                                |  7615     2
    66       |    0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x3F,                                                |  7616     2
    67       |    0x27,0x1C,0x1D,0x1E,0x1F,0x40,0x5A,0x7F,0x7B,                                                |  7617     2
    68       |    0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,                                                |  7618     2
    69       |    0x60,0x4B,0x61,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,                                                |  7619     2
    70       |    0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,                                                |  7620     2
    71       |    0x6F,0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,                                                |  7621     2
    72       |    0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,                                                |  7622     2
    73       |    0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,                                                |  7623     2
    74       |    0xE9,0xAD,0xE0,0xBD,0x5F,0x6D,0x79,0x81,0x82,                                                |  7624     2
    75       |    0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,                                                |  7625     2
    76       |    0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xA2,0xA3,                                                |  7626     2
    77       |    0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,                                                |  7627     2
    78       |    0xA1,0x07,0x20,0x21,0x22,0x23,0x24,0x25,0x06,                                                |  7628     2
    79       |    0x17,0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B,                                                |  7629     2
    80       |    0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08,0x38,                                                |  7630     2
    81       |    0x39,0x3A,0x3B,0x04,0x14,0x3E,0xFF,0x80,0x00,                                                |  7631     2
    82       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7632     2
    83       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7633     2
    84       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7634     2
    85       |    0x00,0x00,0x00,0x8A,0x00,0x00,0x00,0x00,0x00,                                                |  7635     2
    86       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7636     2
    87       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7637     2
    88       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8B,                                                |  7638     2
    89       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7639     2
    90       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7640     2
    91       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7641     2
    92       |    0x00,0x00,0x00,0x00                                                                          |  7642     2
    93       |};                                                                                               |  7643     2
    94       |                                                                                                 |  7644     2
    95       |static INLINE int ebcdic_2_utf8(unsigned char* out, size_t* outlen, const unsigned char* in, size|  7645     2
    95       +_t* inlen)                                                                                       +  7645     2
    95       +static __inline__ int ebcdic_2_utf8(unsigned char* out, size_t* outlen, const unsigned char* in, +  7645     2
    95       +size_t* inlen)                                                                                   +  7645     2
    96       |{                                                                                                |  7646     2
    97       |    const unsigned char* outstart = out;                                                         |  7647     2
    98       |    const unsigned char* base = in;                                                              |  7648     2
    99       |    const unsigned char* processed = in;                                                         |  7649     2
   100       |    const unsigned char* inend = in + (*inlen);                                                  |  7650     2
   101       |    const unsigned char* outend = out + (*outlen);                                               |  7651     2
   102       |    unsigned char c;                                                                             |  7652     2
   103       |                                                                                                 |  7653     2
   104       |    while ((in < inend) && ((out - outstart) < *outlen)) {                                       |  7654     2
   105       |        c = *in++;                                                                               |  7655     2
   106       |        if (c > 0xFF)                                                                            |  7656     2
   107       |        {                                                                                        |  7657     2
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   148


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   108       |            *outlen = out - outstart;                                                            |  7658     2
   109       |            *inlen = processed - base;                                                           |  7659     2
   110       |            return(-1);                                                                          |  7660     2
   111       |        }                                                                                        |  7661     2
   112       |                                                                                                 |  7662     2
   113       |        if (out >= outend)                                                                       |  7663     2
   114       |            break;                                                                               |  7664     2
   115       |                                                                                                 |  7665     2
   116       |        *out++ = E2U[c];                                                                         |  7666     2
   117       |        processed = (unsigned char*)in;                                                          |  7667     2
   118       |                                                                                                 |  7668     2
   119       |    }                                                                                            |  7669     2
   120       |                                                                                                 |  7670     2
   121       |    *outlen = out - outstart;                                                                    |  7671     2
   122       |    *inlen = processed - base;                                                                   |  7672     2
   123       |    return(0);                                                                                   |  7673     2
   124       |}                                                                                                |  7674     2
   125       |                                                                                                 |  7675     2
   126       |static INLINE int utf8_2_ebcdic(unsigned char* out, size_t* outlen, const unsigned char* in, size|  7676     2
   126       +_t* inlen)                                                                                       +  7676     2
   126       +static __inline__ int utf8_2_ebcdic(unsigned char* out, size_t* outlen, const unsigned char* in, +  7676     2
   126       +size_t* inlen)                                                                                   +  7676     2
   127       |{                                                                                                |  7677     2
   128       |    const unsigned char* outstart = out;                                                         |  7678     2
   129       |    const unsigned char* base = in;                                                              |  7679     2
   130       |    const unsigned char* processed = in;                                                         |  7680     2
   131       |    const unsigned char* inend = in + (*inlen);                                                  |  7681     2
   132       |    const unsigned char* outend = out + (*outlen);                                               |  7682     2
   133       |    unsigned char c;                                                                             |  7683     2
   134       |                                                                                                 |  7684     2
   135       |    while ((in < inend) && ((out - outstart) < *outlen)) {                                       |  7685     2
   136       |        c = *in++;                                                                               |  7686     2
   137       |        if (c > 0xFF)                                                                            |  7687     2
   138       |        {                                                                                        |  7688     2
   139       |            *outlen = out - outstart;                                                            |  7689     2
   140       |            *inlen = processed - base;                                                           |  7690     2
   141       |            return(-1);                                                                          |  7691     2
   142       |        }                                                                                        |  7692     2
   143       |                                                                                                 |  7693     2
   144       |        if (out >= outend)                                                                       |  7694     2
   145       |            break;                                                                               |  7695     2
   146       |                                                                                                 |  7696     2
   147       |        *out++ = U2E[c];                                                                         |  7697     2
   148       |        processed = (unsigned char*)in;                                                          |  7698     2
   149       |    }                                                                                            |  7699     2
   150       |                                                                                                 |  7700     2
   151       |    *outlen = out - outstart;                                                                    |  7701     2
   152       |    *inlen = processed - base;                                                                   |  7702     2
   153       |    return(0);                                                                                   |  7703     2
   154       |}                                                                                                |  7704     2
   155       |                                                                                                 |  7705     2
   156       |                                                                                                 |  7706     2
   157       |#endif /* sysc_h */                                                                              |  7707     2
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   149


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/*                                                                                               |  7708     1
     2       |    LZ4 HC - High Compression Mode of LZ4                                                        |  7709     1
     3       |    Copyright (C) 2011-2017, Yann Collet.                                                        |  7710     1
     4       |                                                                                                 |  7711     1
     5       |    BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)                    |  7712     1
     6       |                                                                                                 |  7713     1
     7       |    Redistribution and use in source and binary forms, with or without                           |  7714     1
     8       |    modification, are permitted provided that the following conditions are                       |  7715     1
     9       |    met:                                                                                         |  7716     1
    10       |                                                                                                 |  7717     1
    11       |    * Redistributions of source code must retain the above copyright                             |  7718     1
    12       |    notice, this list of conditions and the following disclaimer.                                |  7719     1
    13       |    * Redistributions in binary form must reproduce the above                                    |  7720     1
    14       |    copyright notice, this list of conditions and the following disclaimer                       |  7721     1
    15       |    in the documentation and/or other materials provided with the                                |  7722     1
    16       |    distribution.                                                                                |  7723     1
    17       |                                                                                                 |  7724     1
    18       |    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS                          |  7725     1
    19       |    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT                            |  7726     1
    20       |    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR                        |  7727     1
    21       |    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT                         |  7728     1
    22       |    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                        |  7729     1
    23       |    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                             |  7730     1
    24       |    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                        |  7731     1
    25       |    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                        |  7732     1
    26       |    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                          |  7733     1
    27       |    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE                        |  7734     1
    28       |    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                         |  7735     1
    29       |                                                                                                 |  7736     1
    30       |    You can contact the author at :                                                              |  7737     1
    31       |       - LZ4 source repository : https://github.com/lz4/lz4                                      |  7738     1
    32       |       - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c                         |  7739     1
    33       |*/                                                                                               |  7740     1
    34       |/* note : lz4hc is not an independent module, it requires lz4.h/lz4.c for proper compilation */  |  7741     1
    35       |                                                                                                 |  7742     1
    36       |                                                                                                 |  7743     1
    37       |/* *************************************                                                         |  7744     1
    38       |*  Tuning Parameter                                                                              |  7745     1
    39       |***************************************/                                                         |  7746     1
    40       |                                                                                                 |  7747     1
    41       |/*! HEAPMODE :                                                                                   |  7748     1
    42       | *  Select how default compression function will allocate workplace memory,                      |  7749     1
    43       | *  in stack (0:fastest), or in heap (1:requires malloc()).                                      |  7750     1
    44       | *  Since workplace is rather large, heap mode is recommended.                                   |  7751     1
    45       | */                                                                                              |  7752     1
    46       |#ifndef LZ4HC_HEAPMODE                                                                           |  7753     1
    47       |#  define LZ4HC_HEAPMODE 1                                                                       |  7754     1
    48       |#endif                                                                                           |  7755     1
    49       |                                                                                                 |  7756     1
    50       |                                                                                                 |  7757     1
    51       |/*===    Dependency    ===*/                                                                     |  7758     1
    52       |#define LZ4_HC_STATIC_LINKING_ONLY                                                               |  7759     1
    53       |#include "lz4hc.h"                                                                               |  7760     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   150


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/*                                                                                               |  7761    18
     2       |   LZ4 HC - High Compression Mode of LZ4                                                         |  7762    18
     3       |   Header File                                                                                   |  7763    18
     4       |   Copyright (C) 2011-2017, Yann Collet.                                                         |  7764    18
     5       |   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)                     |  7765    18
     6       |                                                                                                 |  7766    18
     7       |   Redistribution and use in source and binary forms, with or without                            |  7767    18
     8       |   modification, are permitted provided that the following conditions are                        |  7768    18
     9       |   met:                                                                                          |  7769    18
    10       |                                                                                                 |  7770    18
    11       |       * Redistributions of source code must retain the above copyright                          |  7771    18
    12       |   notice, this list of conditions and the following disclaimer.                                 |  7772    18
    13       |       * Redistributions in binary form must reproduce the above                                 |  7773    18
    14       |   copyright notice, this list of conditions and the following disclaimer                        |  7774    18
    15       |   in the documentation and/or other materials provided with the                                 |  7775    18
    16       |   distribution.                                                                                 |  7776    18
    17       |                                                                                                 |  7777    18
    18       |   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS                           |  7778    18
    19       |   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT                             |  7779    18
    20       |   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR                         |  7780    18
    21       |   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT                          |  7781    18
    22       |   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                         |  7782    18
    23       |   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                              |  7783    18
    24       |   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                         |  7784    18
    25       |   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  7785    18
    26       |   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  7786    18
    27       |   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE                         |  7787    18
    28       |   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          |  7788    18
    29       |                                                                                                 |  7789    18
    30       |   You can contact the author at :                                                               |  7790    18
    31       |   - LZ4 source repository : https://github.com/lz4/lz4                                          |  7791    18
    32       |   - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c                             |  7792    18
    33       |*/                                                                                               |  7793    18
    34       |#ifndef LZ4_HC_H_19834876238432                                                                  |  7794    18
    35       |#define LZ4_HC_H_19834876238432                                                                  |  7795    18
    36       |                                                                                                 |  7796    18
    37       |#if defined (__cplusplus)                                                                        |  7797    18
    38       |extern "C" {                                                                                     |  7798    18
    39       |#endif                                                                                           |  7799    18
    40       |                                                                                                 |  7800    18
    41       |/* --- Dependency --- */                                                                         |  7801    18
    42       |/* note : lz4hc requires lz4.h/lz4.c for compilation */                                          |  7802    18
    43       |#include "lz4.h"   /* stddef, LZ4LIB_API, LZ4_DEPRECATED */                                      |  7803    18
     1       |/*                                                                                               |  7804    19
     2       | *  LZ4 - Fast LZ compression algorithm                                                          |  7805    19
     3       | *  Header File                                                                                  |  7806    19
     4       | *  Copyright (C) 2011-present, Yann Collet.                                                     |  7807    19
     5       |                                                                                                 |  7808    19
     6       |   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)                     |  7809    19
     7       |                                                                                                 |  7810    19
     8       |   Redistribution and use in source and binary forms, with or without                            |  7811    19
     9       |   modification, are permitted provided that the following conditions are                        |  7812    19
    10       |   met:                                                                                          |  7813    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   151


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    11       |                                                                                                 |  7814    19
    12       |       * Redistributions of source code must retain the above copyright                          |  7815    19
    13       |   notice, this list of conditions and the following disclaimer.                                 |  7816    19
    14       |       * Redistributions in binary form must reproduce the above                                 |  7817    19
    15       |   copyright notice, this list of conditions and the following disclaimer                        |  7818    19
    16       |   in the documentation and/or other materials provided with the                                 |  7819    19
    17       |   distribution.                                                                                 |  7820    19
    18       |                                                                                                 |  7821    19
    19       |   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS                           |  7822    19
    20       |   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT                             |  7823    19
    21       |   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR                         |  7824    19
    22       |   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT                          |  7825    19
    23       |   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                         |  7826    19
    24       |   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                              |  7827    19
    25       |   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                         |  7828    19
    26       |   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  7829    19
    27       |   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  7830    19
    28       |   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE                         |  7831    19
    29       |   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          |  7832    19
    30       |                                                                                                 |  7833    19
    31       |   You can contact the author at :                                                               |  7834    19
    32       |    - LZ4 homepage : http://www.lz4.org                                                          |  7835    19
    33       |    - LZ4 source repository : https://github.com/lz4/lz4                                         |  7836    19
    34       |*/                                                                                               |  7837    19
    35       |#if defined (__cplusplus)                                                                        |  7838    19
    36       |extern "C" {                                                                                     |  7839    19
    37       |#endif                                                                                           |  7840    19
    38       |                                                                                                 |  7841    19
    39       |#ifndef LZ4_H_2983827168210                                                                      |  7842    19
    40       |#define LZ4_H_2983827168210                                                                      |  7843    19
    41       |                                                                                                 |  7844    19
    42       |/* --- Dependency --- */                                                                         |  7845    19
    43       |#include <stddef.h>   /* size_t */                                                               |  7846    19
     1       |/* release 2.25.00 */                                                                            |  7847    20
     2       |#pragma pack()                                                                                   |  7848    20
     3       |/*-                                                                                              |  7849    20
     4       | * Copyright (c) 1990, 1993                                                                      |  7850    20
     5       | *      The Regents of the University of California.  All rights reserved.                       |  7851    20
     6       | *                                                                                               |  7852    20
     7       | * Redistribution and use in source and binary forms, with or without                            |  7853    20
     8       | * modification, are permitted provided that the following conditions                            |  7854    20
     9       | * are met:                                                                                      |  7855    20
    10       | * 1. Redistributions of source code must retain the above copyright                             |  7856    20
    11       | *    notice, this list of conditions and the following disclaimer.                              |  7857    20
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  7858    20
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  7859    20
    14       | *    documentation and/or other materials provided with the distribution.                       |  7860    20
    15       | * 3. All advertising materials mentioning features or use of this software                      |  7861    20
    16       | *    must display the following acknowledgement:                                                |  7862    20
    17       | *      This product includes software developed by the University of                            |  7863    20
    18       | *      California, Berkeley and its contributors.                                               |  7864    20
    19       | * 4. Neither the name of the University nor the names of its contributors                       |  7865    20
    20       | *    may be used to endorse or promote products derived from this software                      |  7866    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   152


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    21       | *    without specific prior written permission.                                                 |  7867    20
    22       | *                                                                                               |  7868    20
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  7869    20
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  7870    20
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7871    20
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  7872    20
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  7873    20
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  7874    20
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  7875    20
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  7876    20
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  7877    20
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  7878    20
    33       | * SUCH DAMAGE.                                                                                  |  7879    20
    34       | *                                                                                               |  7880    20
    35       | *      @(#)stddef.h    8.1 (Berkeley) 6/2/93                                                    |  7881    20
    36       | *                                                                                               |  7882    20
    37       | */                                                                                              |  7883    20
    38       |                                                                                                 |  7884    20
    39       |#ifndef _STDDEF_H_                                                                               |  7885    20
    40       |#define _STDDEF_H_                                                                               |  7886    20
    41       |                                                                                                 |  7887    20
    42       |#include <sys/cdefs.h>                                                                           |  7888    20
     1       |/* release 2.25.00 */                                                                            |  7889     4
     2       |#pragma pack()                                                                                   |  7890     4
     3       |/*                                                                                               |  7891     4
     4       | * Copyright (c) 1991, 1993                                                                      |  7892     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  7893     4
     6       | *                                                                                               |  7894     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  7895     4
     8       | * Berkeley Software Design, Inc.                                                                |  7896     4
     9       | *                                                                                               |  7897     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  7898     4
    11       | * modification, are permitted provided that the following conditions                            |  7899     4
    12       | * are met:                                                                                      |  7900     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  7901     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  7902     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  7903     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  7904     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  7905     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  7906     4
    19       | *    must display the following acknowledgement:                                                |  7907     4
    20       | *      This product includes software developed by the University of                            |  7908     4
    21       | *      California, Berkeley and its contributors.                                               |  7909     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  7910     4
    23       | *    may be used to endorse or promote products derived from this software                      |  7911     4
    24       | *    without specific prior written permission.                                                 |  7912     4
    25       | *                                                                                               |  7913     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  7914     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  7915     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7916     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  7917     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  7918     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  7919     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   153


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  7920     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  7921     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  7922     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  7923     4
    36       | * SUCH DAMAGE.                                                                                  |  7924     4
    37       | *                                                                                               |  7925     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  7926     4
    39       | */                                                                                              |  7927     4
    40       |                                                                                                 |  7928     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  7929     4
    42       |#define _SYS_CDEFS_H_                                                                            |  7930     4
    43       |                                                                                                 |  7931     4
    44       |#if defined(__cplusplus)                                                                         |  7932     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  7933     4
    46       |#define __END_DECLS     }                                                                        |  7934     4
    47       |#else                                                                                            |  7935     4
    48       |#define __BEGIN_DECLS                                                                            |  7936     4
    49       |#define __END_DECLS                                                                              |  7937     4
    50       |#endif                                                                                           |  7938     4
    51       |                                                                                                 |  7939     4
    52       |/*                                                                                               |  7940     4
    53       | * This code has been put in place to help reduce the addition of                                |  7941     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  7942     4
    55       | * having a compiler-agnostic source tree.                                                       |  7943     4
    56       | */                                                                                              |  7944     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  7945     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  7946     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  7947     4
    60       |                                                                                                 |  7948     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  7949     4
    62       |                                                                                                 |  7950     4
    63       |                                                                                                 |  7951     4
    64       |/*                                                                                               |  7952     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  7953     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  7954     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  7955     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  7956     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  7957     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  7958     4
    71       | * this only works with ANSI C.                                                                  |  7959     4
    72       | *                                                                                               |  7960     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  7961     4
    74       | * first.  It is only available with ANSI C.                                                     |  7962     4
    75       | */                                                                                              |  7963     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  7964     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  7965     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  7966     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  7967     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  7968     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  7969     4
    82       |                                                                                                 |  7970     4
    83       |#define __const         const           /* define reserved names to standard */                  |  7971     4
    84       |#define __signed        signed                                                                   |  7972     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   154


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    85       |#define __volatile      volatile                                                                 |  7973     4
    86       |#if defined(__cplusplus)                                                                         |  7974     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  7975     4
    88       |#else                                                                                            |  7976     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  7977     4
    90       |#endif /* !__cplusplus */                                                                        |  7978     4
    91       |                                                                                                 |  7979     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  7980     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  7981     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  7982     4
    95       |#define __STRING(x)     "x"                                                                      |  7983     4
    96       |                                                                                                 |  7984     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  7985     4
    98       |#define __inline                                                                                 |  7986     4
    99       |#define __signed                                                                                 |  7987     4
   100       |#define __volatile                                                                               |  7988     4
   101       |/*                                                                                               |  7989     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  7990     4
   103       | * deleted from the program and old programs will want them left alone.                          |  7991     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  7992     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  7993     4
   106       | */                                                                                              |  7994     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  7995     4
   108       |#define const                           /* delete ANSI C keywords */                             |  7996     4
   109       |#define inline                                                                                   |  7997     4
   110       |#define signed                                                                                   |  7998     4
   111       |#define volatile                                                                                 |  7999     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  8000     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  8001     4
   114       |                                                                                                 |  8002     4
   115       |/*                                                                                               |  8003     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  8004     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  8005     4
   118       | */                                                                                              |  8006     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  8007     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  8008     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  8009     4
   122       |#define __unused                                                                                 |  8010     4
   123       |#define __aligned(x)                                                                             |  8011     4
   124       |#define __section(x)                                                                             |  8012     4
   125       |#define __nonnull(x)                                                                             |  8013     4
   126       |#define __used                                                                                   |  8014     4
   127       |                                                                                                 |  8015     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  8016     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  8017     4
   130       |                                                                                                 |  8018     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  8019     4
   132       |#define __func__  NULL                                                                           |  8020     4
   133       |#endif                                                                                           |  8021     4
   134       |                                                                                                 |  8022     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  8023     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  8024     4
   137       |#endif                                                                                           |  8025     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   155


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   138       |                                                                                                 |  8026     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  8027     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  8028     4
   141       | **/                                                                                             |  8029     4
   142       |#ifndef __cplusplus                                                                              |  8030     4
   143       |#define __restrict __restrict__                                                                  |  8031     4
   144       |#else                                                                                            |  8032     4
   145       |/* Systems/C++ does not */                                                                       |  8033     4
   146       |#define __restrict                                                                               |  8034     4
   147       |#endif                                                                                           |  8035     4
   148       |                                                                                                 |  8036     4
   149       |/*                                                                                               |  8037     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  8038     4
   151       | */                                                                                              |  8039     4
   152       |#define __predict_true(exp)     (exp)                                                            |  8040     4
   153       |#define __predict_false(exp)    (exp)                                                            |  8041     4
   154       |                                                                                                 |  8042     4
   155       |                                                                                                 |  8043     4
   156       |/*                                                                                               |  8044     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  8045     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  8046     4
   159       | *                                                                                               |  8047     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  8048     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  8049     4
   162       | */                                                                                              |  8050     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  8051     4
   164       |#undef __offsetof                                                                                |  8052     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  8053     4
   166       |#endif                                                                                           |  8054     4
   167       |                                                                                                 |  8055     4
   168       |/*                                                                                               |  8056     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  8057     4
   170       | * or scanf-like arguments.                                                                      |  8058     4
   171       | */                                                                                              |  8059     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  8060     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  8061     4
   174       |#define __format_arg(fmtarg)                                                                     |  8062     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  8063     4
   176       |                                                                                                 |  8064     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  8065     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  8066     4
   179       |                                                                                                 |  8067     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  8068     4
   181       |#define __weak_reference(sym,alias)                                                              |  8069     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  8070     4
   183       |#define __warn_references(sym,msg)                                                               |  8071     4
   184       |                                                                                                 |  8072     4
   185       | /* This places the string into the resulting object.  It should */                              |  8073     4
   186       | /* probably become #pragma ident */                                                             |  8074     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  8075     4
   188       |                                                                                                 |  8076     4
   189       |#ifndef __RCSID                                                                                  |  8077     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  8078     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   156


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   191       |#endif                                                                                           |  8079     4
   192       |                                                                                                 |  8080     4
   193       |/*                                                                                               |  8081     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  8082     4
   195       | * Usage:                                                                                        |  8083     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  8084     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  8085     4
   198       | */                                                                                              |  8086     4
   199       |#ifndef __SYSCID                                                                                 |  8087     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  8088     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  8089     4
   202       |#else                                                                                            |  8090     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  8091     4
   204       |#endif                                                                                           |  8092     4
   205       |#endif                                                                                           |  8093     4
   206       |                                                                                                 |  8094     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  8095     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  8096     4
   209       |#endif                                                                                           |  8097     4
   210       |                                                                                                 |  8098     4
   211       |#ifndef __COPYRIGHT                                                                              |  8099     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  8100     4
   213       |#endif                                                                                           |  8101     4
   214       |                                                                                                 |  8102     4
   215       |                                                                                                 |  8103     4
   216       |#ifndef __DECONST                                                                                |  8104     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  8105     4
   218       |#endif                                                                                           |  8106     4
   219       |                                                                                                 |  8107     4
   220       |#ifndef __DEVOLATILE                                                                             |  8108     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  8109     4
   222       |#endif                                                                                           |  8110     4
   223       |                                                                                                 |  8111     4
   224       |#ifndef __DEQUALIFY                                                                              |  8112     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  8113     4
   226       |#endif                                                                                           |  8114     4
   227       |                                                                                                 |  8115     4
   228       |                                                                                                 |  8116     4
   229       |/*-                                                                                              |  8117     4
   230       | * The following definitions are an extension of the behavior originally                         |  8118     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  8119     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  8120     4
   233       | * header file is included.                                                                      |  8121     4
   234       | *                                                                                               |  8122     4
   235       | * Here's a quick run-down of the versions:                                                      |  8123     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  8124     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  8125     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  8126     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  8127     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  8128     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  8129     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  8130     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  8131     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   157


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   244       | *                                                                                               |  8132     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  8133     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  8134     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  8135     4
   248       | *                                                                                               |  8136     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  8137     4
   250       | */                                                                                              |  8138     4
   251       |                                                                                                 |  8139     4
   252       |/*                                                                                               |  8140     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  8141     4
   254       | * available. Also make them available when requested so.                                        |  8142     4
   255       | */                                                                                              |  8143     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  8144     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  8145     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  8146     4
   259       |#define __DF_VISIBLE    1                                                                        |  8147     4
   260       |#else                                                                                            |  8148     4
   261       |#define __DF_VISIBLE    0                                                                        |  8149     4
   262       |#endif                                                                                           |  8150     4
   263       |                                                                                                 |  8151     4
   264       |/*-                                                                                              |  8152     4
   265       | * The following definitions are an extension of the behavior originally                         |  8153     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  8154     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  8155     4
   268       | * header file is included.                                                                      |  8156     4
   269       | *                                                                                               |  8157     4
   270       | * Here's a quick run-down of the versions:                                                      |  8158     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  8159     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  8160     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  8161     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  8162     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  8163     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  8164     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  8165     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  8166     4
   279       | *                                                                                               |  8167     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  8168     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  8169     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  8170     4
   283       | *                                                                                               |  8171     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  8172     4
   285       | */                                                                                              |  8173     4
   286       |                                                                                                 |  8174     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  8175     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  8176     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  8177     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  8178     4
   291       |#endif                                                                                           |  8179     4
   292       |                                                                                                 |  8180     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  8181     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  8182     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  8183     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  8184     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   158


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   297       |#endif                                                                                           |  8185     4
   298       |                                                                                                 |  8186     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  8187     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  8188     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  8189     4
   302       |#define __XSI_VISIBLE           700                                                              |  8190     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  8191     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  8192     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  8193     4
   306       |#define __XSI_VISIBLE           600                                                              |  8194     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  8195     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  8196     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  8197     4
   310       |#define __XSI_VISIBLE           500                                                              |  8198     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  8199     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  8200     4
   313       |#endif                                                                                           |  8201     4
   314       |#endif                                                                                           |  8202     4
   315       |                                                                                                 |  8203     4
   316       |/*                                                                                               |  8204     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  8205     4
   318       | * important.                                                                                    |  8206     4
   319       | */                                                                                              |  8207     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  8208     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  8209     4
   322       |#endif                                                                                           |  8210     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  8211     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  8212     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  8213     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  8214     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  8215     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  8216     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  8217     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  8218     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  8219     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  8220     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  8221     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  8222     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  8223     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  8224     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  8225     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  8226     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  8227     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  8228     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  8229     4
   342       |#else                                                                                            |  8230     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  8231     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  8232     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  8233     4
   346       |#else                                                                                            |  8234     4
   347       |/*-                                                                                              |  8235     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  8236     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  8237     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   159


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  8238     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  8239     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  8240     4
   353       | * a test program to print out the values.                                                       |  8241     4
   354       | *                                                                                               |  8242     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  8243     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  8244     4
   357       | * environment (and in fact we will never get here).                                             |  8245     4
   358       | */                                                                                              |  8246     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  8247     4
   360       |#define __POSIX_VISIBLE         0                                                                |  8248     4
   361       |#define __XSI_VISIBLE           0                                                                |  8249     4
   362       |#define __BSD_VISIBLE           0                                                                |  8250     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  8251     4
   364       |#define __EXT1_VISIBLE          0                                                                |  8252     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  8253     4
   366       |#define __POSIX_VISIBLE         0                                                                |  8254     4
   367       |#define __XSI_VISIBLE           0                                                                |  8255     4
   368       |#define __BSD_VISIBLE           0                                                                |  8256     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  8257     4
   370       |#define __EXT1_VISIBLE          0                                                                |  8258     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  8259     4
   372       |#define __POSIX_VISIBLE         0                                                                |  8260     4
   373       |#define __XSI_VISIBLE           0                                                                |  8261     4
   374       |#define __BSD_VISIBLE           0                                                                |  8262     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  8263     4
   376       |#define __EXT1_VISIBLE          0                                                                |  8264     4
   377       |#else                           /* Default environment: show everything. */                      |  8265     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  8266     4
   379       |#define __XSI_VISIBLE           700                                                              |  8267     4
   380       |#define __BSD_VISIBLE           1                                                                |  8268     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  8269     4
   382       |#define __EXT1_VISIBLE          1                                                                |  8270     4
   383       |#endif                                                                                           |  8271     4
   384       |#endif                                                                                           |  8272     4
   385       |                                                                                                 |  8273     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  8274     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  8275     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  8276     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  8277     4
   390       |#define __EXT1_VISIBLE          1                                                                |  8278     4
   391       |#else                                                                                            |  8279     4
   392       |#define __EXT1_VISIBLE          0                                                                |  8280     4
   393       |#endif                                                                                           |  8281     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  8282     4
   395       |                                                                                                 |  8283     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  8284     4
   397       |#define __NO_TLS 1                                                                               |  8285     4
   398       |#endif                                                                                           |  8286     4
   399       |                                                                                                 |  8287     4
   400       |                                                                                                 |  8288     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  8289     4
   402       |#define __FBSDID(x)                                                                              |  8290     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   160


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   403       |                                                                                                 |  8291     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  8292     4
   405       |#pragma pack(reset)                                                                              |  8293     4
    43       |#include <sys/_null.h>                                                                           |  8294    20
     1       |/* release 2.25.00 */                                                                            |  8295    15
     2       |#pragma pack()                                                                                   |  8296    15
     3       |/*-                                                                                              |  8297    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  8298    15
     5       | * All rights reserved.                                                                          |  8299    15
     6       | *                                                                                               |  8300    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  8301    15
     8       | * modification, are permitted provided that the following conditions                            |  8302    15
     9       | * are met:                                                                                      |  8303    15
    10       | *                                                                                               |  8304    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  8305    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  8306    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  8307    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  8308    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  8309    15
    16       | *                                                                                               |  8310    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  8311    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  8312    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  8313    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  8314    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  8315    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  8316    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  8317    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  8318    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  8319    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  8320    15
    27       | *                                                                                               |  8321    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  8322    15
    29       | */                                                                                              |  8323    15
    30       |                                                                                                 |  8324    15
    31       |#ifndef NULL                                                                                     |  8325    15
    32       |                                                                                                 |  8326    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  8327    15
    34       |#define NULL    ((void *)0)                                                                      |  8328    15
    35       |#else                                                                                            |  8329    15
    36       |#if defined(__LP64__)                                                                            |  8330    15
    37       |#define NULL    (0L)                                                                             |  8331    15
    38       |#else                                                                                            |  8332    15
    39       |#define NULL    0                                                                                |  8333    15
    40       |#endif  /* __LP64__ */                                                                           |  8334    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  8335    15
    42       |                                                                                                 |  8336    15
    43       |#endif                                                                                           |  8337    15
    44       |#pragma pack(reset)                                                                              |  8338    15
    44       |#include <sys/_types.h>                                                                          |  8339    20
     1       |/* release 2.25.00 */                                                                            |  8340     6
     2       |#pragma pack()                                                                                   |  8341     6
     3       |/*-                                                                                              |  8342     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  8343     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   161


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     5       | * All rights reserved.                                                                          |  8344     6
     6       | *                                                                                               |  8345     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  8346     6
     8       | * modification, are permitted provided that the following conditions                            |  8347     6
     9       | * are met:                                                                                      |  8348     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  8349     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  8350     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  8351     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  8352     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  8353     6
    15       | *                                                                                               |  8354     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  8355     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  8356     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  8357     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  8358     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  8359     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  8360     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  8361     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  8362     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  8363     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  8364     6
    26       | * SUCH DAMAGE.                                                                                  |  8365     6
    27       | *                                                                                               |  8366     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  8367     6
    29       | */                                                                                              |  8368     6
    30       |                                                                                                 |  8369     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  8370     6
    32       |#define _SYS__TYPES_H_                                                                           |  8371     6
    33       |                                                                                                 |  8372     6
    34       |#include <sys/cdefs.h>                                                                           |  8373     6
    35       |#include <machine/_types.h>                                                                      |  8374     6
    36       |                                                                                                 |  8375     6
    37       |/*                                                                                               |  8376     6
    38       | * Standard type definitions.                                                                    |  8377     6
    39       | */                                                                                              |  8378     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  8379     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  8380     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  8381     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  8382     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  8383     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  8384     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  8385     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  8386     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  8387     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  8388     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  8389     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  8390     6
    52       |typedef int             __nl_item;                                                               |  8391     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  8392     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  8393     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  8394     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  8395     6
    57       |                                        /* signed, because of legacy code */                     |  8396     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   162


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  8397     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  8398     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  8399     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  8400     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  8401     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  8402     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  8403     6
    65       |                                                                                                 |  8404     6
    66       |/*                                                                                               |  8405     6
    67       | * Unusual type definitions.                                                                     |  8406     6
    68       | */                                                                                              |  8407     6
    69       |/*                                                                                               |  8408     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  8409     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  8410     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  8411     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  8412     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  8413     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  8414     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  8415     6
    77       | *                                                                                               |  8416     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  8417     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  8418     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  8419     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  8420     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  8421     6
    83       | */                                                                                              |  8422     6
    84       |#ifdef __cplusplus                                                                               |  8423     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  8424     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  8425     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  8426     6
    88       |#else                                                                                            |  8427     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  8428     6
    90       |#endif                                                                                           |  8429     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  8430     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  8431     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  8432     6
    94       |                                                                                                 |  8433     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  8434     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  8435     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  8436     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  8437     6
    99       |#endif                                                                                           |  8438     6
   100       |                                                                                                 |  8439     6
   101       |#if !defined(__cplusplus)                                                                        |  8440     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  8441     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  8442     6
   104       |#endif                                                                                           |  8443     6
   105       |                                                                                                 |  8444     6
   106       |                                                                                                 |  8445     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  8446     6
   108       |                                                                                                 |  8447     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  8448     6
   110       |                                                                                                 |  8449     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   163


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   111       |/*                                                                                               |  8450     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  8451     6
   113       | * stream conversions.                                                                           |  8452     6
   114       | */                                                                                              |  8453     6
   115       |typedef union {                                                                                  |  8454     6
   116       |        char            __mbstate8[128];                                                         |  8455     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  8456     6
   118       |} __mbstate_t;                                                                                   |  8457     6
   119       |                                                                                                 |  8458     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  8459     6
   121       |#pragma pack(reset)                                                                              |  8460     6
    45       |                                                                                                 |  8461    20
    46       |typedef __ptrdiff_t     ptrdiff_t;                                                               |  8462    20
    47       |                                                                                                 |  8463    20
    48       |#if __BSD_VISIBLE                                                                                |  8464    20
    49       |#ifndef _RUNE_T_DECLARED                                                                         |  8465    20
    50       |typedef __rune_t        rune_t;                                                                  |  8466    20
    50       +typedef __rune_t        rune_t;                                                                  +  8466    20
    51       |#define _RUNE_T_DECLARED                                                                         |  8467    20
    52       |#endif                                                                                           |  8468    20
    53       |#endif                                                                                           |  8469    20
    54       |                                                                                                 |  8470    20
    55       |#ifndef _SIZE_T_DECLARED                                                                         |  8471    20
    56       |typedef __size_t        size_t;                                                                  |  8472    20
    57       |#define _SIZE_T_DECLARED                                                                         |  8473    20
    58       |#endif                                                                                           |  8474    20
    59       |                                                                                                 |  8475    20
    60       |#ifndef __cplusplus                                                                              |  8476    20
    61       |#ifndef _WCHAR_T_DECLARED                                                                        |  8477    20
    62       |typedef __wchar_t       wchar_t;                                                                 |  8478    20
    63       |#define _WCHAR_T_DECLARED                                                                        |  8479    20
    64       |#endif                                                                                           |  8480    20
    65       |#endif                                                                                           |  8481    20
    66       |                                                                                                 |  8482    20
    67       |#ifdef __cplusplus                                                                               |  8483    20
    68       |#define offsetof(type, member)  ((size_t)(&((type *)0)->member))                                 |  8484    20
    69       |#else                                                                                            |  8485    20
    70       |#define offsetof(type, member)  __offsetof(type, member)                                         |  8486    20
    71       |#endif                                                                                           |  8487    20
    72       |                                                                                                 |  8488    20
    73       |#endif /* _STDDEF_H_ */                                                                          |  8489    20
    74       |#pragma pack(reset)                                                                              |  8490    20
    44       |                                                                                                 |  8491    19
    45       |                                                                                                 |  8492    19
    46       |/**                                                                                              |  8493    19
    47       |  Introduction                                                                                   |  8494    19
    48       |                                                                                                 |  8495    19
    49       |  LZ4 is lossless compression algorithm, providing compression speed >500 MB/s per core,         |  8496    19
    50       |  scalable with multi-cores CPU. It features an extremely fast decoder, with speed in            |  8497    19
    51       |  multiple GB/s per core, typically reaching RAM speed limits on multi-core systems.             |  8498    19
    52       |                                                                                                 |  8499    19
    53       |  The LZ4 compression library provides in-memory compression and decompression functions.        |  8500    19
    54       |  It gives full buffer control to user.                                                          |  8501    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   164


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       |  Compression can be done in:                                                                    |  8502    19
    56       |    - a single step (described as Simple Functions)                                              |  8503    19
    57       |    - a single step, reusing a context (described in Advanced Functions)                         |  8504    19
    58       |    - unbounded multiple steps (described as Streaming compression)                              |  8505    19
    59       |                                                                                                 |  8506    19
    60       |  lz4.h generates and decodes LZ4-compressed blocks (doc/lz4_Block_format.md).                   |  8507    19
    61       |  Decompressing such a compressed block requires additional metadata.                            |  8508    19
    62       |  Exact metadata depends on exact decompression function.                                        |  8509    19
    63       |  For the typical case of LZ4_decompress_safe(),                                                 |  8510    19
    64       |  metadata includes block's compressed size, and maximum bound of decompressed size.             |  8511    19
    65       |  Each application is free to encode and pass such metadata in whichever way it wants.           |  8512    19
    66       |                                                                                                 |  8513    19
    67       |  lz4.h only handle blocks, it can not generate Frames.                                          |  8514    19
    68       |                                                                                                 |  8515    19
    69       |  Blocks are different from Frames (doc/lz4_Frame_format.md).                                    |  8516    19
    70       |  Frames bundle both blocks and metadata in a specified manner.                                  |  8517    19
    71       |  Embedding metadata is required for compressed data to be self-contained and portable.          |  8518    19
    72       |  Frame format is delivered through a companion API, declared in lz4frame.h.                     |  8519    19
    73       |  The `lz4` CLI can only manage frames.                                                          |  8520    19
    74       |*/                                                                                               |  8521    19
    75       |                                                                                                 |  8522    19
    76       |/*^***************************************************************                               |  8523    19
    77       |*  Export parameters                                                                             |  8524    19
    78       |*****************************************************************/                               |  8525    19
    79       |/*                                                                                               |  8526    19
    80       |*  LZ4_DLL_EXPORT :                                                                              |  8527    19
    81       |*  Enable exporting of functions when building a Windows DLL                                     |  8528    19
    82       |*  LZ4LIB_VISIBILITY :                                                                           |  8529    19
    83       |*  Control library symbols visibility.                                                           |  8530    19
    84       |*/                                                                                               |  8531    19
    85       |#ifndef LZ4LIB_VISIBILITY                                                                        |  8532    19
    86       |#  if defined(__GNUC__) && (__GNUC__ >= 4)                                                       |  8533    19
    87       |#    define LZ4LIB_VISIBILITY __attribute__ ((visibility ("default")))                           |  8534    19
    88       |#  else                                                                                          |  8535    19
    89       |#    define LZ4LIB_VISIBILITY                                                                    |  8536    19
    90       |#  endif                                                                                         |  8537    19
    91       |#endif                                                                                           |  8538    19
    92       |#if defined(LZ4_DLL_EXPORT) && (LZ4_DLL_EXPORT==1)                                               |  8539    19
    93       |#  define LZ4LIB_API __declspec(dllexport) LZ4LIB_VISIBILITY                                     |  8540    19
    94       |#elif defined(LZ4_DLL_IMPORT) && (LZ4_DLL_IMPORT==1)                                             |  8541    19
    95       |#  define LZ4LIB_API __declspec(dllimport) LZ4LIB_VISIBILITY /* It isn't required but allows to g|  8542    19
    95       +enerate better code, saving a function pointer load from the IAT and an indirect jump.*/         +  8542    19
    96       |#else                                                                                            |  8543    19
    97       |#  define LZ4LIB_API LZ4LIB_VISIBILITY                                                           |  8544    19
    98       |#endif                                                                                           |  8545    19
    99       |                                                                                                 |  8546    19
   100       |/*------   Version   ------*/                                                                    |  8547    19
   101       |#define LZ4_VERSION_MAJOR    1    /* for breaking interface changes  */                          |  8548    19
   102       |#define LZ4_VERSION_MINOR    9    /* for new (non-breaking) interface capabilities */            |  8549    19
   103       |#define LZ4_VERSION_RELEASE  3    /* for tweaks, bug-fixes, or development */                    |  8550    19
   104       |                                                                                                 |  8551    19
   105       |#define LZ4_VERSION_NUMBER (LZ4_VERSION_MAJOR *100*100 + LZ4_VERSION_MINOR *100 + LZ4_VERSION_REL|  8552    19
   105       +EASE)                                                                                            +  8552    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   165


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   106       |                                                                                                 |  8553    19
   107       |#define LZ4_LIB_VERSION LZ4_VERSION_MAJOR.LZ4_VERSION_MINOR.LZ4_VERSION_RELEASE                  |  8554    19
   108       |#define LZ4_QUOTE(str) #str                                                                      |  8555    19
   109       |#define LZ4_EXPAND_AND_QUOTE(str) LZ4_QUOTE(str)                                                 |  8556    19
   110       |#define LZ4_VERSION_STRING LZ4_EXPAND_AND_QUOTE(LZ4_LIB_VERSION)                                 |  8557    19
   111       |                                                                                                 |  8558    19
   112       |LZ4LIB_API int LZ4_versionNumber (void);  /**< library version number; useful to check dll versio|  8559    19
   112       +n */                                                                                             +  8559    19
   112       + int LZ4_versionNumber (void);                                                                   +  8559    19
   113       |LZ4LIB_API const char* LZ4_versionString (void);   /**< library version string; useful to check d|  8560    19
   113       +ll version */                                                                                    +  8560    19
   113       + const char* LZ4_versionString (void);                                                           +  8560    19
   114       |                                                                                                 |  8561    19
   115       |                                                                                                 |  8562    19
   116       |/*-************************************                                                          |  8563    19
   117       |*  Tuning parameter                                                                              |  8564    19
   118       |**************************************/                                                          |  8565    19
   119       |/*!                                                                                              |  8566    19
   120       | * LZ4_MEMORY_USAGE :                                                                            |  8567    19
   121       | * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; |  8568    19
   121       +etc.)                                                                                            +  8568    19
   122       | * Increasing memory usage improves compression ratio.                                           |  8569    19
   123       | * Reduced memory usage may improve speed, thanks to better cache locality.                      |  8570    19
   124       | * Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache                      |  8571    19
   125       | */                                                                                              |  8572    19
   126       |#ifndef LZ4_MEMORY_USAGE                                                                         |  8573    19
   127       |# define LZ4_MEMORY_USAGE 14                                                                     |  8574    19
   128       |#endif                                                                                           |  8575    19
   129       |                                                                                                 |  8576    19
   130       |                                                                                                 |  8577    19
   131       |/*-************************************                                                          |  8578    19
   132       |*  Simple Functions                                                                              |  8579    19
   133       |**************************************/                                                          |  8580    19
   134       |/*! LZ4_compress_default() :                                                                     |  8581    19
   135       | *  Compresses 'srcSize' bytes from buffer 'src'                                                 |  8582    19
   136       | *  into already allocated 'dst' buffer of size 'dstCapacity'.                                   |  8583    19
   137       | *  Compression is guaranteed to succeed if 'dstCapacity' >= LZ4_compressBound(srcSize).         |  8584    19
   138       | *  It also runs faster, so it's a recommended setting.                                          |  8585    19
   139       | *  If the function cannot compress 'src' into a more limited 'dst' budget,                      |  8586    19
   140       | *  compression stops *immediately*, and the function result is zero.                            |  8587    19
   141       | *  In which case, 'dst' content is undefined (invalid).                                         |  8588    19
   142       | *      srcSize : max supported value is LZ4_MAX_INPUT_SIZE.                                     |  8589    19
   143       | *      dstCapacity : size of buffer 'dst' (which must be already allocated)                     |  8590    19
   144       | *     @return  : the number of bytes written into buffer 'dst' (necessarily <= dstCapacity)     |  8591    19
   145       | *                or 0 if compression fails                                                      |  8592    19
   146       | * Note : This function is protected against buffer overflow scenarios (never writes outside 'dst|  8593    19
   146       +' buffer, nor read outside 'source' buffer).                                                     +  8593    19
   147       | */                                                                                              |  8594    19
   148       |LZ4LIB_API int LZ4_compress_default(const char* src, char* dst, int srcSize, int dstCapacity);   |  8595    19
   148       + int LZ4_compress_default(const char* src, char* dst, int srcSize, int dstCapacity);             +  8595    19
   149       |                                                                                                 |  8596    19
   150       |/*! LZ4_decompress_safe() :                                                                      |  8597    19
   151       | *  compressedSize : is the exact complete size of the compressed block.                         |  8598    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   166


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   152       | *  dstCapacity : is the size of destination buffer (which must be already allocated), presumed a|  8599    19
   152       +n upper bound of decompressed size.                                                              +  8599    19
   153       | * @return : the number of bytes decompressed into destination buffer (necessarily <= dstCapacity|  8600    19
   153       +)                                                                                                +  8600    19
   154       | *           If destination buffer is not large enough, decoding will stop and output an error co|  8601    19
   154       +de (negative value).                                                                             +  8601    19
   155       | *           If the source stream is detected malformed, the function will stop decoding and retu|  8602    19
   155       +rn a negative result.                                                                            +  8602    19
   156       | * Note 1 : This function is protected against malicious data packets :                          |  8603    19
   157       | *          it will never writes outside 'dst' buffer, nor read outside 'source' buffer,         |  8604    19
   158       | *          even if the compressed block is maliciously modified to order the decoder to do these|  8605    19
   158       + actions.                                                                                        +  8605    19
   159       | *          In such case, the decoder stops immediately, and considers the compressed block malfo|  8606    19
   159       +rmed.                                                                                            +  8606    19
   160       | * Note 2 : compressedSize and dstCapacity must be provided to the function, the compressed block|  8607    19
   160       + does not contain them.                                                                          +  8607    19
   161       | *          The implementation is free to send / store / derive this information in whichever way|  8608    19
   161       + is most beneficial.                                                                             +  8608    19
   162       | *          If there is a need for a different format which bundles together both compressed data|  8609    19
   162       + and its metadata, consider looking at lz4frame.h instead.                                       +  8609    19
   163       | */                                                                                              |  8610    19
   164       |LZ4LIB_API int LZ4_decompress_safe (const char* src, char* dst, int compressedSize, int dstCapaci|  8611    19
   164       +ty);                                                                                             +  8611    19
   164       + int LZ4_decompress_safe (const char* src, char* dst, int compressedSize, int dstCapacity);      +  8611    19
   165       |                                                                                                 |  8612    19
   166       |                                                                                                 |  8613    19
   167       |/*-************************************                                                          |  8614    19
   168       |*  Advanced Functions                                                                            |  8615    19
   169       |**************************************/                                                          |  8616    19
   170       |#define LZ4_MAX_INPUT_SIZE        0x7E000000   /* 2 113 929 216 bytes */                         |  8617    19
   171       |#define LZ4_COMPRESSBOUND(isize)  ((unsigned)(isize) > (unsigned)LZ4_MAX_INPUT_SIZE ? 0 : (isize)|  8618    19
   171       + + ((isize)/255) + 16)                                                                           +  8618    19
   172       |                                                                                                 |  8619    19
   173       |/*! LZ4_compressBound() :                                                                        |  8620    19
   174       |    Provides the maximum size that LZ4 compression may output in a "worst case" scenario (input d|  8621    19
   174       +ata not compressible)                                                                            +  8621    19
   175       |    This function is primarily useful for memory allocation purposes (destination buffer size).  |  8622    19
   176       |    Macro LZ4_COMPRESSBOUND() is also provided for compilation-time evaluation (stack memory allo|  8623    19
   176       +cation for example).                                                                             +  8623    19
   177       |    Note that LZ4_compress_default() compresses faster when dstCapacity is >= LZ4_compressBound(s|  8624    19
   177       +rcSize)                                                                                          +  8624    19
   178       |        inputSize  : max supported value is LZ4_MAX_INPUT_SIZE                                   |  8625    19
   179       |        return : maximum output size in a "worst case" scenario                                  |  8626    19
   180       |              or 0, if input size is incorrect (too large or negative)                           |  8627    19
   181       |*/                                                                                               |  8628    19
   182       |LZ4LIB_API int LZ4_compressBound(int inputSize);                                                 |  8629    19
   182       + int LZ4_compressBound(int inputSize);                                                           +  8629    19
   183       |                                                                                                 |  8630    19
   184       |/*! LZ4_compress_fast() :                                                                        |  8631    19
   185       |    Same as LZ4_compress_default(), but allows selection of "acceleration" factor.               |  8632    19
   186       |    The larger the acceleration value, the faster the algorithm, but also the lesser the compress|  8633    19
   186       +ion.                                                                                             +  8633    19
   187       |    It's a trade-off. It can be fine tuned, with each successive value providing roughly +~3% to |  8634    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   167


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   187       +speed.                                                                                           +  8634    19
   188       |    An acceleration value of "1" is the same as regular LZ4_compress_default()                   |  8635    19
   189       |    Values <= 0 will be replaced by LZ4_ACCELERATION_DEFAULT (currently == 1, see lz4.c).        |  8636    19
   190       |    Values > LZ4_ACCELERATION_MAX will be replaced by LZ4_ACCELERATION_MAX (currently == 65537, s|  8637    19
   190       +ee lz4.c).                                                                                       +  8637    19
   191       |*/                                                                                               |  8638    19
   192       |LZ4LIB_API int LZ4_compress_fast (const char* src, char* dst, int srcSize, int dstCapacity, int a|  8639    19
   192       +cceleration);                                                                                    +  8639    19
   192       + int LZ4_compress_fast (const char* src, char* dst, int srcSize, int dstCapacity, int acceleratio+  8639    19
   192       +n);                                                                                              +  8639    19
   193       |                                                                                                 |  8640    19
   194       |                                                                                                 |  8641    19
   195       |/*! LZ4_compress_fast_extState() :                                                               |  8642    19
   196       | *  Same as LZ4_compress_fast(), using an externally allocated memory space for its state.       |  8643    19
   197       | *  Use LZ4_sizeofState() to know how much memory must be allocated,                             |  8644    19
   198       | *  and allocate it on 8-bytes boundaries (using `malloc()` typically).                          |  8645    19
   199       | *  Then, provide this buffer as `void* state` to compression function.                          |  8646    19
   200       | */                                                                                              |  8647    19
   201       |LZ4LIB_API int LZ4_sizeofState(void);                                                            |  8648    19
   201       + int LZ4_sizeofState(void);                                                                      +  8648    19
   202       |LZ4LIB_API int LZ4_compress_fast_extState (void* state, const char* src, char* dst, int srcSize, |  8649    19
   202       +int dstCapacity, int acceleration);                                                              +  8649    19
   202       + int LZ4_compress_fast_extState (void* state, const char* src, char* dst, int srcSize, int dstCap+  8649    19
   202       +acity, int acceleration);                                                                        +  8649    19
   203       |                                                                                                 |  8650    19
   204       |                                                                                                 |  8651    19
   205       |/*! LZ4_compress_destSize() :                                                                    |  8652    19
   206       | *  Reverse the logic : compresses as much data as possible from 'src' buffer                    |  8653    19
   207       | *  into already allocated buffer 'dst', of size >= 'targetDestSize'.                            |  8654    19
   208       | *  This function either compresses the entire 'src' content into 'dst' if it's large enough,    |  8655    19
   209       | *  or fill 'dst' buffer completely with as much data as possible from 'src'.                    |  8656    19
   210       | *  note: acceleration parameter is fixed to "default".                                          |  8657    19
   211       | *                                                                                               |  8658    19
   212       | * *srcSizePtr : will be modified to indicate how many bytes where read from 'src' to fill 'dst'.|  8659    19
   213       | *               New value is necessarily <= input value.                                        |  8660    19
   214       | * @return : Nb bytes written into 'dst' (necessarily <= targetDestSize)                         |  8661    19
   215       | *           or 0 if compression fails.                                                          |  8662    19
   216       | *                                                                                               |  8663    19
   217       | * Note : from v1.8.2 to v1.9.1, this function had a bug (fixed un v1.9.2+):                     |  8664    19
   218       | *        the produced compressed content could, in specific circumstances,                      |  8665    19
   219       | *        require to be decompressed into a destination buffer larger                            |  8666    19
   220       | *        by at least 1 byte than the content to decompress.                                     |  8667    19
   221       | *        If an application uses `LZ4_compress_destSize()`,                                      |  8668    19
   222       | *        it's highly recommended to update liblz4 to v1.9.2 or better.                          |  8669    19
   223       | *        If this can't be done or ensured,                                                      |  8670    19
   224       | *        the receiving decompression function should provide                                    |  8671    19
   225       | *        a dstCapacity which is > decompressedSize, by at least 1 byte.                         |  8672    19
   226       | *        See https://github.com/lz4/lz4/issues/859 for details                                  |  8673    19
   227       | */                                                                                              |  8674    19
   228       |LZ4LIB_API int LZ4_compress_destSize (const char* src, char* dst, int* srcSizePtr, int targetDstS|  8675    19
   228       +ize);                                                                                            +  8675    19
   228       + int LZ4_compress_destSize (const char* src, char* dst, int* srcSizePtr, int targetDstSize);     +  8675    19
   229       |                                                                                                 |  8676    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   168


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   230       |                                                                                                 |  8677    19
   231       |/*! LZ4_decompress_safe_partial() :                                                              |  8678    19
   232       | *  Decompress an LZ4 compressed block, of size 'srcSize' at position 'src',                     |  8679    19
   233       | *  into destination buffer 'dst' of size 'dstCapacity'.                                         |  8680    19
   234       | *  Up to 'targetOutputSize' bytes will be decoded.                                              |  8681    19
   235       | *  The function stops decoding on reaching this objective.                                      |  8682    19
   236       | *  This can be useful to boost performance                                                      |  8683    19
   237       | *  whenever only the beginning of a block is required.                                          |  8684    19
   238       | *                                                                                               |  8685    19
   239       | * @return : the number of bytes decoded in `dst` (necessarily <= targetOutputSize)              |  8686    19
   240       | *           If source stream is detected malformed, function returns a negative result.         |  8687    19
   241       | *                                                                                               |  8688    19
   242       | *  Note 1 : @return can be < targetOutputSize, if compressed block contains less data.          |  8689    19
   243       | *                                                                                               |  8690    19
   244       | *  Note 2 : targetOutputSize must be <= dstCapacity                                             |  8691    19
   245       | *                                                                                               |  8692    19
   246       | *  Note 3 : this function effectively stops decoding on reaching targetOutputSize,              |  8693    19
   247       | *           so dstCapacity is kind of redundant.                                                |  8694    19
   248       | *           This is because in older versions of this function,                                 |  8695    19
   249       | *           decoding operation would still write complete sequences.                            |  8696    19
   250       | *           Therefore, there was no guarantee that it would stop writing at exactly targetOutput|  8697    19
   250       +Size,                                                                                            +  8697    19
   251       | *           it could write more bytes, though only up to dstCapacity.                           |  8698    19
   252       | *           Some "margin" used to be required for this operation to work properly.              |  8699    19
   253       | *           Thankfully, this is no longer necessary.                                            |  8700    19
   254       | *           The function nonetheless keeps the same signature, in an effort to preserve API comp|  8701    19
   254       +atibility.                                                                                       +  8701    19
   255       | *                                                                                               |  8702    19
   256       | *  Note 4 : If srcSize is the exact size of the block,                                          |  8703    19
   257       | *           then targetOutputSize can be any value,                                             |  8704    19
   258       | *           including larger than the block's decompressed size.                                |  8705    19
   259       | *           The function will, at most, generate block's decompressed size.                     |  8706    19
   260       | *                                                                                               |  8707    19
   261       | *  Note 5 : If srcSize is _larger_ than block's compressed size,                                |  8708    19
   262       | *           then targetOutputSize **MUST** be <= block's decompressed size.                     |  8709    19
   263       | *           Otherwise, *silent corruption will occur*.                                          |  8710    19
   264       | */                                                                                              |  8711    19
   265       |LZ4LIB_API int LZ4_decompress_safe_partial (const char* src, char* dst, int srcSize, int targetOu|  8712    19
   265       +tputSize, int dstCapacity);                                                                      +  8712    19
   265       + int LZ4_decompress_safe_partial (const char* src, char* dst, int srcSize, int targetOutputSize, +  8712    19
   265       +int dstCapacity);                                                                                +  8712    19
   266       |                                                                                                 |  8713    19
   267       |                                                                                                 |  8714    19
   268       |/*-*********************************************                                                 |  8715    19
   269       |*  Streaming Compression Functions                                                               |  8716    19
   270       |***********************************************/                                                 |  8717    19
   271       |typedef union LZ4_stream_u LZ4_stream_t;  /* incomplete type (defined later) */                  |  8718    19
   272       |                                                                                                 |  8719    19
   273       |LZ4LIB_API LZ4_stream_t* LZ4_createStream(void);                                                 |  8720    19
   273       + LZ4_stream_t* LZ4_createStream(void);                                                           +  8720    19
   274       |LZ4LIB_API int           LZ4_freeStream (LZ4_stream_t* streamPtr);                               |  8721    19
   274       + int           LZ4_freeStream (LZ4_stream_t* streamPtr);                                         +  8721    19
   275       |                                                                                                 |  8722    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   169


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   276       |/*! LZ4_resetStream_fast() : v1.9.0+                                                             |  8723    19
   277       | *  Use this to prepare an LZ4_stream_t for a new chain of dependent blocks                      |  8724    19
   278       | *  (e.g., LZ4_compress_fast_continue()).                                                        |  8725    19
   279       | *                                                                                               |  8726    19
   280       | *  An LZ4_stream_t must be initialized once before usage.                                       |  8727    19
   281       | *  This is automatically done when created by LZ4_createStream().                               |  8728    19
   282       | *  However, should the LZ4_stream_t be simply declared on stack (for example),                  |  8729    19
   283       | *  it's necessary to initialize it first, using LZ4_initStream().                               |  8730    19
   284       | *                                                                                               |  8731    19
   285       | *  After init, start any new stream with LZ4_resetStream_fast().                                |  8732    19
   286       | *  A same LZ4_stream_t can be re-used multiple times consecutively                              |  8733    19
   287       | *  and compress multiple streams,                                                               |  8734    19
   288       | *  provided that it starts each new stream with LZ4_resetStream_fast().                         |  8735    19
   289       | *                                                                                               |  8736    19
   290       | *  LZ4_resetStream_fast() is much faster than LZ4_initStream(),                                 |  8737    19
   291       | *  but is not compatible with memory regions containing garbage data.                           |  8738    19
   292       | *                                                                                               |  8739    19
   293       | *  Note: it's only useful to call LZ4_resetStream_fast()                                        |  8740    19
   294       | *        in the context of streaming compression.                                               |  8741    19
   295       | *        The *extState* functions perform their own resets.                                     |  8742    19
   296       | *        Invoking LZ4_resetStream_fast() before is redundant, and even counterproductive.       |  8743    19
   297       | */                                                                                              |  8744    19
   298       |LZ4LIB_API void LZ4_resetStream_fast (LZ4_stream_t* streamPtr);                                  |  8745    19
   298       + void LZ4_resetStream_fast (LZ4_stream_t* streamPtr);                                            +  8745    19
   299       |                                                                                                 |  8746    19
   300       |/*! LZ4_loadDict() :                                                                             |  8747    19
   301       | *  Use this function to reference a static dictionary into LZ4_stream_t.                        |  8748    19
   302       | *  The dictionary must remain available during compression.                                     |  8749    19
   303       | *  LZ4_loadDict() triggers a reset, so any previous data will be forgotten.                     |  8750    19
   304       | *  The same dictionary will have to be loaded on decompression side for successful decoding.    |  8751    19
   305       | *  Dictionary are useful for better compression of small data (KB range).                       |  8752    19
   306       | *  While LZ4 accept any input as dictionary,                                                    |  8753    19
   307       | *  results are generally better when using Zstandard's Dictionary Builder.                      |  8754    19
   308       | *  Loading a size of 0 is allowed, and is the same as reset.                                    |  8755    19
   309       | * @return : loaded dictionary size, in bytes (necessarily <= 64 KB)                             |  8756    19
   310       | */                                                                                              |  8757    19
   311       |LZ4LIB_API int LZ4_loadDict (LZ4_stream_t* streamPtr, const char* dictionary, int dictSize);     |  8758    19
   311       + int LZ4_loadDict (LZ4_stream_t* streamPtr, const char* dictionary, int dictSize);               +  8758    19
   312       |                                                                                                 |  8759    19
   313       |/*! LZ4_compress_fast_continue() :                                                               |  8760    19
   314       | *  Compress 'src' content using data from previously compressed blocks, for better compression r|  8761    19
   314       +atio.                                                                                            +  8761    19
   315       | * 'dst' buffer must be already allocated.                                                       |  8762    19
   316       | *  If dstCapacity >= LZ4_compressBound(srcSize), compression is guaranteed to succeed, and runs |  8763    19
   316       +faster.                                                                                          +  8763    19
   317       | *                                                                                               |  8764    19
   318       | * @return : size of compressed block                                                            |  8765    19
   319       | *           or 0 if there is an error (typically, cannot fit into 'dst').                       |  8766    19
   320       | *                                                                                               |  8767    19
   321       | *  Note 1 : Each invocation to LZ4_compress_fast_continue() generates a new block.              |  8768    19
   322       | *           Each block has precise boundaries.                                                  |  8769    19
   323       | *           Each block must be decompressed separately, calling LZ4_decompress_*() with relevant|  8770    19
   323       + metadata.                                                                                       +  8770    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   170


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   324       | *           It's not possible to append blocks together and expect a single invocation of LZ4_de|  8771    19
   324       +compress_*() to decompress them together.                                                        +  8771    19
   325       | *                                                                                               |  8772    19
   326       | *  Note 2 : The previous 64KB of source data is __assumed__ to remain present, unmodified, at sa|  8773    19
   326       +me address in memory !                                                                           +  8773    19
   327       | *                                                                                               |  8774    19
   328       | *  Note 3 : When input is structured as a double-buffer, each buffer can have any size, includin|  8775    19
   328       +g < 64 KB.                                                                                       +  8775    19
   329       | *           Make sure that buffers are separated, by at least one byte.                         |  8776    19
   330       | *           This construction ensures that each block only depends on previous block.           |  8777    19
   331       | *                                                                                               |  8778    19
   332       | *  Note 4 : If input buffer is a ring-buffer, it can have any size, including < 64 KB.          |  8779    19
   333       | *                                                                                               |  8780    19
   334       | *  Note 5 : After an error, the stream status is undefined (invalid), it can only be reset or fr|  8781    19
   334       +eed.                                                                                             +  8781    19
   335       | */                                                                                              |  8782    19
   336       |LZ4LIB_API int LZ4_compress_fast_continue (LZ4_stream_t* streamPtr, const char* src, char* dst, i|  8783    19
   336       +nt srcSize, int dstCapacity, int acceleration);                                                  +  8783    19
   336       + int LZ4_compress_fast_continue (LZ4_stream_t* streamPtr, const char* src, char* dst, int srcSize+  8783    19
   336       +, int dstCapacity, int acceleration);                                                            +  8783    19
   337       |                                                                                                 |  8784    19
   338       |/*! LZ4_saveDict() :                                                                             |  8785    19
   339       | *  If last 64KB data cannot be guaranteed to remain available at its current memory location,   |  8786    19
   340       | *  save it into a safer place (char* safeBuffer).                                               |  8787    19
   341       | *  This is schematically equivalent to a memcpy() followed by LZ4_loadDict(),                   |  8788    19
   342       | *  but is much faster, because LZ4_saveDict() doesn't need to rebuild tables.                   |  8789    19
   343       | * @return : saved dictionary size in bytes (necessarily <= maxDictSize), or 0 if error.         |  8790    19
   344       | */                                                                                              |  8791    19
   345       |LZ4LIB_API int LZ4_saveDict (LZ4_stream_t* streamPtr, char* safeBuffer, int maxDictSize);        |  8792    19
   345       + int LZ4_saveDict (LZ4_stream_t* streamPtr, char* safeBuffer, int maxDictSize);                  +  8792    19
   346       |                                                                                                 |  8793    19
   347       |                                                                                                 |  8794    19
   348       |/*-**********************************************                                                |  8795    19
   349       |*  Streaming Decompression Functions                                                             |  8796    19
   350       |*  Bufferless synchronous API                                                                    |  8797    19
   351       |************************************************/                                                |  8798    19
   352       |typedef union LZ4_streamDecode_u LZ4_streamDecode_t;   /* tracking context */                    |  8799    19
   353       |                                                                                                 |  8800    19
   354       |/*! LZ4_createStreamDecode() and LZ4_freeStreamDecode() :                                        |  8801    19
   355       | *  creation / destruction of streaming decompression tracking context.                          |  8802    19
   356       | *  A tracking context can be re-used multiple times.                                            |  8803    19
   357       | */                                                                                              |  8804    19
   358       |LZ4LIB_API LZ4_streamDecode_t* LZ4_createStreamDecode(void);                                     |  8805    19
   358       + LZ4_streamDecode_t* LZ4_createStreamDecode(void);                                               +  8805    19
   359       |LZ4LIB_API int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);            |  8806    19
   359       + int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);                      +  8806    19
   360       |                                                                                                 |  8807    19
   361       |/*! LZ4_setStreamDecode() :                                                                      |  8808    19
   362       | *  An LZ4_streamDecode_t context can be allocated once and re-used multiple times.              |  8809    19
   363       | *  Use this function to start decompression of a new stream of blocks.                          |  8810    19
   364       | *  A dictionary can optionally be set. Use NULL or size 0 for a reset order.                    |  8811    19
   365       | *  Dictionary is presumed stable : it must remain accessible and unmodified during next decompre|  8812    19
   365       +ssion.                                                                                           +  8812    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   171


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   366       | * @return : 1 if OK, 0 if error                                                                 |  8813    19
   367       | */                                                                                              |  8814    19
   368       |LZ4LIB_API int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary,|  8815    19
   368       + int dictSize);                                                                                  +  8815    19
   368       + int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary, int dictS+  8815    19
   368       +ize);                                                                                            +  8815    19
   369       |                                                                                                 |  8816    19
   370       |/*! LZ4_decoderRingBufferSize() : v1.8.2+                                                        |  8817    19
   371       | *  Note : in a ring buffer scenario (optional),                                                 |  8818    19
   372       | *  blocks are presumed decompressed next to each other                                          |  8819    19
   373       | *  up to the moment there is not enough remaining space for next block (remainingSize < maxBlock|  8820    19
   373       +Size),                                                                                           +  8820    19
   374       | *  at which stage it resumes from beginning of ring buffer.                                     |  8821    19
   375       | *  When setting such a ring buffer for streaming decompression,                                 |  8822    19
   376       | *  provides the minimum size of this ring buffer                                                |  8823    19
   377       | *  to be compatible with any source respecting maxBlockSize condition.                          |  8824    19
   378       | * @return : minimum ring buffer size,                                                           |  8825    19
   379       | *           or 0 if there is an error (invalid maxBlockSize).                                   |  8826    19
   380       | */                                                                                              |  8827    19
   381       |LZ4LIB_API int LZ4_decoderRingBufferSize(int maxBlockSize);                                      |  8828    19
   381       + int LZ4_decoderRingBufferSize(int maxBlockSize);                                                +  8828    19
   382       |#define LZ4_DECODER_RING_BUFFER_SIZE(maxBlockSize) (65536 + 14 + (maxBlockSize))  /* for static a|  8829    19
   382       +llocation; maxBlockSize presumed valid */                                                        +  8829    19
   383       |                                                                                                 |  8830    19
   384       |/*! LZ4_decompress_*_continue() :                                                                |  8831    19
   385       | *  These decoding functions allow decompression of consecutive blocks in "streaming" mode.      |  8832    19
   386       | *  A block is an unsplittable entity, it must be presented entirely to a decompression function.|  8833    19
   387       | *  Decompression functions only accepts one block at a time.                                    |  8834    19
   388       | *  The last 64KB of previously decoded data *must* remain available and unmodified at the memory|  8835    19
   388       + position where they were decoded.                                                               +  8835    19
   389       | *  If less than 64KB of data has been decoded, all the data must be present.                    |  8836    19
   390       | *                                                                                               |  8837    19
   391       | *  Special : if decompression side sets a ring buffer, it must respect one of the following cond|  8838    19
   391       +itions :                                                                                         +  8838    19
   392       | *  - Decompression buffer size is _at least_ LZ4_decoderRingBufferSize(maxBlockSize).           |  8839    19
   393       | *    maxBlockSize is the maximum size of any single block. It can have any value > 16 bytes.    |  8840    19
   394       | *    In which case, encoding and decoding buffers do not need to be synchronized.               |  8841    19
   395       | *    Actually, data can be produced by any source compliant with LZ4 format specification, and r|  8842    19
   395       +especting maxBlockSize.                                                                          +  8842    19
   396       | *  - Synchronized mode :                                                                        |  8843    19
   397       | *    Decompression buffer size is _exactly_ the same as compression buffer size,                |  8844    19
   398       | *    and follows exactly same update rule (block boundaries at same positions),                 |  8845    19
   399       | *    and decoding function is provided with exact decompressed size of each block (exception for|  8846    19
   399       + last block of the stream),                                                                      +  8846    19
   400       | *    _then_ decoding & encoding ring buffer can have any size, including small ones ( < 64 KB). |  8847    19
   401       | *  - Decompression buffer is larger than encoding buffer, by a minimum of maxBlockSize more byte|  8848    19
   401       +s.                                                                                               +  8848    19
   402       | *    In which case, encoding and decoding buffers do not need to be synchronized,               |  8849    19
   403       | *    and encoding ring buffer can have any size, including small ones ( < 64 KB).               |  8850    19
   404       | *                                                                                               |  8851    19
   405       | *  Whenever these conditions are not possible,                                                  |  8852    19
   406       | *  save the last 64KB of decoded data into a safe buffer where it can't be modified during decom|  8853    19
   406       +pression,                                                                                        +  8853    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   172


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   407       | *  then indicate where this data is saved using LZ4_setStreamDecode(), before decompressing next|  8854    19
   407       + block.                                                                                          +  8854    19
   408       |*/                                                                                               |  8855    19
   409       |LZ4LIB_API int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* sr|  8856    19
   409       +c, char* dst, int srcSize, int dstCapacity);                                                     +  8856    19
   409       + int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* src, char* d+  8856    19
   409       +st, int srcSize, int dstCapacity);                                                               +  8856    19
   410       |                                                                                                 |  8857    19
   411       |                                                                                                 |  8858    19
   412       |/*! LZ4_decompress_*_usingDict() :                                                               |  8859    19
   413       | *  These decoding functions work the same as                                                    |  8860    19
   414       | *  a combination of LZ4_setStreamDecode() followed by LZ4_decompress_*_continue()               |  8861    19
   415       | *  They are stand-alone, and don't need an LZ4_streamDecode_t structure.                        |  8862    19
   416       | *  Dictionary is presumed stable : it must remain accessible and unmodified during decompression|  8863    19
   416       +.                                                                                                +  8863    19
   417       | *  Performance tip : Decompression speed can be substantially increased                         |  8864    19
   418       | *                    when dst == dictStart + dictSize.                                          |  8865    19
   419       | */                                                                                              |  8866    19
   420       |LZ4LIB_API int LZ4_decompress_safe_usingDict (const char* src, char* dst, int srcSize, int dstCap|  8867    19
   420       +city, const char* dictStart, int dictSize);                                                      +  8867    19
   420       + int LZ4_decompress_safe_usingDict (const char* src, char* dst, int srcSize, int dstCapcity, cons+  8867    19
   420       +t char* dictStart, int dictSize);                                                                +  8867    19
   421       |                                                                                                 |  8868    19
   422       |#endif /* LZ4_H_2983827168210 */                                                                 |  8869    19
   423       |                                                                                                 |  8870    19
   424       |                                                                                                 |  8871    19
   425       |/*^*************************************                                                         |  8872    19
   426       | * !!!!!!   STATIC LINKING ONLY   !!!!!!                                                         |  8873    19
   427       | ***************************************/                                                        |  8874    19
   428       |                                                                                                 |  8875    19
   429       |/*-****************************************************************************                  |  8876    19
   430       | * Experimental section                                                                          |  8877    19
   431       | *                                                                                               |  8878    19
   432       | * Symbols declared in this section must be considered unstable. Their                           |  8879    19
   433       | * signatures or semantics may change, or they may be removed altogether in the                  |  8880    19
   434       | * future. They are therefore only safe to depend on when the caller is                          |  8881    19
   435       | * statically linked against the library.                                                        |  8882    19
   436       | *                                                                                               |  8883    19
   437       | * To protect against unsafe usage, not only are the declarations guarded,                       |  8884    19
   438       | * the definitions are hidden by default                                                         |  8885    19
   439       | * when building LZ4 as a shared/dynamic library.                                                |  8886    19
   440       | *                                                                                               |  8887    19
   441       | * In order to access these declarations,                                                        |  8888    19
   442       | * define LZ4_STATIC_LINKING_ONLY in your application                                            |  8889    19
   443       | * before including LZ4's headers.                                                               |  8890    19
   444       | *                                                                                               |  8891    19
   445       | * In order to make their implementations accessible dynamically, you must                       |  8892    19
   446       | * define LZ4_PUBLISH_STATIC_FUNCTIONS when building the LZ4 library.                            |  8893    19
   447       | ******************************************************************************/                 |  8894    19
   448       |                                                                                                 |  8895    19
   449       |#ifdef LZ4_STATIC_LINKING_ONLY                                                                   |  8896    19
   450       |                                                                                                 |  8897    19
   451       |#ifndef LZ4_STATIC_3504398509                                                                    |  8898    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   173


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   452       |#define LZ4_STATIC_3504398509                                                                    |  8899    19
   453       |                                                                                                 |  8900    19
   454       |#ifdef LZ4_PUBLISH_STATIC_FUNCTIONS                                                              |  8901    19
   455       |#define LZ4LIB_STATIC_API LZ4LIB_API                                                             |  8902    19
   456       |#else                                                                                            |  8903    19
   457       |#define LZ4LIB_STATIC_API                                                                        |  8904    19
   458       |#endif                                                                                           |  8905    19
   459       |                                                                                                 |  8906    19
   460       |                                                                                                 |  8907    19
   461       |/*! LZ4_compress_fast_extState_fastReset() :                                                     |  8908    19
   462       | *  A variant of LZ4_compress_fast_extState().                                                   |  8909    19
   463       | *                                                                                               |  8910    19
   464       | *  Using this variant avoids an expensive initialization step.                                  |  8911    19
   465       | *  It is only safe to call if the state buffer is known to be correctly initialized already     |  8912    19
   466       | *  (see above comment on LZ4_resetStream_fast() for a definition of "correctly initialized").   |  8913    19
   467       | *  From a high level, the difference is that                                                    |  8914    19
   468       | *  this function initializes the provided state with a call to something like LZ4_resetStream_fa|  8915    19
   468       +st()                                                                                             +  8915    19
   469       | *  while LZ4_compress_fast_extState() starts with a call to LZ4_resetStream().                  |  8916    19
   470       | */                                                                                              |  8917    19
   471       |LZ4LIB_STATIC_API int LZ4_compress_fast_extState_fastReset (void* state, const char* src, char* d|  8918    19
   471       +st, int srcSize, int dstCapacity, int acceleration);                                             +  8918    19
   472       |                                                                                                 |  8919    19
   473       |/*! LZ4_attach_dictionary() :                                                                    |  8920    19
   474       | *  This is an experimental API that allows                                                      |  8921    19
   475       | *  efficient use of a static dictionary many times.                                             |  8922    19
   476       | *                                                                                               |  8923    19
   477       | *  Rather than re-loading the dictionary buffer into a working context before                   |  8924    19
   478       | *  each compression, or copying a pre-loaded dictionary's LZ4_stream_t into a                   |  8925    19
   479       | *  working LZ4_stream_t, this function introduces a no-copy setup mechanism,                    |  8926    19
   480       | *  in which the working stream references the dictionary stream in-place.                       |  8927    19
   481       | *                                                                                               |  8928    19
   482       | *  Several assumptions are made about the state of the dictionary stream.                       |  8929    19
   483       | *  Currently, only streams which have been prepared by LZ4_loadDict() should                    |  8930    19
   484       | *  be expected to work.                                                                         |  8931    19
   485       | *                                                                                               |  8932    19
   486       | *  Alternatively, the provided dictionaryStream may be NULL,                                    |  8933    19
   487       | *  in which case any existing dictionary stream is unset.                                       |  8934    19
   488       | *                                                                                               |  8935    19
   489       | *  If a dictionary is provided, it replaces any pre-existing stream history.                    |  8936    19
   490       | *  The dictionary contents are the only history that can be referenced and                      |  8937    19
   491       | *  logically immediately precede the data compressed in the first subsequent                    |  8938    19
   492       | *  compression call.                                                                            |  8939    19
   493       | *                                                                                               |  8940    19
   494       | *  The dictionary will only remain attached to the working stream through the                   |  8941    19
   495       | *  first compression call, at the end of which it is cleared. The dictionary                    |  8942    19
   496       | *  stream (and source buffer) must remain in-place / accessible / unchanged                     |  8943    19
   497       | *  through the completion of the first compression call on the stream.                          |  8944    19
   498       | */                                                                                              |  8945    19
   499       |LZ4LIB_STATIC_API void LZ4_attach_dictionary(LZ4_stream_t* workingStream, const LZ4_stream_t* dic|  8946    19
   499       +tionaryStream);                                                                                  +  8946    19
   500       |                                                                                                 |  8947    19
   501       |                                                                                                 |  8948    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   174


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   502       |/*! In-place compression and decompression                                                       |  8949    19
   503       | *                                                                                               |  8950    19
   504       | * It's possible to have input and output sharing the same buffer,                               |  8951    19
   505       | * for highly contrained memory environments.                                                    |  8952    19
   506       | * In both cases, it requires input to lay at the end of the buffer,                             |  8953    19
   507       | * and decompression to start at beginning of the buffer.                                        |  8954    19
   508       | * Buffer size must feature some margin, hence be larger than final size.                        |  8955    19
   509       | *                                                                                               |  8956    19
   510       | * |<------------------------buffer--------------------------------->|                           |  8957    19
   511       | *                             |<-----------compressed data--------->|                           |  8958    19
   512       | * |<-----------decompressed size------------------>|                                            |  8959    19
   513       | *                                                  |<----margin---->|                           |  8960    19
   514       | *                                                                                               |  8961    19
   515       | * This technique is more useful for decompression,                                              |  8962    19
   516       | * since decompressed size is typically larger,                                                  |  8963    19
   517       | * and margin is short.                                                                          |  8964    19
   518       | *                                                                                               |  8965    19
   519       | * In-place decompression will work inside any buffer                                            |  8966    19
   520       | * which size is >= LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize).                        |  8967    19
   521       | * This presumes that decompressedSize > compressedSize.                                         |  8968    19
   522       | * Otherwise, it means compression actually expanded data,                                       |  8969    19
   523       | * and it would be more efficient to store such data with a flag indicating it's not compressed. |  8970    19
   524       | * This can happen when data is not compressible (already compressed, or encrypted).             |  8971    19
   525       | *                                                                                               |  8972    19
   526       | * For in-place compression, margin is larger, as it must be able to cope with both              |  8973    19
   527       | * history preservation, requiring input data to remain unmodified up to LZ4_DISTANCE_MAX,       |  8974    19
   528       | * and data expansion, which can happen when input is not compressible.                          |  8975    19
   529       | * As a consequence, buffer size requirements are much higher,                                   |  8976    19
   530       | * and memory savings offered by in-place compression are more limited.                          |  8977    19
   531       | *                                                                                               |  8978    19
   532       | * There are ways to limit this cost for compression :                                           |  8979    19
   533       | * - Reduce history size, by modifying LZ4_DISTANCE_MAX.                                         |  8980    19
   534       | *   Note that it is a compile-time constant, so all compressions will apply this limit.         |  8981    19
   535       | *   Lower values will reduce compression ratio, except when input_size < LZ4_DISTANCE_MAX,      |  8982    19
   536       | *   so it's a reasonable trick when inputs are known to be small.                               |  8983    19
   537       | * - Require the compressor to deliver a "maximum compressed size".                              |  8984    19
   538       | *   This is the `dstCapacity` parameter in `LZ4_compress*()`.                                   |  8985    19
   539       | *   When this size is < LZ4_COMPRESSBOUND(inputSize), then compression can fail,                |  8986    19
   540       | *   in which case, the return code will be 0 (zero).                                            |  8987    19
   541       | *   The caller must be ready for these cases to happen,                                         |  8988    19
   542       | *   and typically design a backup scheme to send data uncompressed.                             |  8989    19
   543       | * The combination of both techniques can significantly reduce                                   |  8990    19
   544       | * the amount of margin required for in-place compression.                                       |  8991    19
   545       | *                                                                                               |  8992    19
   546       | * In-place compression can work in any buffer                                                   |  8993    19
   547       | * which size is >= (maxCompressedSize)                                                          |  8994    19
   548       | * with maxCompressedSize == LZ4_COMPRESSBOUND(srcSize) for guaranteed compression success.      |  8995    19
   549       | * LZ4_COMPRESS_INPLACE_BUFFER_SIZE() depends on both maxCompressedSize and LZ4_DISTANCE_MAX,    |  8996    19
   550       | * so it's possible to reduce memory requirements by playing with them.                          |  8997    19
   551       | */                                                                                              |  8998    19
   552       |                                                                                                 |  8999    19
   553       |#define LZ4_DECOMPRESS_INPLACE_MARGIN(compressedSize)          (((compressedSize) >> 8) + 32)    |  9000    19
   554       |#define LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize)   ((decompressedSize) + LZ4_DECOMPRE|  9001    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   175


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   554       +SS_INPLACE_MARGIN(decompressedSize))  /**< note: presumes that compressedSize < decompressedSize.+  9001    19
   554       + note2: margin is overestimated a bit, since it could use compressedSize instead */              +  9001    19
   555       |                                                                                                 |  9002    19
   556       |#ifndef LZ4_DISTANCE_MAX   /* history window size; can be user-defined at compile time */        |  9003    19
   557       |#  define LZ4_DISTANCE_MAX 65535   /* set to maximum value by default */                         |  9004    19
   558       |#endif                                                                                           |  9005    19
   559       |                                                                                                 |  9006    19
   560       |#define LZ4_COMPRESS_INPLACE_MARGIN                           (LZ4_DISTANCE_MAX + 32)   /* LZ4_DI|  9007    19
   560       +STANCE_MAX can be safely replaced by srcSize when it's smaller */                                +  9007    19
   561       |#define LZ4_COMPRESS_INPLACE_BUFFER_SIZE(maxCompressedSize)   ((maxCompressedSize) + LZ4_COMPRESS|  9008    19
   561       +_INPLACE_MARGIN)  /**< maxCompressedSize is generally LZ4_COMPRESSBOUND(inputSize), but can be se+  9008    19
   561       +t to any lower value, with the risk that compression can fail (return code 0(zero)) */           +  9008    19
   562       |                                                                                                 |  9009    19
   563       |#endif   /* LZ4_STATIC_3504398509 */                                                             |  9010    19
   564       |#endif   /* LZ4_STATIC_LINKING_ONLY */                                                           |  9011    19
   565       |                                                                                                 |  9012    19
   566       |                                                                                                 |  9013    19
   567       |                                                                                                 |  9014    19
   568       |#ifndef LZ4_H_98237428734687                                                                     |  9015    19
   569       |#define LZ4_H_98237428734687                                                                     |  9016    19
   570       |                                                                                                 |  9017    19
   571       |/*-************************************************************                                  |  9018    19
   572       | *  Private Definitions                                                                          |  9019    19
   573       | **************************************************************                                  |  9020    19
   574       | * Do not use these definitions directly.                                                        |  9021    19
   575       | * They are only exposed to allow static allocation of `LZ4_stream_t` and `LZ4_streamDecode_t`.  |  9022    19
   576       | * Accessing members will expose user code to API and/or ABI break in future versions of the libr|  9023    19
   576       +ary.                                                                                             +  9023    19
   577       | **************************************************************/                                 |  9024    19
   578       |#define LZ4_HASHLOG   (LZ4_MEMORY_USAGE-2)                                                       |  9025    19
   579       |#define LZ4_HASHTABLESIZE (1 << LZ4_MEMORY_USAGE)                                                |  9026    19
   580       |#define LZ4_HASH_SIZE_U32 (1 << LZ4_HASHLOG)       /* required as macro for static allocation */ |  9027    19
   581       |                                                                                                 |  9028    19
   582       |#if defined(__cplusplus) || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 *|  9029    19
   582       +/)                                                                                               +  9029    19
   583       |# include <stdint.h>                                                                             |  9030    19
     1       |/* release 2.25.00 */                                                                            |  9031    21
     1       +                                                                                                 +  9031    21
     2       |#pragma pack()                                                                                   |  9032    21
     3       |/*-                                                                                              |  9033    21
     4       | * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>                                           |  9034    21
     5       | * All rights reserved.                                                                          |  9035    21
     6       | *                                                                                               |  9036    21
     7       | * Redistribution and use in source and binary forms, with or without                            |  9037    21
     8       | * modification, are permitted provided that the following conditions                            |  9038    21
     9       | * are met:                                                                                      |  9039    21
    10       | * 1. Redistributions of source code must retain the above copyright                             |  9040    21
    11       | *    notice, this list of conditions and the following disclaimer.                              |  9041    21
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9042    21
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  9043    21
    14       | *    documentation and/or other materials provided with the distribution.                       |  9044    21
    15       | *                                                                                               |  9045    21
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  9046    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   176


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  9047    21
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  9048    21
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  9049    21
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  9050    21
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  9051    21
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  9052    21
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  9053    21
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  9054    21
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  9055    21
    26       | * SUCH DAMAGE.                                                                                  |  9056    21
    27       | *                                                                                               |  9057    21
    28       | */                                                                                              |  9058    21
    29       |                                                                                                 |  9059    21
    30       |#ifndef _SYS_STDINT_H_                                                                           |  9060    21
    31       |#define _SYS_STDINT_H_                                                                           |  9061    21
    32       |                                                                                                 |  9062    21
    33       |#include <sys/cdefs.h>                                                                           |  9063    21
     1       |/* release 2.25.00 */                                                                            |  9064     4
     2       |#pragma pack()                                                                                   |  9065     4
     3       |/*                                                                                               |  9066     4
     4       | * Copyright (c) 1991, 1993                                                                      |  9067     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  9068     4
     6       | *                                                                                               |  9069     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  9070     4
     8       | * Berkeley Software Design, Inc.                                                                |  9071     4
     9       | *                                                                                               |  9072     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  9073     4
    11       | * modification, are permitted provided that the following conditions                            |  9074     4
    12       | * are met:                                                                                      |  9075     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  9076     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  9077     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9078     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  9079     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  9080     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  9081     4
    19       | *    must display the following acknowledgement:                                                |  9082     4
    20       | *      This product includes software developed by the University of                            |  9083     4
    21       | *      California, Berkeley and its contributors.                                               |  9084     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  9085     4
    23       | *    may be used to endorse or promote products derived from this software                      |  9086     4
    24       | *    without specific prior written permission.                                                 |  9087     4
    25       | *                                                                                               |  9088     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  9089     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  9090     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  9091     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  9092     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  9093     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  9094     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  9095     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  9096     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  9097     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  9098     4
    36       | * SUCH DAMAGE.                                                                                  |  9099     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   177


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    37       | *                                                                                               |  9100     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  9101     4
    39       | */                                                                                              |  9102     4
    40       |                                                                                                 |  9103     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  9104     4
    42       |#define _SYS_CDEFS_H_                                                                            |  9105     4
    43       |                                                                                                 |  9106     4
    44       |#if defined(__cplusplus)                                                                         |  9107     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  9108     4
    46       |#define __END_DECLS     }                                                                        |  9109     4
    47       |#else                                                                                            |  9110     4
    48       |#define __BEGIN_DECLS                                                                            |  9111     4
    49       |#define __END_DECLS                                                                              |  9112     4
    50       |#endif                                                                                           |  9113     4
    51       |                                                                                                 |  9114     4
    52       |/*                                                                                               |  9115     4
    53       | * This code has been put in place to help reduce the addition of                                |  9116     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  9117     4
    55       | * having a compiler-agnostic source tree.                                                       |  9118     4
    56       | */                                                                                              |  9119     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  9120     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  9121     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  9122     4
    60       |                                                                                                 |  9123     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  9124     4
    62       |                                                                                                 |  9125     4
    63       |                                                                                                 |  9126     4
    64       |/*                                                                                               |  9127     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  9128     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  9129     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  9130     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  9131     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  9132     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  9133     4
    71       | * this only works with ANSI C.                                                                  |  9134     4
    72       | *                                                                                               |  9135     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  9136     4
    74       | * first.  It is only available with ANSI C.                                                     |  9137     4
    75       | */                                                                                              |  9138     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  9139     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  9140     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  9141     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  9142     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  9143     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  9144     4
    82       |                                                                                                 |  9145     4
    83       |#define __const         const           /* define reserved names to standard */                  |  9146     4
    84       |#define __signed        signed                                                                   |  9147     4
    85       |#define __volatile      volatile                                                                 |  9148     4
    86       |#if defined(__cplusplus)                                                                         |  9149     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  9150     4
    88       |#else                                                                                            |  9151     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  9152     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   178


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    90       |#endif /* !__cplusplus */                                                                        |  9153     4
    91       |                                                                                                 |  9154     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  9155     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  9156     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  9157     4
    95       |#define __STRING(x)     "x"                                                                      |  9158     4
    96       |                                                                                                 |  9159     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  9160     4
    98       |#define __inline                                                                                 |  9161     4
    99       |#define __signed                                                                                 |  9162     4
   100       |#define __volatile                                                                               |  9163     4
   101       |/*                                                                                               |  9164     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  9165     4
   103       | * deleted from the program and old programs will want them left alone.                          |  9166     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  9167     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  9168     4
   106       | */                                                                                              |  9169     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  9170     4
   108       |#define const                           /* delete ANSI C keywords */                             |  9171     4
   109       |#define inline                                                                                   |  9172     4
   110       |#define signed                                                                                   |  9173     4
   111       |#define volatile                                                                                 |  9174     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  9175     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  9176     4
   114       |                                                                                                 |  9177     4
   115       |/*                                                                                               |  9178     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  9179     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  9180     4
   118       | */                                                                                              |  9181     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  9182     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  9183     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  9184     4
   122       |#define __unused                                                                                 |  9185     4
   123       |#define __aligned(x)                                                                             |  9186     4
   124       |#define __section(x)                                                                             |  9187     4
   125       |#define __nonnull(x)                                                                             |  9188     4
   126       |#define __used                                                                                   |  9189     4
   127       |                                                                                                 |  9190     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  9191     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  9192     4
   130       |                                                                                                 |  9193     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  9194     4
   132       |#define __func__  NULL                                                                           |  9195     4
   133       |#endif                                                                                           |  9196     4
   134       |                                                                                                 |  9197     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  9198     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  9199     4
   137       |#endif                                                                                           |  9200     4
   138       |                                                                                                 |  9201     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  9202     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  9203     4
   141       | **/                                                                                             |  9204     4
   142       |#ifndef __cplusplus                                                                              |  9205     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   179


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   143       |#define __restrict __restrict__                                                                  |  9206     4
   144       |#else                                                                                            |  9207     4
   145       |/* Systems/C++ does not */                                                                       |  9208     4
   146       |#define __restrict                                                                               |  9209     4
   147       |#endif                                                                                           |  9210     4
   148       |                                                                                                 |  9211     4
   149       |/*                                                                                               |  9212     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  9213     4
   151       | */                                                                                              |  9214     4
   152       |#define __predict_true(exp)     (exp)                                                            |  9215     4
   153       |#define __predict_false(exp)    (exp)                                                            |  9216     4
   154       |                                                                                                 |  9217     4
   155       |                                                                                                 |  9218     4
   156       |/*                                                                                               |  9219     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  9220     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  9221     4
   159       | *                                                                                               |  9222     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  9223     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  9224     4
   162       | */                                                                                              |  9225     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  9226     4
   164       |#undef __offsetof                                                                                |  9227     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  9228     4
   166       |#endif                                                                                           |  9229     4
   167       |                                                                                                 |  9230     4
   168       |/*                                                                                               |  9231     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  9232     4
   170       | * or scanf-like arguments.                                                                      |  9233     4
   171       | */                                                                                              |  9234     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  9235     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  9236     4
   174       |#define __format_arg(fmtarg)                                                                     |  9237     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  9238     4
   176       |                                                                                                 |  9239     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  9240     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  9241     4
   179       |                                                                                                 |  9242     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  9243     4
   181       |#define __weak_reference(sym,alias)                                                              |  9244     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  9245     4
   183       |#define __warn_references(sym,msg)                                                               |  9246     4
   184       |                                                                                                 |  9247     4
   185       | /* This places the string into the resulting object.  It should */                              |  9248     4
   186       | /* probably become #pragma ident */                                                             |  9249     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  9250     4
   188       |                                                                                                 |  9251     4
   189       |#ifndef __RCSID                                                                                  |  9252     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  9253     4
   191       |#endif                                                                                           |  9254     4
   192       |                                                                                                 |  9255     4
   193       |/*                                                                                               |  9256     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  9257     4
   195       | * Usage:                                                                                        |  9258     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   180


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  9259     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  9260     4
   198       | */                                                                                              |  9261     4
   199       |#ifndef __SYSCID                                                                                 |  9262     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  9263     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  9264     4
   202       |#else                                                                                            |  9265     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  9266     4
   204       |#endif                                                                                           |  9267     4
   205       |#endif                                                                                           |  9268     4
   206       |                                                                                                 |  9269     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  9270     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  9271     4
   209       |#endif                                                                                           |  9272     4
   210       |                                                                                                 |  9273     4
   211       |#ifndef __COPYRIGHT                                                                              |  9274     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  9275     4
   213       |#endif                                                                                           |  9276     4
   214       |                                                                                                 |  9277     4
   215       |                                                                                                 |  9278     4
   216       |#ifndef __DECONST                                                                                |  9279     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  9280     4
   218       |#endif                                                                                           |  9281     4
   219       |                                                                                                 |  9282     4
   220       |#ifndef __DEVOLATILE                                                                             |  9283     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  9284     4
   222       |#endif                                                                                           |  9285     4
   223       |                                                                                                 |  9286     4
   224       |#ifndef __DEQUALIFY                                                                              |  9287     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  9288     4
   226       |#endif                                                                                           |  9289     4
   227       |                                                                                                 |  9290     4
   228       |                                                                                                 |  9291     4
   229       |/*-                                                                                              |  9292     4
   230       | * The following definitions are an extension of the behavior originally                         |  9293     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  9294     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  9295     4
   233       | * header file is included.                                                                      |  9296     4
   234       | *                                                                                               |  9297     4
   235       | * Here's a quick run-down of the versions:                                                      |  9298     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  9299     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  9300     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  9301     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  9302     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  9303     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  9304     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  9305     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  9306     4
   244       | *                                                                                               |  9307     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  9308     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  9309     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  9310     4
   248       | *                                                                                               |  9311     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   181


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  9312     4
   250       | */                                                                                              |  9313     4
   251       |                                                                                                 |  9314     4
   252       |/*                                                                                               |  9315     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  9316     4
   254       | * available. Also make them available when requested so.                                        |  9317     4
   255       | */                                                                                              |  9318     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  9319     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  9320     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  9321     4
   259       |#define __DF_VISIBLE    1                                                                        |  9322     4
   260       |#else                                                                                            |  9323     4
   261       |#define __DF_VISIBLE    0                                                                        |  9324     4
   262       |#endif                                                                                           |  9325     4
   263       |                                                                                                 |  9326     4
   264       |/*-                                                                                              |  9327     4
   265       | * The following definitions are an extension of the behavior originally                         |  9328     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  9329     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  9330     4
   268       | * header file is included.                                                                      |  9331     4
   269       | *                                                                                               |  9332     4
   270       | * Here's a quick run-down of the versions:                                                      |  9333     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  9334     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  9335     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  9336     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  9337     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  9338     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  9339     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  9340     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  9341     4
   279       | *                                                                                               |  9342     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  9343     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  9344     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  9345     4
   283       | *                                                                                               |  9346     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  9347     4
   285       | */                                                                                              |  9348     4
   286       |                                                                                                 |  9349     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  9350     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  9351     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  9352     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  9353     4
   291       |#endif                                                                                           |  9354     4
   292       |                                                                                                 |  9355     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  9356     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  9357     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  9358     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  9359     4
   297       |#endif                                                                                           |  9360     4
   298       |                                                                                                 |  9361     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  9362     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  9363     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  9364     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   182


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   302       |#define __XSI_VISIBLE           700                                                              |  9365     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  9366     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  9367     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  9368     4
   306       |#define __XSI_VISIBLE           600                                                              |  9369     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  9370     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  9371     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  9372     4
   310       |#define __XSI_VISIBLE           500                                                              |  9373     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  9374     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  9375     4
   313       |#endif                                                                                           |  9376     4
   314       |#endif                                                                                           |  9377     4
   315       |                                                                                                 |  9378     4
   316       |/*                                                                                               |  9379     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  9380     4
   318       | * important.                                                                                    |  9381     4
   319       | */                                                                                              |  9382     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  9383     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  9384     4
   322       |#endif                                                                                           |  9385     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  9386     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  9387     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  9388     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  9389     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  9390     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  9391     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  9392     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  9393     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  9394     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  9395     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  9396     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  9397     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  9398     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  9399     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  9400     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  9401     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  9402     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  9403     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  9404     4
   342       |#else                                                                                            |  9405     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  9406     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  9407     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  9408     4
   346       |#else                                                                                            |  9409     4
   347       |/*-                                                                                              |  9410     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  9411     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  9412     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  9413     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  9414     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  9415     4
   353       | * a test program to print out the values.                                                       |  9416     4
   354       | *                                                                                               |  9417     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   183


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  9418     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  9419     4
   357       | * environment (and in fact we will never get here).                                             |  9420     4
   358       | */                                                                                              |  9421     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  9422     4
   360       |#define __POSIX_VISIBLE         0                                                                |  9423     4
   361       |#define __XSI_VISIBLE           0                                                                |  9424     4
   362       |#define __BSD_VISIBLE           0                                                                |  9425     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  9426     4
   364       |#define __EXT1_VISIBLE          0                                                                |  9427     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  9428     4
   366       |#define __POSIX_VISIBLE         0                                                                |  9429     4
   367       |#define __XSI_VISIBLE           0                                                                |  9430     4
   368       |#define __BSD_VISIBLE           0                                                                |  9431     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  9432     4
   370       |#define __EXT1_VISIBLE          0                                                                |  9433     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  9434     4
   372       |#define __POSIX_VISIBLE         0                                                                |  9435     4
   373       |#define __XSI_VISIBLE           0                                                                |  9436     4
   374       |#define __BSD_VISIBLE           0                                                                |  9437     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  9438     4
   376       |#define __EXT1_VISIBLE          0                                                                |  9439     4
   377       |#else                           /* Default environment: show everything. */                      |  9440     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  9441     4
   379       |#define __XSI_VISIBLE           700                                                              |  9442     4
   380       |#define __BSD_VISIBLE           1                                                                |  9443     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  9444     4
   382       |#define __EXT1_VISIBLE          1                                                                |  9445     4
   383       |#endif                                                                                           |  9446     4
   384       |#endif                                                                                           |  9447     4
   385       |                                                                                                 |  9448     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  9449     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  9450     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  9451     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  9452     4
   390       |#define __EXT1_VISIBLE          1                                                                |  9453     4
   391       |#else                                                                                            |  9454     4
   392       |#define __EXT1_VISIBLE          0                                                                |  9455     4
   393       |#endif                                                                                           |  9456     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  9457     4
   395       |                                                                                                 |  9458     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  9459     4
   397       |#define __NO_TLS 1                                                                               |  9460     4
   398       |#endif                                                                                           |  9461     4
   399       |                                                                                                 |  9462     4
   400       |                                                                                                 |  9463     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  9464     4
   402       |#define __FBSDID(x)                                                                              |  9465     4
   403       |                                                                                                 |  9466     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  9467     4
   405       |#pragma pack(reset)                                                                              |  9468     4
    34       |#include <sys/_types.h>                                                                          |  9469    21
     1       |/* release 2.25.00 */                                                                            |  9470     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   184


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |  9471     6
     3       |/*-                                                                                              |  9472     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  9473     6
     5       | * All rights reserved.                                                                          |  9474     6
     6       | *                                                                                               |  9475     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  9476     6
     8       | * modification, are permitted provided that the following conditions                            |  9477     6
     9       | * are met:                                                                                      |  9478     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  9479     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  9480     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9481     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  9482     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  9483     6
    15       | *                                                                                               |  9484     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  9485     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  9486     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  9487     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  9488     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  9489     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  9490     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  9491     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  9492     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  9493     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  9494     6
    26       | * SUCH DAMAGE.                                                                                  |  9495     6
    27       | *                                                                                               |  9496     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  9497     6
    29       | */                                                                                              |  9498     6
    30       |                                                                                                 |  9499     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  9500     6
    32       |#define _SYS__TYPES_H_                                                                           |  9501     6
    33       |                                                                                                 |  9502     6
    34       |#include <sys/cdefs.h>                                                                           |  9503     6
    35       |#include <machine/_types.h>                                                                      |  9504     6
    36       |                                                                                                 |  9505     6
    37       |/*                                                                                               |  9506     6
    38       | * Standard type definitions.                                                                    |  9507     6
    39       | */                                                                                              |  9508     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  9509     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  9510     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  9511     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  9512     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  9513     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  9514     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  9515     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  9516     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  9517     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  9518     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  9519     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  9520     6
    52       |typedef int             __nl_item;                                                               |  9521     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  9522     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  9523     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   185


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  9524     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  9525     6
    57       |                                        /* signed, because of legacy code */                     |  9526     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  9527     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  9528     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  9529     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  9530     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  9531     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  9532     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  9533     6
    65       |                                                                                                 |  9534     6
    66       |/*                                                                                               |  9535     6
    67       | * Unusual type definitions.                                                                     |  9536     6
    68       | */                                                                                              |  9537     6
    69       |/*                                                                                               |  9538     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  9539     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  9540     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  9541     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  9542     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  9543     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  9544     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  9545     6
    77       | *                                                                                               |  9546     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  9547     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  9548     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  9549     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  9550     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  9551     6
    83       | */                                                                                              |  9552     6
    84       |#ifdef __cplusplus                                                                               |  9553     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  9554     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  9555     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  9556     6
    88       |#else                                                                                            |  9557     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  9558     6
    90       |#endif                                                                                           |  9559     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  9560     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  9561     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  9562     6
    94       |                                                                                                 |  9563     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  9564     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  9565     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  9566     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  9567     6
    99       |#endif                                                                                           |  9568     6
   100       |                                                                                                 |  9569     6
   101       |#if !defined(__cplusplus)                                                                        |  9570     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  9571     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  9572     6
   104       |#endif                                                                                           |  9573     6
   105       |                                                                                                 |  9574     6
   106       |                                                                                                 |  9575     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  9576     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   186


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   108       |                                                                                                 |  9577     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  9578     6
   110       |                                                                                                 |  9579     6
   111       |/*                                                                                               |  9580     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  9581     6
   113       | * stream conversions.                                                                           |  9582     6
   114       | */                                                                                              |  9583     6
   115       |typedef union {                                                                                  |  9584     6
   116       |        char            __mbstate8[128];                                                         |  9585     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  9586     6
   118       |} __mbstate_t;                                                                                   |  9587     6
   119       |                                                                                                 |  9588     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  9589     6
   121       |#pragma pack(reset)                                                                              |  9590     6
    35       |                                                                                                 |  9591    21
    36       |#include <machine/_stdint.h>                                                                     |  9592    21
     1       |/* release 2.25.00 */                                                                            |  9593    22
     2       |#pragma pack()                                                                                   |  9594    22
     3       |/*-                                                                                              |  9595    22
     4       | * Copyright (c) 2001, 2002 Mike Barcroft <mike@FreeBSD.org>                                     |  9596    22
     5       | * Copyright (c) 2001 The NetBSD Foundation, Inc.                                                |  9597    22
     6       | * All rights reserved.                                                                          |  9598    22
     7       | *                                                                                               |  9599    22
     8       | * This code is derived from software contributed to The NetBSD Foundation                       |  9600    22
     9       | * by Klaus Klein.                                                                               |  9601    22
    10       | *                                                                                               |  9602    22
    11       | * Redistribution and use in source and binary forms, with or without                            |  9603    22
    12       | * modification, are permitted provided that the following conditions                            |  9604    22
    13       | * are met:                                                                                      |  9605    22
    14       | * 1. Redistributions of source code must retain the above copyright                             |  9606    22
    15       | *    notice, this list of conditions and the following disclaimer.                              |  9607    22
    16       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9608    22
    17       | *    notice, this list of conditions and the following disclaimer in the                        |  9609    22
    18       | *    documentation and/or other materials provided with the distribution.                       |  9610    22
    19       | * 3. All advertising materials mentioning features or use of this software                      |  9611    22
    20       | *    must display the following acknowledgement:                                                |  9612    22
    21       | *        This product includes software developed by the NetBSD                                 |  9613    22
    22       | *        Foundation, Inc. and its contributors.                                                 |  9614    22
    23       | * 4. Neither the name of The NetBSD Foundation nor the names of its                             |  9615    22
    24       | *    contributors may be used to endorse or promote products derived                            |  9616    22
    25       | *    from this software without specific prior written permission.                              |  9617    22
    26       | *                                                                                               |  9618    22
    27       | * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS                     |  9619    22
    28       | * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED                   |  9620    22
    29       | * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                    |  9621    22
    30       | * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS                     |  9622    22
    31       | * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                        |  9623    22
    32       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          |  9624    22
    33       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      |  9625    22
    34       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       |  9626    22
    35       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       |  9627    22
    36       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    |  9628    22
    37       | * POSSIBILITY OF SUCH DAMAGE.                                                                   |  9629    22
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   187


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    38       | *                                                                                               |  9630    22
    39       | * $FreeBSD: src/sys/i386/include/_stdint.h,v 1.2 2004/05/18 16:04:57                            |  9631    22
    40       | *  stefanf Exp $                                                                                |  9632    22
    41       | */                                                                                              |  9633    22
    42       |                                                                                                 |  9634    22
    43       |#ifndef _MACHINE__STDINT_H_                                                                      |  9635    22
    44       |#define _MACHINE__STDINT_H_                                                                      |  9636    22
    45       |                                                                                                 |  9637    22
    46       |#if 1 /* !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) */                             |  9638    22
    47       |                                                                                                 |  9639    22
    48       |#define INT8_C(c)               (c)                                                              |  9640    22
    49       |#define INT16_C(c)              (c)                                                              |  9641    22
    50       |#define INT32_C(c)              (c)                                                              |  9642    22
    51       |#define INT64_C(c)              (c ## LL)                                                        |  9643    22
    52       |                                                                                                 |  9644    22
    53       |#define UINT8_C(c)              (c)                                                              |  9645    22
    54       |#define UINT16_C(c)             (c)                                                              |  9646    22
    55       |#define UINT32_C(c)             (c ## U)                                                         |  9647    22
    56       |#define UINT64_C(c)             (c ## ULL)                                                       |  9648    22
    57       |                                                                                                 |  9649    22
    58       |#define INTMAX_C(c)             (c ## LL)                                                        |  9650    22
    59       |#define UINTMAX_C(c)            (c ## ULL)                                                       |  9651    22
    60       |                                                                                                 |  9652    22
    61       |#endif /* !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) */                            |  9653    22
    62       |                                                                                                 |  9654    22
    63       |#if 1 /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */                                |  9655    22
    64       |                                                                                                 |  9656    22
    65       |/*                                                                                               |  9657    22
    66       | * ISO/IEC 9899:1999                                                                             |  9658    22
    67       | * 7.18.2.1 Limits of exact-width integer types                                                  |  9659    22
    68       | */                                                                                              |  9660    22
    69       |/* Minimum values of exact-width signed integer types. */                                        |  9661    22
    70       |#define INT8_MIN        (-0x7f-1)                                                                |  9662    22
    71       |#define INT16_MIN       (-0x7fff-1)                                                              |  9663    22
    72       |#define INT32_MIN       (-0x7fffffff-1)                                                          |  9664    22
    73       |#define INT64_MIN       (-0x7fffffffffffffffLL-1)                                                |  9665    22
    74       |                                                                                                 |  9666    22
    75       |/* Maximum values of exact-width signed integer types. */                                        |  9667    22
    76       |#define INT8_MAX        0x7f                                                                     |  9668    22
    77       |#define INT16_MAX       0x7fff                                                                   |  9669    22
    78       |#define INT32_MAX       0x7fffffff                                                               |  9670    22
    79       |#define INT64_MAX       0x7fffffffffffffffLL                                                     |  9671    22
    80       |                                                                                                 |  9672    22
    81       |/* Maximum values of exact-width unsigned integer types. */                                      |  9673    22
    82       |#define UINT8_MAX       0xff                                                                     |  9674    22
    83       |#define UINT16_MAX      0xffff                                                                   |  9675    22
    84       |#define UINT32_MAX      0xffffffffU                                                              |  9676    22
    85       |#define UINT64_MAX      0xffffffffffffffffULL                                                    |  9677    22
    86       |                                                                                                 |  9678    22
    87       |/*                                                                                               |  9679    22
    88       | * ISO/IEC 9899:1999                                                                             |  9680    22
    89       | * 7.18.2.2  Limits of minimum-width integer types                                               |  9681    22
    90       | */                                                                                              |  9682    22
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   188


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    91       |/* Minimum values of minimum-width signed integer types. */                                      |  9683    22
    92       |#define INT_LEAST8_MIN  INT8_MIN                                                                 |  9684    22
    93       |#define INT_LEAST16_MIN INT16_MIN                                                                |  9685    22
    94       |#define INT_LEAST32_MIN INT32_MIN                                                                |  9686    22
    95       |#define INT_LEAST64_MIN INT64_MIN                                                                |  9687    22
    96       |                                                                                                 |  9688    22
    97       |/* Maximum values of minimum-width signed integer types. */                                      |  9689    22
    98       |#define INT_LEAST8_MAX  INT8_MAX                                                                 |  9690    22
    99       |#define INT_LEAST16_MAX INT16_MAX                                                                |  9691    22
   100       |#define INT_LEAST32_MAX INT32_MAX                                                                |  9692    22
   101       |#define INT_LEAST64_MAX INT64_MAX                                                                |  9693    22
   102       |                                                                                                 |  9694    22
   103       |/* Maximum values of minimum-width unsigned integer types. */                                    |  9695    22
   104       |#define UINT_LEAST8_MAX  UINT8_MAX                                                               |  9696    22
   105       |#define UINT_LEAST16_MAX UINT16_MAX                                                              |  9697    22
   106       |#define UINT_LEAST32_MAX UINT32_MAX                                                              |  9698    22
   107       |#define UINT_LEAST64_MAX UINT64_MAX                                                              |  9699    22
   108       |                                                                                                 |  9700    22
   109       |/*                                                                                               |  9701    22
   110       | * ISO/IEC 9899:1999                                                                             |  9702    22
   111       | * 7.18.2.3  Limits of fastest minimum-width integer types                                       |  9703    22
   112       | */                                                                                              |  9704    22
   113       |/* Minimum values of fastest minimum-width signed integer types. */                              |  9705    22
   114       |#define INT_FAST8_MIN   INT32_MIN                                                                |  9706    22
   115       |#define INT_FAST16_MIN  INT32_MIN                                                                |  9707    22
   116       |#define INT_FAST32_MIN  INT32_MIN                                                                |  9708    22
   117       |#define INT_FAST64_MIN  INT64_MIN                                                                |  9709    22
   118       |                                                                                                 |  9710    22
   119       |/* Maximum values of fastest minimum-width signed integer types. */                              |  9711    22
   120       |#define INT_FAST8_MAX   INT32_MAX                                                                |  9712    22
   121       |#define INT_FAST16_MAX  INT32_MAX                                                                |  9713    22
   122       |#define INT_FAST32_MAX  INT32_MAX                                                                |  9714    22
   123       |#define INT_FAST64_MAX  INT64_MAX                                                                |  9715    22
   124       |                                                                                                 |  9716    22
   125       |/* Maximum values of fastest minimum-width unsigned integer types. */                            |  9717    22
   126       |#define UINT_FAST8_MAX  UINT32_MAX                                                               |  9718    22
   127       |#define UINT_FAST16_MAX UINT32_MAX                                                               |  9719    22
   128       |#define UINT_FAST32_MAX UINT32_MAX                                                               |  9720    22
   129       |#define UINT_FAST64_MAX UINT64_MAX                                                               |  9721    22
   130       |                                                                                                 |  9722    22
   131       |/*                                                                                               |  9723    22
   132       | * ISO/IEC 9899:1999                                                                             |  9724    22
   133       | * 7.18.2.4  Limits of integer types capable of holding object pointers                          |  9725    22
   134       | */                                                                                              |  9726    22
   135       |#if __SYSC_64BIT__                                                                               |  9727    22
   136       |#define INTPTR_MIN      INT64_MIN                                                                |  9728    22
   137       |#define INTPTR_MAX      INT64_MAX                                                                |  9729    22
   138       |#define UINTPTR_MAX     UINT64_MAX                                                               |  9730    22
   139       |#else                                                                                            |  9731    22
   140       |#define INTPTR_MIN      INT32_MIN                                                                |  9732    22
   141       |#define INTPTR_MAX      INT32_MAX                                                                |  9733    22
   142       |#define UINTPTR_MAX     UINT32_MAX                                                               |  9734    22
   143       |#endif                                                                                           |  9735    22
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   189


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   144       |                                                                                                 |  9736    22
   144       +                                                                                                 +  9736    22
   145       |/*                                                                                               |  9737    22
   146       | * ISO/IEC 9899:1999                                                                             |  9738    22
   147       | * 7.18.2.5  Limits of greatest-width integer types                                              |  9739    22
   148       | */                                                                                              |  9740    22
   149       |#define INTMAX_MIN      INT64_MIN                                                                |  9741    22
   150       |#define INTMAX_MAX      INT64_MAX                                                                |  9742    22
   151       |#define UINTMAX_MAX     UINT64_MAX                                                               |  9743    22
   152       |                                                                                                 |  9744    22
   153       |/*                                                                                               |  9745    22
   154       | * ISO/IEC 9899:1999                                                                             |  9746    22
   155       | * 7.18.3  Limits of other integer types                                                         |  9747    22
   156       | */                                                                                              |  9748    22
   157       |/* Limits of ptrdiff_t. */                                                                       |  9749    22
   158       |#define PTRDIFF_MIN     INTPTR_MIN                                                               |  9750    22
   159       |#define PTRDIFF_MAX     INTPTR_MAX                                                               |  9751    22
   160       |                                                                                                 |  9752    22
   161       |/* Limits of sig_atomic_t. */                                                                    |  9753    22
   162       |#define SIG_ATOMIC_MIN  INT32_MIN                                                                |  9754    22
   163       |#define SIG_ATOMIC_MAX  INT32_MAX                                                                |  9755    22
   164       |                                                                                                 |  9756    22
   165       |/* Limit of size_t. */                                                                           |  9757    22
   166       |#define SIZE_MAX        UINTPTR_MAX                                                              |  9758    22
   167       |                                                                                                 |  9759    22
   168       |#ifndef WCHAR_MIN /* Also possibly defined in <wchar.h> */                                       |  9760    22
   169       |/* Limits of wchar_t. */                                                                         |  9761    22
   170       |#define WCHAR_MIN       INT32_MIN                                                                |  9762    22
   171       |#define WCHAR_MAX       INT32_MAX                                                                |  9763    22
   172       |#endif                                                                                           |  9764    22
   173       |                                                                                                 |  9765    22
   174       |/* Limits of wint_t. */                                                                          |  9766    22
   175       |#define WINT_MIN        INT32_MIN                                                                |  9767    22
   176       |#define WINT_MAX        INT32_MAX                                                                |  9768    22
   177       |                                                                                                 |  9769    22
   178       |#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */                               |  9770    22
   179       |                                                                                                 |  9771    22
   180       |#endif /* !_MACHINE__STDINT_H_ */                                                                |  9772    22
   181       |#pragma pack(reset)                                                                              |  9773    22
    37       |                                                                                                 |  9774    21
    38       |#ifndef _INT8_T_DECLARED                                                                         |  9775    21
    39       |typedef __int8_t                int8_t;                                                          |  9776    21
    40       |#define _INT8_T_DECLARED                                                                         |  9777    21
    41       |#endif                                                                                           |  9778    21
    42       |                                                                                                 |  9779    21
    43       |#ifndef _INT16_T_DECLARED                                                                        |  9780    21
    44       |typedef __int16_t               int16_t;                                                         |  9781    21
    45       |#define _INT16_T_DECLARED                                                                        |  9782    21
    46       |#endif                                                                                           |  9783    21
    47       |                                                                                                 |  9784    21
    48       |#ifndef _INT32_T_DECLARED                                                                        |  9785    21
    49       |typedef __int32_t               int32_t;                                                         |  9786    21
    50       |#define _INT32_T_DECLARED                                                                        |  9787    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   190


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    51       |#endif                                                                                           |  9788    21
    52       |                                                                                                 |  9789    21
    53       |#ifndef _INT64_T_DECLARED                                                                        |  9790    21
    54       |typedef __int64_t               int64_t;                                                         |  9791    21
    55       |#define _INT64_T_DECLARED                                                                        |  9792    21
    56       |#endif                                                                                           |  9793    21
    57       |                                                                                                 |  9794    21
    58       |#ifndef _UINT8_T_DECLARED                                                                        |  9795    21
    59       |typedef __uint8_t               uint8_t;                                                         |  9796    21
    60       |#define _UINT8_T_DECLARED                                                                        |  9797    21
    61       |#endif                                                                                           |  9798    21
    62       |                                                                                                 |  9799    21
    63       |#ifndef _UINT16_T_DECLARED                                                                       |  9800    21
    64       |typedef __uint16_t              uint16_t;                                                        |  9801    21
    65       |#define _UINT16_T_DECLARED                                                                       |  9802    21
    66       |#endif                                                                                           |  9803    21
    67       |                                                                                                 |  9804    21
    68       |#ifndef _UINT32_T_DECLARED                                                                       |  9805    21
    69       |typedef __uint32_t              uint32_t;                                                        |  9806    21
    70       |#define _UINT32_T_DECLARED                                                                       |  9807    21
    71       |#endif                                                                                           |  9808    21
    72       |                                                                                                 |  9809    21
    73       |#ifndef _UINT64_T_DECLARED                                                                       |  9810    21
    74       |typedef __uint64_t              uint64_t;                                                        |  9811    21
    75       |#define _UINT64_T_DECLARED                                                                       |  9812    21
    76       |#endif                                                                                           |  9813    21
    77       |                                                                                                 |  9814    21
    78       |typedef __int_least8_t          int_least8_t;                                                    |  9815    21
    79       |typedef __int_least16_t         int_least16_t;                                                   |  9816    21
    80       |typedef __int_least32_t         int_least32_t;                                                   |  9817    21
    81       |typedef __int_least64_t         int_least64_t;                                                   |  9818    21
    82       |                                                                                                 |  9819    21
    83       |typedef __uint_least8_t         uint_least8_t;                                                   |  9820    21
    84       |typedef __uint_least16_t        uint_least16_t;                                                  |  9821    21
    85       |typedef __uint_least32_t        uint_least32_t;                                                  |  9822    21
    86       |typedef __uint_least64_t        uint_least64_t;                                                  |  9823    21
    87       |                                                                                                 |  9824    21
    88       |typedef __int_fast8_t           int_fast8_t;                                                     |  9825    21
    89       |typedef __int_fast16_t          int_fast16_t;                                                    |  9826    21
    90       |typedef __int_fast32_t          int_fast32_t;                                                    |  9827    21
    91       |typedef __int_fast64_t          int_fast64_t;                                                    |  9828    21
    92       |                                                                                                 |  9829    21
    93       |typedef __uint_fast8_t          uint_fast8_t;                                                    |  9830    21
    94       |typedef __uint_fast16_t         uint_fast16_t;                                                   |  9831    21
    95       |typedef __uint_fast32_t         uint_fast32_t;                                                   |  9832    21
    96       |typedef __uint_fast64_t         uint_fast64_t;                                                   |  9833    21
    97       |                                                                                                 |  9834    21
    98       |typedef __intmax_t              intmax_t;                                                        |  9835    21
    99       |typedef __uintmax_t             uintmax_t;                                                       |  9836    21
   100       |                                                                                                 |  9837    21
   101       |#ifndef _INTPTR_T_DECLARED                                                                       |  9838    21
   102       |typedef __intptr_t              intptr_t;                                                        |  9839    21
   103       |typedef __uintptr_t             uintptr_t;                                                       |  9840    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   191


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   104       |#define _INTPTR_T_DECLARED                                                                       |  9841    21
   105       |#endif                                                                                           |  9842    21
   106       |                                                                                                 |  9843    21
   107       |#endif /* !_SYS_STDINT_H_ */                                                                     |  9844    21
   108       |#pragma pack(reset)                                                                              |  9845    21
   584       |  typedef  int8_t  LZ4_i8;                                                                       |  9846    19
   585       |  typedef uint8_t  LZ4_byte;                                                                     |  9847    19
   586       |  typedef uint16_t LZ4_u16;                                                                      |  9848    19
   587       |  typedef uint32_t LZ4_u32;                                                                      |  9849    19
   588       |#else                                                                                            |  9850    19
   589       |  typedef   signed char  LZ4_i8;                                                                 |  9851    19
   590       |  typedef unsigned char  LZ4_byte;                                                               |  9852    19
   591       |  typedef unsigned short LZ4_u16;                                                                |  9853    19
   592       |  typedef unsigned int   LZ4_u32;                                                                |  9854    19
   593       |#endif                                                                                           |  9855    19
   594       |                                                                                                 |  9856    19
   595       |typedef struct LZ4_stream_t_internal LZ4_stream_t_internal;                                      |  9857    19
   596       |struct LZ4_stream_t_internal {                                                                   |  9858    19
   597       |    LZ4_u32 hashTable[LZ4_HASH_SIZE_U32];                                                        |  9859    19
   597       +        LZ4_u32 hashTable[(1 << (14-2))];                                                        +  9859    19
   598       |    LZ4_u32 currentOffset;                                                                       |  9860    19
   599       |    LZ4_u32 tableType;                                                                           |  9861    19
   600       |    const LZ4_byte* dictionary;                                                                  |  9862    19
   601       |    const LZ4_stream_t_internal* dictCtx;                                                        |  9863    19
   602       |    LZ4_u32 dictSize;                                                                            |  9864    19
   603       |};                                                                                               |  9865    19
   604       |                                                                                                 |  9866    19
   605       |typedef struct {                                                                                 |  9867    19
   606       |    const LZ4_byte* externalDict;                                                                |  9868    19
   607       |    size_t extDictSize;                                                                          |  9869    19
   608       |    const LZ4_byte* prefixEnd;                                                                   |  9870    19
   609       |    size_t prefixSize;                                                                           |  9871    19
   610       |} LZ4_streamDecode_t_internal;                                                                   |  9872    19
   611       |                                                                                                 |  9873    19
   612       |                                                                                                 |  9874    19
   613       |/*! LZ4_stream_t :                                                                               |  9875    19
   614       | *  Do not use below internal definitions directly !                                             |  9876    19
   615       | *  Declare or allocate an LZ4_stream_t instead.                                                 |  9877    19
   616       | *  LZ4_stream_t can also be created using LZ4_createStream(), which is recommended.             |  9878    19
   617       | *  The structure definition can be convenient for static allocation                             |  9879    19
   618       | *  (on stack, or as part of larger structure).                                                  |  9880    19
   619       | *  Init this structure with LZ4_initStream() before first use.                                  |  9881    19
   620       | *  note : only use this definition in association with static linking !                         |  9882    19
   621       | *  this definition is not API/ABI safe, and may change in future versions.                      |  9883    19
   622       | */                                                                                              |  9884    19
   623       |#define LZ4_STREAMSIZE       16416  /* static size, for inter-version compatibility */           |  9885    19
   624       |#define LZ4_STREAMSIZE_VOIDP (LZ4_STREAMSIZE / sizeof(void*))                                    |  9886    19
   625       |union LZ4_stream_u {                                                                             |  9887    19
   626       |    void* table[LZ4_STREAMSIZE_VOIDP];                                                           |  9888    19
   626       +        void* table[(16416 / sizeof(void*))];                                                    +  9888    19
   627       |    LZ4_stream_t_internal internal_donotuse;                                                     |  9889    19
   628       |}; /* previously typedef'd to LZ4_stream_t */                                                    |  9890    19
   629       |                                                                                                 |  9891    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   192


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   630       |                                                                                                 |  9892    19
   631       |/*! LZ4_initStream() : v1.9.0+                                                                   |  9893    19
   632       | *  An LZ4_stream_t structure must be initialized at least once.                                 |  9894    19
   633       | *  This is automatically done when invoking LZ4_createStream(),                                 |  9895    19
   634       | *  but it's not when the structure is simply declared on stack (for example).                   |  9896    19
   635       | *                                                                                               |  9897    19
   636       | *  Use LZ4_initStream() to properly initialize a newly declared LZ4_stream_t.                   |  9898    19
   637       | *  It can also initialize any arbitrary buffer of sufficient size,                              |  9899    19
   638       | *  and will @return a pointer of proper type upon initialization.                               |  9900    19
   639       | *                                                                                               |  9901    19
   640       | *  Note : initialization fails if size and alignment conditions are not respected.              |  9902    19
   641       | *         In which case, the function will @return NULL.                                        |  9903    19
   642       | *  Note2: An LZ4_stream_t structure guarantees correct alignment and size.                      |  9904    19
   643       | *  Note3: Before v1.9.0, use LZ4_resetStream() instead                                          |  9905    19
   644       | */                                                                                              |  9906    19
   645       |LZ4LIB_API LZ4_stream_t* LZ4_initStream (void* buffer, size_t size);                             |  9907    19
   645       + LZ4_stream_t* LZ4_initStream (void* buffer, size_t size);                                       +  9907    19
   646       |                                                                                                 |  9908    19
   647       |                                                                                                 |  9909    19
   648       |/*! LZ4_streamDecode_t :                                                                         |  9910    19
   649       | *  information structure to track an LZ4 stream during decompression.                           |  9911    19
   650       | *  init this structure  using LZ4_setStreamDecode() before first use.                           |  9912    19
   651       | *  note : only use in association with static linking !                                         |  9913    19
   652       | *         this definition is not API/ABI safe,                                                  |  9914    19
   653       | *         and may change in a future version !                                                  |  9915    19
   654       | */                                                                                              |  9916    19
   655       |#define LZ4_STREAMDECODESIZE_U64 (4 + ((sizeof(void*)==16) ? 2 : 0) /*AS-400*/ )                 |  9917    19
   656       |#define LZ4_STREAMDECODESIZE     (LZ4_STREAMDECODESIZE_U64 * sizeof(unsigned long long))         |  9918    19
   657       |union LZ4_streamDecode_u {                                                                       |  9919    19
   658       |    unsigned long long table[LZ4_STREAMDECODESIZE_U64];                                          |  9920    19
   658       +        unsigned long long table[(4 + ((sizeof(void*)==16) ? 2 : 0) )];                          +  9920    19
   659       |    LZ4_streamDecode_t_internal internal_donotuse;                                               |  9921    19
   660       |} ;   /* previously typedef'd to LZ4_streamDecode_t */                                           |  9922    19
   661       |                                                                                                 |  9923    19
   662       |                                                                                                 |  9924    19
   663       |                                                                                                 |  9925    19
   664       |/*-************************************                                                          |  9926    19
   665       |*  Obsolete Functions                                                                            |  9927    19
   666       |**************************************/                                                          |  9928    19
   667       |                                                                                                 |  9929    19
   668       |/*! Deprecation warnings                                                                         |  9930    19
   669       | *                                                                                               |  9931    19
   670       | *  Deprecated functions make the compiler generate a warning when invoked.                      |  9932    19
   671       | *  This is meant to invite users to update their source code.                                   |  9933    19
   672       | *  Should deprecation warnings be a problem, it is generally possible to disable them,          |  9934    19
   673       | *  typically with -Wno-deprecated-declarations for gcc                                          |  9935    19
   674       | *  or _CRT_SECURE_NO_WARNINGS in Visual.                                                        |  9936    19
   675       | *                                                                                               |  9937    19
   676       | *  Another method is to define LZ4_DISABLE_DEPRECATE_WARNINGS                                   |  9938    19
   677       | *  before including the header file.                                                            |  9939    19
   678       | */                                                                                              |  9940    19
   679       |#ifdef LZ4_DISABLE_DEPRECATE_WARNINGS                                                            |  9941    19
   680       |#  define LZ4_DEPRECATED(message)   /* disable deprecation warnings */                           |  9942    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   193


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   681       |#else                                                                                            |  9943    19
   682       |#  if defined (__cplusplus) && (__cplusplus >= 201402) /* C++14 or greater */                    |  9944    19
   683       |#    define LZ4_DEPRECATED(message) [[deprecated(message)]]                                      |  9945    19
   684       |#  elif defined(_MSC_VER)                                                                        |  9946    19
   685       |#    define LZ4_DEPRECATED(message) __declspec(deprecated(message))                              |  9947    19
   686       |#  elif defined(__clang__) || (defined(__GNUC__) && (__GNUC__ * 10 + __GNUC_MINOR__ >= 45))      |  9948    19
   687       |#    define LZ4_DEPRECATED(message) __attribute__((deprecated(message)))                         |  9949    19
   688       |#  elif defined(__GNUC__) && (__GNUC__ * 10 + __GNUC_MINOR__ >= 31)                              |  9950    19
   689       |#    define LZ4_DEPRECATED(message) __attribute__((deprecated))                                  |  9951    19
   690       |#  else                                                                                          |  9952    19
   691       |#    pragma message("WARNING: LZ4_DEPRECATED needs custom implementation for this compiler")     |  9953    19
   692       |#    define LZ4_DEPRECATED(message)   /* disabled */                                             |  9954    19
   693       |#  endif                                                                                         |  9955    19
   694       |#endif /* LZ4_DISABLE_DEPRECATE_WARNINGS */                                                      |  9956    19
   695       |                                                                                                 |  9957    19
   696       |/*! Obsolete compression functions (since v1.7.3) */                                             |  9958    19
   697       |LZ4_DEPRECATED("use LZ4_compress_default() instead")       LZ4LIB_API int LZ4_compress           |  9959    19
   697       +    (const char* src, char* dest, int srcSize);                                                  +  9959    19
   697       +        int LZ4_compress               (const char* src, char* dest, int srcSize);               +  9959    19
   698       |LZ4_DEPRECATED("use LZ4_compress_default() instead")       LZ4LIB_API int LZ4_compress_limitedOut|  9960    19
   698       +put (const char* src, char* dest, int srcSize, int maxOutputSize);                               +  9960    19
   698       +        int LZ4_compress_limitedOutput (const char* src, char* dest, int srcSize, int maxOutputSi+  9960    19
   698       +ze);                                                                                             +  9960    19
   699       |LZ4_DEPRECATED("use LZ4_compress_fast_extState() instead") LZ4LIB_API int LZ4_compress_withState |  9961    19
   699       +              (void* state, const char* source, char* dest, int inputSize);                      +  9961    19
   699       +  int LZ4_compress_withState               (void* state, const char* source, char* dest, int inpu+  9961    19
   699       +tSize);                                                                                          +  9961    19
   700       |LZ4_DEPRECATED("use LZ4_compress_fast_extState() instead") LZ4LIB_API int LZ4_compress_limitedOut|  9962    19
   700       +put_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);   +  9962    19
   700       +  int LZ4_compress_limitedOutput_withState (void* state, const char* source, char* dest, int inpu+  9962    19
   700       +tSize, int maxOutputSize);                                                                       +  9962    19
   701       |LZ4_DEPRECATED("use LZ4_compress_fast_continue() instead") LZ4LIB_API int LZ4_compress_continue  |  9963    19
   701       +              (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize);      +  9963    19
   701       +  int LZ4_compress_continue                (LZ4_stream_t* LZ4_streamPtr, const char* source, char+  9963    19
   701       +* dest, int inputSize);                                                                          +  9963    19
   702       |LZ4_DEPRECATED("use LZ4_compress_fast_continue() instead") LZ4LIB_API int LZ4_compress_limitedOut|  9964    19
   702       +put_continue  (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize, int ma+  9964    19
   702       +xOutputSize);                                                                                    +  9964    19
   702       +  int LZ4_compress_limitedOutput_continue  (LZ4_stream_t* LZ4_streamPtr, const char* source, char+  9964    19
   702       +* dest, int inputSize, int maxOutputSize);                                                       +  9964    19
   703       |                                                                                                 |  9965    19
   704       |/*! Obsolete decompression functions (since v1.8.0) */                                           |  9966    19
   705       |LZ4_DEPRECATED("use LZ4_decompress_fast() instead") LZ4LIB_API int LZ4_uncompress (const char* so|  9967    19
   705       +urce, char* dest, int outputSize);                                                               +  9967    19
   705       +  int LZ4_uncompress (const char* source, char* dest, int outputSize);                           +  9967    19
   706       |LZ4_DEPRECATED("use LZ4_decompress_safe() instead") LZ4LIB_API int LZ4_uncompress_unknownOutputSi|  9968    19
   706       +ze (const char* source, char* dest, int isize, int maxOutputSize);                               +  9968    19
   706       +  int LZ4_uncompress_unknownOutputSize (const char* source, char* dest, int isize, int maxOutputS+  9968    19
   706       +ize);                                                                                            +  9968    19
   707       |                                                                                                 |  9969    19
   708       |/* Obsolete streaming functions (since v1.7.0)                                                   |  9970    19
   709       | * degraded functionality; do not use!                                                           |  9971    19
   710       | *                                                                                               |  9972    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   194


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   711       | * In order to perform streaming compression, these functions depended on data                   |  9973    19
   712       | * that is no longer tracked in the state. They have been preserved as well as                   |  9974    19
   713       | * possible: using them will still produce a correct output. However, they don't                 |  9975    19
   714       | * actually retain any history between compression calls. The compression ratio                  |  9976    19
   715       | * achieved will therefore be no better than compressing each chunk                              |  9977    19
   716       | * independently.                                                                                |  9978    19
   717       | */                                                                                              |  9979    19
   718       |LZ4_DEPRECATED("Use LZ4_createStream() instead") LZ4LIB_API void* LZ4_create (char* inputBuffer);|  9980    19
   718       +  void* LZ4_create (char* inputBuffer);                                                          +  9980    19
   719       |LZ4_DEPRECATED("Use LZ4_createStream() instead") LZ4LIB_API int   LZ4_sizeofStreamState(void);   |  9981    19
   719       +  int   LZ4_sizeofStreamState(void);                                                             +  9981    19
   720       |LZ4_DEPRECATED("Use LZ4_resetStream() instead")  LZ4LIB_API int   LZ4_resetStreamState(void* stat|  9982    19
   720       +e, char* inputBuffer);                                                                           +  9982    19
   720       +   int   LZ4_resetStreamState(void* state, char* inputBuffer);                                   +  9982    19
   721       |LZ4_DEPRECATED("Use LZ4_saveDict() instead")     LZ4LIB_API char* LZ4_slideInputBuffer (void* sta|  9983    19
   721       +te);                                                                                             +  9983    19
   721       +      char* LZ4_slideInputBuffer (void* state);                                                  +  9983    19
   722       |                                                                                                 |  9984    19
   723       |/*! Obsolete streaming decoding functions (since v1.7.0) */                                      |  9985    19
   724       |LZ4_DEPRECATED("use LZ4_decompress_safe_usingDict() instead") LZ4LIB_API int LZ4_decompress_safe_|  9986    19
   724       +withPrefix64k (const char* src, char* dst, int compressedSize, int maxDstSize);                  +  9986    19
   724       +  int LZ4_decompress_safe_withPrefix64k (const char* src, char* dst, int compressedSize, int maxD+  9986    19
   724       +stSize);                                                                                         +  9986    19
   725       |LZ4_DEPRECATED("use LZ4_decompress_fast_usingDict() instead") LZ4LIB_API int LZ4_decompress_fast_|  9987    19
   725       +withPrefix64k (const char* src, char* dst, int originalSize);                                    +  9987    19
   725       +  int LZ4_decompress_fast_withPrefix64k (const char* src, char* dst, int originalSize);          +  9987    19
   726       |                                                                                                 |  9988    19
   727       |/*! Obsolete LZ4_decompress_fast variants (since v1.9.0) :                                       |  9989    19
   728       | *  These functions used to be faster than LZ4_decompress_safe(),                                |  9990    19
   729       | *  but this is no longer the case. They are now slower.                                         |  9991    19
   730       | *  This is because LZ4_decompress_fast() doesn't know the input size,                           |  9992    19
   731       | *  and therefore must progress more cautiously into the input buffer to not read beyond the end |  9993    19
   731       +of block.                                                                                        +  9993    19
   732       | *  On top of that `LZ4_decompress_fast()` is not protected vs malformed or malicious inputs, mak|  9994    19
   732       +ing it a security liability.                                                                     +  9994    19
   733       | *  As a consequence, LZ4_decompress_fast() is strongly discouraged, and deprecated.             |  9995    19
   734       | *                                                                                               |  9996    19
   735       | *  The last remaining LZ4_decompress_fast() specificity is that                                 |  9997    19
   736       | *  it can decompress a block without knowing its compressed size.                               |  9998    19
   737       | *  Such functionality can be achieved in a more secure manner                                   |  9999    19
   738       | *  by employing LZ4_decompress_safe_partial().                                                  | 10000    19
   739       | *                                                                                               | 10001    19
   740       | *  Parameters:                                                                                  | 10002    19
   741       | *  originalSize : is the uncompressed size to regenerate.                                       | 10003    19
   742       | *                 `dst` must be already allocated, its size must be >= 'originalSize' bytes.    | 10004    19
   743       | * @return : number of bytes read from source buffer (== compressed size).                       | 10005    19
   744       | *           The function expects to finish at block's end exactly.                              | 10006    19
   745       | *           If the source stream is detected malformed, the function stops decoding and returns | 10007    19
   745       +a negative result.                                                                               + 10007    19
   746       | *  note : LZ4_decompress_fast*() requires originalSize. Thanks to this information, it never wri| 10008    19
   746       +tes past the output buffer.                                                                      + 10008    19
   747       | *         However, since it doesn't know its 'src' size, it may read an unknown amount of input,| 10009    19
   747       + past input buffer bounds.                                                                       + 10009    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   195


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   748       | *         Also, since match offsets are not validated, match reads from 'src' may underflow too.| 10010    19
   749       | *         These issues never happen if input (compressed) data is correct.                      | 10011    19
   750       | *         But they may happen if input data is invalid (error or intentional tampering).        | 10012    19
   751       | *         As a consequence, use these functions in trusted environments with trusted data **only| 10013    19
   751       +**.                                                                                              + 10013    19
   752       | */                                                                                              | 10014    19
   753       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe() inst| 10015    19
   753       +ead")                                                                                            + 10015    19
   753       +                                                                                                 + 10015    19
   754       |LZ4LIB_API int LZ4_decompress_fast (const char* src, char* dst, int originalSize);               | 10016    19
   754       + int LZ4_decompress_fast (const char* src, char* dst, int originalSize);                         + 10016    19
   755       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe_contin| 10017    19
   755       +ue() instead")                                                                                   + 10017    19
   755       +                                                                                                 + 10017    19
   756       |LZ4LIB_API int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* sr| 10018    19
   756       +c, char* dst, int originalSize);                                                                 + 10018    19
   756       + int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* src, char* d+ 10018    19
   756       +st, int originalSize);                                                                           + 10018    19
   757       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe_usingD| 10019    19
   757       +ict() instead")                                                                                  + 10019    19
   757       +                                                                                                 + 10019    19
   758       |LZ4LIB_API int LZ4_decompress_fast_usingDict (const char* src, char* dst, int originalSize, const| 10020    19
   758       + char* dictStart, int dictSize);                                                                 + 10020    19
   758       + int LZ4_decompress_fast_usingDict (const char* src, char* dst, int originalSize, const char* dic+ 10020    19
   758       +tStart, int dictSize);                                                                           + 10020    19
   759       |                                                                                                 | 10021    19
   760       |/*! LZ4_resetStream() :                                                                          | 10022    19
   761       | *  An LZ4_stream_t structure must be initialized at least once.                                 | 10023    19
   762       | *  This is done with LZ4_initStream(), or LZ4_resetStream().                                    | 10024    19
   763       | *  Consider switching to LZ4_initStream(),                                                      | 10025    19
   764       | *  invoking LZ4_resetStream() will trigger deprecation warnings in the future.                  | 10026    19
   765       | */                                                                                              | 10027    19
   766       |LZ4LIB_API void LZ4_resetStream (LZ4_stream_t* streamPtr);                                       | 10028    19
   766       + void LZ4_resetStream (LZ4_stream_t* streamPtr);                                                 + 10028    19
   767       |                                                                                                 | 10029    19
   768       |                                                                                                 | 10030    19
   769       |#endif /* LZ4_H_98237428734687 */                                                                | 10031    19
   770       |                                                                                                 | 10032    19
   771       |                                                                                                 | 10033    19
   772       |#if defined (__cplusplus)                                                                        | 10034    19
   773       |}                                                                                                | 10035    19
   774       |#endif                                                                                           | 10036    19
    44       |                                                                                                 | 10037    18
    45       |                                                                                                 | 10038    18
    46       |/* --- Useful constants --- */                                                                   | 10039    18
    47       |#define LZ4HC_CLEVEL_MIN         3                                                               | 10040    18
    48       |#define LZ4HC_CLEVEL_DEFAULT     9                                                               | 10041    18
    49       |#define LZ4HC_CLEVEL_OPT_MIN    10                                                               | 10042    18
    50       |#define LZ4HC_CLEVEL_MAX        12                                                               | 10043    18
    51       |                                                                                                 | 10044    18
    52       |                                                                                                 | 10045    18
    53       |/*-************************************                                                          | 10046    18
    54       | *  Block Compression                                                                            | 10047    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   196


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       | **************************************/                                                         | 10048    18
    56       |/*! LZ4_compress_HC() :                                                                          | 10049    18
    57       | *  Compress data from `src` into `dst`, using the powerful but slower "HC" algorithm.           | 10050    18
    58       | * `dst` must be already allocated.                                                              | 10051    18
    59       | *  Compression is guaranteed to succeed if `dstCapacity >= LZ4_compressBound(srcSize)` (see "lz4| 10052    18
    59       +.h")                                                                                             + 10052    18
    60       | *  Max supported `srcSize` value is LZ4_MAX_INPUT_SIZE (see "lz4.h")                            | 10053    18
    61       | * `compressionLevel` : any value between 1 and LZ4HC_CLEVEL_MAX will work.                      | 10054    18
    62       | *                      Values > LZ4HC_CLEVEL_MAX behave the same as LZ4HC_CLEVEL_MAX.           | 10055    18
    63       | * @return : the number of bytes written into 'dst'                                              | 10056    18
    64       | *           or 0 if compression fails.                                                          | 10057    18
    65       | */                                                                                              | 10058    18
    66       |LZ4LIB_API int LZ4_compress_HC (const char* src, char* dst, int srcSize, int dstCapacity, int com| 10059    18
    66       +pressionLevel);                                                                                  + 10059    18
    66       + int LZ4_compress_HC (const char* src, char* dst, int srcSize, int dstCapacity, int compressionLe+ 10059    18
    66       +vel);                                                                                            + 10059    18
    67       |                                                                                                 | 10060    18
    68       |                                                                                                 | 10061    18
    69       |/* Note :                                                                                        | 10062    18
    70       | *   Decompression functions are provided within "lz4.h" (BSD license)                           | 10063    18
    71       | */                                                                                              | 10064    18
    72       |                                                                                                 | 10065    18
    73       |                                                                                                 | 10066    18
    74       |/*! LZ4_compress_HC_extStateHC() :                                                               | 10067    18
    75       | *  Same as LZ4_compress_HC(), but using an externally allocated memory segment for `state`.     | 10068    18
    76       | * `state` size is provided by LZ4_sizeofStateHC().                                              | 10069    18
    77       | *  Memory segment must be aligned on 8-bytes boundaries (which a normal malloc() should do prope| 10070    18
    77       +rly).                                                                                            + 10070    18
    78       | */                                                                                              | 10071    18
    79       |LZ4LIB_API int LZ4_sizeofStateHC(void);                                                          | 10072    18
    79       + int LZ4_sizeofStateHC(void);                                                                    + 10072    18
    80       |LZ4LIB_API int LZ4_compress_HC_extStateHC(void* stateHC, const char* src, char* dst, int srcSize,| 10073    18
    80       + int maxDstSize, int compressionLevel);                                                          + 10073    18
    80       + int LZ4_compress_HC_extStateHC(void* stateHC, const char* src, char* dst, int srcSize, int maxDs+ 10073    18
    80       +tSize, int compressionLevel);                                                                    + 10073    18
    81       |                                                                                                 | 10074    18
    82       |                                                                                                 | 10075    18
    83       |/*! LZ4_compress_HC_destSize() : v1.9.0+                                                         | 10076    18
    84       | *  Will compress as much data as possible from `src`                                            | 10077    18
    85       | *  to fit into `targetDstSize` budget.                                                          | 10078    18
    86       | *  Result is provided in 2 parts :                                                              | 10079    18
    87       | * @return : the number of bytes written into 'dst' (necessarily <= targetDstSize)               | 10080    18
    88       | *           or 0 if compression fails.                                                          | 10081    18
    89       | * `srcSizePtr` : on success, *srcSizePtr is updated to indicate how much bytes were read from `s| 10082    18
    89       +rc`                                                                                              + 10082    18
    90       | */                                                                                              | 10083    18
    91       |LZ4LIB_API int LZ4_compress_HC_destSize(void* stateHC,                                           | 10084    18
    91       + int LZ4_compress_HC_destSize(void* stateHC,                                                     + 10084    18
    92       |                                  const char* src, char* dst,                                    | 10085    18
    93       |                                        int* srcSizePtr, int targetDstSize,                      | 10086    18
    94       |                                        int compressionLevel);                                   | 10087    18
    95       |                                                                                                 | 10088    18
    96       |                                                                                                 | 10089    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   197


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    97       |/*-************************************                                                          | 10090    18
    98       | *  Streaming Compression                                                                        | 10091    18
    99       | *  Bufferless synchronous API                                                                   | 10092    18
   100       | **************************************/                                                         | 10093    18
   101       | typedef union LZ4_streamHC_u LZ4_streamHC_t;   /* incomplete type (defined later) */            | 10094    18
   102       |                                                                                                 | 10095    18
   103       |/*! LZ4_createStreamHC() and LZ4_freeStreamHC() :                                                | 10096    18
   104       | *  These functions create and release memory for LZ4 HC streaming state.                        | 10097    18
   105       | *  Newly created states are automatically initialized.                                          | 10098    18
   106       | *  A same state can be used multiple times consecutively,                                       | 10099    18
   107       | *  starting with LZ4_resetStreamHC_fast() to start a new stream of blocks.                      | 10100    18
   108       | */                                                                                              | 10101    18
   109       |LZ4LIB_API LZ4_streamHC_t* LZ4_createStreamHC(void);                                             | 10102    18
   109       + LZ4_streamHC_t* LZ4_createStreamHC(void);                                                       + 10102    18
   110       |LZ4LIB_API int             LZ4_freeStreamHC (LZ4_streamHC_t* streamHCPtr);                       | 10103    18
   110       + int             LZ4_freeStreamHC (LZ4_streamHC_t* streamHCPtr);                                 + 10103    18
   111       |                                                                                                 | 10104    18
   112       |/*                                                                                               | 10105    18
   113       |  These functions compress data in successive blocks of any size,                                | 10106    18
   114       |  using previous blocks as dictionary, to improve compression ratio.                             | 10107    18
   115       |  One key assumption is that previous blocks (up to 64 KB) remain read-accessible while compressi| 10108    18
   115       +ng next blocks.                                                                                  + 10108    18
   116       |  There is an exception for ring buffers, which can be smaller than 64 KB.                       | 10109    18
   117       |  Ring-buffer scenario is automatically detected and handled within LZ4_compress_HC_continue().  | 10110    18
   118       |                                                                                                 | 10111    18
   119       |  Before starting compression, state must be allocated and properly initialized.                 | 10112    18
   120       |  LZ4_createStreamHC() does both, though compression level is set to LZ4HC_CLEVEL_DEFAULT.       | 10113    18
   121       |                                                                                                 | 10114    18
   122       |  Selecting the compression level can be done with LZ4_resetStreamHC_fast() (starts a new stream)| 10115    18
   123       |  or LZ4_setCompressionLevel() (anytime, between blocks in the same stream) (experimental).      | 10116    18
   124       |  LZ4_resetStreamHC_fast() only works on states which have been properly initialized at least onc| 10117    18
   124       +e,                                                                                               + 10117    18
   125       |  which is automatically the case when state is created using LZ4_createStreamHC().              | 10118    18
   126       |                                                                                                 | 10119    18
   127       |  After reset, a first "fictional block" can be designated as initial dictionary,                | 10120    18
   128       |  using LZ4_loadDictHC() (Optional).                                                             | 10121    18
   129       |                                                                                                 | 10122    18
   130       |  Invoke LZ4_compress_HC_continue() to compress each successive block.                           | 10123    18
   131       |  The number of blocks is unlimited.                                                             | 10124    18
   132       |  Previous input blocks, including initial dictionary when present,                              | 10125    18
   133       |  must remain accessible and unmodified during compression.                                      | 10126    18
   134       |                                                                                                 | 10127    18
   135       |  It's allowed to update compression level anytime between blocks,                               | 10128    18
   136       |  using LZ4_setCompressionLevel() (experimental).                                                | 10129    18
   137       |                                                                                                 | 10130    18
   138       |  'dst' buffer should be sized to handle worst case scenarios                                    | 10131    18
   139       |  (see LZ4_compressBound(), it ensures compression success).                                     | 10132    18
   140       |  In case of failure, the API does not guarantee recovery,                                       | 10133    18
   141       |  so the state _must_ be reset.                                                                  | 10134    18
   142       |  To ensure compression success                                                                  | 10135    18
   143       |  whenever `dst` buffer size cannot be made >= LZ4_compressBound(),                              | 10136    18
   144       |  consider using LZ4_compress_HC_continue_destSize().                                            | 10137    18
   145       |                                                                                                 | 10138    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   198


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   146       |  Whenever previous input blocks can't be preserved unmodified in-place during compression of nex| 10139    18
   146       +t blocks,                                                                                        + 10139    18
   147       |  it's possible to copy the last blocks into a more stable memory space, using LZ4_saveDictHC(). | 10140    18
   148       |  Return value of LZ4_saveDictHC() is the size of dictionary effectively saved into 'safeBuffer' | 10141    18
   148       +(<= 64 KB)                                                                                       + 10141    18
   149       |                                                                                                 | 10142    18
   150       |  After completing a streaming compression,                                                      | 10143    18
   151       |  it's possible to start a new stream of blocks, using the same LZ4_streamHC_t state,            | 10144    18
   152       |  just by resetting it, using LZ4_resetStreamHC_fast().                                          | 10145    18
   153       |*/                                                                                               | 10146    18
   154       |                                                                                                 | 10147    18
   155       |LZ4LIB_API void LZ4_resetStreamHC_fast(LZ4_streamHC_t* streamHCPtr, int compressionLevel);   /* v| 10148    18
   155       +1.9.0+ */                                                                                        + 10148    18
   155       + void LZ4_resetStreamHC_fast(LZ4_streamHC_t* streamHCPtr, int compressionLevel);                 + 10148    18
   156       |LZ4LIB_API int  LZ4_loadDictHC (LZ4_streamHC_t* streamHCPtr, const char* dictionary, int dictSize| 10149    18
   156       +);                                                                                               + 10149    18
   156       + int  LZ4_loadDictHC (LZ4_streamHC_t* streamHCPtr, const char* dictionary, int dictSize);        + 10149    18
   157       |                                                                                                 | 10150    18
   158       |LZ4LIB_API int LZ4_compress_HC_continue (LZ4_streamHC_t* streamHCPtr,                            | 10151    18
   158       + int LZ4_compress_HC_continue (LZ4_streamHC_t* streamHCPtr,                                      + 10151    18
   159       |                                   const char* src, char* dst,                                   | 10152    18
   160       |                                         int srcSize, int maxDstSize);                           | 10153    18
   161       |                                                                                                 | 10154    18
   162       |/*! LZ4_compress_HC_continue_destSize() : v1.9.0+                                                | 10155    18
   163       | *  Similar to LZ4_compress_HC_continue(),                                                       | 10156    18
   164       | *  but will read as much data as possible from `src`                                            | 10157    18
   165       | *  to fit into `targetDstSize` budget.                                                          | 10158    18
   166       | *  Result is provided into 2 parts :                                                            | 10159    18
   167       | * @return : the number of bytes written into 'dst' (necessarily <= targetDstSize)               | 10160    18
   168       | *           or 0 if compression fails.                                                          | 10161    18
   169       | * `srcSizePtr` : on success, *srcSizePtr will be updated to indicate how much bytes were read fr| 10162    18
   169       +om `src`.                                                                                        + 10162    18
   170       | *           Note that this function may not consume the entire input.                           | 10163    18
   171       | */                                                                                              | 10164    18
   172       |LZ4LIB_API int LZ4_compress_HC_continue_destSize(LZ4_streamHC_t* LZ4_streamHCPtr,                | 10165    18
   172       + int LZ4_compress_HC_continue_destSize(LZ4_streamHC_t* LZ4_streamHCPtr,                          + 10165    18
   173       |                                           const char* src, char* dst,                           | 10166    18
   174       |                                                 int* srcSizePtr, int targetDstSize);            | 10167    18
   175       |                                                                                                 | 10168    18
   176       |LZ4LIB_API int LZ4_saveDictHC (LZ4_streamHC_t* streamHCPtr, char* safeBuffer, int maxDictSize);  | 10169    18
   176       + int LZ4_saveDictHC (LZ4_streamHC_t* streamHCPtr, char* safeBuffer, int maxDictSize);            + 10169    18
   177       |                                                                                                 | 10170    18
   178       |                                                                                                 | 10171    18
   179       |                                                                                                 | 10172    18
   180       |/*^**********************************************                                                | 10173    18
   181       | * !!!!!!   STATIC LINKING ONLY   !!!!!!                                                         | 10174    18
   182       | ***********************************************/                                                | 10175    18
   183       |                                                                                                 | 10176    18
   184       |/*-******************************************************************                            | 10177    18
   185       | * PRIVATE DEFINITIONS :                                                                         | 10178    18
   186       | * Do not use these definitions directly.                                                        | 10179    18
   187       | * They are merely exposed to allow static allocation of `LZ4_streamHC_t`.                       | 10180    18
   188       | * Declare an `LZ4_streamHC_t` directly, rather than any type below.                             | 10181    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   199


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   189       | * Even then, only do so in the context of static linking, as definitions may change between vers| 10182    18
   189       +ions.                                                                                            + 10182    18
   190       | ********************************************************************/                           | 10183    18
   191       |                                                                                                 | 10184    18
   192       |#define LZ4HC_DICTIONARY_LOGSIZE 16                                                              | 10185    18
   193       |#define LZ4HC_MAXD (1<<LZ4HC_DICTIONARY_LOGSIZE)                                                 | 10186    18
   194       |#define LZ4HC_MAXD_MASK (LZ4HC_MAXD - 1)                                                         | 10187    18
   195       |                                                                                                 | 10188    18
   196       |#define LZ4HC_HASH_LOG 15                                                                        | 10189    18
   197       |#define LZ4HC_HASHTABLESIZE (1 << LZ4HC_HASH_LOG)                                                | 10190    18
   198       |#define LZ4HC_HASH_MASK (LZ4HC_HASHTABLESIZE - 1)                                                | 10191    18
   199       |                                                                                                 | 10192    18
   200       |                                                                                                 | 10193    18
   201       |typedef struct LZ4HC_CCtx_internal LZ4HC_CCtx_internal;                                          | 10194    18
   202       |struct LZ4HC_CCtx_internal                                                                       | 10195    18
   203       |{                                                                                                | 10196    18
   204       |    LZ4_u32   hashTable[LZ4HC_HASHTABLESIZE];                                                    | 10197    18
   204       +        LZ4_u32   hashTable[(1 << 15)];                                                          + 10197    18
   205       |    LZ4_u16   chainTable[LZ4HC_MAXD];                                                            | 10198    18
   205       +        LZ4_u16   chainTable[(1<<16)];                                                           + 10198    18
   206       |    const LZ4_byte* end;       /* next block here to continue on current prefix */               | 10199    18
   207       |    const LZ4_byte* base;      /* All index relative to this position */                         | 10200    18
   208       |    const LZ4_byte* dictBase;  /* alternate base for extDict */                                  | 10201    18
   209       |    LZ4_u32   dictLimit;       /* below that point, need extDict */                              | 10202    18
   210       |    LZ4_u32   lowLimit;        /* below that point, no more dict */                              | 10203    18
   211       |    LZ4_u32   nextToUpdate;    /* index from which to continue dictionary update */              | 10204    18
   212       |    short     compressionLevel;                                                                  | 10205    18
   213       |    LZ4_i8    favorDecSpeed;   /* favor decompression speed if this flag set,                    | 10206    18
   214       |                                  otherwise, favor compression ratio */                          | 10207    18
   215       |    LZ4_i8    dirty;           /* stream has to be fully reset if this flag is set */            | 10208    18
   216       |    const LZ4HC_CCtx_internal* dictCtx;                                                          | 10209    18
   217       |};                                                                                               | 10210    18
   218       |                                                                                                 | 10211    18
   219       |                                                                                                 | 10212    18
   220       |/* Do not use these definitions directly !                                                       | 10213    18
   221       | * Declare or allocate an LZ4_streamHC_t instead.                                                | 10214    18
   222       | */                                                                                              | 10215    18
   223       |#define LZ4_STREAMHCSIZE       262200  /* static size, for inter-version compatibility */        | 10216    18
   224       |#define LZ4_STREAMHCSIZE_VOIDP (LZ4_STREAMHCSIZE / sizeof(void*))                                | 10217    18
   225       |union LZ4_streamHC_u {                                                                           | 10218    18
   226       |    void* table[LZ4_STREAMHCSIZE_VOIDP];                                                         | 10219    18
   226       +        void* table[(262200 / sizeof(void*))];                                                   + 10219    18
   227       |    LZ4HC_CCtx_internal internal_donotuse;                                                       | 10220    18
   228       |}; /* previously typedef'd to LZ4_streamHC_t */                                                  | 10221    18
   229       |                                                                                                 | 10222    18
   230       |/* LZ4_streamHC_t :                                                                              | 10223    18
   231       | * This structure allows static allocation of LZ4 HC streaming state.                            | 10224    18
   232       | * This can be used to allocate statically, on state, or as part of a larger structure.          | 10225    18
   233       | *                                                                                               | 10226    18
   234       | * Such state **must** be initialized using LZ4_initStreamHC() before first use.                 | 10227    18
   235       | *                                                                                               | 10228    18
   236       | * Note that invoking LZ4_initStreamHC() is not required when                                    | 10229    18
   237       | * the state was created using LZ4_createStreamHC() (which is recommended).                      | 10230    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   200


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   238       | * Using the normal builder, a newly created state is automatically initialized.                 | 10231    18
   239       | *                                                                                               | 10232    18
   240       | * Static allocation shall only be used in combination with static linking.                      | 10233    18
   241       | */                                                                                              | 10234    18
   242       |                                                                                                 | 10235    18
   243       |/* LZ4_initStreamHC() : v1.9.0+                                                                  | 10236    18
   244       | * Required before first use of a statically allocated LZ4_streamHC_t.                           | 10237    18
   245       | * Before v1.9.0 : use LZ4_resetStreamHC() instead                                               | 10238    18
   246       | */                                                                                              | 10239    18
   247       |LZ4LIB_API LZ4_streamHC_t* LZ4_initStreamHC (void* buffer, size_t size);                         | 10240    18
   247       + LZ4_streamHC_t* LZ4_initStreamHC (void* buffer, size_t size);                                   + 10240    18
   248       |                                                                                                 | 10241    18
   249       |                                                                                                 | 10242    18
   250       |/*-************************************                                                          | 10243    18
   251       |*  Deprecated Functions                                                                          | 10244    18
   252       |**************************************/                                                          | 10245    18
   253       |/* see lz4.h LZ4_DISABLE_DEPRECATE_WARNINGS to turn off deprecation warnings */                  | 10246    18
   254       |                                                                                                 | 10247    18
   255       |/* deprecated compression functions */                                                           | 10248    18
   256       |LZ4_DEPRECATED("use LZ4_compress_HC() instead") LZ4LIB_API int LZ4_compressHC               (cons| 10249    18
   256       +t char* source, char* dest, int inputSize);                                                      + 10249    18
   256       +  int LZ4_compressHC               (const char* source, char* dest, int inputSize);              + 10249    18
   257       |LZ4_DEPRECATED("use LZ4_compress_HC() instead") LZ4LIB_API int LZ4_compressHC_limitedOutput (cons| 10250    18
   257       +t char* source, char* dest, int inputSize, int maxOutputSize);                                   + 10250    18
   257       +  int LZ4_compressHC_limitedOutput (const char* source, char* dest, int inputSize, int maxOutputS+ 10250    18
   257       +ize);                                                                                            + 10250    18
   258       |LZ4_DEPRECATED("use LZ4_compress_HC() instead") LZ4LIB_API int LZ4_compressHC2              (cons| 10251    18
   258       +t char* source, char* dest, int inputSize, int compressionLevel);                                + 10251    18
   258       +  int LZ4_compressHC2              (const char* source, char* dest, int inputSize, int compressio+ 10251    18
   258       +nLevel);                                                                                         + 10251    18
   259       |LZ4_DEPRECATED("use LZ4_compress_HC() instead") LZ4LIB_API int LZ4_compressHC2_limitedOutput(cons| 10252    18
   259       +t char* source, char* dest, int inputSize, int maxOutputSize, int compressionLevel);             + 10252    18
   259       +  int LZ4_compressHC2_limitedOutput(const char* source, char* dest, int inputSize, int maxOutputS+ 10252    18
   259       +ize, int compressionLevel);                                                                      + 10252    18
   260       |LZ4_DEPRECATED("use LZ4_compress_HC_extStateHC() instead") LZ4LIB_API int LZ4_compressHC_withStat| 10253    18
   260       +eHC               (void* state, const char* source, char* dest, int inputSize);                  + 10253    18
   260       +  int LZ4_compressHC_withStateHC               (void* state, const char* source, char* dest, int + 10253    18
   260       +inputSize);                                                                                      + 10253    18
   261       |LZ4_DEPRECATED("use LZ4_compress_HC_extStateHC() instead") LZ4LIB_API int LZ4_compressHC_limitedO| 10254    18
   261       +utput_withStateHC (void* state, const char* source, char* dest, int inputSize, int maxOutputSize)+ 10254    18
   261       +;                                                                                                + 10254    18
   261       +  int LZ4_compressHC_limitedOutput_withStateHC (void* state, const char* source, char* dest, int + 10254    18
   261       +inputSize, int maxOutputSize);                                                                   + 10254    18
   262       |LZ4_DEPRECATED("use LZ4_compress_HC_extStateHC() instead") LZ4LIB_API int LZ4_compressHC2_withSta| 10255    18
   262       +teHC              (void* state, const char* source, char* dest, int inputSize, int compressionLev+ 10255    18
   262       +el);                                                                                             + 10255    18
   262       +  int LZ4_compressHC2_withStateHC              (void* state, const char* source, char* dest, int + 10255    18
   262       +inputSize, int compressionLevel);                                                                + 10255    18
   263       |LZ4_DEPRECATED("use LZ4_compress_HC_extStateHC() instead") LZ4LIB_API int LZ4_compressHC2_limited| 10256    18
   263       +Output_withStateHC(void* state, const char* source, char* dest, int inputSize, int maxOutputSize,+ 10256    18
   263       + int compressionLevel);                                                                          + 10256    18
   263       +  int LZ4_compressHC2_limitedOutput_withStateHC(void* state, const char* source, char* dest, int + 10256    18
   263       +inputSize, int maxOutputSize, int compressionLevel);                                             + 10256    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   201


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   264       |LZ4_DEPRECATED("use LZ4_compress_HC_continue() instead") LZ4LIB_API int LZ4_compressHC_continue  | 10257    18
   264       +             (LZ4_streamHC_t* LZ4_streamHCPtr, const char* source, char* dest, int inputSize);   + 10257    18
   264       +  int LZ4_compressHC_continue               (LZ4_streamHC_t* LZ4_streamHCPtr, const char* source,+ 10257    18
   264       + char* dest, int inputSize);                                                                     + 10257    18
   265       |LZ4_DEPRECATED("use LZ4_compress_HC_continue() instead") LZ4LIB_API int LZ4_compressHC_limitedOut| 10258    18
   265       +put_continue (LZ4_streamHC_t* LZ4_streamHCPtr, const char* source, char* dest, int inputSize, int+ 10258    18
   265       + maxOutputSize);                                                                                 + 10258    18
   265       +  int LZ4_compressHC_limitedOutput_continue (LZ4_streamHC_t* LZ4_streamHCPtr, const char* source,+ 10258    18
   265       + char* dest, int inputSize, int maxOutputSize);                                                  + 10258    18
   266       |                                                                                                 | 10259    18
   267       |/* Obsolete streaming functions; degraded functionality; do not use!                             | 10260    18
   268       | *                                                                                               | 10261    18
   269       | * In order to perform streaming compression, these functions depended on data                   | 10262    18
   270       | * that is no longer tracked in the state. They have been preserved as well as                   | 10263    18
   271       | * possible: using them will still produce a correct output. However, use of                     | 10264    18
   272       | * LZ4_slideInputBufferHC() will truncate the history of the stream, rather                      | 10265    18
   273       | * than preserve a window-sized chunk of history.                                                | 10266    18
   274       | */                                                                                              | 10267    18
   275       |LZ4_DEPRECATED("use LZ4_createStreamHC() instead") LZ4LIB_API void* LZ4_createHC (const char* inp| 10268    18
   275       +utBuffer);                                                                                       + 10268    18
   275       +  void* LZ4_createHC (const char* inputBuffer);                                                  + 10268    18
   276       |LZ4_DEPRECATED("use LZ4_saveDictHC() instead") LZ4LIB_API     char* LZ4_slideInputBufferHC (void*| 10269    18
   276       + LZ4HC_Data);                                                                                    + 10269    18
   276       +      char* LZ4_slideInputBufferHC (void* LZ4HC_Data);                                           + 10269    18
   277       |LZ4_DEPRECATED("use LZ4_freeStreamHC() instead") LZ4LIB_API   int   LZ4_freeHC (void* LZ4HC_Data)| 10270    18
   277       +;                                                                                                + 10270    18
   277       +    int   LZ4_freeHC (void* LZ4HC_Data);                                                         + 10270    18
   278       |LZ4_DEPRECATED("use LZ4_compress_HC_continue() instead") LZ4LIB_API int LZ4_compressHC2_continue | 10271    18
   278       +              (void* LZ4HC_Data, const char* source, char* dest, int inputSize, int compressionLe+ 10271    18
   278       +vel);                                                                                            + 10271    18
   278       +  int LZ4_compressHC2_continue               (void* LZ4HC_Data, const char* source, char* dest, i+ 10271    18
   278       +nt inputSize, int compressionLevel);                                                             + 10271    18
   279       |LZ4_DEPRECATED("use LZ4_compress_HC_continue() instead") LZ4LIB_API int LZ4_compressHC2_limitedOu| 10272    18
   279       +tput_continue (void* LZ4HC_Data, const char* source, char* dest, int inputSize, int maxOutputSize+ 10272    18
   279       +, int compressionLevel);                                                                         + 10272    18
   279       +  int LZ4_compressHC2_limitedOutput_continue (void* LZ4HC_Data, const char* source, char* dest, i+ 10272    18
   279       +nt inputSize, int maxOutputSize, int compressionLevel);                                          + 10272    18
   280       |LZ4_DEPRECATED("use LZ4_createStreamHC() instead") LZ4LIB_API int   LZ4_sizeofStreamStateHC(void)| 10273    18
   280       +;                                                                                                + 10273    18
   280       +  int   LZ4_sizeofStreamStateHC(void);                                                           + 10273    18
   281       |LZ4_DEPRECATED("use LZ4_initStreamHC() instead") LZ4LIB_API  int   LZ4_resetStreamStateHC(void* s| 10274    18
   281       +tate, char* inputBuffer);                                                                        + 10274    18
   281       +   int   LZ4_resetStreamStateHC(void* state, char* inputBuffer);                                 + 10274    18
   282       |                                                                                                 | 10275    18
   283       |                                                                                                 | 10276    18
   284       |/* LZ4_resetStreamHC() is now replaced by LZ4_initStreamHC().                                    | 10277    18
   285       | * The intention is to emphasize the difference with LZ4_resetStreamHC_fast(),                   | 10278    18
   286       | * which is now the recommended function to start a new stream of blocks,                        | 10279    18
   287       | * but cannot be used to initialize a memory segment containing arbitrary garbage data.          | 10280    18
   288       | *                                                                                               | 10281    18
   289       | * It is recommended to switch to LZ4_initStreamHC().                                            | 10282    18
   290       | * LZ4_resetStreamHC() will generate deprecation warnings in a future version.                   | 10283    18
   291       | */                                                                                              | 10284    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   202


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   292       |LZ4LIB_API void LZ4_resetStreamHC (LZ4_streamHC_t* streamHCPtr, int compressionLevel);           | 10285    18
   292       + void LZ4_resetStreamHC (LZ4_streamHC_t* streamHCPtr, int compressionLevel);                     + 10285    18
   293       |                                                                                                 | 10286    18
   294       |                                                                                                 | 10287    18
   295       |#if defined (__cplusplus)                                                                        | 10288    18
   296       |}                                                                                                | 10289    18
   297       |#endif                                                                                           | 10290    18
   298       |                                                                                                 | 10291    18
   299       |#endif /* LZ4_HC_H_19834876238432 */                                                             | 10292    18
   300       |                                                                                                 | 10293    18
   301       |                                                                                                 | 10294    18
   302       |/*-**************************************************                                            | 10295    18
   303       | * !!!!!     STATIC LINKING ONLY     !!!!!                                                       | 10296    18
   304       | * Following definitions are considered experimental.                                            | 10297    18
   305       | * They should not be linked from DLL,                                                           | 10298    18
   306       | * as there is no guarantee of API stability yet.                                                | 10299    18
   307       | * Prototypes will be promoted to "stable" status                                                | 10300    18
   308       | * after successfull usage in real-life scenarios.                                               | 10301    18
   309       | ***************************************************/                                            | 10302    18
   310       |#ifdef LZ4_HC_STATIC_LINKING_ONLY   /* protection macro */                                       | 10303    18
   311       |#ifndef LZ4_HC_SLO_098092834                                                                     | 10304    18
   312       |#define LZ4_HC_SLO_098092834                                                                     | 10305    18
   313       |                                                                                                 | 10306    18
   314       |#define LZ4_STATIC_LINKING_ONLY   /* LZ4LIB_STATIC_API */                                        | 10307    18
   315       |#include "lz4.h"                                                                                 | 10308    18
     1       |/*                                                                                               | 10309    19
     2       | *  LZ4 - Fast LZ compression algorithm                                                          | 10310    19
     3       | *  Header File                                                                                  | 10311    19
     4       | *  Copyright (C) 2011-present, Yann Collet.                                                     | 10312    19
     5       |                                                                                                 | 10313    19
     6       |   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)                     | 10314    19
     7       |                                                                                                 | 10315    19
     8       |   Redistribution and use in source and binary forms, with or without                            | 10316    19
     9       |   modification, are permitted provided that the following conditions are                        | 10317    19
    10       |   met:                                                                                          | 10318    19
    11       |                                                                                                 | 10319    19
    12       |       * Redistributions of source code must retain the above copyright                          | 10320    19
    13       |   notice, this list of conditions and the following disclaimer.                                 | 10321    19
    14       |       * Redistributions in binary form must reproduce the above                                 | 10322    19
    15       |   copyright notice, this list of conditions and the following disclaimer                        | 10323    19
    16       |   in the documentation and/or other materials provided with the                                 | 10324    19
    17       |   distribution.                                                                                 | 10325    19
    18       |                                                                                                 | 10326    19
    19       |   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS                           | 10327    19
    20       |   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT                             | 10328    19
    21       |   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR                         | 10329    19
    22       |   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT                          | 10330    19
    23       |   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                         | 10331    19
    24       |   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                              | 10332    19
    25       |   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                         | 10333    19
    26       |   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         | 10334    19
    27       |   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           | 10335    19
    28       |   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE                         | 10336    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   203


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    29       |   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          | 10337    19
    30       |                                                                                                 | 10338    19
    31       |   You can contact the author at :                                                               | 10339    19
    32       |    - LZ4 homepage : http://www.lz4.org                                                          | 10340    19
    33       |    - LZ4 source repository : https://github.com/lz4/lz4                                         | 10341    19
    34       |*/                                                                                               | 10342    19
    35       |#if defined (__cplusplus)                                                                        | 10343    19
    36       |extern "C" {                                                                                     | 10344    19
    37       |#endif                                                                                           | 10345    19
    38       |                                                                                                 | 10346    19
    39       |#ifndef LZ4_H_2983827168210                                                                      | 10347    19
    40       |#define LZ4_H_2983827168210                                                                      | 10348    19
    41       |                                                                                                 | 10349    19
    42       |/* --- Dependency --- */                                                                         | 10350    19
    43       |#include <stddef.h>   /* size_t */                                                               | 10351    19
    44       |                                                                                                 | 10352    19
    45       |                                                                                                 | 10353    19
    46       |/**                                                                                              | 10354    19
    47       |  Introduction                                                                                   | 10355    19
    48       |                                                                                                 | 10356    19
    49       |  LZ4 is lossless compression algorithm, providing compression speed >500 MB/s per core,         | 10357    19
    50       |  scalable with multi-cores CPU. It features an extremely fast decoder, with speed in            | 10358    19
    51       |  multiple GB/s per core, typically reaching RAM speed limits on multi-core systems.             | 10359    19
    52       |                                                                                                 | 10360    19
    53       |  The LZ4 compression library provides in-memory compression and decompression functions.        | 10361    19
    54       |  It gives full buffer control to user.                                                          | 10362    19
    55       |  Compression can be done in:                                                                    | 10363    19
    56       |    - a single step (described as Simple Functions)                                              | 10364    19
    57       |    - a single step, reusing a context (described in Advanced Functions)                         | 10365    19
    58       |    - unbounded multiple steps (described as Streaming compression)                              | 10366    19
    59       |                                                                                                 | 10367    19
    60       |  lz4.h generates and decodes LZ4-compressed blocks (doc/lz4_Block_format.md).                   | 10368    19
    61       |  Decompressing such a compressed block requires additional metadata.                            | 10369    19
    62       |  Exact metadata depends on exact decompression function.                                        | 10370    19
    63       |  For the typical case of LZ4_decompress_safe(),                                                 | 10371    19
    64       |  metadata includes block's compressed size, and maximum bound of decompressed size.             | 10372    19
    65       |  Each application is free to encode and pass such metadata in whichever way it wants.           | 10373    19
    66       |                                                                                                 | 10374    19
    67       |  lz4.h only handle blocks, it can not generate Frames.                                          | 10375    19
    68       |                                                                                                 | 10376    19
    69       |  Blocks are different from Frames (doc/lz4_Frame_format.md).                                    | 10377    19
    70       |  Frames bundle both blocks and metadata in a specified manner.                                  | 10378    19
    71       |  Embedding metadata is required for compressed data to be self-contained and portable.          | 10379    19
    72       |  Frame format is delivered through a companion API, declared in lz4frame.h.                     | 10380    19
    73       |  The `lz4` CLI can only manage frames.                                                          | 10381    19
    74       |*/                                                                                               | 10382    19
    75       |                                                                                                 | 10383    19
    76       |/*^***************************************************************                               | 10384    19
    77       |*  Export parameters                                                                             | 10385    19
    78       |*****************************************************************/                               | 10386    19
    79       |/*                                                                                               | 10387    19
    80       |*  LZ4_DLL_EXPORT :                                                                              | 10388    19
    81       |*  Enable exporting of functions when building a Windows DLL                                     | 10389    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   204


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    82       |*  LZ4LIB_VISIBILITY :                                                                           | 10390    19
    83       |*  Control library symbols visibility.                                                           | 10391    19
    84       |*/                                                                                               | 10392    19
    85       |#ifndef LZ4LIB_VISIBILITY                                                                        | 10393    19
    86       |#  if defined(__GNUC__) && (__GNUC__ >= 4)                                                       | 10394    19
    87       |#    define LZ4LIB_VISIBILITY __attribute__ ((visibility ("default")))                           | 10395    19
    88       |#  else                                                                                          | 10396    19
    89       |#    define LZ4LIB_VISIBILITY                                                                    | 10397    19
    90       |#  endif                                                                                         | 10398    19
    91       |#endif                                                                                           | 10399    19
    92       |#if defined(LZ4_DLL_EXPORT) && (LZ4_DLL_EXPORT==1)                                               | 10400    19
    93       |#  define LZ4LIB_API __declspec(dllexport) LZ4LIB_VISIBILITY                                     | 10401    19
    94       |#elif defined(LZ4_DLL_IMPORT) && (LZ4_DLL_IMPORT==1)                                             | 10402    19
    95       |#  define LZ4LIB_API __declspec(dllimport) LZ4LIB_VISIBILITY /* It isn't required but allows to g| 10403    19
    95       +enerate better code, saving a function pointer load from the IAT and an indirect jump.*/         + 10403    19
    96       |#else                                                                                            | 10404    19
    97       |#  define LZ4LIB_API LZ4LIB_VISIBILITY                                                           | 10405    19
    98       |#endif                                                                                           | 10406    19
    99       |                                                                                                 | 10407    19
   100       |/*------   Version   ------*/                                                                    | 10408    19
   101       |#define LZ4_VERSION_MAJOR    1    /* for breaking interface changes  */                          | 10409    19
   102       |#define LZ4_VERSION_MINOR    9    /* for new (non-breaking) interface capabilities */            | 10410    19
   103       |#define LZ4_VERSION_RELEASE  3    /* for tweaks, bug-fixes, or development */                    | 10411    19
   104       |                                                                                                 | 10412    19
   105       |#define LZ4_VERSION_NUMBER (LZ4_VERSION_MAJOR *100*100 + LZ4_VERSION_MINOR *100 + LZ4_VERSION_REL| 10413    19
   105       +EASE)                                                                                            + 10413    19
   106       |                                                                                                 | 10414    19
   107       |#define LZ4_LIB_VERSION LZ4_VERSION_MAJOR.LZ4_VERSION_MINOR.LZ4_VERSION_RELEASE                  | 10415    19
   108       |#define LZ4_QUOTE(str) #str                                                                      | 10416    19
   109       |#define LZ4_EXPAND_AND_QUOTE(str) LZ4_QUOTE(str)                                                 | 10417    19
   110       |#define LZ4_VERSION_STRING LZ4_EXPAND_AND_QUOTE(LZ4_LIB_VERSION)                                 | 10418    19
   111       |                                                                                                 | 10419    19
   112       |LZ4LIB_API int LZ4_versionNumber (void);  /**< library version number; useful to check dll versio| 10420    19
   112       +n */                                                                                             + 10420    19
   113       |LZ4LIB_API const char* LZ4_versionString (void);   /**< library version string; useful to check d| 10421    19
   113       +ll version */                                                                                    + 10421    19
   114       |                                                                                                 | 10422    19
   115       |                                                                                                 | 10423    19
   116       |/*-************************************                                                          | 10424    19
   117       |*  Tuning parameter                                                                              | 10425    19
   118       |**************************************/                                                          | 10426    19
   119       |/*!                                                                                              | 10427    19
   120       | * LZ4_MEMORY_USAGE :                                                                            | 10428    19
   121       | * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; | 10429    19
   121       +etc.)                                                                                            + 10429    19
   122       | * Increasing memory usage improves compression ratio.                                           | 10430    19
   123       | * Reduced memory usage may improve speed, thanks to better cache locality.                      | 10431    19
   124       | * Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache                      | 10432    19
   125       | */                                                                                              | 10433    19
   126       |#ifndef LZ4_MEMORY_USAGE                                                                         | 10434    19
   127       |# define LZ4_MEMORY_USAGE 14                                                                     | 10435    19
   128       |#endif                                                                                           | 10436    19
   129       |                                                                                                 | 10437    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   205


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   130       |                                                                                                 | 10438    19
   131       |/*-************************************                                                          | 10439    19
   132       |*  Simple Functions                                                                              | 10440    19
   133       |**************************************/                                                          | 10441    19
   134       |/*! LZ4_compress_default() :                                                                     | 10442    19
   135       | *  Compresses 'srcSize' bytes from buffer 'src'                                                 | 10443    19
   136       | *  into already allocated 'dst' buffer of size 'dstCapacity'.                                   | 10444    19
   137       | *  Compression is guaranteed to succeed if 'dstCapacity' >= LZ4_compressBound(srcSize).         | 10445    19
   138       | *  It also runs faster, so it's a recommended setting.                                          | 10446    19
   139       | *  If the function cannot compress 'src' into a more limited 'dst' budget,                      | 10447    19
   140       | *  compression stops *immediately*, and the function result is zero.                            | 10448    19
   141       | *  In which case, 'dst' content is undefined (invalid).                                         | 10449    19
   142       | *      srcSize : max supported value is LZ4_MAX_INPUT_SIZE.                                     | 10450    19
   143       | *      dstCapacity : size of buffer 'dst' (which must be already allocated)                     | 10451    19
   144       | *     @return  : the number of bytes written into buffer 'dst' (necessarily <= dstCapacity)     | 10452    19
   145       | *                or 0 if compression fails                                                      | 10453    19
   146       | * Note : This function is protected against buffer overflow scenarios (never writes outside 'dst| 10454    19
   146       +' buffer, nor read outside 'source' buffer).                                                     + 10454    19
   147       | */                                                                                              | 10455    19
   148       |LZ4LIB_API int LZ4_compress_default(const char* src, char* dst, int srcSize, int dstCapacity);   | 10456    19
   149       |                                                                                                 | 10457    19
   150       |/*! LZ4_decompress_safe() :                                                                      | 10458    19
   151       | *  compressedSize : is the exact complete size of the compressed block.                         | 10459    19
   152       | *  dstCapacity : is the size of destination buffer (which must be already allocated), presumed a| 10460    19
   152       +n upper bound of decompressed size.                                                              + 10460    19
   153       | * @return : the number of bytes decompressed into destination buffer (necessarily <= dstCapacity| 10461    19
   153       +)                                                                                                + 10461    19
   154       | *           If destination buffer is not large enough, decoding will stop and output an error co| 10462    19
   154       +de (negative value).                                                                             + 10462    19
   155       | *           If the source stream is detected malformed, the function will stop decoding and retu| 10463    19
   155       +rn a negative result.                                                                            + 10463    19
   156       | * Note 1 : This function is protected against malicious data packets :                          | 10464    19
   157       | *          it will never writes outside 'dst' buffer, nor read outside 'source' buffer,         | 10465    19
   158       | *          even if the compressed block is maliciously modified to order the decoder to do these| 10466    19
   158       + actions.                                                                                        + 10466    19
   159       | *          In such case, the decoder stops immediately, and considers the compressed block malfo| 10467    19
   159       +rmed.                                                                                            + 10467    19
   160       | * Note 2 : compressedSize and dstCapacity must be provided to the function, the compressed block| 10468    19
   160       + does not contain them.                                                                          + 10468    19
   161       | *          The implementation is free to send / store / derive this information in whichever way| 10469    19
   161       + is most beneficial.                                                                             + 10469    19
   162       | *          If there is a need for a different format which bundles together both compressed data| 10470    19
   162       + and its metadata, consider looking at lz4frame.h instead.                                       + 10470    19
   163       | */                                                                                              | 10471    19
   164       |LZ4LIB_API int LZ4_decompress_safe (const char* src, char* dst, int compressedSize, int dstCapaci| 10472    19
   164       +ty);                                                                                             + 10472    19
   165       |                                                                                                 | 10473    19
   166       |                                                                                                 | 10474    19
   167       |/*-************************************                                                          | 10475    19
   168       |*  Advanced Functions                                                                            | 10476    19
   169       |**************************************/                                                          | 10477    19
   170       |#define LZ4_MAX_INPUT_SIZE        0x7E000000   /* 2 113 929 216 bytes */                         | 10478    19
   171       |#define LZ4_COMPRESSBOUND(isize)  ((unsigned)(isize) > (unsigned)LZ4_MAX_INPUT_SIZE ? 0 : (isize)| 10479    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   206


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   171       + + ((isize)/255) + 16)                                                                           + 10479    19
   172       |                                                                                                 | 10480    19
   173       |/*! LZ4_compressBound() :                                                                        | 10481    19
   174       |    Provides the maximum size that LZ4 compression may output in a "worst case" scenario (input d| 10482    19
   174       +ata not compressible)                                                                            + 10482    19
   175       |    This function is primarily useful for memory allocation purposes (destination buffer size).  | 10483    19
   176       |    Macro LZ4_COMPRESSBOUND() is also provided for compilation-time evaluation (stack memory allo| 10484    19
   176       +cation for example).                                                                             + 10484    19
   177       |    Note that LZ4_compress_default() compresses faster when dstCapacity is >= LZ4_compressBound(s| 10485    19
   177       +rcSize)                                                                                          + 10485    19
   178       |        inputSize  : max supported value is LZ4_MAX_INPUT_SIZE                                   | 10486    19
   179       |        return : maximum output size in a "worst case" scenario                                  | 10487    19
   180       |              or 0, if input size is incorrect (too large or negative)                           | 10488    19
   181       |*/                                                                                               | 10489    19
   182       |LZ4LIB_API int LZ4_compressBound(int inputSize);                                                 | 10490    19
   183       |                                                                                                 | 10491    19
   184       |/*! LZ4_compress_fast() :                                                                        | 10492    19
   185       |    Same as LZ4_compress_default(), but allows selection of "acceleration" factor.               | 10493    19
   186       |    The larger the acceleration value, the faster the algorithm, but also the lesser the compress| 10494    19
   186       +ion.                                                                                             + 10494    19
   187       |    It's a trade-off. It can be fine tuned, with each successive value providing roughly +~3% to | 10495    19
   187       +speed.                                                                                           + 10495    19
   188       |    An acceleration value of "1" is the same as regular LZ4_compress_default()                   | 10496    19
   189       |    Values <= 0 will be replaced by LZ4_ACCELERATION_DEFAULT (currently == 1, see lz4.c).        | 10497    19
   190       |    Values > LZ4_ACCELERATION_MAX will be replaced by LZ4_ACCELERATION_MAX (currently == 65537, s| 10498    19
   190       +ee lz4.c).                                                                                       + 10498    19
   191       |*/                                                                                               | 10499    19
   192       |LZ4LIB_API int LZ4_compress_fast (const char* src, char* dst, int srcSize, int dstCapacity, int a| 10500    19
   192       +cceleration);                                                                                    + 10500    19
   193       |                                                                                                 | 10501    19
   194       |                                                                                                 | 10502    19
   195       |/*! LZ4_compress_fast_extState() :                                                               | 10503    19
   196       | *  Same as LZ4_compress_fast(), using an externally allocated memory space for its state.       | 10504    19
   197       | *  Use LZ4_sizeofState() to know how much memory must be allocated,                             | 10505    19
   198       | *  and allocate it on 8-bytes boundaries (using `malloc()` typically).                          | 10506    19
   199       | *  Then, provide this buffer as `void* state` to compression function.                          | 10507    19
   200       | */                                                                                              | 10508    19
   201       |LZ4LIB_API int LZ4_sizeofState(void);                                                            | 10509    19
   202       |LZ4LIB_API int LZ4_compress_fast_extState (void* state, const char* src, char* dst, int srcSize, | 10510    19
   202       +int dstCapacity, int acceleration);                                                              + 10510    19
   203       |                                                                                                 | 10511    19
   204       |                                                                                                 | 10512    19
   205       |/*! LZ4_compress_destSize() :                                                                    | 10513    19
   206       | *  Reverse the logic : compresses as much data as possible from 'src' buffer                    | 10514    19
   207       | *  into already allocated buffer 'dst', of size >= 'targetDestSize'.                            | 10515    19
   208       | *  This function either compresses the entire 'src' content into 'dst' if it's large enough,    | 10516    19
   209       | *  or fill 'dst' buffer completely with as much data as possible from 'src'.                    | 10517    19
   210       | *  note: acceleration parameter is fixed to "default".                                          | 10518    19
   211       | *                                                                                               | 10519    19
   212       | * *srcSizePtr : will be modified to indicate how many bytes where read from 'src' to fill 'dst'.| 10520    19
   213       | *               New value is necessarily <= input value.                                        | 10521    19
   214       | * @return : Nb bytes written into 'dst' (necessarily <= targetDestSize)                         | 10522    19
   215       | *           or 0 if compression fails.                                                          | 10523    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   207


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   216       | *                                                                                               | 10524    19
   217       | * Note : from v1.8.2 to v1.9.1, this function had a bug (fixed un v1.9.2+):                     | 10525    19
   218       | *        the produced compressed content could, in specific circumstances,                      | 10526    19
   219       | *        require to be decompressed into a destination buffer larger                            | 10527    19
   220       | *        by at least 1 byte than the content to decompress.                                     | 10528    19
   221       | *        If an application uses `LZ4_compress_destSize()`,                                      | 10529    19
   222       | *        it's highly recommended to update liblz4 to v1.9.2 or better.                          | 10530    19
   223       | *        If this can't be done or ensured,                                                      | 10531    19
   224       | *        the receiving decompression function should provide                                    | 10532    19
   225       | *        a dstCapacity which is > decompressedSize, by at least 1 byte.                         | 10533    19
   226       | *        See https://github.com/lz4/lz4/issues/859 for details                                  | 10534    19
   227       | */                                                                                              | 10535    19
   228       |LZ4LIB_API int LZ4_compress_destSize (const char* src, char* dst, int* srcSizePtr, int targetDstS| 10536    19
   228       +ize);                                                                                            + 10536    19
   229       |                                                                                                 | 10537    19
   230       |                                                                                                 | 10538    19
   231       |/*! LZ4_decompress_safe_partial() :                                                              | 10539    19
   232       | *  Decompress an LZ4 compressed block, of size 'srcSize' at position 'src',                     | 10540    19
   233       | *  into destination buffer 'dst' of size 'dstCapacity'.                                         | 10541    19
   234       | *  Up to 'targetOutputSize' bytes will be decoded.                                              | 10542    19
   235       | *  The function stops decoding on reaching this objective.                                      | 10543    19
   236       | *  This can be useful to boost performance                                                      | 10544    19
   237       | *  whenever only the beginning of a block is required.                                          | 10545    19
   238       | *                                                                                               | 10546    19
   239       | * @return : the number of bytes decoded in `dst` (necessarily <= targetOutputSize)              | 10547    19
   240       | *           If source stream is detected malformed, function returns a negative result.         | 10548    19
   241       | *                                                                                               | 10549    19
   242       | *  Note 1 : @return can be < targetOutputSize, if compressed block contains less data.          | 10550    19
   243       | *                                                                                               | 10551    19
   244       | *  Note 2 : targetOutputSize must be <= dstCapacity                                             | 10552    19
   245       | *                                                                                               | 10553    19
   246       | *  Note 3 : this function effectively stops decoding on reaching targetOutputSize,              | 10554    19
   247       | *           so dstCapacity is kind of redundant.                                                | 10555    19
   248       | *           This is because in older versions of this function,                                 | 10556    19
   249       | *           decoding operation would still write complete sequences.                            | 10557    19
   250       | *           Therefore, there was no guarantee that it would stop writing at exactly targetOutput| 10558    19
   250       +Size,                                                                                            + 10558    19
   251       | *           it could write more bytes, though only up to dstCapacity.                           | 10559    19
   252       | *           Some "margin" used to be required for this operation to work properly.              | 10560    19
   253       | *           Thankfully, this is no longer necessary.                                            | 10561    19
   254       | *           The function nonetheless keeps the same signature, in an effort to preserve API comp| 10562    19
   254       +atibility.                                                                                       + 10562    19
   255       | *                                                                                               | 10563    19
   256       | *  Note 4 : If srcSize is the exact size of the block,                                          | 10564    19
   257       | *           then targetOutputSize can be any value,                                             | 10565    19
   258       | *           including larger than the block's decompressed size.                                | 10566    19
   259       | *           The function will, at most, generate block's decompressed size.                     | 10567    19
   260       | *                                                                                               | 10568    19
   261       | *  Note 5 : If srcSize is _larger_ than block's compressed size,                                | 10569    19
   262       | *           then targetOutputSize **MUST** be <= block's decompressed size.                     | 10570    19
   263       | *           Otherwise, *silent corruption will occur*.                                          | 10571    19
   264       | */                                                                                              | 10572    19
   265       |LZ4LIB_API int LZ4_decompress_safe_partial (const char* src, char* dst, int srcSize, int targetOu| 10573    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   208


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   265       +tputSize, int dstCapacity);                                                                      + 10573    19
   266       |                                                                                                 | 10574    19
   267       |                                                                                                 | 10575    19
   268       |/*-*********************************************                                                 | 10576    19
   269       |*  Streaming Compression Functions                                                               | 10577    19
   270       |***********************************************/                                                 | 10578    19
   271       |typedef union LZ4_stream_u LZ4_stream_t;  /* incomplete type (defined later) */                  | 10579    19
   272       |                                                                                                 | 10580    19
   273       |LZ4LIB_API LZ4_stream_t* LZ4_createStream(void);                                                 | 10581    19
   274       |LZ4LIB_API int           LZ4_freeStream (LZ4_stream_t* streamPtr);                               | 10582    19
   275       |                                                                                                 | 10583    19
   276       |/*! LZ4_resetStream_fast() : v1.9.0+                                                             | 10584    19
   277       | *  Use this to prepare an LZ4_stream_t for a new chain of dependent blocks                      | 10585    19
   278       | *  (e.g., LZ4_compress_fast_continue()).                                                        | 10586    19
   279       | *                                                                                               | 10587    19
   280       | *  An LZ4_stream_t must be initialized once before usage.                                       | 10588    19
   281       | *  This is automatically done when created by LZ4_createStream().                               | 10589    19
   282       | *  However, should the LZ4_stream_t be simply declared on stack (for example),                  | 10590    19
   283       | *  it's necessary to initialize it first, using LZ4_initStream().                               | 10591    19
   284       | *                                                                                               | 10592    19
   285       | *  After init, start any new stream with LZ4_resetStream_fast().                                | 10593    19
   286       | *  A same LZ4_stream_t can be re-used multiple times consecutively                              | 10594    19
   287       | *  and compress multiple streams,                                                               | 10595    19
   288       | *  provided that it starts each new stream with LZ4_resetStream_fast().                         | 10596    19
   289       | *                                                                                               | 10597    19
   290       | *  LZ4_resetStream_fast() is much faster than LZ4_initStream(),                                 | 10598    19
   291       | *  but is not compatible with memory regions containing garbage data.                           | 10599    19
   292       | *                                                                                               | 10600    19
   293       | *  Note: it's only useful to call LZ4_resetStream_fast()                                        | 10601    19
   294       | *        in the context of streaming compression.                                               | 10602    19
   295       | *        The *extState* functions perform their own resets.                                     | 10603    19
   296       | *        Invoking LZ4_resetStream_fast() before is redundant, and even counterproductive.       | 10604    19
   297       | */                                                                                              | 10605    19
   298       |LZ4LIB_API void LZ4_resetStream_fast (LZ4_stream_t* streamPtr);                                  | 10606    19
   299       |                                                                                                 | 10607    19
   300       |/*! LZ4_loadDict() :                                                                             | 10608    19
   301       | *  Use this function to reference a static dictionary into LZ4_stream_t.                        | 10609    19
   302       | *  The dictionary must remain available during compression.                                     | 10610    19
   303       | *  LZ4_loadDict() triggers a reset, so any previous data will be forgotten.                     | 10611    19
   304       | *  The same dictionary will have to be loaded on decompression side for successful decoding.    | 10612    19
   305       | *  Dictionary are useful for better compression of small data (KB range).                       | 10613    19
   306       | *  While LZ4 accept any input as dictionary,                                                    | 10614    19
   307       | *  results are generally better when using Zstandard's Dictionary Builder.                      | 10615    19
   308       | *  Loading a size of 0 is allowed, and is the same as reset.                                    | 10616    19
   309       | * @return : loaded dictionary size, in bytes (necessarily <= 64 KB)                             | 10617    19
   310       | */                                                                                              | 10618    19
   311       |LZ4LIB_API int LZ4_loadDict (LZ4_stream_t* streamPtr, const char* dictionary, int dictSize);     | 10619    19
   312       |                                                                                                 | 10620    19
   313       |/*! LZ4_compress_fast_continue() :                                                               | 10621    19
   314       | *  Compress 'src' content using data from previously compressed blocks, for better compression r| 10622    19
   314       +atio.                                                                                            + 10622    19
   315       | * 'dst' buffer must be already allocated.                                                       | 10623    19
   316       | *  If dstCapacity >= LZ4_compressBound(srcSize), compression is guaranteed to succeed, and runs | 10624    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   209


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   316       +faster.                                                                                          + 10624    19
   317       | *                                                                                               | 10625    19
   318       | * @return : size of compressed block                                                            | 10626    19
   319       | *           or 0 if there is an error (typically, cannot fit into 'dst').                       | 10627    19
   320       | *                                                                                               | 10628    19
   321       | *  Note 1 : Each invocation to LZ4_compress_fast_continue() generates a new block.              | 10629    19
   322       | *           Each block has precise boundaries.                                                  | 10630    19
   323       | *           Each block must be decompressed separately, calling LZ4_decompress_*() with relevant| 10631    19
   323       + metadata.                                                                                       + 10631    19
   324       | *           It's not possible to append blocks together and expect a single invocation of LZ4_de| 10632    19
   324       +compress_*() to decompress them together.                                                        + 10632    19
   325       | *                                                                                               | 10633    19
   326       | *  Note 2 : The previous 64KB of source data is __assumed__ to remain present, unmodified, at sa| 10634    19
   326       +me address in memory !                                                                           + 10634    19
   327       | *                                                                                               | 10635    19
   328       | *  Note 3 : When input is structured as a double-buffer, each buffer can have any size, includin| 10636    19
   328       +g < 64 KB.                                                                                       + 10636    19
   329       | *           Make sure that buffers are separated, by at least one byte.                         | 10637    19
   330       | *           This construction ensures that each block only depends on previous block.           | 10638    19
   331       | *                                                                                               | 10639    19
   332       | *  Note 4 : If input buffer is a ring-buffer, it can have any size, including < 64 KB.          | 10640    19
   333       | *                                                                                               | 10641    19
   334       | *  Note 5 : After an error, the stream status is undefined (invalid), it can only be reset or fr| 10642    19
   334       +eed.                                                                                             + 10642    19
   335       | */                                                                                              | 10643    19
   336       |LZ4LIB_API int LZ4_compress_fast_continue (LZ4_stream_t* streamPtr, const char* src, char* dst, i| 10644    19
   336       +nt srcSize, int dstCapacity, int acceleration);                                                  + 10644    19
   337       |                                                                                                 | 10645    19
   338       |/*! LZ4_saveDict() :                                                                             | 10646    19
   339       | *  If last 64KB data cannot be guaranteed to remain available at its current memory location,   | 10647    19
   340       | *  save it into a safer place (char* safeBuffer).                                               | 10648    19
   341       | *  This is schematically equivalent to a memcpy() followed by LZ4_loadDict(),                   | 10649    19
   342       | *  but is much faster, because LZ4_saveDict() doesn't need to rebuild tables.                   | 10650    19
   343       | * @return : saved dictionary size in bytes (necessarily <= maxDictSize), or 0 if error.         | 10651    19
   344       | */                                                                                              | 10652    19
   345       |LZ4LIB_API int LZ4_saveDict (LZ4_stream_t* streamPtr, char* safeBuffer, int maxDictSize);        | 10653    19
   346       |                                                                                                 | 10654    19
   347       |                                                                                                 | 10655    19
   348       |/*-**********************************************                                                | 10656    19
   349       |*  Streaming Decompression Functions                                                             | 10657    19
   350       |*  Bufferless synchronous API                                                                    | 10658    19
   351       |************************************************/                                                | 10659    19
   352       |typedef union LZ4_streamDecode_u LZ4_streamDecode_t;   /* tracking context */                    | 10660    19
   353       |                                                                                                 | 10661    19
   354       |/*! LZ4_createStreamDecode() and LZ4_freeStreamDecode() :                                        | 10662    19
   355       | *  creation / destruction of streaming decompression tracking context.                          | 10663    19
   356       | *  A tracking context can be re-used multiple times.                                            | 10664    19
   357       | */                                                                                              | 10665    19
   358       |LZ4LIB_API LZ4_streamDecode_t* LZ4_createStreamDecode(void);                                     | 10666    19
   359       |LZ4LIB_API int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);            | 10667    19
   360       |                                                                                                 | 10668    19
   361       |/*! LZ4_setStreamDecode() :                                                                      | 10669    19
   362       | *  An LZ4_streamDecode_t context can be allocated once and re-used multiple times.              | 10670    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   210


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   363       | *  Use this function to start decompression of a new stream of blocks.                          | 10671    19
   364       | *  A dictionary can optionally be set. Use NULL or size 0 for a reset order.                    | 10672    19
   365       | *  Dictionary is presumed stable : it must remain accessible and unmodified during next decompre| 10673    19
   365       +ssion.                                                                                           + 10673    19
   366       | * @return : 1 if OK, 0 if error                                                                 | 10674    19
   367       | */                                                                                              | 10675    19
   368       |LZ4LIB_API int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary,| 10676    19
   368       + int dictSize);                                                                                  + 10676    19
   369       |                                                                                                 | 10677    19
   370       |/*! LZ4_decoderRingBufferSize() : v1.8.2+                                                        | 10678    19
   371       | *  Note : in a ring buffer scenario (optional),                                                 | 10679    19
   372       | *  blocks are presumed decompressed next to each other                                          | 10680    19
   373       | *  up to the moment there is not enough remaining space for next block (remainingSize < maxBlock| 10681    19
   373       +Size),                                                                                           + 10681    19
   374       | *  at which stage it resumes from beginning of ring buffer.                                     | 10682    19
   375       | *  When setting such a ring buffer for streaming decompression,                                 | 10683    19
   376       | *  provides the minimum size of this ring buffer                                                | 10684    19
   377       | *  to be compatible with any source respecting maxBlockSize condition.                          | 10685    19
   378       | * @return : minimum ring buffer size,                                                           | 10686    19
   379       | *           or 0 if there is an error (invalid maxBlockSize).                                   | 10687    19
   380       | */                                                                                              | 10688    19
   381       |LZ4LIB_API int LZ4_decoderRingBufferSize(int maxBlockSize);                                      | 10689    19
   382       |#define LZ4_DECODER_RING_BUFFER_SIZE(maxBlockSize) (65536 + 14 + (maxBlockSize))  /* for static a| 10690    19
   382       +llocation; maxBlockSize presumed valid */                                                        + 10690    19
   383       |                                                                                                 | 10691    19
   384       |/*! LZ4_decompress_*_continue() :                                                                | 10692    19
   385       | *  These decoding functions allow decompression of consecutive blocks in "streaming" mode.      | 10693    19
   386       | *  A block is an unsplittable entity, it must be presented entirely to a decompression function.| 10694    19
   387       | *  Decompression functions only accepts one block at a time.                                    | 10695    19
   388       | *  The last 64KB of previously decoded data *must* remain available and unmodified at the memory| 10696    19
   388       + position where they were decoded.                                                               + 10696    19
   389       | *  If less than 64KB of data has been decoded, all the data must be present.                    | 10697    19
   390       | *                                                                                               | 10698    19
   391       | *  Special : if decompression side sets a ring buffer, it must respect one of the following cond| 10699    19
   391       +itions :                                                                                         + 10699    19
   392       | *  - Decompression buffer size is _at least_ LZ4_decoderRingBufferSize(maxBlockSize).           | 10700    19
   393       | *    maxBlockSize is the maximum size of any single block. It can have any value > 16 bytes.    | 10701    19
   394       | *    In which case, encoding and decoding buffers do not need to be synchronized.               | 10702    19
   395       | *    Actually, data can be produced by any source compliant with LZ4 format specification, and r| 10703    19
   395       +especting maxBlockSize.                                                                          + 10703    19
   396       | *  - Synchronized mode :                                                                        | 10704    19
   397       | *    Decompression buffer size is _exactly_ the same as compression buffer size,                | 10705    19
   398       | *    and follows exactly same update rule (block boundaries at same positions),                 | 10706    19
   399       | *    and decoding function is provided with exact decompressed size of each block (exception for| 10707    19
   399       + last block of the stream),                                                                      + 10707    19
   400       | *    _then_ decoding & encoding ring buffer can have any size, including small ones ( < 64 KB). | 10708    19
   401       | *  - Decompression buffer is larger than encoding buffer, by a minimum of maxBlockSize more byte| 10709    19
   401       +s.                                                                                               + 10709    19
   402       | *    In which case, encoding and decoding buffers do not need to be synchronized,               | 10710    19
   403       | *    and encoding ring buffer can have any size, including small ones ( < 64 KB).               | 10711    19
   404       | *                                                                                               | 10712    19
   405       | *  Whenever these conditions are not possible,                                                  | 10713    19
   406       | *  save the last 64KB of decoded data into a safe buffer where it can't be modified during decom| 10714    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   211


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   406       +pression,                                                                                        + 10714    19
   407       | *  then indicate where this data is saved using LZ4_setStreamDecode(), before decompressing next| 10715    19
   407       + block.                                                                                          + 10715    19
   408       |*/                                                                                               | 10716    19
   409       |LZ4LIB_API int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* sr| 10717    19
   409       +c, char* dst, int srcSize, int dstCapacity);                                                     + 10717    19
   410       |                                                                                                 | 10718    19
   411       |                                                                                                 | 10719    19
   412       |/*! LZ4_decompress_*_usingDict() :                                                               | 10720    19
   413       | *  These decoding functions work the same as                                                    | 10721    19
   414       | *  a combination of LZ4_setStreamDecode() followed by LZ4_decompress_*_continue()               | 10722    19
   415       | *  They are stand-alone, and don't need an LZ4_streamDecode_t structure.                        | 10723    19
   416       | *  Dictionary is presumed stable : it must remain accessible and unmodified during decompression| 10724    19
   416       +.                                                                                                + 10724    19
   417       | *  Performance tip : Decompression speed can be substantially increased                         | 10725    19
   418       | *                    when dst == dictStart + dictSize.                                          | 10726    19
   419       | */                                                                                              | 10727    19
   420       |LZ4LIB_API int LZ4_decompress_safe_usingDict (const char* src, char* dst, int srcSize, int dstCap| 10728    19
   420       +city, const char* dictStart, int dictSize);                                                      + 10728    19
   421       |                                                                                                 | 10729    19
   422       |#endif /* LZ4_H_2983827168210 */                                                                 | 10730    19
   423       |                                                                                                 | 10731    19
   424       |                                                                                                 | 10732    19
   425       |/*^*************************************                                                         | 10733    19
   426       | * !!!!!!   STATIC LINKING ONLY   !!!!!!                                                         | 10734    19
   427       | ***************************************/                                                        | 10735    19
   428       |                                                                                                 | 10736    19
   429       |/*-****************************************************************************                  | 10737    19
   430       | * Experimental section                                                                          | 10738    19
   431       | *                                                                                               | 10739    19
   432       | * Symbols declared in this section must be considered unstable. Their                           | 10740    19
   433       | * signatures or semantics may change, or they may be removed altogether in the                  | 10741    19
   434       | * future. They are therefore only safe to depend on when the caller is                          | 10742    19
   435       | * statically linked against the library.                                                        | 10743    19
   436       | *                                                                                               | 10744    19
   437       | * To protect against unsafe usage, not only are the declarations guarded,                       | 10745    19
   438       | * the definitions are hidden by default                                                         | 10746    19
   439       | * when building LZ4 as a shared/dynamic library.                                                | 10747    19
   440       | *                                                                                               | 10748    19
   441       | * In order to access these declarations,                                                        | 10749    19
   442       | * define LZ4_STATIC_LINKING_ONLY in your application                                            | 10750    19
   443       | * before including LZ4's headers.                                                               | 10751    19
   444       | *                                                                                               | 10752    19
   445       | * In order to make their implementations accessible dynamically, you must                       | 10753    19
   446       | * define LZ4_PUBLISH_STATIC_FUNCTIONS when building the LZ4 library.                            | 10754    19
   447       | ******************************************************************************/                 | 10755    19
   448       |                                                                                                 | 10756    19
   449       |#ifdef LZ4_STATIC_LINKING_ONLY                                                                   | 10757    19
   450       |                                                                                                 | 10758    19
   451       |#ifndef LZ4_STATIC_3504398509                                                                    | 10759    19
   452       |#define LZ4_STATIC_3504398509                                                                    | 10760    19
   453       |                                                                                                 | 10761    19
   454       |#ifdef LZ4_PUBLISH_STATIC_FUNCTIONS                                                              | 10762    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   212


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   455       |#define LZ4LIB_STATIC_API LZ4LIB_API                                                             | 10763    19
   456       |#else                                                                                            | 10764    19
   457       |#define LZ4LIB_STATIC_API                                                                        | 10765    19
   458       |#endif                                                                                           | 10766    19
   459       |                                                                                                 | 10767    19
   460       |                                                                                                 | 10768    19
   461       |/*! LZ4_compress_fast_extState_fastReset() :                                                     | 10769    19
   462       | *  A variant of LZ4_compress_fast_extState().                                                   | 10770    19
   463       | *                                                                                               | 10771    19
   464       | *  Using this variant avoids an expensive initialization step.                                  | 10772    19
   465       | *  It is only safe to call if the state buffer is known to be correctly initialized already     | 10773    19
   466       | *  (see above comment on LZ4_resetStream_fast() for a definition of "correctly initialized").   | 10774    19
   467       | *  From a high level, the difference is that                                                    | 10775    19
   468       | *  this function initializes the provided state with a call to something like LZ4_resetStream_fa| 10776    19
   468       +st()                                                                                             + 10776    19
   469       | *  while LZ4_compress_fast_extState() starts with a call to LZ4_resetStream().                  | 10777    19
   470       | */                                                                                              | 10778    19
   471       |LZ4LIB_STATIC_API int LZ4_compress_fast_extState_fastReset (void* state, const char* src, char* d| 10779    19
   471       +st, int srcSize, int dstCapacity, int acceleration);                                             + 10779    19
   471       + int LZ4_compress_fast_extState_fastReset (void* state, const char* src, char* dst, int srcSize, + 10779    19
   471       +int dstCapacity, int acceleration);                                                              + 10779    19
   472       |                                                                                                 | 10780    19
   473       |/*! LZ4_attach_dictionary() :                                                                    | 10781    19
   474       | *  This is an experimental API that allows                                                      | 10782    19
   475       | *  efficient use of a static dictionary many times.                                             | 10783    19
   476       | *                                                                                               | 10784    19
   477       | *  Rather than re-loading the dictionary buffer into a working context before                   | 10785    19
   478       | *  each compression, or copying a pre-loaded dictionary's LZ4_stream_t into a                   | 10786    19
   479       | *  working LZ4_stream_t, this function introduces a no-copy setup mechanism,                    | 10787    19
   480       | *  in which the working stream references the dictionary stream in-place.                       | 10788    19
   481       | *                                                                                               | 10789    19
   482       | *  Several assumptions are made about the state of the dictionary stream.                       | 10790    19
   483       | *  Currently, only streams which have been prepared by LZ4_loadDict() should                    | 10791    19
   484       | *  be expected to work.                                                                         | 10792    19
   485       | *                                                                                               | 10793    19
   486       | *  Alternatively, the provided dictionaryStream may be NULL,                                    | 10794    19
   487       | *  in which case any existing dictionary stream is unset.                                       | 10795    19
   488       | *                                                                                               | 10796    19
   489       | *  If a dictionary is provided, it replaces any pre-existing stream history.                    | 10797    19
   490       | *  The dictionary contents are the only history that can be referenced and                      | 10798    19
   491       | *  logically immediately precede the data compressed in the first subsequent                    | 10799    19
   492       | *  compression call.                                                                            | 10800    19
   493       | *                                                                                               | 10801    19
   494       | *  The dictionary will only remain attached to the working stream through the                   | 10802    19
   495       | *  first compression call, at the end of which it is cleared. The dictionary                    | 10803    19
   496       | *  stream (and source buffer) must remain in-place / accessible / unchanged                     | 10804    19
   497       | *  through the completion of the first compression call on the stream.                          | 10805    19
   498       | */                                                                                              | 10806    19
   499       |LZ4LIB_STATIC_API void LZ4_attach_dictionary(LZ4_stream_t* workingStream, const LZ4_stream_t* dic| 10807    19
   499       +tionaryStream);                                                                                  + 10807    19
   499       + void LZ4_attach_dictionary(LZ4_stream_t* workingStream, const LZ4_stream_t* dictionaryStream);  + 10807    19
   500       |                                                                                                 | 10808    19
   501       |                                                                                                 | 10809    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   213


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   502       |/*! In-place compression and decompression                                                       | 10810    19
   503       | *                                                                                               | 10811    19
   504       | * It's possible to have input and output sharing the same buffer,                               | 10812    19
   505       | * for highly contrained memory environments.                                                    | 10813    19
   506       | * In both cases, it requires input to lay at the end of the buffer,                             | 10814    19
   507       | * and decompression to start at beginning of the buffer.                                        | 10815    19
   508       | * Buffer size must feature some margin, hence be larger than final size.                        | 10816    19
   509       | *                                                                                               | 10817    19
   510       | * |<------------------------buffer--------------------------------->|                           | 10818    19
   511       | *                             |<-----------compressed data--------->|                           | 10819    19
   512       | * |<-----------decompressed size------------------>|                                            | 10820    19
   513       | *                                                  |<----margin---->|                           | 10821    19
   514       | *                                                                                               | 10822    19
   515       | * This technique is more useful for decompression,                                              | 10823    19
   516       | * since decompressed size is typically larger,                                                  | 10824    19
   517       | * and margin is short.                                                                          | 10825    19
   518       | *                                                                                               | 10826    19
   519       | * In-place decompression will work inside any buffer                                            | 10827    19
   520       | * which size is >= LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize).                        | 10828    19
   521       | * This presumes that decompressedSize > compressedSize.                                         | 10829    19
   522       | * Otherwise, it means compression actually expanded data,                                       | 10830    19
   523       | * and it would be more efficient to store such data with a flag indicating it's not compressed. | 10831    19
   524       | * This can happen when data is not compressible (already compressed, or encrypted).             | 10832    19
   525       | *                                                                                               | 10833    19
   526       | * For in-place compression, margin is larger, as it must be able to cope with both              | 10834    19
   527       | * history preservation, requiring input data to remain unmodified up to LZ4_DISTANCE_MAX,       | 10835    19
   528       | * and data expansion, which can happen when input is not compressible.                          | 10836    19
   529       | * As a consequence, buffer size requirements are much higher,                                   | 10837    19
   530       | * and memory savings offered by in-place compression are more limited.                          | 10838    19
   531       | *                                                                                               | 10839    19
   532       | * There are ways to limit this cost for compression :                                           | 10840    19
   533       | * - Reduce history size, by modifying LZ4_DISTANCE_MAX.                                         | 10841    19
   534       | *   Note that it is a compile-time constant, so all compressions will apply this limit.         | 10842    19
   535       | *   Lower values will reduce compression ratio, except when input_size < LZ4_DISTANCE_MAX,      | 10843    19
   536       | *   so it's a reasonable trick when inputs are known to be small.                               | 10844    19
   537       | * - Require the compressor to deliver a "maximum compressed size".                              | 10845    19
   538       | *   This is the `dstCapacity` parameter in `LZ4_compress*()`.                                   | 10846    19
   539       | *   When this size is < LZ4_COMPRESSBOUND(inputSize), then compression can fail,                | 10847    19
   540       | *   in which case, the return code will be 0 (zero).                                            | 10848    19
   541       | *   The caller must be ready for these cases to happen,                                         | 10849    19
   542       | *   and typically design a backup scheme to send data uncompressed.                             | 10850    19
   543       | * The combination of both techniques can significantly reduce                                   | 10851    19
   544       | * the amount of margin required for in-place compression.                                       | 10852    19
   545       | *                                                                                               | 10853    19
   546       | * In-place compression can work in any buffer                                                   | 10854    19
   547       | * which size is >= (maxCompressedSize)                                                          | 10855    19
   548       | * with maxCompressedSize == LZ4_COMPRESSBOUND(srcSize) for guaranteed compression success.      | 10856    19
   549       | * LZ4_COMPRESS_INPLACE_BUFFER_SIZE() depends on both maxCompressedSize and LZ4_DISTANCE_MAX,    | 10857    19
   550       | * so it's possible to reduce memory requirements by playing with them.                          | 10858    19
   551       | */                                                                                              | 10859    19
   552       |                                                                                                 | 10860    19
   553       |#define LZ4_DECOMPRESS_INPLACE_MARGIN(compressedSize)          (((compressedSize) >> 8) + 32)    | 10861    19
   554       |#define LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize)   ((decompressedSize) + LZ4_DECOMPRE| 10862    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   214


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   554       +SS_INPLACE_MARGIN(decompressedSize))  /**< note: presumes that compressedSize < decompressedSize.+ 10862    19
   554       + note2: margin is overestimated a bit, since it could use compressedSize instead */              + 10862    19
   555       |                                                                                                 | 10863    19
   556       |#ifndef LZ4_DISTANCE_MAX   /* history window size; can be user-defined at compile time */        | 10864    19
   557       |#  define LZ4_DISTANCE_MAX 65535   /* set to maximum value by default */                         | 10865    19
   558       |#endif                                                                                           | 10866    19
   559       |                                                                                                 | 10867    19
   560       |#define LZ4_COMPRESS_INPLACE_MARGIN                           (LZ4_DISTANCE_MAX + 32)   /* LZ4_DI| 10868    19
   560       +STANCE_MAX can be safely replaced by srcSize when it's smaller */                                + 10868    19
   561       |#define LZ4_COMPRESS_INPLACE_BUFFER_SIZE(maxCompressedSize)   ((maxCompressedSize) + LZ4_COMPRESS| 10869    19
   561       +_INPLACE_MARGIN)  /**< maxCompressedSize is generally LZ4_COMPRESSBOUND(inputSize), but can be se+ 10869    19
   561       +t to any lower value, with the risk that compression can fail (return code 0(zero)) */           + 10869    19
   562       |                                                                                                 | 10870    19
   563       |#endif   /* LZ4_STATIC_3504398509 */                                                             | 10871    19
   564       |#endif   /* LZ4_STATIC_LINKING_ONLY */                                                           | 10872    19
   565       |                                                                                                 | 10873    19
   566       |                                                                                                 | 10874    19
   567       |                                                                                                 | 10875    19
   568       |#ifndef LZ4_H_98237428734687                                                                     | 10876    19
   569       |#define LZ4_H_98237428734687                                                                     | 10877    19
   570       |                                                                                                 | 10878    19
   571       |/*-************************************************************                                  | 10879    19
   572       | *  Private Definitions                                                                          | 10880    19
   573       | **************************************************************                                  | 10881    19
   574       | * Do not use these definitions directly.                                                        | 10882    19
   575       | * They are only exposed to allow static allocation of `LZ4_stream_t` and `LZ4_streamDecode_t`.  | 10883    19
   576       | * Accessing members will expose user code to API and/or ABI break in future versions of the libr| 10884    19
   576       +ary.                                                                                             + 10884    19
   577       | **************************************************************/                                 | 10885    19
   578       |#define LZ4_HASHLOG   (LZ4_MEMORY_USAGE-2)                                                       | 10886    19
   579       |#define LZ4_HASHTABLESIZE (1 << LZ4_MEMORY_USAGE)                                                | 10887    19
   580       |#define LZ4_HASH_SIZE_U32 (1 << LZ4_HASHLOG)       /* required as macro for static allocation */ | 10888    19
   581       |                                                                                                 | 10889    19
   582       |#if defined(__cplusplus) || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 *| 10890    19
   582       +/)                                                                                               + 10890    19
   583       |# include <stdint.h>                                                                             | 10891    19
   584       |  typedef  int8_t  LZ4_i8;                                                                       | 10892    19
   585       |  typedef uint8_t  LZ4_byte;                                                                     | 10893    19
   586       |  typedef uint16_t LZ4_u16;                                                                      | 10894    19
   587       |  typedef uint32_t LZ4_u32;                                                                      | 10895    19
   588       |#else                                                                                            | 10896    19
   589       |  typedef   signed char  LZ4_i8;                                                                 | 10897    19
   590       |  typedef unsigned char  LZ4_byte;                                                               | 10898    19
   591       |  typedef unsigned short LZ4_u16;                                                                | 10899    19
   592       |  typedef unsigned int   LZ4_u32;                                                                | 10900    19
   593       |#endif                                                                                           | 10901    19
   594       |                                                                                                 | 10902    19
   595       |typedef struct LZ4_stream_t_internal LZ4_stream_t_internal;                                      | 10903    19
   596       |struct LZ4_stream_t_internal {                                                                   | 10904    19
   597       |    LZ4_u32 hashTable[LZ4_HASH_SIZE_U32];                                                        | 10905    19
   598       |    LZ4_u32 currentOffset;                                                                       | 10906    19
   599       |    LZ4_u32 tableType;                                                                           | 10907    19
   600       |    const LZ4_byte* dictionary;                                                                  | 10908    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   215


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   601       |    const LZ4_stream_t_internal* dictCtx;                                                        | 10909    19
   602       |    LZ4_u32 dictSize;                                                                            | 10910    19
   603       |};                                                                                               | 10911    19
   604       |                                                                                                 | 10912    19
   605       |typedef struct {                                                                                 | 10913    19
   606       |    const LZ4_byte* externalDict;                                                                | 10914    19
   607       |    size_t extDictSize;                                                                          | 10915    19
   608       |    const LZ4_byte* prefixEnd;                                                                   | 10916    19
   609       |    size_t prefixSize;                                                                           | 10917    19
   610       |} LZ4_streamDecode_t_internal;                                                                   | 10918    19
   611       |                                                                                                 | 10919    19
   612       |                                                                                                 | 10920    19
   613       |/*! LZ4_stream_t :                                                                               | 10921    19
   614       | *  Do not use below internal definitions directly !                                             | 10922    19
   615       | *  Declare or allocate an LZ4_stream_t instead.                                                 | 10923    19
   616       | *  LZ4_stream_t can also be created using LZ4_createStream(), which is recommended.             | 10924    19
   617       | *  The structure definition can be convenient for static allocation                             | 10925    19
   618       | *  (on stack, or as part of larger structure).                                                  | 10926    19
   619       | *  Init this structure with LZ4_initStream() before first use.                                  | 10927    19
   620       | *  note : only use this definition in association with static linking !                         | 10928    19
   621       | *  this definition is not API/ABI safe, and may change in future versions.                      | 10929    19
   622       | */                                                                                              | 10930    19
   623       |#define LZ4_STREAMSIZE       16416  /* static size, for inter-version compatibility */           | 10931    19
   624       |#define LZ4_STREAMSIZE_VOIDP (LZ4_STREAMSIZE / sizeof(void*))                                    | 10932    19
   625       |union LZ4_stream_u {                                                                             | 10933    19
   626       |    void* table[LZ4_STREAMSIZE_VOIDP];                                                           | 10934    19
   627       |    LZ4_stream_t_internal internal_donotuse;                                                     | 10935    19
   628       |}; /* previously typedef'd to LZ4_stream_t */                                                    | 10936    19
   629       |                                                                                                 | 10937    19
   630       |                                                                                                 | 10938    19
   631       |/*! LZ4_initStream() : v1.9.0+                                                                   | 10939    19
   632       | *  An LZ4_stream_t structure must be initialized at least once.                                 | 10940    19
   633       | *  This is automatically done when invoking LZ4_createStream(),                                 | 10941    19
   634       | *  but it's not when the structure is simply declared on stack (for example).                   | 10942    19
   635       | *                                                                                               | 10943    19
   636       | *  Use LZ4_initStream() to properly initialize a newly declared LZ4_stream_t.                   | 10944    19
   637       | *  It can also initialize any arbitrary buffer of sufficient size,                              | 10945    19
   638       | *  and will @return a pointer of proper type upon initialization.                               | 10946    19
   639       | *                                                                                               | 10947    19
   640       | *  Note : initialization fails if size and alignment conditions are not respected.              | 10948    19
   641       | *         In which case, the function will @return NULL.                                        | 10949    19
   642       | *  Note2: An LZ4_stream_t structure guarantees correct alignment and size.                      | 10950    19
   643       | *  Note3: Before v1.9.0, use LZ4_resetStream() instead                                          | 10951    19
   644       | */                                                                                              | 10952    19
   645       |LZ4LIB_API LZ4_stream_t* LZ4_initStream (void* buffer, size_t size);                             | 10953    19
   646       |                                                                                                 | 10954    19
   647       |                                                                                                 | 10955    19
   648       |/*! LZ4_streamDecode_t :                                                                         | 10956    19
   649       | *  information structure to track an LZ4 stream during decompression.                           | 10957    19
   650       | *  init this structure  using LZ4_setStreamDecode() before first use.                           | 10958    19
   651       | *  note : only use in association with static linking !                                         | 10959    19
   652       | *         this definition is not API/ABI safe,                                                  | 10960    19
   653       | *         and may change in a future version !                                                  | 10961    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   216


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   654       | */                                                                                              | 10962    19
   655       |#define LZ4_STREAMDECODESIZE_U64 (4 + ((sizeof(void*)==16) ? 2 : 0) /*AS-400*/ )                 | 10963    19
   656       |#define LZ4_STREAMDECODESIZE     (LZ4_STREAMDECODESIZE_U64 * sizeof(unsigned long long))         | 10964    19
   657       |union LZ4_streamDecode_u {                                                                       | 10965    19
   658       |    unsigned long long table[LZ4_STREAMDECODESIZE_U64];                                          | 10966    19
   659       |    LZ4_streamDecode_t_internal internal_donotuse;                                               | 10967    19
   660       |} ;   /* previously typedef'd to LZ4_streamDecode_t */                                           | 10968    19
   661       |                                                                                                 | 10969    19
   662       |                                                                                                 | 10970    19
   663       |                                                                                                 | 10971    19
   664       |/*-************************************                                                          | 10972    19
   665       |*  Obsolete Functions                                                                            | 10973    19
   666       |**************************************/                                                          | 10974    19
   667       |                                                                                                 | 10975    19
   668       |/*! Deprecation warnings                                                                         | 10976    19
   669       | *                                                                                               | 10977    19
   670       | *  Deprecated functions make the compiler generate a warning when invoked.                      | 10978    19
   671       | *  This is meant to invite users to update their source code.                                   | 10979    19
   672       | *  Should deprecation warnings be a problem, it is generally possible to disable them,          | 10980    19
   673       | *  typically with -Wno-deprecated-declarations for gcc                                          | 10981    19
   674       | *  or _CRT_SECURE_NO_WARNINGS in Visual.                                                        | 10982    19
   675       | *                                                                                               | 10983    19
   676       | *  Another method is to define LZ4_DISABLE_DEPRECATE_WARNINGS                                   | 10984    19
   677       | *  before including the header file.                                                            | 10985    19
   678       | */                                                                                              | 10986    19
   679       |#ifdef LZ4_DISABLE_DEPRECATE_WARNINGS                                                            | 10987    19
   680       |#  define LZ4_DEPRECATED(message)   /* disable deprecation warnings */                           | 10988    19
   681       |#else                                                                                            | 10989    19
   682       |#  if defined (__cplusplus) && (__cplusplus >= 201402) /* C++14 or greater */                    | 10990    19
   683       |#    define LZ4_DEPRECATED(message) [[deprecated(message)]]                                      | 10991    19
   684       |#  elif defined(_MSC_VER)                                                                        | 10992    19
   685       |#    define LZ4_DEPRECATED(message) __declspec(deprecated(message))                              | 10993    19
   686       |#  elif defined(__clang__) || (defined(__GNUC__) && (__GNUC__ * 10 + __GNUC_MINOR__ >= 45))      | 10994    19
   687       |#    define LZ4_DEPRECATED(message) __attribute__((deprecated(message)))                         | 10995    19
   688       |#  elif defined(__GNUC__) && (__GNUC__ * 10 + __GNUC_MINOR__ >= 31)                              | 10996    19
   689       |#    define LZ4_DEPRECATED(message) __attribute__((deprecated))                                  | 10997    19
   690       |#  else                                                                                          | 10998    19
   691       |#    pragma message("WARNING: LZ4_DEPRECATED needs custom implementation for this compiler")     | 10999    19
   692       |#    define LZ4_DEPRECATED(message)   /* disabled */                                             | 11000    19
   693       |#  endif                                                                                         | 11001    19
   694       |#endif /* LZ4_DISABLE_DEPRECATE_WARNINGS */                                                      | 11002    19
   695       |                                                                                                 | 11003    19
   696       |/*! Obsolete compression functions (since v1.7.3) */                                             | 11004    19
   697       |LZ4_DEPRECATED("use LZ4_compress_default() instead")       LZ4LIB_API int LZ4_compress           | 11005    19
   697       +    (const char* src, char* dest, int srcSize);                                                  + 11005    19
   698       |LZ4_DEPRECATED("use LZ4_compress_default() instead")       LZ4LIB_API int LZ4_compress_limitedOut| 11006    19
   698       +put (const char* src, char* dest, int srcSize, int maxOutputSize);                               + 11006    19
   699       |LZ4_DEPRECATED("use LZ4_compress_fast_extState() instead") LZ4LIB_API int LZ4_compress_withState | 11007    19
   699       +              (void* state, const char* source, char* dest, int inputSize);                      + 11007    19
   700       |LZ4_DEPRECATED("use LZ4_compress_fast_extState() instead") LZ4LIB_API int LZ4_compress_limitedOut| 11008    19
   700       +put_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);   + 11008    19
   701       |LZ4_DEPRECATED("use LZ4_compress_fast_continue() instead") LZ4LIB_API int LZ4_compress_continue  | 11009    19
   701       +              (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize);      + 11009    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   217


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   702       |LZ4_DEPRECATED("use LZ4_compress_fast_continue() instead") LZ4LIB_API int LZ4_compress_limitedOut| 11010    19
   702       +put_continue  (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize, int ma+ 11010    19
   702       +xOutputSize);                                                                                    + 11010    19
   703       |                                                                                                 | 11011    19
   704       |/*! Obsolete decompression functions (since v1.8.0) */                                           | 11012    19
   705       |LZ4_DEPRECATED("use LZ4_decompress_fast() instead") LZ4LIB_API int LZ4_uncompress (const char* so| 11013    19
   705       +urce, char* dest, int outputSize);                                                               + 11013    19
   706       |LZ4_DEPRECATED("use LZ4_decompress_safe() instead") LZ4LIB_API int LZ4_uncompress_unknownOutputSi| 11014    19
   706       +ze (const char* source, char* dest, int isize, int maxOutputSize);                               + 11014    19
   707       |                                                                                                 | 11015    19
   708       |/* Obsolete streaming functions (since v1.7.0)                                                   | 11016    19
   709       | * degraded functionality; do not use!                                                           | 11017    19
   710       | *                                                                                               | 11018    19
   711       | * In order to perform streaming compression, these functions depended on data                   | 11019    19
   712       | * that is no longer tracked in the state. They have been preserved as well as                   | 11020    19
   713       | * possible: using them will still produce a correct output. However, they don't                 | 11021    19
   714       | * actually retain any history between compression calls. The compression ratio                  | 11022    19
   715       | * achieved will therefore be no better than compressing each chunk                              | 11023    19
   716       | * independently.                                                                                | 11024    19
   717       | */                                                                                              | 11025    19
   718       |LZ4_DEPRECATED("Use LZ4_createStream() instead") LZ4LIB_API void* LZ4_create (char* inputBuffer);| 11026    19
   719       |LZ4_DEPRECATED("Use LZ4_createStream() instead") LZ4LIB_API int   LZ4_sizeofStreamState(void);   | 11027    19
   720       |LZ4_DEPRECATED("Use LZ4_resetStream() instead")  LZ4LIB_API int   LZ4_resetStreamState(void* stat| 11028    19
   720       +e, char* inputBuffer);                                                                           + 11028    19
   721       |LZ4_DEPRECATED("Use LZ4_saveDict() instead")     LZ4LIB_API char* LZ4_slideInputBuffer (void* sta| 11029    19
   721       +te);                                                                                             + 11029    19
   722       |                                                                                                 | 11030    19
   723       |/*! Obsolete streaming decoding functions (since v1.7.0) */                                      | 11031    19
   724       |LZ4_DEPRECATED("use LZ4_decompress_safe_usingDict() instead") LZ4LIB_API int LZ4_decompress_safe_| 11032    19
   724       +withPrefix64k (const char* src, char* dst, int compressedSize, int maxDstSize);                  + 11032    19
   725       |LZ4_DEPRECATED("use LZ4_decompress_fast_usingDict() instead") LZ4LIB_API int LZ4_decompress_fast_| 11033    19
   725       +withPrefix64k (const char* src, char* dst, int originalSize);                                    + 11033    19
   726       |                                                                                                 | 11034    19
   727       |/*! Obsolete LZ4_decompress_fast variants (since v1.9.0) :                                       | 11035    19
   728       | *  These functions used to be faster than LZ4_decompress_safe(),                                | 11036    19
   729       | *  but this is no longer the case. They are now slower.                                         | 11037    19
   730       | *  This is because LZ4_decompress_fast() doesn't know the input size,                           | 11038    19
   731       | *  and therefore must progress more cautiously into the input buffer to not read beyond the end | 11039    19
   731       +of block.                                                                                        + 11039    19
   732       | *  On top of that `LZ4_decompress_fast()` is not protected vs malformed or malicious inputs, mak| 11040    19
   732       +ing it a security liability.                                                                     + 11040    19
   733       | *  As a consequence, LZ4_decompress_fast() is strongly discouraged, and deprecated.             | 11041    19
   734       | *                                                                                               | 11042    19
   735       | *  The last remaining LZ4_decompress_fast() specificity is that                                 | 11043    19
   736       | *  it can decompress a block without knowing its compressed size.                               | 11044    19
   737       | *  Such functionality can be achieved in a more secure manner                                   | 11045    19
   738       | *  by employing LZ4_decompress_safe_partial().                                                  | 11046    19
   739       | *                                                                                               | 11047    19
   740       | *  Parameters:                                                                                  | 11048    19
   741       | *  originalSize : is the uncompressed size to regenerate.                                       | 11049    19
   742       | *                 `dst` must be already allocated, its size must be >= 'originalSize' bytes.    | 11050    19
   743       | * @return : number of bytes read from source buffer (== compressed size).                       | 11051    19
   744       | *           The function expects to finish at block's end exactly.                              | 11052    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   218


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   745       | *           If the source stream is detected malformed, the function stops decoding and returns | 11053    19
   745       +a negative result.                                                                               + 11053    19
   746       | *  note : LZ4_decompress_fast*() requires originalSize. Thanks to this information, it never wri| 11054    19
   746       +tes past the output buffer.                                                                      + 11054    19
   747       | *         However, since it doesn't know its 'src' size, it may read an unknown amount of input,| 11055    19
   747       + past input buffer bounds.                                                                       + 11055    19
   748       | *         Also, since match offsets are not validated, match reads from 'src' may underflow too.| 11056    19
   749       | *         These issues never happen if input (compressed) data is correct.                      | 11057    19
   750       | *         But they may happen if input data is invalid (error or intentional tampering).        | 11058    19
   751       | *         As a consequence, use these functions in trusted environments with trusted data **only| 11059    19
   751       +**.                                                                                              + 11059    19
   752       | */                                                                                              | 11060    19
   753       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe() inst| 11061    19
   753       +ead")                                                                                            + 11061    19
   754       |LZ4LIB_API int LZ4_decompress_fast (const char* src, char* dst, int originalSize);               | 11062    19
   755       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe_contin| 11063    19
   755       +ue() instead")                                                                                   + 11063    19
   756       |LZ4LIB_API int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* sr| 11064    19
   756       +c, char* dst, int originalSize);                                                                 + 11064    19
   757       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe_usingD| 11065    19
   757       +ict() instead")                                                                                  + 11065    19
   758       |LZ4LIB_API int LZ4_decompress_fast_usingDict (const char* src, char* dst, int originalSize, const| 11066    19
   758       + char* dictStart, int dictSize);                                                                 + 11066    19
   759       |                                                                                                 | 11067    19
   760       |/*! LZ4_resetStream() :                                                                          | 11068    19
   761       | *  An LZ4_stream_t structure must be initialized at least once.                                 | 11069    19
   762       | *  This is done with LZ4_initStream(), or LZ4_resetStream().                                    | 11070    19
   763       | *  Consider switching to LZ4_initStream(),                                                      | 11071    19
   764       | *  invoking LZ4_resetStream() will trigger deprecation warnings in the future.                  | 11072    19
   765       | */                                                                                              | 11073    19
   766       |LZ4LIB_API void LZ4_resetStream (LZ4_stream_t* streamPtr);                                       | 11074    19
   767       |                                                                                                 | 11075    19
   768       |                                                                                                 | 11076    19
   769       |#endif /* LZ4_H_98237428734687 */                                                                | 11077    19
   770       |                                                                                                 | 11078    19
   771       |                                                                                                 | 11079    19
   772       |#if defined (__cplusplus)                                                                        | 11080    19
   773       |}                                                                                                | 11081    19
   774       |#endif                                                                                           | 11082    19
   316       |                                                                                                 | 11083    18
   317       |#if defined (__cplusplus)                                                                        | 11084    18
   318       |extern "C" {                                                                                     | 11085    18
   319       |#endif                                                                                           | 11086    18
   320       |                                                                                                 | 11087    18
   321       |/*! LZ4_setCompressionLevel() : v1.8.0+ (experimental)                                           | 11088    18
   322       | *  It's possible to change compression level                                                    | 11089    18
   323       | *  between successive invocations of LZ4_compress_HC_continue*()                                | 11090    18
   324       | *  for dynamic adaptation.                                                                      | 11091    18
   325       | */                                                                                              | 11092    18
   326       |LZ4LIB_STATIC_API void LZ4_setCompressionLevel(                                                  | 11093    18
   326       + void LZ4_setCompressionLevel(                                                                   + 11093    18
   327       |    LZ4_streamHC_t* LZ4_streamHCPtr, int compressionLevel);                                      | 11094    18
   328       |                                                                                                 | 11095    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   219


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   329       |/*! LZ4_favorDecompressionSpeed() : v1.8.2+ (experimental)                                       | 11096    18
   330       | *  Opt. Parser will favor decompression speed over compression ratio.                           | 11097    18
   331       | *  Only applicable to levels >= LZ4HC_CLEVEL_OPT_MIN.                                           | 11098    18
   332       | */                                                                                              | 11099    18
   333       |LZ4LIB_STATIC_API void LZ4_favorDecompressionSpeed(                                              | 11100    18
   333       + void LZ4_favorDecompressionSpeed(                                                               + 11100    18
   334       |    LZ4_streamHC_t* LZ4_streamHCPtr, int favor);                                                 | 11101    18
   335       |                                                                                                 | 11102    18
   336       |/*! LZ4_resetStreamHC_fast() : v1.9.0+                                                           | 11103    18
   337       | *  When an LZ4_streamHC_t is known to be in a internally coherent state,                        | 11104    18
   338       | *  it can often be prepared for a new compression with almost no work, only                     | 11105    18
   339       | *  sometimes falling back to the full, expensive reset that is always required                  | 11106    18
   340       | *  when the stream is in an indeterminate state (i.e., the reset performed by                   | 11107    18
   341       | *  LZ4_resetStreamHC()).                                                                        | 11108    18
   342       | *                                                                                               | 11109    18
   343       | *  LZ4_streamHCs are guaranteed to be in a valid state when:                                    | 11110    18
   344       | *  - returned from LZ4_createStreamHC()                                                         | 11111    18
   345       | *  - reset by LZ4_resetStreamHC()                                                               | 11112    18
   346       | *  - memset(stream, 0, sizeof(LZ4_streamHC_t))                                                  | 11113    18
   347       | *  - the stream was in a valid state and was reset by LZ4_resetStreamHC_fast()                  | 11114    18
   348       | *  - the stream was in a valid state and was then used in any compression call                  | 11115    18
   349       | *    that returned success                                                                      | 11116    18
   350       | *  - the stream was in an indeterminate state and was used in a compression                     | 11117    18
   351       | *    call that fully reset the state (LZ4_compress_HC_extStateHC()) and that                    | 11118    18
   352       | *    returned success                                                                           | 11119    18
   353       | *                                                                                               | 11120    18
   354       | *  Note:                                                                                        | 11121    18
   355       | *  A stream that was last used in a compression call that returned an error                     | 11122    18
   356       | *  may be passed to this function. However, it will be fully reset, which will                  | 11123    18
   357       | *  clear any existing history and settings from the context.                                    | 11124    18
   358       | */                                                                                              | 11125    18
   359       |LZ4LIB_STATIC_API void LZ4_resetStreamHC_fast(                                                   | 11126    18
   359       + void LZ4_resetStreamHC_fast(                                                                    + 11126    18
   360       |    LZ4_streamHC_t* LZ4_streamHCPtr, int compressionLevel);                                      | 11127    18
   361       |                                                                                                 | 11128    18
   362       |/*! LZ4_compress_HC_extStateHC_fastReset() :                                                     | 11129    18
   363       | *  A variant of LZ4_compress_HC_extStateHC().                                                   | 11130    18
   364       | *                                                                                               | 11131    18
   365       | *  Using this variant avoids an expensive initialization step. It is only safe                  | 11132    18
   366       | *  to call if the state buffer is known to be correctly initialized already                     | 11133    18
   367       | *  (see above comment on LZ4_resetStreamHC_fast() for a definition of                           | 11134    18
   368       | *  "correctly initialized"). From a high level, the difference is that this                     | 11135    18
   369       | *  function initializes the provided state with a call to                                       | 11136    18
   370       | *  LZ4_resetStreamHC_fast() while LZ4_compress_HC_extStateHC() starts with a                    | 11137    18
   371       | *  call to LZ4_resetStreamHC().                                                                 | 11138    18
   372       | */                                                                                              | 11139    18
   373       |LZ4LIB_STATIC_API int LZ4_compress_HC_extStateHC_fastReset (                                     | 11140    18
   373       + int LZ4_compress_HC_extStateHC_fastReset (                                                      + 11140    18
   374       |    void* state,                                                                                 | 11141    18
   375       |    const char* src, char* dst,                                                                  | 11142    18
   376       |    int srcSize, int dstCapacity,                                                                | 11143    18
   377       |    int compressionLevel);                                                                       | 11144    18
   378       |                                                                                                 | 11145    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   220


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   379       |/*! LZ4_attach_HC_dictionary() :                                                                 | 11146    18
   380       | *  This is an experimental API that allows for the efficient use of a                           | 11147    18
   381       | *  static dictionary many times.                                                                | 11148    18
   382       | *                                                                                               | 11149    18
   383       | *  Rather than re-loading the dictionary buffer into a working context before                   | 11150    18
   384       | *  each compression, or copying a pre-loaded dictionary's LZ4_streamHC_t into a                 | 11151    18
   385       | *  working LZ4_streamHC_t, this function introduces a no-copy setup mechanism,                  | 11152    18
   386       | *  in which the working stream references the dictionary stream in-place.                       | 11153    18
   387       | *                                                                                               | 11154    18
   388       | *  Several assumptions are made about the state of the dictionary stream.                       | 11155    18
   389       | *  Currently, only streams which have been prepared by LZ4_loadDictHC() should                  | 11156    18
   390       | *  be expected to work.                                                                         | 11157    18
   391       | *                                                                                               | 11158    18
   392       | *  Alternatively, the provided dictionary stream pointer may be NULL, in which                  | 11159    18
   393       | *  case any existing dictionary stream is unset.                                                | 11160    18
   394       | *                                                                                               | 11161    18
   395       | *  A dictionary should only be attached to a stream without any history (i.e.,                  | 11162    18
   396       | *  a stream that has just been reset).                                                          | 11163    18
   397       | *                                                                                               | 11164    18
   398       | *  The dictionary will remain attached to the working stream only for the                       | 11165    18
   399       | *  current stream session. Calls to LZ4_resetStreamHC(_fast) will remove the                    | 11166    18
   400       | *  dictionary context association from the working stream. The dictionary                       | 11167    18
   401       | *  stream (and source buffer) must remain in-place / accessible / unchanged                     | 11168    18
   402       | *  through the lifetime of the stream session.                                                  | 11169    18
   403       | */                                                                                              | 11170    18
   404       |LZ4LIB_STATIC_API void LZ4_attach_HC_dictionary(                                                 | 11171    18
   404       + void LZ4_attach_HC_dictionary(                                                                  + 11171    18
   405       |          LZ4_streamHC_t *working_stream,                                                        | 11172    18
   406       |    const LZ4_streamHC_t *dictionary_stream);                                                    | 11173    18
   407       |                                                                                                 | 11174    18
   408       |#if defined (__cplusplus)                                                                        | 11175    18
   409       |}                                                                                                | 11176    18
   410       |#endif                                                                                           | 11177    18
   411       |                                                                                                 | 11178    18
   412       |#endif   /* LZ4_HC_SLO_098092834 */                                                              | 11179    18
   413       |#endif   /* LZ4_HC_STATIC_LINKING_ONLY */                                                        | 11180    18
    54       |                                                                                                 | 11181     1
    55       |                                                                                                 | 11182     1
    56       |/*===   Common definitions   ===*/                                                               | 11183     1
    57       |#if defined(__GNUC__)                                                                            | 11184     1
    58       |#  pragma GCC diagnostic ignored "-Wunused-function"                                             | 11185     1
    59       |#endif                                                                                           | 11186     1
    60       |#if defined (__clang__)                                                                          | 11187     1
    61       |#  pragma clang diagnostic ignored "-Wunused-function"                                           | 11188     1
    62       |#endif                                                                                           | 11189     1
    63       |                                                                                                 | 11190     1
    64       |#define LZ4_COMMONDEFS_ONLY                                                                      | 11191     1
    65       |#ifndef LZ4_SRC_INCLUDED                                                                         | 11192     1
    66       |#include "lz4.c"   /* LZ4_count, constants, mem */                                               | 11193     1
     1       |/*                                                                                               | 11194    23
     2       |   LZ4 - Fast LZ compression algorithm                                                           | 11195    23
     3       |   Copyright (C) 2011-present, Yann Collet.                                                      | 11196    23
     4       |                                                                                                 | 11197    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   221


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     5       |   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)                     | 11198    23
     6       |                                                                                                 | 11199    23
     7       |   Redistribution and use in source and binary forms, with or without                            | 11200    23
     8       |   modification, are permitted provided that the following conditions are                        | 11201    23
     9       |   met:                                                                                          | 11202    23
    10       |                                                                                                 | 11203    23
    11       |       * Redistributions of source code must retain the above copyright                          | 11204    23
    12       |   notice, this list of conditions and the following disclaimer.                                 | 11205    23
    13       |       * Redistributions in binary form must reproduce the above                                 | 11206    23
    14       |   copyright notice, this list of conditions and the following disclaimer                        | 11207    23
    15       |   in the documentation and/or other materials provided with the                                 | 11208    23
    16       |   distribution.                                                                                 | 11209    23
    17       |                                                                                                 | 11210    23
    18       |   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS                           | 11211    23
    19       |   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT                             | 11212    23
    20       |   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR                         | 11213    23
    21       |   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT                          | 11214    23
    22       |   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                         | 11215    23
    23       |   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                              | 11216    23
    24       |   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                         | 11217    23
    25       |   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         | 11218    23
    26       |   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           | 11219    23
    27       |   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE                         | 11220    23
    28       |   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          | 11221    23
    29       |                                                                                                 | 11222    23
    30       |   You can contact the author at :                                                               | 11223    23
    31       |    - LZ4 homepage : http://www.lz4.org                                                          | 11224    23
    32       |    - LZ4 source repository : https://github.com/lz4/lz4                                         | 11225    23
    33       |*/                                                                                               | 11226    23
    34       |                                                                                                 | 11227    23
    35       |/*-************************************                                                          | 11228    23
    36       |*  Tuning parameters                                                                             | 11229    23
    37       |**************************************/                                                          | 11230    23
    38       |/*                                                                                               | 11231    23
    39       | * LZ4_HEAPMODE :                                                                                | 11232    23
    40       | * Select how default compression functions will allocate memory for their hash table,           | 11233    23
    41       | * in memory stack (0:default, fastest), or in memory heap (1:requires malloc()).                | 11234    23
    42       | */                                                                                              | 11235    23
    43       |#ifndef LZ4_HEAPMODE                                                                             | 11236    23
    44       |#  define LZ4_HEAPMODE 0                                                                         | 11237    23
    45       |#endif                                                                                           | 11238    23
    46       |                                                                                                 | 11239    23
    47       |/*                                                                                               | 11240    23
    48       | * LZ4_ACCELERATION_DEFAULT :                                                                    | 11241    23
    49       | * Select "acceleration" for LZ4_compress_fast() when parameter value <= 0                       | 11242    23
    50       | */                                                                                              | 11243    23
    51       |#define LZ4_ACCELERATION_DEFAULT 1                                                               | 11244    23
    52       |/*                                                                                               | 11245    23
    53       | * LZ4_ACCELERATION_MAX :                                                                        | 11246    23
    54       | * Any "acceleration" value higher than this threshold                                           | 11247    23
    55       | * get treated as LZ4_ACCELERATION_MAX instead (fix #876)                                        | 11248    23
    56       | */                                                                                              | 11249    23
    57       |#define LZ4_ACCELERATION_MAX 65537                                                               | 11250    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   222


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    58       |                                                                                                 | 11251    23
    59       |                                                                                                 | 11252    23
    60       |/*-************************************                                                          | 11253    23
    61       |*  CPU Feature Detection                                                                         | 11254    23
    62       |**************************************/                                                          | 11255    23
    63       |/* LZ4_FORCE_MEMORY_ACCESS                                                                       | 11256    23
    64       | * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable| 11257    23
    64       +.                                                                                                + 11257    23
    65       | * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.   | 11258    23
    66       | * The below switch allow to select different access method for improved performance.            | 11259    23
    67       | * Method 0 (default) : use `memcpy()`. Safe and portable.                                       | 11260    23
    68       | * Method 1 : `__packed` statement. It depends on compiler extension (ie, not portable).         | 11261    23
    69       | *            This method is safe if your compiler supports it, and *generally* as fast or faster| 11262    23
    69       + than `memcpy`.                                                                                  + 11262    23
    70       | * Method 2 : direct access. This method is portable but violate C standard.                     | 11263    23
    71       | *            It can generate buggy code on targets which assembly generation depends on alignmen| 11264    23
    71       +t.                                                                                               + 11264    23
    72       | *            But in some circumstances, it's the only known way to get the most performance (ie | 11265    23
    72       +GCC + ARMv6)                                                                                     + 11265    23
    73       | * See https://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.  | 11266    23
    74       | * Prefer these methods in priority order (0 > 1 > 2)                                            | 11267    23
    75       | */                                                                                              | 11268    23
    76       |#ifndef LZ4_FORCE_MEMORY_ACCESS   /* can be defined externally */                                | 11269    23
    77       |#  if defined(__GNUC__) && \                                                                     | 11270    23
    78       |  ( defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) \            | 11271    23
    79       |  || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__) )        | 11272    23
    80       |#    define LZ4_FORCE_MEMORY_ACCESS 2                                                            | 11273    23
    81       |#  elif (defined(__INTEL_COMPILER) && !defined(_WIN32)) || defined(__GNUC__)                     | 11274    23
    82       |#    define LZ4_FORCE_MEMORY_ACCESS 1                                                            | 11275    23
    83       |#  endif                                                                                         | 11276    23
    84       |#endif                                                                                           | 11277    23
    85       |                                                                                                 | 11278    23
    86       |/*                                                                                               | 11279    23
    87       | * LZ4_FORCE_SW_BITCOUNT                                                                         | 11280    23
    88       | * Define this parameter if your target system or compiler does not support hardware bit count   | 11281    23
    89       | */                                                                                              | 11282    23
    90       |#if defined(_MSC_VER) && defined(_WIN32_WCE)   /* Visual Studio for WinCE doesn't support Hardwar| 11283    23
    90       +e bit count */                                                                                   + 11283    23
    91       |#  undef  LZ4_FORCE_SW_BITCOUNT  /* avoid double def */                                          | 11284    23
    92       |#  define LZ4_FORCE_SW_BITCOUNT                                                                  | 11285    23
    93       |#endif                                                                                           | 11286    23
    94       |                                                                                                 | 11287    23
    95       |                                                                                                 | 11288    23
    96       |                                                                                                 | 11289    23
    97       |/*-************************************                                                          | 11290    23
    98       |*  Dependency                                                                                    | 11291    23
    99       |**************************************/                                                          | 11292    23
   100       |/*                                                                                               | 11293    23
   101       | * LZ4_SRC_INCLUDED:                                                                             | 11294    23
   102       | * Amalgamation flag, whether lz4.c is included                                                  | 11295    23
   103       | */                                                                                              | 11296    23
   104       |#ifndef LZ4_SRC_INCLUDED                                                                         | 11297    23
   105       |#  define LZ4_SRC_INCLUDED 1                                                                     | 11298    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   223


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   106       |#endif                                                                                           | 11299    23
   107       |                                                                                                 | 11300    23
   108       |#ifndef LZ4_STATIC_LINKING_ONLY                                                                  | 11301    23
   109       |#define LZ4_STATIC_LINKING_ONLY                                                                  | 11302    23
   110       |#endif                                                                                           | 11303    23
   111       |                                                                                                 | 11304    23
   112       |#ifndef LZ4_DISABLE_DEPRECATE_WARNINGS                                                           | 11305    23
   113       |#define LZ4_DISABLE_DEPRECATE_WARNINGS /* due to LZ4_decompress_safe_withPrefix64k */            | 11306    23
   114       |#endif                                                                                           | 11307    23
   115       |                                                                                                 | 11308    23
   116       |#define LZ4_STATIC_LINKING_ONLY  /* LZ4_DISTANCE_MAX */                                          | 11309    23
   117       |#include "lz4.h"                                                                                 | 11310    23
     1       |/*                                                                                               | 11311    19
     2       | *  LZ4 - Fast LZ compression algorithm                                                          | 11312    19
     3       | *  Header File                                                                                  | 11313    19
     4       | *  Copyright (C) 2011-present, Yann Collet.                                                     | 11314    19
     5       |                                                                                                 | 11315    19
     6       |   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)                     | 11316    19
     7       |                                                                                                 | 11317    19
     8       |   Redistribution and use in source and binary forms, with or without                            | 11318    19
     9       |   modification, are permitted provided that the following conditions are                        | 11319    19
    10       |   met:                                                                                          | 11320    19
    11       |                                                                                                 | 11321    19
    12       |       * Redistributions of source code must retain the above copyright                          | 11322    19
    13       |   notice, this list of conditions and the following disclaimer.                                 | 11323    19
    14       |       * Redistributions in binary form must reproduce the above                                 | 11324    19
    15       |   copyright notice, this list of conditions and the following disclaimer                        | 11325    19
    16       |   in the documentation and/or other materials provided with the                                 | 11326    19
    17       |   distribution.                                                                                 | 11327    19
    18       |                                                                                                 | 11328    19
    19       |   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS                           | 11329    19
    20       |   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT                             | 11330    19
    21       |   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR                         | 11331    19
    22       |   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT                          | 11332    19
    23       |   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                         | 11333    19
    24       |   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                              | 11334    19
    25       |   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                         | 11335    19
    26       |   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         | 11336    19
    27       |   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           | 11337    19
    28       |   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE                         | 11338    19
    29       |   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          | 11339    19
    30       |                                                                                                 | 11340    19
    31       |   You can contact the author at :                                                               | 11341    19
    32       |    - LZ4 homepage : http://www.lz4.org                                                          | 11342    19
    33       |    - LZ4 source repository : https://github.com/lz4/lz4                                         | 11343    19
    34       |*/                                                                                               | 11344    19
    35       |#if defined (__cplusplus)                                                                        | 11345    19
    36       |extern "C" {                                                                                     | 11346    19
    37       |#endif                                                                                           | 11347    19
    38       |                                                                                                 | 11348    19
    39       |#ifndef LZ4_H_2983827168210                                                                      | 11349    19
    40       |#define LZ4_H_2983827168210                                                                      | 11350    19
    41       |                                                                                                 | 11351    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   224


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    42       |/* --- Dependency --- */                                                                         | 11352    19
    43       |#include <stddef.h>   /* size_t */                                                               | 11353    19
    44       |                                                                                                 | 11354    19
    45       |                                                                                                 | 11355    19
    46       |/**                                                                                              | 11356    19
    47       |  Introduction                                                                                   | 11357    19
    48       |                                                                                                 | 11358    19
    49       |  LZ4 is lossless compression algorithm, providing compression speed >500 MB/s per core,         | 11359    19
    50       |  scalable with multi-cores CPU. It features an extremely fast decoder, with speed in            | 11360    19
    51       |  multiple GB/s per core, typically reaching RAM speed limits on multi-core systems.             | 11361    19
    52       |                                                                                                 | 11362    19
    53       |  The LZ4 compression library provides in-memory compression and decompression functions.        | 11363    19
    54       |  It gives full buffer control to user.                                                          | 11364    19
    55       |  Compression can be done in:                                                                    | 11365    19
    56       |    - a single step (described as Simple Functions)                                              | 11366    19
    57       |    - a single step, reusing a context (described in Advanced Functions)                         | 11367    19
    58       |    - unbounded multiple steps (described as Streaming compression)                              | 11368    19
    59       |                                                                                                 | 11369    19
    60       |  lz4.h generates and decodes LZ4-compressed blocks (doc/lz4_Block_format.md).                   | 11370    19
    61       |  Decompressing such a compressed block requires additional metadata.                            | 11371    19
    62       |  Exact metadata depends on exact decompression function.                                        | 11372    19
    63       |  For the typical case of LZ4_decompress_safe(),                                                 | 11373    19
    64       |  metadata includes block's compressed size, and maximum bound of decompressed size.             | 11374    19
    65       |  Each application is free to encode and pass such metadata in whichever way it wants.           | 11375    19
    66       |                                                                                                 | 11376    19
    67       |  lz4.h only handle blocks, it can not generate Frames.                                          | 11377    19
    68       |                                                                                                 | 11378    19
    69       |  Blocks are different from Frames (doc/lz4_Frame_format.md).                                    | 11379    19
    70       |  Frames bundle both blocks and metadata in a specified manner.                                  | 11380    19
    71       |  Embedding metadata is required for compressed data to be self-contained and portable.          | 11381    19
    72       |  Frame format is delivered through a companion API, declared in lz4frame.h.                     | 11382    19
    73       |  The `lz4` CLI can only manage frames.                                                          | 11383    19
    74       |*/                                                                                               | 11384    19
    75       |                                                                                                 | 11385    19
    76       |/*^***************************************************************                               | 11386    19
    77       |*  Export parameters                                                                             | 11387    19
    78       |*****************************************************************/                               | 11388    19
    79       |/*                                                                                               | 11389    19
    80       |*  LZ4_DLL_EXPORT :                                                                              | 11390    19
    81       |*  Enable exporting of functions when building a Windows DLL                                     | 11391    19
    82       |*  LZ4LIB_VISIBILITY :                                                                           | 11392    19
    83       |*  Control library symbols visibility.                                                           | 11393    19
    84       |*/                                                                                               | 11394    19
    85       |#ifndef LZ4LIB_VISIBILITY                                                                        | 11395    19
    86       |#  if defined(__GNUC__) && (__GNUC__ >= 4)                                                       | 11396    19
    87       |#    define LZ4LIB_VISIBILITY __attribute__ ((visibility ("default")))                           | 11397    19
    88       |#  else                                                                                          | 11398    19
    89       |#    define LZ4LIB_VISIBILITY                                                                    | 11399    19
    90       |#  endif                                                                                         | 11400    19
    91       |#endif                                                                                           | 11401    19
    92       |#if defined(LZ4_DLL_EXPORT) && (LZ4_DLL_EXPORT==1)                                               | 11402    19
    93       |#  define LZ4LIB_API __declspec(dllexport) LZ4LIB_VISIBILITY                                     | 11403    19
    94       |#elif defined(LZ4_DLL_IMPORT) && (LZ4_DLL_IMPORT==1)                                             | 11404    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   225


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    95       |#  define LZ4LIB_API __declspec(dllimport) LZ4LIB_VISIBILITY /* It isn't required but allows to g| 11405    19
    95       +enerate better code, saving a function pointer load from the IAT and an indirect jump.*/         + 11405    19
    96       |#else                                                                                            | 11406    19
    97       |#  define LZ4LIB_API LZ4LIB_VISIBILITY                                                           | 11407    19
    98       |#endif                                                                                           | 11408    19
    99       |                                                                                                 | 11409    19
   100       |/*------   Version   ------*/                                                                    | 11410    19
   101       |#define LZ4_VERSION_MAJOR    1    /* for breaking interface changes  */                          | 11411    19
   102       |#define LZ4_VERSION_MINOR    9    /* for new (non-breaking) interface capabilities */            | 11412    19
   103       |#define LZ4_VERSION_RELEASE  3    /* for tweaks, bug-fixes, or development */                    | 11413    19
   104       |                                                                                                 | 11414    19
   105       |#define LZ4_VERSION_NUMBER (LZ4_VERSION_MAJOR *100*100 + LZ4_VERSION_MINOR *100 + LZ4_VERSION_REL| 11415    19
   105       +EASE)                                                                                            + 11415    19
   106       |                                                                                                 | 11416    19
   107       |#define LZ4_LIB_VERSION LZ4_VERSION_MAJOR.LZ4_VERSION_MINOR.LZ4_VERSION_RELEASE                  | 11417    19
   108       |#define LZ4_QUOTE(str) #str                                                                      | 11418    19
   109       |#define LZ4_EXPAND_AND_QUOTE(str) LZ4_QUOTE(str)                                                 | 11419    19
   110       |#define LZ4_VERSION_STRING LZ4_EXPAND_AND_QUOTE(LZ4_LIB_VERSION)                                 | 11420    19
   111       |                                                                                                 | 11421    19
   112       |LZ4LIB_API int LZ4_versionNumber (void);  /**< library version number; useful to check dll versio| 11422    19
   112       +n */                                                                                             + 11422    19
   113       |LZ4LIB_API const char* LZ4_versionString (void);   /**< library version string; useful to check d| 11423    19
   113       +ll version */                                                                                    + 11423    19
   114       |                                                                                                 | 11424    19
   115       |                                                                                                 | 11425    19
   116       |/*-************************************                                                          | 11426    19
   117       |*  Tuning parameter                                                                              | 11427    19
   118       |**************************************/                                                          | 11428    19
   119       |/*!                                                                                              | 11429    19
   120       | * LZ4_MEMORY_USAGE :                                                                            | 11430    19
   121       | * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; | 11431    19
   121       +etc.)                                                                                            + 11431    19
   122       | * Increasing memory usage improves compression ratio.                                           | 11432    19
   123       | * Reduced memory usage may improve speed, thanks to better cache locality.                      | 11433    19
   124       | * Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache                      | 11434    19
   125       | */                                                                                              | 11435    19
   126       |#ifndef LZ4_MEMORY_USAGE                                                                         | 11436    19
   127       |# define LZ4_MEMORY_USAGE 14                                                                     | 11437    19
   128       |#endif                                                                                           | 11438    19
   129       |                                                                                                 | 11439    19
   130       |                                                                                                 | 11440    19
   131       |/*-************************************                                                          | 11441    19
   132       |*  Simple Functions                                                                              | 11442    19
   133       |**************************************/                                                          | 11443    19
   134       |/*! LZ4_compress_default() :                                                                     | 11444    19
   135       | *  Compresses 'srcSize' bytes from buffer 'src'                                                 | 11445    19
   136       | *  into already allocated 'dst' buffer of size 'dstCapacity'.                                   | 11446    19
   137       | *  Compression is guaranteed to succeed if 'dstCapacity' >= LZ4_compressBound(srcSize).         | 11447    19
   138       | *  It also runs faster, so it's a recommended setting.                                          | 11448    19
   139       | *  If the function cannot compress 'src' into a more limited 'dst' budget,                      | 11449    19
   140       | *  compression stops *immediately*, and the function result is zero.                            | 11450    19
   141       | *  In which case, 'dst' content is undefined (invalid).                                         | 11451    19
   142       | *      srcSize : max supported value is LZ4_MAX_INPUT_SIZE.                                     | 11452    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   226


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   143       | *      dstCapacity : size of buffer 'dst' (which must be already allocated)                     | 11453    19
   144       | *     @return  : the number of bytes written into buffer 'dst' (necessarily <= dstCapacity)     | 11454    19
   145       | *                or 0 if compression fails                                                      | 11455    19
   146       | * Note : This function is protected against buffer overflow scenarios (never writes outside 'dst| 11456    19
   146       +' buffer, nor read outside 'source' buffer).                                                     + 11456    19
   147       | */                                                                                              | 11457    19
   148       |LZ4LIB_API int LZ4_compress_default(const char* src, char* dst, int srcSize, int dstCapacity);   | 11458    19
   149       |                                                                                                 | 11459    19
   150       |/*! LZ4_decompress_safe() :                                                                      | 11460    19
   151       | *  compressedSize : is the exact complete size of the compressed block.                         | 11461    19
   152       | *  dstCapacity : is the size of destination buffer (which must be already allocated), presumed a| 11462    19
   152       +n upper bound of decompressed size.                                                              + 11462    19
   153       | * @return : the number of bytes decompressed into destination buffer (necessarily <= dstCapacity| 11463    19
   153       +)                                                                                                + 11463    19
   154       | *           If destination buffer is not large enough, decoding will stop and output an error co| 11464    19
   154       +de (negative value).                                                                             + 11464    19
   155       | *           If the source stream is detected malformed, the function will stop decoding and retu| 11465    19
   155       +rn a negative result.                                                                            + 11465    19
   156       | * Note 1 : This function is protected against malicious data packets :                          | 11466    19
   157       | *          it will never writes outside 'dst' buffer, nor read outside 'source' buffer,         | 11467    19
   158       | *          even if the compressed block is maliciously modified to order the decoder to do these| 11468    19
   158       + actions.                                                                                        + 11468    19
   159       | *          In such case, the decoder stops immediately, and considers the compressed block malfo| 11469    19
   159       +rmed.                                                                                            + 11469    19
   160       | * Note 2 : compressedSize and dstCapacity must be provided to the function, the compressed block| 11470    19
   160       + does not contain them.                                                                          + 11470    19
   161       | *          The implementation is free to send / store / derive this information in whichever way| 11471    19
   161       + is most beneficial.                                                                             + 11471    19
   162       | *          If there is a need for a different format which bundles together both compressed data| 11472    19
   162       + and its metadata, consider looking at lz4frame.h instead.                                       + 11472    19
   163       | */                                                                                              | 11473    19
   164       |LZ4LIB_API int LZ4_decompress_safe (const char* src, char* dst, int compressedSize, int dstCapaci| 11474    19
   164       +ty);                                                                                             + 11474    19
   165       |                                                                                                 | 11475    19
   166       |                                                                                                 | 11476    19
   167       |/*-************************************                                                          | 11477    19
   168       |*  Advanced Functions                                                                            | 11478    19
   169       |**************************************/                                                          | 11479    19
   170       |#define LZ4_MAX_INPUT_SIZE        0x7E000000   /* 2 113 929 216 bytes */                         | 11480    19
   171       |#define LZ4_COMPRESSBOUND(isize)  ((unsigned)(isize) > (unsigned)LZ4_MAX_INPUT_SIZE ? 0 : (isize)| 11481    19
   171       + + ((isize)/255) + 16)                                                                           + 11481    19
   172       |                                                                                                 | 11482    19
   173       |/*! LZ4_compressBound() :                                                                        | 11483    19
   174       |    Provides the maximum size that LZ4 compression may output in a "worst case" scenario (input d| 11484    19
   174       +ata not compressible)                                                                            + 11484    19
   175       |    This function is primarily useful for memory allocation purposes (destination buffer size).  | 11485    19
   176       |    Macro LZ4_COMPRESSBOUND() is also provided for compilation-time evaluation (stack memory allo| 11486    19
   176       +cation for example).                                                                             + 11486    19
   177       |    Note that LZ4_compress_default() compresses faster when dstCapacity is >= LZ4_compressBound(s| 11487    19
   177       +rcSize)                                                                                          + 11487    19
   178       |        inputSize  : max supported value is LZ4_MAX_INPUT_SIZE                                   | 11488    19
   179       |        return : maximum output size in a "worst case" scenario                                  | 11489    19
   180       |              or 0, if input size is incorrect (too large or negative)                           | 11490    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   227


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   181       |*/                                                                                               | 11491    19
   182       |LZ4LIB_API int LZ4_compressBound(int inputSize);                                                 | 11492    19
   183       |                                                                                                 | 11493    19
   184       |/*! LZ4_compress_fast() :                                                                        | 11494    19
   185       |    Same as LZ4_compress_default(), but allows selection of "acceleration" factor.               | 11495    19
   186       |    The larger the acceleration value, the faster the algorithm, but also the lesser the compress| 11496    19
   186       +ion.                                                                                             + 11496    19
   187       |    It's a trade-off. It can be fine tuned, with each successive value providing roughly +~3% to | 11497    19
   187       +speed.                                                                                           + 11497    19
   188       |    An acceleration value of "1" is the same as regular LZ4_compress_default()                   | 11498    19
   189       |    Values <= 0 will be replaced by LZ4_ACCELERATION_DEFAULT (currently == 1, see lz4.c).        | 11499    19
   190       |    Values > LZ4_ACCELERATION_MAX will be replaced by LZ4_ACCELERATION_MAX (currently == 65537, s| 11500    19
   190       +ee lz4.c).                                                                                       + 11500    19
   191       |*/                                                                                               | 11501    19
   192       |LZ4LIB_API int LZ4_compress_fast (const char* src, char* dst, int srcSize, int dstCapacity, int a| 11502    19
   192       +cceleration);                                                                                    + 11502    19
   193       |                                                                                                 | 11503    19
   194       |                                                                                                 | 11504    19
   195       |/*! LZ4_compress_fast_extState() :                                                               | 11505    19
   196       | *  Same as LZ4_compress_fast(), using an externally allocated memory space for its state.       | 11506    19
   197       | *  Use LZ4_sizeofState() to know how much memory must be allocated,                             | 11507    19
   198       | *  and allocate it on 8-bytes boundaries (using `malloc()` typically).                          | 11508    19
   199       | *  Then, provide this buffer as `void* state` to compression function.                          | 11509    19
   200       | */                                                                                              | 11510    19
   201       |LZ4LIB_API int LZ4_sizeofState(void);                                                            | 11511    19
   202       |LZ4LIB_API int LZ4_compress_fast_extState (void* state, const char* src, char* dst, int srcSize, | 11512    19
   202       +int dstCapacity, int acceleration);                                                              + 11512    19
   203       |                                                                                                 | 11513    19
   204       |                                                                                                 | 11514    19
   205       |/*! LZ4_compress_destSize() :                                                                    | 11515    19
   206       | *  Reverse the logic : compresses as much data as possible from 'src' buffer                    | 11516    19
   207       | *  into already allocated buffer 'dst', of size >= 'targetDestSize'.                            | 11517    19
   208       | *  This function either compresses the entire 'src' content into 'dst' if it's large enough,    | 11518    19
   209       | *  or fill 'dst' buffer completely with as much data as possible from 'src'.                    | 11519    19
   210       | *  note: acceleration parameter is fixed to "default".                                          | 11520    19
   211       | *                                                                                               | 11521    19
   212       | * *srcSizePtr : will be modified to indicate how many bytes where read from 'src' to fill 'dst'.| 11522    19
   213       | *               New value is necessarily <= input value.                                        | 11523    19
   214       | * @return : Nb bytes written into 'dst' (necessarily <= targetDestSize)                         | 11524    19
   215       | *           or 0 if compression fails.                                                          | 11525    19
   216       | *                                                                                               | 11526    19
   217       | * Note : from v1.8.2 to v1.9.1, this function had a bug (fixed un v1.9.2+):                     | 11527    19
   218       | *        the produced compressed content could, in specific circumstances,                      | 11528    19
   219       | *        require to be decompressed into a destination buffer larger                            | 11529    19
   220       | *        by at least 1 byte than the content to decompress.                                     | 11530    19
   221       | *        If an application uses `LZ4_compress_destSize()`,                                      | 11531    19
   222       | *        it's highly recommended to update liblz4 to v1.9.2 or better.                          | 11532    19
   223       | *        If this can't be done or ensured,                                                      | 11533    19
   224       | *        the receiving decompression function should provide                                    | 11534    19
   225       | *        a dstCapacity which is > decompressedSize, by at least 1 byte.                         | 11535    19
   226       | *        See https://github.com/lz4/lz4/issues/859 for details                                  | 11536    19
   227       | */                                                                                              | 11537    19
   228       |LZ4LIB_API int LZ4_compress_destSize (const char* src, char* dst, int* srcSizePtr, int targetDstS| 11538    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   228


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   228       +ize);                                                                                            + 11538    19
   229       |                                                                                                 | 11539    19
   230       |                                                                                                 | 11540    19
   231       |/*! LZ4_decompress_safe_partial() :                                                              | 11541    19
   232       | *  Decompress an LZ4 compressed block, of size 'srcSize' at position 'src',                     | 11542    19
   233       | *  into destination buffer 'dst' of size 'dstCapacity'.                                         | 11543    19
   234       | *  Up to 'targetOutputSize' bytes will be decoded.                                              | 11544    19
   235       | *  The function stops decoding on reaching this objective.                                      | 11545    19
   236       | *  This can be useful to boost performance                                                      | 11546    19
   237       | *  whenever only the beginning of a block is required.                                          | 11547    19
   238       | *                                                                                               | 11548    19
   239       | * @return : the number of bytes decoded in `dst` (necessarily <= targetOutputSize)              | 11549    19
   240       | *           If source stream is detected malformed, function returns a negative result.         | 11550    19
   241       | *                                                                                               | 11551    19
   242       | *  Note 1 : @return can be < targetOutputSize, if compressed block contains less data.          | 11552    19
   243       | *                                                                                               | 11553    19
   244       | *  Note 2 : targetOutputSize must be <= dstCapacity                                             | 11554    19
   245       | *                                                                                               | 11555    19
   246       | *  Note 3 : this function effectively stops decoding on reaching targetOutputSize,              | 11556    19
   247       | *           so dstCapacity is kind of redundant.                                                | 11557    19
   248       | *           This is because in older versions of this function,                                 | 11558    19
   249       | *           decoding operation would still write complete sequences.                            | 11559    19
   250       | *           Therefore, there was no guarantee that it would stop writing at exactly targetOutput| 11560    19
   250       +Size,                                                                                            + 11560    19
   251       | *           it could write more bytes, though only up to dstCapacity.                           | 11561    19
   252       | *           Some "margin" used to be required for this operation to work properly.              | 11562    19
   253       | *           Thankfully, this is no longer necessary.                                            | 11563    19
   254       | *           The function nonetheless keeps the same signature, in an effort to preserve API comp| 11564    19
   254       +atibility.                                                                                       + 11564    19
   255       | *                                                                                               | 11565    19
   256       | *  Note 4 : If srcSize is the exact size of the block,                                          | 11566    19
   257       | *           then targetOutputSize can be any value,                                             | 11567    19
   258       | *           including larger than the block's decompressed size.                                | 11568    19
   259       | *           The function will, at most, generate block's decompressed size.                     | 11569    19
   260       | *                                                                                               | 11570    19
   261       | *  Note 5 : If srcSize is _larger_ than block's compressed size,                                | 11571    19
   262       | *           then targetOutputSize **MUST** be <= block's decompressed size.                     | 11572    19
   263       | *           Otherwise, *silent corruption will occur*.                                          | 11573    19
   264       | */                                                                                              | 11574    19
   265       |LZ4LIB_API int LZ4_decompress_safe_partial (const char* src, char* dst, int srcSize, int targetOu| 11575    19
   265       +tputSize, int dstCapacity);                                                                      + 11575    19
   266       |                                                                                                 | 11576    19
   267       |                                                                                                 | 11577    19
   268       |/*-*********************************************                                                 | 11578    19
   269       |*  Streaming Compression Functions                                                               | 11579    19
   270       |***********************************************/                                                 | 11580    19
   271       |typedef union LZ4_stream_u LZ4_stream_t;  /* incomplete type (defined later) */                  | 11581    19
   272       |                                                                                                 | 11582    19
   273       |LZ4LIB_API LZ4_stream_t* LZ4_createStream(void);                                                 | 11583    19
   274       |LZ4LIB_API int           LZ4_freeStream (LZ4_stream_t* streamPtr);                               | 11584    19
   275       |                                                                                                 | 11585    19
   276       |/*! LZ4_resetStream_fast() : v1.9.0+                                                             | 11586    19
   277       | *  Use this to prepare an LZ4_stream_t for a new chain of dependent blocks                      | 11587    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   229


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   278       | *  (e.g., LZ4_compress_fast_continue()).                                                        | 11588    19
   279       | *                                                                                               | 11589    19
   280       | *  An LZ4_stream_t must be initialized once before usage.                                       | 11590    19
   281       | *  This is automatically done when created by LZ4_createStream().                               | 11591    19
   282       | *  However, should the LZ4_stream_t be simply declared on stack (for example),                  | 11592    19
   283       | *  it's necessary to initialize it first, using LZ4_initStream().                               | 11593    19
   284       | *                                                                                               | 11594    19
   285       | *  After init, start any new stream with LZ4_resetStream_fast().                                | 11595    19
   286       | *  A same LZ4_stream_t can be re-used multiple times consecutively                              | 11596    19
   287       | *  and compress multiple streams,                                                               | 11597    19
   288       | *  provided that it starts each new stream with LZ4_resetStream_fast().                         | 11598    19
   289       | *                                                                                               | 11599    19
   290       | *  LZ4_resetStream_fast() is much faster than LZ4_initStream(),                                 | 11600    19
   291       | *  but is not compatible with memory regions containing garbage data.                           | 11601    19
   292       | *                                                                                               | 11602    19
   293       | *  Note: it's only useful to call LZ4_resetStream_fast()                                        | 11603    19
   294       | *        in the context of streaming compression.                                               | 11604    19
   295       | *        The *extState* functions perform their own resets.                                     | 11605    19
   296       | *        Invoking LZ4_resetStream_fast() before is redundant, and even counterproductive.       | 11606    19
   297       | */                                                                                              | 11607    19
   298       |LZ4LIB_API void LZ4_resetStream_fast (LZ4_stream_t* streamPtr);                                  | 11608    19
   299       |                                                                                                 | 11609    19
   300       |/*! LZ4_loadDict() :                                                                             | 11610    19
   301       | *  Use this function to reference a static dictionary into LZ4_stream_t.                        | 11611    19
   302       | *  The dictionary must remain available during compression.                                     | 11612    19
   303       | *  LZ4_loadDict() triggers a reset, so any previous data will be forgotten.                     | 11613    19
   304       | *  The same dictionary will have to be loaded on decompression side for successful decoding.    | 11614    19
   305       | *  Dictionary are useful for better compression of small data (KB range).                       | 11615    19
   306       | *  While LZ4 accept any input as dictionary,                                                    | 11616    19
   307       | *  results are generally better when using Zstandard's Dictionary Builder.                      | 11617    19
   308       | *  Loading a size of 0 is allowed, and is the same as reset.                                    | 11618    19
   309       | * @return : loaded dictionary size, in bytes (necessarily <= 64 KB)                             | 11619    19
   310       | */                                                                                              | 11620    19
   311       |LZ4LIB_API int LZ4_loadDict (LZ4_stream_t* streamPtr, const char* dictionary, int dictSize);     | 11621    19
   312       |                                                                                                 | 11622    19
   313       |/*! LZ4_compress_fast_continue() :                                                               | 11623    19
   314       | *  Compress 'src' content using data from previously compressed blocks, for better compression r| 11624    19
   314       +atio.                                                                                            + 11624    19
   315       | * 'dst' buffer must be already allocated.                                                       | 11625    19
   316       | *  If dstCapacity >= LZ4_compressBound(srcSize), compression is guaranteed to succeed, and runs | 11626    19
   316       +faster.                                                                                          + 11626    19
   317       | *                                                                                               | 11627    19
   318       | * @return : size of compressed block                                                            | 11628    19
   319       | *           or 0 if there is an error (typically, cannot fit into 'dst').                       | 11629    19
   320       | *                                                                                               | 11630    19
   321       | *  Note 1 : Each invocation to LZ4_compress_fast_continue() generates a new block.              | 11631    19
   322       | *           Each block has precise boundaries.                                                  | 11632    19
   323       | *           Each block must be decompressed separately, calling LZ4_decompress_*() with relevant| 11633    19
   323       + metadata.                                                                                       + 11633    19
   324       | *           It's not possible to append blocks together and expect a single invocation of LZ4_de| 11634    19
   324       +compress_*() to decompress them together.                                                        + 11634    19
   325       | *                                                                                               | 11635    19
   326       | *  Note 2 : The previous 64KB of source data is __assumed__ to remain present, unmodified, at sa| 11636    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   230


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   326       +me address in memory !                                                                           + 11636    19
   327       | *                                                                                               | 11637    19
   328       | *  Note 3 : When input is structured as a double-buffer, each buffer can have any size, includin| 11638    19
   328       +g < 64 KB.                                                                                       + 11638    19
   329       | *           Make sure that buffers are separated, by at least one byte.                         | 11639    19
   330       | *           This construction ensures that each block only depends on previous block.           | 11640    19
   331       | *                                                                                               | 11641    19
   332       | *  Note 4 : If input buffer is a ring-buffer, it can have any size, including < 64 KB.          | 11642    19
   333       | *                                                                                               | 11643    19
   334       | *  Note 5 : After an error, the stream status is undefined (invalid), it can only be reset or fr| 11644    19
   334       +eed.                                                                                             + 11644    19
   335       | */                                                                                              | 11645    19
   336       |LZ4LIB_API int LZ4_compress_fast_continue (LZ4_stream_t* streamPtr, const char* src, char* dst, i| 11646    19
   336       +nt srcSize, int dstCapacity, int acceleration);                                                  + 11646    19
   337       |                                                                                                 | 11647    19
   338       |/*! LZ4_saveDict() :                                                                             | 11648    19
   339       | *  If last 64KB data cannot be guaranteed to remain available at its current memory location,   | 11649    19
   340       | *  save it into a safer place (char* safeBuffer).                                               | 11650    19
   341       | *  This is schematically equivalent to a memcpy() followed by LZ4_loadDict(),                   | 11651    19
   342       | *  but is much faster, because LZ4_saveDict() doesn't need to rebuild tables.                   | 11652    19
   343       | * @return : saved dictionary size in bytes (necessarily <= maxDictSize), or 0 if error.         | 11653    19
   344       | */                                                                                              | 11654    19
   345       |LZ4LIB_API int LZ4_saveDict (LZ4_stream_t* streamPtr, char* safeBuffer, int maxDictSize);        | 11655    19
   346       |                                                                                                 | 11656    19
   347       |                                                                                                 | 11657    19
   348       |/*-**********************************************                                                | 11658    19
   349       |*  Streaming Decompression Functions                                                             | 11659    19
   350       |*  Bufferless synchronous API                                                                    | 11660    19
   351       |************************************************/                                                | 11661    19
   352       |typedef union LZ4_streamDecode_u LZ4_streamDecode_t;   /* tracking context */                    | 11662    19
   353       |                                                                                                 | 11663    19
   354       |/*! LZ4_createStreamDecode() and LZ4_freeStreamDecode() :                                        | 11664    19
   355       | *  creation / destruction of streaming decompression tracking context.                          | 11665    19
   356       | *  A tracking context can be re-used multiple times.                                            | 11666    19
   357       | */                                                                                              | 11667    19
   358       |LZ4LIB_API LZ4_streamDecode_t* LZ4_createStreamDecode(void);                                     | 11668    19
   359       |LZ4LIB_API int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);            | 11669    19
   360       |                                                                                                 | 11670    19
   361       |/*! LZ4_setStreamDecode() :                                                                      | 11671    19
   362       | *  An LZ4_streamDecode_t context can be allocated once and re-used multiple times.              | 11672    19
   363       | *  Use this function to start decompression of a new stream of blocks.                          | 11673    19
   364       | *  A dictionary can optionally be set. Use NULL or size 0 for a reset order.                    | 11674    19
   365       | *  Dictionary is presumed stable : it must remain accessible and unmodified during next decompre| 11675    19
   365       +ssion.                                                                                           + 11675    19
   366       | * @return : 1 if OK, 0 if error                                                                 | 11676    19
   367       | */                                                                                              | 11677    19
   368       |LZ4LIB_API int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary,| 11678    19
   368       + int dictSize);                                                                                  + 11678    19
   369       |                                                                                                 | 11679    19
   370       |/*! LZ4_decoderRingBufferSize() : v1.8.2+                                                        | 11680    19
   371       | *  Note : in a ring buffer scenario (optional),                                                 | 11681    19
   372       | *  blocks are presumed decompressed next to each other                                          | 11682    19
   373       | *  up to the moment there is not enough remaining space for next block (remainingSize < maxBlock| 11683    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   231


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   373       +Size),                                                                                           + 11683    19
   374       | *  at which stage it resumes from beginning of ring buffer.                                     | 11684    19
   375       | *  When setting such a ring buffer for streaming decompression,                                 | 11685    19
   376       | *  provides the minimum size of this ring buffer                                                | 11686    19
   377       | *  to be compatible with any source respecting maxBlockSize condition.                          | 11687    19
   378       | * @return : minimum ring buffer size,                                                           | 11688    19
   379       | *           or 0 if there is an error (invalid maxBlockSize).                                   | 11689    19
   380       | */                                                                                              | 11690    19
   381       |LZ4LIB_API int LZ4_decoderRingBufferSize(int maxBlockSize);                                      | 11691    19
   382       |#define LZ4_DECODER_RING_BUFFER_SIZE(maxBlockSize) (65536 + 14 + (maxBlockSize))  /* for static a| 11692    19
   382       +llocation; maxBlockSize presumed valid */                                                        + 11692    19
   383       |                                                                                                 | 11693    19
   384       |/*! LZ4_decompress_*_continue() :                                                                | 11694    19
   385       | *  These decoding functions allow decompression of consecutive blocks in "streaming" mode.      | 11695    19
   386       | *  A block is an unsplittable entity, it must be presented entirely to a decompression function.| 11696    19
   387       | *  Decompression functions only accepts one block at a time.                                    | 11697    19
   388       | *  The last 64KB of previously decoded data *must* remain available and unmodified at the memory| 11698    19
   388       + position where they were decoded.                                                               + 11698    19
   389       | *  If less than 64KB of data has been decoded, all the data must be present.                    | 11699    19
   390       | *                                                                                               | 11700    19
   391       | *  Special : if decompression side sets a ring buffer, it must respect one of the following cond| 11701    19
   391       +itions :                                                                                         + 11701    19
   392       | *  - Decompression buffer size is _at least_ LZ4_decoderRingBufferSize(maxBlockSize).           | 11702    19
   393       | *    maxBlockSize is the maximum size of any single block. It can have any value > 16 bytes.    | 11703    19
   394       | *    In which case, encoding and decoding buffers do not need to be synchronized.               | 11704    19
   395       | *    Actually, data can be produced by any source compliant with LZ4 format specification, and r| 11705    19
   395       +especting maxBlockSize.                                                                          + 11705    19
   396       | *  - Synchronized mode :                                                                        | 11706    19
   397       | *    Decompression buffer size is _exactly_ the same as compression buffer size,                | 11707    19
   398       | *    and follows exactly same update rule (block boundaries at same positions),                 | 11708    19
   399       | *    and decoding function is provided with exact decompressed size of each block (exception for| 11709    19
   399       + last block of the stream),                                                                      + 11709    19
   400       | *    _then_ decoding & encoding ring buffer can have any size, including small ones ( < 64 KB). | 11710    19
   401       | *  - Decompression buffer is larger than encoding buffer, by a minimum of maxBlockSize more byte| 11711    19
   401       +s.                                                                                               + 11711    19
   402       | *    In which case, encoding and decoding buffers do not need to be synchronized,               | 11712    19
   403       | *    and encoding ring buffer can have any size, including small ones ( < 64 KB).               | 11713    19
   404       | *                                                                                               | 11714    19
   405       | *  Whenever these conditions are not possible,                                                  | 11715    19
   406       | *  save the last 64KB of decoded data into a safe buffer where it can't be modified during decom| 11716    19
   406       +pression,                                                                                        + 11716    19
   407       | *  then indicate where this data is saved using LZ4_setStreamDecode(), before decompressing next| 11717    19
   407       + block.                                                                                          + 11717    19
   408       |*/                                                                                               | 11718    19
   409       |LZ4LIB_API int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* sr| 11719    19
   409       +c, char* dst, int srcSize, int dstCapacity);                                                     + 11719    19
   410       |                                                                                                 | 11720    19
   411       |                                                                                                 | 11721    19
   412       |/*! LZ4_decompress_*_usingDict() :                                                               | 11722    19
   413       | *  These decoding functions work the same as                                                    | 11723    19
   414       | *  a combination of LZ4_setStreamDecode() followed by LZ4_decompress_*_continue()               | 11724    19
   415       | *  They are stand-alone, and don't need an LZ4_streamDecode_t structure.                        | 11725    19
   416       | *  Dictionary is presumed stable : it must remain accessible and unmodified during decompression| 11726    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   232


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   416       +.                                                                                                + 11726    19
   417       | *  Performance tip : Decompression speed can be substantially increased                         | 11727    19
   418       | *                    when dst == dictStart + dictSize.                                          | 11728    19
   419       | */                                                                                              | 11729    19
   420       |LZ4LIB_API int LZ4_decompress_safe_usingDict (const char* src, char* dst, int srcSize, int dstCap| 11730    19
   420       +city, const char* dictStart, int dictSize);                                                      + 11730    19
   421       |                                                                                                 | 11731    19
   422       |#endif /* LZ4_H_2983827168210 */                                                                 | 11732    19
   423       |                                                                                                 | 11733    19
   424       |                                                                                                 | 11734    19
   425       |/*^*************************************                                                         | 11735    19
   426       | * !!!!!!   STATIC LINKING ONLY   !!!!!!                                                         | 11736    19
   427       | ***************************************/                                                        | 11737    19
   428       |                                                                                                 | 11738    19
   429       |/*-****************************************************************************                  | 11739    19
   430       | * Experimental section                                                                          | 11740    19
   431       | *                                                                                               | 11741    19
   432       | * Symbols declared in this section must be considered unstable. Their                           | 11742    19
   433       | * signatures or semantics may change, or they may be removed altogether in the                  | 11743    19
   434       | * future. They are therefore only safe to depend on when the caller is                          | 11744    19
   435       | * statically linked against the library.                                                        | 11745    19
   436       | *                                                                                               | 11746    19
   437       | * To protect against unsafe usage, not only are the declarations guarded,                       | 11747    19
   438       | * the definitions are hidden by default                                                         | 11748    19
   439       | * when building LZ4 as a shared/dynamic library.                                                | 11749    19
   440       | *                                                                                               | 11750    19
   441       | * In order to access these declarations,                                                        | 11751    19
   442       | * define LZ4_STATIC_LINKING_ONLY in your application                                            | 11752    19
   443       | * before including LZ4's headers.                                                               | 11753    19
   444       | *                                                                                               | 11754    19
   445       | * In order to make their implementations accessible dynamically, you must                       | 11755    19
   446       | * define LZ4_PUBLISH_STATIC_FUNCTIONS when building the LZ4 library.                            | 11756    19
   447       | ******************************************************************************/                 | 11757    19
   448       |                                                                                                 | 11758    19
   449       |#ifdef LZ4_STATIC_LINKING_ONLY                                                                   | 11759    19
   450       |                                                                                                 | 11760    19
   451       |#ifndef LZ4_STATIC_3504398509                                                                    | 11761    19
   452       |#define LZ4_STATIC_3504398509                                                                    | 11762    19
   453       |                                                                                                 | 11763    19
   454       |#ifdef LZ4_PUBLISH_STATIC_FUNCTIONS                                                              | 11764    19
   455       |#define LZ4LIB_STATIC_API LZ4LIB_API                                                             | 11765    19
   456       |#else                                                                                            | 11766    19
   457       |#define LZ4LIB_STATIC_API                                                                        | 11767    19
   458       |#endif                                                                                           | 11768    19
   459       |                                                                                                 | 11769    19
   460       |                                                                                                 | 11770    19
   461       |/*! LZ4_compress_fast_extState_fastReset() :                                                     | 11771    19
   462       | *  A variant of LZ4_compress_fast_extState().                                                   | 11772    19
   463       | *                                                                                               | 11773    19
   464       | *  Using this variant avoids an expensive initialization step.                                  | 11774    19
   465       | *  It is only safe to call if the state buffer is known to be correctly initialized already     | 11775    19
   466       | *  (see above comment on LZ4_resetStream_fast() for a definition of "correctly initialized").   | 11776    19
   467       | *  From a high level, the difference is that                                                    | 11777    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   233


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   468       | *  this function initializes the provided state with a call to something like LZ4_resetStream_fa| 11778    19
   468       +st()                                                                                             + 11778    19
   469       | *  while LZ4_compress_fast_extState() starts with a call to LZ4_resetStream().                  | 11779    19
   470       | */                                                                                              | 11780    19
   471       |LZ4LIB_STATIC_API int LZ4_compress_fast_extState_fastReset (void* state, const char* src, char* d| 11781    19
   471       +st, int srcSize, int dstCapacity, int acceleration);                                             + 11781    19
   472       |                                                                                                 | 11782    19
   473       |/*! LZ4_attach_dictionary() :                                                                    | 11783    19
   474       | *  This is an experimental API that allows                                                      | 11784    19
   475       | *  efficient use of a static dictionary many times.                                             | 11785    19
   476       | *                                                                                               | 11786    19
   477       | *  Rather than re-loading the dictionary buffer into a working context before                   | 11787    19
   478       | *  each compression, or copying a pre-loaded dictionary's LZ4_stream_t into a                   | 11788    19
   479       | *  working LZ4_stream_t, this function introduces a no-copy setup mechanism,                    | 11789    19
   480       | *  in which the working stream references the dictionary stream in-place.                       | 11790    19
   481       | *                                                                                               | 11791    19
   482       | *  Several assumptions are made about the state of the dictionary stream.                       | 11792    19
   483       | *  Currently, only streams which have been prepared by LZ4_loadDict() should                    | 11793    19
   484       | *  be expected to work.                                                                         | 11794    19
   485       | *                                                                                               | 11795    19
   486       | *  Alternatively, the provided dictionaryStream may be NULL,                                    | 11796    19
   487       | *  in which case any existing dictionary stream is unset.                                       | 11797    19
   488       | *                                                                                               | 11798    19
   489       | *  If a dictionary is provided, it replaces any pre-existing stream history.                    | 11799    19
   490       | *  The dictionary contents are the only history that can be referenced and                      | 11800    19
   491       | *  logically immediately precede the data compressed in the first subsequent                    | 11801    19
   492       | *  compression call.                                                                            | 11802    19
   493       | *                                                                                               | 11803    19
   494       | *  The dictionary will only remain attached to the working stream through the                   | 11804    19
   495       | *  first compression call, at the end of which it is cleared. The dictionary                    | 11805    19
   496       | *  stream (and source buffer) must remain in-place / accessible / unchanged                     | 11806    19
   497       | *  through the completion of the first compression call on the stream.                          | 11807    19
   498       | */                                                                                              | 11808    19
   499       |LZ4LIB_STATIC_API void LZ4_attach_dictionary(LZ4_stream_t* workingStream, const LZ4_stream_t* dic| 11809    19
   499       +tionaryStream);                                                                                  + 11809    19
   500       |                                                                                                 | 11810    19
   501       |                                                                                                 | 11811    19
   502       |/*! In-place compression and decompression                                                       | 11812    19
   503       | *                                                                                               | 11813    19
   504       | * It's possible to have input and output sharing the same buffer,                               | 11814    19
   505       | * for highly contrained memory environments.                                                    | 11815    19
   506       | * In both cases, it requires input to lay at the end of the buffer,                             | 11816    19
   507       | * and decompression to start at beginning of the buffer.                                        | 11817    19
   508       | * Buffer size must feature some margin, hence be larger than final size.                        | 11818    19
   509       | *                                                                                               | 11819    19
   510       | * |<------------------------buffer--------------------------------->|                           | 11820    19
   511       | *                             |<-----------compressed data--------->|                           | 11821    19
   512       | * |<-----------decompressed size------------------>|                                            | 11822    19
   513       | *                                                  |<----margin---->|                           | 11823    19
   514       | *                                                                                               | 11824    19
   515       | * This technique is more useful for decompression,                                              | 11825    19
   516       | * since decompressed size is typically larger,                                                  | 11826    19
   517       | * and margin is short.                                                                          | 11827    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   234


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   518       | *                                                                                               | 11828    19
   519       | * In-place decompression will work inside any buffer                                            | 11829    19
   520       | * which size is >= LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize).                        | 11830    19
   521       | * This presumes that decompressedSize > compressedSize.                                         | 11831    19
   522       | * Otherwise, it means compression actually expanded data,                                       | 11832    19
   523       | * and it would be more efficient to store such data with a flag indicating it's not compressed. | 11833    19
   524       | * This can happen when data is not compressible (already compressed, or encrypted).             | 11834    19
   525       | *                                                                                               | 11835    19
   526       | * For in-place compression, margin is larger, as it must be able to cope with both              | 11836    19
   527       | * history preservation, requiring input data to remain unmodified up to LZ4_DISTANCE_MAX,       | 11837    19
   528       | * and data expansion, which can happen when input is not compressible.                          | 11838    19
   529       | * As a consequence, buffer size requirements are much higher,                                   | 11839    19
   530       | * and memory savings offered by in-place compression are more limited.                          | 11840    19
   531       | *                                                                                               | 11841    19
   532       | * There are ways to limit this cost for compression :                                           | 11842    19
   533       | * - Reduce history size, by modifying LZ4_DISTANCE_MAX.                                         | 11843    19
   534       | *   Note that it is a compile-time constant, so all compressions will apply this limit.         | 11844    19
   535       | *   Lower values will reduce compression ratio, except when input_size < LZ4_DISTANCE_MAX,      | 11845    19
   536       | *   so it's a reasonable trick when inputs are known to be small.                               | 11846    19
   537       | * - Require the compressor to deliver a "maximum compressed size".                              | 11847    19
   538       | *   This is the `dstCapacity` parameter in `LZ4_compress*()`.                                   | 11848    19
   539       | *   When this size is < LZ4_COMPRESSBOUND(inputSize), then compression can fail,                | 11849    19
   540       | *   in which case, the return code will be 0 (zero).                                            | 11850    19
   541       | *   The caller must be ready for these cases to happen,                                         | 11851    19
   542       | *   and typically design a backup scheme to send data uncompressed.                             | 11852    19
   543       | * The combination of both techniques can significantly reduce                                   | 11853    19
   544       | * the amount of margin required for in-place compression.                                       | 11854    19
   545       | *                                                                                               | 11855    19
   546       | * In-place compression can work in any buffer                                                   | 11856    19
   547       | * which size is >= (maxCompressedSize)                                                          | 11857    19
   548       | * with maxCompressedSize == LZ4_COMPRESSBOUND(srcSize) for guaranteed compression success.      | 11858    19
   549       | * LZ4_COMPRESS_INPLACE_BUFFER_SIZE() depends on both maxCompressedSize and LZ4_DISTANCE_MAX,    | 11859    19
   550       | * so it's possible to reduce memory requirements by playing with them.                          | 11860    19
   551       | */                                                                                              | 11861    19
   552       |                                                                                                 | 11862    19
   553       |#define LZ4_DECOMPRESS_INPLACE_MARGIN(compressedSize)          (((compressedSize) >> 8) + 32)    | 11863    19
   554       |#define LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize)   ((decompressedSize) + LZ4_DECOMPRE| 11864    19
   554       +SS_INPLACE_MARGIN(decompressedSize))  /**< note: presumes that compressedSize < decompressedSize.+ 11864    19
   554       + note2: margin is overestimated a bit, since it could use compressedSize instead */              + 11864    19
   555       |                                                                                                 | 11865    19
   556       |#ifndef LZ4_DISTANCE_MAX   /* history window size; can be user-defined at compile time */        | 11866    19
   557       |#  define LZ4_DISTANCE_MAX 65535   /* set to maximum value by default */                         | 11867    19
   558       |#endif                                                                                           | 11868    19
   559       |                                                                                                 | 11869    19
   560       |#define LZ4_COMPRESS_INPLACE_MARGIN                           (LZ4_DISTANCE_MAX + 32)   /* LZ4_DI| 11870    19
   560       +STANCE_MAX can be safely replaced by srcSize when it's smaller */                                + 11870    19
   561       |#define LZ4_COMPRESS_INPLACE_BUFFER_SIZE(maxCompressedSize)   ((maxCompressedSize) + LZ4_COMPRESS| 11871    19
   561       +_INPLACE_MARGIN)  /**< maxCompressedSize is generally LZ4_COMPRESSBOUND(inputSize), but can be se+ 11871    19
   561       +t to any lower value, with the risk that compression can fail (return code 0(zero)) */           + 11871    19
   562       |                                                                                                 | 11872    19
   563       |#endif   /* LZ4_STATIC_3504398509 */                                                             | 11873    19
   564       |#endif   /* LZ4_STATIC_LINKING_ONLY */                                                           | 11874    19
   565       |                                                                                                 | 11875    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   235


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   566       |                                                                                                 | 11876    19
   567       |                                                                                                 | 11877    19
   568       |#ifndef LZ4_H_98237428734687                                                                     | 11878    19
   569       |#define LZ4_H_98237428734687                                                                     | 11879    19
   570       |                                                                                                 | 11880    19
   571       |/*-************************************************************                                  | 11881    19
   572       | *  Private Definitions                                                                          | 11882    19
   573       | **************************************************************                                  | 11883    19
   574       | * Do not use these definitions directly.                                                        | 11884    19
   575       | * They are only exposed to allow static allocation of `LZ4_stream_t` and `LZ4_streamDecode_t`.  | 11885    19
   576       | * Accessing members will expose user code to API and/or ABI break in future versions of the libr| 11886    19
   576       +ary.                                                                                             + 11886    19
   577       | **************************************************************/                                 | 11887    19
   578       |#define LZ4_HASHLOG   (LZ4_MEMORY_USAGE-2)                                                       | 11888    19
   579       |#define LZ4_HASHTABLESIZE (1 << LZ4_MEMORY_USAGE)                                                | 11889    19
   580       |#define LZ4_HASH_SIZE_U32 (1 << LZ4_HASHLOG)       /* required as macro for static allocation */ | 11890    19
   581       |                                                                                                 | 11891    19
   582       |#if defined(__cplusplus) || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 *| 11892    19
   582       +/)                                                                                               + 11892    19
   583       |# include <stdint.h>                                                                             | 11893    19
   584       |  typedef  int8_t  LZ4_i8;                                                                       | 11894    19
   585       |  typedef uint8_t  LZ4_byte;                                                                     | 11895    19
   586       |  typedef uint16_t LZ4_u16;                                                                      | 11896    19
   587       |  typedef uint32_t LZ4_u32;                                                                      | 11897    19
   588       |#else                                                                                            | 11898    19
   589       |  typedef   signed char  LZ4_i8;                                                                 | 11899    19
   590       |  typedef unsigned char  LZ4_byte;                                                               | 11900    19
   591       |  typedef unsigned short LZ4_u16;                                                                | 11901    19
   592       |  typedef unsigned int   LZ4_u32;                                                                | 11902    19
   593       |#endif                                                                                           | 11903    19
   594       |                                                                                                 | 11904    19
   595       |typedef struct LZ4_stream_t_internal LZ4_stream_t_internal;                                      | 11905    19
   596       |struct LZ4_stream_t_internal {                                                                   | 11906    19
   597       |    LZ4_u32 hashTable[LZ4_HASH_SIZE_U32];                                                        | 11907    19
   598       |    LZ4_u32 currentOffset;                                                                       | 11908    19
   599       |    LZ4_u32 tableType;                                                                           | 11909    19
   600       |    const LZ4_byte* dictionary;                                                                  | 11910    19
   601       |    const LZ4_stream_t_internal* dictCtx;                                                        | 11911    19
   602       |    LZ4_u32 dictSize;                                                                            | 11912    19
   603       |};                                                                                               | 11913    19
   604       |                                                                                                 | 11914    19
   605       |typedef struct {                                                                                 | 11915    19
   606       |    const LZ4_byte* externalDict;                                                                | 11916    19
   607       |    size_t extDictSize;                                                                          | 11917    19
   608       |    const LZ4_byte* prefixEnd;                                                                   | 11918    19
   609       |    size_t prefixSize;                                                                           | 11919    19
   610       |} LZ4_streamDecode_t_internal;                                                                   | 11920    19
   611       |                                                                                                 | 11921    19
   612       |                                                                                                 | 11922    19
   613       |/*! LZ4_stream_t :                                                                               | 11923    19
   614       | *  Do not use below internal definitions directly !                                             | 11924    19
   615       | *  Declare or allocate an LZ4_stream_t instead.                                                 | 11925    19
   616       | *  LZ4_stream_t can also be created using LZ4_createStream(), which is recommended.             | 11926    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   236


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   617       | *  The structure definition can be convenient for static allocation                             | 11927    19
   618       | *  (on stack, or as part of larger structure).                                                  | 11928    19
   619       | *  Init this structure with LZ4_initStream() before first use.                                  | 11929    19
   620       | *  note : only use this definition in association with static linking !                         | 11930    19
   621       | *  this definition is not API/ABI safe, and may change in future versions.                      | 11931    19
   622       | */                                                                                              | 11932    19
   623       |#define LZ4_STREAMSIZE       16416  /* static size, for inter-version compatibility */           | 11933    19
   624       |#define LZ4_STREAMSIZE_VOIDP (LZ4_STREAMSIZE / sizeof(void*))                                    | 11934    19
   625       |union LZ4_stream_u {                                                                             | 11935    19
   626       |    void* table[LZ4_STREAMSIZE_VOIDP];                                                           | 11936    19
   627       |    LZ4_stream_t_internal internal_donotuse;                                                     | 11937    19
   628       |}; /* previously typedef'd to LZ4_stream_t */                                                    | 11938    19
   629       |                                                                                                 | 11939    19
   630       |                                                                                                 | 11940    19
   631       |/*! LZ4_initStream() : v1.9.0+                                                                   | 11941    19
   632       | *  An LZ4_stream_t structure must be initialized at least once.                                 | 11942    19
   633       | *  This is automatically done when invoking LZ4_createStream(),                                 | 11943    19
   634       | *  but it's not when the structure is simply declared on stack (for example).                   | 11944    19
   635       | *                                                                                               | 11945    19
   636       | *  Use LZ4_initStream() to properly initialize a newly declared LZ4_stream_t.                   | 11946    19
   637       | *  It can also initialize any arbitrary buffer of sufficient size,                              | 11947    19
   638       | *  and will @return a pointer of proper type upon initialization.                               | 11948    19
   639       | *                                                                                               | 11949    19
   640       | *  Note : initialization fails if size and alignment conditions are not respected.              | 11950    19
   641       | *         In which case, the function will @return NULL.                                        | 11951    19
   642       | *  Note2: An LZ4_stream_t structure guarantees correct alignment and size.                      | 11952    19
   643       | *  Note3: Before v1.9.0, use LZ4_resetStream() instead                                          | 11953    19
   644       | */                                                                                              | 11954    19
   645       |LZ4LIB_API LZ4_stream_t* LZ4_initStream (void* buffer, size_t size);                             | 11955    19
   646       |                                                                                                 | 11956    19
   647       |                                                                                                 | 11957    19
   648       |/*! LZ4_streamDecode_t :                                                                         | 11958    19
   649       | *  information structure to track an LZ4 stream during decompression.                           | 11959    19
   650       | *  init this structure  using LZ4_setStreamDecode() before first use.                           | 11960    19
   651       | *  note : only use in association with static linking !                                         | 11961    19
   652       | *         this definition is not API/ABI safe,                                                  | 11962    19
   653       | *         and may change in a future version !                                                  | 11963    19
   654       | */                                                                                              | 11964    19
   655       |#define LZ4_STREAMDECODESIZE_U64 (4 + ((sizeof(void*)==16) ? 2 : 0) /*AS-400*/ )                 | 11965    19
   656       |#define LZ4_STREAMDECODESIZE     (LZ4_STREAMDECODESIZE_U64 * sizeof(unsigned long long))         | 11966    19
   657       |union LZ4_streamDecode_u {                                                                       | 11967    19
   658       |    unsigned long long table[LZ4_STREAMDECODESIZE_U64];                                          | 11968    19
   659       |    LZ4_streamDecode_t_internal internal_donotuse;                                               | 11969    19
   660       |} ;   /* previously typedef'd to LZ4_streamDecode_t */                                           | 11970    19
   661       |                                                                                                 | 11971    19
   662       |                                                                                                 | 11972    19
   663       |                                                                                                 | 11973    19
   664       |/*-************************************                                                          | 11974    19
   665       |*  Obsolete Functions                                                                            | 11975    19
   666       |**************************************/                                                          | 11976    19
   667       |                                                                                                 | 11977    19
   668       |/*! Deprecation warnings                                                                         | 11978    19
   669       | *                                                                                               | 11979    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   237


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   670       | *  Deprecated functions make the compiler generate a warning when invoked.                      | 11980    19
   671       | *  This is meant to invite users to update their source code.                                   | 11981    19
   672       | *  Should deprecation warnings be a problem, it is generally possible to disable them,          | 11982    19
   673       | *  typically with -Wno-deprecated-declarations for gcc                                          | 11983    19
   674       | *  or _CRT_SECURE_NO_WARNINGS in Visual.                                                        | 11984    19
   675       | *                                                                                               | 11985    19
   676       | *  Another method is to define LZ4_DISABLE_DEPRECATE_WARNINGS                                   | 11986    19
   677       | *  before including the header file.                                                            | 11987    19
   678       | */                                                                                              | 11988    19
   679       |#ifdef LZ4_DISABLE_DEPRECATE_WARNINGS                                                            | 11989    19
   680       |#  define LZ4_DEPRECATED(message)   /* disable deprecation warnings */                           | 11990    19
   681       |#else                                                                                            | 11991    19
   682       |#  if defined (__cplusplus) && (__cplusplus >= 201402) /* C++14 or greater */                    | 11992    19
   683       |#    define LZ4_DEPRECATED(message) [[deprecated(message)]]                                      | 11993    19
   684       |#  elif defined(_MSC_VER)                                                                        | 11994    19
   685       |#    define LZ4_DEPRECATED(message) __declspec(deprecated(message))                              | 11995    19
   686       |#  elif defined(__clang__) || (defined(__GNUC__) && (__GNUC__ * 10 + __GNUC_MINOR__ >= 45))      | 11996    19
   687       |#    define LZ4_DEPRECATED(message) __attribute__((deprecated(message)))                         | 11997    19
   688       |#  elif defined(__GNUC__) && (__GNUC__ * 10 + __GNUC_MINOR__ >= 31)                              | 11998    19
   689       |#    define LZ4_DEPRECATED(message) __attribute__((deprecated))                                  | 11999    19
   690       |#  else                                                                                          | 12000    19
   691       |#    pragma message("WARNING: LZ4_DEPRECATED needs custom implementation for this compiler")     | 12001    19
   692       |#    define LZ4_DEPRECATED(message)   /* disabled */                                             | 12002    19
   693       |#  endif                                                                                         | 12003    19
   694       |#endif /* LZ4_DISABLE_DEPRECATE_WARNINGS */                                                      | 12004    19
   695       |                                                                                                 | 12005    19
   696       |/*! Obsolete compression functions (since v1.7.3) */                                             | 12006    19
   697       |LZ4_DEPRECATED("use LZ4_compress_default() instead")       LZ4LIB_API int LZ4_compress           | 12007    19
   697       +    (const char* src, char* dest, int srcSize);                                                  + 12007    19
   698       |LZ4_DEPRECATED("use LZ4_compress_default() instead")       LZ4LIB_API int LZ4_compress_limitedOut| 12008    19
   698       +put (const char* src, char* dest, int srcSize, int maxOutputSize);                               + 12008    19
   699       |LZ4_DEPRECATED("use LZ4_compress_fast_extState() instead") LZ4LIB_API int LZ4_compress_withState | 12009    19
   699       +              (void* state, const char* source, char* dest, int inputSize);                      + 12009    19
   700       |LZ4_DEPRECATED("use LZ4_compress_fast_extState() instead") LZ4LIB_API int LZ4_compress_limitedOut| 12010    19
   700       +put_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);   + 12010    19
   701       |LZ4_DEPRECATED("use LZ4_compress_fast_continue() instead") LZ4LIB_API int LZ4_compress_continue  | 12011    19
   701       +              (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize);      + 12011    19
   702       |LZ4_DEPRECATED("use LZ4_compress_fast_continue() instead") LZ4LIB_API int LZ4_compress_limitedOut| 12012    19
   702       +put_continue  (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize, int ma+ 12012    19
   702       +xOutputSize);                                                                                    + 12012    19
   703       |                                                                                                 | 12013    19
   704       |/*! Obsolete decompression functions (since v1.8.0) */                                           | 12014    19
   705       |LZ4_DEPRECATED("use LZ4_decompress_fast() instead") LZ4LIB_API int LZ4_uncompress (const char* so| 12015    19
   705       +urce, char* dest, int outputSize);                                                               + 12015    19
   706       |LZ4_DEPRECATED("use LZ4_decompress_safe() instead") LZ4LIB_API int LZ4_uncompress_unknownOutputSi| 12016    19
   706       +ze (const char* source, char* dest, int isize, int maxOutputSize);                               + 12016    19
   707       |                                                                                                 | 12017    19
   708       |/* Obsolete streaming functions (since v1.7.0)                                                   | 12018    19
   709       | * degraded functionality; do not use!                                                           | 12019    19
   710       | *                                                                                               | 12020    19
   711       | * In order to perform streaming compression, these functions depended on data                   | 12021    19
   712       | * that is no longer tracked in the state. They have been preserved as well as                   | 12022    19
   713       | * possible: using them will still produce a correct output. However, they don't                 | 12023    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   238


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   714       | * actually retain any history between compression calls. The compression ratio                  | 12024    19
   715       | * achieved will therefore be no better than compressing each chunk                              | 12025    19
   716       | * independently.                                                                                | 12026    19
   717       | */                                                                                              | 12027    19
   718       |LZ4_DEPRECATED("Use LZ4_createStream() instead") LZ4LIB_API void* LZ4_create (char* inputBuffer);| 12028    19
   719       |LZ4_DEPRECATED("Use LZ4_createStream() instead") LZ4LIB_API int   LZ4_sizeofStreamState(void);   | 12029    19
   720       |LZ4_DEPRECATED("Use LZ4_resetStream() instead")  LZ4LIB_API int   LZ4_resetStreamState(void* stat| 12030    19
   720       +e, char* inputBuffer);                                                                           + 12030    19
   721       |LZ4_DEPRECATED("Use LZ4_saveDict() instead")     LZ4LIB_API char* LZ4_slideInputBuffer (void* sta| 12031    19
   721       +te);                                                                                             + 12031    19
   722       |                                                                                                 | 12032    19
   723       |/*! Obsolete streaming decoding functions (since v1.7.0) */                                      | 12033    19
   724       |LZ4_DEPRECATED("use LZ4_decompress_safe_usingDict() instead") LZ4LIB_API int LZ4_decompress_safe_| 12034    19
   724       +withPrefix64k (const char* src, char* dst, int compressedSize, int maxDstSize);                  + 12034    19
   725       |LZ4_DEPRECATED("use LZ4_decompress_fast_usingDict() instead") LZ4LIB_API int LZ4_decompress_fast_| 12035    19
   725       +withPrefix64k (const char* src, char* dst, int originalSize);                                    + 12035    19
   726       |                                                                                                 | 12036    19
   727       |/*! Obsolete LZ4_decompress_fast variants (since v1.9.0) :                                       | 12037    19
   728       | *  These functions used to be faster than LZ4_decompress_safe(),                                | 12038    19
   729       | *  but this is no longer the case. They are now slower.                                         | 12039    19
   730       | *  This is because LZ4_decompress_fast() doesn't know the input size,                           | 12040    19
   731       | *  and therefore must progress more cautiously into the input buffer to not read beyond the end | 12041    19
   731       +of block.                                                                                        + 12041    19
   732       | *  On top of that `LZ4_decompress_fast()` is not protected vs malformed or malicious inputs, mak| 12042    19
   732       +ing it a security liability.                                                                     + 12042    19
   733       | *  As a consequence, LZ4_decompress_fast() is strongly discouraged, and deprecated.             | 12043    19
   734       | *                                                                                               | 12044    19
   735       | *  The last remaining LZ4_decompress_fast() specificity is that                                 | 12045    19
   736       | *  it can decompress a block without knowing its compressed size.                               | 12046    19
   737       | *  Such functionality can be achieved in a more secure manner                                   | 12047    19
   738       | *  by employing LZ4_decompress_safe_partial().                                                  | 12048    19
   739       | *                                                                                               | 12049    19
   740       | *  Parameters:                                                                                  | 12050    19
   741       | *  originalSize : is the uncompressed size to regenerate.                                       | 12051    19
   742       | *                 `dst` must be already allocated, its size must be >= 'originalSize' bytes.    | 12052    19
   743       | * @return : number of bytes read from source buffer (== compressed size).                       | 12053    19
   744       | *           The function expects to finish at block's end exactly.                              | 12054    19
   745       | *           If the source stream is detected malformed, the function stops decoding and returns | 12055    19
   745       +a negative result.                                                                               + 12055    19
   746       | *  note : LZ4_decompress_fast*() requires originalSize. Thanks to this information, it never wri| 12056    19
   746       +tes past the output buffer.                                                                      + 12056    19
   747       | *         However, since it doesn't know its 'src' size, it may read an unknown amount of input,| 12057    19
   747       + past input buffer bounds.                                                                       + 12057    19
   748       | *         Also, since match offsets are not validated, match reads from 'src' may underflow too.| 12058    19
   749       | *         These issues never happen if input (compressed) data is correct.                      | 12059    19
   750       | *         But they may happen if input data is invalid (error or intentional tampering).        | 12060    19
   751       | *         As a consequence, use these functions in trusted environments with trusted data **only| 12061    19
   751       +**.                                                                                              + 12061    19
   752       | */                                                                                              | 12062    19
   753       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe() inst| 12063    19
   753       +ead")                                                                                            + 12063    19
   754       |LZ4LIB_API int LZ4_decompress_fast (const char* src, char* dst, int originalSize);               | 12064    19
   755       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe_contin| 12065    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   239


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   755       +ue() instead")                                                                                   + 12065    19
   756       |LZ4LIB_API int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* sr| 12066    19
   756       +c, char* dst, int originalSize);                                                                 + 12066    19
   757       |LZ4_DEPRECATED("This function is deprecated and unsafe. Consider using LZ4_decompress_safe_usingD| 12067    19
   757       +ict() instead")                                                                                  + 12067    19
   758       |LZ4LIB_API int LZ4_decompress_fast_usingDict (const char* src, char* dst, int originalSize, const| 12068    19
   758       + char* dictStart, int dictSize);                                                                 + 12068    19
   759       |                                                                                                 | 12069    19
   760       |/*! LZ4_resetStream() :                                                                          | 12070    19
   761       | *  An LZ4_stream_t structure must be initialized at least once.                                 | 12071    19
   762       | *  This is done with LZ4_initStream(), or LZ4_resetStream().                                    | 12072    19
   763       | *  Consider switching to LZ4_initStream(),                                                      | 12073    19
   764       | *  invoking LZ4_resetStream() will trigger deprecation warnings in the future.                  | 12074    19
   765       | */                                                                                              | 12075    19
   766       |LZ4LIB_API void LZ4_resetStream (LZ4_stream_t* streamPtr);                                       | 12076    19
   767       |                                                                                                 | 12077    19
   768       |                                                                                                 | 12078    19
   769       |#endif /* LZ4_H_98237428734687 */                                                                | 12079    19
   770       |                                                                                                 | 12080    19
   771       |                                                                                                 | 12081    19
   772       |#if defined (__cplusplus)                                                                        | 12082    19
   773       |}                                                                                                | 12083    19
   774       |#endif                                                                                           | 12084    19
   118       |/* see also "memory routines" below */                                                           | 12085    23
   119       |                                                                                                 | 12086    23
   120       |                                                                                                 | 12087    23
   121       |/*-************************************                                                          | 12088    23
   122       |*  Compiler Options                                                                              | 12089    23
   123       |**************************************/                                                          | 12090    23
   124       |#if defined(_MSC_VER) && (_MSC_VER >= 1400)  /* Visual Studio 2005+ */                           | 12091    23
   125       |#  include <intrin.h>               /* only present in VS2005+ */                                | 12092    23
   126       |#  pragma warning(disable : 4127)   /* disable: C4127: conditional expression is constant */     | 12093    23
   127       |#endif  /* _MSC_VER */                                                                           | 12094    23
   128       |                                                                                                 | 12095    23
   129       |#ifndef LZ4_FORCE_INLINE                                                                         | 12096    23
   130       |#  ifdef _MSC_VER    /* Visual Studio */                                                         | 12097    23
   131       |#    define LZ4_FORCE_INLINE static __forceinline                                                | 12098    23
   132       |#  else                                                                                          | 12099    23
   133       |#    if defined (__cplusplus) || defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L   /* C| 12100    23
   133       +99 */                                                                                            + 12100    23
   134       |#      ifdef __GNUC__                                                                            | 12101    23
   135       |#        define LZ4_FORCE_INLINE static inline __attribute__((always_inline))                    | 12102    23
   136       |#      else                                                                                      | 12103    23
   137       |#        define LZ4_FORCE_INLINE static inline                                                   | 12104    23
   138       |#      endif                                                                                     | 12105    23
   139       |#    else                                                                                        | 12106    23
   140       |#      define LZ4_FORCE_INLINE static                                                            | 12107    23
   141       |#    endif /* __STDC_VERSION__ */                                                                | 12108    23
   142       |#  endif  /* _MSC_VER */                                                                         | 12109    23
   143       |#endif /* LZ4_FORCE_INLINE */                                                                    | 12110    23
   144       |                                                                                                 | 12111    23
   144       +                                                                                                 + 12111    23
   145       |/* LZ4_FORCE_O2 and LZ4_FORCE_INLINE                                                             | 12112    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   240


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   146       | * gcc on ppc64le generates an unrolled SIMDized loop for LZ4_wildCopy8,                         | 12113    23
   147       | * together with a simple 8-byte copy loop as a fall-back path.                                  | 12114    23
   148       | * However, this optimization hurts the decompression speed by >30%,                             | 12115    23
   149       | * because the execution does not go to the optimized loop                                       | 12116    23
   150       | * for typical compressible data, and all of the preamble checks                                 | 12117    23
   151       | * before going to the fall-back path become useless overhead.                                   | 12118    23
   152       | * This optimization happens only with the -O3 flag, and -O2 generates                           | 12119    23
   153       | * a simple 8-byte copy loop.                                                                    | 12120    23
   154       | * With gcc on ppc64le, all of the LZ4_decompress_* and LZ4_wildCopy8                            | 12121    23
   155       | * functions are annotated with __attribute__((optimize("O2"))),                                 | 12122    23
   156       | * and also LZ4_wildCopy8 is forcibly inlined, so that the O2 attribute                          | 12123    23
   157       | * of LZ4_wildCopy8 does not affect the compression speed.                                       | 12124    23
   158       | */                                                                                              | 12125    23
   159       |#if defined(__PPC64__) && defined(__LITTLE_ENDIAN__) && defined(__GNUC__) && !defined(__clang__) | 12126    23
   160       |#  define LZ4_FORCE_O2  __attribute__((optimize("O2")))                                          | 12127    23
   161       |#  undef LZ4_FORCE_INLINE                                                                        | 12128    23
   162       |#  define LZ4_FORCE_INLINE  static __inline __attribute__((optimize("O2"),always_inline))        | 12129    23
   163       |#else                                                                                            | 12130    23
   164       |#  define LZ4_FORCE_O2                                                                           | 12131    23
   165       |#endif                                                                                           | 12132    23
   166       |                                                                                                 | 12133    23
   167       |#if (defined(__GNUC__) && (__GNUC__ >= 3)) || (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= | 12134    23
   167       +800)) || defined(__clang__)                                                                      + 12134    23
   168       |#  define expect(expr,value)    (__builtin_expect ((expr),(value)) )                             | 12135    23
   169       |#else                                                                                            | 12136    23
   170       |#  define expect(expr,value)    (expr)                                                           | 12137    23
   171       |#endif                                                                                           | 12138    23
   172       |                                                                                                 | 12139    23
   173       |#ifndef likely                                                                                   | 12140    23
   174       |#define likely(expr)     expect((expr) != 0, 1)                                                  | 12141    23
   175       |#endif                                                                                           | 12142    23
   176       |#ifndef unlikely                                                                                 | 12143    23
   177       |#define unlikely(expr)   expect((expr) != 0, 0)                                                  | 12144    23
   178       |#endif                                                                                           | 12145    23
   179       |                                                                                                 | 12146    23
   180       |/* Should the alignment test prove unreliable, for some reason,                                  | 12147    23
   181       | * it can be disabled by setting LZ4_ALIGN_TEST to 0 */                                          | 12148    23
   182       |#ifndef LZ4_ALIGN_TEST  /* can be externally provided */                                         | 12149    23
   183       |# define LZ4_ALIGN_TEST 1                                                                        | 12150    23
   184       |#endif                                                                                           | 12151    23
   185       |                                                                                                 | 12152    23
   186       |                                                                                                 | 12153    23
   187       |/*-************************************                                                          | 12154    23
   188       |*  Memory routines                                                                               | 12155    23
   189       |**************************************/                                                          | 12156    23
   190       |#ifdef LZ4_USER_MEMORY_FUNCTIONS                                                                 | 12157    23
   191       |/* memory management functions can be customized by user project.                                | 12158    23
   192       | * Below functions must exist somewhere in the Project                                           | 12159    23
   193       | * and be available at link time */                                                              | 12160    23
   194       |void* LZ4_malloc(size_t s);                                                                      | 12161    23
   195       |void* LZ4_calloc(size_t n, size_t s);                                                            | 12162    23
   196       |void  LZ4_free(void* p);                                                                         | 12163    23
   197       |# define ALLOC(s)          LZ4_malloc(s)                                                         | 12164    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   241


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   198       |# define ALLOC_AND_ZERO(s) LZ4_calloc(1,s)                                                       | 12165    23
   199       |# define FREEMEM(p)        LZ4_free(p)                                                           | 12166    23
   200       |#else                                                                                            | 12167    23
   201       |struct rdkafka_s;                                                                                | 12168    23
   202       |extern void *rd_kafka_mem_malloc(struct rdkafka_s *rk, size_t s);                                | 12169    23
   203       |extern void *rd_kafka_mem_calloc(struct rdkafka_s *rk, size_t n, size_t s);                      | 12170    23
   204       |extern void rd_kafka_mem_free(struct rdkafka_s *rk, void *p);                                    | 12171    23
   205       |# define ALLOC(s)          rd_kafka_mem_malloc(NULL, s)                                          | 12172    23
   206       |# define ALLOC_AND_ZERO(s) rd_kafka_mem_calloc(NULL, 1, s)                                       | 12173    23
   207       |# define FREEMEM(p)        rd_kafka_mem_free(NULL, p)                                            | 12174    23
   208       |#endif                                                                                           | 12175    23
   209       |                                                                                                 | 12176    23
   210       |#include <string.h>   /* memset, memcpy */                                                       | 12177    23
     1       |/* release 2.25.00 */                                                                            | 12178    24
     2       |#pragma pack()                                                                                   | 12179    24
     3       |/*-                                                                                              | 12180    24
     4       | * Copyright (c) 1990, 1993                                                                      | 12181    24
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12182    24
     6       | *                                                                                               | 12183    24
     7       | * Redistribution and use in source and binary forms, with or without                            | 12184    24
     8       | * modification, are permitted provided that the following conditions                            | 12185    24
     9       | * are met:                                                                                      | 12186    24
    10       | * 1. Redistributions of source code must retain the above copyright                             | 12187    24
    11       | *    notice, this list of conditions and the following disclaimer.                              | 12188    24
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12189    24
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 12190    24
    14       | *    documentation and/or other materials provided with the distribution.                       | 12191    24
    15       | * 3. All advertising materials mentioning features or use of this software                      | 12192    24
    16       | *    must display the following acknowledgement:                                                | 12193    24
    17       | *      This product includes software developed by the University of                            | 12194    24
    18       | *      California, Berkeley and its contributors.                                               | 12195    24
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 12196    24
    20       | *    may be used to endorse or promote products derived from this software                      | 12197    24
    21       | *    without specific prior written permission.                                                 | 12198    24
    22       | *                                                                                               | 12199    24
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12200    24
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12201    24
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12202    24
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12203    24
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12204    24
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12205    24
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12206    24
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12207    24
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12208    24
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12209    24
    33       | * SUCH DAMAGE.                                                                                  | 12210    24
    34       | *                                                                                               | 12211    24
    35       | *      @(#)string.h    8.1 (Berkeley) 6/2/93                                                    | 12212    24
    36       | */                                                                                              | 12213    24
    37       |                                                                                                 | 12214    24
    38       |#ifndef _STRING_H_                                                                               | 12215    24
    39       |#define _STRING_H_                                                                               | 12216    24
    40       |                                                                                                 | 12217    24
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   242


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |#include <sys/cdefs.h>                                                                           | 12218    24
     1       |/* release 2.25.00 */                                                                            | 12219     4
     2       |#pragma pack()                                                                                   | 12220     4
     3       |/*                                                                                               | 12221     4
     4       | * Copyright (c) 1991, 1993                                                                      | 12222     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12223     4
     6       | *                                                                                               | 12224     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 12225     4
     8       | * Berkeley Software Design, Inc.                                                                | 12226     4
     9       | *                                                                                               | 12227     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 12228     4
    11       | * modification, are permitted provided that the following conditions                            | 12229     4
    12       | * are met:                                                                                      | 12230     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 12231     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 12232     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12233     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 12234     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 12235     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 12236     4
    19       | *    must display the following acknowledgement:                                                | 12237     4
    20       | *      This product includes software developed by the University of                            | 12238     4
    21       | *      California, Berkeley and its contributors.                                               | 12239     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 12240     4
    23       | *    may be used to endorse or promote products derived from this software                      | 12241     4
    24       | *    without specific prior written permission.                                                 | 12242     4
    25       | *                                                                                               | 12243     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12244     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12245     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12246     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12247     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12248     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12249     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12250     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12251     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12252     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12253     4
    36       | * SUCH DAMAGE.                                                                                  | 12254     4
    37       | *                                                                                               | 12255     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 12256     4
    39       | */                                                                                              | 12257     4
    40       |                                                                                                 | 12258     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 12259     4
    42       |#define _SYS_CDEFS_H_                                                                            | 12260     4
    43       |                                                                                                 | 12261     4
    44       |#if defined(__cplusplus)                                                                         | 12262     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 12263     4
    46       |#define __END_DECLS     }                                                                        | 12264     4
    47       |#else                                                                                            | 12265     4
    48       |#define __BEGIN_DECLS                                                                            | 12266     4
    49       |#define __END_DECLS                                                                              | 12267     4
    50       |#endif                                                                                           | 12268     4
    51       |                                                                                                 | 12269     4
    52       |/*                                                                                               | 12270     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   243


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    53       | * This code has been put in place to help reduce the addition of                                | 12271     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 12272     4
    55       | * having a compiler-agnostic source tree.                                                       | 12273     4
    56       | */                                                                                              | 12274     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 12275     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 12276     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 12277     4
    60       |                                                                                                 | 12278     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 12279     4
    62       |                                                                                                 | 12280     4
    63       |                                                                                                 | 12281     4
    64       |/*                                                                                               | 12282     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 12283     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 12284     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 12285     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 12286     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 12287     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 12288     4
    71       | * this only works with ANSI C.                                                                  | 12289     4
    72       | *                                                                                               | 12290     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 12291     4
    74       | * first.  It is only available with ANSI C.                                                     | 12292     4
    75       | */                                                                                              | 12293     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 12294     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 12295     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 12296     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 12297     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 12298     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 12299     4
    82       |                                                                                                 | 12300     4
    83       |#define __const         const           /* define reserved names to standard */                  | 12301     4
    84       |#define __signed        signed                                                                   | 12302     4
    85       |#define __volatile      volatile                                                                 | 12303     4
    86       |#if defined(__cplusplus)                                                                         | 12304     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 12305     4
    88       |#else                                                                                            | 12306     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 12307     4
    90       |#endif /* !__cplusplus */                                                                        | 12308     4
    91       |                                                                                                 | 12309     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 12310     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 12311     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 12312     4
    95       |#define __STRING(x)     "x"                                                                      | 12313     4
    96       |                                                                                                 | 12314     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 12315     4
    98       |#define __inline                                                                                 | 12316     4
    99       |#define __signed                                                                                 | 12317     4
   100       |#define __volatile                                                                               | 12318     4
   101       |/*                                                                                               | 12319     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 12320     4
   103       | * deleted from the program and old programs will want them left alone.                          | 12321     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 12322     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 12323     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   244


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   106       | */                                                                                              | 12324     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 12325     4
   108       |#define const                           /* delete ANSI C keywords */                             | 12326     4
   109       |#define inline                                                                                   | 12327     4
   110       |#define signed                                                                                   | 12328     4
   111       |#define volatile                                                                                 | 12329     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 12330     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 12331     4
   114       |                                                                                                 | 12332     4
   115       |/*                                                                                               | 12333     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 12334     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 12335     4
   118       | */                                                                                              | 12336     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 12337     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 12338     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 12339     4
   122       |#define __unused                                                                                 | 12340     4
   123       |#define __aligned(x)                                                                             | 12341     4
   124       |#define __section(x)                                                                             | 12342     4
   125       |#define __nonnull(x)                                                                             | 12343     4
   126       |#define __used                                                                                   | 12344     4
   127       |                                                                                                 | 12345     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 12346     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 12347     4
   130       |                                                                                                 | 12348     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 12349     4
   132       |#define __func__  NULL                                                                           | 12350     4
   133       |#endif                                                                                           | 12351     4
   134       |                                                                                                 | 12352     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 12353     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 12354     4
   137       |#endif                                                                                           | 12355     4
   138       |                                                                                                 | 12356     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 12357     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 12358     4
   141       | **/                                                                                             | 12359     4
   142       |#ifndef __cplusplus                                                                              | 12360     4
   143       |#define __restrict __restrict__                                                                  | 12361     4
   144       |#else                                                                                            | 12362     4
   145       |/* Systems/C++ does not */                                                                       | 12363     4
   146       |#define __restrict                                                                               | 12364     4
   147       |#endif                                                                                           | 12365     4
   148       |                                                                                                 | 12366     4
   149       |/*                                                                                               | 12367     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 12368     4
   151       | */                                                                                              | 12369     4
   152       |#define __predict_true(exp)     (exp)                                                            | 12370     4
   153       |#define __predict_false(exp)    (exp)                                                            | 12371     4
   154       |                                                                                                 | 12372     4
   155       |                                                                                                 | 12373     4
   156       |/*                                                                                               | 12374     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 12375     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 12376     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   245


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   159       | *                                                                                               | 12377     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 12378     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 12379     4
   162       | */                                                                                              | 12380     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 12381     4
   164       |#undef __offsetof                                                                                | 12382     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 12383     4
   166       |#endif                                                                                           | 12384     4
   167       |                                                                                                 | 12385     4
   168       |/*                                                                                               | 12386     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 12387     4
   170       | * or scanf-like arguments.                                                                      | 12388     4
   171       | */                                                                                              | 12389     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 12390     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 12391     4
   174       |#define __format_arg(fmtarg)                                                                     | 12392     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 12393     4
   176       |                                                                                                 | 12394     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 12395     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 12396     4
   179       |                                                                                                 | 12397     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 12398     4
   181       |#define __weak_reference(sym,alias)                                                              | 12399     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 12400     4
   183       |#define __warn_references(sym,msg)                                                               | 12401     4
   184       |                                                                                                 | 12402     4
   185       | /* This places the string into the resulting object.  It should */                              | 12403     4
   186       | /* probably become #pragma ident */                                                             | 12404     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 12405     4
   188       |                                                                                                 | 12406     4
   189       |#ifndef __RCSID                                                                                  | 12407     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 12408     4
   191       |#endif                                                                                           | 12409     4
   192       |                                                                                                 | 12410     4
   193       |/*                                                                                               | 12411     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 12412     4
   195       | * Usage:                                                                                        | 12413     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 12414     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 12415     4
   198       | */                                                                                              | 12416     4
   199       |#ifndef __SYSCID                                                                                 | 12417     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 12418     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 12419     4
   202       |#else                                                                                            | 12420     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 12421     4
   204       |#endif                                                                                           | 12422     4
   205       |#endif                                                                                           | 12423     4
   206       |                                                                                                 | 12424     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 12425     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 12426     4
   209       |#endif                                                                                           | 12427     4
   210       |                                                                                                 | 12428     4
   211       |#ifndef __COPYRIGHT                                                                              | 12429     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   246


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 12430     4
   213       |#endif                                                                                           | 12431     4
   214       |                                                                                                 | 12432     4
   215       |                                                                                                 | 12433     4
   216       |#ifndef __DECONST                                                                                | 12434     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 12435     4
   218       |#endif                                                                                           | 12436     4
   219       |                                                                                                 | 12437     4
   220       |#ifndef __DEVOLATILE                                                                             | 12438     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 12439     4
   222       |#endif                                                                                           | 12440     4
   223       |                                                                                                 | 12441     4
   224       |#ifndef __DEQUALIFY                                                                              | 12442     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 12443     4
   226       |#endif                                                                                           | 12444     4
   227       |                                                                                                 | 12445     4
   228       |                                                                                                 | 12446     4
   229       |/*-                                                                                              | 12447     4
   230       | * The following definitions are an extension of the behavior originally                         | 12448     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 12449     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 12450     4
   233       | * header file is included.                                                                      | 12451     4
   234       | *                                                                                               | 12452     4
   235       | * Here's a quick run-down of the versions:                                                      | 12453     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 12454     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 12455     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 12456     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 12457     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 12458     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 12459     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 12460     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 12461     4
   244       | *                                                                                               | 12462     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 12463     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 12464     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 12465     4
   248       | *                                                                                               | 12466     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 12467     4
   250       | */                                                                                              | 12468     4
   251       |                                                                                                 | 12469     4
   252       |/*                                                                                               | 12470     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 12471     4
   254       | * available. Also make them available when requested so.                                        | 12472     4
   255       | */                                                                                              | 12473     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 12474     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 12475     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 12476     4
   259       |#define __DF_VISIBLE    1                                                                        | 12477     4
   260       |#else                                                                                            | 12478     4
   261       |#define __DF_VISIBLE    0                                                                        | 12479     4
   262       |#endif                                                                                           | 12480     4
   263       |                                                                                                 | 12481     4
   264       |/*-                                                                                              | 12482     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   247


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   265       | * The following definitions are an extension of the behavior originally                         | 12483     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 12484     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 12485     4
   268       | * header file is included.                                                                      | 12486     4
   269       | *                                                                                               | 12487     4
   270       | * Here's a quick run-down of the versions:                                                      | 12488     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 12489     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 12490     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 12491     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 12492     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 12493     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 12494     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 12495     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 12496     4
   279       | *                                                                                               | 12497     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 12498     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 12499     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 12500     4
   283       | *                                                                                               | 12501     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 12502     4
   285       | */                                                                                              | 12503     4
   286       |                                                                                                 | 12504     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 12505     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 12506     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 12507     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 12508     4
   291       |#endif                                                                                           | 12509     4
   292       |                                                                                                 | 12510     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 12511     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 12512     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 12513     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 12514     4
   297       |#endif                                                                                           | 12515     4
   298       |                                                                                                 | 12516     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 12517     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 12518     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 12519     4
   302       |#define __XSI_VISIBLE           700                                                              | 12520     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 12521     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 12522     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 12523     4
   306       |#define __XSI_VISIBLE           600                                                              | 12524     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 12525     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 12526     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 12527     4
   310       |#define __XSI_VISIBLE           500                                                              | 12528     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 12529     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 12530     4
   313       |#endif                                                                                           | 12531     4
   314       |#endif                                                                                           | 12532     4
   315       |                                                                                                 | 12533     4
   316       |/*                                                                                               | 12534     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 12535     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   248


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   318       | * important.                                                                                    | 12536     4
   319       | */                                                                                              | 12537     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 12538     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 12539     4
   322       |#endif                                                                                           | 12540     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 12541     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 12542     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 12543     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 12544     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 12545     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 12546     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 12547     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 12548     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 12549     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 12550     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 12551     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 12552     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 12553     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 12554     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 12555     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 12556     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 12557     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 12558     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 12559     4
   342       |#else                                                                                            | 12560     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 12561     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 12562     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 12563     4
   346       |#else                                                                                            | 12564     4
   347       |/*-                                                                                              | 12565     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 12566     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 12567     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 12568     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 12569     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 12570     4
   353       | * a test program to print out the values.                                                       | 12571     4
   354       | *                                                                                               | 12572     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 12573     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 12574     4
   357       | * environment (and in fact we will never get here).                                             | 12575     4
   358       | */                                                                                              | 12576     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 12577     4
   360       |#define __POSIX_VISIBLE         0                                                                | 12578     4
   361       |#define __XSI_VISIBLE           0                                                                | 12579     4
   362       |#define __BSD_VISIBLE           0                                                                | 12580     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 12581     4
   364       |#define __EXT1_VISIBLE          0                                                                | 12582     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 12583     4
   366       |#define __POSIX_VISIBLE         0                                                                | 12584     4
   367       |#define __XSI_VISIBLE           0                                                                | 12585     4
   368       |#define __BSD_VISIBLE           0                                                                | 12586     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 12587     4
   370       |#define __EXT1_VISIBLE          0                                                                | 12588     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   249


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 12589     4
   372       |#define __POSIX_VISIBLE         0                                                                | 12590     4
   373       |#define __XSI_VISIBLE           0                                                                | 12591     4
   374       |#define __BSD_VISIBLE           0                                                                | 12592     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 12593     4
   376       |#define __EXT1_VISIBLE          0                                                                | 12594     4
   377       |#else                           /* Default environment: show everything. */                      | 12595     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 12596     4
   379       |#define __XSI_VISIBLE           700                                                              | 12597     4
   380       |#define __BSD_VISIBLE           1                                                                | 12598     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 12599     4
   382       |#define __EXT1_VISIBLE          1                                                                | 12600     4
   383       |#endif                                                                                           | 12601     4
   384       |#endif                                                                                           | 12602     4
   385       |                                                                                                 | 12603     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 12604     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 12605     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 12606     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 12607     4
   390       |#define __EXT1_VISIBLE          1                                                                | 12608     4
   391       |#else                                                                                            | 12609     4
   392       |#define __EXT1_VISIBLE          0                                                                | 12610     4
   393       |#endif                                                                                           | 12611     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 12612     4
   395       |                                                                                                 | 12613     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 12614     4
   397       |#define __NO_TLS 1                                                                               | 12615     4
   398       |#endif                                                                                           | 12616     4
   399       |                                                                                                 | 12617     4
   400       |                                                                                                 | 12618     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 12619     4
   402       |#define __FBSDID(x)                                                                              | 12620     4
   403       |                                                                                                 | 12621     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 12622     4
   405       |#pragma pack(reset)                                                                              | 12623     4
    42       |#include <sys/_null.h>                                                                           | 12624    24
     1       |/* release 2.25.00 */                                                                            | 12625    15
     2       |#pragma pack()                                                                                   | 12626    15
     3       |/*-                                                                                              | 12627    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           | 12628    15
     5       | * All rights reserved.                                                                          | 12629    15
     6       | *                                                                                               | 12630    15
     7       | * Redistribution and use in source and binary forms, with or without                            | 12631    15
     8       | * modification, are permitted provided that the following conditions                            | 12632    15
     9       | * are met:                                                                                      | 12633    15
    10       | *                                                                                               | 12634    15
    11       | * 1. Redistributions of source code must retain the above copyright                             | 12635    15
    12       | *    notice, this list of conditions and the following disclaimer.                              | 12636    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12637    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        | 12638    15
    15       | *    documentation and/or other materials provided with the distribution.                       | 12639    15
    16       | *                                                                                               | 12640    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          | 12641    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   250


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     | 12642    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       | 12643    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              | 12644    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      | 12645    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     | 12646    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         | 12647    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           | 12648    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      | 12649    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             | 12650    15
    27       | *                                                                                               | 12651    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             | 12652    15
    29       | */                                                                                              | 12653    15
    30       |                                                                                                 | 12654    15
    31       |#ifndef NULL                                                                                     | 12655    15
    32       |                                                                                                 | 12656    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    | 12657    15
    34       |#define NULL    ((void *)0)                                                                      | 12658    15
    35       |#else                                                                                            | 12659    15
    36       |#if defined(__LP64__)                                                                            | 12660    15
    37       |#define NULL    (0L)                                                                             | 12661    15
    38       |#else                                                                                            | 12662    15
    39       |#define NULL    0                                                                                | 12663    15
    40       |#endif  /* __LP64__ */                                                                           | 12664    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            | 12665    15
    42       |                                                                                                 | 12666    15
    43       |#endif                                                                                           | 12667    15
    44       |#pragma pack(reset)                                                                              | 12668    15
    43       |#include <sys/_types.h>                                                                          | 12669    24
     1       |/* release 2.25.00 */                                                                            | 12670     6
     2       |#pragma pack()                                                                                   | 12671     6
     3       |/*-                                                                                              | 12672     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 12673     6
     5       | * All rights reserved.                                                                          | 12674     6
     6       | *                                                                                               | 12675     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 12676     6
     8       | * modification, are permitted provided that the following conditions                            | 12677     6
     9       | * are met:                                                                                      | 12678     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 12679     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 12680     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12681     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 12682     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 12683     6
    15       | *                                                                                               | 12684     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 12685     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12686     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12687     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 12688     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12689     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12690     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12691     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12692     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12693     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12694     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   251


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    26       | * SUCH DAMAGE.                                                                                  | 12695     6
    27       | *                                                                                               | 12696     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 12697     6
    29       | */                                                                                              | 12698     6
    30       |                                                                                                 | 12699     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 12700     6
    32       |#define _SYS__TYPES_H_                                                                           | 12701     6
    33       |                                                                                                 | 12702     6
    34       |#include <sys/cdefs.h>                                                                           | 12703     6
    35       |#include <machine/_types.h>                                                                      | 12704     6
    36       |                                                                                                 | 12705     6
    37       |/*                                                                                               | 12706     6
    38       | * Standard type definitions.                                                                    | 12707     6
    39       | */                                                                                              | 12708     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 12709     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 12710     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 12711     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 12712     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 12713     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 12714     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 12715     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 12716     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 12717     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 12718     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 12719     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 12720     6
    52       |typedef int             __nl_item;                                                               | 12721     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 12722     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 12723     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 12724     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 12725     6
    57       |                                        /* signed, because of legacy code */                     | 12726     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 12727     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 12728     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 12729     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 12730     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 12731     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 12732     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 12733     6
    65       |                                                                                                 | 12734     6
    66       |/*                                                                                               | 12735     6
    67       | * Unusual type definitions.                                                                     | 12736     6
    68       | */                                                                                              | 12737     6
    69       |/*                                                                                               | 12738     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 12739     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 12740     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 12741     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 12742     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 12743     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 12744     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 12745     6
    77       | *                                                                                               | 12746     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 12747     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   252


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 12748     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 12749     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 12750     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 12751     6
    83       | */                                                                                              | 12752     6
    84       |#ifdef __cplusplus                                                                               | 12753     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 12754     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 12755     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 12756     6
    88       |#else                                                                                            | 12757     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 12758     6
    90       |#endif                                                                                           | 12759     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 12760     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 12761     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 12762     6
    94       |                                                                                                 | 12763     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 12764     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 12765     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 12766     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 12767     6
    99       |#endif                                                                                           | 12768     6
   100       |                                                                                                 | 12769     6
   101       |#if !defined(__cplusplus)                                                                        | 12770     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 12771     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 12772     6
   104       |#endif                                                                                           | 12773     6
   105       |                                                                                                 | 12774     6
   106       |                                                                                                 | 12775     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 12776     6
   108       |                                                                                                 | 12777     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 12778     6
   110       |                                                                                                 | 12779     6
   111       |/*                                                                                               | 12780     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 12781     6
   113       | * stream conversions.                                                                           | 12782     6
   114       | */                                                                                              | 12783     6
   115       |typedef union {                                                                                  | 12784     6
   116       |        char            __mbstate8[128];                                                         | 12785     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 12786     6
   118       |} __mbstate_t;                                                                                   | 12787     6
   119       |                                                                                                 | 12788     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 12789     6
   121       |#pragma pack(reset)                                                                              | 12790     6
    44       |                                                                                                 | 12791    24
    45       |/*                                                                                               | 12792    24
    46       | * Prototype functions which were historically defined in <string.h>, but                        | 12793    24
    47       | * are required by POSIX to be prototyped in <strings.h>.                                        | 12794    24
    48       | */                                                                                              | 12795    24
    49       |#if __BSD_VISIBLE                                                                                | 12796    24
    50       |#include <strings.h>                                                                             | 12797    24
     1       |/* release 2.25.00 */                                                                            | 12798    25
     1       +                                                                                                 + 12798    25
     2       |#pragma pack()                                                                                   | 12799    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   253


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     3       |/*-                                                                                              | 12800    25
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 12801    25
     5       | * All rights reserved.                                                                          | 12802    25
     6       | *                                                                                               | 12803    25
     7       | * Redistribution and use in source and binary forms, with or without                            | 12804    25
     8       | * modification, are permitted provided that the following conditions                            | 12805    25
     9       | * are met:                                                                                      | 12806    25
    10       | * 1. Redistributions of source code must retain the above copyright                             | 12807    25
    11       | *    notice, this list of conditions and the following disclaimer.                              | 12808    25
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12809    25
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 12810    25
    14       | *    documentation and/or other materials provided with the distribution.                       | 12811    25
    15       | *                                                                                               | 12812    25
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 12813    25
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12814    25
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12815    25
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 12816    25
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12817    25
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12818    25
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12819    25
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12820    25
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12821    25
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12822    25
    26       | * SUCH DAMAGE.                                                                                  | 12823    25
    27       | *                                                                                               | 12824    25
    28       | */                                                                                              | 12825    25
    29       |                                                                                                 | 12826    25
    30       |#ifndef _STRINGS_H_                                                                              | 12827    25
    31       |#define _STRINGS_H_                                                                              | 12828    25
    32       |                                                                                                 | 12829    25
    33       |#include <sys/cdefs.h>                                                                           | 12830    25
     1       |/* release 2.25.00 */                                                                            | 12831     4
     2       |#pragma pack()                                                                                   | 12832     4
     3       |/*                                                                                               | 12833     4
     4       | * Copyright (c) 1991, 1993                                                                      | 12834     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12835     4
     6       | *                                                                                               | 12836     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 12837     4
     8       | * Berkeley Software Design, Inc.                                                                | 12838     4
     9       | *                                                                                               | 12839     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 12840     4
    11       | * modification, are permitted provided that the following conditions                            | 12841     4
    12       | * are met:                                                                                      | 12842     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 12843     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 12844     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12845     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 12846     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 12847     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 12848     4
    19       | *    must display the following acknowledgement:                                                | 12849     4
    20       | *      This product includes software developed by the University of                            | 12850     4
    21       | *      California, Berkeley and its contributors.                                               | 12851     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 12852     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   254


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    23       | *    may be used to endorse or promote products derived from this software                      | 12853     4
    24       | *    without specific prior written permission.                                                 | 12854     4
    25       | *                                                                                               | 12855     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12856     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12857     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12858     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12859     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12860     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12861     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12862     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12863     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12864     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12865     4
    36       | * SUCH DAMAGE.                                                                                  | 12866     4
    37       | *                                                                                               | 12867     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 12868     4
    39       | */                                                                                              | 12869     4
    40       |                                                                                                 | 12870     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 12871     4
    42       |#define _SYS_CDEFS_H_                                                                            | 12872     4
    43       |                                                                                                 | 12873     4
    44       |#if defined(__cplusplus)                                                                         | 12874     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 12875     4
    46       |#define __END_DECLS     }                                                                        | 12876     4
    47       |#else                                                                                            | 12877     4
    48       |#define __BEGIN_DECLS                                                                            | 12878     4
    49       |#define __END_DECLS                                                                              | 12879     4
    50       |#endif                                                                                           | 12880     4
    51       |                                                                                                 | 12881     4
    52       |/*                                                                                               | 12882     4
    53       | * This code has been put in place to help reduce the addition of                                | 12883     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 12884     4
    55       | * having a compiler-agnostic source tree.                                                       | 12885     4
    56       | */                                                                                              | 12886     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 12887     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 12888     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 12889     4
    60       |                                                                                                 | 12890     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 12891     4
    62       |                                                                                                 | 12892     4
    63       |                                                                                                 | 12893     4
    64       |/*                                                                                               | 12894     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 12895     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 12896     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 12897     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 12898     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 12899     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 12900     4
    71       | * this only works with ANSI C.                                                                  | 12901     4
    72       | *                                                                                               | 12902     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 12903     4
    74       | * first.  It is only available with ANSI C.                                                     | 12904     4
    75       | */                                                                                              | 12905     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   255


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 12906     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 12907     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 12908     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 12909     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 12910     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 12911     4
    82       |                                                                                                 | 12912     4
    83       |#define __const         const           /* define reserved names to standard */                  | 12913     4
    84       |#define __signed        signed                                                                   | 12914     4
    85       |#define __volatile      volatile                                                                 | 12915     4
    86       |#if defined(__cplusplus)                                                                         | 12916     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 12917     4
    88       |#else                                                                                            | 12918     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 12919     4
    90       |#endif /* !__cplusplus */                                                                        | 12920     4
    91       |                                                                                                 | 12921     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 12922     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 12923     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 12924     4
    95       |#define __STRING(x)     "x"                                                                      | 12925     4
    96       |                                                                                                 | 12926     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 12927     4
    98       |#define __inline                                                                                 | 12928     4
    99       |#define __signed                                                                                 | 12929     4
   100       |#define __volatile                                                                               | 12930     4
   101       |/*                                                                                               | 12931     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 12932     4
   103       | * deleted from the program and old programs will want them left alone.                          | 12933     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 12934     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 12935     4
   106       | */                                                                                              | 12936     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 12937     4
   108       |#define const                           /* delete ANSI C keywords */                             | 12938     4
   109       |#define inline                                                                                   | 12939     4
   110       |#define signed                                                                                   | 12940     4
   111       |#define volatile                                                                                 | 12941     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 12942     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 12943     4
   114       |                                                                                                 | 12944     4
   115       |/*                                                                                               | 12945     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 12946     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 12947     4
   118       | */                                                                                              | 12948     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 12949     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 12950     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 12951     4
   122       |#define __unused                                                                                 | 12952     4
   123       |#define __aligned(x)                                                                             | 12953     4
   124       |#define __section(x)                                                                             | 12954     4
   125       |#define __nonnull(x)                                                                             | 12955     4
   126       |#define __used                                                                                   | 12956     4
   127       |                                                                                                 | 12957     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 12958     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   256


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   129       |#define __noinline      __attribute__((__noinline__))                                            | 12959     4
   130       |                                                                                                 | 12960     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 12961     4
   132       |#define __func__  NULL                                                                           | 12962     4
   133       |#endif                                                                                           | 12963     4
   134       |                                                                                                 | 12964     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 12965     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 12966     4
   137       |#endif                                                                                           | 12967     4
   138       |                                                                                                 | 12968     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 12969     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 12970     4
   141       | **/                                                                                             | 12971     4
   142       |#ifndef __cplusplus                                                                              | 12972     4
   143       |#define __restrict __restrict__                                                                  | 12973     4
   144       |#else                                                                                            | 12974     4
   145       |/* Systems/C++ does not */                                                                       | 12975     4
   146       |#define __restrict                                                                               | 12976     4
   147       |#endif                                                                                           | 12977     4
   148       |                                                                                                 | 12978     4
   149       |/*                                                                                               | 12979     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 12980     4
   151       | */                                                                                              | 12981     4
   152       |#define __predict_true(exp)     (exp)                                                            | 12982     4
   153       |#define __predict_false(exp)    (exp)                                                            | 12983     4
   154       |                                                                                                 | 12984     4
   155       |                                                                                                 | 12985     4
   156       |/*                                                                                               | 12986     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 12987     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 12988     4
   159       | *                                                                                               | 12989     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 12990     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 12991     4
   162       | */                                                                                              | 12992     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 12993     4
   164       |#undef __offsetof                                                                                | 12994     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 12995     4
   166       |#endif                                                                                           | 12996     4
   167       |                                                                                                 | 12997     4
   168       |/*                                                                                               | 12998     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 12999     4
   170       | * or scanf-like arguments.                                                                      | 13000     4
   171       | */                                                                                              | 13001     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 13002     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 13003     4
   174       |#define __format_arg(fmtarg)                                                                     | 13004     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 13005     4
   176       |                                                                                                 | 13006     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 13007     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 13008     4
   179       |                                                                                                 | 13009     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 13010     4
   181       |#define __weak_reference(sym,alias)                                                              | 13011     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   257


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 13012     4
   183       |#define __warn_references(sym,msg)                                                               | 13013     4
   184       |                                                                                                 | 13014     4
   185       | /* This places the string into the resulting object.  It should */                              | 13015     4
   186       | /* probably become #pragma ident */                                                             | 13016     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 13017     4
   188       |                                                                                                 | 13018     4
   189       |#ifndef __RCSID                                                                                  | 13019     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 13020     4
   191       |#endif                                                                                           | 13021     4
   192       |                                                                                                 | 13022     4
   193       |/*                                                                                               | 13023     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 13024     4
   195       | * Usage:                                                                                        | 13025     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 13026     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 13027     4
   198       | */                                                                                              | 13028     4
   199       |#ifndef __SYSCID                                                                                 | 13029     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 13030     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 13031     4
   202       |#else                                                                                            | 13032     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 13033     4
   204       |#endif                                                                                           | 13034     4
   205       |#endif                                                                                           | 13035     4
   206       |                                                                                                 | 13036     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 13037     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 13038     4
   209       |#endif                                                                                           | 13039     4
   210       |                                                                                                 | 13040     4
   211       |#ifndef __COPYRIGHT                                                                              | 13041     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 13042     4
   213       |#endif                                                                                           | 13043     4
   214       |                                                                                                 | 13044     4
   215       |                                                                                                 | 13045     4
   216       |#ifndef __DECONST                                                                                | 13046     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 13047     4
   218       |#endif                                                                                           | 13048     4
   219       |                                                                                                 | 13049     4
   220       |#ifndef __DEVOLATILE                                                                             | 13050     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 13051     4
   222       |#endif                                                                                           | 13052     4
   223       |                                                                                                 | 13053     4
   224       |#ifndef __DEQUALIFY                                                                              | 13054     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 13055     4
   226       |#endif                                                                                           | 13056     4
   227       |                                                                                                 | 13057     4
   228       |                                                                                                 | 13058     4
   229       |/*-                                                                                              | 13059     4
   230       | * The following definitions are an extension of the behavior originally                         | 13060     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 13061     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 13062     4
   233       | * header file is included.                                                                      | 13063     4
   234       | *                                                                                               | 13064     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   258


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   235       | * Here's a quick run-down of the versions:                                                      | 13065     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 13066     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 13067     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 13068     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 13069     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 13070     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 13071     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 13072     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 13073     4
   244       | *                                                                                               | 13074     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 13075     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 13076     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 13077     4
   248       | *                                                                                               | 13078     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 13079     4
   250       | */                                                                                              | 13080     4
   251       |                                                                                                 | 13081     4
   252       |/*                                                                                               | 13082     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 13083     4
   254       | * available. Also make them available when requested so.                                        | 13084     4
   255       | */                                                                                              | 13085     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 13086     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 13087     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 13088     4
   259       |#define __DF_VISIBLE    1                                                                        | 13089     4
   260       |#else                                                                                            | 13090     4
   261       |#define __DF_VISIBLE    0                                                                        | 13091     4
   262       |#endif                                                                                           | 13092     4
   263       |                                                                                                 | 13093     4
   264       |/*-                                                                                              | 13094     4
   265       | * The following definitions are an extension of the behavior originally                         | 13095     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 13096     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 13097     4
   268       | * header file is included.                                                                      | 13098     4
   269       | *                                                                                               | 13099     4
   270       | * Here's a quick run-down of the versions:                                                      | 13100     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 13101     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 13102     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 13103     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 13104     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 13105     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 13106     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 13107     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 13108     4
   279       | *                                                                                               | 13109     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 13110     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 13111     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 13112     4
   283       | *                                                                                               | 13113     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 13114     4
   285       | */                                                                                              | 13115     4
   286       |                                                                                                 | 13116     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 13117     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   259


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 13118     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 13119     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 13120     4
   291       |#endif                                                                                           | 13121     4
   292       |                                                                                                 | 13122     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 13123     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 13124     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 13125     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 13126     4
   297       |#endif                                                                                           | 13127     4
   298       |                                                                                                 | 13128     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 13129     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 13130     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 13131     4
   302       |#define __XSI_VISIBLE           700                                                              | 13132     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 13133     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 13134     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 13135     4
   306       |#define __XSI_VISIBLE           600                                                              | 13136     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 13137     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 13138     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 13139     4
   310       |#define __XSI_VISIBLE           500                                                              | 13140     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 13141     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 13142     4
   313       |#endif                                                                                           | 13143     4
   314       |#endif                                                                                           | 13144     4
   315       |                                                                                                 | 13145     4
   316       |/*                                                                                               | 13146     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 13147     4
   318       | * important.                                                                                    | 13148     4
   319       | */                                                                                              | 13149     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 13150     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 13151     4
   322       |#endif                                                                                           | 13152     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 13153     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 13154     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 13155     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 13156     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 13157     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 13158     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 13159     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 13160     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 13161     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 13162     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 13163     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 13164     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 13165     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 13166     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 13167     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 13168     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 13169     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 13170     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   260


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   341       |#define __ISO_C_VISIBLE         1990                                                             | 13171     4
   342       |#else                                                                                            | 13172     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 13173     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 13174     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 13175     4
   346       |#else                                                                                            | 13176     4
   347       |/*-                                                                                              | 13177     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 13178     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 13179     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 13180     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 13181     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 13182     4
   353       | * a test program to print out the values.                                                       | 13183     4
   354       | *                                                                                               | 13184     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 13185     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 13186     4
   357       | * environment (and in fact we will never get here).                                             | 13187     4
   358       | */                                                                                              | 13188     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 13189     4
   360       |#define __POSIX_VISIBLE         0                                                                | 13190     4
   361       |#define __XSI_VISIBLE           0                                                                | 13191     4
   362       |#define __BSD_VISIBLE           0                                                                | 13192     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 13193     4
   364       |#define __EXT1_VISIBLE          0                                                                | 13194     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 13195     4
   366       |#define __POSIX_VISIBLE         0                                                                | 13196     4
   367       |#define __XSI_VISIBLE           0                                                                | 13197     4
   368       |#define __BSD_VISIBLE           0                                                                | 13198     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 13199     4
   370       |#define __EXT1_VISIBLE          0                                                                | 13200     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 13201     4
   372       |#define __POSIX_VISIBLE         0                                                                | 13202     4
   373       |#define __XSI_VISIBLE           0                                                                | 13203     4
   374       |#define __BSD_VISIBLE           0                                                                | 13204     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 13205     4
   376       |#define __EXT1_VISIBLE          0                                                                | 13206     4
   377       |#else                           /* Default environment: show everything. */                      | 13207     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 13208     4
   379       |#define __XSI_VISIBLE           700                                                              | 13209     4
   380       |#define __BSD_VISIBLE           1                                                                | 13210     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 13211     4
   382       |#define __EXT1_VISIBLE          1                                                                | 13212     4
   383       |#endif                                                                                           | 13213     4
   384       |#endif                                                                                           | 13214     4
   385       |                                                                                                 | 13215     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 13216     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 13217     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 13218     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 13219     4
   390       |#define __EXT1_VISIBLE          1                                                                | 13220     4
   391       |#else                                                                                            | 13221     4
   392       |#define __EXT1_VISIBLE          0                                                                | 13222     4
   393       |#endif                                                                                           | 13223     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   261


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 13224     4
   395       |                                                                                                 | 13225     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 13226     4
   397       |#define __NO_TLS 1                                                                               | 13227     4
   398       |#endif                                                                                           | 13228     4
   399       |                                                                                                 | 13229     4
   400       |                                                                                                 | 13230     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 13231     4
   402       |#define __FBSDID(x)                                                                              | 13232     4
   403       |                                                                                                 | 13233     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 13234     4
   405       |#pragma pack(reset)                                                                              | 13235     4
    34       |#include <sys/_types.h>                                                                          | 13236    25
     1       |/* release 2.25.00 */                                                                            | 13237     6
     2       |#pragma pack()                                                                                   | 13238     6
     3       |/*-                                                                                              | 13239     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 13240     6
     5       | * All rights reserved.                                                                          | 13241     6
     6       | *                                                                                               | 13242     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 13243     6
     8       | * modification, are permitted provided that the following conditions                            | 13244     6
     9       | * are met:                                                                                      | 13245     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 13246     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 13247     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13248     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 13249     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 13250     6
    15       | *                                                                                               | 13251     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 13252     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13253     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13254     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 13255     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13256     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13257     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13258     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13259     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13260     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13261     6
    26       | * SUCH DAMAGE.                                                                                  | 13262     6
    27       | *                                                                                               | 13263     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 13264     6
    29       | */                                                                                              | 13265     6
    30       |                                                                                                 | 13266     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 13267     6
    32       |#define _SYS__TYPES_H_                                                                           | 13268     6
    33       |                                                                                                 | 13269     6
    34       |#include <sys/cdefs.h>                                                                           | 13270     6
    35       |#include <machine/_types.h>                                                                      | 13271     6
    36       |                                                                                                 | 13272     6
    37       |/*                                                                                               | 13273     6
    38       | * Standard type definitions.                                                                    | 13274     6
    39       | */                                                                                              | 13275     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 13276     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   262


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 13277     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 13278     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 13279     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 13280     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 13281     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 13282     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 13283     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 13284     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 13285     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 13286     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 13287     6
    52       |typedef int             __nl_item;                                                               | 13288     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 13289     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 13290     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 13291     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 13292     6
    57       |                                        /* signed, because of legacy code */                     | 13293     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 13294     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 13295     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 13296     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 13297     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 13298     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 13299     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 13300     6
    65       |                                                                                                 | 13301     6
    66       |/*                                                                                               | 13302     6
    67       | * Unusual type definitions.                                                                     | 13303     6
    68       | */                                                                                              | 13304     6
    69       |/*                                                                                               | 13305     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 13306     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 13307     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 13308     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 13309     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 13310     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 13311     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 13312     6
    77       | *                                                                                               | 13313     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 13314     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 13315     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 13316     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 13317     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 13318     6
    83       | */                                                                                              | 13319     6
    84       |#ifdef __cplusplus                                                                               | 13320     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 13321     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 13322     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 13323     6
    88       |#else                                                                                            | 13324     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 13325     6
    90       |#endif                                                                                           | 13326     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 13327     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 13328     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 13329     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   263


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    94       |                                                                                                 | 13330     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 13331     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 13332     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 13333     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 13334     6
    99       |#endif                                                                                           | 13335     6
   100       |                                                                                                 | 13336     6
   101       |#if !defined(__cplusplus)                                                                        | 13337     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 13338     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 13339     6
   104       |#endif                                                                                           | 13340     6
   105       |                                                                                                 | 13341     6
   106       |                                                                                                 | 13342     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 13343     6
   108       |                                                                                                 | 13344     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 13345     6
   110       |                                                                                                 | 13346     6
   111       |/*                                                                                               | 13347     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 13348     6
   113       | * stream conversions.                                                                           | 13349     6
   114       | */                                                                                              | 13350     6
   115       |typedef union {                                                                                  | 13351     6
   116       |        char            __mbstate8[128];                                                         | 13352     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 13353     6
   118       |} __mbstate_t;                                                                                   | 13354     6
   119       |                                                                                                 | 13355     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 13356     6
   121       |#pragma pack(reset)                                                                              | 13357     6
    35       |                                                                                                 | 13358    25
    36       |#ifndef _SIZE_T_DECLARED                                                                         | 13359    25
    37       |typedef __size_t        size_t;                                                                  | 13360    25
    38       |#define _SIZE_T_DECLARED                                                                         | 13361    25
    39       |#endif                                                                                           | 13362    25
    40       |                                                                                                 | 13363    25
    41       |__BEGIN_DECLS                                                                                    | 13364    25
    41       +                                                                                                 + 13364    25
    42       |int      bcmp(const void *, const void *, size_t) __pure;       /* LEGACY */                     | 13365    25
    42       +int      bcmp(const void *, const void *, size_t) __attribute__((__pure__));                     + 13365    25
    43       |void     bcopy(const void *, void *, size_t);                   /* LEGACY */                     | 13366    25
    44       |void     bzero(void *, size_t);                                 /* LEGACY */                     | 13367    25
    45       |int      ffs(int) __pure2;                                                                       | 13368    25
    45       +int      ffs(int) __attribute__((__const__));                                                    + 13368    25
    46       |#ifdef __BSD_VISIBLE                                                                             | 13369    25
    47       |int      ffsl(long) __pure2;                                                                     | 13370    25
    47       +int      ffsl(long) __attribute__((__const__));                                                  + 13370    25
    48       |int      ffsll(long long) __pure2;                                                               | 13371    25
    48       +int      ffsll(long long) __attribute__((__const__));                                            + 13371    25
    49       |int      fls(int) __pure2;                                                                       | 13372    25
    49       +int      fls(int) __attribute__((__const__));                                                    + 13372    25
    50       |int      flsl(long) __pure2;                                                                     | 13373    25
    50       +int      flsl(long) __attribute__((__const__));                                                  + 13373    25
    51       |int      flsll(long long) __pure2;                                                               | 13374    25
    51       +int      flsll(long long) __attribute__((__const__));                                            + 13374    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   264


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |#endif                                                                                           | 13375    25
    53       |char    *index(const char *, int) __pure;                       /* LEGACY */                     | 13376    25
    53       +char    *index(const char *, int) __attribute__((__pure__));                                     + 13376    25
    54       |char    *rindex(const char *, int) __pure;                      /* LEGACY */                     | 13377    25
    54       +char    *rindex(const char *, int) __attribute__((__pure__));                                    + 13377    25
    55       |                                                                                                 | 13378    25
    56       |#pragma map (strcasecmp, "STRC@CMP")                                                             | 13379    25
    57       |int      strcasecmp(const char *, const char *) __pure;                                          | 13380    25
    57       +int      strcasecmp(const char *, const char *) __attribute__((__pure__));                       + 13380    25
    58       |#pragma map (strncasecmp, "STRNC@CM")                                                            | 13381    25
    59       |int      strncasecmp(const char *, const char *, size_t) __pure;                                 | 13382    25
    59       +int      strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));              + 13382    25
    60       |__END_DECLS                                                                                      | 13383    25
    60       +                                                                                                 + 13383    25
    61       |                                                                                                 | 13384    25
    62       |#endif /* _STRINGS_H_ */                                                                         | 13385    25
    63       |#pragma pack(reset)                                                                              | 13386    25
    51       |#endif                                                                                           | 13387    24
    52       |                                                                                                 | 13388    24
    53       |#ifndef _SIZE_T_DECLARED                                                                         | 13389    24
    54       |typedef __size_t        size_t;                                                                  | 13390    24
    55       |#define _SIZE_T_DECLARED                                                                         | 13391    24
    56       |#endif                                                                                           | 13392    24
    57       |                                                                                                 | 13393    24
    58       |                                                                                                 | 13394    24
    59       |__BEGIN_DECLS                                                                                    | 13395    24
    59       +                                                                                                 + 13395    24
    60       |                                                                                                 | 13396    24
    61       |/* Compiler-defined builtin's */                                                                 | 13397    24
    62       |                                                                                                 | 13398    24
    63       |#ifdef __cplusplus                                                                               | 13399    24
    64       |extern "builtin" {                                                                               | 13400    24
    65       |#else                                                                                            | 13401    24
    66       |#pragma linkage(__memcpy, builtin)                                                               | 13402    24
    67       |#pragma linkage(__memset, builtin)                                                               | 13403    24
    68       |#pragma linkage(__memcmp, builtin)                                                               | 13404    24
    69       |#pragma linkage(__memchr, builtin)                                                               | 13405    24
    70       |#pragma linkage(__strcpy, builtin)                                                               | 13406    24
    71       |#pragma linkage(__strlen, builtin)                                                               | 13407    24
    72       |#pragma linkage(__strcmp, builtin)                                                               | 13408    24
    73       |#pragma linkage(__strcat, builtin)                                                               | 13409    24
    74       |#pragma linkage(__strchr, builtin)                                                               | 13410    24
    75       |#pragma linkage(__strrchr, builtin)                                                              | 13411    24
    76       |#pragma linkage(__strncat, builtin)                                                              | 13412    24
    77       |#pragma linkage(__strncpy, builtin)                                                              | 13413    24
    78       |#pragma linkage(__strncmp, builtin)                                                              | 13414    24
    79       |#pragma linkage(__strpbrk, builtin)                                                              | 13415    24
    80       |#endif                                                                                           | 13416    24
    81       |                                                                                                 | 13417    24
    82       |void    *__memcpy (void * __restrict, const void * __restrict, size_t);                          | 13418    24
    82       +void    *__memcpy (void * __restrict__, const void * __restrict__, size_t);                      + 13418    24
    83       |void    *__memset (void *, int, size_t);                                                         | 13419    24
    84       |int      __memcmp (const void *, const void *, size_t);                                          | 13420    24
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   265


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    85       |void    *__memchr (const void *, int, size_t);                                                   | 13421    24
    86       |                                                                                                 | 13422    24
    87       |char    *__strcpy (char * __restrict, const char * __restrict);                                  | 13423    24
    87       +char    *__strcpy (char * __restrict__, const char * __restrict__);                              + 13423    24
    88       |size_t   __strlen (const char *);                                                                | 13424    24
    89       |int      __strcmp (const char *, const char *);                                                  | 13425    24
    90       |char    *__strcat (char * __restrict, const char * __restrict);                                  | 13426    24
    90       +char    *__strcat (char * __restrict__, const char * __restrict__);                              + 13426    24
    91       |char    *__strchr (const char *, int);                                                           | 13427    24
    92       |char    *__strrchr (const char *, int);                                                          | 13428    24
    93       |                                                                                                 | 13429    24
    94       |char    *__strncat (char * __restrict, const char * __restrict, size_t);                         | 13430    24
    94       +char    *__strncat (char * __restrict__, const char * __restrict__, size_t);                     + 13430    24
    95       |int      __strncmp (const char *, const char *, size_t);                                         | 13431    24
    96       |char    *__strncpy (char * __restrict, const char * __restrict, size_t);                         | 13432    24
    96       +char    *__strncpy (char * __restrict__, const char * __restrict__, size_t);                     + 13432    24
    97       |char    *__strpbrk (const char *, const char *);                                                 | 13433    24
    98       |#ifdef __cplusplus                                                                               | 13434    24
    99       |}                                                                                                | 13435    24
   100       |#endif                                                                                           | 13436    24
   101       |                                                                                                 | 13437    24
   102       |/* Define the functions that have builtin equivalents, so the */                                 | 13438    24
   103       |/*  builtins will be used when appropriate. */                                                   | 13439    24
   104       |#ifdef __cplusplus                                                                               | 13440    24
   105       |  /* For C++ - define inline functions which invoke the appropriate */                           | 13441    24
   106       |  /*  compiler builtin functions */                                                              | 13442    24
   107       |inline void * memchr (const void *x, int y, size_t z)                                            | 13443    24
   108       |       { return __memchr(x, y, z); }                                                             | 13444    24
   109       |inline void * memcpy (void *x, const void *y, size_t z)                                          | 13445    24
   110       |       { return __memcpy(x, y, z); }                                                             | 13446    24
   111       |inline int    memcmp (const void *x, const void *y, size_t z)                                    | 13447    24
   112       |       { return __memcmp(x, y, z); }                                                             | 13448    24
   113       |inline void * memset (void *x, int y, size_t z)                                                  | 13449    24
   114       |       { return __memset(x, y, z); }                                                             | 13450    24
   115       |                                                                                                 | 13451    24
   116       |inline size_t strlen (const char *x)                                                             | 13452    24
   117       |       { return __strlen(x);       }                                                             | 13453    24
   118       |inline char * strcat (char *x, const char *y)                                                    | 13454    24
   119       |       { return __strcat(x, y);    }                                                             | 13455    24
   120       |inline char * strcpy (char *x, const char *y)                                                    | 13456    24
   121       |       { return __strcpy(x, y);    }                                                             | 13457    24
   122       |inline int    strcmp (const char *x, const char *y)                                              | 13458    24
   123       |       { return __strcmp(x, y);    }                                                             | 13459    24
   124       |inline char * strchr (const char *s, int c)                                                      | 13460    24
   125       |       { return __strchr(s, c);    }                                                             | 13461    24
   126       |inline char * strrchr(const char *s, int c)                                                      | 13462    24
   127       |       { return __strrchr(s, c);   }                                                             | 13463    24
   128       |inline char * strpbrk (const char *s, const char *charset)                                       | 13464    24
   129       |       { return __strpbrk(s, charset); }                                                         | 13465    24
   130       |                                                                                                 | 13466    24
   131       |inline char * strncat (char *s, const char *x, size_t z)                                         | 13467    24
   132       |       { return __strncat(s, x, z); }                                                            | 13468    24
   133       |inline int strncmp (const char *x, const char *y, size_t z)                                      | 13469    24
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   266


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   134       |       { return __strncmp(x, y, z); }                                                            | 13470    24
   135       |inline char * strncpy (char *s, const char *x, size_t z)                                         | 13471    24
   136       |       { return __strncpy(s, x, z); }                                                            | 13472    24
   137       |#else                                                                                            | 13473    24
   138       |                                                                                                 | 13474    24
   139       |void    *memchr(const void *, int, size_t) __pure;                                               | 13475    24
   139       +void    *memchr(const void *, int, size_t) __attribute__((__pure__));                            + 13475    24
   140       |int      memcmp(const void *, const void *, size_t) __pure;                                      | 13476    24
   140       +int      memcmp(const void *, const void *, size_t) __attribute__((__pure__));                   + 13476    24
   141       |void    *memcpy(void * __restrict, const void * __restrict, size_t);                             | 13477    24
   141       +void    *memcpy(void * __restrict__, const void * __restrict__, size_t);                         + 13477    24
   142       |void    *memset(void *, int, size_t);                                                            | 13478    24
   143       |char    *strcat(char * __restrict, const char * __restrict);                                     | 13479    24
   143       +char    *strcat(char * __restrict__, const char * __restrict__);                                 + 13479    24
   144       |char    *strchr(const char *, int) __pure;                                                       | 13480    24
   144       +char    *strchr(const char *, int) __attribute__((__pure__));                                    + 13480    24
   145       |int      strcmp(const char *, const char *) __pure;                                              | 13481    24
   145       +int      strcmp(const char *, const char *) __attribute__((__pure__));                           + 13481    24
   146       |char    *strcpy(char * __restrict, const char * __restrict);                                     | 13482    24
   146       +char    *strcpy(char * __restrict__, const char * __restrict__);                                 + 13482    24
   147       |size_t   strlen(const char *) __pure;                                                            | 13483    24
   147       +size_t   strlen(const char *) __attribute__((__pure__));                                         + 13483    24
   148       |char    *strncat(char * __restrict, const char * __restrict, size_t);                            | 13484    24
   148       +char    *strncat(char * __restrict__, const char * __restrict__, size_t);                        + 13484    24
   149       |int      strncmp(const char *, const char *, size_t) __pure;                                     | 13485    24
   149       +int      strncmp(const char *, const char *, size_t) __attribute__((__pure__));                  + 13485    24
   150       |char    *strncpy(char * __restrict, const char * __restrict, size_t);                            | 13486    24
   150       +char    *strncpy(char * __restrict__, const char * __restrict__, size_t);                        + 13486    24
   151       |char    *strpbrk(const char *, const char *) __pure;                                             | 13487    24
   151       +char    *strpbrk(const char *, const char *) __attribute__((__pure__));                          + 13487    24
   152       |char    *strrchr(const char *, int) __pure;                                                      | 13488    24
   152       +char    *strrchr(const char *, int) __attribute__((__pure__));                                   + 13488    24
   153       |                                                                                                 | 13489    24
   154       |                                                                                                 | 13490    24
   155       | /* For `C' - use #define macros to handle this */                                               | 13491    24
   156       |#define memset(a,b,c) __memset(a,b,c)                                                            | 13492    24
   157       |#define memcpy(a,b,c) __memcpy(a,b,c)                                                            | 13493    24
   158       |#define memchr(a,b,c) __memchr(a,b,c)                                                            | 13494    24
   159       |#define memcmp(a,b,c) __memcmp(a,b,c)                                                            | 13495    24
   160       |                                                                                                 | 13496    24
   161       |#define strlen(a)     __strlen(a)                                                                | 13497    24
   162       |#define strcat(a,b)   __strcat(a,b)                                                              | 13498    24
   163       |#define strcpy(a,b)   __strcpy(a,b)                                                              | 13499    24
   164       |#define strcmp(a,b)   __strcmp(a,b)                                                              | 13500    24
   165       |#define strchr(a,b)   __strchr(a,b)                                                              | 13501    24
   166       |#define strrchr(a,b)  __strrchr(a,b)                                                             | 13502    24
   167       |#define strpbrk(a,b)  __strpbrk(a,b)                                                             | 13503    24
   168       |                                                                                                 | 13504    24
   169       |#define strncat(a,b,c) __strncat(a,b,c)                                                          | 13505    24
   170       |#define strncmp(a,b,c) __strncmp(a,b,c)                                                          | 13506    24
   171       |#define strncpy(a,b,c) __strncpy(a,b,c)                                                          | 13507    24
   172       |#endif                                                                                           | 13508    24
   173       |                                                                                                 | 13509    24
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   267


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   174       |#if __BSD_VISIBLE                                                                                | 13510    24
   175       |#pragma map(strchrnul,"STRCHR@L")                                                                | 13511    24
   175       +#pragma map ( strchrnul , "STRCHR@L" )                                                           + 13511    24
   176       |char    *strchrnul(const char*, int) __pure;                                                     | 13512    24
   176       +char    *strchrnul(const char*, int) __attribute__((__pure__));                                  + 13512    24
   177       |#endif                                                                                           | 13513    24
   178       |                                                                                                 | 13514    24
   179       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 13515    24
   180       |void    *memccpy(void * __restrict, const void * __restrict, int, size_t);                       | 13516    24
   180       +void    *memccpy(void * __restrict__, const void * __restrict__, int, size_t);                   + 13516    24
   181       |#endif                                                                                           | 13517    24
   182       |#if __BSD_VISIBLE                                                                                | 13518    24
   183       |void    *memmem(const void *, size_t, const void *, size_t);                                     | 13519    24
   183       +void    *memmem(const void *, size_t, const void *, size_t);                                     + 13519    24
   184       |#endif                                                                                           | 13520    24
   185       |void    *memmove(void *, const void *, size_t);                                                  | 13521    24
   186       |#if __BSD_VISIBLE                                                                                | 13522    24
   187       |char    *stpcpy(char *, const char *);                                                           | 13523    24
   187       +char    *stpcpy(char *, const char *);                                                           + 13523    24
   188       |#pragma map(strcasestr, "STRC@STR")                                                              | 13524    24
   189       |char    *strcasestr(const char *, const char *) __pure;                                          | 13525    24
   189       +char    *strcasestr(const char *, const char *) __attribute__((__pure__));                       + 13525    24
   190       |#endif                                                                                           | 13526    24
   191       |int      strcoll(const char *, const char *);                                                    | 13527    24
   192       |size_t   strcspn(const char *, const char *) __pure;                                             | 13528    24
   192       +size_t   strcspn(const char *, const char *) __attribute__((__pure__));                          + 13528    24
   193       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 13529    24
   194       |char    *strdup(const char *);                                                                   | 13530    24
   194       +char    *strdup(const char *);                                                                   + 13530    24
   195       |#endif                                                                                           | 13531    24
   196       |char    *strerror(int);                                                                          | 13532    24
   197       |#if __POSIX_VISIBLE >= 200112                                                                    | 13533    24
   198       |#pragma map(strerror_r, "STRERR@R")                                                              | 13534    24
   198       +#pragma map ( strerror_r , "STRERR@R" )                                                          + 13534    24
   199       |int      strerror_r(int, char *, size_t);                                                        | 13535    24
   200       |#endif                                                                                           | 13536    24
   201       |#if __BSD_VISIBLE                                                                                | 13537    24
   202       |size_t   strlcat(char *, const char *, size_t);                                                  | 13538    24
   202       +size_t   strlcat(char *, const char *, size_t);                                                  + 13538    24
   203       |size_t   strlcpy(char *, const char *, size_t);                                                  | 13539    24
   204       |#endif                                                                                           | 13540    24
   205       |#if __BSD_VISIBLE                                                                                | 13541    24
   206       |void     strmode(int, char *);                                                                   | 13542    24
   206       +void     strmode(int, char *);                                                                   + 13542    24
   207       |#endif                                                                                           | 13543    24
   208       |#if __BSD_VISIBLE                                                                                | 13544    24
   209       |char    *strnstr(const char *, const char *, size_t) __pure;                                     | 13545    24
   209       +char    *strnstr(const char *, const char *, size_t) __attribute__((__pure__));                  + 13545    24
   210       |#endif                                                                                           | 13546    24
   211       |                                                                                                 | 13547    24
   212       |#if __BSD_VISIBLE                                                                                | 13548    24
   213       |char    *strsep(char **, const char *);                                                          | 13549    24
   213       +char    *strsep(char **, const char *);                                                          + 13549    24
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   268


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   214       |char    *strsignal(int);                                                                         | 13550    24
   215       |#endif                                                                                           | 13551    24
   216       |size_t   strspn(const char *, const char *) __pure;                                              | 13552    24
   216       +size_t   strspn(const char *, const char *) __attribute__((__pure__));                           + 13552    24
   217       |char    *strstr(const char *, const char *) __pure;                                              | 13553    24
   217       +char    *strstr(const char *, const char *) __attribute__((__pure__));                           + 13553    24
   218       |char    *strtok(char * __restrict, const char * __restrict);                                     | 13554    24
   218       +char    *strtok(char * __restrict__, const char * __restrict__);                                 + 13554    24
   219       |#if __POSIX_VISIBLE >= 199506 || __XSI_VISIBLE >= 500                                            | 13555    24
   220       |char    *strtok_r(char *, const char *, char **);                                                | 13556    24
   220       +char    *strtok_r(char *, const char *, char **);                                                + 13556    24
   221       |#pragma map(strtok_r,"STRTOK@R")                                                                 | 13557    24
   222       |#endif                                                                                           | 13558    24
   223       |size_t   strxfrm(char * __restrict, const char * __restrict, size_t);                            | 13559    24
   223       +size_t   strxfrm(char * __restrict__, const char * __restrict__, size_t);                        + 13559    24
   224       |                                                                                                 | 13560    24
   225       |                                                                                                 | 13561    24
   226       |                                                                                                 | 13562    24
   227       |#if __BSD_VISIBLE                                                                                | 13563    24
   228       |                                                                                                 | 13564    24
   228       +                                                                                                 + 13564    24
   229       |#ifndef _SWAB_DECLARED                                                                           | 13565    24
   230       |#define _SWAB_DECLARED                                                                           | 13566    24
   231       |                                                                                                 | 13567    24
   232       |#ifndef _SSIZE_T_DECLARED                                                                        | 13568    24
   233       |typedef __ssize_t       ssize_t;                                                                 | 13569    24
   234       |#define _SSIZE_T_DECLARED                                                                        | 13570    24
   235       |#endif /* _SIZE_T_DECLARED */                                                                    | 13571    24
   236       |                                                                                                 | 13572    24
   237       |void     swab(const void * __restrict, void * __restrict, ssize_t);                              | 13573    24
   238       |#endif /* _SWAB_DECLARED */                                                                      | 13574    24
   239       |                                                                                                 | 13575    24
   240       |#endif /* __BSD_VISIBLE */                                                                       | 13576    24
   241       |                                                                                                 | 13577    24
   242       |__END_DECLS                                                                                      | 13578    24
   242       +                                                                                                 + 13578    24
   243       |                                                                                                 | 13579    24
   244       |#endif /* _STRING_H_ */                                                                          | 13580    24
   245       |#pragma pack(reset)                                                                              | 13581    24
   211       |#define MEM_INIT(p,v,s)   memset((p),(v),(s))                                                    | 13582    23
   212       |                                                                                                 | 13583    23
   213       |                                                                                                 | 13584    23
   214       |/*-************************************                                                          | 13585    23
   215       |*  Common Constants                                                                              | 13586    23
   216       |**************************************/                                                          | 13587    23
   217       |#define MINMATCH 4                                                                               | 13588    23
   218       |                                                                                                 | 13589    23
   219       |#define WILDCOPYLENGTH 8                                                                         | 13590    23
   220       |#define LASTLITERALS   5   /* see ../doc/lz4_Block_format.md#parsing-restrictions */             | 13591    23
   221       |#define MFLIMIT       12   /* see ../doc/lz4_Block_format.md#parsing-restrictions */             | 13592    23
   222       |#define MATCH_SAFEGUARD_DISTANCE  ((2*WILDCOPYLENGTH) - MINMATCH)   /* ensure it's possible to wr| 13593    23
   222       +ite 2 x wildcopyLength without overflowing output buffer */                                      + 13593    23
   223       |#define FASTLOOP_SAFE_DISTANCE 64                                                                | 13594    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   269


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   224       |static const int LZ4_minLength = (MFLIMIT+1);                                                    | 13595    23
   224       +static const int LZ4_minLength = (12+1);                                                         + 13595    23
   225       |                                                                                                 | 13596    23
   226       |#define KB *(1 <<10)                                                                             | 13597    23
   227       |#define MB *(1 <<20)                                                                             | 13598    23
   228       |#define GB *(1U<<30)                                                                             | 13599    23
   229       |                                                                                                 | 13600    23
   230       |#define LZ4_DISTANCE_ABSOLUTE_MAX 65535                                                          | 13601    23
   231       |#if (LZ4_DISTANCE_MAX > LZ4_DISTANCE_ABSOLUTE_MAX)   /* max supported by LZ4 format */           | 13602    23
   232       |#  error "LZ4_DISTANCE_MAX is too big : must be <= 65535"                                        | 13603    23
   233       |#endif                                                                                           | 13604    23
   234       |                                                                                                 | 13605    23
   234       +                                                                                                 + 13605    23
   235       |#define ML_BITS  4                                                                               | 13606    23
   236       |#define ML_MASK  ((1U<<ML_BITS)-1)                                                               | 13607    23
   237       |#define RUN_BITS (8-ML_BITS)                                                                     | 13608    23
   238       |#define RUN_MASK ((1U<<RUN_BITS)-1)                                                              | 13609    23
   239       |                                                                                                 | 13610    23
   240       |                                                                                                 | 13611    23
   241       |/*-************************************                                                          | 13612    23
   242       |*  Error detection                                                                               | 13613    23
   243       |**************************************/                                                          | 13614    23
   244       |#if defined(LZ4_DEBUG) && (LZ4_DEBUG>=1)                                                         | 13615    23
   245       |#  include <assert.h>                                                                            | 13616    23
   246       |#else                                                                                            | 13617    23
   247       |#  ifndef assert                                                                                 | 13618    23
   248       |#    define assert(condition) ((void)0)                                                          | 13619    23
   249       |#  endif                                                                                         | 13620    23
   250       |#endif                                                                                           | 13621    23
   251       |                                                                                                 | 13622    23
   252       |#define LZ4_STATIC_ASSERT(c)   { enum { LZ4_static_assert = 1/(int)(!!(c)) }; }   /* use after va| 13623    23
   252       +riable declarations */                                                                           + 13623    23
   253       |                                                                                                 | 13624    23
   254       |#if defined(LZ4_DEBUG) && (LZ4_DEBUG>=2)                                                         | 13625    23
   255       |#  include <stdio.h>                                                                             | 13626    23
   256       |   static int g_debuglog_enable = 1;                                                             | 13627    23
   257       |#  define DEBUGLOG(l, ...) {                          \                                          | 13628    23
   258       |        if ((g_debuglog_enable) && (l<=LZ4_DEBUG)) {  \                                          | 13629    23
   259       |            fprintf(stderr, __FILE__ ": ");           \                                          | 13630    23
   260       |            fprintf(stderr, __VA_ARGS__);             \                                          | 13631    23
   261       |            fprintf(stderr, " \n");                   \                                          | 13632    23
   262       |    }   }                                                                                        | 13633    23
   263       |#else                                                                                            | 13634    23
   264       |#  define DEBUGLOG(l, ...) {}    /* disabled */                                                  | 13635    23
   265       |#endif                                                                                           | 13636    23
   266       |                                                                                                 | 13637    23
   267       |static int LZ4_isAligned(const void* ptr, size_t alignment)                                      | 13638    23
   268       |{                                                                                                | 13639    23
   269       |    return ((size_t)ptr & (alignment -1)) == 0;                                                  | 13640    23
   270       |}                                                                                                | 13641    23
   271       |                                                                                                 | 13642    23
   272       |                                                                                                 | 13643    23
   273       |/*-************************************                                                          | 13644    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   270


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   274       |*  Types                                                                                         | 13645    23
   275       |**************************************/                                                          | 13646    23
   276       |#include <limits.h>                                                                              | 13647    23
     1       |/* release 2.25.00 */                                                                            | 13648    26
     2       |#pragma pack()                                                                                   | 13649    26
     3       |/*-                                                                                              | 13650    26
     4       | * Copyright (c) 1988, 1993                                                                      | 13651    26
     5       | *      The Regents of the University of California.  All rights reserved.                       | 13652    26
     6       | *                                                                                               | 13653    26
     7       | * Redistribution and use in source and binary forms, with or without                            | 13654    26
     8       | * modification, are permitted provided that the following conditions                            | 13655    26
     9       | * are met:                                                                                      | 13656    26
    10       | * 1. Redistributions of source code must retain the above copyright                             | 13657    26
    11       | *    notice, this list of conditions and the following disclaimer.                              | 13658    26
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13659    26
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 13660    26
    14       | *    documentation and/or other materials provided with the distribution.                       | 13661    26
    15       | * 3. All advertising materials mentioning features or use of this software                      | 13662    26
    16       | *    must display the following acknowledgement:                                                | 13663    26
    17       | *      This product includes software developed by the University of                            | 13664    26
    18       | *      California, Berkeley and its contributors.                                               | 13665    26
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 13666    26
    20       | *    may be used to endorse or promote products derived from this software                      | 13667    26
    21       | *    without specific prior written permission.                                                 | 13668    26
    22       | *                                                                                               | 13669    26
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 13670    26
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13671    26
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13672    26
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 13673    26
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13674    26
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13675    26
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13676    26
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13677    26
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13678    26
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13679    26
    33       | * SUCH DAMAGE.                                                                                  | 13680    26
    34       | *                                                                                               | 13681    26
    35       | *      @(#)limits.h    8.2 (Berkeley) 1/4/94                                                    | 13682    26
    36       | */                                                                                              | 13683    26
    37       |                                                                                                 | 13684    26
    38       |#ifndef _LIMITS_H_                                                                               | 13685    26
    39       |#define _LIMITS_H_                                                                               | 13686    26
    40       |                                                                                                 | 13687    26
    41       |#include <sys/cdefs.h>                                                                           | 13688    26
     1       |/* release 2.25.00 */                                                                            | 13689     4
     2       |#pragma pack()                                                                                   | 13690     4
     3       |/*                                                                                               | 13691     4
     4       | * Copyright (c) 1991, 1993                                                                      | 13692     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 13693     4
     6       | *                                                                                               | 13694     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 13695     4
     8       | * Berkeley Software Design, Inc.                                                                | 13696     4
     9       | *                                                                                               | 13697     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   271


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    10       | * Redistribution and use in source and binary forms, with or without                            | 13698     4
    11       | * modification, are permitted provided that the following conditions                            | 13699     4
    12       | * are met:                                                                                      | 13700     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 13701     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 13702     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13703     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 13704     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 13705     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 13706     4
    19       | *    must display the following acknowledgement:                                                | 13707     4
    20       | *      This product includes software developed by the University of                            | 13708     4
    21       | *      California, Berkeley and its contributors.                                               | 13709     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 13710     4
    23       | *    may be used to endorse or promote products derived from this software                      | 13711     4
    24       | *    without specific prior written permission.                                                 | 13712     4
    25       | *                                                                                               | 13713     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 13714     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13715     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13716     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 13717     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13718     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13719     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13720     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13721     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13722     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13723     4
    36       | * SUCH DAMAGE.                                                                                  | 13724     4
    37       | *                                                                                               | 13725     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 13726     4
    39       | */                                                                                              | 13727     4
    40       |                                                                                                 | 13728     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 13729     4
    42       |#define _SYS_CDEFS_H_                                                                            | 13730     4
    43       |                                                                                                 | 13731     4
    44       |#if defined(__cplusplus)                                                                         | 13732     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 13733     4
    46       |#define __END_DECLS     }                                                                        | 13734     4
    47       |#else                                                                                            | 13735     4
    48       |#define __BEGIN_DECLS                                                                            | 13736     4
    49       |#define __END_DECLS                                                                              | 13737     4
    50       |#endif                                                                                           | 13738     4
    51       |                                                                                                 | 13739     4
    52       |/*                                                                                               | 13740     4
    53       | * This code has been put in place to help reduce the addition of                                | 13741     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 13742     4
    55       | * having a compiler-agnostic source tree.                                                       | 13743     4
    56       | */                                                                                              | 13744     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 13745     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 13746     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 13747     4
    60       |                                                                                                 | 13748     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 13749     4
    62       |                                                                                                 | 13750     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   272


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    63       |                                                                                                 | 13751     4
    64       |/*                                                                                               | 13752     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 13753     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 13754     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 13755     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 13756     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 13757     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 13758     4
    71       | * this only works with ANSI C.                                                                  | 13759     4
    72       | *                                                                                               | 13760     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 13761     4
    74       | * first.  It is only available with ANSI C.                                                     | 13762     4
    75       | */                                                                                              | 13763     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 13764     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 13765     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 13766     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 13767     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 13768     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 13769     4
    82       |                                                                                                 | 13770     4
    83       |#define __const         const           /* define reserved names to standard */                  | 13771     4
    84       |#define __signed        signed                                                                   | 13772     4
    85       |#define __volatile      volatile                                                                 | 13773     4
    86       |#if defined(__cplusplus)                                                                         | 13774     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 13775     4
    88       |#else                                                                                            | 13776     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 13777     4
    90       |#endif /* !__cplusplus */                                                                        | 13778     4
    91       |                                                                                                 | 13779     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 13780     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 13781     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 13782     4
    95       |#define __STRING(x)     "x"                                                                      | 13783     4
    96       |                                                                                                 | 13784     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 13785     4
    98       |#define __inline                                                                                 | 13786     4
    99       |#define __signed                                                                                 | 13787     4
   100       |#define __volatile                                                                               | 13788     4
   101       |/*                                                                                               | 13789     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 13790     4
   103       | * deleted from the program and old programs will want them left alone.                          | 13791     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 13792     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 13793     4
   106       | */                                                                                              | 13794     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 13795     4
   108       |#define const                           /* delete ANSI C keywords */                             | 13796     4
   109       |#define inline                                                                                   | 13797     4
   110       |#define signed                                                                                   | 13798     4
   111       |#define volatile                                                                                 | 13799     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 13800     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 13801     4
   114       |                                                                                                 | 13802     4
   115       |/*                                                                                               | 13803     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   273


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 13804     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 13805     4
   118       | */                                                                                              | 13806     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 13807     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 13808     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 13809     4
   122       |#define __unused                                                                                 | 13810     4
   123       |#define __aligned(x)                                                                             | 13811     4
   124       |#define __section(x)                                                                             | 13812     4
   125       |#define __nonnull(x)                                                                             | 13813     4
   126       |#define __used                                                                                   | 13814     4
   127       |                                                                                                 | 13815     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 13816     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 13817     4
   130       |                                                                                                 | 13818     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 13819     4
   132       |#define __func__  NULL                                                                           | 13820     4
   133       |#endif                                                                                           | 13821     4
   134       |                                                                                                 | 13822     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 13823     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 13824     4
   137       |#endif                                                                                           | 13825     4
   138       |                                                                                                 | 13826     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 13827     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 13828     4
   141       | **/                                                                                             | 13829     4
   142       |#ifndef __cplusplus                                                                              | 13830     4
   143       |#define __restrict __restrict__                                                                  | 13831     4
   144       |#else                                                                                            | 13832     4
   145       |/* Systems/C++ does not */                                                                       | 13833     4
   146       |#define __restrict                                                                               | 13834     4
   147       |#endif                                                                                           | 13835     4
   148       |                                                                                                 | 13836     4
   149       |/*                                                                                               | 13837     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 13838     4
   151       | */                                                                                              | 13839     4
   152       |#define __predict_true(exp)     (exp)                                                            | 13840     4
   153       |#define __predict_false(exp)    (exp)                                                            | 13841     4
   154       |                                                                                                 | 13842     4
   155       |                                                                                                 | 13843     4
   156       |/*                                                                                               | 13844     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 13845     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 13846     4
   159       | *                                                                                               | 13847     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 13848     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 13849     4
   162       | */                                                                                              | 13850     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 13851     4
   164       |#undef __offsetof                                                                                | 13852     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 13853     4
   166       |#endif                                                                                           | 13854     4
   167       |                                                                                                 | 13855     4
   168       |/*                                                                                               | 13856     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   274


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 13857     4
   170       | * or scanf-like arguments.                                                                      | 13858     4
   171       | */                                                                                              | 13859     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 13860     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 13861     4
   174       |#define __format_arg(fmtarg)                                                                     | 13862     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 13863     4
   176       |                                                                                                 | 13864     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 13865     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 13866     4
   179       |                                                                                                 | 13867     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 13868     4
   181       |#define __weak_reference(sym,alias)                                                              | 13869     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 13870     4
   183       |#define __warn_references(sym,msg)                                                               | 13871     4
   184       |                                                                                                 | 13872     4
   185       | /* This places the string into the resulting object.  It should */                              | 13873     4
   186       | /* probably become #pragma ident */                                                             | 13874     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 13875     4
   188       |                                                                                                 | 13876     4
   189       |#ifndef __RCSID                                                                                  | 13877     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 13878     4
   191       |#endif                                                                                           | 13879     4
   192       |                                                                                                 | 13880     4
   193       |/*                                                                                               | 13881     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 13882     4
   195       | * Usage:                                                                                        | 13883     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 13884     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 13885     4
   198       | */                                                                                              | 13886     4
   199       |#ifndef __SYSCID                                                                                 | 13887     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 13888     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 13889     4
   202       |#else                                                                                            | 13890     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 13891     4
   204       |#endif                                                                                           | 13892     4
   205       |#endif                                                                                           | 13893     4
   206       |                                                                                                 | 13894     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 13895     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 13896     4
   209       |#endif                                                                                           | 13897     4
   210       |                                                                                                 | 13898     4
   211       |#ifndef __COPYRIGHT                                                                              | 13899     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 13900     4
   213       |#endif                                                                                           | 13901     4
   214       |                                                                                                 | 13902     4
   215       |                                                                                                 | 13903     4
   216       |#ifndef __DECONST                                                                                | 13904     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 13905     4
   218       |#endif                                                                                           | 13906     4
   219       |                                                                                                 | 13907     4
   220       |#ifndef __DEVOLATILE                                                                             | 13908     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 13909     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   275


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   222       |#endif                                                                                           | 13910     4
   223       |                                                                                                 | 13911     4
   224       |#ifndef __DEQUALIFY                                                                              | 13912     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 13913     4
   226       |#endif                                                                                           | 13914     4
   227       |                                                                                                 | 13915     4
   228       |                                                                                                 | 13916     4
   229       |/*-                                                                                              | 13917     4
   230       | * The following definitions are an extension of the behavior originally                         | 13918     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 13919     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 13920     4
   233       | * header file is included.                                                                      | 13921     4
   234       | *                                                                                               | 13922     4
   235       | * Here's a quick run-down of the versions:                                                      | 13923     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 13924     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 13925     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 13926     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 13927     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 13928     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 13929     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 13930     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 13931     4
   244       | *                                                                                               | 13932     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 13933     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 13934     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 13935     4
   248       | *                                                                                               | 13936     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 13937     4
   250       | */                                                                                              | 13938     4
   251       |                                                                                                 | 13939     4
   252       |/*                                                                                               | 13940     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 13941     4
   254       | * available. Also make them available when requested so.                                        | 13942     4
   255       | */                                                                                              | 13943     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 13944     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 13945     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 13946     4
   259       |#define __DF_VISIBLE    1                                                                        | 13947     4
   260       |#else                                                                                            | 13948     4
   261       |#define __DF_VISIBLE    0                                                                        | 13949     4
   262       |#endif                                                                                           | 13950     4
   263       |                                                                                                 | 13951     4
   264       |/*-                                                                                              | 13952     4
   265       | * The following definitions are an extension of the behavior originally                         | 13953     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 13954     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 13955     4
   268       | * header file is included.                                                                      | 13956     4
   269       | *                                                                                               | 13957     4
   270       | * Here's a quick run-down of the versions:                                                      | 13958     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 13959     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 13960     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 13961     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 13962     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   276


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 13963     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 13964     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 13965     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 13966     4
   279       | *                                                                                               | 13967     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 13968     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 13969     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 13970     4
   283       | *                                                                                               | 13971     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 13972     4
   285       | */                                                                                              | 13973     4
   286       |                                                                                                 | 13974     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 13975     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 13976     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 13977     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 13978     4
   291       |#endif                                                                                           | 13979     4
   292       |                                                                                                 | 13980     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 13981     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 13982     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 13983     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 13984     4
   297       |#endif                                                                                           | 13985     4
   298       |                                                                                                 | 13986     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 13987     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 13988     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 13989     4
   302       |#define __XSI_VISIBLE           700                                                              | 13990     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 13991     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 13992     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 13993     4
   306       |#define __XSI_VISIBLE           600                                                              | 13994     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 13995     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 13996     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 13997     4
   310       |#define __XSI_VISIBLE           500                                                              | 13998     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 13999     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 14000     4
   313       |#endif                                                                                           | 14001     4
   314       |#endif                                                                                           | 14002     4
   315       |                                                                                                 | 14003     4
   316       |/*                                                                                               | 14004     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 14005     4
   318       | * important.                                                                                    | 14006     4
   319       | */                                                                                              | 14007     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 14008     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 14009     4
   322       |#endif                                                                                           | 14010     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 14011     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 14012     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 14013     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 14014     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 14015     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   277


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   328       |#define __POSIX_VISIBLE         200112                                                           | 14016     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 14017     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 14018     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 14019     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 14020     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 14021     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 14022     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 14023     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 14024     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 14025     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 14026     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 14027     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 14028     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 14029     4
   342       |#else                                                                                            | 14030     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 14031     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 14032     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 14033     4
   346       |#else                                                                                            | 14034     4
   347       |/*-                                                                                              | 14035     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 14036     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 14037     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 14038     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 14039     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 14040     4
   353       | * a test program to print out the values.                                                       | 14041     4
   354       | *                                                                                               | 14042     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 14043     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 14044     4
   357       | * environment (and in fact we will never get here).                                             | 14045     4
   358       | */                                                                                              | 14046     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 14047     4
   360       |#define __POSIX_VISIBLE         0                                                                | 14048     4
   361       |#define __XSI_VISIBLE           0                                                                | 14049     4
   362       |#define __BSD_VISIBLE           0                                                                | 14050     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 14051     4
   364       |#define __EXT1_VISIBLE          0                                                                | 14052     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 14053     4
   366       |#define __POSIX_VISIBLE         0                                                                | 14054     4
   367       |#define __XSI_VISIBLE           0                                                                | 14055     4
   368       |#define __BSD_VISIBLE           0                                                                | 14056     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 14057     4
   370       |#define __EXT1_VISIBLE          0                                                                | 14058     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 14059     4
   372       |#define __POSIX_VISIBLE         0                                                                | 14060     4
   373       |#define __XSI_VISIBLE           0                                                                | 14061     4
   374       |#define __BSD_VISIBLE           0                                                                | 14062     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 14063     4
   376       |#define __EXT1_VISIBLE          0                                                                | 14064     4
   377       |#else                           /* Default environment: show everything. */                      | 14065     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 14066     4
   379       |#define __XSI_VISIBLE           700                                                              | 14067     4
   380       |#define __BSD_VISIBLE           1                                                                | 14068     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   278


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   381       |#define __ISO_C_VISIBLE         2011                                                             | 14069     4
   382       |#define __EXT1_VISIBLE          1                                                                | 14070     4
   383       |#endif                                                                                           | 14071     4
   384       |#endif                                                                                           | 14072     4
   385       |                                                                                                 | 14073     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 14074     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 14075     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 14076     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 14077     4
   390       |#define __EXT1_VISIBLE          1                                                                | 14078     4
   391       |#else                                                                                            | 14079     4
   392       |#define __EXT1_VISIBLE          0                                                                | 14080     4
   393       |#endif                                                                                           | 14081     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 14082     4
   395       |                                                                                                 | 14083     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 14084     4
   397       |#define __NO_TLS 1                                                                               | 14085     4
   398       |#endif                                                                                           | 14086     4
   399       |                                                                                                 | 14087     4
   400       |                                                                                                 | 14088     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 14089     4
   402       |#define __FBSDID(x)                                                                              | 14090     4
   403       |                                                                                                 | 14091     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 14092     4
   405       |#pragma pack(reset)                                                                              | 14093     4
    42       |                                                                                                 | 14094    26
    43       |#if __POSIX_VISIBLE                                                                              | 14095    26
    44       |#define _POSIX_ARG_MAX          4096                                                             | 14096    26
    45       |#define _POSIX_CHILD_MAX        25                                                               | 14097    26
    46       |#define _POSIX_LINK_MAX         8                                                                | 14098    26
    47       |#define _POSIX_MAX_CANON        255                                                              | 14099    26
    48       |#define _POSIX_MAX_INPUT        255                                                              | 14100    26
    49       |#define _POSIX_NAME_MAX         14                                                               | 14101    26
    50       |#define _POSIX_NGROUPS_MAX      8                                                                | 14102    26
    51       |#define _POSIX_OPEN_MAX         20                                                               | 14103    26
    52       |#define _POSIX_PATH_MAX         256                                                              | 14104    26
    53       |#define _POSIX_PIPE_BUF         512                                                              | 14105    26
    54       |#define _POSIX_SSIZE_MAX        32767                                                            | 14106    26
    55       |#define _POSIX_STREAM_MAX       8                                                                | 14107    26
    56       |#define _POSIX_TZNAME_MAX       6                                                                | 14108    26
    57       |                                                                                                 | 14109    26
    57       +                                                                                                 + 14109    26
    58       |#define BC_BASE_MAX                99   /* max ibase/obase values in bc(1) */                    | 14110    26
    59       |#define BC_DIM_MAX               2048   /* max array elements in bc(1) */                        | 14111    26
    60       |#define BC_SCALE_MAX               99   /* max scale value in bc(1) */                           | 14112    26
    61       |#define BC_STRING_MAX            1000   /* max const string length in bc(1) */                   | 14113    26
    62       |#define COLL_WEIGHTS_MAX            0   /* max weights for order keyword */                      | 14114    26
    63       |#define EXPR_NEST_MAX              32   /* max expressions nested in expr(1) */                  | 14115    26
    64       |#define LINE_MAX                 2048   /* max bytes in an input line */                         | 14116    26
    65       |#define RE_DUP_MAX                255   /* max RE's in interval notation */                      | 14117    26
    66       |                                                                                                 | 14118    26
    67       |#define _POSIX2_BC_BASE_MAX     99                                                               | 14119    26
    68       |#define _POSIX2_BC_DIM_MAX      2048                                                             | 14120    26
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   279


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    69       |#define _POSIX2_BC_SCALE_MAX    99                                                               | 14121    26
    70       |#define _POSIX2_BC_STRING_MAX   1000                                                             | 14122    26
    71       |#define _POSIX2_EQUIV_CLASS_MAX 2                                                                | 14123    26
    72       |#define _POSIX2_EXPR_NEST_MAX   32                                                               | 14124    26
    73       |#define _POSIX2_LINE_MAX        2048                                                             | 14125    26
    74       |#define _POSIX2_RE_DUP_MAX      255                                                              | 14126    26
    75       |#endif                                                                                           | 14127    26
    76       |                                                                                                 | 14128    26
    77       |#if __POSIX_VISIBLE >= 199309                                                                    | 14129    26
    78       |#define _POSIX_AIO_LISTIO_MAX   16                                                               | 14130    26
    79       |#define _POSIX_AIO_MAX          1                                                                | 14131    26
    80       |#define _POSIX_DELAYTIMER_MAX   32                                                               | 14132    26
    81       |#define _POSIX_MQ_OPEN_MAX      8                                                                | 14133    26
    82       |#define _POSIX_MQ_PRIO_MAX      32                                                               | 14134    26
    83       |#define _POSIX_RTSIG_MAX        8                                                                | 14135    26
    84       |#define _POSIX_SEM_NSEMS_MAX    256                                                              | 14136    26
    85       |#define _POSIX_SEM_VALUE_MAX    32767                                                            | 14137    26
    86       |#define _POSIX_SIGQUEUE_MAX     32                                                               | 14138    26
    87       |#define _POSIX_TIMER_MAX        32                                                               | 14139    26
    88       |#endif                                                                                           | 14140    26
    89       |                                                                                                 | 14141    26
    89       +                                                                                                 + 14141    26
    90       |#if __POSIX_VISIBLE >= 199506                                                                    | 14142    26
    91       |#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4                                                    | 14143    26
    92       |#define _POSIX_THREAD_KEYS_MAX  128                                                              | 14144    26
    93       |#define _POSIX_THREAD_THREADS_MAX 64                                                             | 14145    26
    94       |#endif                                                                                           | 14146    26
    95       |                                                                                                 | 14147    26
    95       +                                                                                                 + 14147    26
    96       |#if __POSIX_VISIBLE >= 200112                                                                    | 14148    26
    97       |#define _POSIX_HOST_NAME_MAX    255                                                              | 14149    26
    98       |#define _POSIX_LOGIN_NAME_MAX   9                                                                | 14150    26
    99       |#define _POSIX_SS_REPL_MAX      4                                                                | 14151    26
   100       |#define _POSIX_SYMLINK_MAX      255                                                              | 14152    26
   101       |#define _POSIX_SYMLOOP_MAX      8                                                                | 14153    26
   102       |#define _POSIX_TRACE_EVENT_NAME_MAX 30                                                           | 14154    26
   103       |#define _POSIX_TRACE_NAME_MAX   8                                                                | 14155    26
   104       |#define _POSIX_TRACE_SYS_MAX    8                                                                | 14156    26
   105       |#define _POSIX_TRACE_USER_EVENT_MAX 32                                                           | 14157    26
   106       |#define _POSIX_TTY_NAME_MAX     9                                                                | 14158    26
   107       |#define _POSIX2_CHARCLASS_NAME_MAX 14                                                            | 14159    26
   108       |#define _POSIX2_COLL_WEIGHTS_MAX 2                                                               | 14160    26
   109       |                                                                                                 | 14161    26
   109       +                                                                                                 + 14161    26
   110       |#define _POSIX_RE_DUP_MAX       _POSIX2_RE_DUP_MAX                                               | 14162    26
   111       |#endif                                                                                           | 14163    26
   112       |                                                                                                 | 14164    26
   113       |#if __XSI_VISIBLE                                                                                | 14165    26
   114       |#define _XOPEN_IOV_MAX          16                                                               | 14166    26
   115       |#define _XOPEN_NAME_MAX         255                                                              | 14167    26
   116       |#define _XOPEN_PATH_MAX         1024                                                             | 14168    26
   117       |#define PASS_MAX                128     /* _PASSWORD_LEN from <pwd.h> */                         | 14169    26
   118       |                                                                                                 | 14170    26
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   280


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   118       +                                                                                                 + 14170    26
   119       |#define NL_ARGMAX               99      /* max # of position args for printf */                  | 14171    26
   120       |#define NL_LANGMAX              31      /* max LANG name length */                               | 14172    26
   121       |#define NL_MSGMAX               32767                                                            | 14173    26
   122       |#define NL_NMAX                 1                                                                | 14174    26
   123       |#define NL_SETMAX               255                                                              | 14175    26
   124       |#define NL_TEXTMAX              2048                                                             | 14176    26
   125       |#endif                                                                                           | 14177    26
   126       |                                                                                                 | 14178    26
   127       |#define MB_LEN_MAX              6       /* 31-bit UTF-8 */                                       | 14179    26
   128       |                                                                                                 | 14180    26
   129       |#include <sys/limits.h>                                                                          | 14181    26
     1       |/* release 2.25.00 */                                                                            | 14182    27
     2       |#pragma pack()                                                                                   | 14183    27
     3       |/*-                                                                                              | 14184    27
     4       | * Copyright (c) 1988, 1993                                                                      | 14185    27
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14186    27
     6       | *                                                                                               | 14187    27
     7       | * Redistribution and use in source and binary forms, with or without                            | 14188    27
     8       | * modification, are permitted provided that the following conditions                            | 14189    27
     9       | * are met:                                                                                      | 14190    27
    10       | * 1. Redistributions of source code must retain the above copyright                             | 14191    27
    11       | *    notice, this list of conditions and the following disclaimer.                              | 14192    27
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14193    27
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 14194    27
    14       | *    documentation and/or other materials provided with the distribution.                       | 14195    27
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 14196    27
    16       | *    may be used to endorse or promote products derived from this software                      | 14197    27
    17       | *    without specific prior written permission.                                                 | 14198    27
    18       | *                                                                                               | 14199    27
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14200    27
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14201    27
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14202    27
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14203    27
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14204    27
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14205    27
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14206    27
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14207    27
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14208    27
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14209    27
    29       | * SUCH DAMAGE.                                                                                  | 14210    27
    30       | *                                                                                               | 14211    27
    31       | * $FreeBSD: src/sys/sys/limits.h,v 1.9 2005/01/07 02:29:23 imp Exp $                            | 14212    27
    32       | */                                                                                              | 14213    27
    33       |                                                                                                 | 14214    27
    34       |#ifndef _SYS_LIMITS_H_                                                                           | 14215    27
    35       |#define _SYS_LIMITS_H_                                                                           | 14216    27
    36       |                                                                                                 | 14217    27
    37       |#include <sys/cdefs.h>                                                                           | 14218    27
     1       |/* release 2.25.00 */                                                                            | 14219     4
     2       |#pragma pack()                                                                                   | 14220     4
     3       |/*                                                                                               | 14221     4
     4       | * Copyright (c) 1991, 1993                                                                      | 14222     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   281


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14223     4
     6       | *                                                                                               | 14224     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 14225     4
     8       | * Berkeley Software Design, Inc.                                                                | 14226     4
     9       | *                                                                                               | 14227     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 14228     4
    11       | * modification, are permitted provided that the following conditions                            | 14229     4
    12       | * are met:                                                                                      | 14230     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 14231     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 14232     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14233     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 14234     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 14235     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 14236     4
    19       | *    must display the following acknowledgement:                                                | 14237     4
    20       | *      This product includes software developed by the University of                            | 14238     4
    21       | *      California, Berkeley and its contributors.                                               | 14239     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 14240     4
    23       | *    may be used to endorse or promote products derived from this software                      | 14241     4
    24       | *    without specific prior written permission.                                                 | 14242     4
    25       | *                                                                                               | 14243     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14244     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14245     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14246     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14247     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14248     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14249     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14250     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14251     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14252     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14253     4
    36       | * SUCH DAMAGE.                                                                                  | 14254     4
    37       | *                                                                                               | 14255     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 14256     4
    39       | */                                                                                              | 14257     4
    40       |                                                                                                 | 14258     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 14259     4
    42       |#define _SYS_CDEFS_H_                                                                            | 14260     4
    43       |                                                                                                 | 14261     4
    44       |#if defined(__cplusplus)                                                                         | 14262     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 14263     4
    46       |#define __END_DECLS     }                                                                        | 14264     4
    47       |#else                                                                                            | 14265     4
    48       |#define __BEGIN_DECLS                                                                            | 14266     4
    49       |#define __END_DECLS                                                                              | 14267     4
    50       |#endif                                                                                           | 14268     4
    51       |                                                                                                 | 14269     4
    52       |/*                                                                                               | 14270     4
    53       | * This code has been put in place to help reduce the addition of                                | 14271     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 14272     4
    55       | * having a compiler-agnostic source tree.                                                       | 14273     4
    56       | */                                                                                              | 14274     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 14275     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   282


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 14276     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 14277     4
    60       |                                                                                                 | 14278     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 14279     4
    62       |                                                                                                 | 14280     4
    63       |                                                                                                 | 14281     4
    64       |/*                                                                                               | 14282     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 14283     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 14284     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 14285     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 14286     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 14287     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 14288     4
    71       | * this only works with ANSI C.                                                                  | 14289     4
    72       | *                                                                                               | 14290     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 14291     4
    74       | * first.  It is only available with ANSI C.                                                     | 14292     4
    75       | */                                                                                              | 14293     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 14294     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 14295     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 14296     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 14297     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 14298     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 14299     4
    82       |                                                                                                 | 14300     4
    83       |#define __const         const           /* define reserved names to standard */                  | 14301     4
    84       |#define __signed        signed                                                                   | 14302     4
    85       |#define __volatile      volatile                                                                 | 14303     4
    86       |#if defined(__cplusplus)                                                                         | 14304     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 14305     4
    88       |#else                                                                                            | 14306     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 14307     4
    90       |#endif /* !__cplusplus */                                                                        | 14308     4
    91       |                                                                                                 | 14309     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 14310     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 14311     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 14312     4
    95       |#define __STRING(x)     "x"                                                                      | 14313     4
    96       |                                                                                                 | 14314     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 14315     4
    98       |#define __inline                                                                                 | 14316     4
    99       |#define __signed                                                                                 | 14317     4
   100       |#define __volatile                                                                               | 14318     4
   101       |/*                                                                                               | 14319     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 14320     4
   103       | * deleted from the program and old programs will want them left alone.                          | 14321     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 14322     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 14323     4
   106       | */                                                                                              | 14324     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 14325     4
   108       |#define const                           /* delete ANSI C keywords */                             | 14326     4
   109       |#define inline                                                                                   | 14327     4
   110       |#define signed                                                                                   | 14328     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   283


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   111       |#define volatile                                                                                 | 14329     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 14330     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 14331     4
   114       |                                                                                                 | 14332     4
   115       |/*                                                                                               | 14333     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 14334     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 14335     4
   118       | */                                                                                              | 14336     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 14337     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 14338     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 14339     4
   122       |#define __unused                                                                                 | 14340     4
   123       |#define __aligned(x)                                                                             | 14341     4
   124       |#define __section(x)                                                                             | 14342     4
   125       |#define __nonnull(x)                                                                             | 14343     4
   126       |#define __used                                                                                   | 14344     4
   127       |                                                                                                 | 14345     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 14346     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 14347     4
   130       |                                                                                                 | 14348     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 14349     4
   132       |#define __func__  NULL                                                                           | 14350     4
   133       |#endif                                                                                           | 14351     4
   134       |                                                                                                 | 14352     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 14353     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 14354     4
   137       |#endif                                                                                           | 14355     4
   138       |                                                                                                 | 14356     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 14357     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 14358     4
   141       | **/                                                                                             | 14359     4
   142       |#ifndef __cplusplus                                                                              | 14360     4
   143       |#define __restrict __restrict__                                                                  | 14361     4
   144       |#else                                                                                            | 14362     4
   145       |/* Systems/C++ does not */                                                                       | 14363     4
   146       |#define __restrict                                                                               | 14364     4
   147       |#endif                                                                                           | 14365     4
   148       |                                                                                                 | 14366     4
   149       |/*                                                                                               | 14367     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 14368     4
   151       | */                                                                                              | 14369     4
   152       |#define __predict_true(exp)     (exp)                                                            | 14370     4
   153       |#define __predict_false(exp)    (exp)                                                            | 14371     4
   154       |                                                                                                 | 14372     4
   155       |                                                                                                 | 14373     4
   156       |/*                                                                                               | 14374     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 14375     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 14376     4
   159       | *                                                                                               | 14377     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 14378     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 14379     4
   162       | */                                                                                              | 14380     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 14381     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   284


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   164       |#undef __offsetof                                                                                | 14382     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 14383     4
   166       |#endif                                                                                           | 14384     4
   167       |                                                                                                 | 14385     4
   168       |/*                                                                                               | 14386     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 14387     4
   170       | * or scanf-like arguments.                                                                      | 14388     4
   171       | */                                                                                              | 14389     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 14390     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 14391     4
   174       |#define __format_arg(fmtarg)                                                                     | 14392     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 14393     4
   176       |                                                                                                 | 14394     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 14395     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 14396     4
   179       |                                                                                                 | 14397     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 14398     4
   181       |#define __weak_reference(sym,alias)                                                              | 14399     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 14400     4
   183       |#define __warn_references(sym,msg)                                                               | 14401     4
   184       |                                                                                                 | 14402     4
   185       | /* This places the string into the resulting object.  It should */                              | 14403     4
   186       | /* probably become #pragma ident */                                                             | 14404     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 14405     4
   188       |                                                                                                 | 14406     4
   189       |#ifndef __RCSID                                                                                  | 14407     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 14408     4
   191       |#endif                                                                                           | 14409     4
   192       |                                                                                                 | 14410     4
   193       |/*                                                                                               | 14411     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 14412     4
   195       | * Usage:                                                                                        | 14413     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 14414     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 14415     4
   198       | */                                                                                              | 14416     4
   199       |#ifndef __SYSCID                                                                                 | 14417     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 14418     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 14419     4
   202       |#else                                                                                            | 14420     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 14421     4
   204       |#endif                                                                                           | 14422     4
   205       |#endif                                                                                           | 14423     4
   206       |                                                                                                 | 14424     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 14425     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 14426     4
   209       |#endif                                                                                           | 14427     4
   210       |                                                                                                 | 14428     4
   211       |#ifndef __COPYRIGHT                                                                              | 14429     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 14430     4
   213       |#endif                                                                                           | 14431     4
   214       |                                                                                                 | 14432     4
   215       |                                                                                                 | 14433     4
   216       |#ifndef __DECONST                                                                                | 14434     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   285


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 14435     4
   218       |#endif                                                                                           | 14436     4
   219       |                                                                                                 | 14437     4
   220       |#ifndef __DEVOLATILE                                                                             | 14438     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 14439     4
   222       |#endif                                                                                           | 14440     4
   223       |                                                                                                 | 14441     4
   224       |#ifndef __DEQUALIFY                                                                              | 14442     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 14443     4
   226       |#endif                                                                                           | 14444     4
   227       |                                                                                                 | 14445     4
   228       |                                                                                                 | 14446     4
   229       |/*-                                                                                              | 14447     4
   230       | * The following definitions are an extension of the behavior originally                         | 14448     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 14449     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 14450     4
   233       | * header file is included.                                                                      | 14451     4
   234       | *                                                                                               | 14452     4
   235       | * Here's a quick run-down of the versions:                                                      | 14453     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 14454     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 14455     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 14456     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 14457     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 14458     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 14459     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 14460     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 14461     4
   244       | *                                                                                               | 14462     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 14463     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 14464     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 14465     4
   248       | *                                                                                               | 14466     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 14467     4
   250       | */                                                                                              | 14468     4
   251       |                                                                                                 | 14469     4
   252       |/*                                                                                               | 14470     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 14471     4
   254       | * available. Also make them available when requested so.                                        | 14472     4
   255       | */                                                                                              | 14473     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 14474     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 14475     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 14476     4
   259       |#define __DF_VISIBLE    1                                                                        | 14477     4
   260       |#else                                                                                            | 14478     4
   261       |#define __DF_VISIBLE    0                                                                        | 14479     4
   262       |#endif                                                                                           | 14480     4
   263       |                                                                                                 | 14481     4
   264       |/*-                                                                                              | 14482     4
   265       | * The following definitions are an extension of the behavior originally                         | 14483     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 14484     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 14485     4
   268       | * header file is included.                                                                      | 14486     4
   269       | *                                                                                               | 14487     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   286


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   270       | * Here's a quick run-down of the versions:                                                      | 14488     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 14489     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 14490     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 14491     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 14492     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 14493     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 14494     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 14495     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 14496     4
   279       | *                                                                                               | 14497     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 14498     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 14499     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 14500     4
   283       | *                                                                                               | 14501     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 14502     4
   285       | */                                                                                              | 14503     4
   286       |                                                                                                 | 14504     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 14505     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 14506     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 14507     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 14508     4
   291       |#endif                                                                                           | 14509     4
   292       |                                                                                                 | 14510     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 14511     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 14512     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 14513     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 14514     4
   297       |#endif                                                                                           | 14515     4
   298       |                                                                                                 | 14516     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 14517     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 14518     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 14519     4
   302       |#define __XSI_VISIBLE           700                                                              | 14520     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 14521     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 14522     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 14523     4
   306       |#define __XSI_VISIBLE           600                                                              | 14524     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 14525     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 14526     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 14527     4
   310       |#define __XSI_VISIBLE           500                                                              | 14528     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 14529     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 14530     4
   313       |#endif                                                                                           | 14531     4
   314       |#endif                                                                                           | 14532     4
   315       |                                                                                                 | 14533     4
   316       |/*                                                                                               | 14534     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 14535     4
   318       | * important.                                                                                    | 14536     4
   319       | */                                                                                              | 14537     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 14538     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 14539     4
   322       |#endif                                                                                           | 14540     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   287


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 14541     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 14542     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 14543     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 14544     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 14545     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 14546     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 14547     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 14548     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 14549     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 14550     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 14551     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 14552     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 14553     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 14554     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 14555     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 14556     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 14557     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 14558     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 14559     4
   342       |#else                                                                                            | 14560     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 14561     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 14562     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 14563     4
   346       |#else                                                                                            | 14564     4
   347       |/*-                                                                                              | 14565     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 14566     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 14567     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 14568     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 14569     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 14570     4
   353       | * a test program to print out the values.                                                       | 14571     4
   354       | *                                                                                               | 14572     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 14573     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 14574     4
   357       | * environment (and in fact we will never get here).                                             | 14575     4
   358       | */                                                                                              | 14576     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 14577     4
   360       |#define __POSIX_VISIBLE         0                                                                | 14578     4
   361       |#define __XSI_VISIBLE           0                                                                | 14579     4
   362       |#define __BSD_VISIBLE           0                                                                | 14580     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 14581     4
   364       |#define __EXT1_VISIBLE          0                                                                | 14582     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 14583     4
   366       |#define __POSIX_VISIBLE         0                                                                | 14584     4
   367       |#define __XSI_VISIBLE           0                                                                | 14585     4
   368       |#define __BSD_VISIBLE           0                                                                | 14586     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 14587     4
   370       |#define __EXT1_VISIBLE          0                                                                | 14588     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 14589     4
   372       |#define __POSIX_VISIBLE         0                                                                | 14590     4
   373       |#define __XSI_VISIBLE           0                                                                | 14591     4
   374       |#define __BSD_VISIBLE           0                                                                | 14592     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 14593     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   288


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   376       |#define __EXT1_VISIBLE          0                                                                | 14594     4
   377       |#else                           /* Default environment: show everything. */                      | 14595     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 14596     4
   379       |#define __XSI_VISIBLE           700                                                              | 14597     4
   380       |#define __BSD_VISIBLE           1                                                                | 14598     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 14599     4
   382       |#define __EXT1_VISIBLE          1                                                                | 14600     4
   383       |#endif                                                                                           | 14601     4
   384       |#endif                                                                                           | 14602     4
   385       |                                                                                                 | 14603     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 14604     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 14605     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 14606     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 14607     4
   390       |#define __EXT1_VISIBLE          1                                                                | 14608     4
   391       |#else                                                                                            | 14609     4
   392       |#define __EXT1_VISIBLE          0                                                                | 14610     4
   393       |#endif                                                                                           | 14611     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 14612     4
   395       |                                                                                                 | 14613     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 14614     4
   397       |#define __NO_TLS 1                                                                               | 14615     4
   398       |#endif                                                                                           | 14616     4
   399       |                                                                                                 | 14617     4
   400       |                                                                                                 | 14618     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 14619     4
   402       |#define __FBSDID(x)                                                                              | 14620     4
   403       |                                                                                                 | 14621     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 14622     4
   405       |#pragma pack(reset)                                                                              | 14623     4
    38       |#include <machine/_limits.h>                                                                     | 14624    27
     1       |/* release 2.25.00 */                                                                            | 14625    28
     2       |#pragma pack()                                                                                   | 14626    28
     3       |/*-                                                                                              | 14627    28
     4       | * Copyright (c) 1988, 1993                                                                      | 14628    28
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14629    28
     6       | *                                                                                               | 14630    28
     7       | * Redistribution and use in source and binary forms, with or without                            | 14631    28
     8       | * modification, are permitted provided that the following conditions                            | 14632    28
     9       | * are met:                                                                                      | 14633    28
    10       | * 1. Redistributions of source code must retain the above copyright                             | 14634    28
    11       | *    notice, this list of conditions and the following disclaimer.                              | 14635    28
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14636    28
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 14637    28
    14       | *    documentation and/or other materials provided with the distribution.                       | 14638    28
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 14639    28
    16       | *    may be used to endorse or promote products derived from this software                      | 14640    28
    17       | *    without specific prior written permission.                                                 | 14641    28
    18       | *                                                                                               | 14642    28
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14643    28
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14644    28
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14645    28
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14646    28
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   289


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14647    28
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14648    28
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14649    28
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14650    28
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14651    28
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14652    28
    29       | * SUCH DAMAGE.                                                                                  | 14653    28
    30       | *                                                                                               | 14654    28
    31       | *      @(#)limits.h    8.3 (Berkeley) 1/4/94                                                    | 14655    28
    32       | * $FreeBSD: src/sys/i386/include/_limits.h,v 1.27 2005/01/06 22:18:15 imp Exp $                 | 14656    28
    33       | */                                                                                              | 14657    28
    34       |                                                                                                 | 14658    28
    35       |#ifndef _MACHINE__LIMITS_H_                                                                      | 14659    28
    36       |#define _MACHINE__LIMITS_H_                                                                      | 14660    28
    37       |                                                                                                 | 14661    28
    38       |/*                                                                                               | 14662    28
    39       | * According to ANSI (section 2.2.4.2), the values below must be usable by                       | 14663    28
    40       | * #if preprocessing directives.  Additionally, the expression must have the                     | 14664    28
    41       | * same type as would an expression that is an object of the corresponding                       | 14665    28
    42       | * type converted according to the integral promotions.  The subtraction for                     | 14666    28
    43       | * INT_MIN, etc., is so the value is not unsigned; e.g., 0x80000000 is an                        | 14667    28
    44       | * unsigned int for 32-bit two's complement ANSI compilers (section 3.1.3.2).                    | 14668    28
    45       | * These numbers are for the default configuration of gcc.  They work for                        | 14669    28
    46       | * some other compilers as well, but this should not be depended on.                             | 14670    28
    47       | */                                                                                              | 14671    28
    48       |                                                                                                 | 14672    28
    49       |#define __CHAR_BIT      8               /* number of bits in a char */                           | 14673    28
    50       |                                                                                                 | 14674    28
    51       |#define __SCHAR_MAX     0x7f            /* max value for a signed char */                        | 14675    28
    52       |#define __SCHAR_MIN     (-0x7f - 1)     /* min value for a signed char */                        | 14676    28
    53       |                                                                                                 | 14677    28
    54       |#define __UCHAR_MAX     0xff            /* max value for an unsigned char */                     | 14678    28
    55       |                                                                                                 | 14679    28
    56       |#define __USHRT_MAX     0xffff          /* max value for an unsigned short */                    | 14680    28
    57       |#define __SHRT_MAX      0x7fff          /* max value for a short */                              | 14681    28
    58       |#define __SHRT_MIN      (-0x7fff - 1)   /* min value for a short */                              | 14682    28
    59       |                                                                                                 | 14683    28
    60       |#define __UINT_MAX      0xffffffffU     /* max value for an unsigned int */                      | 14684    28
    61       |#define __INT_MAX       0x7fffffff      /* max value for an int */                               | 14685    28
    62       |#define __INT_MIN       (-0x7fffffff - 1)       /* min value for an int */                       | 14686    28
    63       |                                                                                                 | 14687    28
    64       |#ifdef _LP64                                                                                     | 14688    28
    65       |  /* (long) is 64-bits */                                                                        | 14689    28
    66       |#define __ULONG_MAX     0xffffffffffffffffUL                                                     | 14690    28
    67       |#define __LONG_MAX      0x7fffffffffffffffL                                                      | 14691    28
    68       |#define __LONG_MIN      (-0x7fffffffffffffffL - 1)                                               | 14692    28
    69       |#else                                                                                            | 14693    28
    70       |#define __ULONG_MAX     0xffffffffUL    /* max value for an unsigned long */                     | 14694    28
    71       |#define __LONG_MAX      0x7fffffffL     /* max value for a long */                               | 14695    28
    72       |#define __LONG_MIN      (-0x7fffffffL - 1)      /* min value for a long */                       | 14696    28
    73       |#endif                                                                                           | 14697    28
    74       |                                                                                                 | 14698    28
    75       |                        /* max value for an unsigned long long */                                | 14699    28
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   290


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    76       |#define __ULLONG_MAX    0xffffffffffffffffULL                                                    | 14700    28
    77       |#define __LLONG_MAX     0x7fffffffffffffffLL    /* max value for a long long */                  | 14701    28
    78       |#define __LLONG_MIN     (-0x7fffffffffffffffLL - 1)  /* min for a long long */                   | 14702    28
    79       |                                                                                                 | 14703    28
    80       |#define __SSIZE_MAX     __INT_MAX       /* max value for a ssize_t */                            | 14704    28
    81       |                                                                                                 | 14705    28
    82       |#define __SIZE_T_MAX    __UINT_MAX      /* max value for a size_t */                             | 14706    28
    83       |                                                                                                 | 14707    28
    84       |#define __OFF_MAX       __LLONG_MAX     /* max value for an off_t */                             | 14708    28
    85       |#define __OFF_MIN       __LLONG_MIN     /* min value for an off_t */                             | 14709    28
    86       |                                                                                                 | 14710    28
    87       |/* Quads and long longs are the same size.  Ensure they stay in sync. */                         | 14711    28
    88       |#define __UQUAD_MAX     __ULLONG_MAX    /* max value for a uquad_t */                            | 14712    28
    89       |#define __QUAD_MAX      __LLONG_MAX     /* max value for a quad_t */                             | 14713    28
    90       |#define __QUAD_MIN      __LLONG_MIN     /* min value for a quad_t */                             | 14714    28
    91       |                                                                                                 | 14715    28
    92       |#ifdef _LP64                                                                                     | 14716    28
    93       |#define __LONG_BIT      64                                                                       | 14717    28
    94       |#else                                                                                            | 14718    28
    95       |#define __LONG_BIT      32                                                                       | 14719    28
    96       |#endif                                                                                           | 14720    28
    97       |#define __WORD_BIT      32                                                                       | 14721    28
    98       |                                                                                                 | 14722    28
    99       |#endif /* !_MACHINE__LIMITS_H_ */                                                                | 14723    28
   100       |#pragma pack(reset)                                                                              | 14724    28
    39       |                                                                                                 | 14725    27
    40       |#define CHAR_BIT        __CHAR_BIT      /* number of bits in a char */                           | 14726    27
    41       |                                                                                                 | 14727    27
    42       |#define SCHAR_MAX       __SCHAR_MAX     /* max value for a signed char */                        | 14728    27
    43       |#define SCHAR_MIN       __SCHAR_MIN     /* min value for a signed char */                        | 14729    27
    44       |                                                                                                 | 14730    27
    45       |#define UCHAR_MAX       __UCHAR_MAX     /* max value for an unsigned char */                     | 14731    27
    46       |                                                                                                 | 14732    27
    47       |#ifdef __CHAR_UNSIGNED__                                                                         | 14733    27
    48       |#define CHAR_MAX        UCHAR_MAX       /* max value for a char */                               | 14734    27
    49       |#define CHAR_MIN        0               /* min value for a char */                               | 14735    27
    50       |#else                                                                                            | 14736    27
    51       |#define CHAR_MAX        SCHAR_MAX                                                                | 14737    27
    52       |#define CHAR_MIN        SCHAR_MIN                                                                | 14738    27
    53       |#endif                                                                                           | 14739    27
    54       |                                                                                                 | 14740    27
    55       |#define USHRT_MAX       __USHRT_MAX     /* max value for an unsigned short */                    | 14741    27
    56       |#define SHRT_MAX        __SHRT_MAX      /* max value for a short */                              | 14742    27
    57       |#define SHRT_MIN        __SHRT_MIN      /* min value for a short */                              | 14743    27
    58       |                                                                                                 | 14744    27
    59       |#define UINT_MAX        __UINT_MAX      /* max value for an unsigned int */                      | 14745    27
    60       |#define INT_MAX         __INT_MAX       /* max value for an int */                               | 14746    27
    61       |#define INT_MIN         __INT_MIN       /* min value for an int */                               | 14747    27
    62       |                                                                                                 | 14748    27
    63       |#define ULONG_MAX       __ULONG_MAX     /* max for an unsigned long */                           | 14749    27
    64       |#define LONG_MAX        __LONG_MAX      /* max for a long */                                     | 14750    27
    65       |#define LONG_MIN        __LONG_MIN      /* min for a long */                                     | 14751    27
    66       |                                                                                                 | 14752    27
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   291


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    67       |#ifdef __LONG_LONG_SUPPORTED                                                                     | 14753    27
    68       |#define ULLONG_MAX      __ULLONG_MAX    /* max for an unsigned long long */                      | 14754    27
    69       |#define LLONG_MAX       __LLONG_MAX     /* max for a long long */                                | 14755    27
    70       |#define LLONG_MIN       __LLONG_MIN     /* min for a long long */                                | 14756    27
    71       |#endif                                                                                           | 14757    27
    72       |                                                                                                 | 14758    27
    73       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 14759    27
    74       |#define SSIZE_MAX       __SSIZE_MAX     /* max value for an ssize_t */                           | 14760    27
    75       |#endif                                                                                           | 14761    27
    76       |                                                                                                 | 14762    27
    76       +                                                                                                 + 14762    27
    77       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 14763    27
    78       |#define SIZE_T_MAX      __SIZE_T_MAX    /* max value for a size_t */                             | 14764    27
    79       |                                                                                                 | 14765    27
    79       +                                                                                                 + 14765    27
    80       |#define OFF_MAX         __OFF_MAX       /* max value for an off_t */                             | 14766    27
    81       |#define OFF_MIN         __OFF_MIN       /* min value for an off_t */                             | 14767    27
    82       |#endif                                                                                           | 14768    27
    83       |                                                                                                 | 14769    27
    84       |#if __BSD_VISIBLE                                                                                | 14770    27
    85       |#define GID_MAX         UINT_MAX        /* max value for a gid_t */                              | 14771    27
    86       |#define UID_MAX         UINT_MAX        /* max value for a uid_t */                              | 14772    27
    87       |                                                                                                 | 14773    27
    87       +                                                                                                 + 14773    27
    88       |#define UQUAD_MAX       (__UQUAD_MAX)   /* max value for a uquad_t */                            | 14774    27
    89       |#define QUAD_MAX        (__QUAD_MAX)    /* max value for a quad_t */                             | 14775    27
    90       |#define QUAD_MIN        (__QUAD_MIN)    /* min value for a quad_t */                             | 14776    27
    91       |#endif                                                                                           | 14777    27
    92       |                                                                                                 | 14778    27
    93       |#if __XSI_VISIBLE                                                                                | 14779    27
    94       |#define LONG_BIT        __LONG_BIT                                                               | 14780    27
    95       |#define WORD_BIT        __WORD_BIT                                                               | 14781    27
    96       |#endif                                                                                           | 14782    27
    97       |                                                                                                 | 14783    27
    97       +                                                                                                 + 14783    27
    98       |#endif /* !_SYS_LIMITS_H_ */                                                                     | 14784    27
    99       |#pragma pack(reset)                                                                              | 14785    27
   130       |                                                                                                 | 14786    26
   131       |#if __POSIX_VISIBLE                                                                              | 14787    26
   132       |#include <sys/syslimits.h>                                                                       | 14788    26
     1       |/* release 2.25.00 */                                                                            | 14789    29
     1       +                                                                                                 + 14789    29
     2       |#pragma pack()                                                                                   | 14790    29
     3       |/*-                                                                                              | 14791    29
     4       | * Copyright (c) 1988, 1993                                                                      | 14792    29
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14793    29
     6       | *                                                                                               | 14794    29
     7       | * Redistribution and use in source and binary forms, with or without                            | 14795    29
     8       | * modification, are permitted provided that the following conditions                            | 14796    29
     9       | * are met:                                                                                      | 14797    29
    10       | * 1. Redistributions of source code must retain the above copyright                             | 14798    29
    11       | *    notice, this list of conditions and the following disclaimer.                              | 14799    29
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14800    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   292


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 14801    29
    14       | *    documentation and/or other materials provided with the distribution.                       | 14802    29
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 14803    29
    16       | *    may be used to endorse or promote products derived from this software                      | 14804    29
    17       | *    without specific prior written permission.                                                 | 14805    29
    18       | *                                                                                               | 14806    29
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14807    29
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14808    29
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14809    29
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14810    29
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14811    29
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14812    29
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14813    29
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14814    29
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14815    29
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14816    29
    29       | * SUCH DAMAGE.                                                                                  | 14817    29
    30       | *                                                                                               | 14818    29
    31       | *      @(#)syslimits.h 8.1 (Berkeley) 6/2/93                                                    | 14819    29
    32       | * $FreeBSD: src/sys/sys/syslimits.h,v 1.21 2005/03/02 21:33:29 joerg Exp $                      | 14820    29
    33       | */                                                                                              | 14821    29
    34       |                                                                                                 | 14822    29
    35       |#ifndef _SYS_SYSLIMITS_H_                                                                        | 14823    29
    36       |#define _SYS_SYSLIMITS_H_                                                                        | 14824    29
    37       |                                                                                                 | 14825    29
    38       |#if !defined(_KERNEL) && !defined(_LIMITS_H_) && !defined(_SYS_PARAM_H_)                         | 14826    29
    39       |#ifndef _SYS_CDEFS_H_                                                                            | 14827    29
    40       |#error this file needs sys/cdefs.h as a prerequisite                                             | 14828    29
    41       |#endif                                                                                           | 14829    29
    42       |#ifdef __CC_SUPPORTS_WARNING                                                                     | 14830    29
    43       |#warning "No user-serviceable parts inside."                                                     | 14831    29
    44       |#endif                                                                                           | 14832    29
    45       |#endif                                                                                           | 14833    29
    46       |                                                                                                 | 14834    29
    47       |/*                                                                                               | 14835    29
    48       | * Do not add any new variables here.  (See the comment at the end of                            | 14836    29
    49       | * the file for why.)                                                                            | 14837    29
    50       | */                                                                                              | 14838    29
    51       |#if defined(__arm__) || defined(__powerpc__)                                                     | 14839    29
    52       |#define ARG_MAX                 65536   /* max bytes for an exec function */                     | 14840    29
    53       |#else                                                                                            | 14841    29
    54       |#define ARG_MAX                 262144  /* max bytes for an exec function */                     | 14842    29
    55       |#endif                                                                                           | 14843    29
    56       |#ifndef CHILD_MAX                                                                                | 14844    29
    57       |#define CHILD_MAX                  40   /* max simultaneous processes */                         | 14845    29
    58       |#endif                                                                                           | 14846    29
    59       |#define LINK_MAX                32767   /* max file link count */                                | 14847    29
    60       |#define MAX_CANON                 255   /* max bytes in term canon input line */                 | 14848    29
    61       |#define MAX_INPUT                 255   /* max bytes in terminal input */                        | 14849    29
    62       |#define NAME_MAX                  255   /* max bytes in a file name */                           | 14850    29
    63       |#ifdef __VM__                                                                                    | 14851    29
    64       |#define NGROUPS_MAX                32   /* max supplemental group id's */                        | 14852    29
    65       |#else                                                                                            | 14853    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   293


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    66       |#define NGROUPS_MAX               300   /* max supplemental group id's */                        | 14854    29
    67       |#endif                                                                                           | 14855    29
    68       |#ifndef OPEN_MAX                                                                                 | 14856    29
    69       |#define OPEN_MAX                   64   /* max open files per process */                         | 14857    29
    70       |#endif                                                                                           | 14858    29
    71       |#define PATH_MAX                 1024   /* max bytes in pathname */                              | 14859    29
    72       |#define PIPE_BUF                  512   /* max bytes for atomic pipe writes */                   | 14860    29
    73       |#define IOV_MAX                  1024   /* max elements in i/o vector */                         | 14861    29
    74       |                                                                                                 | 14862    29
    75       |#ifndef __SEM_VALUE_MAX_DEFINED                                                                  | 14863    29
    76       |#define SEM_VALUE_MAX   0x7fffffff                                                               | 14864    29
    77       |#define __SEM_VALUE_MAX_DEFINED                                                                  | 14865    29
    78       |#endif                                                                                           | 14866    29
    79       |#ifndef __SEM_NSEMS_MAX_DEFINED                                                                  | 14867    29
    80       |#define SEM_NSEMS_MAX             256                                                            | 14868    29
    81       |#define __SEM_NSEMS_MAX_DEFINED                                                                  | 14869    29
    82       |#endif                                                                                           | 14870    29
    83       |                                                                                                 | 14871    29
    84       |/*                                                                                               | 14872    29
    85       | * We leave the following values undefined to force applications to either                       | 14873    29
    86       | * assume conservative values or call sysconf() to get the current value.                        | 14874    29
    87       | *                                                                                               | 14875    29
    88       | * HOST_NAME_MAX                                                                                 | 14876    29
    89       | *                                                                                               | 14877    29
    90       | * (We should do this for most of the values currently defined here,                             | 14878    29
    91       | * but many programs are not prepared to deal with this yet.)                                    | 14879    29
    92       | */                                                                                              | 14880    29
    93       |#endif                                                                                           | 14881    29
    94       |#pragma pack(reset)                                                                              | 14882    29
   133       |#endif                                                                                           | 14883    26
   134       |                                                                                                 | 14884    26
   135       |#endif /* !_LIMITS_H_ */                                                                         | 14885    26
   136       |#pragma pack(reset)                                                                              | 14886    26
   277       |#if defined(__cplusplus) || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 *| 14887    23
   277       +/)                                                                                               + 14887    23
   278       |# include <stdint.h>                                                                             | 14888    23
     1       |/* release 2.25.00 */                                                                            | 14889    21
     1       +                                                                                                 + 14889    21
     2       |#pragma pack()                                                                                   | 14890    21
     3       |/*-                                                                                              | 14891    21
     4       | * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>                                           | 14892    21
     5       | * All rights reserved.                                                                          | 14893    21
     6       | *                                                                                               | 14894    21
     7       | * Redistribution and use in source and binary forms, with or without                            | 14895    21
     8       | * modification, are permitted provided that the following conditions                            | 14896    21
     9       | * are met:                                                                                      | 14897    21
    10       | * 1. Redistributions of source code must retain the above copyright                             | 14898    21
    11       | *    notice, this list of conditions and the following disclaimer.                              | 14899    21
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14900    21
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 14901    21
    14       | *    documentation and/or other materials provided with the distribution.                       | 14902    21
    15       | *                                                                                               | 14903    21
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 14904    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   294


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14905    21
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14906    21
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 14907    21
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14908    21
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14909    21
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14910    21
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14911    21
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14912    21
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14913    21
    26       | * SUCH DAMAGE.                                                                                  | 14914    21
    27       | *                                                                                               | 14915    21
    28       | */                                                                                              | 14916    21
    29       |                                                                                                 | 14917    21
    30       |#ifndef _SYS_STDINT_H_                                                                           | 14918    21
    31       |#define _SYS_STDINT_H_                                                                           | 14919    21
    32       |                                                                                                 | 14920    21
    33       |#include <sys/cdefs.h>                                                                           | 14921    21
    34       |#include <sys/_types.h>                                                                          | 14922    21
    35       |                                                                                                 | 14923    21
    36       |#include <machine/_stdint.h>                                                                     | 14924    21
    37       |                                                                                                 | 14925    21
    38       |#ifndef _INT8_T_DECLARED                                                                         | 14926    21
    39       |typedef __int8_t                int8_t;                                                          | 14927    21
    40       |#define _INT8_T_DECLARED                                                                         | 14928    21
    41       |#endif                                                                                           | 14929    21
    42       |                                                                                                 | 14930    21
    43       |#ifndef _INT16_T_DECLARED                                                                        | 14931    21
    44       |typedef __int16_t               int16_t;                                                         | 14932    21
    45       |#define _INT16_T_DECLARED                                                                        | 14933    21
    46       |#endif                                                                                           | 14934    21
    47       |                                                                                                 | 14935    21
    48       |#ifndef _INT32_T_DECLARED                                                                        | 14936    21
    49       |typedef __int32_t               int32_t;                                                         | 14937    21
    50       |#define _INT32_T_DECLARED                                                                        | 14938    21
    51       |#endif                                                                                           | 14939    21
    52       |                                                                                                 | 14940    21
    53       |#ifndef _INT64_T_DECLARED                                                                        | 14941    21
    54       |typedef __int64_t               int64_t;                                                         | 14942    21
    55       |#define _INT64_T_DECLARED                                                                        | 14943    21
    56       |#endif                                                                                           | 14944    21
    57       |                                                                                                 | 14945    21
    58       |#ifndef _UINT8_T_DECLARED                                                                        | 14946    21
    59       |typedef __uint8_t               uint8_t;                                                         | 14947    21
    60       |#define _UINT8_T_DECLARED                                                                        | 14948    21
    61       |#endif                                                                                           | 14949    21
    62       |                                                                                                 | 14950    21
    63       |#ifndef _UINT16_T_DECLARED                                                                       | 14951    21
    64       |typedef __uint16_t              uint16_t;                                                        | 14952    21
    65       |#define _UINT16_T_DECLARED                                                                       | 14953    21
    66       |#endif                                                                                           | 14954    21
    67       |                                                                                                 | 14955    21
    68       |#ifndef _UINT32_T_DECLARED                                                                       | 14956    21
    69       |typedef __uint32_t              uint32_t;                                                        | 14957    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   295


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    70       |#define _UINT32_T_DECLARED                                                                       | 14958    21
    71       |#endif                                                                                           | 14959    21
    72       |                                                                                                 | 14960    21
    73       |#ifndef _UINT64_T_DECLARED                                                                       | 14961    21
    74       |typedef __uint64_t              uint64_t;                                                        | 14962    21
    75       |#define _UINT64_T_DECLARED                                                                       | 14963    21
    76       |#endif                                                                                           | 14964    21
    77       |                                                                                                 | 14965    21
    78       |typedef __int_least8_t          int_least8_t;                                                    | 14966    21
    79       |typedef __int_least16_t         int_least16_t;                                                   | 14967    21
    80       |typedef __int_least32_t         int_least32_t;                                                   | 14968    21
    81       |typedef __int_least64_t         int_least64_t;                                                   | 14969    21
    82       |                                                                                                 | 14970    21
    83       |typedef __uint_least8_t         uint_least8_t;                                                   | 14971    21
    84       |typedef __uint_least16_t        uint_least16_t;                                                  | 14972    21
    85       |typedef __uint_least32_t        uint_least32_t;                                                  | 14973    21
    86       |typedef __uint_least64_t        uint_least64_t;                                                  | 14974    21
    87       |                                                                                                 | 14975    21
    88       |typedef __int_fast8_t           int_fast8_t;                                                     | 14976    21
    89       |typedef __int_fast16_t          int_fast16_t;                                                    | 14977    21
    90       |typedef __int_fast32_t          int_fast32_t;                                                    | 14978    21
    91       |typedef __int_fast64_t          int_fast64_t;                                                    | 14979    21
    92       |                                                                                                 | 14980    21
    93       |typedef __uint_fast8_t          uint_fast8_t;                                                    | 14981    21
    94       |typedef __uint_fast16_t         uint_fast16_t;                                                   | 14982    21
    95       |typedef __uint_fast32_t         uint_fast32_t;                                                   | 14983    21
    96       |typedef __uint_fast64_t         uint_fast64_t;                                                   | 14984    21
    97       |                                                                                                 | 14985    21
    98       |typedef __intmax_t              intmax_t;                                                        | 14986    21
    99       |typedef __uintmax_t             uintmax_t;                                                       | 14987    21
   100       |                                                                                                 | 14988    21
   101       |#ifndef _INTPTR_T_DECLARED                                                                       | 14989    21
   102       |typedef __intptr_t              intptr_t;                                                        | 14990    21
   103       |typedef __uintptr_t             uintptr_t;                                                       | 14991    21
   104       |#define _INTPTR_T_DECLARED                                                                       | 14992    21
   105       |#endif                                                                                           | 14993    21
   106       |                                                                                                 | 14994    21
   107       |#endif /* !_SYS_STDINT_H_ */                                                                     | 14995    21
   108       |#pragma pack(reset)                                                                              | 14996    21
   279       |  typedef  uint8_t BYTE;                                                                         | 14997    23
   280       |  typedef uint16_t U16;                                                                          | 14998    23
   281       |  typedef uint32_t U32;                                                                          | 14999    23
   282       |  typedef  int32_t S32;                                                                          | 15000    23
   283       |  typedef uint64_t U64;                                                                          | 15001    23
   284       |  typedef uintptr_t uptrval;                                                                     | 15002    23
   285       |#else                                                                                            | 15003    23
   286       |# if UINT_MAX != 4294967295UL                                                                    | 15004    23
   287       |#   error "LZ4 code (when not C++ or C99) assumes that sizeof(int) == 4"                         | 15005    23
   288       |# endif                                                                                          | 15006    23
   289       |  typedef unsigned char       BYTE;                                                              | 15007    23
   290       |  typedef unsigned short      U16;                                                               | 15008    23
   291       |  typedef unsigned int        U32;                                                               | 15009    23
   292       |  typedef   signed int        S32;                                                               | 15010    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   296


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   293       |  typedef unsigned long long  U64;                                                               | 15011    23
   294       |  typedef size_t              uptrval;   /* generally true, except OpenVMS-64 */                 | 15012    23
   295       |#endif                                                                                           | 15013    23
   296       |                                                                                                 | 15014    23
   297       |#if defined(__x86_64__)                                                                          | 15015    23
   298       |  typedef U64    reg_t;   /* 64-bits in x32 mode */                                              | 15016    23
   299       |#else                                                                                            | 15017    23
   300       |  typedef size_t reg_t;   /* 32-bits in x32 mode */                                              | 15018    23
   301       |#endif                                                                                           | 15019    23
   302       |                                                                                                 | 15020    23
   303       |typedef enum {                                                                                   | 15021    23
   304       |    notLimited = 0,                                                                              | 15022    23
   305       |    limitedOutput = 1,                                                                           | 15023    23
   306       |    fillOutput = 2                                                                               | 15024    23
   307       |} limitedOutput_directive;                                                                       | 15025    23
   308       |                                                                                                 | 15026    23
   309       |                                                                                                 | 15027    23
   310       |/*-************************************                                                          | 15028    23
   311       |*  Reading and writing into memory                                                               | 15029    23
   312       |**************************************/                                                          | 15030    23
   313       |                                                                                                 | 15031    23
   314       |/**                                                                                              | 15032    23
   315       | * LZ4 relies on memcpy with a constant size being inlined. In freestanding                      | 15033    23
   316       | * environments, the compiler can't assume the implementation of memcpy() is                     | 15034    23
   317       | * standard compliant, so it can't apply its specialized memcpy() inlining                       | 15035    23
   318       | * logic. When possible, use __builtin_memcpy() to tell the compiler to analyze                  | 15036    23
   319       | * memcpy() as if it were standard compliant, so it can inline it in freestanding                | 15037    23
   320       | * environments. This is needed when decompressing the Linux Kernel, for example.                | 15038    23
   321       | */                                                                                              | 15039    23
   322       |#if defined(__GNUC__) && (__GNUC__ >= 4)                                                         | 15040    23
   323       |#define LZ4_memcpy(dst, src, size) __builtin_memcpy(dst, src, size)                              | 15041    23
   324       |#else                                                                                            | 15042    23
   325       |#define LZ4_memcpy(dst, src, size) memcpy(dst, src, size)                                        | 15043    23
   326       |#endif                                                                                           | 15044    23
   327       |                                                                                                 | 15045    23
   328       |static unsigned LZ4_isLittleEndian(void)                                                         | 15046    23
   329       |{                                                                                                | 15047    23
   330       |    const union { U32 u; BYTE c[4]; } one = { 1 };   /* don't use static : performance detrimenta| 15048    23
   330       +l */                                                                                             + 15048    23
   331       |    return one.c[0];                                                                             | 15049    23
   332       |}                                                                                                | 15050    23
   333       |                                                                                                 | 15051    23
   334       |                                                                                                 | 15052    23
   335       |#if defined(LZ4_FORCE_MEMORY_ACCESS) && (LZ4_FORCE_MEMORY_ACCESS==2)                             | 15053    23
   336       |/* lie to the compiler about data alignment; use with caution */                                 | 15054    23
   337       |                                                                                                 | 15055    23
   338       |static U16 LZ4_read16(const void* memPtr) { return *(const U16*) memPtr; }                       | 15056    23
   339       |static U32 LZ4_read32(const void* memPtr) { return *(const U32*) memPtr; }                       | 15057    23
   340       |static reg_t LZ4_read_ARCH(const void* memPtr) { return *(const reg_t*) memPtr; }                | 15058    23
   341       |                                                                                                 | 15059    23
   342       |static void LZ4_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }                      | 15060    23
   343       |static void LZ4_write32(void* memPtr, U32 value) { *(U32*)memPtr = value; }                      | 15061    23
   344       |                                                                                                 | 15062    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   297


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   345       |#elif defined(LZ4_FORCE_MEMORY_ACCESS) && (LZ4_FORCE_MEMORY_ACCESS==1)                           | 15063    23
   346       |                                                                                                 | 15064    23
   347       |/* __pack instructions are safer, but compiler specific, hence potentially problematic for some c| 15065    23
   347       +ompilers */                                                                                      + 15065    23
   348       |/* currently only defined for gcc and icc */                                                     | 15066    23
   349       |typedef union { U16 u16; U32 u32; reg_t uArch; } __attribute__((packed)) unalign;                | 15067    23
   350       |                                                                                                 | 15068    23
   351       |static U16 LZ4_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }                    | 15069    23
   352       |static U32 LZ4_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }                    | 15070    23
   353       |static reg_t LZ4_read_ARCH(const void* ptr) { return ((const unalign*)ptr)->uArch; }             | 15071    23
   354       |                                                                                                 | 15072    23
   355       |static void LZ4_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }            | 15073    23
   356       |static void LZ4_write32(void* memPtr, U32 value) { ((unalign*)memPtr)->u32 = value; }            | 15074    23
   357       |                                                                                                 | 15075    23
   358       |#else  /* safe and portable access using memcpy() */                                             | 15076    23
   359       |                                                                                                 | 15077    23
   360       |static U16 LZ4_read16(const void* memPtr)                                                        | 15078    23
   361       |{                                                                                                | 15079    23
   362       |    U16 val; LZ4_memcpy(&val, memPtr, sizeof(val)); return val;                                  | 15080    23
   362       +        U16 val; __memcpy(&val,memPtr,sizeof(val)); return val;                                  + 15080    23
   363       |}                                                                                                | 15081    23
   364       |                                                                                                 | 15082    23
   365       |static U32 LZ4_read32(const void* memPtr)                                                        | 15083    23
   366       |{                                                                                                | 15084    23
   367       |    U32 val; LZ4_memcpy(&val, memPtr, sizeof(val)); return val;                                  | 15085    23
   367       +        U32 val; __memcpy(&val,memPtr,sizeof(val)); return val;                                  + 15085    23
   368       |}                                                                                                | 15086    23
   369       |                                                                                                 | 15087    23
   370       |static reg_t LZ4_read_ARCH(const void* memPtr)                                                   | 15088    23
   371       |{                                                                                                | 15089    23
   372       |    reg_t val; LZ4_memcpy(&val, memPtr, sizeof(val)); return val;                                | 15090    23
   372       +        reg_t val; __memcpy(&val,memPtr,sizeof(val)); return val;                                + 15090    23
   373       |}                                                                                                | 15091    23
   374       |                                                                                                 | 15092    23
   375       |static void LZ4_write16(void* memPtr, U16 value)                                                 | 15093    23
   376       |{                                                                                                | 15094    23
   377       |    LZ4_memcpy(memPtr, &value, sizeof(value));                                                   | 15095    23
   377       +        __memcpy(memPtr,&value,sizeof(value));                                                   + 15095    23
   378       |}                                                                                                | 15096    23
   379       |                                                                                                 | 15097    23
   380       |static void LZ4_write32(void* memPtr, U32 value)                                                 | 15098    23
   381       |{                                                                                                | 15099    23
   382       |    LZ4_memcpy(memPtr, &value, sizeof(value));                                                   | 15100    23
   382       +        __memcpy(memPtr,&value,sizeof(value));                                                   + 15100    23
   383       |}                                                                                                | 15101    23
   384       |                                                                                                 | 15102    23
   385       |#endif /* LZ4_FORCE_MEMORY_ACCESS */                                                             | 15103    23
   386       |                                                                                                 | 15104    23
   387       |                                                                                                 | 15105    23
   388       |static U16 LZ4_readLE16(const void* memPtr)                                                      | 15106    23
   389       |{                                                                                                | 15107    23
   390       |    if (LZ4_isLittleEndian()) {                                                                  | 15108    23
   391       |        return LZ4_read16(memPtr);                                                               | 15109    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   298


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   392       |    } else {                                                                                     | 15110    23
   393       |        const BYTE* p = (const BYTE*)memPtr;                                                     | 15111    23
   394       |        return (U16)((U16)p[0] + (p[1]<<8));                                                     | 15112    23
   395       |    }                                                                                            | 15113    23
   396       |}                                                                                                | 15114    23
   397       |                                                                                                 | 15115    23
   398       |static void LZ4_writeLE16(void* memPtr, U16 value)                                               | 15116    23
   399       |{                                                                                                | 15117    23
   400       |    if (LZ4_isLittleEndian()) {                                                                  | 15118    23
   401       |        LZ4_write16(memPtr, value);                                                              | 15119    23
   402       |    } else {                                                                                     | 15120    23
   403       |        BYTE* p = (BYTE*)memPtr;                                                                 | 15121    23
   404       |        p[0] = (BYTE) value;                                                                     | 15122    23
   405       |        p[1] = (BYTE)(value>>8);                                                                 | 15123    23
   406       |    }                                                                                            | 15124    23
   407       |}                                                                                                | 15125    23
   408       |                                                                                                 | 15126    23
   409       |/* customized variant of memcpy, which can overwrite up to 8 bytes beyond dstEnd */              | 15127    23
   410       |LZ4_FORCE_INLINE                                                                                 | 15128    23
   410       +static inline                                                                                    + 15128    23
   411       |void LZ4_wildCopy8(void* dstPtr, const void* srcPtr, void* dstEnd)                               | 15129    23
   412       |{                                                                                                | 15130    23
   413       |    BYTE* d = (BYTE*)dstPtr;                                                                     | 15131    23
   414       |    const BYTE* s = (const BYTE*)srcPtr;                                                         | 15132    23
   415       |    BYTE* const e = (BYTE*)dstEnd;                                                               | 15133    23
   416       |                                                                                                 | 15134    23
   417       |    do { LZ4_memcpy(d,s,8); d+=8; s+=8; } while (d<e);                                           | 15135    23
   417       +        do { __memcpy(d,s,8); d+=8; s+=8; } while (d<e);                                         + 15135    23
   418       |}                                                                                                | 15136    23
   419       |                                                                                                 | 15137    23
   420       |static const unsigned inc32table[8] = {0, 1, 2,  1,  0,  4, 4, 4};                               | 15138    23
   421       |static const int      dec64table[8] = {0, 0, 0, -1, -4,  1, 2, 3};                               | 15139    23
   422       |                                                                                                 | 15140    23
   423       |                                                                                                 | 15141    23
   424       |#ifndef LZ4_FAST_DEC_LOOP                                                                        | 15142    23
   425       |#  if defined __i386__ || defined _M_IX86 || defined __x86_64__ || defined _M_X64                | 15143    23
   426       |#    define LZ4_FAST_DEC_LOOP 1                                                                  | 15144    23
   427       |#  elif defined(__aarch64__) && !defined(__clang__)                                              | 15145    23
   428       |     /* On aarch64, we disable this optimization for clang because on certain                    | 15146    23
   429       |      * mobile chipsets, performance is reduced with clang. For information                      | 15147    23
   430       |      * refer to https://github.com/lz4/lz4/pull/707 */                                          | 15148    23
   431       |#    define LZ4_FAST_DEC_LOOP 1                                                                  | 15149    23
   432       |#  else                                                                                          | 15150    23
   433       |#    define LZ4_FAST_DEC_LOOP 0                                                                  | 15151    23
   434       |#  endif                                                                                         | 15152    23
   435       |#endif                                                                                           | 15153    23
   436       |                                                                                                 | 15154    23
   437       |#if LZ4_FAST_DEC_LOOP                                                                            | 15155    23
   438       |                                                                                                 | 15156    23
   439       |LZ4_FORCE_INLINE void                                                                            | 15157    23
   440       |LZ4_memcpy_using_offset_base(BYTE* dstPtr, const BYTE* srcPtr, BYTE* dstEnd, const size_t offset)| 15158    23
   441       |{                                                                                                | 15159    23
   442       |    assert(srcPtr + offset == dstPtr);                                                           | 15160    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   299


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   443       |    if (offset < 8) {                                                                            | 15161    23
   444       |        LZ4_write32(dstPtr, 0);   /* silence an msan warning when offset==0 */                   | 15162    23
   445       |        dstPtr[0] = srcPtr[0];                                                                   | 15163    23
   446       |        dstPtr[1] = srcPtr[1];                                                                   | 15164    23
   447       |        dstPtr[2] = srcPtr[2];                                                                   | 15165    23
   448       |        dstPtr[3] = srcPtr[3];                                                                   | 15166    23
   449       |        srcPtr += inc32table[offset];                                                            | 15167    23
   450       |        LZ4_memcpy(dstPtr+4, srcPtr, 4);                                                         | 15168    23
   451       |        srcPtr -= dec64table[offset];                                                            | 15169    23
   452       |        dstPtr += 8;                                                                             | 15170    23
   453       |    } else {                                                                                     | 15171    23
   454       |        LZ4_memcpy(dstPtr, srcPtr, 8);                                                           | 15172    23
   455       |        dstPtr += 8;                                                                             | 15173    23
   456       |        srcPtr += 8;                                                                             | 15174    23
   457       |    }                                                                                            | 15175    23
   458       |                                                                                                 | 15176    23
   459       |    LZ4_wildCopy8(dstPtr, srcPtr, dstEnd);                                                       | 15177    23
   460       |}                                                                                                | 15178    23
   461       |                                                                                                 | 15179    23
   462       |/* customized variant of memcpy, which can overwrite up to 32 bytes beyond dstEnd                | 15180    23
   463       | * this version copies two times 16 bytes (instead of one time 32 bytes)                         | 15181    23
   464       | * because it must be compatible with offsets >= 16. */                                          | 15182    23
   465       |LZ4_FORCE_INLINE void                                                                            | 15183    23
   466       |LZ4_wildCopy32(void* dstPtr, const void* srcPtr, void* dstEnd)                                   | 15184    23
   467       |{                                                                                                | 15185    23
   468       |    BYTE* d = (BYTE*)dstPtr;                                                                     | 15186    23
   469       |    const BYTE* s = (const BYTE*)srcPtr;                                                         | 15187    23
   470       |    BYTE* const e = (BYTE*)dstEnd;                                                               | 15188    23
   471       |                                                                                                 | 15189    23
   472       |    do { LZ4_memcpy(d,s,16); LZ4_memcpy(d+16,s+16,16); d+=32; s+=32; } while (d<e);              | 15190    23
   473       |}                                                                                                | 15191    23
   474       |                                                                                                 | 15192    23
   475       |/* LZ4_memcpy_using_offset()  presumes :                                                         | 15193    23
   476       | * - dstEnd >= dstPtr + MINMATCH                                                                 | 15194    23
   477       | * - there is at least 8 bytes available to write after dstEnd */                                | 15195    23
   478       |LZ4_FORCE_INLINE void                                                                            | 15196    23
   479       |LZ4_memcpy_using_offset(BYTE* dstPtr, const BYTE* srcPtr, BYTE* dstEnd, const size_t offset)     | 15197    23
   480       |{                                                                                                | 15198    23
   481       |    BYTE v[8];                                                                                   | 15199    23
   482       |                                                                                                 | 15200    23
   483       |    assert(dstEnd >= dstPtr + MINMATCH);                                                         | 15201    23
   484       |                                                                                                 | 15202    23
   485       |    switch(offset) {                                                                             | 15203    23
   486       |    case 1:                                                                                      | 15204    23
   487       |        MEM_INIT(v, *srcPtr, 8);                                                                 | 15205    23
   488       |        break;                                                                                   | 15206    23
   489       |    case 2:                                                                                      | 15207    23
   490       |        LZ4_memcpy(v, srcPtr, 2);                                                                | 15208    23
   491       |        LZ4_memcpy(&v[2], srcPtr, 2);                                                            | 15209    23
   492       |        LZ4_memcpy(&v[4], v, 4);                                                                 | 15210    23
   493       |        break;                                                                                   | 15211    23
   494       |    case 4:                                                                                      | 15212    23
   495       |        LZ4_memcpy(v, srcPtr, 4);                                                                | 15213    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   300


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   496       |        LZ4_memcpy(&v[4], srcPtr, 4);                                                            | 15214    23
   497       |        break;                                                                                   | 15215    23
   498       |    default:                                                                                     | 15216    23
   499       |        LZ4_memcpy_using_offset_base(dstPtr, srcPtr, dstEnd, offset);                            | 15217    23
   500       |        return;                                                                                  | 15218    23
   501       |    }                                                                                            | 15219    23
   502       |                                                                                                 | 15220    23
   503       |    LZ4_memcpy(dstPtr, v, 8);                                                                    | 15221    23
   504       |    dstPtr += 8;                                                                                 | 15222    23
   505       |    while (dstPtr < dstEnd) {                                                                    | 15223    23
   506       |        LZ4_memcpy(dstPtr, v, 8);                                                                | 15224    23
   507       |        dstPtr += 8;                                                                             | 15225    23
   508       |    }                                                                                            | 15226    23
   509       |}                                                                                                | 15227    23
   510       |#endif                                                                                           | 15228    23
   511       |                                                                                                 | 15229    23
   511       +                                                                                                 + 15229    23
   512       |                                                                                                 | 15230    23
   513       |/*-************************************                                                          | 15231    23
   514       |*  Common functions                                                                              | 15232    23
   515       |**************************************/                                                          | 15233    23
   516       |static unsigned LZ4_NbCommonBytes (reg_t val)                                                    | 15234    23
   517       |{                                                                                                | 15235    23
   518       |    assert(val != 0);                                                                            | 15236    23
   518       +        ((void)0);                                                                               + 15236    23
   519       |    if (LZ4_isLittleEndian()) {                                                                  | 15237    23
   520       |        if (sizeof(val) == 8) {                                                                  | 15238    23
   521       |#       if defined(_MSC_VER) && (_MSC_VER >= 1800) && defined(_M_AMD64) && !defined(LZ4_FORCE_SW_| 15239    23
   521       +BITCOUNT)                                                                                        + 15239    23
   522       |            /* x64 CPUS without BMI support interpret `TZCNT` as `REP BSF` */                    | 15240    23
   523       |            return (unsigned)_tzcnt_u64(val) >> 3;                                               | 15241    23
   524       |#       elif defined(_MSC_VER) && defined(_WIN64) && !defined(LZ4_FORCE_SW_BITCOUNT)             | 15242    23
   525       |            unsigned long r = 0;                                                                 | 15243    23
   526       |            _BitScanForward64(&r, (U64)val);                                                     | 15244    23
   527       |            return (unsigned)r >> 3;                                                             | 15245    23
   528       |#       elif (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) || \                   | 15246    23
   529       |                            ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \                   | 15247    23
   530       |                                        !defined(LZ4_FORCE_SW_BITCOUNT)                          | 15248    23
   531       |            return (unsigned)__builtin_ctzll((U64)val) >> 3;                                     | 15249    23
   532       |#       else                                                                                     | 15250    23
   533       |            const U64 m = 0x0101010101010101ULL;                                                 | 15251    23
   534       |            val ^= val - 1;                                                                      | 15252    23
   535       |            return (unsigned)(((U64)((val & (m - 1)) * m)) >> 56);                               | 15253    23
   536       |#       endif                                                                                    | 15254    23
   537       |        } else /* 32 bits */ {                                                                   | 15255    23
   538       |#       if defined(_MSC_VER) && (_MSC_VER >= 1400) && !defined(LZ4_FORCE_SW_BITCOUNT)            | 15256    23
   539       |            unsigned long r;                                                                     | 15257    23
   540       |            _BitScanForward(&r, (U32)val);                                                       | 15258    23
   541       |            return (unsigned)r >> 3;                                                             | 15259    23
   542       |#       elif (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) || \                   | 15260    23
   543       |                            ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \                   | 15261    23
   544       |                        !defined(__TINYC__) && !defined(LZ4_FORCE_SW_BITCOUNT)                   | 15262    23
   545       |            return (unsigned)__builtin_ctz((U32)val) >> 3;                                       | 15263    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   301


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   546       |#       else                                                                                     | 15264    23
   547       |            const U32 m = 0x01010101;                                                            | 15265    23
   548       |            return (unsigned)((((val - 1) ^ val) & (m - 1)) * m) >> 24;                          | 15266    23
   549       |#       endif                                                                                    | 15267    23
   550       |        }                                                                                        | 15268    23
   551       |    } else   /* Big Endian CPU */ {                                                              | 15269    23
   552       |        if (sizeof(val)==8) {                                                                    | 15270    23
   553       |#       if (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) || \                     | 15271    23
   554       |                            ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \                   | 15272    23
   555       |                        !defined(__TINYC__) && !defined(LZ4_FORCE_SW_BITCOUNT)                   | 15273    23
   556       |            return (unsigned)__builtin_clzll((U64)val) >> 3;                                     | 15274    23
   557       |#       else                                                                                     | 15275    23
   558       |#if 1                                                                                            | 15276    23
   559       |            /* this method is probably faster,                                                   | 15277    23
   560       |             * but adds a 128 bytes lookup table */                                              | 15278    23
   561       |            static const unsigned char ctz7_tab[128] = {                                         | 15279    23
   562       |                7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15280    23
   563       |                4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15281    23
   564       |                5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15282    23
   565       |                4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15283    23
   566       |                6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15284    23
   567       |                4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15285    23
   568       |                5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15286    23
   569       |                4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,                                  | 15287    23
   570       |            };                                                                                   | 15288    23
   571       |            U64 const mask = 0x0101010101010101ULL;                                              | 15289    23
   572       |            U64 const t = (((val >> 8) - mask) | val) & mask;                                    | 15290    23
   573       |            return ctz7_tab[(t * 0x0080402010080402ULL) >> 57];                                  | 15291    23
   574       |#else                                                                                            | 15292    23
   575       |            /* this method doesn't consume memory space like the previous one,                   | 15293    23
   576       |             * but it contains several branches,                                                 | 15294    23
   577       |             * that may end up slowing execution */                                              | 15295    23
   578       |            static const U32 by32 = sizeof(val)*4;  /* 32 on 64 bits (goal), 16 on 32 bits.      | 15296    23
   579       |            Just to avoid some static analyzer complaining about shift by 32 on 32-bits target.  | 15297    23
   580       |            Note that this code path is never triggered in 32-bits mode. */                      | 15298    23
   581       |            unsigned r;                                                                          | 15299    23
   582       |            if (!(val>>by32)) { r=4; } else { r=0; val>>=by32; }                                 | 15300    23
   583       |            if (!(val>>16)) { r+=2; val>>=8; } else { val>>=24; }                                | 15301    23
   584       |            r += (!val);                                                                         | 15302    23
   585       |            return r;                                                                            | 15303    23
   586       |#endif                                                                                           | 15304    23
   587       |#       endif                                                                                    | 15305    23
   588       |        } else /* 32 bits */ {                                                                   | 15306    23
   589       |#       if (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) || \                     | 15307    23
   590       |                            ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \                   | 15308    23
   591       |                                        !defined(LZ4_FORCE_SW_BITCOUNT)                          | 15309    23
   592       |            return (unsigned)__builtin_clz((U32)val) >> 3;                                       | 15310    23
   593       |#       else                                                                                     | 15311    23
   594       |            val >>= 8;                                                                           | 15312    23
   595       |            val = ((((val + 0x00FFFF00) | 0x00FFFFFF) + val) |                                   | 15313    23
   596       |              (val + 0x00FF0000)) >> 24;                                                         | 15314    23
   597       |            return (unsigned)val ^ 3;                                                            | 15315    23
   598       |#       endif                                                                                    | 15316    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   302


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   599       |        }                                                                                        | 15317    23
   600       |    }                                                                                            | 15318    23
   601       |}                                                                                                | 15319    23
   602       |                                                                                                 | 15320    23
   603       |                                                                                                 | 15321    23
   604       |#define STEPSIZE sizeof(reg_t)                                                                   | 15322    23
   605       |LZ4_FORCE_INLINE                                                                                 | 15323    23
   605       +static inline                                                                                    + 15323    23
   606       |unsigned LZ4_count(const BYTE* pIn, const BYTE* pMatch, const BYTE* pInLimit)                    | 15324    23
   607       |{                                                                                                | 15325    23
   608       |    const BYTE* const pStart = pIn;                                                              | 15326    23
   609       |                                                                                                 | 15327    23
   610       |    if (likely(pIn < pInLimit-(STEPSIZE-1))) {                                                   | 15328    23
   610       +        if (((pIn < pInLimit-(sizeof(reg_t)-1)) != 0)) {                                         + 15328    23
   611       |        reg_t const diff = LZ4_read_ARCH(pMatch) ^ LZ4_read_ARCH(pIn);                           | 15329    23
   612       |        if (!diff) {                                                                             | 15330    23
   613       |            pIn+=STEPSIZE; pMatch+=STEPSIZE;                                                     | 15331    23
   613       +                        pIn+=sizeof(reg_t); pMatch+=sizeof(reg_t);                               + 15331    23
   614       |        } else {                                                                                 | 15332    23
   615       |            return LZ4_NbCommonBytes(diff);                                                      | 15333    23
   616       |    }   }                                                                                        | 15334    23
   617       |                                                                                                 | 15335    23
   618       |    while (likely(pIn < pInLimit-(STEPSIZE-1))) {                                                | 15336    23
   618       +        while (((pIn < pInLimit-(sizeof(reg_t)-1)) != 0)) {                                      + 15336    23
   619       |        reg_t const diff = LZ4_read_ARCH(pMatch) ^ LZ4_read_ARCH(pIn);                           | 15337    23
   620       |        if (!diff) { pIn+=STEPSIZE; pMatch+=STEPSIZE; continue; }                                | 15338    23
   620       +                if (!diff) { pIn+=sizeof(reg_t); pMatch+=sizeof(reg_t); continue; }              + 15338    23
   621       |        pIn += LZ4_NbCommonBytes(diff);                                                          | 15339    23
   622       |        return (unsigned)(pIn - pStart);                                                         | 15340    23
   623       |    }                                                                                            | 15341    23
   624       |                                                                                                 | 15342    23
   625       |    if ((STEPSIZE==8) && (pIn<(pInLimit-3)) && (LZ4_read32(pMatch) == LZ4_read32(pIn))) { pIn+=4;| 15343    23
   625       + pMatch+=4; }                                                                                    + 15343    23
   625       +        if ((sizeof(reg_t)==8) && (pIn<(pInLimit-3)) && (LZ4_read32(pMatch) == LZ4_read32(pIn))) + 15343    23
   625       +{ pIn+=4; pMatch+=4; }                                                                           + 15343    23
   626       |    if ((pIn<(pInLimit-1)) && (LZ4_read16(pMatch) == LZ4_read16(pIn))) { pIn+=2; pMatch+=2; }    | 15344    23
   627       |    if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;                                              | 15345    23
   628       |    return (unsigned)(pIn - pStart);                                                             | 15346    23
   629       |}                                                                                                | 15347    23
   630       |                                                                                                 | 15348    23
   631       |                                                                                                 | 15349    23
   632       |#ifndef LZ4_COMMONDEFS_ONLY                                                                      | 15350    23
   633       |/*-************************************                                                          | 15351    23
   634       |*  Local Constants                                                                               | 15352    23
   635       |**************************************/                                                          | 15353    23
   636       |static const int LZ4_64Klimit = ((64 KB) + (MFLIMIT-1));                                         | 15354    23
   637       |static const U32 LZ4_skipTrigger = 6;  /* Increase this value ==> compression run slower on incom| 15355    23
   637       +pressible data */                                                                                + 15355    23
   638       |                                                                                                 | 15356    23
   639       |                                                                                                 | 15357    23
   640       |/*-************************************                                                          | 15358    23
   641       |*  Local Structures and types                                                                    | 15359    23
   642       |**************************************/                                                          | 15360    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   303


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   643       |typedef enum { clearedTable = 0, byPtr, byU32, byU16 } tableType_t;                              | 15361    23
   644       |                                                                                                 | 15362    23
   645       |/**                                                                                              | 15363    23
   646       | * This enum distinguishes several different modes of accessing previous                         | 15364    23
   647       | * content in the stream.                                                                        | 15365    23
   648       | *                                                                                               | 15366    23
   649       | * - noDict        : There is no preceding content.                                              | 15367    23
   650       | * - withPrefix64k : Table entries up to ctx->dictSize before the current blob                   | 15368    23
   651       | *                   blob being compressed are valid and refer to the preceding                  | 15369    23
   652       | *                   content (of length ctx->dictSize), which is available                       | 15370    23
   653       | *                   contiguously preceding in memory the content currently                      | 15371    23
   654       | *                   being compressed.                                                           | 15372    23
   655       | * - usingExtDict  : Like withPrefix64k, but the preceding content is somewhere                  | 15373    23
   656       | *                   else in memory, starting at ctx->dictionary with length                     | 15374    23
   657       | *                   ctx->dictSize.                                                              | 15375    23
   658       | * - usingDictCtx  : Like usingExtDict, but everything concerning the preceding                  | 15376    23
   659       | *                   content is in a separate context, pointed to by                             | 15377    23
   660       | *                   ctx->dictCtx. ctx->dictionary, ctx->dictSize, and table                     | 15378    23
   661       | *                   entries in the current context that refer to positions                      | 15379    23
   662       | *                   preceding the beginning of the current compression are                      | 15380    23
   663       | *                   ignored. Instead, ctx->dictCtx->dictionary and ctx->dictCtx                 | 15381    23
   664       | *                   ->dictSize describe the location and size of the preceding                  | 15382    23
   665       | *                   content, and matches are found by looking in the ctx                        | 15383    23
   666       | *                   ->dictCtx->hashTable.                                                       | 15384    23
   667       | */                                                                                              | 15385    23
   668       |typedef enum { noDict = 0, withPrefix64k, usingExtDict, usingDictCtx } dict_directive;           | 15386    23
   669       |typedef enum { noDictIssue = 0, dictSmall } dictIssue_directive;                                 | 15387    23
   670       |                                                                                                 | 15388    23
   671       |                                                                                                 | 15389    23
   672       |/*-************************************                                                          | 15390    23
   673       |*  Local Utils                                                                                   | 15391    23
   674       |**************************************/                                                          | 15392    23
   675       |int LZ4_versionNumber (void) { return LZ4_VERSION_NUMBER; }                                      | 15393    23
   676       |const char* LZ4_versionString(void) { return LZ4_VERSION_STRING; }                               | 15394    23
   677       |int LZ4_compressBound(int isize)  { return LZ4_COMPRESSBOUND(isize); }                           | 15395    23
   678       |int LZ4_sizeofState(void) { return LZ4_STREAMSIZE; }                                             | 15396    23
   679       |                                                                                                 | 15397    23
   680       |                                                                                                 | 15398    23
   681       |/*-************************************                                                          | 15399    23
   682       |*  Internal Definitions used in Tests                                                            | 15400    23
   683       |**************************************/                                                          | 15401    23
   684       |#if defined (__cplusplus)                                                                        | 15402    23
   685       |extern "C" {                                                                                     | 15403    23
   686       |#endif                                                                                           | 15404    23
   687       |                                                                                                 | 15405    23
   688       |int LZ4_compress_forceExtDict (LZ4_stream_t* LZ4_dict, const char* source, char* dest, int srcSiz| 15406    23
   688       +e);                                                                                              + 15406    23
   689       |                                                                                                 | 15407    23
   690       |int LZ4_decompress_safe_forceExtDict(const char* source, char* dest,                             | 15408    23
   691       |                                     int compressedSize, int maxOutputSize,                      | 15409    23
   692       |                                     const void* dictStart, size_t dictSize);                    | 15410    23
   693       |                                                                                                 | 15411    23
   694       |#if defined (__cplusplus)                                                                        | 15412    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   304


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   695       |}                                                                                                | 15413    23
   696       |#endif                                                                                           | 15414    23
   697       |                                                                                                 | 15415    23
   698       |/*-******************************                                                                | 15416    23
   699       |*  Compression functions                                                                         | 15417    23
   700       |********************************/                                                                | 15418    23
   701       |LZ4_FORCE_INLINE U32 LZ4_hash4(U32 sequence, tableType_t const tableType)                        | 15419    23
   702       |{                                                                                                | 15420    23
   703       |    if (tableType == byU16)                                                                      | 15421    23
   704       |        return ((sequence * 2654435761U) >> ((MINMATCH*8)-(LZ4_HASHLOG+1)));                     | 15422    23
   705       |    else                                                                                         | 15423    23
   706       |        return ((sequence * 2654435761U) >> ((MINMATCH*8)-LZ4_HASHLOG));                         | 15424    23
   707       |}                                                                                                | 15425    23
   708       |                                                                                                 | 15426    23
   709       |LZ4_FORCE_INLINE U32 LZ4_hash5(U64 sequence, tableType_t const tableType)                        | 15427    23
   710       |{                                                                                                | 15428    23
   711       |    const U32 hashLog = (tableType == byU16) ? LZ4_HASHLOG+1 : LZ4_HASHLOG;                      | 15429    23
   712       |    if (LZ4_isLittleEndian()) {                                                                  | 15430    23
   713       |        const U64 prime5bytes = 889523592379ULL;                                                 | 15431    23
   714       |        return (U32)(((sequence << 24) * prime5bytes) >> (64 - hashLog));                        | 15432    23
   715       |    } else {                                                                                     | 15433    23
   716       |        const U64 prime8bytes = 11400714785074694791ULL;                                         | 15434    23
   717       |        return (U32)(((sequence >> 24) * prime8bytes) >> (64 - hashLog));                        | 15435    23
   718       |    }                                                                                            | 15436    23
   719       |}                                                                                                | 15437    23
   720       |                                                                                                 | 15438    23
   721       |LZ4_FORCE_INLINE U32 LZ4_hashPosition(const void* const p, tableType_t const tableType)          | 15439    23
   722       |{                                                                                                | 15440    23
   723       |    if ((sizeof(reg_t)==8) && (tableType != byU16)) return LZ4_hash5(LZ4_read_ARCH(p), tableType)| 15441    23
   723       +;                                                                                                + 15441    23
   724       |    return LZ4_hash4(LZ4_read32(p), tableType);                                                  | 15442    23
   725       |}                                                                                                | 15443    23
   726       |                                                                                                 | 15444    23
   727       |LZ4_FORCE_INLINE void LZ4_clearHash(U32 h, void* tableBase, tableType_t const tableType)         | 15445    23
   728       |{                                                                                                | 15446    23
   729       |    switch (tableType)                                                                           | 15447    23
   730       |    {                                                                                            | 15448    23
   731       |    default: /* fallthrough */                                                                   | 15449    23
   732       |    case clearedTable: { /* illegal! */ assert(0); return; }                                     | 15450    23
   733       |    case byPtr: { const BYTE** hashTable = (const BYTE**)tableBase; hashTable[h] = NULL; return; | 15451    23
   733       +}                                                                                                + 15451    23
   734       |    case byU32: { U32* hashTable = (U32*) tableBase; hashTable[h] = 0; return; }                 | 15452    23
   735       |    case byU16: { U16* hashTable = (U16*) tableBase; hashTable[h] = 0; return; }                 | 15453    23
   736       |    }                                                                                            | 15454    23
   737       |}                                                                                                | 15455    23
   738       |                                                                                                 | 15456    23
   739       |LZ4_FORCE_INLINE void LZ4_putIndexOnHash(U32 idx, U32 h, void* tableBase, tableType_t const table| 15457    23
   739       +Type)                                                                                            + 15457    23
   740       |{                                                                                                | 15458    23
   741       |    switch (tableType)                                                                           | 15459    23
   742       |    {                                                                                            | 15460    23
   743       |    default: /* fallthrough */                                                                   | 15461    23
   744       |    case clearedTable: /* fallthrough */                                                         | 15462    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   305


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   745       |    case byPtr: { /* illegal! */ assert(0); return; }                                            | 15463    23
   746       |    case byU32: { U32* hashTable = (U32*) tableBase; hashTable[h] = idx; return; }               | 15464    23
   747       |    case byU16: { U16* hashTable = (U16*) tableBase; assert(idx < 65536); hashTable[h] = (U16)idx| 15465    23
   747       +; return; }                                                                                      + 15465    23
   748       |    }                                                                                            | 15466    23
   749       |}                                                                                                | 15467    23
   750       |                                                                                                 | 15468    23
   751       |LZ4_FORCE_INLINE void LZ4_putPositionOnHash(const BYTE* p, U32 h,                                | 15469    23
   752       |                                  void* tableBase, tableType_t const tableType,                  | 15470    23
   753       |                            const BYTE* srcBase)                                                 | 15471    23
   754       |{                                                                                                | 15472    23
   755       |    switch (tableType)                                                                           | 15473    23
   756       |    {                                                                                            | 15474    23
   757       |    case clearedTable: { /* illegal! */ assert(0); return; }                                     | 15475    23
   758       |    case byPtr: { const BYTE** hashTable = (const BYTE**)tableBase; hashTable[h] = p; return; }  | 15476    23
   759       |    case byU32: { U32* hashTable = (U32*) tableBase; hashTable[h] = (U32)(p-srcBase); return; }  | 15477    23
   760       |    case byU16: { U16* hashTable = (U16*) tableBase; hashTable[h] = (U16)(p-srcBase); return; }  | 15478    23
   761       |    }                                                                                            | 15479    23
   762       |}                                                                                                | 15480    23
   763       |                                                                                                 | 15481    23
   764       |LZ4_FORCE_INLINE void LZ4_putPosition(const BYTE* p, void* tableBase, tableType_t tableType, cons| 15482    23
   764       +t BYTE* srcBase)                                                                                 + 15482    23
   765       |{                                                                                                | 15483    23
   766       |    U32 const h = LZ4_hashPosition(p, tableType);                                                | 15484    23
   767       |    LZ4_putPositionOnHash(p, h, tableBase, tableType, srcBase);                                  | 15485    23
   768       |}                                                                                                | 15486    23
   769       |                                                                                                 | 15487    23
   770       |/* LZ4_getIndexOnHash() :                                                                        | 15488    23
   771       | * Index of match position registered in hash table.                                             | 15489    23
   772       | * hash position must be calculated by using base+index, or dictBase+index.                      | 15490    23
   773       | * Assumption 1 : only valid if tableType == byU32 or byU16.                                     | 15491    23
   774       | * Assumption 2 : h is presumed valid (within limits of hash table)                              | 15492    23
   775       | */                                                                                              | 15493    23
   776       |LZ4_FORCE_INLINE U32 LZ4_getIndexOnHash(U32 h, const void* tableBase, tableType_t tableType)     | 15494    23
   777       |{                                                                                                | 15495    23
   778       |    LZ4_STATIC_ASSERT(LZ4_MEMORY_USAGE > 2);                                                     | 15496    23
   779       |    if (tableType == byU32) {                                                                    | 15497    23
   780       |        const U32* const hashTable = (const U32*) tableBase;                                     | 15498    23
   781       |        assert(h < (1U << (LZ4_MEMORY_USAGE-2)));                                                | 15499    23
   782       |        return hashTable[h];                                                                     | 15500    23
   783       |    }                                                                                            | 15501    23
   784       |    if (tableType == byU16) {                                                                    | 15502    23
   785       |        const U16* const hashTable = (const U16*) tableBase;                                     | 15503    23
   786       |        assert(h < (1U << (LZ4_MEMORY_USAGE-1)));                                                | 15504    23
   787       |        return hashTable[h];                                                                     | 15505    23
   788       |    }                                                                                            | 15506    23
   789       |    assert(0); return 0;  /* forbidden case */                                                   | 15507    23
   790       |}                                                                                                | 15508    23
   791       |                                                                                                 | 15509    23
   792       |static const BYTE* LZ4_getPositionOnHash(U32 h, const void* tableBase, tableType_t tableType, con| 15510    23
   792       +st BYTE* srcBase)                                                                                + 15510    23
   793       |{                                                                                                | 15511    23
   794       |    if (tableType == byPtr) { const BYTE* const* hashTable = (const BYTE* const*) tableBase; retu| 15512    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   306


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   794       +rn hashTable[h]; }                                                                               + 15512    23
   795       |    if (tableType == byU32) { const U32* const hashTable = (const U32*) tableBase; return hashTab| 15513    23
   795       +le[h] + srcBase; }                                                                               + 15513    23
   796       |    { const U16* const hashTable = (const U16*) tableBase; return hashTable[h] + srcBase; }   /* | 15514    23
   796       +default, to ensure a return */                                                                   + 15514    23
   797       |}                                                                                                | 15515    23
   798       |                                                                                                 | 15516    23
   799       |LZ4_FORCE_INLINE const BYTE*                                                                     | 15517    23
   800       |LZ4_getPosition(const BYTE* p,                                                                   | 15518    23
   801       |                const void* tableBase, tableType_t tableType,                                    | 15519    23
   802       |                const BYTE* srcBase)                                                             | 15520    23
   803       |{                                                                                                | 15521    23
   804       |    U32 const h = LZ4_hashPosition(p, tableType);                                                | 15522    23
   805       |    return LZ4_getPositionOnHash(h, tableBase, tableType, srcBase);                              | 15523    23
   806       |}                                                                                                | 15524    23
   807       |                                                                                                 | 15525    23
   808       |LZ4_FORCE_INLINE void                                                                            | 15526    23
   809       |LZ4_prepareTable(LZ4_stream_t_internal* const cctx,                                              | 15527    23
   810       |           const int inputSize,                                                                  | 15528    23
   811       |           const tableType_t tableType) {                                                        | 15529    23
   812       |    /* If the table hasn't been used, it's guaranteed to be zeroed out, and is                   | 15530    23
   813       |     * therefore safe to use no matter what mode we're in. Otherwise, we figure                  | 15531    23
   814       |     * out if it's safe to leave as is or whether it needs to be reset.                          | 15532    23
   815       |     */                                                                                          | 15533    23
   816       |    if ((tableType_t)cctx->tableType != clearedTable) {                                          | 15534    23
   817       |        assert(inputSize >= 0);                                                                  | 15535    23
   818       |        if ((tableType_t)cctx->tableType != tableType                                            | 15536    23
   819       |          || ((tableType == byU16) && cctx->currentOffset + (unsigned)inputSize >= 0xFFFFU)      | 15537    23
   820       |          || ((tableType == byU32) && cctx->currentOffset > 1 GB)                                | 15538    23
   821       |          || tableType == byPtr                                                                  | 15539    23
   822       |          || inputSize >= 4 KB)                                                                  | 15540    23
   823       |        {                                                                                        | 15541    23
   824       |            DEBUGLOG(4, "LZ4_prepareTable: Resetting table in %p", cctx);                        | 15542    23
   825       |            MEM_INIT(cctx->hashTable, 0, LZ4_HASHTABLESIZE);                                     | 15543    23
   826       |            cctx->currentOffset = 0;                                                             | 15544    23
   827       |            cctx->tableType = (U32)clearedTable;                                                 | 15545    23
   828       |        } else {                                                                                 | 15546    23
   829       |            DEBUGLOG(4, "LZ4_prepareTable: Re-use hash table (no reset)");                       | 15547    23
   830       |        }                                                                                        | 15548    23
   831       |    }                                                                                            | 15549    23
   832       |                                                                                                 | 15550    23
   833       |    /* Adding a gap, so all previous entries are > LZ4_DISTANCE_MAX back, is faster              | 15551    23
   834       |     * than compressing without a gap. However, compressing with                                 | 15552    23
   835       |     * currentOffset == 0 is faster still, so we preserve that case.                             | 15553    23
   836       |     */                                                                                          | 15554    23
   837       |    if (cctx->currentOffset != 0 && tableType == byU32) {                                        | 15555    23
   838       |        DEBUGLOG(5, "LZ4_prepareTable: adding 64KB to currentOffset");                           | 15556    23
   839       |        cctx->currentOffset += 64 KB;                                                            | 15557    23
   840       |    }                                                                                            | 15558    23
   841       |                                                                                                 | 15559    23
   842       |    /* Finally, clear history */                                                                 | 15560    23
   843       |    cctx->dictCtx = NULL;                                                                        | 15561    23
   844       |    cctx->dictionary = NULL;                                                                     | 15562    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   307


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   845       |    cctx->dictSize = 0;                                                                          | 15563    23
   846       |}                                                                                                | 15564    23
   847       |                                                                                                 | 15565    23
   848       |/** LZ4_compress_generic() :                                                                     | 15566    23
   849       | *  inlined, to ensure branches are decided at compilation time.                                 | 15567    23
   850       | *  Presumed already validated at this stage:                                                    | 15568    23
   851       | *  - source != NULL                                                                             | 15569    23
   852       | *  - inputSize > 0                                                                              | 15570    23
   853       | */                                                                                              | 15571    23
   854       |LZ4_FORCE_INLINE int LZ4_compress_generic_validated(                                             | 15572    23
   855       |                 LZ4_stream_t_internal* const cctx,                                              | 15573    23
   856       |                 const char* const source,                                                       | 15574    23
   857       |                 char* const dest,                                                               | 15575    23
   858       |                 const int inputSize,                                                            | 15576    23
   859       |                 int *inputConsumed, /* only written when outputDirective == fillOutput */       | 15577    23
   860       |                 const int maxOutputSize,                                                        | 15578    23
   861       |                 const limitedOutput_directive outputDirective,                                  | 15579    23
   862       |                 const tableType_t tableType,                                                    | 15580    23
   863       |                 const dict_directive dictDirective,                                             | 15581    23
   864       |                 const dictIssue_directive dictIssue,                                            | 15582    23
   865       |                 const int acceleration)                                                         | 15583    23
   866       |{                                                                                                | 15584    23
   867       |    int result;                                                                                  | 15585    23
   868       |    const BYTE* ip = (const BYTE*) source;                                                       | 15586    23
   869       |                                                                                                 | 15587    23
   870       |    U32 const startIndex = cctx->currentOffset;                                                  | 15588    23
   871       |    const BYTE* base = (const BYTE*) source - startIndex;                                        | 15589    23
   872       |    const BYTE* lowLimit;                                                                        | 15590    23
   873       |                                                                                                 | 15591    23
   874       |    const LZ4_stream_t_internal* dictCtx = (const LZ4_stream_t_internal*) cctx->dictCtx;         | 15592    23
   875       |    const BYTE* const dictionary =                                                               | 15593    23
   876       |        dictDirective == usingDictCtx ? dictCtx->dictionary : cctx->dictionary;                  | 15594    23
   877       |    const U32 dictSize =                                                                         | 15595    23
   878       |        dictDirective == usingDictCtx ? dictCtx->dictSize : cctx->dictSize;                      | 15596    23
   879       |    const U32 dictDelta = (dictDirective == usingDictCtx) ? startIndex - dictCtx->currentOffset :| 15597    23
   879       + 0;   /* make indexes in dictCtx comparable with index in current context */                     + 15597    23
   880       |                                                                                                 | 15598    23
   881       |    int const maybe_extMem = (dictDirective == usingExtDict) || (dictDirective == usingDictCtx); | 15599    23
   882       |    U32 const prefixIdxLimit = startIndex - dictSize;   /* used when dictDirective == dictSmall *| 15600    23
   882       +/                                                                                                + 15600    23
   883       |    const BYTE* const dictEnd = dictionary ? dictionary + dictSize : dictionary;                 | 15601    23
   884       |    const BYTE* anchor = (const BYTE*) source;                                                   | 15602    23
   885       |    const BYTE* const iend = ip + inputSize;                                                     | 15603    23
   886       |    const BYTE* const mflimitPlusOne = iend - MFLIMIT + 1;                                       | 15604    23
   887       |    const BYTE* const matchlimit = iend - LASTLITERALS;                                          | 15605    23
   888       |                                                                                                 | 15606    23
   889       |    /* the dictCtx currentOffset is indexed on the start of the dictionary,                      | 15607    23
   890       |     * while a dictionary in the current context precedes the currentOffset */                   | 15608    23
   891       |    const BYTE* dictBase = !dictionary ? NULL : (dictDirective == usingDictCtx) ?                | 15609    23
   892       |                            dictionary + dictSize - dictCtx->currentOffset :                     | 15610    23
   893       |                            dictionary + dictSize - startIndex;                                  | 15611    23
   894       |                                                                                                 | 15612    23
   895       |    BYTE* op = (BYTE*) dest;                                                                     | 15613    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   308


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   896       |    BYTE* const olimit = op + maxOutputSize;                                                     | 15614    23
   897       |                                                                                                 | 15615    23
   898       |    U32 offset = 0;                                                                              | 15616    23
   899       |    U32 forwardH;                                                                                | 15617    23
   900       |                                                                                                 | 15618    23
   901       |    DEBUGLOG(5, "LZ4_compress_generic_validated: srcSize=%i, tableType=%u", inputSize, tableType)| 15619    23
   901       +;                                                                                                + 15619    23
   902       |    assert(ip != NULL);                                                                          | 15620    23
   903       |    /* If init conditions are not met, we don't have to mark stream                              | 15621    23
   904       |     * as having dirty context, since no action was taken yet */                                 | 15622    23
   905       |    if (outputDirective == fillOutput && maxOutputSize < 1) { return 0; } /* Impossible to store | 15623    23
   905       +anything */                                                                                      + 15623    23
   906       |    if ((tableType == byU16) && (inputSize>=LZ4_64Klimit)) { return 0; }  /* Size too large (not | 15624    23
   906       +within 64K limit) */                                                                             + 15624    23
   907       |    if (tableType==byPtr) assert(dictDirective==noDict);      /* only supported use case with byP| 15625    23
   907       +tr */                                                                                            + 15625    23
   908       |    assert(acceleration >= 1);                                                                   | 15626    23
   909       |                                                                                                 | 15627    23
   910       |    lowLimit = (const BYTE*)source - (dictDirective == withPrefix64k ? dictSize : 0);            | 15628    23
   911       |                                                                                                 | 15629    23
   912       |    /* Update context state */                                                                   | 15630    23
   913       |    if (dictDirective == usingDictCtx) {                                                         | 15631    23
   914       |        /* Subsequent linked blocks can't use the dictionary. */                                 | 15632    23
   915       |        /* Instead, they use the block we just compressed. */                                    | 15633    23
   916       |        cctx->dictCtx = NULL;                                                                    | 15634    23
   917       |        cctx->dictSize = (U32)inputSize;                                                         | 15635    23
   918       |    } else {                                                                                     | 15636    23
   919       |        cctx->dictSize += (U32)inputSize;                                                        | 15637    23
   920       |    }                                                                                            | 15638    23
   921       |    cctx->currentOffset += (U32)inputSize;                                                       | 15639    23
   922       |    cctx->tableType = (U32)tableType;                                                            | 15640    23
   923       |                                                                                                 | 15641    23
   924       |    if (inputSize<LZ4_minLength) goto _last_literals;        /* Input too small, no compression (| 15642    23
   924       +all literals) */                                                                                 + 15642    23
   925       |                                                                                                 | 15643    23
   926       |    /* First Byte */                                                                             | 15644    23
   927       |    LZ4_putPosition(ip, cctx->hashTable, tableType, base);                                       | 15645    23
   928       |    ip++; forwardH = LZ4_hashPosition(ip, tableType);                                            | 15646    23
   929       |                                                                                                 | 15647    23
   930       |    /* Main Loop */                                                                              | 15648    23
   931       |    for ( ; ; ) {                                                                                | 15649    23
   932       |        const BYTE* match;                                                                       | 15650    23
   933       |        BYTE* token;                                                                             | 15651    23
   934       |        const BYTE* filledIp;                                                                    | 15652    23
   935       |                                                                                                 | 15653    23
   936       |        /* Find a match */                                                                       | 15654    23
   937       |        if (tableType == byPtr) {                                                                | 15655    23
   938       |            const BYTE* forwardIp = ip;                                                          | 15656    23
   939       |            int step = 1;                                                                        | 15657    23
   940       |            int searchMatchNb = acceleration << LZ4_skipTrigger;                                 | 15658    23
   941       |            do {                                                                                 | 15659    23
   942       |                U32 const h = forwardH;                                                          | 15660    23
   943       |                ip = forwardIp;                                                                  | 15661    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   309


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   944       |                forwardIp += step;                                                               | 15662    23
   945       |                step = (searchMatchNb++ >> LZ4_skipTrigger);                                     | 15663    23
   946       |                                                                                                 | 15664    23
   947       |                if (unlikely(forwardIp > mflimitPlusOne)) goto _last_literals;                   | 15665    23
   948       |                assert(ip < mflimitPlusOne);                                                     | 15666    23
   949       |                                                                                                 | 15667    23
   950       |                match = LZ4_getPositionOnHash(h, cctx->hashTable, tableType, base);              | 15668    23
   951       |                forwardH = LZ4_hashPosition(forwardIp, tableType);                               | 15669    23
   952       |                LZ4_putPositionOnHash(ip, h, cctx->hashTable, tableType, base);                  | 15670    23
   953       |                                                                                                 | 15671    23
   954       |            } while ( (match+LZ4_DISTANCE_MAX < ip)                                              | 15672    23
   955       |                   || (LZ4_read32(match) != LZ4_read32(ip)) );                                   | 15673    23
   956       |                                                                                                 | 15674    23
   957       |        } else {   /* byU32, byU16 */                                                            | 15675    23
   958       |                                                                                                 | 15676    23
   959       |            const BYTE* forwardIp = ip;                                                          | 15677    23
   960       |            int step = 1;                                                                        | 15678    23
   961       |            int searchMatchNb = acceleration << LZ4_skipTrigger;                                 | 15679    23
   962       |            do {                                                                                 | 15680    23
   963       |                U32 const h = forwardH;                                                          | 15681    23
   964       |                U32 const current = (U32)(forwardIp - base);                                     | 15682    23
   965       |                U32 matchIndex = LZ4_getIndexOnHash(h, cctx->hashTable, tableType);              | 15683    23
   966       |                assert(matchIndex <= current);                                                   | 15684    23
   967       |                assert(forwardIp - base < (ptrdiff_t)(2 GB - 1));                                | 15685    23
   968       |                ip = forwardIp;                                                                  | 15686    23
   969       |                forwardIp += step;                                                               | 15687    23
   970       |                step = (searchMatchNb++ >> LZ4_skipTrigger);                                     | 15688    23
   971       |                                                                                                 | 15689    23
   972       |                if (unlikely(forwardIp > mflimitPlusOne)) goto _last_literals;                   | 15690    23
   973       |                assert(ip < mflimitPlusOne);                                                     | 15691    23
   974       |                                                                                                 | 15692    23
   975       |                if (dictDirective == usingDictCtx) {                                             | 15693    23
   976       |                    if (matchIndex < startIndex) {                                               | 15694    23
   977       |                        /* there was no match, try the dictionary */                             | 15695    23
   978       |                        assert(tableType == byU32);                                              | 15696    23
   979       |                        matchIndex = LZ4_getIndexOnHash(h, dictCtx->hashTable, byU32);           | 15697    23
   980       |                        match = dictBase + matchIndex;                                           | 15698    23
   981       |                        matchIndex += dictDelta;   /* make dictCtx index comparable with current | 15699    23
   981       +context */                                                                                       + 15699    23
   982       |                        lowLimit = dictionary;                                                   | 15700    23
   983       |                    } else {                                                                     | 15701    23
   984       |                        match = base + matchIndex;                                               | 15702    23
   985       |                        lowLimit = (const BYTE*)source;                                          | 15703    23
   986       |                    }                                                                            | 15704    23
   987       |                } else if (dictDirective==usingExtDict) {                                        | 15705    23
   988       |                    if (matchIndex < startIndex) {                                               | 15706    23
   989       |                        DEBUGLOG(7, "extDict candidate: matchIndex=%5u  <  startIndex=%5u", match| 15707    23
   989       +Index, startIndex);                                                                              + 15707    23
   990       |                        assert(startIndex - matchIndex >= MINMATCH);                             | 15708    23
   991       |                        match = dictBase + matchIndex;                                           | 15709    23
   992       |                        lowLimit = dictionary;                                                   | 15710    23
   993       |                    } else {                                                                     | 15711    23
   994       |                        match = base + matchIndex;                                               | 15712    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   310


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   995       |                        lowLimit = (const BYTE*)source;                                          | 15713    23
   996       |                    }                                                                            | 15714    23
   997       |                } else {   /* single continuous memory segment */                                | 15715    23
   998       |                    match = base + matchIndex;                                                   | 15716    23
   999       |                }                                                                                | 15717    23
  1000       |                forwardH = LZ4_hashPosition(forwardIp, tableType);                               | 15718    23
  1001       |                LZ4_putIndexOnHash(current, h, cctx->hashTable, tableType);                      | 15719    23
  1002       |                                                                                                 | 15720    23
  1003       |                DEBUGLOG(7, "candidate at pos=%u  (offset=%u \n", matchIndex, current - matchInde| 15721    23
  1003       +x);                                                                                              + 15721    23
  1004       |                if ((dictIssue == dictSmall) && (matchIndex < prefixIdxLimit)) { continue; }    /| 15722    23
  1004       +* match outside of valid area */                                                                 + 15722    23
  1005       |                assert(matchIndex < current);                                                    | 15723    23
  1006       |                if ( ((tableType != byU16) || (LZ4_DISTANCE_MAX < LZ4_DISTANCE_ABSOLUTE_MAX))    | 15724    23
  1007       |                  && (matchIndex+LZ4_DISTANCE_MAX < current)) {                                  | 15725    23
  1008       |                    continue;                                                                    | 15726    23
  1009       |                } /* too far */                                                                  | 15727    23
  1010       |                assert((current - matchIndex) <= LZ4_DISTANCE_MAX);  /* match now expected within| 15728    23
  1010       + distance */                                                                                     + 15728    23
  1011       |                                                                                                 | 15729    23
  1012       |                if (LZ4_read32(match) == LZ4_read32(ip)) {                                       | 15730    23
  1013       |                    if (maybe_extMem) offset = current - matchIndex;                             | 15731    23
  1014       |                    break;   /* match found */                                                   | 15732    23
  1015       |                }                                                                                | 15733    23
  1016       |                                                                                                 | 15734    23
  1017       |            } while(1);                                                                          | 15735    23
  1018       |        }                                                                                        | 15736    23
  1019       |                                                                                                 | 15737    23
  1020       |        /* Catch up */                                                                           | 15738    23
  1021       |        filledIp = ip;                                                                           | 15739    23
  1022       |        while (((ip>anchor) & (match > lowLimit)) && (unlikely(ip[-1]==match[-1]))) { ip--; match| 15740    23
  1022       +--; }                                                                                            + 15740    23
  1023       |                                                                                                 | 15741    23
  1024       |        /* Encode Literals */                                                                    | 15742    23
  1025       |        {   unsigned const litLength = (unsigned)(ip - anchor);                                  | 15743    23
  1026       |            token = op++;                                                                        | 15744    23
  1027       |            if ((outputDirective == limitedOutput) &&  /* Check output buffer overflow */        | 15745    23
  1028       |                (unlikely(op + litLength + (2 + 1 + LASTLITERALS) + (litLength/255) > olimit)) ) | 15746    23
  1028       +{                                                                                                + 15746    23
  1029       |                return 0;   /* cannot compress within `dst` budget. Stored indexes in hash table | 15747    23
  1029       +are nonetheless fine */                                                                          + 15747    23
  1030       |            }                                                                                    | 15748    23
  1031       |            if ((outputDirective == fillOutput) &&                                               | 15749    23
  1032       |                (unlikely(op + (litLength+240)/255 /* litlen */ + litLength /* literals */ + 2 /*| 15750    23
  1032       + offset */ + 1 /* token */ + MFLIMIT - MINMATCH /* min last literals so last match is <= end - MF+ 15750    23
  1032       +LIMIT */ > olimit))) {                                                                           + 15750    23
  1033       |                op--;                                                                            | 15751    23
  1034       |                goto _last_literals;                                                             | 15752    23
  1035       |            }                                                                                    | 15753    23
  1036       |            if (litLength >= RUN_MASK) {                                                         | 15754    23
  1037       |                int len = (int)(litLength - RUN_MASK);                                           | 15755    23
  1038       |                *token = (RUN_MASK<<ML_BITS);                                                    | 15756    23
  1039       |                for(; len >= 255 ; len-=255) *op++ = 255;                                        | 15757    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   311


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1040       |                *op++ = (BYTE)len;                                                               | 15758    23
  1041       |            }                                                                                    | 15759    23
  1042       |            else *token = (BYTE)(litLength<<ML_BITS);                                            | 15760    23
  1043       |                                                                                                 | 15761    23
  1044       |            /* Copy Literals */                                                                  | 15762    23
  1045       |            LZ4_wildCopy8(op, anchor, op+litLength);                                             | 15763    23
  1046       |            op+=litLength;                                                                       | 15764    23
  1047       |            DEBUGLOG(6, "seq.start:%i, literals=%u, match.start:%i",                             | 15765    23
  1048       |                        (int)(anchor-(const BYTE*)source), litLength, (int)(ip-(const BYTE*)sourc| 15766    23
  1048       +e));                                                                                             + 15766    23
  1049       |        }                                                                                        | 15767    23
  1050       |                                                                                                 | 15768    23
  1051       |_next_match:                                                                                     | 15769    23
  1052       |        /* at this stage, the following variables must be correctly set :                        | 15770    23
  1053       |         * - ip : at start of LZ operation                                                       | 15771    23
  1054       |         * - match : at start of previous pattern occurence; can be within current prefix, or wit| 15772    23
  1054       +hin extDict                                                                                      + 15772    23
  1055       |         * - offset : if maybe_ext_memSegment==1 (constant)                                      | 15773    23
  1056       |         * - lowLimit : must be == dictionary to mean "match is within extDict"; must be == sourc| 15774    23
  1056       +e otherwise                                                                                      + 15774    23
  1057       |         * - token and *token : position to write 4-bits for match length; higher 4-bits for lite| 15775    23
  1057       +ral length supposed already written                                                              + 15775    23
  1058       |         */                                                                                      | 15776    23
  1059       |                                                                                                 | 15777    23
  1060       |        if ((outputDirective == fillOutput) &&                                                   | 15778    23
  1061       |            (op + 2 /* offset */ + 1 /* token */ + MFLIMIT - MINMATCH /* min last literals so las| 15779    23
  1061       +t match is <= end - MFLIMIT */ > olimit)) {                                                      + 15779    23
  1062       |            /* the match was too close to the end, rewind and go to last literals */             | 15780    23
  1063       |            op = token;                                                                          | 15781    23
  1064       |            goto _last_literals;                                                                 | 15782    23
  1065       |        }                                                                                        | 15783    23
  1066       |                                                                                                 | 15784    23
  1067       |        /* Encode Offset */                                                                      | 15785    23
  1068       |        if (maybe_extMem) {   /* static test */                                                  | 15786    23
  1069       |            DEBUGLOG(6, "             with offset=%u  (ext if > %i)", offset, (int)(ip - (const B| 15787    23
  1069       +YTE*)source));                                                                                   + 15787    23
  1070       |            assert(offset <= LZ4_DISTANCE_MAX && offset > 0);                                    | 15788    23
  1071       |            LZ4_writeLE16(op, (U16)offset); op+=2;                                               | 15789    23
  1072       |        } else  {                                                                                | 15790    23
  1073       |            DEBUGLOG(6, "             with offset=%u  (same segment)", (U32)(ip - match));       | 15791    23
  1074       |            assert(ip-match <= LZ4_DISTANCE_MAX);                                                | 15792    23
  1075       |            LZ4_writeLE16(op, (U16)(ip - match)); op+=2;                                         | 15793    23
  1076       |        }                                                                                        | 15794    23
  1077       |                                                                                                 | 15795    23
  1078       |        /* Encode MatchLength */                                                                 | 15796    23
  1079       |        {   unsigned matchCode;                                                                  | 15797    23
  1080       |                                                                                                 | 15798    23
  1081       |            if ( (dictDirective==usingExtDict || dictDirective==usingDictCtx)                    | 15799    23
  1082       |              && (lowLimit==dictionary) /* match within extDict */ ) {                           | 15800    23
  1083       |                const BYTE* limit = ip + (dictEnd-match);                                        | 15801    23
  1084       |                assert(dictEnd > match);                                                         | 15802    23
  1085       |                if (limit > matchlimit) limit = matchlimit;                                      | 15803    23
  1086       |                matchCode = LZ4_count(ip+MINMATCH, match+MINMATCH, limit);                       | 15804    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   312


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1087       |                ip += (size_t)matchCode + MINMATCH;                                              | 15805    23
  1088       |                if (ip==limit) {                                                                 | 15806    23
  1089       |                    unsigned const more = LZ4_count(limit, (const BYTE*)source, matchlimit);     | 15807    23
  1090       |                    matchCode += more;                                                           | 15808    23
  1091       |                    ip += more;                                                                  | 15809    23
  1092       |                }                                                                                | 15810    23
  1093       |                DEBUGLOG(6, "             with matchLength=%u starting in extDict", matchCode+MIN| 15811    23
  1093       +MATCH);                                                                                          + 15811    23
  1094       |            } else {                                                                             | 15812    23
  1095       |                matchCode = LZ4_count(ip+MINMATCH, match+MINMATCH, matchlimit);                  | 15813    23
  1096       |                ip += (size_t)matchCode + MINMATCH;                                              | 15814    23
  1097       |                DEBUGLOG(6, "             with matchLength=%u", matchCode+MINMATCH);             | 15815    23
  1098       |            }                                                                                    | 15816    23
  1099       |                                                                                                 | 15817    23
  1100       |            if ((outputDirective) &&    /* Check output buffer overflow */                       | 15818    23
  1101       |                (unlikely(op + (1 + LASTLITERALS) + (matchCode+240)/255 > olimit)) ) {           | 15819    23
  1102       |                if (outputDirective == fillOutput) {                                             | 15820    23
  1103       |                    /* Match description too long : reduce it */                                 | 15821    23
  1104       |                    U32 newMatchCode = 15 /* in token */ - 1 /* to avoid needing a zero byte */ +| 15822    23
  1104       + ((U32)(olimit - op) - 1 - LASTLITERALS) * 255;                                                  + 15822    23
  1105       |                    ip -= matchCode - newMatchCode;                                              | 15823    23
  1106       |                    assert(newMatchCode < matchCode);                                            | 15824    23
  1107       |                    matchCode = newMatchCode;                                                    | 15825    23
  1108       |                    if (unlikely(ip <= filledIp)) {                                              | 15826    23
  1109       |                        /* We have already filled up to filledIp so if ip ends up less than fille| 15827    23
  1109       +dIp                                                                                              + 15827    23
  1110       |                         * we have positions in the hash table beyond the current position. This | 15828    23
  1110       +is                                                                                               + 15828    23
  1111       |                         * a problem if we reuse the hash table. So we have to remove these posit| 15829    23
  1111       +ions                                                                                             + 15829    23
  1112       |                         * from the hash table.                                                  | 15830    23
  1113       |                         */                                                                      | 15831    23
  1114       |                        const BYTE* ptr;                                                         | 15832    23
  1115       |                        DEBUGLOG(5, "Clearing %u positions", (U32)(filledIp - ip));              | 15833    23
  1116       |                        for (ptr = ip; ptr <= filledIp; ++ptr) {                                 | 15834    23
  1117       |                            U32 const h = LZ4_hashPosition(ptr, tableType);                      | 15835    23
  1118       |                            LZ4_clearHash(h, cctx->hashTable, tableType);                        | 15836    23
  1119       |                        }                                                                        | 15837    23
  1120       |                    }                                                                            | 15838    23
  1121       |                } else {                                                                         | 15839    23
  1122       |                    assert(outputDirective == limitedOutput);                                    | 15840    23
  1123       |                    return 0;   /* cannot compress within `dst` budget. Stored indexes in hash ta| 15841    23
  1123       +ble are nonetheless fine */                                                                      + 15841    23
  1124       |                }                                                                                | 15842    23
  1125       |            }                                                                                    | 15843    23
  1126       |            if (matchCode >= ML_MASK) {                                                          | 15844    23
  1127       |                *token += ML_MASK;                                                               | 15845    23
  1128       |                matchCode -= ML_MASK;                                                            | 15846    23
  1129       |                LZ4_write32(op, 0xFFFFFFFF);                                                     | 15847    23
  1130       |                while (matchCode >= 4*255) {                                                     | 15848    23
  1131       |                    op+=4;                                                                       | 15849    23
  1132       |                    LZ4_write32(op, 0xFFFFFFFF);                                                 | 15850    23
  1133       |                    matchCode -= 4*255;                                                          | 15851    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   313


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1134       |                }                                                                                | 15852    23
  1135       |                op += matchCode / 255;                                                           | 15853    23
  1136       |                *op++ = (BYTE)(matchCode % 255);                                                 | 15854    23
  1137       |            } else                                                                               | 15855    23
  1138       |                *token += (BYTE)(matchCode);                                                     | 15856    23
  1139       |        }                                                                                        | 15857    23
  1140       |        /* Ensure we have enough space for the last literals. */                                 | 15858    23
  1141       |        assert(!(outputDirective == fillOutput && op + 1 + LASTLITERALS > olimit));              | 15859    23
  1142       |                                                                                                 | 15860    23
  1143       |        anchor = ip;                                                                             | 15861    23
  1144       |                                                                                                 | 15862    23
  1145       |        /* Test end of chunk */                                                                  | 15863    23
  1146       |        if (ip >= mflimitPlusOne) break;                                                         | 15864    23
  1147       |                                                                                                 | 15865    23
  1148       |        /* Fill table */                                                                         | 15866    23
  1149       |        LZ4_putPosition(ip-2, cctx->hashTable, tableType, base);                                 | 15867    23
  1150       |                                                                                                 | 15868    23
  1151       |        /* Test next position */                                                                 | 15869    23
  1152       |        if (tableType == byPtr) {                                                                | 15870    23
  1153       |                                                                                                 | 15871    23
  1154       |            match = LZ4_getPosition(ip, cctx->hashTable, tableType, base);                       | 15872    23
  1155       |            LZ4_putPosition(ip, cctx->hashTable, tableType, base);                               | 15873    23
  1156       |            if ( (match+LZ4_DISTANCE_MAX >= ip)                                                  | 15874    23
  1157       |              && (LZ4_read32(match) == LZ4_read32(ip)) )                                         | 15875    23
  1158       |            { token=op++; *token=0; goto _next_match; }                                          | 15876    23
  1159       |                                                                                                 | 15877    23
  1160       |        } else {   /* byU32, byU16 */                                                            | 15878    23
  1161       |                                                                                                 | 15879    23
  1162       |            U32 const h = LZ4_hashPosition(ip, tableType);                                       | 15880    23
  1163       |            U32 const current = (U32)(ip-base);                                                  | 15881    23
  1164       |            U32 matchIndex = LZ4_getIndexOnHash(h, cctx->hashTable, tableType);                  | 15882    23
  1165       |            assert(matchIndex < current);                                                        | 15883    23
  1166       |            if (dictDirective == usingDictCtx) {                                                 | 15884    23
  1167       |                if (matchIndex < startIndex) {                                                   | 15885    23
  1168       |                    /* there was no match, try the dictionary */                                 | 15886    23
  1169       |                    matchIndex = LZ4_getIndexOnHash(h, dictCtx->hashTable, byU32);               | 15887    23
  1170       |                    match = dictBase + matchIndex;                                               | 15888    23
  1171       |                    lowLimit = dictionary;   /* required for match length counter */             | 15889    23
  1172       |                    matchIndex += dictDelta;                                                     | 15890    23
  1173       |                } else {                                                                         | 15891    23
  1174       |                    match = base + matchIndex;                                                   | 15892    23
  1175       |                    lowLimit = (const BYTE*)source;  /* required for match length counter */     | 15893    23
  1176       |                }                                                                                | 15894    23
  1177       |            } else if (dictDirective==usingExtDict) {                                            | 15895    23
  1178       |                if (matchIndex < startIndex) {                                                   | 15896    23
  1179       |                    match = dictBase + matchIndex;                                               | 15897    23
  1180       |                    lowLimit = dictionary;   /* required for match length counter */             | 15898    23
  1181       |                } else {                                                                         | 15899    23
  1182       |                    match = base + matchIndex;                                                   | 15900    23
  1183       |                    lowLimit = (const BYTE*)source;   /* required for match length counter */    | 15901    23
  1184       |                }                                                                                | 15902    23
  1185       |            } else {   /* single memory segment */                                               | 15903    23
  1186       |                match = base + matchIndex;                                                       | 15904    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   314


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1187       |            }                                                                                    | 15905    23
  1188       |            LZ4_putIndexOnHash(current, h, cctx->hashTable, tableType);                          | 15906    23
  1189       |            assert(matchIndex < current);                                                        | 15907    23
  1190       |            if ( ((dictIssue==dictSmall) ? (matchIndex >= prefixIdxLimit) : 1)                   | 15908    23
  1191       |              && (((tableType==byU16) && (LZ4_DISTANCE_MAX == LZ4_DISTANCE_ABSOLUTE_MAX)) ? 1 : (| 15909    23
  1191       +matchIndex+LZ4_DISTANCE_MAX >= current))                                                         + 15909    23
  1192       |              && (LZ4_read32(match) == LZ4_read32(ip)) ) {                                       | 15910    23
  1193       |                token=op++;                                                                      | 15911    23
  1194       |                *token=0;                                                                        | 15912    23
  1195       |                if (maybe_extMem) offset = current - matchIndex;                                 | 15913    23
  1196       |                DEBUGLOG(6, "seq.start:%i, literals=%u, match.start:%i",                         | 15914    23
  1197       |                            (int)(anchor-(const BYTE*)source), 0, (int)(ip-(const BYTE*)source));| 15915    23
  1198       |                goto _next_match;                                                                | 15916    23
  1199       |            }                                                                                    | 15917    23
  1200       |        }                                                                                        | 15918    23
  1201       |                                                                                                 | 15919    23
  1202       |        /* Prepare next loop */                                                                  | 15920    23
  1203       |        forwardH = LZ4_hashPosition(++ip, tableType);                                            | 15921    23
  1204       |                                                                                                 | 15922    23
  1205       |    }                                                                                            | 15923    23
  1206       |                                                                                                 | 15924    23
  1207       |_last_literals:                                                                                  | 15925    23
  1208       |    /* Encode Last Literals */                                                                   | 15926    23
  1209       |    {   size_t lastRun = (size_t)(iend - anchor);                                                | 15927    23
  1210       |        if ( (outputDirective) &&  /* Check output buffer overflow */                            | 15928    23
  1211       |            (op + lastRun + 1 + ((lastRun+255-RUN_MASK)/255) > olimit)) {                        | 15929    23
  1212       |            if (outputDirective == fillOutput) {                                                 | 15930    23
  1213       |                /* adapt lastRun to fill 'dst' */                                                | 15931    23
  1214       |                assert(olimit >= op);                                                            | 15932    23
  1215       |                lastRun  = (size_t)(olimit-op) - 1/*token*/;                                     | 15933    23
  1216       |                lastRun -= (lastRun + 256 - RUN_MASK) / 256;  /*additional length tokens*/       | 15934    23
  1217       |            } else {                                                                             | 15935    23
  1218       |                assert(outputDirective == limitedOutput);                                        | 15936    23
  1219       |                return 0;   /* cannot compress within `dst` budget. Stored indexes in hash table | 15937    23
  1219       +are nonetheless fine */                                                                          + 15937    23
  1220       |            }                                                                                    | 15938    23
  1221       |        }                                                                                        | 15939    23
  1222       |        DEBUGLOG(6, "Final literal run : %i literals", (int)lastRun);                            | 15940    23
  1223       |        if (lastRun >= RUN_MASK) {                                                               | 15941    23
  1224       |            size_t accumulator = lastRun - RUN_MASK;                                             | 15942    23
  1225       |            *op++ = RUN_MASK << ML_BITS;                                                         | 15943    23
  1226       |            for(; accumulator >= 255 ; accumulator-=255) *op++ = 255;                            | 15944    23
  1227       |            *op++ = (BYTE) accumulator;                                                          | 15945    23
  1228       |        } else {                                                                                 | 15946    23
  1229       |            *op++ = (BYTE)(lastRun<<ML_BITS);                                                    | 15947    23
  1230       |        }                                                                                        | 15948    23
  1231       |        LZ4_memcpy(op, anchor, lastRun);                                                         | 15949    23
  1232       |        ip = anchor + lastRun;                                                                   | 15950    23
  1233       |        op += lastRun;                                                                           | 15951    23
  1234       |    }                                                                                            | 15952    23
  1235       |                                                                                                 | 15953    23
  1236       |    if (outputDirective == fillOutput) {                                                         | 15954    23
  1237       |        *inputConsumed = (int) (((const char*)ip)-source);                                       | 15955    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   315


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1238       |    }                                                                                            | 15956    23
  1239       |    result = (int)(((char*)op) - dest);                                                          | 15957    23
  1240       |    assert(result > 0);                                                                          | 15958    23
  1241       |    DEBUGLOG(5, "LZ4_compress_generic: compressed %i bytes into %i bytes", inputSize, result);   | 15959    23
  1242       |    return result;                                                                               | 15960    23
  1243       |}                                                                                                | 15961    23
  1244       |                                                                                                 | 15962    23
  1245       |/** LZ4_compress_generic() :                                                                     | 15963    23
  1246       | *  inlined, to ensure branches are decided at compilation time;                                 | 15964    23
  1247       | *  takes care of src == (NULL, 0)                                                               | 15965    23
  1248       | *  and forward the rest to LZ4_compress_generic_validated */                                    | 15966    23
  1249       |LZ4_FORCE_INLINE int LZ4_compress_generic(                                                       | 15967    23
  1250       |                 LZ4_stream_t_internal* const cctx,                                              | 15968    23
  1251       |                 const char* const src,                                                          | 15969    23
  1252       |                 char* const dst,                                                                | 15970    23
  1253       |                 const int srcSize,                                                              | 15971    23
  1254       |                 int *inputConsumed, /* only written when outputDirective == fillOutput */       | 15972    23
  1255       |                 const int dstCapacity,                                                          | 15973    23
  1256       |                 const limitedOutput_directive outputDirective,                                  | 15974    23
  1257       |                 const tableType_t tableType,                                                    | 15975    23
  1258       |                 const dict_directive dictDirective,                                             | 15976    23
  1259       |                 const dictIssue_directive dictIssue,                                            | 15977    23
  1260       |                 const int acceleration)                                                         | 15978    23
  1261       |{                                                                                                | 15979    23
  1262       |    DEBUGLOG(5, "LZ4_compress_generic: srcSize=%i, dstCapacity=%i",                              | 15980    23
  1263       |                srcSize, dstCapacity);                                                           | 15981    23
  1264       |                                                                                                 | 15982    23
  1265       |    if ((U32)srcSize > (U32)LZ4_MAX_INPUT_SIZE) { return 0; }  /* Unsupported srcSize, too large | 15983    23
  1265       +(or negative) */                                                                                 + 15983    23
  1266       |    if (srcSize == 0) {   /* src == NULL supported if srcSize == 0 */                            | 15984    23
  1267       |        if (outputDirective != notLimited && dstCapacity <= 0) return 0;  /* no output, can't wri| 15985    23
  1267       +te anything */                                                                                   + 15985    23
  1268       |        DEBUGLOG(5, "Generating an empty block");                                                | 15986    23
  1269       |        assert(outputDirective == notLimited || dstCapacity >= 1);                               | 15987    23
  1270       |        assert(dst != NULL);                                                                     | 15988    23
  1271       |        dst[0] = 0;                                                                              | 15989    23
  1272       |        if (outputDirective == fillOutput) {                                                     | 15990    23
  1273       |            assert (inputConsumed != NULL);                                                      | 15991    23
  1274       |            *inputConsumed = 0;                                                                  | 15992    23
  1275       |        }                                                                                        | 15993    23
  1276       |        return 1;                                                                                | 15994    23
  1277       |    }                                                                                            | 15995    23
  1278       |    assert(src != NULL);                                                                         | 15996    23
  1279       |                                                                                                 | 15997    23
  1280       |    return LZ4_compress_generic_validated(cctx, src, dst, srcSize,                               | 15998    23
  1281       |                inputConsumed, /* only written into if outputDirective == fillOutput */          | 15999    23
  1282       |                dstCapacity, outputDirective,                                                    | 16000    23
  1283       |                tableType, dictDirective, dictIssue, acceleration);                              | 16001    23
  1284       |}                                                                                                | 16002    23
  1285       |                                                                                                 | 16003    23
  1286       |                                                                                                 | 16004    23
  1287       |int LZ4_compress_fast_extState(void* state, const char* source, char* dest, int inputSize, int ma| 16005    23
  1287       +xOutputSize, int acceleration)                                                                   + 16005    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   316


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1288       |{                                                                                                | 16006    23
  1289       |    LZ4_stream_t_internal* const ctx = & LZ4_initStream(state, sizeof(LZ4_stream_t)) -> internal_| 16007    23
  1289       +donotuse;                                                                                        + 16007    23
  1290       |    assert(ctx != NULL);                                                                         | 16008    23
  1291       |    if (acceleration < 1) acceleration = LZ4_ACCELERATION_DEFAULT;                               | 16009    23
  1292       |    if (acceleration > LZ4_ACCELERATION_MAX) acceleration = LZ4_ACCELERATION_MAX;                | 16010    23
  1293       |    if (maxOutputSize >= LZ4_compressBound(inputSize)) {                                         | 16011    23
  1294       |        if (inputSize < LZ4_64Klimit) {                                                          | 16012    23
  1295       |            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, 0, notLimited, byU16,| 16013    23
  1295       + noDict, noDictIssue, acceleration);                                                             + 16013    23
  1296       |        } else {                                                                                 | 16014    23
  1297       |            const tableType_t tableType = ((sizeof(void*)==4) && ((uptrval)source > LZ4_DISTANCE_| 16015    23
  1297       +MAX)) ? byPtr : byU32;                                                                           + 16015    23
  1298       |            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, 0, notLimited, tableT| 16016    23
  1298       +ype, noDict, noDictIssue, acceleration);                                                         + 16016    23
  1299       |        }                                                                                        | 16017    23
  1300       |    } else {                                                                                     | 16018    23
  1301       |        if (inputSize < LZ4_64Klimit) {                                                          | 16019    23
  1302       |            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, maxOutputSize, limite| 16020    23
  1302       +dOutput, byU16, noDict, noDictIssue, acceleration);                                              + 16020    23
  1303       |        } else {                                                                                 | 16021    23
  1304       |            const tableType_t tableType = ((sizeof(void*)==4) && ((uptrval)source > LZ4_DISTANCE_| 16022    23
  1304       +MAX)) ? byPtr : byU32;                                                                           + 16022    23
  1305       |            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, maxOutputSize, limite| 16023    23
  1305       +dOutput, tableType, noDict, noDictIssue, acceleration);                                          + 16023    23
  1306       |        }                                                                                        | 16024    23
  1307       |    }                                                                                            | 16025    23
  1308       |}                                                                                                | 16026    23
  1309       |                                                                                                 | 16027    23
  1310       |/**                                                                                              | 16028    23
  1311       | * LZ4_compress_fast_extState_fastReset() :                                                      | 16029    23
  1312       | * A variant of LZ4_compress_fast_extState().                                                    | 16030    23
  1313       | *                                                                                               | 16031    23
  1314       | * Using this variant avoids an expensive initialization step. It is only safe                   | 16032    23
  1315       | * to call if the state buffer is known to be correctly initialized already                      | 16033    23
  1316       | * (see comment in lz4.h on LZ4_resetStream_fast() for a definition of                           | 16034    23
  1317       | * "correctly initialized").                                                                     | 16035    23
  1318       | */                                                                                              | 16036    23
  1319       |int LZ4_compress_fast_extState_fastReset(void* state, const char* src, char* dst, int srcSize, in| 16037    23
  1319       +t dstCapacity, int acceleration)                                                                 + 16037    23
  1320       |{                                                                                                | 16038    23
  1321       |    LZ4_stream_t_internal* ctx = &((LZ4_stream_t*)state)->internal_donotuse;                     | 16039    23
  1322       |    if (acceleration < 1) acceleration = LZ4_ACCELERATION_DEFAULT;                               | 16040    23
  1323       |    if (acceleration > LZ4_ACCELERATION_MAX) acceleration = LZ4_ACCELERATION_MAX;                | 16041    23
  1324       |                                                                                                 | 16042    23
  1325       |    if (dstCapacity >= LZ4_compressBound(srcSize)) {                                             | 16043    23
  1326       |        if (srcSize < LZ4_64Klimit) {                                                            | 16044    23
  1327       |            const tableType_t tableType = byU16;                                                 | 16045    23
  1328       |            LZ4_prepareTable(ctx, srcSize, tableType);                                           | 16046    23
  1329       |            if (ctx->currentOffset) {                                                            | 16047    23
  1330       |                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, 0, notLimited, tableTyp| 16048    23
  1330       +e, noDict, dictSmall, acceleration);                                                             + 16048    23
  1331       |            } else {                                                                             | 16049    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   317


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1332       |                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, 0, notLimited, tableTyp| 16050    23
  1332       +e, noDict, noDictIssue, acceleration);                                                           + 16050    23
  1333       |            }                                                                                    | 16051    23
  1334       |        } else {                                                                                 | 16052    23
  1335       |            const tableType_t tableType = ((sizeof(void*)==4) && ((uptrval)src > LZ4_DISTANCE_MAX| 16053    23
  1335       +)) ? byPtr : byU32;                                                                              + 16053    23
  1336       |            LZ4_prepareTable(ctx, srcSize, tableType);                                           | 16054    23
  1337       |            return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, 0, notLimited, tableType, n| 16055    23
  1337       +oDict, noDictIssue, acceleration);                                                               + 16055    23
  1338       |        }                                                                                        | 16056    23
  1339       |    } else {                                                                                     | 16057    23
  1340       |        if (srcSize < LZ4_64Klimit) {                                                            | 16058    23
  1341       |            const tableType_t tableType = byU16;                                                 | 16059    23
  1342       |            LZ4_prepareTable(ctx, srcSize, tableType);                                           | 16060    23
  1343       |            if (ctx->currentOffset) {                                                            | 16061    23
  1344       |                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, dstCapacity, limitedOut| 16062    23
  1344       +put, tableType, noDict, dictSmall, acceleration);                                                + 16062    23
  1345       |            } else {                                                                             | 16063    23
  1346       |                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, dstCapacity, limitedOut| 16064    23
  1346       +put, tableType, noDict, noDictIssue, acceleration);                                              + 16064    23
  1347       |            }                                                                                    | 16065    23
  1348       |        } else {                                                                                 | 16066    23
  1349       |            const tableType_t tableType = ((sizeof(void*)==4) && ((uptrval)src > LZ4_DISTANCE_MAX| 16067    23
  1349       +)) ? byPtr : byU32;                                                                              + 16067    23
  1350       |            LZ4_prepareTable(ctx, srcSize, tableType);                                           | 16068    23
  1351       |            return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, dstCapacity, limitedOutput,| 16069    23
  1351       + tableType, noDict, noDictIssue, acceleration);                                                  + 16069    23
  1352       |        }                                                                                        | 16070    23
  1353       |    }                                                                                            | 16071    23
  1354       |}                                                                                                | 16072    23
  1355       |                                                                                                 | 16073    23
  1356       |                                                                                                 | 16074    23
  1357       |int LZ4_compress_fast(const char* source, char* dest, int inputSize, int maxOutputSize, int accel| 16075    23
  1357       +eration)                                                                                         + 16075    23
  1358       |{                                                                                                | 16076    23
  1359       |    int result;                                                                                  | 16077    23
  1360       |#if (LZ4_HEAPMODE)                                                                               | 16078    23
  1361       |    LZ4_stream_t* ctxPtr = ALLOC(sizeof(LZ4_stream_t));   /* malloc-calloc always properly aligne| 16079    23
  1361       +d */                                                                                             + 16079    23
  1362       |    if (ctxPtr == NULL) return 0;                                                                | 16080    23
  1363       |#else                                                                                            | 16081    23
  1364       |    LZ4_stream_t ctx;                                                                            | 16082    23
  1365       |    LZ4_stream_t* const ctxPtr = &ctx;                                                           | 16083    23
  1366       |#endif                                                                                           | 16084    23
  1367       |    result = LZ4_compress_fast_extState(ctxPtr, source, dest, inputSize, maxOutputSize, accelerat| 16085    23
  1367       +ion);                                                                                            + 16085    23
  1368       |                                                                                                 | 16086    23
  1369       |#if (LZ4_HEAPMODE)                                                                               | 16087    23
  1370       |    FREEMEM(ctxPtr);                                                                             | 16088    23
  1371       |#endif                                                                                           | 16089    23
  1372       |    return result;                                                                               | 16090    23
  1373       |}                                                                                                | 16091    23
  1374       |                                                                                                 | 16092    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   318


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1375       |                                                                                                 | 16093    23
  1376       |int LZ4_compress_default(const char* src, char* dst, int srcSize, int maxOutputSize)             | 16094    23
  1377       |{                                                                                                | 16095    23
  1378       |    return LZ4_compress_fast(src, dst, srcSize, maxOutputSize, 1);                               | 16096    23
  1379       |}                                                                                                | 16097    23
  1380       |                                                                                                 | 16098    23
  1381       |                                                                                                 | 16099    23
  1382       |/* Note!: This function leaves the stream in an unclean/broken state!                            | 16100    23
  1383       | * It is not safe to subsequently use the same state with a _fastReset() or                      | 16101    23
  1384       | * _continue() call without resetting it. */                                                     | 16102    23
  1385       |static int LZ4_compress_destSize_extState (LZ4_stream_t* state, const char* src, char* dst, int* | 16103    23
  1385       +srcSizePtr, int targetDstSize)                                                                   + 16103    23
  1386       |{                                                                                                | 16104    23
  1387       |    void* const s = LZ4_initStream(state, sizeof (*state));                                      | 16105    23
  1388       |    assert(s != NULL); (void)s;                                                                  | 16106    23
  1389       |                                                                                                 | 16107    23
  1390       |    if (targetDstSize >= LZ4_compressBound(*srcSizePtr)) {  /* compression success is guaranteed | 16108    23
  1390       +*/                                                                                               + 16108    23
  1391       |        return LZ4_compress_fast_extState(state, src, dst, *srcSizePtr, targetDstSize, 1);       | 16109    23
  1392       |    } else {                                                                                     | 16110    23
  1393       |        if (*srcSizePtr < LZ4_64Klimit) {                                                        | 16111    23
  1394       |            return LZ4_compress_generic(&state->internal_donotuse, src, dst, *srcSizePtr, srcSize| 16112    23
  1394       +Ptr, targetDstSize, fillOutput, byU16, noDict, noDictIssue, 1);                                  + 16112    23
  1395       |        } else {                                                                                 | 16113    23
  1396       |            tableType_t const addrMode = ((sizeof(void*)==4) && ((uptrval)src > LZ4_DISTANCE_MAX)| 16114    23
  1396       +) ? byPtr : byU32;                                                                               + 16114    23
  1397       |            return LZ4_compress_generic(&state->internal_donotuse, src, dst, *srcSizePtr, srcSize| 16115    23
  1397       +Ptr, targetDstSize, fillOutput, addrMode, noDict, noDictIssue, 1);                               + 16115    23
  1398       |    }   }                                                                                        | 16116    23
  1399       |}                                                                                                | 16117    23
  1400       |                                                                                                 | 16118    23
  1401       |                                                                                                 | 16119    23
  1402       |int LZ4_compress_destSize(const char* src, char* dst, int* srcSizePtr, int targetDstSize)        | 16120    23
  1403       |{                                                                                                | 16121    23
  1404       |#if (LZ4_HEAPMODE)                                                                               | 16122    23
  1405       |    LZ4_stream_t* ctx = (LZ4_stream_t*)ALLOC(sizeof(LZ4_stream_t));   /* malloc-calloc always pro| 16123    23
  1405       +perly aligned */                                                                                 + 16123    23
  1406       |    if (ctx == NULL) return 0;                                                                   | 16124    23
  1407       |#else                                                                                            | 16125    23
  1408       |    LZ4_stream_t ctxBody;                                                                        | 16126    23
  1409       |    LZ4_stream_t* ctx = &ctxBody;                                                                | 16127    23
  1410       |#endif                                                                                           | 16128    23
  1411       |                                                                                                 | 16129    23
  1412       |    int result = LZ4_compress_destSize_extState(ctx, src, dst, srcSizePtr, targetDstSize);       | 16130    23
  1413       |                                                                                                 | 16131    23
  1414       |#if (LZ4_HEAPMODE)                                                                               | 16132    23
  1415       |    FREEMEM(ctx);                                                                                | 16133    23
  1416       |#endif                                                                                           | 16134    23
  1417       |    return result;                                                                               | 16135    23
  1418       |}                                                                                                | 16136    23
  1419       |                                                                                                 | 16137    23
  1420       |                                                                                                 | 16138    23
  1421       |                                                                                                 | 16139    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   319


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1422       |/*-******************************                                                                | 16140    23
  1423       |*  Streaming functions                                                                           | 16141    23
  1424       |********************************/                                                                | 16142    23
  1425       |                                                                                                 | 16143    23
  1426       |LZ4_stream_t* LZ4_createStream(void)                                                             | 16144    23
  1427       |{                                                                                                | 16145    23
  1428       |    LZ4_stream_t* const lz4s = (LZ4_stream_t*)ALLOC(sizeof(LZ4_stream_t));                       | 16146    23
  1429       |    LZ4_STATIC_ASSERT(LZ4_STREAMSIZE >= sizeof(LZ4_stream_t_internal));    /* A compilation error| 16147    23
  1429       + here means LZ4_STREAMSIZE is not large enough */                                                + 16147    23
  1430       |    DEBUGLOG(4, "LZ4_createStream %p", lz4s);                                                    | 16148    23
  1431       |    if (lz4s == NULL) return NULL;                                                               | 16149    23
  1432       |    LZ4_initStream(lz4s, sizeof(*lz4s));                                                         | 16150    23
  1433       |    return lz4s;                                                                                 | 16151    23
  1434       |}                                                                                                | 16152    23
  1435       |                                                                                                 | 16153    23
  1436       |static size_t LZ4_stream_t_alignment(void)                                                       | 16154    23
  1437       |{                                                                                                | 16155    23
  1438       |#if LZ4_ALIGN_TEST                                                                               | 16156    23
  1439       |    typedef struct { char c; LZ4_stream_t t; } t_a;                                              | 16157    23
  1440       |    return sizeof(t_a) - sizeof(LZ4_stream_t);                                                   | 16158    23
  1441       |#else                                                                                            | 16159    23
  1442       |    return 1;  /* effectively disabled */                                                        | 16160    23
  1443       |#endif                                                                                           | 16161    23
  1444       |}                                                                                                | 16162    23
  1445       |                                                                                                 | 16163    23
  1446       |LZ4_stream_t* LZ4_initStream (void* buffer, size_t size)                                         | 16164    23
  1447       |{                                                                                                | 16165    23
  1448       |    DEBUGLOG(5, "LZ4_initStream");                                                               | 16166    23
  1449       |    if (buffer == NULL) { return NULL; }                                                         | 16167    23
  1450       |    if (size < sizeof(LZ4_stream_t)) { return NULL; }                                            | 16168    23
  1451       |    if (!LZ4_isAligned(buffer, LZ4_stream_t_alignment())) return NULL;                           | 16169    23
  1452       |    MEM_INIT(buffer, 0, sizeof(LZ4_stream_t_internal));                                          | 16170    23
  1453       |    return (LZ4_stream_t*)buffer;                                                                | 16171    23
  1454       |}                                                                                                | 16172    23
  1455       |                                                                                                 | 16173    23
  1456       |/* resetStream is now deprecated,                                                                | 16174    23
  1457       | * prefer initStream() which is more general */                                                  | 16175    23
  1458       |void LZ4_resetStream (LZ4_stream_t* LZ4_stream)                                                  | 16176    23
  1459       |{                                                                                                | 16177    23
  1460       |    DEBUGLOG(5, "LZ4_resetStream (ctx:%p)", LZ4_stream);                                         | 16178    23
  1461       |    MEM_INIT(LZ4_stream, 0, sizeof(LZ4_stream_t_internal));                                      | 16179    23
  1462       |}                                                                                                | 16180    23
  1463       |                                                                                                 | 16181    23
  1464       |void LZ4_resetStream_fast(LZ4_stream_t* ctx) {                                                   | 16182    23
  1465       |    LZ4_prepareTable(&(ctx->internal_donotuse), 0, byU32);                                       | 16183    23
  1466       |}                                                                                                | 16184    23
  1467       |                                                                                                 | 16185    23
  1468       |int LZ4_freeStream (LZ4_stream_t* LZ4_stream)                                                    | 16186    23
  1469       |{                                                                                                | 16187    23
  1470       |    if (!LZ4_stream) return 0;   /* support free on NULL */                                      | 16188    23
  1471       |    DEBUGLOG(5, "LZ4_freeStream %p", LZ4_stream);                                                | 16189    23
  1472       |    FREEMEM(LZ4_stream);                                                                         | 16190    23
  1473       |    return (0);                                                                                  | 16191    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   320


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1474       |}                                                                                                | 16192    23
  1475       |                                                                                                 | 16193    23
  1476       |                                                                                                 | 16194    23
  1477       |#define HASH_UNIT sizeof(reg_t)                                                                  | 16195    23
  1478       |int LZ4_loadDict (LZ4_stream_t* LZ4_dict, const char* dictionary, int dictSize)                  | 16196    23
  1479       |{                                                                                                | 16197    23
  1480       |    LZ4_stream_t_internal* dict = &LZ4_dict->internal_donotuse;                                  | 16198    23
  1481       |    const tableType_t tableType = byU32;                                                         | 16199    23
  1482       |    const BYTE* p = (const BYTE*)dictionary;                                                     | 16200    23
  1483       |    const BYTE* const dictEnd = p + dictSize;                                                    | 16201    23
  1484       |    const BYTE* base;                                                                            | 16202    23
  1485       |                                                                                                 | 16203    23
  1486       |    DEBUGLOG(4, "LZ4_loadDict (%i bytes from %p into %p)", dictSize, dictionary, LZ4_dict);      | 16204    23
  1487       |                                                                                                 | 16205    23
  1488       |    /* It's necessary to reset the context,                                                      | 16206    23
  1489       |     * and not just continue it with prepareTable()                                              | 16207    23
  1490       |     * to avoid any risk of generating overflowing matchIndex                                    | 16208    23
  1491       |     * when compressing using this dictionary */                                                 | 16209    23
  1492       |    LZ4_resetStream(LZ4_dict);                                                                   | 16210    23
  1493       |                                                                                                 | 16211    23
  1494       |    /* We always increment the offset by 64 KB, since, if the dict is longer,                    | 16212    23
  1495       |     * we truncate it to the last 64k, and if it's shorter, we still want to                     | 16213    23
  1496       |     * advance by a whole window length so we can provide the guarantee that                     | 16214    23
  1497       |     * there are only valid offsets in the window, which allows an optimization                  | 16215    23
  1498       |     * in LZ4_compress_fast_continue() where it uses noDictIssue even when the                   | 16216    23
  1499       |     * dictionary isn't a full 64k. */                                                           | 16217    23
  1500       |    dict->currentOffset += 64 KB;                                                                | 16218    23
  1501       |                                                                                                 | 16219    23
  1502       |    if (dictSize < (int)HASH_UNIT) {                                                             | 16220    23
  1503       |        return 0;                                                                                | 16221    23
  1504       |    }                                                                                            | 16222    23
  1505       |                                                                                                 | 16223    23
  1506       |    if ((dictEnd - p) > 64 KB) p = dictEnd - 64 KB;                                              | 16224    23
  1507       |    base = dictEnd - dict->currentOffset;                                                        | 16225    23
  1508       |    dict->dictionary = p;                                                                        | 16226    23
  1509       |    dict->dictSize = (U32)(dictEnd - p);                                                         | 16227    23
  1510       |    dict->tableType = (U32)tableType;                                                            | 16228    23
  1511       |                                                                                                 | 16229    23
  1512       |    while (p <= dictEnd-HASH_UNIT) {                                                             | 16230    23
  1513       |        LZ4_putPosition(p, dict->hashTable, tableType, base);                                    | 16231    23
  1514       |        p+=3;                                                                                    | 16232    23
  1515       |    }                                                                                            | 16233    23
  1516       |                                                                                                 | 16234    23
  1517       |    return (int)dict->dictSize;                                                                  | 16235    23
  1518       |}                                                                                                | 16236    23
  1519       |                                                                                                 | 16237    23
  1520       |void LZ4_attach_dictionary(LZ4_stream_t* workingStream, const LZ4_stream_t* dictionaryStream) {  | 16238    23
  1521       |    const LZ4_stream_t_internal* dictCtx = dictionaryStream == NULL ? NULL :                     | 16239    23
  1522       |        &(dictionaryStream->internal_donotuse);                                                  | 16240    23
  1523       |                                                                                                 | 16241    23
  1524       |    DEBUGLOG(4, "LZ4_attach_dictionary (%p, %p, size %u)",                                       | 16242    23
  1525       |             workingStream, dictionaryStream,                                                    | 16243    23
  1526       |             dictCtx != NULL ? dictCtx->dictSize : 0);                                           | 16244    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   321


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1527       |                                                                                                 | 16245    23
  1528       |    if (dictCtx != NULL) {                                                                       | 16246    23
  1529       |        /* If the current offset is zero, we will never look in the                              | 16247    23
  1530       |         * external dictionary context, since there is no value a table                          | 16248    23
  1531       |         * entry can take that indicate a miss. In that case, we need                            | 16249    23
  1532       |         * to bump the offset to something non-zero.                                             | 16250    23
  1533       |         */                                                                                      | 16251    23
  1534       |        if (workingStream->internal_donotuse.currentOffset == 0) {                               | 16252    23
  1535       |            workingStream->internal_donotuse.currentOffset = 64 KB;                              | 16253    23
  1536       |        }                                                                                        | 16254    23
  1537       |                                                                                                 | 16255    23
  1538       |        /* Don't actually attach an empty dictionary.                                            | 16256    23
  1539       |         */                                                                                      | 16257    23
  1540       |        if (dictCtx->dictSize == 0) {                                                            | 16258    23
  1541       |            dictCtx = NULL;                                                                      | 16259    23
  1542       |        }                                                                                        | 16260    23
  1543       |    }                                                                                            | 16261    23
  1544       |    workingStream->internal_donotuse.dictCtx = dictCtx;                                          | 16262    23
  1545       |}                                                                                                | 16263    23
  1546       |                                                                                                 | 16264    23
  1547       |                                                                                                 | 16265    23
  1548       |static void LZ4_renormDictT(LZ4_stream_t_internal* LZ4_dict, int nextSize)                       | 16266    23
  1549       |{                                                                                                | 16267    23
  1550       |    assert(nextSize >= 0);                                                                       | 16268    23
  1551       |    if (LZ4_dict->currentOffset + (unsigned)nextSize > 0x80000000) {   /* potential ptrdiff_t ove| 16269    23
  1551       +rflow (32-bits mode) */                                                                          + 16269    23
  1552       |        /* rescale hash table */                                                                 | 16270    23
  1553       |        U32 const delta = LZ4_dict->currentOffset - 64 KB;                                       | 16271    23
  1554       |        const BYTE* dictEnd = LZ4_dict->dictionary + LZ4_dict->dictSize;                         | 16272    23
  1555       |        int i;                                                                                   | 16273    23
  1556       |        DEBUGLOG(4, "LZ4_renormDictT");                                                          | 16274    23
  1557       |        for (i=0; i<LZ4_HASH_SIZE_U32; i++) {                                                    | 16275    23
  1558       |            if (LZ4_dict->hashTable[i] < delta) LZ4_dict->hashTable[i]=0;                        | 16276    23
  1559       |            else LZ4_dict->hashTable[i] -= delta;                                                | 16277    23
  1560       |        }                                                                                        | 16278    23
  1561       |        LZ4_dict->currentOffset = 64 KB;                                                         | 16279    23
  1562       |        if (LZ4_dict->dictSize > 64 KB) LZ4_dict->dictSize = 64 KB;                              | 16280    23
  1563       |        LZ4_dict->dictionary = dictEnd - LZ4_dict->dictSize;                                     | 16281    23
  1564       |    }                                                                                            | 16282    23
  1565       |}                                                                                                | 16283    23
  1566       |                                                                                                 | 16284    23
  1567       |                                                                                                 | 16285    23
  1568       |int LZ4_compress_fast_continue (LZ4_stream_t* LZ4_stream,                                        | 16286    23
  1569       |                                const char* source, char* dest,                                  | 16287    23
  1570       |                                int inputSize, int maxOutputSize,                                | 16288    23
  1571       |                                int acceleration)                                                | 16289    23
  1572       |{                                                                                                | 16290    23
  1573       |    const tableType_t tableType = byU32;                                                         | 16291    23
  1574       |    LZ4_stream_t_internal* streamPtr = &LZ4_stream->internal_donotuse;                           | 16292    23
  1575       |    const BYTE* dictEnd = streamPtr->dictionary + streamPtr->dictSize;                           | 16293    23
  1576       |                                                                                                 | 16294    23
  1577       |    DEBUGLOG(5, "LZ4_compress_fast_continue (inputSize=%i)", inputSize);                         | 16295    23
  1578       |                                                                                                 | 16296    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   322


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1579       |    LZ4_renormDictT(streamPtr, inputSize);   /* avoid index overflow */                          | 16297    23
  1580       |    if (acceleration < 1) acceleration = LZ4_ACCELERATION_DEFAULT;                               | 16298    23
  1581       |    if (acceleration > LZ4_ACCELERATION_MAX) acceleration = LZ4_ACCELERATION_MAX;                | 16299    23
  1582       |                                                                                                 | 16300    23
  1583       |    /* invalidate tiny dictionaries */                                                           | 16301    23
  1584       |    if ( (streamPtr->dictSize-1 < 4-1)   /* intentional underflow */                             | 16302    23
  1585       |      && (dictEnd != (const BYTE*)source) ) {                                                    | 16303    23
  1586       |        DEBUGLOG(5, "LZ4_compress_fast_continue: dictSize(%u) at addr:%p is too small", streamPtr| 16304    23
  1586       +->dictSize, streamPtr->dictionary);                                                              + 16304    23
  1587       |        streamPtr->dictSize = 0;                                                                 | 16305    23
  1588       |        streamPtr->dictionary = (const BYTE*)source;                                             | 16306    23
  1589       |        dictEnd = (const BYTE*)source;                                                           | 16307    23
  1590       |    }                                                                                            | 16308    23
  1591       |                                                                                                 | 16309    23
  1592       |    /* Check overlapping input/dictionary space */                                               | 16310    23
  1593       |    {   const BYTE* sourceEnd = (const BYTE*) source + inputSize;                                | 16311    23
  1594       |        if ((sourceEnd > streamPtr->dictionary) && (sourceEnd < dictEnd)) {                      | 16312    23
  1595       |            streamPtr->dictSize = (U32)(dictEnd - sourceEnd);                                    | 16313    23
  1596       |            if (streamPtr->dictSize > 64 KB) streamPtr->dictSize = 64 KB;                        | 16314    23
  1597       |            if (streamPtr->dictSize < 4) streamPtr->dictSize = 0;                                | 16315    23
  1598       |            streamPtr->dictionary = dictEnd - streamPtr->dictSize;                               | 16316    23
  1599       |        }                                                                                        | 16317    23
  1600       |    }                                                                                            | 16318    23
  1601       |                                                                                                 | 16319    23
  1602       |    /* prefix mode : source data follows dictionary */                                           | 16320    23
  1603       |    if (dictEnd == (const BYTE*)source) {                                                        | 16321    23
  1604       |        if ((streamPtr->dictSize < 64 KB) && (streamPtr->dictSize < streamPtr->currentOffset))   | 16322    23
  1605       |            return LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, | 16323    23
  1605       +limitedOutput, tableType, withPrefix64k, dictSmall, acceleration);                               + 16323    23
  1606       |        else                                                                                     | 16324    23
  1607       |            return LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, | 16325    23
  1607       +limitedOutput, tableType, withPrefix64k, noDictIssue, acceleration);                             + 16325    23
  1608       |    }                                                                                            | 16326    23
  1609       |                                                                                                 | 16327    23
  1610       |    /* external dictionary mode */                                                               | 16328    23
  1611       |    {   int result;                                                                              | 16329    23
  1612       |        if (streamPtr->dictCtx) {                                                                | 16330    23
  1613       |            /* We depend here on the fact that dictCtx'es (produced by                           | 16331    23
  1614       |             * LZ4_loadDict) guarantee that their tables contain no references                   | 16332    23
  1615       |             * to offsets between dictCtx->currentOffset - 64 KB and                             | 16333    23
  1616       |             * dictCtx->currentOffset - dictCtx->dictSize. This makes it safe                    | 16334    23
  1617       |             * to use noDictIssue even when the dict isn't a full 64 KB.                         | 16335    23
  1618       |             */                                                                                  | 16336    23
  1619       |            if (inputSize > 4 KB) {                                                              | 16337    23
  1620       |                /* For compressing large blobs, it is faster to pay the setup                    | 16338    23
  1621       |                 * cost to copy the dictionary's tables into the active context,                 | 16339    23
  1622       |                 * so that the compression loop is only looking into one table.                  | 16340    23
  1623       |                 */                                                                              | 16341    23
  1624       |                LZ4_memcpy(streamPtr, streamPtr->dictCtx, sizeof(*streamPtr));                   | 16342    23
  1625       |                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutput| 16343    23
  1625       +Size, limitedOutput, tableType, usingExtDict, noDictIssue, acceleration);                        + 16343    23
  1626       |            } else {                                                                             | 16344    23
  1627       |                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutput| 16345    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   323


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1627       +Size, limitedOutput, tableType, usingDictCtx, noDictIssue, acceleration);                        + 16345    23
  1628       |            }                                                                                    | 16346    23
  1629       |        } else {                                                                                 | 16347    23
  1630       |            if ((streamPtr->dictSize < 64 KB) && (streamPtr->dictSize < streamPtr->currentOffset)| 16348    23
  1630       +) {                                                                                              + 16348    23
  1631       |                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutput| 16349    23
  1631       +Size, limitedOutput, tableType, usingExtDict, dictSmall, acceleration);                          + 16349    23
  1632       |            } else {                                                                             | 16350    23
  1633       |                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutput| 16351    23
  1633       +Size, limitedOutput, tableType, usingExtDict, noDictIssue, acceleration);                        + 16351    23
  1634       |            }                                                                                    | 16352    23
  1635       |        }                                                                                        | 16353    23
  1636       |        streamPtr->dictionary = (const BYTE*)source;                                             | 16354    23
  1637       |        streamPtr->dictSize = (U32)inputSize;                                                    | 16355    23
  1638       |        return result;                                                                           | 16356    23
  1639       |    }                                                                                            | 16357    23
  1640       |}                                                                                                | 16358    23
  1641       |                                                                                                 | 16359    23
  1642       |                                                                                                 | 16360    23
  1643       |/* Hidden debug function, to force-test external dictionary mode */                              | 16361    23
  1644       |int LZ4_compress_forceExtDict (LZ4_stream_t* LZ4_dict, const char* source, char* dest, int srcSiz| 16362    23
  1644       +e)                                                                                               + 16362    23
  1645       |{                                                                                                | 16363    23
  1646       |    LZ4_stream_t_internal* streamPtr = &LZ4_dict->internal_donotuse;                             | 16364    23
  1647       |    int result;                                                                                  | 16365    23
  1648       |                                                                                                 | 16366    23
  1649       |    LZ4_renormDictT(streamPtr, srcSize);                                                         | 16367    23
  1650       |                                                                                                 | 16368    23
  1651       |    if ((streamPtr->dictSize < 64 KB) && (streamPtr->dictSize < streamPtr->currentOffset)) {     | 16369    23
  1652       |        result = LZ4_compress_generic(streamPtr, source, dest, srcSize, NULL, 0, notLimited, byU3| 16370    23
  1652       +2, usingExtDict, dictSmall, 1);                                                                  + 16370    23
  1653       |    } else {                                                                                     | 16371    23
  1654       |        result = LZ4_compress_generic(streamPtr, source, dest, srcSize, NULL, 0, notLimited, byU3| 16372    23
  1654       +2, usingExtDict, noDictIssue, 1);                                                                + 16372    23
  1655       |    }                                                                                            | 16373    23
  1656       |                                                                                                 | 16374    23
  1657       |    streamPtr->dictionary = (const BYTE*)source;                                                 | 16375    23
  1658       |    streamPtr->dictSize = (U32)srcSize;                                                          | 16376    23
  1659       |                                                                                                 | 16377    23
  1660       |    return result;                                                                               | 16378    23
  1661       |}                                                                                                | 16379    23
  1662       |                                                                                                 | 16380    23
  1663       |                                                                                                 | 16381    23
  1664       |/*! LZ4_saveDict() :                                                                             | 16382    23
  1665       | *  If previously compressed data block is not guaranteed to remain available at its memory locat| 16383    23
  1665       +ion,                                                                                             + 16383    23
  1666       | *  save it into a safer place (char* safeBuffer).                                               | 16384    23
  1667       | *  Note : you don't need to call LZ4_loadDict() afterwards,                                     | 16385    23
  1668       | *         dictionary is immediately usable, you can therefore call LZ4_compress_fast_continue().| 16386    23
  1669       | *  Return : saved dictionary size in bytes (necessarily <= dictSize), or 0 if error.            | 16387    23
  1670       | */                                                                                              | 16388    23
  1671       |int LZ4_saveDict (LZ4_stream_t* LZ4_dict, char* safeBuffer, int dictSize)                        | 16389    23
  1672       |{                                                                                                | 16390    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   324


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1673       |    LZ4_stream_t_internal* const dict = &LZ4_dict->internal_donotuse;                            | 16391    23
  1674       |    const BYTE* const previousDictEnd = dict->dictionary + dict->dictSize;                       | 16392    23
  1675       |                                                                                                 | 16393    23
  1676       |    if ((U32)dictSize > 64 KB) { dictSize = 64 KB; } /* useless to define a dictionary > 64 KB */| 16394    23
  1677       |    if ((U32)dictSize > dict->dictSize) { dictSize = (int)dict->dictSize; }                      | 16395    23
  1678       |                                                                                                 | 16396    23
  1679       |    if (safeBuffer == NULL) assert(dictSize == 0);                                               | 16397    23
  1680       |    if (dictSize > 0)                                                                            | 16398    23
  1681       |        memmove(safeBuffer, previousDictEnd - dictSize, dictSize);                               | 16399    23
  1682       |                                                                                                 | 16400    23
  1683       |    dict->dictionary = (const BYTE*)safeBuffer;                                                  | 16401    23
  1684       |    dict->dictSize = (U32)dictSize;                                                              | 16402    23
  1685       |                                                                                                 | 16403    23
  1686       |    return dictSize;                                                                             | 16404    23
  1687       |}                                                                                                | 16405    23
  1688       |                                                                                                 | 16406    23
  1689       |                                                                                                 | 16407    23
  1690       |                                                                                                 | 16408    23
  1691       |/*-*******************************                                                               | 16409    23
  1692       | *  Decompression functions                                                                      | 16410    23
  1693       | ********************************/                                                               | 16411    23
  1694       |                                                                                                 | 16412    23
  1695       |typedef enum { endOnOutputSize = 0, endOnInputSize = 1 } endCondition_directive;                 | 16413    23
  1696       |typedef enum { decode_full_block = 0, partial_decode = 1 } earlyEnd_directive;                   | 16414    23
  1697       |                                                                                                 | 16415    23
  1698       |#undef MIN                                                                                       | 16416    23
  1699       |#define MIN(a,b)    ( (a) < (b) ? (a) : (b) )                                                    | 16417    23
  1700       |                                                                                                 | 16418    23
  1701       |/* Read the variable-length literal or match length.                                             | 16419    23
  1702       | *                                                                                               | 16420    23
  1703       | * ip - pointer to use as input.                                                                 | 16421    23
  1704       | * lencheck - end ip.  Return an error if ip advances >= lencheck.                               | 16422    23
  1705       | * loop_check - check ip >= lencheck in body of loop.  Returns loop_error if so.                 | 16423    23
  1706       | * initial_check - check ip >= lencheck before start of loop.  Returns initial_error if so.      | 16424    23
  1707       | * error (output) - error code.  Should be set to 0 before call.                                 | 16425    23
  1708       | */                                                                                              | 16426    23
  1709       |typedef enum { loop_error = -2, initial_error = -1, ok = 0 } variable_length_error;              | 16427    23
  1710       |LZ4_FORCE_INLINE unsigned                                                                        | 16428    23
  1711       |read_variable_length(const BYTE**ip, const BYTE* lencheck,                                       | 16429    23
  1712       |                     int loop_check, int initial_check,                                          | 16430    23
  1713       |                     variable_length_error* error)                                               | 16431    23
  1714       |{                                                                                                | 16432    23
  1715       |    U32 length = 0;                                                                              | 16433    23
  1716       |    U32 s;                                                                                       | 16434    23
  1717       |    if (initial_check && unlikely((*ip) >= lencheck)) {    /* overflow detection */              | 16435    23
  1718       |        *error = initial_error;                                                                  | 16436    23
  1719       |        return length;                                                                           | 16437    23
  1720       |    }                                                                                            | 16438    23
  1721       |    do {                                                                                         | 16439    23
  1722       |        s = **ip;                                                                                | 16440    23
  1723       |        (*ip)++;                                                                                 | 16441    23
  1724       |        length += s;                                                                             | 16442    23
  1725       |        if (loop_check && unlikely((*ip) >= lencheck)) {    /* overflow detection */             | 16443    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   325


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1726       |            *error = loop_error;                                                                 | 16444    23
  1727       |            return length;                                                                       | 16445    23
  1728       |        }                                                                                        | 16446    23
  1729       |    } while (s==255);                                                                            | 16447    23
  1730       |                                                                                                 | 16448    23
  1731       |    return length;                                                                               | 16449    23
  1732       |}                                                                                                | 16450    23
  1733       |                                                                                                 | 16451    23
  1734       |/*! LZ4_decompress_generic() :                                                                   | 16452    23
  1735       | *  This generic decompression function covers all use cases.                                    | 16453    23
  1736       | *  It shall be instantiated several times, using different sets of directives.                  | 16454    23
  1737       | *  Note that it is important for performance that this function really get inlined,             | 16455    23
  1738       | *  in order to remove useless branches during compilation optimization.                         | 16456    23
  1739       | */                                                                                              | 16457    23
  1740       |LZ4_FORCE_INLINE int                                                                             | 16458    23
  1741       |LZ4_decompress_generic(                                                                          | 16459    23
  1742       |                 const char* const src,                                                          | 16460    23
  1743       |                 char* const dst,                                                                | 16461    23
  1744       |                 int srcSize,                                                                    | 16462    23
  1745       |                 int outputSize,         /* If endOnInput==endOnInputSize, this value is `dstCapa| 16463    23
  1745       +city` */                                                                                         + 16463    23
  1746       |                                                                                                 | 16464    23
  1747       |                 endCondition_directive endOnInput,   /* endOnOutputSize, endOnInputSize */      | 16465    23
  1748       |                 earlyEnd_directive partialDecoding,  /* full, partial */                        | 16466    23
  1749       |                 dict_directive dict,                 /* noDict, withPrefix64k, usingExtDict */  | 16467    23
  1750       |                 const BYTE* const lowPrefix,  /* always <= dst, == dst when no prefix */        | 16468    23
  1751       |                 const BYTE* const dictStart,  /* only if dict==usingExtDict */                  | 16469    23
  1752       |                 const size_t dictSize         /* note : = 0 if noDict */                        | 16470    23
  1753       |                 )                                                                               | 16471    23
  1754       |{                                                                                                | 16472    23
  1755       |    if (src == NULL) { return -1; }                                                              | 16473    23
  1756       |                                                                                                 | 16474    23
  1757       |    {   const BYTE* ip = (const BYTE*) src;                                                      | 16475    23
  1758       |        const BYTE* const iend = ip + srcSize;                                                   | 16476    23
  1759       |                                                                                                 | 16477    23
  1760       |        BYTE* op = (BYTE*) dst;                                                                  | 16478    23
  1761       |        BYTE* const oend = op + outputSize;                                                      | 16479    23
  1762       |        BYTE* cpy;                                                                               | 16480    23
  1763       |                                                                                                 | 16481    23
  1764       |        const BYTE* const dictEnd = (dictStart == NULL) ? NULL : dictStart + dictSize;           | 16482    23
  1765       |                                                                                                 | 16483    23
  1766       |        const int safeDecode = (endOnInput==endOnInputSize);                                     | 16484    23
  1767       |        const int checkOffset = ((safeDecode) && (dictSize < (int)(64 KB)));                     | 16485    23
  1768       |                                                                                                 | 16486    23
  1769       |                                                                                                 | 16487    23
  1770       |        /* Set up the "end" pointers for the shortcut. */                                        | 16488    23
  1771       |        const BYTE* const shortiend = iend - (endOnInput ? 14 : 8) /*maxLL*/ - 2 /*offset*/;     | 16489    23
  1772       |        const BYTE* const shortoend = oend - (endOnInput ? 14 : 8) /*maxLL*/ - 18 /*maxML*/;     | 16490    23
  1773       |                                                                                                 | 16491    23
  1774       |        const BYTE* match;                                                                       | 16492    23
  1775       |        size_t offset;                                                                           | 16493    23
  1776       |        unsigned token;                                                                          | 16494    23
  1777       |        size_t length;                                                                           | 16495    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   326


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1778       |                                                                                                 | 16496    23
  1779       |                                                                                                 | 16497    23
  1780       |        DEBUGLOG(5, "LZ4_decompress_generic (srcSize:%i, dstSize:%i)", srcSize, outputSize);     | 16498    23
  1781       |                                                                                                 | 16499    23
  1782       |        /* Special cases */                                                                      | 16500    23
  1783       |        assert(lowPrefix <= op);                                                                 | 16501    23
  1784       |        if ((endOnInput) && (unlikely(outputSize==0))) {                                         | 16502    23
  1785       |            /* Empty output buffer */                                                            | 16503    23
  1786       |            if (partialDecoding) return 0;                                                       | 16504    23
  1787       |            return ((srcSize==1) && (*ip==0)) ? 0 : -1;                                          | 16505    23
  1788       |        }                                                                                        | 16506    23
  1789       |        if ((!endOnInput) && (unlikely(outputSize==0))) { return (*ip==0 ? 1 : -1); }            | 16507    23
  1790       |        if ((endOnInput) && unlikely(srcSize==0)) { return -1; }                                 | 16508    23
  1791       |                                                                                                 | 16509    23
  1792       |        /* Currently the fast loop shows a regression on qualcomm arm chips. */                  | 16510    23
  1793       |#if LZ4_FAST_DEC_LOOP                                                                            | 16511    23
  1794       |        if ((oend - op) < FASTLOOP_SAFE_DISTANCE) {                                              | 16512    23
  1795       |            DEBUGLOG(6, "skip fast decode loop");                                                | 16513    23
  1796       |            goto safe_decode;                                                                    | 16514    23
  1797       |        }                                                                                        | 16515    23
  1798       |                                                                                                 | 16516    23
  1799       |        /* Fast loop : decode sequences as long as output < iend-FASTLOOP_SAFE_DISTANCE */       | 16517    23
  1800       |        while (1) {                                                                              | 16518    23
  1801       |            /* Main fastloop assertion: We can always wildcopy FASTLOOP_SAFE_DISTANCE */         | 16519    23
  1802       |            assert(oend - op >= FASTLOOP_SAFE_DISTANCE);                                         | 16520    23
  1803       |            if (endOnInput) { assert(ip < iend); }                                               | 16521    23
  1804       |            token = *ip++;                                                                       | 16522    23
  1805       |            length = token >> ML_BITS;  /* literal length */                                     | 16523    23
  1806       |                                                                                                 | 16524    23
  1807       |            assert(!endOnInput || ip <= iend); /* ip < iend before the increment */              | 16525    23
  1808       |                                                                                                 | 16526    23
  1809       |            /* decode literal length */                                                          | 16527    23
  1810       |            if (length == RUN_MASK) {                                                            | 16528    23
  1811       |                variable_length_error error = ok;                                                | 16529    23
  1812       |                length += read_variable_length(&ip, iend-RUN_MASK, (int)endOnInput, (int)endOnInp| 16530    23
  1812       +ut, &error);                                                                                     + 16530    23
  1813       |                if (error == initial_error) { goto _output_error; }                              | 16531    23
  1814       |                if ((safeDecode) && unlikely((uptrval)(op)+length<(uptrval)(op))) { goto _output_| 16532    23
  1814       +error; } /* overflow detection */                                                                + 16532    23
  1815       |                if ((safeDecode) && unlikely((uptrval)(ip)+length<(uptrval)(ip))) { goto _output_| 16533    23
  1815       +error; } /* overflow detection */                                                                + 16533    23
  1816       |                                                                                                 | 16534    23
  1817       |                /* copy literals */                                                              | 16535    23
  1818       |                cpy = op+length;                                                                 | 16536    23
  1819       |                LZ4_STATIC_ASSERT(MFLIMIT >= WILDCOPYLENGTH);                                    | 16537    23
  1820       |                if (endOnInput) {  /* LZ4_decompress_safe() */                                   | 16538    23
  1821       |                    if ((cpy>oend-32) || (ip+length>iend-32)) { goto safe_literal_copy; }        | 16539    23
  1822       |                    LZ4_wildCopy32(op, ip, cpy);                                                 | 16540    23
  1823       |                } else {   /* LZ4_decompress_fast() */                                           | 16541    23
  1824       |                    if (cpy>oend-8) { goto safe_literal_copy; }                                  | 16542    23
  1825       |                    LZ4_wildCopy8(op, ip, cpy); /* LZ4_decompress_fast() cannot copy more than 8 | 16543    23
  1825       +bytes at a time :                                                                                + 16543    23
  1826       |                                                 * it doesn't know input length, and only relies | 16544    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   327


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1826       +on end-of-block properties */                                                                    + 16544    23
  1827       |                }                                                                                | 16545    23
  1828       |                ip += length; op = cpy;                                                          | 16546    23
  1829       |            } else {                                                                             | 16547    23
  1830       |                cpy = op+length;                                                                 | 16548    23
  1831       |                if (endOnInput) {  /* LZ4_decompress_safe() */                                   | 16549    23
  1832       |                    DEBUGLOG(7, "copy %u bytes in a 16-bytes stripe", (unsigned)length);         | 16550    23
  1833       |                    /* We don't need to check oend, since we check it once for each loop below */| 16551    23
  1834       |                    if (ip > iend-(16 + 1/*max lit + offset + nextToken*/)) { goto safe_literal_c| 16552    23
  1834       +opy; }                                                                                           + 16552    23
  1835       |                    /* Literals can only be 14, but hope compilers optimize if we copy by a regis| 16553    23
  1835       +ter size */                                                                                      + 16553    23
  1836       |                    LZ4_memcpy(op, ip, 16);                                                      | 16554    23
  1837       |                } else {  /* LZ4_decompress_fast() */                                            | 16555    23
  1838       |                    /* LZ4_decompress_fast() cannot copy more than 8 bytes at a time :           | 16556    23
  1839       |                     * it doesn't know input length, and relies on end-of-block properties */    | 16557    23
  1840       |                    LZ4_memcpy(op, ip, 8);                                                       | 16558    23
  1841       |                    if (length > 8) { LZ4_memcpy(op+8, ip+8, 8); }                               | 16559    23
  1842       |                }                                                                                | 16560    23
  1843       |                ip += length; op = cpy;                                                          | 16561    23
  1844       |            }                                                                                    | 16562    23
  1845       |                                                                                                 | 16563    23
  1846       |            /* get offset */                                                                     | 16564    23
  1847       |            offset = LZ4_readLE16(ip); ip+=2;                                                    | 16565    23
  1848       |            match = op - offset;                                                                 | 16566    23
  1849       |            assert(match <= op);                                                                 | 16567    23
  1850       |                                                                                                 | 16568    23
  1851       |            /* get matchlength */                                                                | 16569    23
  1852       |            length = token & ML_MASK;                                                            | 16570    23
  1853       |                                                                                                 | 16571    23
  1854       |            if (length == ML_MASK) {                                                             | 16572    23
  1855       |                variable_length_error error = ok;                                                | 16573    23
  1856       |                if ((checkOffset) && (unlikely(match + dictSize < lowPrefix))) { goto _output_err| 16574    23
  1856       +or; } /* Error : offset outside buffers */                                                       + 16574    23
  1857       |                length += read_variable_length(&ip, iend - LASTLITERALS + 1, (int)endOnInput, 0, | 16575    23
  1857       +&error);                                                                                         + 16575    23
  1858       |                if (error != ok) { goto _output_error; }                                         | 16576    23
  1859       |                if ((safeDecode) && unlikely((uptrval)(op)+length<(uptrval)op)) { goto _output_er| 16577    23
  1859       +ror; } /* overflow detection */                                                                  + 16577    23
  1860       |                length += MINMATCH;                                                              | 16578    23
  1861       |                if (op + length >= oend - FASTLOOP_SAFE_DISTANCE) {                              | 16579    23
  1862       |                    goto safe_match_copy;                                                        | 16580    23
  1863       |                }                                                                                | 16581    23
  1864       |            } else {                                                                             | 16582    23
  1865       |                length += MINMATCH;                                                              | 16583    23
  1866       |                if (op + length >= oend - FASTLOOP_SAFE_DISTANCE) {                              | 16584    23
  1867       |                    goto safe_match_copy;                                                        | 16585    23
  1868       |                }                                                                                | 16586    23
  1869       |                                                                                                 | 16587    23
  1870       |                /* Fastpath check: Avoids a branch in LZ4_wildCopy32 if true */                  | 16588    23
  1871       |                if ((dict == withPrefix64k) || (match >= lowPrefix)) {                           | 16589    23
  1872       |                    if (offset >= 8) {                                                           | 16590    23
  1873       |                        assert(match >= lowPrefix);                                              | 16591    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   328


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1874       |                        assert(match <= op);                                                     | 16592    23
  1875       |                        assert(op + 18 <= oend);                                                 | 16593    23
  1876       |                                                                                                 | 16594    23
  1877       |                        LZ4_memcpy(op, match, 8);                                                | 16595    23
  1878       |                        LZ4_memcpy(op+8, match+8, 8);                                            | 16596    23
  1879       |                        LZ4_memcpy(op+16, match+16, 2);                                          | 16597    23
  1880       |                        op += length;                                                            | 16598    23
  1881       |                        continue;                                                                | 16599    23
  1882       |            }   }   }                                                                            | 16600    23
  1883       |                                                                                                 | 16601    23
  1884       |            if (checkOffset && (unlikely(match + dictSize < lowPrefix))) { goto _output_error; } | 16602    23
  1884       +/* Error : offset outside buffers */                                                             + 16602    23
  1885       |            /* match starting within external dictionary */                                      | 16603    23
  1886       |            if ((dict==usingExtDict) && (match < lowPrefix)) {                                   | 16604    23
  1887       |                if (unlikely(op+length > oend-LASTLITERALS)) {                                   | 16605    23
  1888       |                    if (partialDecoding) {                                                       | 16606    23
  1889       |                        DEBUGLOG(7, "partialDecoding: dictionary match, close to dstEnd");       | 16607    23
  1890       |                        length = MIN(length, (size_t)(oend-op));                                 | 16608    23
  1891       |                    } else {                                                                     | 16609    23
  1892       |                        goto _output_error;  /* end-of-block condition violated */               | 16610    23
  1893       |                }   }                                                                            | 16611    23
  1894       |                                                                                                 | 16612    23
  1895       |                if (length <= (size_t)(lowPrefix-match)) {                                       | 16613    23
  1896       |                    /* match fits entirely within external dictionary : just copy */             | 16614    23
  1897       |                    memmove(op, dictEnd - (lowPrefix-match), length);                            | 16615    23
  1898       |                    op += length;                                                                | 16616    23
  1899       |                } else {                                                                         | 16617    23
  1900       |                    /* match stretches into both external dictionary and current block */        | 16618    23
  1901       |                    size_t const copySize = (size_t)(lowPrefix - match);                         | 16619    23
  1902       |                    size_t const restSize = length - copySize;                                   | 16620    23
  1903       |                    LZ4_memcpy(op, dictEnd - copySize, copySize);                                | 16621    23
  1904       |                    op += copySize;                                                              | 16622    23
  1905       |                    if (restSize > (size_t)(op - lowPrefix)) {  /* overlap copy */               | 16623    23
  1906       |                        BYTE* const endOfMatch = op + restSize;                                  | 16624    23
  1907       |                        const BYTE* copyFrom = lowPrefix;                                        | 16625    23
  1908       |                        while (op < endOfMatch) { *op++ = *copyFrom++; }                         | 16626    23
  1909       |                    } else {                                                                     | 16627    23
  1910       |                        LZ4_memcpy(op, lowPrefix, restSize);                                     | 16628    23
  1911       |                        op += restSize;                                                          | 16629    23
  1912       |                }   }                                                                            | 16630    23
  1913       |                continue;                                                                        | 16631    23
  1914       |            }                                                                                    | 16632    23
  1915       |                                                                                                 | 16633    23
  1916       |            /* copy match within block */                                                        | 16634    23
  1917       |            cpy = op + length;                                                                   | 16635    23
  1918       |                                                                                                 | 16636    23
  1919       |            assert((op <= oend) && (oend-op >= 32));                                             | 16637    23
  1920       |            if (unlikely(offset<16)) {                                                           | 16638    23
  1921       |                LZ4_memcpy_using_offset(op, match, cpy, offset);                                 | 16639    23
  1922       |            } else {                                                                             | 16640    23
  1923       |                LZ4_wildCopy32(op, match, cpy);                                                  | 16641    23
  1924       |            }                                                                                    | 16642    23
  1925       |                                                                                                 | 16643    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   329


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1926       |            op = cpy;   /* wildcopy correction */                                                | 16644    23
  1927       |        }                                                                                        | 16645    23
  1928       |    safe_decode:                                                                                 | 16646    23
  1929       |#endif                                                                                           | 16647    23
  1930       |                                                                                                 | 16648    23
  1931       |        /* Main Loop : decode remaining sequences where output < FASTLOOP_SAFE_DISTANCE */       | 16649    23
  1932       |        while (1) {                                                                              | 16650    23
  1933       |            token = *ip++;                                                                       | 16651    23
  1934       |            length = token >> ML_BITS;  /* literal length */                                     | 16652    23
  1935       |                                                                                                 | 16653    23
  1936       |            assert(!endOnInput || ip <= iend); /* ip < iend before the increment */              | 16654    23
  1937       |                                                                                                 | 16655    23
  1938       |            /* A two-stage shortcut for the most common case:                                    | 16656    23
  1939       |             * 1) If the literal length is 0..14, and there is enough space,                     | 16657    23
  1940       |             * enter the shortcut and copy 16 bytes on behalf of the literals                    | 16658    23
  1941       |             * (in the fast mode, only 8 bytes can be safely copied this way).                   | 16659    23
  1942       |             * 2) Further if the match length is 4..18, copy 18 bytes in a similar               | 16660    23
  1943       |             * manner; but we ensure that there's enough space in the output for                 | 16661    23
  1944       |             * those 18 bytes earlier, upon entering the shortcut (in other words,               | 16662    23
  1945       |             * there is a combined check for both stages).                                       | 16663    23
  1946       |             */                                                                                  | 16664    23
  1947       |            if ( (endOnInput ? length != RUN_MASK : length <= 8)                                 | 16665    23
  1948       |                /* strictly "less than" on input, to re-enter the loop with at least one byte */ | 16666    23
  1949       |              && likely((endOnInput ? ip < shortiend : 1) & (op <= shortoend)) ) {               | 16667    23
  1950       |                /* Copy the literals */                                                          | 16668    23
  1951       |                LZ4_memcpy(op, ip, endOnInput ? 16 : 8);                                         | 16669    23
  1952       |                op += length; ip += length;                                                      | 16670    23
  1953       |                                                                                                 | 16671    23
  1954       |                /* The second stage: prepare for match copying, decode full info.                | 16672    23
  1955       |                 * If it doesn't work out, the info won't be wasted. */                          | 16673    23
  1956       |                length = token & ML_MASK; /* match length */                                     | 16674    23
  1957       |                offset = LZ4_readLE16(ip); ip += 2;                                              | 16675    23
  1958       |                match = op - offset;                                                             | 16676    23
  1959       |                assert(match <= op); /* check overflow */                                        | 16677    23
  1960       |                                                                                                 | 16678    23
  1961       |                /* Do not deal with overlapping matches. */                                      | 16679    23
  1962       |                if ( (length != ML_MASK)                                                         | 16680    23
  1963       |                  && (offset >= 8)                                                               | 16681    23
  1964       |                  && (dict==withPrefix64k || match >= lowPrefix) ) {                             | 16682    23
  1965       |                    /* Copy the match. */                                                        | 16683    23
  1966       |                    LZ4_memcpy(op + 0, match + 0, 8);                                            | 16684    23
  1967       |                    LZ4_memcpy(op + 8, match + 8, 8);                                            | 16685    23
  1968       |                    LZ4_memcpy(op +16, match +16, 2);                                            | 16686    23
  1969       |                    op += length + MINMATCH;                                                     | 16687    23
  1970       |                    /* Both stages worked, load the next token. */                               | 16688    23
  1971       |                    continue;                                                                    | 16689    23
  1972       |                }                                                                                | 16690    23
  1973       |                                                                                                 | 16691    23
  1974       |                /* The second stage didn't work out, but the info is ready.                      | 16692    23
  1975       |                 * Propel it right to the point of match copying. */                             | 16693    23
  1976       |                goto _copy_match;                                                                | 16694    23
  1977       |            }                                                                                    | 16695    23
  1978       |                                                                                                 | 16696    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   330


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1979       |            /* decode literal length */                                                          | 16697    23
  1980       |            if (length == RUN_MASK) {                                                            | 16698    23
  1981       |                variable_length_error error = ok;                                                | 16699    23
  1982       |                length += read_variable_length(&ip, iend-RUN_MASK, (int)endOnInput, (int)endOnInp| 16700    23
  1982       +ut, &error);                                                                                     + 16700    23
  1983       |                if (error == initial_error) { goto _output_error; }                              | 16701    23
  1984       |                if ((safeDecode) && unlikely((uptrval)(op)+length<(uptrval)(op))) { goto _output_| 16702    23
  1984       +error; } /* overflow detection */                                                                + 16702    23
  1985       |                if ((safeDecode) && unlikely((uptrval)(ip)+length<(uptrval)(ip))) { goto _output_| 16703    23
  1985       +error; } /* overflow detection */                                                                + 16703    23
  1986       |            }                                                                                    | 16704    23
  1987       |                                                                                                 | 16705    23
  1988       |            /* copy literals */                                                                  | 16706    23
  1989       |            cpy = op+length;                                                                     | 16707    23
  1990       |#if LZ4_FAST_DEC_LOOP                                                                            | 16708    23
  1991       |        safe_literal_copy:                                                                       | 16709    23
  1992       |#endif                                                                                           | 16710    23
  1993       |            LZ4_STATIC_ASSERT(MFLIMIT >= WILDCOPYLENGTH);                                        | 16711    23
  1994       |            if ( ((endOnInput) && ((cpy>oend-MFLIMIT) || (ip+length>iend-(2+1+LASTLITERALS))) )  | 16712    23
  1995       |              || ((!endOnInput) && (cpy>oend-WILDCOPYLENGTH)) )                                  | 16713    23
  1996       |            {                                                                                    | 16714    23
  1997       |                /* We've either hit the input parsing restriction or the output parsing restricti| 16715    23
  1997       +on.                                                                                              + 16715    23
  1998       |                 * In the normal scenario, decoding a full block, it must be the last sequence,  | 16716    23
  1999       |                 * otherwise it's an error (invalid input or dimensions).                        | 16717    23
  2000       |                 * In partialDecoding scenario, it's necessary to ensure there is no buffer overf| 16718    23
  2000       +low.                                                                                             + 16718    23
  2001       |                 */                                                                              | 16719    23
  2002       |                if (partialDecoding) {                                                           | 16720    23
  2003       |                    /* Since we are partial decoding we may be in this block because of the outpu| 16721    23
  2003       +t parsing                                                                                        + 16721    23
  2004       |                     * restriction, which is not valid since the output buffer is allowed to be u| 16722    23
  2004       +ndersized.                                                                                       + 16722    23
  2005       |                     */                                                                          | 16723    23
  2006       |                    assert(endOnInput);                                                          | 16724    23
  2007       |                    DEBUGLOG(7, "partialDecoding: copying literals, close to input or output end"| 16725    23
  2007       +)                                                                                                + 16725    23
  2008       |                    DEBUGLOG(7, "partialDecoding: literal length = %u", (unsigned)length);       | 16726    23
  2009       |                    DEBUGLOG(7, "partialDecoding: remaining space in dstBuffer : %i", (int)(oend | 16727    23
  2009       +- op));                                                                                          + 16727    23
  2010       |                    DEBUGLOG(7, "partialDecoding: remaining space in srcBuffer : %i", (int)(iend | 16728    23
  2010       +- ip));                                                                                          + 16728    23
  2011       |                    /* Finishing in the middle of a literals segment,                            | 16729    23
  2012       |                     * due to lack of input.                                                     | 16730    23
  2013       |                     */                                                                          | 16731    23
  2014       |                    if (ip+length > iend) {                                                      | 16732    23
  2015       |                        length = (size_t)(iend-ip);                                              | 16733    23
  2016       |                        cpy = op + length;                                                       | 16734    23
  2017       |                    }                                                                            | 16735    23
  2018       |                    /* Finishing in the middle of a literals segment,                            | 16736    23
  2019       |                     * due to lack of output space.                                              | 16737    23
  2020       |                     */                                                                          | 16738    23
  2021       |                    if (cpy > oend) {                                                            | 16739    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   331


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2022       |                        cpy = oend;                                                              | 16740    23
  2023       |                        assert(op<=oend);                                                        | 16741    23
  2024       |                        length = (size_t)(oend-op);                                              | 16742    23
  2025       |                    }                                                                            | 16743    23
  2026       |                } else {                                                                         | 16744    23
  2027       |                    /* We must be on the last sequence because of the parsing limitations so chec| 16745    23
  2027       +k                                                                                                + 16745    23
  2028       |                     * that we exactly regenerate the original size (must be exact when !endOnInp| 16746    23
  2028       +ut).                                                                                             + 16746    23
  2029       |                     */                                                                          | 16747    23
  2030       |                    if ((!endOnInput) && (cpy != oend)) { goto _output_error; }                  | 16748    23
  2031       |                     /* We must be on the last sequence (or invalid) because of the parsing limit| 16749    23
  2031       +ations                                                                                           + 16749    23
  2032       |                      * so check that we exactly consume the input and don't overrun the output b| 16750    23
  2032       +uffer.                                                                                           + 16750    23
  2033       |                      */                                                                         | 16751    23
  2034       |                    if ((endOnInput) && ((ip+length != iend) || (cpy > oend))) {                 | 16752    23
  2035       |                        DEBUGLOG(6, "should have been last run of literals")                     | 16753    23
  2036       |                        DEBUGLOG(6, "ip(%p) + length(%i) = %p != iend (%p)", ip, (int)length, ip+| 16754    23
  2036       +length, iend);                                                                                   + 16754    23
  2037       |                        DEBUGLOG(6, "or cpy(%p) > oend(%p)", cpy, oend);                         | 16755    23
  2038       |                        goto _output_error;                                                      | 16756    23
  2039       |                    }                                                                            | 16757    23
  2040       |                }                                                                                | 16758    23
  2041       |                memmove(op, ip, length);  /* supports overlapping memory regions; only matters fo| 16759    23
  2041       +r in-place decompression scenarios */                                                            + 16759    23
  2042       |                ip += length;                                                                    | 16760    23
  2043       |                op += length;                                                                    | 16761    23
  2044       |                /* Necessarily EOF when !partialDecoding.                                        | 16762    23
  2045       |                 * When partialDecoding, it is EOF if we've either                               | 16763    23
  2046       |                 * filled the output buffer or                                                   | 16764    23
  2047       |                 * can't proceed with reading an offset for following match.                     | 16765    23
  2048       |                 */                                                                              | 16766    23
  2049       |                if (!partialDecoding || (cpy == oend) || (ip >= (iend-2))) {                     | 16767    23
  2050       |                    break;                                                                       | 16768    23
  2051       |                }                                                                                | 16769    23
  2052       |            } else {                                                                             | 16770    23
  2053       |                LZ4_wildCopy8(op, ip, cpy);   /* may overwrite up to WILDCOPYLENGTH beyond cpy */| 16771    23
  2054       |                ip += length; op = cpy;                                                          | 16772    23
  2055       |            }                                                                                    | 16773    23
  2056       |                                                                                                 | 16774    23
  2057       |            /* get offset */                                                                     | 16775    23
  2058       |            offset = LZ4_readLE16(ip); ip+=2;                                                    | 16776    23
  2059       |            match = op - offset;                                                                 | 16777    23
  2060       |                                                                                                 | 16778    23
  2061       |            /* get matchlength */                                                                | 16779    23
  2062       |            length = token & ML_MASK;                                                            | 16780    23
  2063       |                                                                                                 | 16781    23
  2064       |    _copy_match:                                                                                 | 16782    23
  2065       |            if (length == ML_MASK) {                                                             | 16783    23
  2066       |              variable_length_error error = ok;                                                  | 16784    23
  2067       |              length += read_variable_length(&ip, iend - LASTLITERALS + 1, (int)endOnInput, 0, &e| 16785    23
  2067       +rror);                                                                                           + 16785    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   332


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2068       |              if (error != ok) goto _output_error;                                               | 16786    23
  2069       |                if ((safeDecode) && unlikely((uptrval)(op)+length<(uptrval)op)) goto _output_erro| 16787    23
  2069       +r;   /* overflow detection */                                                                    + 16787    23
  2070       |            }                                                                                    | 16788    23
  2071       |            length += MINMATCH;                                                                  | 16789    23
  2072       |                                                                                                 | 16790    23
  2073       |#if LZ4_FAST_DEC_LOOP                                                                            | 16791    23
  2074       |        safe_match_copy:                                                                         | 16792    23
  2075       |#endif                                                                                           | 16793    23
  2076       |            if ((checkOffset) && (unlikely(match + dictSize < lowPrefix))) goto _output_error;   | 16794    23
  2076       +/* Error : offset outside buffers */                                                             + 16794    23
  2077       |            /* match starting within external dictionary */                                      | 16795    23
  2078       |            if ((dict==usingExtDict) && (match < lowPrefix)) {                                   | 16796    23
  2079       |                if (unlikely(op+length > oend-LASTLITERALS)) {                                   | 16797    23
  2080       |                    if (partialDecoding) length = MIN(length, (size_t)(oend-op));                | 16798    23
  2081       |                    else goto _output_error;   /* doesn't respect parsing restriction */         | 16799    23
  2082       |                }                                                                                | 16800    23
  2083       |                                                                                                 | 16801    23
  2084       |                if (length <= (size_t)(lowPrefix-match)) {                                       | 16802    23
  2085       |                    /* match fits entirely within external dictionary : just copy */             | 16803    23
  2086       |                    memmove(op, dictEnd - (lowPrefix-match), length);                            | 16804    23
  2087       |                    op += length;                                                                | 16805    23
  2088       |                } else {                                                                         | 16806    23
  2089       |                    /* match stretches into both external dictionary and current block */        | 16807    23
  2090       |                    size_t const copySize = (size_t)(lowPrefix - match);                         | 16808    23
  2091       |                    size_t const restSize = length - copySize;                                   | 16809    23
  2092       |                    LZ4_memcpy(op, dictEnd - copySize, copySize);                                | 16810    23
  2093       |                    op += copySize;                                                              | 16811    23
  2094       |                    if (restSize > (size_t)(op - lowPrefix)) {  /* overlap copy */               | 16812    23
  2095       |                        BYTE* const endOfMatch = op + restSize;                                  | 16813    23
  2096       |                        const BYTE* copyFrom = lowPrefix;                                        | 16814    23
  2097       |                        while (op < endOfMatch) *op++ = *copyFrom++;                             | 16815    23
  2098       |                    } else {                                                                     | 16816    23
  2099       |                        LZ4_memcpy(op, lowPrefix, restSize);                                     | 16817    23
  2100       |                        op += restSize;                                                          | 16818    23
  2101       |                }   }                                                                            | 16819    23
  2102       |                continue;                                                                        | 16820    23
  2103       |            }                                                                                    | 16821    23
  2104       |            assert(match >= lowPrefix);                                                          | 16822    23
  2105       |                                                                                                 | 16823    23
  2106       |            /* copy match within block */                                                        | 16824    23
  2107       |            cpy = op + length;                                                                   | 16825    23
  2108       |                                                                                                 | 16826    23
  2109       |            /* partialDecoding : may end anywhere within the block */                            | 16827    23
  2110       |            assert(op<=oend);                                                                    | 16828    23
  2111       |            if (partialDecoding && (cpy > oend-MATCH_SAFEGUARD_DISTANCE)) {                      | 16829    23
  2112       |                size_t const mlen = MIN(length, (size_t)(oend-op));                              | 16830    23
  2113       |                const BYTE* const matchEnd = match + mlen;                                       | 16831    23
  2114       |                BYTE* const copyEnd = op + mlen;                                                 | 16832    23
  2115       |                if (matchEnd > op) {   /* overlap copy */                                        | 16833    23
  2116       |                    while (op < copyEnd) { *op++ = *match++; }                                   | 16834    23
  2117       |                } else {                                                                         | 16835    23
  2118       |                    LZ4_memcpy(op, match, mlen);                                                 | 16836    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   333


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2119       |                }                                                                                | 16837    23
  2120       |                op = copyEnd;                                                                    | 16838    23
  2121       |                if (op == oend) { break; }                                                       | 16839    23
  2122       |                continue;                                                                        | 16840    23
  2123       |            }                                                                                    | 16841    23
  2124       |                                                                                                 | 16842    23
  2125       |            if (unlikely(offset<8)) {                                                            | 16843    23
  2126       |                LZ4_write32(op, 0);   /* silence msan warning when offset==0 */                  | 16844    23
  2127       |                op[0] = match[0];                                                                | 16845    23
  2128       |                op[1] = match[1];                                                                | 16846    23
  2129       |                op[2] = match[2];                                                                | 16847    23
  2130       |                op[3] = match[3];                                                                | 16848    23
  2131       |                match += inc32table[offset];                                                     | 16849    23
  2132       |                LZ4_memcpy(op+4, match, 4);                                                      | 16850    23
  2133       |                match -= dec64table[offset];                                                     | 16851    23
  2134       |            } else {                                                                             | 16852    23
  2135       |                LZ4_memcpy(op, match, 8);                                                        | 16853    23
  2136       |                match += 8;                                                                      | 16854    23
  2137       |            }                                                                                    | 16855    23
  2138       |            op += 8;                                                                             | 16856    23
  2139       |                                                                                                 | 16857    23
  2140       |            if (unlikely(cpy > oend-MATCH_SAFEGUARD_DISTANCE)) {                                 | 16858    23
  2141       |                BYTE* const oCopyLimit = oend - (WILDCOPYLENGTH-1);                              | 16859    23
  2142       |                if (cpy > oend-LASTLITERALS) { goto _output_error; } /* Error : last LASTLITERALS| 16860    23
  2142       + bytes must be literals (uncompressed) */                                                        + 16860    23
  2143       |                if (op < oCopyLimit) {                                                           | 16861    23
  2144       |                    LZ4_wildCopy8(op, match, oCopyLimit);                                        | 16862    23
  2145       |                    match += oCopyLimit - op;                                                    | 16863    23
  2146       |                    op = oCopyLimit;                                                             | 16864    23
  2147       |                }                                                                                | 16865    23
  2148       |                while (op < cpy) { *op++ = *match++; }                                           | 16866    23
  2149       |            } else {                                                                             | 16867    23
  2150       |                LZ4_memcpy(op, match, 8);                                                        | 16868    23
  2151       |                if (length > 16)  { LZ4_wildCopy8(op+8, match+8, cpy); }                         | 16869    23
  2152       |            }                                                                                    | 16870    23
  2153       |            op = cpy;   /* wildcopy correction */                                                | 16871    23
  2154       |        }                                                                                        | 16872    23
  2155       |                                                                                                 | 16873    23
  2156       |        /* end of decoding */                                                                    | 16874    23
  2157       |        if (endOnInput) {                                                                        | 16875    23
  2158       |            DEBUGLOG(5, "decoded %i bytes", (int) (((char*)op)-dst));                            | 16876    23
  2159       |           return (int) (((char*)op)-dst);     /* Nb of output bytes decoded */                  | 16877    23
  2160       |       } else {                                                                                  | 16878    23
  2161       |           return (int) (((const char*)ip)-src);   /* Nb of input bytes read */                  | 16879    23
  2162       |       }                                                                                         | 16880    23
  2163       |                                                                                                 | 16881    23
  2164       |        /* Overflow error detected */                                                            | 16882    23
  2165       |    _output_error:                                                                               | 16883    23
  2166       |        return (int) (-(((const char*)ip)-src))-1;                                               | 16884    23
  2167       |    }                                                                                            | 16885    23
  2168       |}                                                                                                | 16886    23
  2169       |                                                                                                 | 16887    23
  2170       |                                                                                                 | 16888    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   334


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2171       |/*===== Instantiate the API decoding functions. =====*/                                          | 16889    23
  2172       |                                                                                                 | 16890    23
  2173       |LZ4_FORCE_O2                                                                                     | 16891    23
  2174       |int LZ4_decompress_safe(const char* source, char* dest, int compressedSize, int maxDecompressedSi| 16892    23
  2174       +ze)                                                                                              + 16892    23
  2175       |{                                                                                                | 16893    23
  2176       |    return LZ4_decompress_generic(source, dest, compressedSize, maxDecompressedSize,             | 16894    23
  2177       |                                  endOnInputSize, decode_full_block, noDict,                     | 16895    23
  2178       |                                  (BYTE*)dest, NULL, 0);                                         | 16896    23
  2179       |}                                                                                                | 16897    23
  2180       |                                                                                                 | 16898    23
  2181       |LZ4_FORCE_O2                                                                                     | 16899    23
  2182       |int LZ4_decompress_safe_partial(const char* src, char* dst, int compressedSize, int targetOutputS| 16900    23
  2182       +ize, int dstCapacity)                                                                            + 16900    23
  2183       |{                                                                                                | 16901    23
  2184       |    dstCapacity = MIN(targetOutputSize, dstCapacity);                                            | 16902    23
  2185       |    return LZ4_decompress_generic(src, dst, compressedSize, dstCapacity,                         | 16903    23
  2186       |                                  endOnInputSize, partial_decode,                                | 16904    23
  2187       |                                  noDict, (BYTE*)dst, NULL, 0);                                  | 16905    23
  2188       |}                                                                                                | 16906    23
  2189       |                                                                                                 | 16907    23
  2190       |LZ4_FORCE_O2                                                                                     | 16908    23
  2191       |int LZ4_decompress_fast(const char* source, char* dest, int originalSize)                        | 16909    23
  2192       |{                                                                                                | 16910    23
  2193       |    return LZ4_decompress_generic(source, dest, 0, originalSize,                                 | 16911    23
  2194       |                                  endOnOutputSize, decode_full_block, withPrefix64k,             | 16912    23
  2195       |                                  (BYTE*)dest - 64 KB, NULL, 0);                                 | 16913    23
  2196       |}                                                                                                | 16914    23
  2197       |                                                                                                 | 16915    23
  2198       |/*===== Instantiate a few more decoding cases, used more than once. =====*/                      | 16916    23
  2199       |                                                                                                 | 16917    23
  2200       |LZ4_FORCE_O2 /* Exported, an obsolete API function. */                                           | 16918    23
  2201       |int LZ4_decompress_safe_withPrefix64k(const char* source, char* dest, int compressedSize, int max| 16919    23
  2201       +OutputSize)                                                                                      + 16919    23
  2202       |{                                                                                                | 16920    23
  2203       |    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,                   | 16921    23
  2204       |                                  endOnInputSize, decode_full_block, withPrefix64k,              | 16922    23
  2205       |                                  (BYTE*)dest - 64 KB, NULL, 0);                                 | 16923    23
  2206       |}                                                                                                | 16924    23
  2207       |                                                                                                 | 16925    23
  2208       |/* Another obsolete API function, paired with the previous one. */                               | 16926    23
  2209       |int LZ4_decompress_fast_withPrefix64k(const char* source, char* dest, int originalSize)          | 16927    23
  2210       |{                                                                                                | 16928    23
  2211       |    /* LZ4_decompress_fast doesn't validate match offsets,                                       | 16929    23
  2212       |     * and thus serves well with any prefixed dictionary. */                                     | 16930    23
  2213       |    return LZ4_decompress_fast(source, dest, originalSize);                                      | 16931    23
  2214       |}                                                                                                | 16932    23
  2215       |                                                                                                 | 16933    23
  2216       |LZ4_FORCE_O2                                                                                     | 16934    23
  2217       |static int LZ4_decompress_safe_withSmallPrefix(const char* source, char* dest, int compressedSize| 16935    23
  2217       +, int maxOutputSize,                                                                             + 16935    23
  2218       |                                               size_t prefixSize)                                | 16936    23
  2219       |{                                                                                                | 16937    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   335


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2220       |    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,                   | 16938    23
  2221       |                                  endOnInputSize, decode_full_block, noDict,                     | 16939    23
  2222       |                                  (BYTE*)dest-prefixSize, NULL, 0);                              | 16940    23
  2223       |}                                                                                                | 16941    23
  2224       |                                                                                                 | 16942    23
  2225       |LZ4_FORCE_O2                                                                                     | 16943    23
  2226       |int LZ4_decompress_safe_forceExtDict(const char* source, char* dest,                             | 16944    23
  2227       |                                     int compressedSize, int maxOutputSize,                      | 16945    23
  2228       |                                     const void* dictStart, size_t dictSize)                     | 16946    23
  2229       |{                                                                                                | 16947    23
  2230       |    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,                   | 16948    23
  2231       |                                  endOnInputSize, decode_full_block, usingExtDict,               | 16949    23
  2232       |                                  (BYTE*)dest, (const BYTE*)dictStart, dictSize);                | 16950    23
  2233       |}                                                                                                | 16951    23
  2234       |                                                                                                 | 16952    23
  2235       |LZ4_FORCE_O2                                                                                     | 16953    23
  2236       |static int LZ4_decompress_fast_extDict(const char* source, char* dest, int originalSize,         | 16954    23
  2237       |                                       const void* dictStart, size_t dictSize)                   | 16955    23
  2238       |{                                                                                                | 16956    23
  2239       |    return LZ4_decompress_generic(source, dest, 0, originalSize,                                 | 16957    23
  2240       |                                  endOnOutputSize, decode_full_block, usingExtDict,              | 16958    23
  2241       |                                  (BYTE*)dest, (const BYTE*)dictStart, dictSize);                | 16959    23
  2242       |}                                                                                                | 16960    23
  2243       |                                                                                                 | 16961    23
  2244       |/* The "double dictionary" mode, for use with e.g. ring buffers: the first part                  | 16962    23
  2245       | * of the dictionary is passed as prefix, and the second via dictStart + dictSize.               | 16963    23
  2246       | * These routines are used only once, in LZ4_decompress_*_continue().                            | 16964    23
  2247       | */                                                                                              | 16965    23
  2248       |LZ4_FORCE_INLINE                                                                                 | 16966    23
  2249       |int LZ4_decompress_safe_doubleDict(const char* source, char* dest, int compressedSize, int maxOut| 16967    23
  2249       +putSize,                                                                                         + 16967    23
  2250       |                                   size_t prefixSize, const void* dictStart, size_t dictSize)    | 16968    23
  2251       |{                                                                                                | 16969    23
  2252       |    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,                   | 16970    23
  2253       |                                  endOnInputSize, decode_full_block, usingExtDict,               | 16971    23
  2254       |                                  (BYTE*)dest-prefixSize, (const BYTE*)dictStart, dictSize);     | 16972    23
  2255       |}                                                                                                | 16973    23
  2256       |                                                                                                 | 16974    23
  2257       |LZ4_FORCE_INLINE                                                                                 | 16975    23
  2258       |int LZ4_decompress_fast_doubleDict(const char* source, char* dest, int originalSize,             | 16976    23
  2259       |                                   size_t prefixSize, const void* dictStart, size_t dictSize)    | 16977    23
  2260       |{                                                                                                | 16978    23
  2261       |    return LZ4_decompress_generic(source, dest, 0, originalSize,                                 | 16979    23
  2262       |                                  endOnOutputSize, decode_full_block, usingExtDict,              | 16980    23
  2263       |                                  (BYTE*)dest-prefixSize, (const BYTE*)dictStart, dictSize);     | 16981    23
  2264       |}                                                                                                | 16982    23
  2265       |                                                                                                 | 16983    23
  2266       |/*===== streaming decompression functions =====*/                                                | 16984    23
  2267       |                                                                                                 | 16985    23
  2268       |LZ4_streamDecode_t* LZ4_createStreamDecode(void)                                                 | 16986    23
  2269       |{                                                                                                | 16987    23
  2270       |    LZ4_streamDecode_t* lz4s = (LZ4_streamDecode_t*) ALLOC_AND_ZERO(sizeof(LZ4_streamDecode_t)); | 16988    23
  2271       |    LZ4_STATIC_ASSERT(LZ4_STREAMDECODESIZE >= sizeof(LZ4_streamDecode_t_internal));    /* A compi| 16989    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   336


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2271       +lation error here means LZ4_STREAMDECODESIZE is not large enough */                              + 16989    23
  2272       |    return lz4s;                                                                                 | 16990    23
  2273       |}                                                                                                | 16991    23
  2274       |                                                                                                 | 16992    23
  2275       |int LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream)                                        | 16993    23
  2276       |{                                                                                                | 16994    23
  2277       |    if (LZ4_stream == NULL) { return 0; }  /* support free on NULL */                            | 16995    23
  2278       |    FREEMEM(LZ4_stream);                                                                         | 16996    23
  2279       |    return 0;                                                                                    | 16997    23
  2280       |}                                                                                                | 16998    23
  2281       |                                                                                                 | 16999    23
  2282       |/*! LZ4_setStreamDecode() :                                                                      | 17000    23
  2283       | *  Use this function to instruct where to find the dictionary.                                  | 17001    23
  2284       | *  This function is not necessary if previous data is still available where it was decoded.     | 17002    23
  2285       | *  Loading a size of 0 is allowed (same effect as no dictionary).                               | 17003    23
  2286       | * @return : 1 if OK, 0 if error                                                                 | 17004    23
  2287       | */                                                                                              | 17005    23
  2288       |int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary, int dictSi| 17006    23
  2288       +ze)                                                                                              + 17006    23
  2289       |{                                                                                                | 17007    23
  2290       |    LZ4_streamDecode_t_internal* lz4sd = &LZ4_streamDecode->internal_donotuse;                   | 17008    23
  2291       |    lz4sd->prefixSize = (size_t) dictSize;                                                       | 17009    23
  2292       |    lz4sd->prefixEnd = (const BYTE*) dictionary + dictSize;                                      | 17010    23
  2293       |    lz4sd->externalDict = NULL;                                                                  | 17011    23
  2294       |    lz4sd->extDictSize  = 0;                                                                     | 17012    23
  2295       |    return 1;                                                                                    | 17013    23
  2296       |}                                                                                                | 17014    23
  2297       |                                                                                                 | 17015    23
  2298       |/*! LZ4_decoderRingBufferSize() :                                                                | 17016    23
  2299       | *  when setting a ring buffer for streaming decompression (optional scenario),                  | 17017    23
  2300       | *  provides the minimum size of this ring buffer                                                | 17018    23
  2301       | *  to be compatible with any source respecting maxBlockSize condition.                          | 17019    23
  2302       | *  Note : in a ring buffer scenario,                                                            | 17020    23
  2303       | *  blocks are presumed decompressed next to each other.                                         | 17021    23
  2304       | *  When not enough space remains for next block (remainingSize < maxBlockSize),                 | 17022    23
  2305       | *  decoding resumes from beginning of ring buffer.                                              | 17023    23
  2306       | * @return : minimum ring buffer size,                                                           | 17024    23
  2307       | *           or 0 if there is an error (invalid maxBlockSize).                                   | 17025    23
  2308       | */                                                                                              | 17026    23
  2309       |int LZ4_decoderRingBufferSize(int maxBlockSize)                                                  | 17027    23
  2310       |{                                                                                                | 17028    23
  2311       |    if (maxBlockSize < 0) return 0;                                                              | 17029    23
  2312       |    if (maxBlockSize > LZ4_MAX_INPUT_SIZE) return 0;                                             | 17030    23
  2313       |    if (maxBlockSize < 16) maxBlockSize = 16;                                                    | 17031    23
  2314       |    return LZ4_DECODER_RING_BUFFER_SIZE(maxBlockSize);                                           | 17032    23
  2315       |}                                                                                                | 17033    23
  2316       |                                                                                                 | 17034    23
  2317       |/*                                                                                               | 17035    23
  2318       |*_continue() :                                                                                   | 17036    23
  2319       |    These decoding functions allow decompression of multiple blocks in "streaming" mode.         | 17037    23
  2320       |    Previously decoded blocks must still be available at the memory position where they were deco| 17038    23
  2320       +ded.                                                                                             + 17038    23
  2321       |    If it's not possible, save the relevant part of decoded data into a safe buffer,             | 17039    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   337


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2322       |    and indicate where it stands using LZ4_setStreamDecode()                                     | 17040    23
  2323       |*/                                                                                               | 17041    23
  2324       |LZ4_FORCE_O2                                                                                     | 17042    23
  2325       |int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char*| 17043    23
  2325       + dest, int compressedSize, int maxOutputSize)                                                    + 17043    23
  2326       |{                                                                                                | 17044    23
  2327       |    LZ4_streamDecode_t_internal* lz4sd = &LZ4_streamDecode->internal_donotuse;                   | 17045    23
  2328       |    int result;                                                                                  | 17046    23
  2329       |                                                                                                 | 17047    23
  2330       |    if (lz4sd->prefixSize == 0) {                                                                | 17048    23
  2331       |        /* The first call, no dictionary yet. */                                                 | 17049    23
  2332       |        assert(lz4sd->extDictSize == 0);                                                         | 17050    23
  2333       |        result = LZ4_decompress_safe(source, dest, compressedSize, maxOutputSize);               | 17051    23
  2334       |        if (result <= 0) return result;                                                          | 17052    23
  2335       |        lz4sd->prefixSize = (size_t)result;                                                      | 17053    23
  2336       |        lz4sd->prefixEnd = (BYTE*)dest + result;                                                 | 17054    23
  2337       |    } else if (lz4sd->prefixEnd == (BYTE*)dest) {                                                | 17055    23
  2338       |        /* They're rolling the current segment. */                                               | 17056    23
  2339       |        if (lz4sd->prefixSize >= 64 KB - 1)                                                      | 17057    23
  2340       |            result = LZ4_decompress_safe_withPrefix64k(source, dest, compressedSize, maxOutputSiz| 17058    23
  2340       +e);                                                                                              + 17058    23
  2341       |        else if (lz4sd->extDictSize == 0)                                                        | 17059    23
  2342       |            result = LZ4_decompress_safe_withSmallPrefix(source, dest, compressedSize, maxOutputS| 17060    23
  2342       +ize,                                                                                             + 17060    23
  2343       |                                                         lz4sd->prefixSize);                     | 17061    23
  2344       |        else                                                                                     | 17062    23
  2345       |            result = LZ4_decompress_safe_doubleDict(source, dest, compressedSize, maxOutputSize, | 17063    23
  2346       |                                                    lz4sd->prefixSize, lz4sd->externalDict, lz4sd| 17064    23
  2346       +->extDictSize);                                                                                  + 17064    23
  2347       |        if (result <= 0) return result;                                                          | 17065    23
  2348       |        lz4sd->prefixSize += (size_t)result;                                                     | 17066    23
  2349       |        lz4sd->prefixEnd  += result;                                                             | 17067    23
  2350       |    } else {                                                                                     | 17068    23
  2351       |        /* The buffer wraps around, or they're switching to another buffer. */                   | 17069    23
  2352       |        lz4sd->extDictSize = lz4sd->prefixSize;                                                  | 17070    23
  2353       |        lz4sd->externalDict = lz4sd->prefixEnd - lz4sd->extDictSize;                             | 17071    23
  2354       |        result = LZ4_decompress_safe_forceExtDict(source, dest, compressedSize, maxOutputSize,   | 17072    23
  2355       |                                                  lz4sd->externalDict, lz4sd->extDictSize);      | 17073    23
  2356       |        if (result <= 0) return result;                                                          | 17074    23
  2357       |        lz4sd->prefixSize = (size_t)result;                                                      | 17075    23
  2358       |        lz4sd->prefixEnd  = (BYTE*)dest + result;                                                | 17076    23
  2359       |    }                                                                                            | 17077    23
  2360       |                                                                                                 | 17078    23
  2361       |    return result;                                                                               | 17079    23
  2362       |}                                                                                                | 17080    23
  2363       |                                                                                                 | 17081    23
  2364       |LZ4_FORCE_O2                                                                                     | 17082    23
  2365       |int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char*| 17083    23
  2365       + dest, int originalSize)                                                                         + 17083    23
  2366       |{                                                                                                | 17084    23
  2367       |    LZ4_streamDecode_t_internal* lz4sd = &LZ4_streamDecode->internal_donotuse;                   | 17085    23
  2368       |    int result;                                                                                  | 17086    23
  2369       |    assert(originalSize >= 0);                                                                   | 17087    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   338


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2370       |                                                                                                 | 17088    23
  2371       |    if (lz4sd->prefixSize == 0) {                                                                | 17089    23
  2372       |        assert(lz4sd->extDictSize == 0);                                                         | 17090    23
  2373       |        result = LZ4_decompress_fast(source, dest, originalSize);                                | 17091    23
  2374       |        if (result <= 0) return result;                                                          | 17092    23
  2375       |        lz4sd->prefixSize = (size_t)originalSize;                                                | 17093    23
  2376       |        lz4sd->prefixEnd = (BYTE*)dest + originalSize;                                           | 17094    23
  2377       |    } else if (lz4sd->prefixEnd == (BYTE*)dest) {                                                | 17095    23
  2378       |        if (lz4sd->prefixSize >= 64 KB - 1 || lz4sd->extDictSize == 0)                           | 17096    23
  2379       |            result = LZ4_decompress_fast(source, dest, originalSize);                            | 17097    23
  2380       |        else                                                                                     | 17098    23
  2381       |            result = LZ4_decompress_fast_doubleDict(source, dest, originalSize,                  | 17099    23
  2382       |                                                    lz4sd->prefixSize, lz4sd->externalDict, lz4sd| 17100    23
  2382       +->extDictSize);                                                                                  + 17100    23
  2383       |        if (result <= 0) return result;                                                          | 17101    23
  2384       |        lz4sd->prefixSize += (size_t)originalSize;                                               | 17102    23
  2385       |        lz4sd->prefixEnd  += originalSize;                                                       | 17103    23
  2386       |    } else {                                                                                     | 17104    23
  2387       |        lz4sd->extDictSize = lz4sd->prefixSize;                                                  | 17105    23
  2388       |        lz4sd->externalDict = lz4sd->prefixEnd - lz4sd->extDictSize;                             | 17106    23
  2389       |        result = LZ4_decompress_fast_extDict(source, dest, originalSize,                         | 17107    23
  2390       |                                             lz4sd->externalDict, lz4sd->extDictSize);           | 17108    23
  2391       |        if (result <= 0) return result;                                                          | 17109    23
  2392       |        lz4sd->prefixSize = (size_t)originalSize;                                                | 17110    23
  2393       |        lz4sd->prefixEnd  = (BYTE*)dest + originalSize;                                          | 17111    23
  2394       |    }                                                                                            | 17112    23
  2395       |                                                                                                 | 17113    23
  2396       |    return result;                                                                               | 17114    23
  2397       |}                                                                                                | 17115    23
  2398       |                                                                                                 | 17116    23
  2399       |                                                                                                 | 17117    23
  2400       |/*                                                                                               | 17118    23
  2401       |Advanced decoding functions :                                                                    | 17119    23
  2402       |*_usingDict() :                                                                                  | 17120    23
  2403       |    These decoding functions work the same as "_continue" ones,                                  | 17121    23
  2404       |    the dictionary must be explicitly provided within parameters                                 | 17122    23
  2405       |*/                                                                                               | 17123    23
  2406       |                                                                                                 | 17124    23
  2407       |int LZ4_decompress_safe_usingDict(const char* source, char* dest, int compressedSize, int maxOutp| 17125    23
  2407       +utSize, const char* dictStart, int dictSize)                                                     + 17125    23
  2408       |{                                                                                                | 17126    23
  2409       |    if (dictSize==0)                                                                             | 17127    23
  2410       |        return LZ4_decompress_safe(source, dest, compressedSize, maxOutputSize);                 | 17128    23
  2411       |    if (dictStart+dictSize == dest) {                                                            | 17129    23
  2412       |        if (dictSize >= 64 KB - 1) {                                                             | 17130    23
  2413       |            return LZ4_decompress_safe_withPrefix64k(source, dest, compressedSize, maxOutputSize)| 17131    23
  2413       +;                                                                                                + 17131    23
  2414       |        }                                                                                        | 17132    23
  2415       |        assert(dictSize >= 0);                                                                   | 17133    23
  2416       |        return LZ4_decompress_safe_withSmallPrefix(source, dest, compressedSize, maxOutputSize, (| 17134    23
  2416       +size_t)dictSize);                                                                                + 17134    23
  2417       |    }                                                                                            | 17135    23
  2418       |    assert(dictSize >= 0);                                                                       | 17136    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   339


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2419       |    return LZ4_decompress_safe_forceExtDict(source, dest, compressedSize, maxOutputSize, dictStar| 17137    23
  2419       +t, (size_t)dictSize);                                                                            + 17137    23
  2420       |}                                                                                                | 17138    23
  2421       |                                                                                                 | 17139    23
  2422       |int LZ4_decompress_fast_usingDict(const char* source, char* dest, int originalSize, const char* d| 17140    23
  2422       +ictStart, int dictSize)                                                                          + 17140    23
  2423       |{                                                                                                | 17141    23
  2424       |    if (dictSize==0 || dictStart+dictSize == dest)                                               | 17142    23
  2425       |        return LZ4_decompress_fast(source, dest, originalSize);                                  | 17143    23
  2426       |    assert(dictSize >= 0);                                                                       | 17144    23
  2427       |    return LZ4_decompress_fast_extDict(source, dest, originalSize, dictStart, (size_t)dictSize); | 17145    23
  2428       |}                                                                                                | 17146    23
  2429       |                                                                                                 | 17147    23
  2430       |                                                                                                 | 17148    23
  2431       |/*=*************************************************                                             | 17149    23
  2432       |*  Obsolete Functions                                                                            | 17150    23
  2433       |***************************************************/                                             | 17151    23
  2434       |/* obsolete compression functions */                                                             | 17152    23
  2435       |int LZ4_compress_limitedOutput(const char* source, char* dest, int inputSize, int maxOutputSize) | 17153    23
  2436       |{                                                                                                | 17154    23
  2437       |    return LZ4_compress_default(source, dest, inputSize, maxOutputSize);                         | 17155    23
  2438       |}                                                                                                | 17156    23
  2439       |int LZ4_compress(const char* src, char* dest, int srcSize)                                       | 17157    23
  2440       |{                                                                                                | 17158    23
  2441       |    return LZ4_compress_default(src, dest, srcSize, LZ4_compressBound(srcSize));                 | 17159    23
  2442       |}                                                                                                | 17160    23
  2443       |int LZ4_compress_limitedOutput_withState (void* state, const char* src, char* dst, int srcSize, i| 17161    23
  2443       +nt dstSize)                                                                                      + 17161    23
  2444       |{                                                                                                | 17162    23
  2445       |    return LZ4_compress_fast_extState(state, src, dst, srcSize, dstSize, 1);                     | 17163    23
  2446       |}                                                                                                | 17164    23
  2447       |int LZ4_compress_withState (void* state, const char* src, char* dst, int srcSize)                | 17165    23
  2448       |{                                                                                                | 17166    23
  2449       |    return LZ4_compress_fast_extState(state, src, dst, srcSize, LZ4_compressBound(srcSize), 1);  | 17167    23
  2450       |}                                                                                                | 17168    23
  2451       |int LZ4_compress_limitedOutput_continue (LZ4_stream_t* LZ4_stream, const char* src, char* dst, in| 17169    23
  2451       +t srcSize, int dstCapacity)                                                                      + 17169    23
  2452       |{                                                                                                | 17170    23
  2453       |    return LZ4_compress_fast_continue(LZ4_stream, src, dst, srcSize, dstCapacity, 1);            | 17171    23
  2454       |}                                                                                                | 17172    23
  2455       |int LZ4_compress_continue (LZ4_stream_t* LZ4_stream, const char* source, char* dest, int inputSiz| 17173    23
  2455       +e)                                                                                               + 17173    23
  2456       |{                                                                                                | 17174    23
  2457       |    return LZ4_compress_fast_continue(LZ4_stream, source, dest, inputSize, LZ4_compressBound(inpu| 17175    23
  2457       +tSize), 1);                                                                                      + 17175    23
  2458       |}                                                                                                | 17176    23
  2459       |                                                                                                 | 17177    23
  2460       |/*                                                                                               | 17178    23
  2461       |These decompression functions are deprecated and should no longer be used.                       | 17179    23
  2462       |They are only provided here for compatibility with older user programs.                          | 17180    23
  2463       |- LZ4_uncompress is totally equivalent to LZ4_decompress_fast                                    | 17181    23
  2464       |- LZ4_uncompress_unknownOutputSize is totally equivalent to LZ4_decompress_safe                  | 17182    23
  2465       |*/                                                                                               | 17183    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   340


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  2466       |int LZ4_uncompress (const char* source, char* dest, int outputSize)                              | 17184    23
  2467       |{                                                                                                | 17185    23
  2468       |    return LZ4_decompress_fast(source, dest, outputSize);                                        | 17186    23
  2469       |}                                                                                                | 17187    23
  2470       |int LZ4_uncompress_unknownOutputSize (const char* source, char* dest, int isize, int maxOutputSiz| 17188    23
  2470       +e)                                                                                               + 17188    23
  2471       |{                                                                                                | 17189    23
  2472       |    return LZ4_decompress_safe(source, dest, isize, maxOutputSize);                              | 17190    23
  2473       |}                                                                                                | 17191    23
  2474       |                                                                                                 | 17192    23
  2475       |/* Obsolete Streaming functions */                                                               | 17193    23
  2476       |                                                                                                 | 17194    23
  2477       |int LZ4_sizeofStreamState(void) { return LZ4_STREAMSIZE; }                                       | 17195    23
  2478       |                                                                                                 | 17196    23
  2479       |int LZ4_resetStreamState(void* state, char* inputBuffer)                                         | 17197    23
  2480       |{                                                                                                | 17198    23
  2481       |    (void)inputBuffer;                                                                           | 17199    23
  2482       |    LZ4_resetStream((LZ4_stream_t*)state);                                                       | 17200    23
  2483       |    return 0;                                                                                    | 17201    23
  2484       |}                                                                                                | 17202    23
  2485       |                                                                                                 | 17203    23
  2486       |void* LZ4_create (char* inputBuffer)                                                             | 17204    23
  2487       |{                                                                                                | 17205    23
  2488       |    (void)inputBuffer;                                                                           | 17206    23
  2489       |    return LZ4_createStream();                                                                   | 17207    23
  2490       |}                                                                                                | 17208    23
  2491       |                                                                                                 | 17209    23
  2492       |char* LZ4_slideInputBuffer (void* state)                                                         | 17210    23
  2493       |{                                                                                                | 17211    23
  2494       |    /* avoid const char * -> char * conversion warning */                                        | 17212    23
  2495       |    return (char *)(uptrval)((LZ4_stream_t*)state)->internal_donotuse.dictionary;                | 17213    23
  2496       |}                                                                                                | 17214    23
  2497       |                                                                                                 | 17215    23
  2498       |#endif   /* LZ4_COMMONDEFS_ONLY */                                                               | 17216    23
    67       |#endif                                                                                           | 17217     1
    68       |                                                                                                 | 17218     1
    69       |                                                                                                 | 17219     1
    70       |/*===   Enums   ===*/                                                                            | 17220     1
    71       |typedef enum { noDictCtx, usingDictCtxHc } dictCtx_directive;                                    | 17221     1
    72       |                                                                                                 | 17222     1
    73       |                                                                                                 | 17223     1
    74       |/*===   Constants   ===*/                                                                        | 17224     1
    75       |#define OPTIMAL_ML (int)((ML_MASK-1)+MINMATCH)                                                   | 17225     1
    76       |#define LZ4_OPT_NUM   (1<<12)                                                                    | 17226     1
    77       |                                                                                                 | 17227     1
    78       |                                                                                                 | 17228     1
    79       |/*===   Macros   ===*/                                                                           | 17229     1
    80       |#define MIN(a,b)   ( (a) < (b) ? (a) : (b) )                                                     | 17230     1
    81       |#define MAX(a,b)   ( (a) > (b) ? (a) : (b) )                                                     | 17231     1
    82       |#define HASH_FUNCTION(i)         (((i) * 2654435761U) >> ((MINMATCH*8)-LZ4HC_HASH_LOG))          | 17232     1
    83       |#define DELTANEXTMAXD(p)         chainTable[(p) & LZ4HC_MAXD_MASK]    /* flexible, LZ4HC_MAXD dep| 17233     1
    83       +endent */                                                                                        + 17233     1
    84       |#define DELTANEXTU16(table, pos) table[(U16)(pos)]   /* faster */                                | 17234     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   341


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    85       |/* Make fields passed to, and updated by LZ4HC_encodeSequence explicit */                        | 17235     1
    86       |#define UPDATABLE(ip, op, anchor) &ip, &op, &anchor                                              | 17236     1
    87       |                                                                                                 | 17237     1
    88       |static U32 LZ4HC_hashPtr(const void* ptr) { return HASH_FUNCTION(LZ4_read32(ptr)); }             | 17238     1
    88       +static U32 LZ4HC_hashPtr(const void* ptr) { return (((LZ4_read32(ptr)) * 2654435761U) >> ((4*8)-1+ 17238     1
    88       +5)); }                                                                                           + 17238     1
    89       |                                                                                                 | 17239     1
    90       |                                                                                                 | 17240     1
    91       |/**************************************                                                          | 17241     1
    92       |*  HC Compression                                                                                | 17242     1
    93       |**************************************/                                                          | 17243     1
    94       |static void LZ4HC_clearTables (LZ4HC_CCtx_internal* hc4)                                         | 17244     1
    95       |{                                                                                                | 17245     1
    96       |    MEM_INIT(hc4->hashTable, 0, sizeof(hc4->hashTable));                                         | 17246     1
    96       +        __memset((hc4->hashTable),(0),(sizeof(hc4->hashTable)));                                 + 17246     1
    97       |    MEM_INIT(hc4->chainTable, 0xFF, sizeof(hc4->chainTable));                                    | 17247     1
    97       +        __memset((hc4->chainTable),(0xFF),(sizeof(hc4->chainTable)));                            + 17247     1
    98       |}                                                                                                | 17248     1
    99       |                                                                                                 | 17249     1
   100       |static void LZ4HC_init_internal (LZ4HC_CCtx_internal* hc4, const BYTE* start)                    | 17250     1
   101       |{                                                                                                | 17251     1
   102       |    uptrval startingOffset = (uptrval)(hc4->end - hc4->base);                                    | 17252     1
   103       |    if (startingOffset > 1 GB) {                                                                 | 17253     1
   103       +        if (startingOffset > 1 *(1U<<30)) {                                                      + 17253     1
   104       |        LZ4HC_clearTables(hc4);                                                                  | 17254     1
   105       |        startingOffset = 0;                                                                      | 17255     1
   106       |    }                                                                                            | 17256     1
   107       |    startingOffset += 64 KB;                                                                     | 17257     1
   107       +        startingOffset += 64 *(1 <<10);                                                          + 17257     1
   108       |    hc4->nextToUpdate = (U32) startingOffset;                                                    | 17258     1
   109       |    hc4->base = start - startingOffset;                                                          | 17259     1
   110       |    hc4->end = start;                                                                            | 17260     1
   111       |    hc4->dictBase = start - startingOffset;                                                      | 17261     1
   112       |    hc4->dictLimit = (U32) startingOffset;                                                       | 17262     1
   113       |    hc4->lowLimit = (U32) startingOffset;                                                        | 17263     1
   114       |}                                                                                                | 17264     1
   115       |                                                                                                 | 17265     1
   116       |                                                                                                 | 17266     1
   117       |/* Update chains up to ip (excluded) */                                                          | 17267     1
   118       |LZ4_FORCE_INLINE void LZ4HC_Insert (LZ4HC_CCtx_internal* hc4, const BYTE* ip)                    | 17268     1
   118       +static inline void LZ4HC_Insert (LZ4HC_CCtx_internal* hc4, const BYTE* ip)                       + 17268     1
   119       |{                                                                                                | 17269     1
   120       |    U16* const chainTable = hc4->chainTable;                                                     | 17270     1
   121       |    U32* const hashTable  = hc4->hashTable;                                                      | 17271     1
   122       |    const BYTE* const base = hc4->base;                                                          | 17272     1
   123       |    U32 const target = (U32)(ip - base);                                                         | 17273     1
   124       |    U32 idx = hc4->nextToUpdate;                                                                 | 17274     1
   125       |                                                                                                 | 17275     1
   126       |    while (idx < target) {                                                                       | 17276     1
   127       |        U32 const h = LZ4HC_hashPtr(base+idx);                                                   | 17277     1
   128       |        size_t delta = idx - hashTable[h];                                                       | 17278     1
   129       |        if (delta>LZ4_DISTANCE_MAX) delta = LZ4_DISTANCE_MAX;                                    | 17279     1
   129       +                if (delta>65535) delta = 65535;                                                  + 17279     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   342


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   130       |        DELTANEXTU16(chainTable, idx) = (U16)delta;                                              | 17280     1
   130       +                chainTable[(U16)(idx)] = (U16)delta;                                             + 17280     1
   131       |        hashTable[h] = idx;                                                                      | 17281     1
   132       |        idx++;                                                                                   | 17282     1
   133       |    }                                                                                            | 17283     1
   134       |                                                                                                 | 17284     1
   135       |    hc4->nextToUpdate = target;                                                                  | 17285     1
   136       |}                                                                                                | 17286     1
   137       |                                                                                                 | 17287     1
   138       |/** LZ4HC_countBack() :                                                                          | 17288     1
   139       | * @return : negative value, nb of common bytes before ip/match */                               | 17289     1
   140       |LZ4_FORCE_INLINE                                                                                 | 17290     1
   140       +static inline                                                                                    + 17290     1
   141       |int LZ4HC_countBack(const BYTE* const ip, const BYTE* const match,                               | 17291     1
   142       |                    const BYTE* const iMin, const BYTE* const mMin)                              | 17292     1
   143       |{                                                                                                | 17293     1
   144       |    int back = 0;                                                                                | 17294     1
   145       |    int const min = (int)MAX(iMin - ip, mMin - match);                                           | 17295     1
   145       +        int const min = (int)( (iMin - ip) > (mMin - match) ? (iMin - ip) : (mMin - match) );    + 17295     1
   146       |    assert(min <= 0);                                                                            | 17296     1
   146       +        ((void)0);                                                                               + 17296     1
   147       |    assert(ip >= iMin); assert((size_t)(ip-iMin) < (1U<<31));                                    | 17297     1
   147       +        ((void)0); ((void)0);                                                                    + 17297     1
   148       |    assert(match >= mMin); assert((size_t)(match - mMin) < (1U<<31));                            | 17298     1
   148       +        ((void)0); ((void)0);                                                                    + 17298     1
   149       |    while ( (back > min)                                                                         | 17299     1
   149       +        while ( (back > min)                                                                     + 17299     1
   150       |         && (ip[back-1] == match[back-1]) )                                                      | 17300     1
   151       |            back--;                                                                              | 17301     1
   152       |    return back;                                                                                 | 17302     1
   153       |}                                                                                                | 17303     1
   154       |                                                                                                 | 17304     1
   155       |#if defined(_MSC_VER)                                                                            | 17305     1
   156       |#  define LZ4HC_rotl32(x,r) _rotl(x,r)                                                           | 17306     1
   157       |#else                                                                                            | 17307     1
   158       |#  define LZ4HC_rotl32(x,r) ((x << r) | (x >> (32 - r)))                                         | 17308     1
   159       |#endif                                                                                           | 17309     1
   160       |                                                                                                 | 17310     1
   161       |                                                                                                 | 17311     1
   162       |static U32 LZ4HC_rotatePattern(size_t const rotate, U32 const pattern)                           | 17312     1
   163       |{                                                                                                | 17313     1
   164       |    size_t const bitsToRotate = (rotate & (sizeof(pattern) - 1)) << 3;                           | 17314     1
   165       |    if (bitsToRotate == 0) return pattern;                                                       | 17315     1
   166       |    return LZ4HC_rotl32(pattern, (int)bitsToRotate);                                             | 17316     1
   166       +        return ((pattern << (int)bitsToRotate) | (pattern >> (32 - (int)bitsToRotate)));         + 17316     1
   167       |}                                                                                                | 17317     1
   168       |                                                                                                 | 17318     1
   169       |/* LZ4HC_countPattern() :                                                                        | 17319     1
   170       | * pattern32 must be a sample of repetitive pattern of length 1, 2 or 4 (but not 3!) */          | 17320     1
   171       |static unsigned                                                                                  | 17321     1
   172       |LZ4HC_countPattern(const BYTE* ip, const BYTE* const iEnd, U32 const pattern32)                  | 17322     1
   173       |{                                                                                                | 17323     1
   174       |    const BYTE* const iStart = ip;                                                               | 17324     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   343


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   175       |    reg_t const pattern = (sizeof(pattern)==8) ?                                                 | 17325     1
   176       |        (reg_t)pattern32 + (((reg_t)pattern32) << (sizeof(pattern)*4)) : pattern32;              | 17326     1
   177       |                                                                                                 | 17327     1
   178       |    while (likely(ip < iEnd-(sizeof(pattern)-1))) {                                              | 17328     1
   178       +        while (((ip < iEnd-(sizeof(pattern)-1)) != 0)) {                                         + 17328     1
   179       |        reg_t const diff = LZ4_read_ARCH(ip) ^ pattern;                                          | 17329     1
   180       |        if (!diff) { ip+=sizeof(pattern); continue; }                                            | 17330     1
   181       |        ip += LZ4_NbCommonBytes(diff);                                                           | 17331     1
   182       |        return (unsigned)(ip - iStart);                                                          | 17332     1
   183       |    }                                                                                            | 17333     1
   184       |                                                                                                 | 17334     1
   185       |    if (LZ4_isLittleEndian()) {                                                                  | 17335     1
   186       |        reg_t patternByte = pattern;                                                             | 17336     1
   187       |        while ((ip<iEnd) && (*ip == (BYTE)patternByte)) {                                        | 17337     1
   188       |            ip++; patternByte >>= 8;                                                             | 17338     1
   189       |        }                                                                                        | 17339     1
   190       |    } else {  /* big endian */                                                                   | 17340     1
   191       |        U32 bitOffset = (sizeof(pattern)*8) - 8;                                                 | 17341     1
   192       |        while (ip < iEnd) {                                                                      | 17342     1
   193       |            BYTE const byte = (BYTE)(pattern >> bitOffset);                                      | 17343     1
   194       |            if (*ip != byte) break;                                                              | 17344     1
   195       |            ip ++; bitOffset -= 8;                                                               | 17345     1
   196       |        }                                                                                        | 17346     1
   197       |    }                                                                                            | 17347     1
   198       |                                                                                                 | 17348     1
   199       |    return (unsigned)(ip - iStart);                                                              | 17349     1
   200       |}                                                                                                | 17350     1
   201       |                                                                                                 | 17351     1
   202       |/* LZ4HC_reverseCountPattern() :                                                                 | 17352     1
   203       | * pattern must be a sample of repetitive pattern of length 1, 2 or 4 (but not 3!)               | 17353     1
   204       | * read using natural platform endianess */                                                      | 17354     1
   205       |static unsigned                                                                                  | 17355     1
   206       |LZ4HC_reverseCountPattern(const BYTE* ip, const BYTE* const iLow, U32 pattern)                   | 17356     1
   207       |{                                                                                                | 17357     1
   208       |    const BYTE* const iStart = ip;                                                               | 17358     1
   209       |                                                                                                 | 17359     1
   210       |    while (likely(ip >= iLow+4)) {                                                               | 17360     1
   210       +        while (((ip >= iLow+4) != 0)) {                                                          + 17360     1
   211       |        if (LZ4_read32(ip-4) != pattern) break;                                                  | 17361     1
   212       |        ip -= 4;                                                                                 | 17362     1
   213       |    }                                                                                            | 17363     1
   214       |    {   const BYTE* bytePtr = (const BYTE*)(&pattern) + 3; /* works for any endianess */         | 17364     1
   215       |        while (likely(ip>iLow)) {                                                                | 17365     1
   215       +                while (((ip>iLow) != 0)) {                                                       + 17365     1
   216       |            if (ip[-1] != *bytePtr) break;                                                       | 17366     1
   217       |            ip--; bytePtr--;                                                                     | 17367     1
   218       |    }   }                                                                                        | 17368     1
   219       |    return (unsigned)(iStart - ip);                                                              | 17369     1
   220       |}                                                                                                | 17370     1
   221       |                                                                                                 | 17371     1
   222       |/* LZ4HC_protectDictEnd() :                                                                      | 17372     1
   223       | * Checks if the match is in the last 3 bytes of the dictionary, so reading the                  | 17373     1
   224       | * 4 byte MINMATCH would overflow.                                                               | 17374     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   344


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   225       | * @returns true if the match index is okay.                                                     | 17375     1
   226       | */                                                                                              | 17376     1
   227       |static int LZ4HC_protectDictEnd(U32 const dictLimit, U32 const matchIndex)                       | 17377     1
   228       |{                                                                                                | 17378     1
   229       |    return ((U32)((dictLimit - 1) - matchIndex) >= 3);                                           | 17379     1
   230       |}                                                                                                | 17380     1
   231       |                                                                                                 | 17381     1
   232       |typedef enum { rep_untested, rep_not, rep_confirmed } repeat_state_e;                            | 17382     1
   233       |typedef enum { favorCompressionRatio=0, favorDecompressionSpeed } HCfavor_e;                     | 17383     1
   234       |                                                                                                 | 17384     1
   235       |LZ4_FORCE_INLINE int                                                                             | 17385     1
   235       +static inline int                                                                                + 17385     1
   236       |LZ4HC_InsertAndGetWiderMatch (                                                                   | 17386     1
   237       |    LZ4HC_CCtx_internal* hc4,                                                                    | 17387     1
   238       |    const BYTE* const ip,                                                                        | 17388     1
   239       |    const BYTE* const iLowLimit,                                                                 | 17389     1
   240       |    const BYTE* const iHighLimit,                                                                | 17390     1
   241       |    int longest,                                                                                 | 17391     1
   242       |    const BYTE** matchpos,                                                                       | 17392     1
   243       |    const BYTE** startpos,                                                                       | 17393     1
   244       |    const int maxNbAttempts,                                                                     | 17394     1
   245       |    const int patternAnalysis,                                                                   | 17395     1
   246       |    const int chainSwap,                                                                         | 17396     1
   247       |    const dictCtx_directive dict,                                                                | 17397     1
   248       |    const HCfavor_e favorDecSpeed)                                                               | 17398     1
   249       |{                                                                                                | 17399     1
   250       |    U16* const chainTable = hc4->chainTable;                                                     | 17400     1
   251       |    U32* const HashTable = hc4->hashTable;                                                       | 17401     1
   252       |    const LZ4HC_CCtx_internal * const dictCtx = hc4->dictCtx;                                    | 17402     1
   253       |    const BYTE* const base = hc4->base;                                                          | 17403     1
   254       |    const U32 dictLimit = hc4->dictLimit;                                                        | 17404     1
   255       |    const BYTE* const lowPrefixPtr = base + dictLimit;                                           | 17405     1
   256       |    const U32 ipIndex = (U32)(ip - base);                                                        | 17406     1
   257       |    const U32 lowestMatchIndex = (hc4->lowLimit + (LZ4_DISTANCE_MAX + 1) > ipIndex) ? hc4->lowLim| 17407     1
   257       +it : ipIndex - LZ4_DISTANCE_MAX;                                                                 + 17407     1
   257       +        const U32 lowestMatchIndex = (hc4->lowLimit + (65535 + 1) > ipIndex) ? hc4->lowLimit : ip+ 17407     1
   257       +Index - 65535;                                                                                   + 17407     1
   258       |    const BYTE* const dictBase = hc4->dictBase;                                                  | 17408     1
   259       |    int const lookBackLength = (int)(ip-iLowLimit);                                              | 17409     1
   260       |    int nbAttempts = maxNbAttempts;                                                              | 17410     1
   261       |    U32 matchChainPos = 0;                                                                       | 17411     1
   262       |    U32 const pattern = LZ4_read32(ip);                                                          | 17412     1
   263       |    U32 matchIndex;                                                                              | 17413     1
   264       |    repeat_state_e repeat = rep_untested;                                                        | 17414     1
   265       |    size_t srcPatternLength = 0;                                                                 | 17415     1
   266       |                                                                                                 | 17416     1
   267       |    DEBUGLOG(7, "LZ4HC_InsertAndGetWiderMatch");                                                 | 17417     1
   267       +        {};                                                                                      + 17417     1
   268       |    /* First Match */                                                                            | 17418     1
   269       |    LZ4HC_Insert(hc4, ip);                                                                       | 17419     1
   270       |    matchIndex = HashTable[LZ4HC_hashPtr(ip)];                                                   | 17420     1
   271       |    DEBUGLOG(7, "First match at index %u / %u (lowestMatchIndex)",                               | 17421     1
   272       |                matchIndex, lowestMatchIndex);                                                   | 17422     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   345


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   272       +                    {};                                                                          + 17422     1
   273       |                                                                                                 | 17423     1
   274       |    while ((matchIndex>=lowestMatchIndex) && (nbAttempts>0)) {                                   | 17424     1
   275       |        int matchLength=0;                                                                       | 17425     1
   276       |        nbAttempts--;                                                                            | 17426     1
   277       |        assert(matchIndex < ipIndex);                                                            | 17427     1
   277       +                ((void)0);                                                                       + 17427     1
   278       |        if (favorDecSpeed && (ipIndex - matchIndex < 8)) {                                       | 17428     1
   279       |            /* do nothing */                                                                     | 17429     1
   280       |        } else if (matchIndex >= dictLimit) {   /* within current Prefix */                      | 17430     1
   281       |            const BYTE* const matchPtr = base + matchIndex;                                      | 17431     1
   282       |            assert(matchPtr >= lowPrefixPtr);                                                    | 17432     1
   282       +                        ((void)0);                                                               + 17432     1
   283       |            assert(matchPtr < ip);                                                               | 17433     1
   283       +                        ((void)0);                                                               + 17433     1
   284       |            assert(longest >= 1);                                                                | 17434     1
   284       +                        ((void)0);                                                               + 17434     1
   285       |            if (LZ4_read16(iLowLimit + longest - 1) == LZ4_read16(matchPtr - lookBackLength + lon| 17435     1
   285       +gest - 1)) {                                                                                     + 17435     1
   286       |                if (LZ4_read32(matchPtr) == pattern) {                                           | 17436     1
   287       |                    int const back = lookBackLength ? LZ4HC_countBack(ip, matchPtr, iLowLimit, lo| 17437     1
   287       +wPrefixPtr) : 0;                                                                                 + 17437     1
   288       |                    matchLength = MINMATCH + (int)LZ4_count(ip+MINMATCH, matchPtr+MINMATCH, iHigh| 17438     1
   288       +Limit);                                                                                          + 17438     1
   288       +                                        matchLength = 4 + (int)LZ4_count(ip+4, matchPtr+4, iHighL+ 17438     1
   288       +imit);                                                                                           + 17438     1
   289       |                    matchLength -= back;                                                         | 17439     1
   290       |                    if (matchLength > longest) {                                                 | 17440     1
   291       |                        longest = matchLength;                                                   | 17441     1
   292       |                        *matchpos = matchPtr + back;                                             | 17442     1
   293       |                        *startpos = ip + back;                                                   | 17443     1
   294       |            }   }   }                                                                            | 17444     1
   295       |        } else {   /* lowestMatchIndex <= matchIndex < dictLimit */                              | 17445     1
   296       |            const BYTE* const matchPtr = dictBase + matchIndex;                                  | 17446     1
   297       |            if (LZ4_read32(matchPtr) == pattern) {                                               | 17447     1
   298       |                const BYTE* const dictStart = dictBase + hc4->lowLimit;                          | 17448     1
   299       |                int back = 0;                                                                    | 17449     1
   300       |                const BYTE* vLimit = ip + (dictLimit - matchIndex);                              | 17450     1
   301       |                if (vLimit > iHighLimit) vLimit = iHighLimit;                                    | 17451     1
   302       |                matchLength = (int)LZ4_count(ip+MINMATCH, matchPtr+MINMATCH, vLimit) + MINMATCH; | 17452     1
   302       +                                matchLength = (int)LZ4_count(ip+4, matchPtr+4, vLimit) + 4;      + 17452     1
   303       |                if ((ip+matchLength == vLimit) && (vLimit < iHighLimit))                         | 17453     1
   304       |                    matchLength += LZ4_count(ip+matchLength, lowPrefixPtr, iHighLimit);          | 17454     1
   305       |                back = lookBackLength ? LZ4HC_countBack(ip, matchPtr, iLowLimit, dictStart) : 0; | 17455     1
   306       |                matchLength -= back;                                                             | 17456     1
   307       |                if (matchLength > longest) {                                                     | 17457     1
   308       |                    longest = matchLength;                                                       | 17458     1
   309       |                    *matchpos = base + matchIndex + back;   /* virtual pos, relative to ip, to re| 17459     1
   309       +trieve offset */                                                                                 + 17459     1
   310       |                    *startpos = ip + back;                                                       | 17460     1
   311       |        }   }   }                                                                                | 17461     1
   312       |                                                                                                 | 17462     1
   313       |        if (chainSwap && matchLength==longest) {    /* better match => select a better chain */  | 17463     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   346


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   314       |            assert(lookBackLength==0);   /* search forward only */                               | 17464     1
   314       +                        ((void)0);                                                               + 17464     1
   315       |            if (matchIndex + (U32)longest <= ipIndex) {                                          | 17465     1
   316       |                int const kTrigger = 4;                                                          | 17466     1
   317       |                U32 distanceToNextMatch = 1;                                                     | 17467     1
   318       |                int const end = longest - MINMATCH + 1;                                          | 17468     1
   318       +                                int const end = longest - 4 + 1;                                 + 17468     1
   319       |                int step = 1;                                                                    | 17469     1
   320       |                int accel = 1 << kTrigger;                                                       | 17470     1
   321       |                int pos;                                                                         | 17471     1
   322       |                for (pos = 0; pos < end; pos += step) {                                          | 17472     1
   323       |                    U32 const candidateDist = DELTANEXTU16(chainTable, matchIndex + (U32)pos);   | 17473     1
   323       +                                        U32 const candidateDist = chainTable[(U16)(matchIndex + (+ 17473     1
   323       +U32)pos)];                                                                                       + 17473     1
   324       |                    step = (accel++ >> kTrigger);                                                | 17474     1
   325       |                    if (candidateDist > distanceToNextMatch) {                                   | 17475     1
   326       |                        distanceToNextMatch = candidateDist;                                     | 17476     1
   327       |                        matchChainPos = (U32)pos;                                                | 17477     1
   328       |                        accel = 1 << kTrigger;                                                   | 17478     1
   329       |                    }                                                                            | 17479     1
   330       |                }                                                                                | 17480     1
   331       |                if (distanceToNextMatch > 1) {                                                   | 17481     1
   332       |                    if (distanceToNextMatch > matchIndex) break;   /* avoid overflow */          | 17482     1
   333       |                    matchIndex -= distanceToNextMatch;                                           | 17483     1
   334       |                    continue;                                                                    | 17484     1
   335       |        }   }   }                                                                                | 17485     1
   336       |                                                                                                 | 17486     1
   337       |        {   U32 const distNextMatch = DELTANEXTU16(chainTable, matchIndex);                      | 17487     1
   337       +                {   U32 const distNextMatch = chainTable[(U16)(matchIndex)];                     + 17487     1
   338       |            if (patternAnalysis && distNextMatch==1 && matchChainPos==0) {                       | 17488     1
   339       |                U32 const matchCandidateIdx = matchIndex-1;                                      | 17489     1
   340       |                /* may be a repeated pattern */                                                  | 17490     1
   341       |                if (repeat == rep_untested) {                                                    | 17491     1
   342       |                    if ( ((pattern & 0xFFFF) == (pattern >> 16))                                 | 17492     1
   343       |                      &  ((pattern & 0xFF)   == (pattern >> 24)) ) {                             | 17493     1
   344       |                        repeat = rep_confirmed;                                                  | 17494     1
   345       |                        srcPatternLength = LZ4HC_countPattern(ip+sizeof(pattern), iHighLimit, pat| 17495     1
   345       +tern) + sizeof(pattern);                                                                         + 17495     1
   346       |                    } else {                                                                     | 17496     1
   347       |                        repeat = rep_not;                                                        | 17497     1
   348       |                }   }                                                                            | 17498     1
   349       |                if ( (repeat == rep_confirmed) && (matchCandidateIdx >= lowestMatchIndex)        | 17499     1
   350       |                  && LZ4HC_protectDictEnd(dictLimit, matchCandidateIdx) ) {                      | 17500     1
   351       |                    const int extDict = matchCandidateIdx < dictLimit;                           | 17501     1
   352       |                    const BYTE* const matchPtr = (extDict ? dictBase : base) + matchCandidateIdx;| 17502     1
   353       |                    if (LZ4_read32(matchPtr) == pattern) {  /* good candidate */                 | 17503     1
   354       |                        const BYTE* const dictStart = dictBase + hc4->lowLimit;                  | 17504     1
   355       |                        const BYTE* const iLimit = extDict ? dictBase + dictLimit : iHighLimit;  | 17505     1
   356       |                        size_t forwardPatternLength = LZ4HC_countPattern(matchPtr+sizeof(pattern)| 17506     1
   356       +, iLimit, pattern) + sizeof(pattern);                                                            + 17506     1
   357       |                        if (extDict && matchPtr + forwardPatternLength == iLimit) {              | 17507     1
   358       |                            U32 const rotatedPattern = LZ4HC_rotatePattern(forwardPatternLength, | 17508     1
   358       +pattern);                                                                                        + 17508     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   347


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   359       |                            forwardPatternLength += LZ4HC_countPattern(lowPrefixPtr, iHighLimit, | 17509     1
   359       +rotatedPattern);                                                                                 + 17509     1
   360       |                        }                                                                        | 17510     1
   361       |                        {   const BYTE* const lowestMatchPtr = extDict ? dictStart : lowPrefixPtr| 17511     1
   361       +;                                                                                                + 17511     1
   362       |                            size_t backLength = LZ4HC_reverseCountPattern(matchPtr, lowestMatchPt| 17512     1
   362       +r, pattern);                                                                                     + 17512     1
   363       |                            size_t currentSegmentLength;                                         | 17513     1
   364       |                            if (!extDict && matchPtr - backLength == lowPrefixPtr && hc4->lowLimi| 17514     1
   364       +t < dictLimit) {                                                                                 + 17514     1
   365       |                                U32 const rotatedPattern = LZ4HC_rotatePattern((U32)(-(int)backLe| 17515     1
   365       +ngth), pattern);                                                                                 + 17515     1
   366       |                                backLength += LZ4HC_reverseCountPattern(dictBase + dictLimit, dic| 17516     1
   366       +tStart, rotatedPattern);                                                                         + 17516     1
   367       |                            }                                                                    | 17517     1
   368       |                            /* Limit backLength not go further than lowestMatchIndex */          | 17518     1
   369       |                            backLength = matchCandidateIdx - MAX(matchCandidateIdx - (U32)backLen| 17519     1
   369       +gth, lowestMatchIndex);                                                                          + 17519     1
   369       +                                                        backLength = matchCandidateIdx - ( (match+ 17519     1
   369       +CandidateIdx - (U32)backLength) > (lowestMatchIndex) ? (matchCandidateIdx - (U32)backLength) : (l+ 17519     1
   369       +owestMatchIndex) );                                                                              + 17519     1
   370       |                            assert(matchCandidateIdx - backLength >= lowestMatchIndex);          | 17520     1
   370       +                                                        ((void)0);                               + 17520     1
   371       |                            currentSegmentLength = backLength + forwardPatternLength;            | 17521     1
   372       |                            /* Adjust to end of pattern if the source pattern fits, otherwise the| 17522     1
   372       + beginning of the pattern */                                                                     + 17522     1
   373       |                            if ( (currentSegmentLength >= srcPatternLength)   /* current pattern | 17523     1
   373       +segment large enough to contain full srcPatternLength */                                         + 17523     1
   374       |                              && (forwardPatternLength <= srcPatternLength) ) { /* haven't reache| 17524     1
   374       +d this position yet */                                                                           + 17524     1
   375       |                                U32 const newMatchIndex = matchCandidateIdx + (U32)forwardPattern| 17525     1
   375       +Length - (U32)srcPatternLength;  /* best position, full pattern, might be followed by more match + 17525     1
   375       +*/                                                                                               + 17525     1
   376       |                                if (LZ4HC_protectDictEnd(dictLimit, newMatchIndex))              | 17526     1
   377       |                                    matchIndex = newMatchIndex;                                  | 17527     1
   378       |                                else {                                                           | 17528     1
   379       |                                    /* Can only happen if started in the prefix */               | 17529     1
   380       |                                    assert(newMatchIndex >= dictLimit - 3 && newMatchIndex < dict| 17530     1
   380       +Limit && !extDict);                                                                              + 17530     1
   380       +                                                                        ((void)0);               + 17530     1
   381       |                                    matchIndex = dictLimit;                                      | 17531     1
   382       |                                }                                                                | 17532     1
   383       |                            } else {                                                             | 17533     1
   384       |                                U32 const newMatchIndex = matchCandidateIdx - (U32)backLength;   | 17534     1
   384       +/* farthest position in current segment, will find a match of length currentSegmentLength + maybe+ 17534     1
   384       + some back */                                                                                    + 17534     1
   385       |                                if (!LZ4HC_protectDictEnd(dictLimit, newMatchIndex)) {           | 17535     1
   386       |                                    assert(newMatchIndex >= dictLimit - 3 && newMatchIndex < dict| 17536     1
   386       +Limit && !extDict);                                                                              + 17536     1
   386       +                                                                        ((void)0);               + 17536     1
   387       |                                    matchIndex = dictLimit;                                      | 17537     1
   388       |                                } else {                                                         | 17538     1
   389       |                                    matchIndex = newMatchIndex;                                  | 17539     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   348


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   390       |                                    if (lookBackLength==0) {  /* no back possible */             | 17540     1
   391       |                                        size_t const maxML = MIN(currentSegmentLength, srcPattern| 17541     1
   391       +Length);                                                                                         + 17541     1
   391       +                                                                                size_t const maxM+ 17541     1
   391       +L = ( (currentSegmentLength) < (srcPatternLength) ? (currentSegmentLength) : (srcPatternLength) )+ 17541     1
   391       +;                                                                                                + 17541     1
   392       |                                        if ((size_t)longest < maxML) {                           | 17542     1
   393       |                                            assert(base + matchIndex != ip);                     | 17543     1
   393       +                                                                                        ((void)0)+ 17543     1
   393       +;                                                                                                + 17543     1
   394       |                                            if ((size_t)(ip - base) - matchIndex > LZ4_DISTANCE_M| 17544     1
   394       +AX) break;                                                                                       + 17544     1
   394       +                                                                                        if ((size+ 17544     1
   394       +_t)(ip - base) - matchIndex > 65535) break;                                                      + 17544     1
   395       |                                            assert(maxML < 2 GB);                                | 17545     1
   395       +                                                                                        ((void)0)+ 17545     1
   395       +;                                                                                                + 17545     1
   396       |                                            longest = (int)maxML;                                | 17546     1
   397       |                                            *matchpos = base + matchIndex;   /* virtual pos, rela| 17547     1
   397       +tive to ip, to retrieve offset */                                                                + 17547     1
   398       |                                            *startpos = ip;                                      | 17548     1
   399       |                                        }                                                        | 17549     1
   400       |                                        {   U32 const distToNextPattern = DELTANEXTU16(chainTable| 17550     1
   400       +, matchIndex);                                                                                   + 17550     1
   400       +                                                                                {   U32 const dis+ 17550     1
   400       +tToNextPattern = chainTable[(U16)(matchIndex)];                                                  + 17550     1
   401       |                                            if (distToNextPattern > matchIndex) break;  /* avoid | 17551     1
   401       +overflow */                                                                                      + 17551     1
   402       |                                            matchIndex -= distToNextPattern;                     | 17552     1
   403       |                        }   }   }   }   }                                                        | 17553     1
   404       |                        continue;                                                                | 17554     1
   405       |                }   }                                                                            | 17555     1
   406       |        }   }   /* PA optimization */                                                            | 17556     1
   407       |                                                                                                 | 17557     1
   408       |        /* follow current chain */                                                               | 17558     1
   409       |        matchIndex -= DELTANEXTU16(chainTable, matchIndex + matchChainPos);                      | 17559     1
   409       +                matchIndex -= chainTable[(U16)(matchIndex + matchChainPos)];                     + 17559     1
   410       |                                                                                                 | 17560     1
   411       |    }  /* while ((matchIndex>=lowestMatchIndex) && (nbAttempts)) */                              | 17561     1
   412       |                                                                                                 | 17562     1
   413       |    if ( dict == usingDictCtxHc                                                                  | 17563     1
   414       |      && nbAttempts > 0                                                                          | 17564     1
   415       |      && ipIndex - lowestMatchIndex < LZ4_DISTANCE_MAX) {                                        | 17565     1
   415       +            && ipIndex - lowestMatchIndex < 65535) {                                             + 17565     1
   416       |        size_t const dictEndOffset = (size_t)(dictCtx->end - dictCtx->base);                     | 17566     1
   417       |        U32 dictMatchIndex = dictCtx->hashTable[LZ4HC_hashPtr(ip)];                              | 17567     1
   418       |        assert(dictEndOffset <= 1 GB);                                                           | 17568     1
   418       +                ((void)0);                                                                       + 17568     1
   419       |        matchIndex = dictMatchIndex + lowestMatchIndex - (U32)dictEndOffset;                     | 17569     1
   420       |        while (ipIndex - matchIndex <= LZ4_DISTANCE_MAX && nbAttempts--) {                       | 17570     1
   420       +                while (ipIndex - matchIndex <= 65535 && nbAttempts--) {                          + 17570     1
   421       |            const BYTE* const matchPtr = dictCtx->base + dictMatchIndex;                         | 17571     1
   422       |                                                                                                 | 17572     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   349


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   423       |            if (LZ4_read32(matchPtr) == pattern) {                                               | 17573     1
   424       |                int mlt;                                                                         | 17574     1
   425       |                int back = 0;                                                                    | 17575     1
   426       |                const BYTE* vLimit = ip + (dictEndOffset - dictMatchIndex);                      | 17576     1
   427       |                if (vLimit > iHighLimit) vLimit = iHighLimit;                                    | 17577     1
   428       |                mlt = (int)LZ4_count(ip+MINMATCH, matchPtr+MINMATCH, vLimit) + MINMATCH;         | 17578     1
   428       +                                mlt = (int)LZ4_count(ip+4, matchPtr+4, vLimit) + 4;              + 17578     1
   429       |                back = lookBackLength ? LZ4HC_countBack(ip, matchPtr, iLowLimit, dictCtx->base + | 17579     1
   429       +dictCtx->dictLimit) : 0;                                                                         + 17579     1
   430       |                mlt -= back;                                                                     | 17580     1
   431       |                if (mlt > longest) {                                                             | 17581     1
   432       |                    longest = mlt;                                                               | 17582     1
   433       |                    *matchpos = base + matchIndex + back;                                        | 17583     1
   434       |                    *startpos = ip + back;                                                       | 17584     1
   435       |            }   }                                                                                | 17585     1
   436       |                                                                                                 | 17586     1
   437       |            {   U32 const nextOffset = DELTANEXTU16(dictCtx->chainTable, dictMatchIndex);        | 17587     1
   437       +                        {   U32 const nextOffset = dictCtx->chainTable[(U16)(dictMatchIndex)];   + 17587     1
   438       |                dictMatchIndex -= nextOffset;                                                    | 17588     1
   439       |                matchIndex -= nextOffset;                                                        | 17589     1
   440       |    }   }   }                                                                                    | 17590     1
   441       |                                                                                                 | 17591     1
   442       |    return longest;                                                                              | 17592     1
   443       |}                                                                                                | 17593     1
   444       |                                                                                                 | 17594     1
   445       |LZ4_FORCE_INLINE                                                                                 | 17595     1
   445       +static inline                                                                                    + 17595     1
   446       |int LZ4HC_InsertAndFindBestMatch(LZ4HC_CCtx_internal* const hc4,   /* Index table will be updated| 17596     1
   446       + */                                                                                              + 17596     1
   447       |                                 const BYTE* const ip, const BYTE* const iLimit,                 | 17597     1
   448       |                                 const BYTE** matchpos,                                          | 17598     1
   449       |                                 const int maxNbAttempts,                                        | 17599     1
   450       |                                 const int patternAnalysis,                                      | 17600     1
   451       |                                 const dictCtx_directive dict)                                   | 17601     1
   452       |{                                                                                                | 17602     1
   453       |    const BYTE* uselessPtr = ip;                                                                 | 17603     1
   454       |    /* note : LZ4HC_InsertAndGetWiderMatch() is able to modify the starting position of a match (| 17604     1
   454       +*startpos),                                                                                      + 17604     1
   455       |     * but this won't be the case here, as we define iLowLimit==ip,                              | 17605     1
   456       |     * so LZ4HC_InsertAndGetWiderMatch() won't be allowed to search past ip */                   | 17606     1
   457       |    return LZ4HC_InsertAndGetWiderMatch(hc4, ip, ip, iLimit, MINMATCH-1, matchpos, &uselessPtr, m| 17607     1
   457       +axNbAttempts, patternAnalysis, 0 /*chainSwap*/, dict, favorCompressionRatio);                    + 17607     1
   457       +        return LZ4HC_InsertAndGetWiderMatch(hc4, ip, ip, iLimit, 4-1, matchpos, &uselessPtr, maxN+ 17607     1
   457       +bAttempts, patternAnalysis, 0 , dict, favorCompressionRatio);                                    + 17607     1
   458       |}                                                                                                | 17608     1
   459       |                                                                                                 | 17609     1
   460       |/* LZ4HC_encodeSequence() :                                                                      | 17610     1
   461       | * @return : 0 if ok,                                                                            | 17611     1
   462       | *           1 if buffer issue detected */                                                       | 17612     1
   463       |LZ4_FORCE_INLINE int LZ4HC_encodeSequence (                                                      | 17613     1
   463       +static inline int LZ4HC_encodeSequence (                                                         + 17613     1
   464       |    const BYTE** _ip,                                                                            | 17614     1
   465       |    BYTE** _op,                                                                                  | 17615     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   350


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   466       |    const BYTE** _anchor,                                                                        | 17616     1
   467       |    int matchLength,                                                                             | 17617     1
   468       |    const BYTE* const match,                                                                     | 17618     1
   469       |    limitedOutput_directive limit,                                                               | 17619     1
   470       |    BYTE* oend)                                                                                  | 17620     1
   471       |{                                                                                                | 17621     1
   472       |#define ip      (*_ip)                                                                           | 17622     1
   473       |#define op      (*_op)                                                                           | 17623     1
   474       |#define anchor  (*_anchor)                                                                       | 17624     1
   475       |                                                                                                 | 17625     1
   476       |    size_t length;                                                                               | 17626     1
   477       |    BYTE* const token = op++;                                                                    | 17627     1
   477       +        BYTE* const token = (*_op)++;                                                            + 17627     1
   478       |                                                                                                 | 17628     1
   479       |#if defined(LZ4_DEBUG) && (LZ4_DEBUG >= 6)                                                       | 17629     1
   480       |    static const BYTE* start = NULL;                                                             | 17630     1
   481       |    static U32 totalCost = 0;                                                                    | 17631     1
   482       |    U32 const pos = (start==NULL) ? 0 : (U32)(anchor - start);                                   | 17632     1
   483       |    U32 const ll = (U32)(ip - anchor);                                                           | 17633     1
   484       |    U32 const llAdd = (ll>=15) ? ((ll-15) / 255) + 1 : 0;                                        | 17634     1
   485       |    U32 const mlAdd = (matchLength>=19) ? ((matchLength-19) / 255) + 1 : 0;                      | 17635     1
   486       |    U32 const cost = 1 + llAdd + ll + 2 + mlAdd;                                                 | 17636     1
   487       |    if (start==NULL) start = anchor;  /* only works for single segment */                        | 17637     1
   488       |    /* g_debuglog_enable = (pos >= 2228) & (pos <= 2262); */                                     | 17638     1
   489       |    DEBUGLOG(6, "pos:%7u -- literals:%4u, match:%4i, offset:%5u, cost:%4u + %5u",                | 17639     1
   490       |                pos,                                                                             | 17640     1
   491       |                (U32)(ip - anchor), matchLength, (U32)(ip-match),                                | 17641     1
   492       |                cost, totalCost);                                                                | 17642     1
   493       |    totalCost += cost;                                                                           | 17643     1
   494       |#endif                                                                                           | 17644     1
   495       |                                                                                                 | 17645     1
   496       |    /* Encode Literal length */                                                                  | 17646     1
   497       |    length = (size_t)(ip - anchor);                                                              | 17647     1
   497       +        length = (size_t)((*_ip) - (*_anchor));                                                  + 17647     1
   498       |    LZ4_STATIC_ASSERT(notLimited == 0);                                                          | 17648     1
   498       +        { enum { LZ4_static_assert = 1/(int)(!!(notLimited == 0)) }; };                          + 17648     1
   499       |    /* Check output limit */                                                                     | 17649     1
   500       |    if (limit && ((op + (length / 255) + length + (2 + 1 + LASTLITERALS)) > oend)) {             | 17650     1
   500       +        if (limit && (((*_op) + (length / 255) + length + (2 + 1 + 5)) > oend)) {                + 17650     1
   501       |        DEBUGLOG(6, "Not enough room to write %i literals (%i bytes remaining)",                 | 17651     1
   502       |                (int)length, (int)(oend - op));                                                  | 17652     1
   502       +                        {};                                                                      + 17652     1
   503       |        return 1;                                                                                | 17653     1
   504       |    }                                                                                            | 17654     1
   505       |    if (length >= RUN_MASK) {                                                                    | 17655     1
   505       +        if (length >= ((1U<<(8-4))-1)) {                                                         + 17655     1
   506       |        size_t len = length - RUN_MASK;                                                          | 17656     1
   506       +                size_t len = length - ((1U<<(8-4))-1);                                           + 17656     1
   507       |        *token = (RUN_MASK << ML_BITS);                                                          | 17657     1
   507       +                *token = (((1U<<(8-4))-1) << 4);                                                 + 17657     1
   508       |        for(; len >= 255 ; len -= 255) *op++ = 255;                                              | 17658     1
   508       +                for(; len >= 255 ; len -= 255) *(*_op)++ = 255;                                  + 17658     1
   509       |        *op++ = (BYTE)len;                                                                       | 17659     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   351


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   509       +                *(*_op)++ = (BYTE)len;                                                           + 17659     1
   510       |    } else {                                                                                     | 17660     1
   511       |        *token = (BYTE)(length << ML_BITS);                                                      | 17661     1
   511       +                *token = (BYTE)(length << 4);                                                    + 17661     1
   512       |    }                                                                                            | 17662     1
   513       |                                                                                                 | 17663     1
   514       |    /* Copy Literals */                                                                          | 17664     1
   515       |    LZ4_wildCopy8(op, anchor, op + length);                                                      | 17665     1
   515       +        LZ4_wildCopy8((*_op), (*_anchor), (*_op) + length);                                      + 17665     1
   516       |    op += length;                                                                                | 17666     1
   516       +        (*_op) += length;                                                                        + 17666     1
   517       |                                                                                                 | 17667     1
   518       |    /* Encode Offset */                                                                          | 17668     1
   519       |    assert( (ip - match) <= LZ4_DISTANCE_MAX );   /* note : consider providing offset as a value,| 17669     1
   519       + rather than as a pointer difference */                                                          + 17669     1
   519       +        ((void)0);                                                                               + 17669     1
   520       |    LZ4_writeLE16(op, (U16)(ip - match)); op += 2;                                               | 17670     1
   520       +        LZ4_writeLE16((*_op), (U16)((*_ip) - match)); (*_op) += 2;                               + 17670     1
   521       |                                                                                                 | 17671     1
   522       |    /* Encode MatchLength */                                                                     | 17672     1
   523       |    assert(matchLength >= MINMATCH);                                                             | 17673     1
   523       +        ((void)0);                                                                               + 17673     1
   524       |    length = (size_t)matchLength - MINMATCH;                                                     | 17674     1
   524       +        length = (size_t)matchLength - 4;                                                        + 17674     1
   525       |    if (limit && (op + (length / 255) + (1 + LASTLITERALS) > oend)) {                            | 17675     1
   525       +        if (limit && ((*_op) + (length / 255) + (1 + 5) > oend)) {                               + 17675     1
   526       |        DEBUGLOG(6, "Not enough room to write match length");                                    | 17676     1
   526       +                {};                                                                              + 17676     1
   527       |        return 1;   /* Check output limit */                                                     | 17677     1
   528       |    }                                                                                            | 17678     1
   529       |    if (length >= ML_MASK) {                                                                     | 17679     1
   529       +        if (length >= ((1U<<4)-1)) {                                                             + 17679     1
   530       |        *token += ML_MASK;                                                                       | 17680     1
   530       +                *token += ((1U<<4)-1);                                                           + 17680     1
   531       |        length -= ML_MASK;                                                                       | 17681     1
   531       +                length -= ((1U<<4)-1);                                                           + 17681     1
   532       |        for(; length >= 510 ; length -= 510) { *op++ = 255; *op++ = 255; }                       | 17682     1
   532       +                for(; length >= 510 ; length -= 510) { *(*_op)++ = 255; *(*_op)++ = 255; }       + 17682     1
   533       |        if (length >= 255) { length -= 255; *op++ = 255; }                                       | 17683     1
   533       +                if (length >= 255) { length -= 255; *(*_op)++ = 255; }                           + 17683     1
   534       |        *op++ = (BYTE)length;                                                                    | 17684     1
   534       +                *(*_op)++ = (BYTE)length;                                                        + 17684     1
   535       |    } else {                                                                                     | 17685     1
   536       |        *token += (BYTE)(length);                                                                | 17686     1
   537       |    }                                                                                            | 17687     1
   538       |                                                                                                 | 17688     1
   539       |    /* Prepare next loop */                                                                      | 17689     1
   540       |    ip += matchLength;                                                                           | 17690     1
   540       +        (*_ip) += matchLength;                                                                   + 17690     1
   541       |    anchor = ip;                                                                                 | 17691     1
   541       +        (*_anchor) = (*_ip);                                                                     + 17691     1
   542       |                                                                                                 | 17692     1
   543       |    return 0;                                                                                    | 17693     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   352


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   544       |}                                                                                                | 17694     1
   545       |#undef ip                                                                                        | 17695     1
   546       |#undef op                                                                                        | 17696     1
   547       |#undef anchor                                                                                    | 17697     1
   548       |                                                                                                 | 17698     1
   549       |LZ4_FORCE_INLINE int LZ4HC_compress_hashChain (                                                  | 17699     1
   549       +static inline int LZ4HC_compress_hashChain (                                                     + 17699     1
   550       |    LZ4HC_CCtx_internal* const ctx,                                                              | 17700     1
   551       |    const char* const source,                                                                    | 17701     1
   552       |    char* const dest,                                                                            | 17702     1
   553       |    int* srcSizePtr,                                                                             | 17703     1
   554       |    int const maxOutputSize,                                                                     | 17704     1
   555       |    int maxNbAttempts,                                                                           | 17705     1
   556       |    const limitedOutput_directive limit,                                                         | 17706     1
   557       |    const dictCtx_directive dict                                                                 | 17707     1
   558       |    )                                                                                            | 17708     1
   559       |{                                                                                                | 17709     1
   560       |    const int inputSize = *srcSizePtr;                                                           | 17710     1
   561       |    const int patternAnalysis = (maxNbAttempts > 128);   /* levels 9+ */                         | 17711     1
   562       |                                                                                                 | 17712     1
   563       |    const BYTE* ip = (const BYTE*) source;                                                       | 17713     1
   564       |    const BYTE* anchor = ip;                                                                     | 17714     1
   565       |    const BYTE* const iend = ip + inputSize;                                                     | 17715     1
   566       |    const BYTE* const mflimit = iend - MFLIMIT;                                                  | 17716     1
   566       +        const BYTE* const mflimit = iend - 12;                                                   + 17716     1
   567       |    const BYTE* const matchlimit = (iend - LASTLITERALS);                                        | 17717     1
   567       +        const BYTE* const matchlimit = (iend - 5);                                               + 17717     1
   568       |                                                                                                 | 17718     1
   569       |    BYTE* optr = (BYTE*) dest;                                                                   | 17719     1
   570       |    BYTE* op = (BYTE*) dest;                                                                     | 17720     1
   571       |    BYTE* oend = op + maxOutputSize;                                                             | 17721     1
   572       |                                                                                                 | 17722     1
   573       |    int   ml0, ml, ml2, ml3;                                                                     | 17723     1
   574       |    const BYTE* start0;                                                                          | 17724     1
   575       |    const BYTE* ref0;                                                                            | 17725     1
   576       |    const BYTE* ref = NULL;                                                                      | 17726     1
   576       +        const BYTE* ref = ((void *)0);                                                           + 17726     1
   577       |    const BYTE* start2 = NULL;                                                                   | 17727     1
   577       +        const BYTE* start2 = ((void *)0);                                                        + 17727     1
   578       |    const BYTE* ref2 = NULL;                                                                     | 17728     1
   578       +        const BYTE* ref2 = ((void *)0);                                                          + 17728     1
   579       |    const BYTE* start3 = NULL;                                                                   | 17729     1
   579       +        const BYTE* start3 = ((void *)0);                                                        + 17729     1
   580       |    const BYTE* ref3 = NULL;                                                                     | 17730     1
   580       +        const BYTE* ref3 = ((void *)0);                                                          + 17730     1
   581       |                                                                                                 | 17731     1
   582       |    /* init */                                                                                   | 17732     1
   583       |    *srcSizePtr = 0;                                                                             | 17733     1
   584       |    if (limit == fillOutput) oend -= LASTLITERALS;                  /* Hack for support LZ4 forma| 17734     1
   584       +t restriction */                                                                                 + 17734     1
   584       +        if (limit == fillOutput) oend -= 5;                                                      + 17734     1
   585       |    if (inputSize < LZ4_minLength) goto _last_literals;             /* Input too small, no compre| 17735     1
   585       +ssion (all literals) */                                                                          + 17735     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   353


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   586       |                                                                                                 | 17736     1
   587       |    /* Main Loop */                                                                              | 17737     1
   588       |    while (ip <= mflimit) {                                                                      | 17738     1
   589       |        ml = LZ4HC_InsertAndFindBestMatch(ctx, ip, matchlimit, &ref, maxNbAttempts, patternAnalys| 17739     1
   589       +is, dict);                                                                                       + 17739     1
   590       |        if (ml<MINMATCH) { ip++; continue; }                                                     | 17740     1
   590       +                if (ml<4) { ip++; continue; }                                                    + 17740     1
   591       |                                                                                                 | 17741     1
   592       |        /* saved, in case we would skip too much */                                              | 17742     1
   593       |        start0 = ip; ref0 = ref; ml0 = ml;                                                       | 17743     1
   594       |                                                                                                 | 17744     1
   595       |_Search2:                                                                                        | 17745     1
   596       |        if (ip+ml <= mflimit) {                                                                  | 17746     1
   597       |            ml2 = LZ4HC_InsertAndGetWiderMatch(ctx,                                              | 17747     1
   598       |                            ip + ml - 2, ip + 0, matchlimit, ml, &ref2, &start2,                 | 17748     1
   599       |                            maxNbAttempts, patternAnalysis, 0, dict, favorCompressionRatio);     | 17749     1
   600       |        } else {                                                                                 | 17750     1
   601       |            ml2 = ml;                                                                            | 17751     1
   602       |        }                                                                                        | 17752     1
   603       |                                                                                                 | 17753     1
   604       |        if (ml2 == ml) { /* No better match => encode ML1 */                                     | 17754     1
   605       |            optr = op;                                                                           | 17755     1
   606       |            if (LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml, ref, limit, oend)) goto _dest| 17756     1
   606       +_overflow;                                                                                       + 17756     1
   606       +                        if (LZ4HC_encodeSequence(&ip, &op, &anchor, ml, ref, limit, oend)) goto _+ 17756     1
   606       +dest_overflow;                                                                                   + 17756     1
   607       |            continue;                                                                            | 17757     1
   608       |        }                                                                                        | 17758     1
   609       |                                                                                                 | 17759     1
   610       |        if (start0 < ip) {   /* first match was skipped at least once */                         | 17760     1
   611       |            if (start2 < ip + ml0) {  /* squeezing ML1 between ML0(original ML1) and ML2 */      | 17761     1
   612       |                ip = start0; ref = ref0; ml = ml0;  /* restore initial ML1 */                    | 17762     1
   613       |        }   }                                                                                    | 17763     1
   614       |                                                                                                 | 17764     1
   615       |        /* Here, start0==ip */                                                                   | 17765     1
   616       |        if ((start2 - ip) < 3) {  /* First Match too small : removed */                          | 17766     1
   617       |            ml = ml2;                                                                            | 17767     1
   618       |            ip = start2;                                                                         | 17768     1
   619       |            ref =ref2;                                                                           | 17769     1
   620       |            goto _Search2;                                                                       | 17770     1
   621       |        }                                                                                        | 17771     1
   622       |                                                                                                 | 17772     1
   623       |_Search3:                                                                                        | 17773     1
   624       |        /* At this stage, we have :                                                              | 17774     1
   625       |        *  ml2 > ml1, and                                                                        | 17775     1
   626       |        *  ip1+3 <= ip2 (usually < ip1+ml1) */                                                   | 17776     1
   627       |        if ((start2 - ip) < OPTIMAL_ML) {                                                        | 17777     1
   627       +                if ((start2 - ip) < (int)((((1U<<4)-1)-1)+4)) {                                  + 17777     1
   628       |            int correction;                                                                      | 17778     1
   629       |            int new_ml = ml;                                                                     | 17779     1
   630       |            if (new_ml > OPTIMAL_ML) new_ml = OPTIMAL_ML;                                        | 17780     1
   630       +                        if (new_ml > (int)((((1U<<4)-1)-1)+4)) new_ml = (int)((((1U<<4)-1)-1)+4);+ 17780     1
   631       |            if (ip+new_ml > start2 + ml2 - MINMATCH) new_ml = (int)(start2 - ip) + ml2 - MINMATCH| 17781     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   354


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   631       +;                                                                                                + 17781     1
   631       +                        if (ip+new_ml > start2 + ml2 - 4) new_ml = (int)(start2 - ip) + ml2 - 4; + 17781     1
   632       |            correction = new_ml - (int)(start2 - ip);                                            | 17782     1
   633       |            if (correction > 0) {                                                                | 17783     1
   634       |                start2 += correction;                                                            | 17784     1
   635       |                ref2 += correction;                                                              | 17785     1
   636       |                ml2 -= correction;                                                               | 17786     1
   637       |            }                                                                                    | 17787     1
   638       |        }                                                                                        | 17788     1
   639       |        /* Now, we have start2 = ip+new_ml, with new_ml = min(ml, OPTIMAL_ML=18) */              | 17789     1
   640       |                                                                                                 | 17790     1
   641       |        if (start2 + ml2 <= mflimit) {                                                           | 17791     1
   642       |            ml3 = LZ4HC_InsertAndGetWiderMatch(ctx,                                              | 17792     1
   643       |                            start2 + ml2 - 3, start2, matchlimit, ml2, &ref3, &start3,           | 17793     1
   644       |                            maxNbAttempts, patternAnalysis, 0, dict, favorCompressionRatio);     | 17794     1
   645       |        } else {                                                                                 | 17795     1
   646       |            ml3 = ml2;                                                                           | 17796     1
   647       |        }                                                                                        | 17797     1
   648       |                                                                                                 | 17798     1
   649       |        if (ml3 == ml2) {  /* No better match => encode ML1 and ML2 */                           | 17799     1
   650       |            /* ip & ref are known; Now for ml */                                                 | 17800     1
   651       |            if (start2 < ip+ml)  ml = (int)(start2 - ip);                                        | 17801     1
   652       |            /* Now, encode 2 sequences */                                                        | 17802     1
   653       |            optr = op;                                                                           | 17803     1
   654       |            if (LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml, ref, limit, oend)) goto _dest| 17804     1
   654       +_overflow;                                                                                       + 17804     1
   654       +                        if (LZ4HC_encodeSequence(&ip, &op, &anchor, ml, ref, limit, oend)) goto _+ 17804     1
   654       +dest_overflow;                                                                                   + 17804     1
   655       |            ip = start2;                                                                         | 17805     1
   656       |            optr = op;                                                                           | 17806     1
   657       |            if (LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml2, ref2, limit, oend)) {       | 17807     1
   657       +                        if (LZ4HC_encodeSequence(&ip, &op, &anchor, ml2, ref2, limit, oend)) {   + 17807     1
   658       |                ml  = ml2;                                                                       | 17808     1
   659       |                ref = ref2;                                                                      | 17809     1
   660       |                goto _dest_overflow;                                                             | 17810     1
   661       |            }                                                                                    | 17811     1
   662       |            continue;                                                                            | 17812     1
   663       |        }                                                                                        | 17813     1
   664       |                                                                                                 | 17814     1
   665       |        if (start3 < ip+ml+3) {  /* Not enough space for match 2 : remove it */                  | 17815     1
   666       |            if (start3 >= (ip+ml)) {  /* can write Seq1 immediately ==> Seq2 is removed, so Seq3 | 17816     1
   666       +becomes Seq1 */                                                                                  + 17816     1
   667       |                if (start2 < ip+ml) {                                                            | 17817     1
   668       |                    int correction = (int)(ip+ml - start2);                                      | 17818     1
   669       |                    start2 += correction;                                                        | 17819     1
   670       |                    ref2 += correction;                                                          | 17820     1
   671       |                    ml2 -= correction;                                                           | 17821     1
   672       |                    if (ml2 < MINMATCH) {                                                        | 17822     1
   672       +                                        if (ml2 < 4) {                                           + 17822     1
   673       |                        start2 = start3;                                                         | 17823     1
   674       |                        ref2 = ref3;                                                             | 17824     1
   675       |                        ml2 = ml3;                                                               | 17825     1
   676       |                    }                                                                            | 17826     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   355


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   677       |                }                                                                                | 17827     1
   678       |                                                                                                 | 17828     1
   679       |                optr = op;                                                                       | 17829     1
   680       |                if (LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml, ref, limit, oend)) goto _| 17830     1
   680       +dest_overflow;                                                                                   + 17830     1
   680       +                                if (LZ4HC_encodeSequence(&ip, &op, &anchor, ml, ref, limit, oend)+ 17830     1
   680       +) goto _dest_overflow;                                                                           + 17830     1
   681       |                ip  = start3;                                                                    | 17831     1
   682       |                ref = ref3;                                                                      | 17832     1
   683       |                ml  = ml3;                                                                       | 17833     1
   684       |                                                                                                 | 17834     1
   685       |                start0 = start2;                                                                 | 17835     1
   686       |                ref0 = ref2;                                                                     | 17836     1
   687       |                ml0 = ml2;                                                                       | 17837     1
   688       |                goto _Search2;                                                                   | 17838     1
   689       |            }                                                                                    | 17839     1
   690       |                                                                                                 | 17840     1
   691       |            start2 = start3;                                                                     | 17841     1
   692       |            ref2 = ref3;                                                                         | 17842     1
   693       |            ml2 = ml3;                                                                           | 17843     1
   694       |            goto _Search3;                                                                       | 17844     1
   695       |        }                                                                                        | 17845     1
   696       |                                                                                                 | 17846     1
   697       |        /*                                                                                       | 17847     1
   698       |        * OK, now we have 3 ascending matches;                                                   | 17848     1
   699       |        * let's write the first one ML1.                                                         | 17849     1
   700       |        * ip & ref are known; Now decide ml.                                                     | 17850     1
   701       |        */                                                                                       | 17851     1
   702       |        if (start2 < ip+ml) {                                                                    | 17852     1
   703       |            if ((start2 - ip) < OPTIMAL_ML) {                                                    | 17853     1
   703       +                        if ((start2 - ip) < (int)((((1U<<4)-1)-1)+4)) {                          + 17853     1
   704       |                int correction;                                                                  | 17854     1
   705       |                if (ml > OPTIMAL_ML) ml = OPTIMAL_ML;                                            | 17855     1
   705       +                                if (ml > (int)((((1U<<4)-1)-1)+4)) ml = (int)((((1U<<4)-1)-1)+4);+ 17855     1
   706       |                if (ip + ml > start2 + ml2 - MINMATCH) ml = (int)(start2 - ip) + ml2 - MINMATCH; | 17856     1
   706       +                                if (ip + ml > start2 + ml2 - 4) ml = (int)(start2 - ip) + ml2 - 4+ 17856     1
   706       +;                                                                                                + 17856     1
   707       |                correction = ml - (int)(start2 - ip);                                            | 17857     1
   708       |                if (correction > 0) {                                                            | 17858     1
   709       |                    start2 += correction;                                                        | 17859     1
   710       |                    ref2 += correction;                                                          | 17860     1
   711       |                    ml2 -= correction;                                                           | 17861     1
   712       |                }                                                                                | 17862     1
   713       |            } else {                                                                             | 17863     1
   714       |                ml = (int)(start2 - ip);                                                         | 17864     1
   715       |            }                                                                                    | 17865     1
   716       |        }                                                                                        | 17866     1
   717       |        optr = op;                                                                               | 17867     1
   718       |        if (LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml, ref, limit, oend)) goto _dest_ove| 17868     1
   718       +rflow;                                                                                           + 17868     1
   718       +                if (LZ4HC_encodeSequence(&ip, &op, &anchor, ml, ref, limit, oend)) goto _dest_ove+ 17868     1
   718       +rflow;                                                                                           + 17868     1
   719       |                                                                                                 | 17869     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   356


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   720       |        /* ML2 becomes ML1 */                                                                    | 17870     1
   721       |        ip = start2; ref = ref2; ml = ml2;                                                       | 17871     1
   722       |                                                                                                 | 17872     1
   723       |        /* ML3 becomes ML2 */                                                                    | 17873     1
   724       |        start2 = start3; ref2 = ref3; ml2 = ml3;                                                 | 17874     1
   725       |                                                                                                 | 17875     1
   726       |        /* let's find a new ML3 */                                                               | 17876     1
   727       |        goto _Search3;                                                                           | 17877     1
   728       |    }                                                                                            | 17878     1
   729       |                                                                                                 | 17879     1
   730       |_last_literals:                                                                                  | 17880     1
   731       |    /* Encode Last Literals */                                                                   | 17881     1
   732       |    {   size_t lastRunSize = (size_t)(iend - anchor);  /* literals */                            | 17882     1
   733       |        size_t llAdd = (lastRunSize + 255 - RUN_MASK) / 255;                                     | 17883     1
   733       +                size_t llAdd = (lastRunSize + 255 - ((1U<<(8-4))-1)) / 255;                      + 17883     1
   734       |        size_t const totalSize = 1 + llAdd + lastRunSize;                                        | 17884     1
   735       |        if (limit == fillOutput) oend += LASTLITERALS;  /* restore correct value */              | 17885     1
   735       +                if (limit == fillOutput) oend += 5;                                              + 17885     1
   736       |        if (limit && (op + totalSize > oend)) {                                                  | 17886     1
   737       |            if (limit == limitedOutput) return 0;                                                | 17887     1
   738       |            /* adapt lastRunSize to fill 'dest' */                                               | 17888     1
   739       |            lastRunSize  = (size_t)(oend - op) - 1 /*token*/;                                    | 17889     1
   740       |            llAdd = (lastRunSize + 256 - RUN_MASK) / 256;                                        | 17890     1
   740       +                        llAdd = (lastRunSize + 256 - ((1U<<(8-4))-1)) / 256;                     + 17890     1
   741       |            lastRunSize -= llAdd;                                                                | 17891     1
   742       |        }                                                                                        | 17892     1
   743       |        DEBUGLOG(6, "Final literal run : %i literals", (int)lastRunSize);                        | 17893     1
   743       +                {};                                                                              + 17893     1
   744       |        ip = anchor + lastRunSize;  /* can be != iend if limit==fillOutput */                    | 17894     1
   745       |                                                                                                 | 17895     1
   746       |        if (lastRunSize >= RUN_MASK) {                                                           | 17896     1
   746       +                if (lastRunSize >= ((1U<<(8-4))-1)) {                                            + 17896     1
   747       |            size_t accumulator = lastRunSize - RUN_MASK;                                         | 17897     1
   747       +                        size_t accumulator = lastRunSize - ((1U<<(8-4))-1);                      + 17897     1
   748       |            *op++ = (RUN_MASK << ML_BITS);                                                       | 17898     1
   748       +                        *op++ = (((1U<<(8-4))-1) << 4);                                          + 17898     1
   749       |            for(; accumulator >= 255 ; accumulator -= 255) *op++ = 255;                          | 17899     1
   750       |            *op++ = (BYTE) accumulator;                                                          | 17900     1
   751       |        } else {                                                                                 | 17901     1
   752       |            *op++ = (BYTE)(lastRunSize << ML_BITS);                                              | 17902     1
   752       +                        *op++ = (BYTE)(lastRunSize << 4);                                        + 17902     1
   753       |        }                                                                                        | 17903     1
   754       |        memcpy(op, anchor, lastRunSize);                                                         | 17904     1
   754       +                __memcpy(op,anchor,lastRunSize);                                                 + 17904     1
   755       |        op += lastRunSize;                                                                       | 17905     1
   756       |    }                                                                                            | 17906     1
   757       |                                                                                                 | 17907     1
   758       |    /* End */                                                                                    | 17908     1
   759       |    *srcSizePtr = (int) (((const char*)ip) - source);                                            | 17909     1
   760       |    return (int) (((char*)op)-dest);                                                             | 17910     1
   761       |                                                                                                 | 17911     1
   762       |_dest_overflow:                                                                                  | 17912     1
   763       |    if (limit == fillOutput) {                                                                   | 17913     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   357


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   764       |        /* Assumption : ip, anchor, ml and ref must be set correctly */                          | 17914     1
   765       |        size_t const ll = (size_t)(ip - anchor);                                                 | 17915     1
   766       |        size_t const ll_addbytes = (ll + 240) / 255;                                             | 17916     1
   767       |        size_t const ll_totalCost = 1 + ll_addbytes + ll;                                        | 17917     1
   768       |        BYTE* const maxLitPos = oend - 3; /* 2 for offset, 1 for token */                        | 17918     1
   769       |        DEBUGLOG(6, "Last sequence overflowing");                                                | 17919     1
   769       +                {};                                                                              + 17919     1
   770       |        op = optr;  /* restore correct out pointer */                                            | 17920     1
   771       |        if (op + ll_totalCost <= maxLitPos) {                                                    | 17921     1
   772       |            /* ll validated; now adjust match length */                                          | 17922     1
   773       |            size_t const bytesLeftForMl = (size_t)(maxLitPos - (op+ll_totalCost));               | 17923     1
   774       |            size_t const maxMlSize = MINMATCH + (ML_MASK-1) + (bytesLeftForMl * 255);            | 17924     1
   774       +                        size_t const maxMlSize = 4 + (((1U<<4)-1)-1) + (bytesLeftForMl * 255);   + 17924     1
   775       |            assert(maxMlSize < INT_MAX); assert(ml >= 0);                                        | 17925     1
   775       +                        ((void)0); ((void)0);                                                    + 17925     1
   776       |            if ((size_t)ml > maxMlSize) ml = (int)maxMlSize;                                     | 17926     1
   777       |            if ((oend + LASTLITERALS) - (op + ll_totalCost + 2) - 1 + ml >= MFLIMIT) {           | 17927     1
   777       +                        if ((oend + 5) - (op + ll_totalCost + 2) - 1 + ml >= 12) {               + 17927     1
   778       |                LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml, ref, notLimited, oend);      | 17928     1
   778       +                                LZ4HC_encodeSequence(&ip, &op, &anchor, ml, ref, notLimited, oend+ 17928     1
   778       +);                                                                                               + 17928     1
   779       |        }   }                                                                                    | 17929     1
   780       |        goto _last_literals;                                                                     | 17930     1
   781       |    }                                                                                            | 17931     1
   782       |    /* compression failed */                                                                     | 17932     1
   783       |    return 0;                                                                                    | 17933     1
   784       |}                                                                                                | 17934     1
   785       |                                                                                                 | 17935     1
   786       |                                                                                                 | 17936     1
   787       |static int LZ4HC_compress_optimal( LZ4HC_CCtx_internal* ctx,                                     | 17937     1
   788       |    const char* const source, char* dst,                                                         | 17938     1
   789       |    int* srcSizePtr, int dstCapacity,                                                            | 17939     1
   790       |    int const nbSearches, size_t sufficient_len,                                                 | 17940     1
   791       |    const limitedOutput_directive limit, int const fullUpdate,                                   | 17941     1
   792       |    const dictCtx_directive dict,                                                                | 17942     1
   793       |    const HCfavor_e favorDecSpeed);                                                              | 17943     1
   794       |                                                                                                 | 17944     1
   795       |                                                                                                 | 17945     1
   796       |LZ4_FORCE_INLINE int LZ4HC_compress_generic_internal (                                           | 17946     1
   796       +static inline int LZ4HC_compress_generic_internal (                                              + 17946     1
   797       |    LZ4HC_CCtx_internal* const ctx,                                                              | 17947     1
   798       |    const char* const src,                                                                       | 17948     1
   799       |    char* const dst,                                                                             | 17949     1
   800       |    int* const srcSizePtr,                                                                       | 17950     1
   801       |    int const dstCapacity,                                                                       | 17951     1
   802       |    int cLevel,                                                                                  | 17952     1
   803       |    const limitedOutput_directive limit,                                                         | 17953     1
   804       |    const dictCtx_directive dict                                                                 | 17954     1
   805       |    )                                                                                            | 17955     1
   806       |{                                                                                                | 17956     1
   807       |    typedef enum { lz4hc, lz4opt } lz4hc_strat_e;                                                | 17957     1
   808       |    typedef struct {                                                                             | 17958     1
   809       |        lz4hc_strat_e strat;                                                                     | 17959     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   358


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   810       |        int nbSearches;                                                                          | 17960     1
   811       |        U32 targetLength;                                                                        | 17961     1
   812       |    } cParams_t;                                                                                 | 17962     1
   813       |    static const cParams_t clTable[LZ4HC_CLEVEL_MAX+1] = {                                       | 17963     1
   813       +        static const cParams_t clTable[12+1] = {                                                 + 17963     1
   814       |        { lz4hc,     2, 16 },  /* 0, unused */                                                   | 17964     1
   815       |        { lz4hc,     2, 16 },  /* 1, unused */                                                   | 17965     1
   816       |        { lz4hc,     2, 16 },  /* 2, unused */                                                   | 17966     1
   817       |        { lz4hc,     4, 16 },  /* 3 */                                                           | 17967     1
   818       |        { lz4hc,     8, 16 },  /* 4 */                                                           | 17968     1
   819       |        { lz4hc,    16, 16 },  /* 5 */                                                           | 17969     1
   820       |        { lz4hc,    32, 16 },  /* 6 */                                                           | 17970     1
   821       |        { lz4hc,    64, 16 },  /* 7 */                                                           | 17971     1
   822       |        { lz4hc,   128, 16 },  /* 8 */                                                           | 17972     1
   823       |        { lz4hc,   256, 16 },  /* 9 */                                                           | 17973     1
   824       |        { lz4opt,   96, 64 },  /*10==LZ4HC_CLEVEL_OPT_MIN*/                                      | 17974     1
   825       |        { lz4opt,  512,128 },  /*11 */                                                           | 17975     1
   826       |        { lz4opt,16384,LZ4_OPT_NUM },  /* 12==LZ4HC_CLEVEL_MAX */                                | 17976     1
   826       +                { lz4opt,16384,(1<<12) },                                                        + 17976     1
   827       |    };                                                                                           | 17977     1
   828       |                                                                                                 | 17978     1
   829       |    DEBUGLOG(4, "LZ4HC_compress_generic(ctx=%p, src=%p, srcSize=%d, limit=%d)",                  | 17979     1
   830       |                ctx, src, *srcSizePtr, limit);                                                   | 17980     1
   830       +                    {};                                                                          + 17980     1
   831       |                                                                                                 | 17981     1
   832       |    if (limit == fillOutput && dstCapacity < 1) return 0;   /* Impossible to store anything */   | 17982     1
   833       |    if ((U32)*srcSizePtr > (U32)LZ4_MAX_INPUT_SIZE) return 0;    /* Unsupported input size (too l| 17983     1
   833       +arge or negative) */                                                                             + 17983     1
   833       +        if ((U32)*srcSizePtr > (U32)0x7E000000) return 0;                                        + 17983     1
   834       |                                                                                                 | 17984     1
   835       |    ctx->end += *srcSizePtr;                                                                     | 17985     1
   836       |    if (cLevel < 1) cLevel = LZ4HC_CLEVEL_DEFAULT;   /* note : convention is different from lz4fr| 17986     1
   836       +ame, maybe something to review */                                                                + 17986     1
   836       +        if (cLevel < 1) cLevel = 9;                                                              + 17986     1
   837       |    cLevel = MIN(LZ4HC_CLEVEL_MAX, cLevel);                                                      | 17987     1
   837       +        cLevel = ( (12) < (cLevel) ? (12) : (cLevel) );                                          + 17987     1
   838       |    {   cParams_t const cParam = clTable[cLevel];                                                | 17988     1
   839       |        HCfavor_e const favor = ctx->favorDecSpeed ? favorDecompressionSpeed : favorCompressionRa| 17989     1
   839       +tio;                                                                                             + 17989     1
   840       |        int result;                                                                              | 17990     1
   841       |                                                                                                 | 17991     1
   842       |        if (cParam.strat == lz4hc) {                                                             | 17992     1
   843       |            result = LZ4HC_compress_hashChain(ctx,                                               | 17993     1
   844       |                                src, dst, srcSizePtr, dstCapacity,                               | 17994     1
   845       |                                cParam.nbSearches, limit, dict);                                 | 17995     1
   846       |        } else {                                                                                 | 17996     1
   847       |            assert(cParam.strat == lz4opt);                                                      | 17997     1
   847       +                        ((void)0);                                                               + 17997     1
   848       |            result = LZ4HC_compress_optimal(ctx,                                                 | 17998     1
   849       |                                src, dst, srcSizePtr, dstCapacity,                               | 17999     1
   850       |                                cParam.nbSearches, cParam.targetLength, limit,                   | 18000     1
   851       |                                cLevel == LZ4HC_CLEVEL_MAX,   /* ultra mode */                   | 18001     1
   851       +                                                                cLevel == 12,                    + 18001     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   359


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   852       |                                dict, favor);                                                    | 18002     1
   853       |        }                                                                                        | 18003     1
   854       |        if (result <= 0) ctx->dirty = 1;                                                         | 18004     1
   855       |        return result;                                                                           | 18005     1
   856       |    }                                                                                            | 18006     1
   857       |}                                                                                                | 18007     1
   858       |                                                                                                 | 18008     1
   859       |static void LZ4HC_setExternalDict(LZ4HC_CCtx_internal* ctxPtr, const BYTE* newBlock);            | 18009     1
   860       |                                                                                                 | 18010     1
   861       |static int                                                                                       | 18011     1
   862       |LZ4HC_compress_generic_noDictCtx (                                                               | 18012     1
   863       |        LZ4HC_CCtx_internal* const ctx,                                                          | 18013     1
   864       |        const char* const src,                                                                   | 18014     1
   865       |        char* const dst,                                                                         | 18015     1
   866       |        int* const srcSizePtr,                                                                   | 18016     1
   867       |        int const dstCapacity,                                                                   | 18017     1
   868       |        int cLevel,                                                                              | 18018     1
   869       |        limitedOutput_directive limit                                                            | 18019     1
   870       |        )                                                                                        | 18020     1
   871       |{                                                                                                | 18021     1
   872       |    assert(ctx->dictCtx == NULL);                                                                | 18022     1
   872       +        ((void)0);                                                                               + 18022     1
   873       |    return LZ4HC_compress_generic_internal(ctx, src, dst, srcSizePtr, dstCapacity, cLevel, limit,| 18023     1
   873       + noDictCtx);                                                                                     + 18023     1
   874       |}                                                                                                | 18024     1
   875       |                                                                                                 | 18025     1
   876       |static int                                                                                       | 18026     1
   877       |LZ4HC_compress_generic_dictCtx (                                                                 | 18027     1
   878       |        LZ4HC_CCtx_internal* const ctx,                                                          | 18028     1
   879       |        const char* const src,                                                                   | 18029     1
   880       |        char* const dst,                                                                         | 18030     1
   881       |        int* const srcSizePtr,                                                                   | 18031     1
   882       |        int const dstCapacity,                                                                   | 18032     1
   883       |        int cLevel,                                                                              | 18033     1
   884       |        limitedOutput_directive limit                                                            | 18034     1
   885       |        )                                                                                        | 18035     1
   886       |{                                                                                                | 18036     1
   887       |    const size_t position = (size_t)(ctx->end - ctx->base) - ctx->lowLimit;                      | 18037     1
   888       |    assert(ctx->dictCtx != NULL);                                                                | 18038     1
   888       +        ((void)0);                                                                               + 18038     1
   889       |    if (position >= 64 KB) {                                                                     | 18039     1
   889       +        if (position >= 64 *(1 <<10)) {                                                          + 18039     1
   890       |        ctx->dictCtx = NULL;                                                                     | 18040     1
   890       +                ctx->dictCtx = ((void *)0);                                                      + 18040     1
   891       |        return LZ4HC_compress_generic_noDictCtx(ctx, src, dst, srcSizePtr, dstCapacity, cLevel, l| 18041     1
   891       +imit);                                                                                           + 18041     1
   892       |    } else if (position == 0 && *srcSizePtr > 4 KB) {                                            | 18042     1
   892       +        } else if (position == 0 && *srcSizePtr > 4 *(1 <<10)) {                                 + 18042     1
   893       |        memcpy(ctx, ctx->dictCtx, sizeof(LZ4HC_CCtx_internal));                                  | 18043     1
   893       +                __memcpy(ctx,ctx->dictCtx,sizeof(LZ4HC_CCtx_internal));                          + 18043     1
   894       |        LZ4HC_setExternalDict(ctx, (const BYTE *)src);                                           | 18044     1
   895       |        ctx->compressionLevel = (short)cLevel;                                                   | 18045     1
   896       |        return LZ4HC_compress_generic_noDictCtx(ctx, src, dst, srcSizePtr, dstCapacity, cLevel, l| 18046     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   360


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   896       +imit);                                                                                           + 18046     1
   897       |    } else {                                                                                     | 18047     1
   898       |        return LZ4HC_compress_generic_internal(ctx, src, dst, srcSizePtr, dstCapacity, cLevel, li| 18048     1
   898       +mit, usingDictCtxHc);                                                                            + 18048     1
   899       |    }                                                                                            | 18049     1
   900       |}                                                                                                | 18050     1
   901       |                                                                                                 | 18051     1
   902       |static int                                                                                       | 18052     1
   903       |LZ4HC_compress_generic (                                                                         | 18053     1
   904       |        LZ4HC_CCtx_internal* const ctx,                                                          | 18054     1
   905       |        const char* const src,                                                                   | 18055     1
   906       |        char* const dst,                                                                         | 18056     1
   907       |        int* const srcSizePtr,                                                                   | 18057     1
   908       |        int const dstCapacity,                                                                   | 18058     1
   909       |        int cLevel,                                                                              | 18059     1
   910       |        limitedOutput_directive limit                                                            | 18060     1
   911       |        )                                                                                        | 18061     1
   912       |{                                                                                                | 18062     1
   913       |    if (ctx->dictCtx == NULL) {                                                                  | 18063     1
   913       +        if (ctx->dictCtx == ((void *)0)) {                                                       + 18063     1
   914       |        return LZ4HC_compress_generic_noDictCtx(ctx, src, dst, srcSizePtr, dstCapacity, cLevel, l| 18064     1
   914       +imit);                                                                                           + 18064     1
   915       |    } else {                                                                                     | 18065     1
   916       |        return LZ4HC_compress_generic_dictCtx(ctx, src, dst, srcSizePtr, dstCapacity, cLevel, lim| 18066     1
   916       +it);                                                                                             + 18066     1
   917       |    }                                                                                            | 18067     1
   918       |}                                                                                                | 18068     1
   919       |                                                                                                 | 18069     1
   920       |                                                                                                 | 18070     1
   921       |int LZ4_sizeofStateHC(void) { return (int)sizeof(LZ4_streamHC_t); }                              | 18071     1
   922       |                                                                                                 | 18072     1
   923       |static size_t LZ4_streamHC_t_alignment(void)                                                     | 18073     1
   924       |{                                                                                                | 18074     1
   925       |#if LZ4_ALIGN_TEST                                                                               | 18075     1
   926       |    typedef struct { char c; LZ4_streamHC_t t; } t_a;                                            | 18076     1
   926       +        typedef struct { char c; LZ4_streamHC_t t; } t_a;                                        + 18076     1
   927       |    return sizeof(t_a) - sizeof(LZ4_streamHC_t);                                                 | 18077     1
   928       |#else                                                                                            | 18078     1
   929       |    return 1;  /* effectively disabled */                                                        | 18079     1
   930       |#endif                                                                                           | 18080     1
   931       |}                                                                                                | 18081     1
   932       |                                                                                                 | 18082     1
   933       |/* state is presumed correctly initialized,                                                      | 18083     1
   934       | * in which case its size and alignment have already been validate */                            | 18084     1
   935       |int LZ4_compress_HC_extStateHC_fastReset (void* state, const char* src, char* dst, int srcSize, i| 18085     1
   935       +nt dstCapacity, int compressionLevel)                                                            + 18085     1
   936       |{                                                                                                | 18086     1
   937       |    LZ4HC_CCtx_internal* const ctx = &((LZ4_streamHC_t*)state)->internal_donotuse;               | 18087     1
   938       |    if (!LZ4_isAligned(state, LZ4_streamHC_t_alignment())) return 0;                             | 18088     1
   939       |    LZ4_resetStreamHC_fast((LZ4_streamHC_t*)state, compressionLevel);                            | 18089     1
   940       |    LZ4HC_init_internal (ctx, (const BYTE*)src);                                                 | 18090     1
   941       |    if (dstCapacity < LZ4_compressBound(srcSize))                                                | 18091     1
   942       |        return LZ4HC_compress_generic (ctx, src, dst, &srcSize, dstCapacity, compressionLevel, li| 18092     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   361


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   942       +mitedOutput);                                                                                    + 18092     1
   943       |    else                                                                                         | 18093     1
   944       |        return LZ4HC_compress_generic (ctx, src, dst, &srcSize, dstCapacity, compressionLevel, no| 18094     1
   944       +tLimited);                                                                                       + 18094     1
   945       |}                                                                                                | 18095     1
   946       |                                                                                                 | 18096     1
   947       |int LZ4_compress_HC_extStateHC (void* state, const char* src, char* dst, int srcSize, int dstCapa| 18097     1
   947       +city, int compressionLevel)                                                                      + 18097     1
   948       |{                                                                                                | 18098     1
   949       |    LZ4_streamHC_t* const ctx = LZ4_initStreamHC(state, sizeof(*ctx));                           | 18099     1
   950       |    if (ctx==NULL) return 0;   /* init failure */                                                | 18100     1
   950       +        if (ctx==((void *)0)) return 0;                                                          + 18100     1
   951       |    return LZ4_compress_HC_extStateHC_fastReset(state, src, dst, srcSize, dstCapacity, compressio| 18101     1
   951       +nLevel);                                                                                         + 18101     1
   952       |}                                                                                                | 18102     1
   953       |                                                                                                 | 18103     1
   954       |int LZ4_compress_HC(const char* src, char* dst, int srcSize, int dstCapacity, int compressionLeve| 18104     1
   954       +l)                                                                                               + 18104     1
   955       |{                                                                                                | 18105     1
   956       |#if defined(LZ4HC_HEAPMODE) && LZ4HC_HEAPMODE==1                                                 | 18106     1
   957       |    LZ4_streamHC_t* const statePtr = (LZ4_streamHC_t*)ALLOC(sizeof(LZ4_streamHC_t));             | 18107     1
   957       +        LZ4_streamHC_t* const statePtr = (LZ4_streamHC_t*)rd_kafka_mem_malloc(((void *)0), sizeof+ 18107     1
   957       +(LZ4_streamHC_t));                                                                               + 18107     1
   958       |#else                                                                                            | 18108     1
   959       |    LZ4_streamHC_t state;                                                                        | 18109     1
   960       |    LZ4_streamHC_t* const statePtr = &state;                                                     | 18110     1
   961       |#endif                                                                                           | 18111     1
   962       |    int const cSize = LZ4_compress_HC_extStateHC(statePtr, src, dst, srcSize, dstCapacity, compre| 18112     1
   962       +ssionLevel);                                                                                     + 18112     1
   963       |#if defined(LZ4HC_HEAPMODE) && LZ4HC_HEAPMODE==1                                                 | 18113     1
   964       |    FREEMEM(statePtr);                                                                           | 18114     1
   964       +        rd_kafka_mem_free(((void *)0), statePtr);                                                + 18114     1
   965       |#endif                                                                                           | 18115     1
   966       |    return cSize;                                                                                | 18116     1
   967       |}                                                                                                | 18117     1
   968       |                                                                                                 | 18118     1
   969       |/* state is presumed sized correctly (>= sizeof(LZ4_streamHC_t)) */                              | 18119     1
   970       |int LZ4_compress_HC_destSize(void* state, const char* source, char* dest, int* sourceSizePtr, int| 18120     1
   970       + targetDestSize, int cLevel)                                                                     + 18120     1
   971       |{                                                                                                | 18121     1
   972       |    LZ4_streamHC_t* const ctx = LZ4_initStreamHC(state, sizeof(*ctx));                           | 18122     1
   973       |    if (ctx==NULL) return 0;   /* init failure */                                                | 18123     1
   973       +        if (ctx==((void *)0)) return 0;                                                          + 18123     1
   974       |    LZ4HC_init_internal(&ctx->internal_donotuse, (const BYTE*) source);                          | 18124     1
   975       |    LZ4_setCompressionLevel(ctx, cLevel);                                                        | 18125     1
   976       |    return LZ4HC_compress_generic(&ctx->internal_donotuse, source, dest, sourceSizePtr, targetDes| 18126     1
   976       +tSize, cLevel, fillOutput);                                                                      + 18126     1
   977       |}                                                                                                | 18127     1
   978       |                                                                                                 | 18128     1
   979       |                                                                                                 | 18129     1
   980       |                                                                                                 | 18130     1
   981       |/**************************************                                                          | 18131     1
   982       |*  Streaming Functions                                                                           | 18132     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   362


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   983       |**************************************/                                                          | 18133     1
   984       |/* allocation */                                                                                 | 18134     1
   985       |LZ4_streamHC_t* LZ4_createStreamHC(void)                                                         | 18135     1
   986       |{                                                                                                | 18136     1
   987       |    LZ4_streamHC_t* const state =                                                                | 18137     1
   988       |        (LZ4_streamHC_t*)ALLOC_AND_ZERO(sizeof(LZ4_streamHC_t));                                 | 18138     1
   988       +                (LZ4_streamHC_t*)rd_kafka_mem_calloc(((void *)0), 1, sizeof(LZ4_streamHC_t));    + 18138     1
   989       |    if (state == NULL) return NULL;                                                              | 18139     1
   989       +        if (state == ((void *)0)) return ((void *)0);                                            + 18139     1
   990       |    LZ4_setCompressionLevel(state, LZ4HC_CLEVEL_DEFAULT);                                        | 18140     1
   990       +        LZ4_setCompressionLevel(state, 9);                                                       + 18140     1
   991       |    return state;                                                                                | 18141     1
   992       |}                                                                                                | 18142     1
   993       |                                                                                                 | 18143     1
   994       |int LZ4_freeStreamHC (LZ4_streamHC_t* LZ4_streamHCPtr)                                           | 18144     1
   995       |{                                                                                                | 18145     1
   996       |    DEBUGLOG(4, "LZ4_freeStreamHC(%p)", LZ4_streamHCPtr);                                        | 18146     1
   996       +        {};                                                                                      + 18146     1
   997       |    if (!LZ4_streamHCPtr) return 0;  /* support free on NULL */                                  | 18147     1
   998       |    FREEMEM(LZ4_streamHCPtr);                                                                    | 18148     1
   998       +        rd_kafka_mem_free(((void *)0), LZ4_streamHCPtr);                                         + 18148     1
   999       |    return 0;                                                                                    | 18149     1
  1000       |}                                                                                                | 18150     1
  1001       |                                                                                                 | 18151     1
  1002       |                                                                                                 | 18152     1
  1003       |LZ4_streamHC_t* LZ4_initStreamHC (void* buffer, size_t size)                                     | 18153     1
  1004       |{                                                                                                | 18154     1
  1005       |    LZ4_streamHC_t* const LZ4_streamHCPtr = (LZ4_streamHC_t*)buffer;                             | 18155     1
  1006       |    /* if compilation fails here, LZ4_STREAMHCSIZE must be increased */                          | 18156     1
  1007       |    LZ4_STATIC_ASSERT(sizeof(LZ4HC_CCtx_internal) <= LZ4_STREAMHCSIZE);                          | 18157     1
  1007       +        { enum { LZ4_static_assert = 1/(int)(!!(sizeof(LZ4HC_CCtx_internal) <= 262200)) }; };    + 18157     1
  1008       |    DEBUGLOG(4, "LZ4_initStreamHC(%p, %u)", buffer, (unsigned)size);                             | 18158     1
  1008       +        {};                                                                                      + 18158     1
  1009       |    /* check conditions */                                                                       | 18159     1
  1010       |    if (buffer == NULL) return NULL;                                                             | 18160     1
  1010       +        if (buffer == ((void *)0)) return ((void *)0);                                           + 18160     1
  1011       |    if (size < sizeof(LZ4_streamHC_t)) return NULL;                                              | 18161     1
  1011       +        if (size < sizeof(LZ4_streamHC_t)) return ((void *)0);                                   + 18161     1
  1012       |    if (!LZ4_isAligned(buffer, LZ4_streamHC_t_alignment())) return NULL;                         | 18162     1
  1012       +        if (!LZ4_isAligned(buffer, LZ4_streamHC_t_alignment())) return ((void *)0);              + 18162     1
  1013       |    /* init */                                                                                   | 18163     1
  1014       |    { LZ4HC_CCtx_internal* const hcstate = &(LZ4_streamHCPtr->internal_donotuse);                | 18164     1
  1015       |      MEM_INIT(hcstate, 0, sizeof(*hcstate)); }                                                  | 18165     1
  1015       +            __memset((hcstate),(0),(sizeof(*hcstate))); }                                        + 18165     1
  1016       |    LZ4_setCompressionLevel(LZ4_streamHCPtr, LZ4HC_CLEVEL_DEFAULT);                              | 18166     1
  1016       +        LZ4_setCompressionLevel(LZ4_streamHCPtr, 9);                                             + 18166     1
  1017       |    return LZ4_streamHCPtr;                                                                      | 18167     1
  1018       |}                                                                                                | 18168     1
  1019       |                                                                                                 | 18169     1
  1020       |/* just a stub */                                                                                | 18170     1
  1021       |void LZ4_resetStreamHC (LZ4_streamHC_t* LZ4_streamHCPtr, int compressionLevel)                   | 18171     1
  1022       |{                                                                                                | 18172     1
  1023       |    LZ4_initStreamHC(LZ4_streamHCPtr, sizeof(*LZ4_streamHCPtr));                                 | 18173     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   363


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1024       |    LZ4_setCompressionLevel(LZ4_streamHCPtr, compressionLevel);                                  | 18174     1
  1025       |}                                                                                                | 18175     1
  1026       |                                                                                                 | 18176     1
  1027       |void LZ4_resetStreamHC_fast (LZ4_streamHC_t* LZ4_streamHCPtr, int compressionLevel)              | 18177     1
  1028       |{                                                                                                | 18178     1
  1029       |    DEBUGLOG(4, "LZ4_resetStreamHC_fast(%p, %d)", LZ4_streamHCPtr, compressionLevel);            | 18179     1
  1029       +        {};                                                                                      + 18179     1
  1030       |    if (LZ4_streamHCPtr->internal_donotuse.dirty) {                                              | 18180     1
  1031       |        LZ4_initStreamHC(LZ4_streamHCPtr, sizeof(*LZ4_streamHCPtr));                             | 18181     1
  1032       |    } else {                                                                                     | 18182     1
  1033       |        /* preserve end - base : can trigger clearTable's threshold */                           | 18183     1
  1034       |        LZ4_streamHCPtr->internal_donotuse.end -= (uptrval)LZ4_streamHCPtr->internal_donotuse.bas| 18184     1
  1034       +e;                                                                                               + 18184     1
  1035       |        LZ4_streamHCPtr->internal_donotuse.base = NULL;                                          | 18185     1
  1035       +                LZ4_streamHCPtr->internal_donotuse.base = ((void *)0);                           + 18185     1
  1036       |        LZ4_streamHCPtr->internal_donotuse.dictCtx = NULL;                                       | 18186     1
  1036       +                LZ4_streamHCPtr->internal_donotuse.dictCtx = ((void *)0);                        + 18186     1
  1037       |    }                                                                                            | 18187     1
  1038       |    LZ4_setCompressionLevel(LZ4_streamHCPtr, compressionLevel);                                  | 18188     1
  1039       |}                                                                                                | 18189     1
  1040       |                                                                                                 | 18190     1
  1041       |void LZ4_setCompressionLevel(LZ4_streamHC_t* LZ4_streamHCPtr, int compressionLevel)              | 18191     1
  1042       |{                                                                                                | 18192     1
  1043       |    DEBUGLOG(5, "LZ4_setCompressionLevel(%p, %d)", LZ4_streamHCPtr, compressionLevel);           | 18193     1
  1043       +        {};                                                                                      + 18193     1
  1044       |    if (compressionLevel < 1) compressionLevel = LZ4HC_CLEVEL_DEFAULT;                           | 18194     1
  1044       +        if (compressionLevel < 1) compressionLevel = 9;                                          + 18194     1
  1045       |    if (compressionLevel > LZ4HC_CLEVEL_MAX) compressionLevel = LZ4HC_CLEVEL_MAX;                | 18195     1
  1045       +        if (compressionLevel > 12) compressionLevel = 12;                                        + 18195     1
  1046       |    LZ4_streamHCPtr->internal_donotuse.compressionLevel = (short)compressionLevel;               | 18196     1
  1047       |}                                                                                                | 18197     1
  1048       |                                                                                                 | 18198     1
  1049       |void LZ4_favorDecompressionSpeed(LZ4_streamHC_t* LZ4_streamHCPtr, int favor)                     | 18199     1
  1050       |{                                                                                                | 18200     1
  1051       |    LZ4_streamHCPtr->internal_donotuse.favorDecSpeed = (favor!=0);                               | 18201     1
  1052       |}                                                                                                | 18202     1
  1053       |                                                                                                 | 18203     1
  1054       |/* LZ4_loadDictHC() :                                                                            | 18204     1
  1055       | * LZ4_streamHCPtr is presumed properly initialized */                                           | 18205     1
  1056       |int LZ4_loadDictHC (LZ4_streamHC_t* LZ4_streamHCPtr,                                             | 18206     1
  1057       |              const char* dictionary, int dictSize)                                              | 18207     1
  1058       |{                                                                                                | 18208     1
  1059       |    LZ4HC_CCtx_internal* const ctxPtr = &LZ4_streamHCPtr->internal_donotuse;                     | 18209     1
  1060       |    DEBUGLOG(4, "LZ4_loadDictHC(ctx:%p, dict:%p, dictSize:%d)", LZ4_streamHCPtr, dictionary, dict| 18210     1
  1060       +Size);                                                                                           + 18210     1
  1060       +        {};                                                                                      + 18210     1
  1061       |    assert(LZ4_streamHCPtr != NULL);                                                             | 18211     1
  1061       +        ((void)0);                                                                               + 18211     1
  1062       |    if (dictSize > 64 KB) {                                                                      | 18212     1
  1062       +        if (dictSize > 64 *(1 <<10)) {                                                           + 18212     1
  1063       |        dictionary += (size_t)dictSize - 64 KB;                                                  | 18213     1
  1063       +                dictionary += (size_t)dictSize - 64 *(1 <<10);                                   + 18213     1
  1064       |        dictSize = 64 KB;                                                                        | 18214     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   364


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1064       +                dictSize = 64 *(1 <<10);                                                         + 18214     1
  1065       |    }                                                                                            | 18215     1
  1066       |    /* need a full initialization, there are bad side-effects when using resetFast() */          | 18216     1
  1067       |    {   int const cLevel = ctxPtr->compressionLevel;                                             | 18217     1
  1068       |        LZ4_initStreamHC(LZ4_streamHCPtr, sizeof(*LZ4_streamHCPtr));                             | 18218     1
  1069       |        LZ4_setCompressionLevel(LZ4_streamHCPtr, cLevel);                                        | 18219     1
  1070       |    }                                                                                            | 18220     1
  1071       |    LZ4HC_init_internal (ctxPtr, (const BYTE*)dictionary);                                       | 18221     1
  1072       |    ctxPtr->end = (const BYTE*)dictionary + dictSize;                                            | 18222     1
  1073       |    if (dictSize >= 4) LZ4HC_Insert (ctxPtr, ctxPtr->end-3);                                     | 18223     1
  1074       |    return dictSize;                                                                             | 18224     1
  1075       |}                                                                                                | 18225     1
  1076       |                                                                                                 | 18226     1
  1077       |void LZ4_attach_HC_dictionary(LZ4_streamHC_t *working_stream, const LZ4_streamHC_t *dictionary_st| 18227     1
  1077       +ream) {                                                                                          + 18227     1
  1078       |    working_stream->internal_donotuse.dictCtx = dictionary_stream != NULL ? &(dictionary_stream->| 18228     1
  1078       +internal_donotuse) : NULL;                                                                       + 18228     1
  1078       +        working_stream->internal_donotuse.dictCtx = dictionary_stream != ((void *)0) ? &(dictiona+ 18228     1
  1078       +ry_stream->internal_donotuse) : ((void *)0);                                                     + 18228     1
  1079       |}                                                                                                | 18229     1
  1080       |                                                                                                 | 18230     1
  1081       |/* compression */                                                                                | 18231     1
  1082       |                                                                                                 | 18232     1
  1083       |static void LZ4HC_setExternalDict(LZ4HC_CCtx_internal* ctxPtr, const BYTE* newBlock)             | 18233     1
  1084       |{                                                                                                | 18234     1
  1085       |    DEBUGLOG(4, "LZ4HC_setExternalDict(%p, %p)", ctxPtr, newBlock);                              | 18235     1
  1085       +        {};                                                                                      + 18235     1
  1086       |    if (ctxPtr->end >= ctxPtr->base + ctxPtr->dictLimit + 4)                                     | 18236     1
  1087       |        LZ4HC_Insert (ctxPtr, ctxPtr->end-3);   /* Referencing remaining dictionary content */   | 18237     1
  1088       |                                                                                                 | 18238     1
  1089       |    /* Only one memory segment for extDict, so any previous extDict is lost at this stage */     | 18239     1
  1090       |    ctxPtr->lowLimit  = ctxPtr->dictLimit;                                                       | 18240     1
  1091       |    ctxPtr->dictLimit = (U32)(ctxPtr->end - ctxPtr->base);                                       | 18241     1
  1092       |    ctxPtr->dictBase  = ctxPtr->base;                                                            | 18242     1
  1093       |    ctxPtr->base = newBlock - ctxPtr->dictLimit;                                                 | 18243     1
  1094       |    ctxPtr->end  = newBlock;                                                                     | 18244     1
  1095       |    ctxPtr->nextToUpdate = ctxPtr->dictLimit;   /* match referencing will resume from there */   | 18245     1
  1096       |                                                                                                 | 18246     1
  1097       |    /* cannot reference an extDict and a dictCtx at the same time */                             | 18247     1
  1098       |    ctxPtr->dictCtx = NULL;                                                                      | 18248     1
  1098       +        ctxPtr->dictCtx = ((void *)0);                                                           + 18248     1
  1099       |}                                                                                                | 18249     1
  1100       |                                                                                                 | 18250     1
  1101       |static int                                                                                       | 18251     1
  1102       |LZ4_compressHC_continue_generic (LZ4_streamHC_t* LZ4_streamHCPtr,                                | 18252     1
  1103       |                                 const char* src, char* dst,                                     | 18253     1
  1104       |                                 int* srcSizePtr, int dstCapacity,                               | 18254     1
  1105       |                                 limitedOutput_directive limit)                                  | 18255     1
  1106       |{                                                                                                | 18256     1
  1107       |    LZ4HC_CCtx_internal* const ctxPtr = &LZ4_streamHCPtr->internal_donotuse;                     | 18257     1
  1108       |    DEBUGLOG(5, "LZ4_compressHC_continue_generic(ctx=%p, src=%p, srcSize=%d, limit=%d)",         | 18258     1
  1109       |                LZ4_streamHCPtr, src, *srcSizePtr, limit);                                       | 18259     1
  1109       +                    {};                                                                          + 18259     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   365


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1110       |    assert(ctxPtr != NULL);                                                                      | 18260     1
  1110       +        ((void)0);                                                                               + 18260     1
  1111       |    /* auto-init if forgotten */                                                                 | 18261     1
  1112       |    if (ctxPtr->base == NULL) LZ4HC_init_internal (ctxPtr, (const BYTE*) src);                   | 18262     1
  1112       +        if (ctxPtr->base == ((void *)0)) LZ4HC_init_internal (ctxPtr, (const BYTE*) src);        + 18262     1
  1113       |                                                                                                 | 18263     1
  1114       |    /* Check overflow */                                                                         | 18264     1
  1115       |    if ((size_t)(ctxPtr->end - ctxPtr->base) > 2 GB) {                                           | 18265     1
  1115       +        if ((size_t)(ctxPtr->end - ctxPtr->base) > 2 *(1U<<30)) {                                + 18265     1
  1116       |        size_t dictSize = (size_t)(ctxPtr->end - ctxPtr->base) - ctxPtr->dictLimit;              | 18266     1
  1117       |        if (dictSize > 64 KB) dictSize = 64 KB;                                                  | 18267     1
  1117       +                if (dictSize > 64 *(1 <<10)) dictSize = 64 *(1 <<10);                            + 18267     1
  1118       |        LZ4_loadDictHC(LZ4_streamHCPtr, (const char*)(ctxPtr->end) - dictSize, (int)dictSize);   | 18268     1
  1119       |    }                                                                                            | 18269     1
  1120       |                                                                                                 | 18270     1
  1121       |    /* Check if blocks follow each other */                                                      | 18271     1
  1122       |    if ((const BYTE*)src != ctxPtr->end)                                                         | 18272     1
  1123       |        LZ4HC_setExternalDict(ctxPtr, (const BYTE*)src);                                         | 18273     1
  1124       |                                                                                                 | 18274     1
  1125       |    /* Check overlapping input/dictionary space */                                               | 18275     1
  1126       |    {   const BYTE* sourceEnd = (const BYTE*) src + *srcSizePtr;                                 | 18276     1
  1127       |        const BYTE* const dictBegin = ctxPtr->dictBase + ctxPtr->lowLimit;                       | 18277     1
  1128       |        const BYTE* const dictEnd   = ctxPtr->dictBase + ctxPtr->dictLimit;                      | 18278     1
  1129       |        if ((sourceEnd > dictBegin) && ((const BYTE*)src < dictEnd)) {                           | 18279     1
  1130       |            if (sourceEnd > dictEnd) sourceEnd = dictEnd;                                        | 18280     1
  1131       |            ctxPtr->lowLimit = (U32)(sourceEnd - ctxPtr->dictBase);                              | 18281     1
  1132       |            if (ctxPtr->dictLimit - ctxPtr->lowLimit < 4) ctxPtr->lowLimit = ctxPtr->dictLimit;  | 18282     1
  1133       |    }   }                                                                                        | 18283     1
  1134       |                                                                                                 | 18284     1
  1135       |    return LZ4HC_compress_generic (ctxPtr, src, dst, srcSizePtr, dstCapacity, ctxPtr->compression| 18285     1
  1135       +Level, limit);                                                                                   + 18285     1
  1136       |}                                                                                                | 18286     1
  1137       |                                                                                                 | 18287     1
  1138       |int LZ4_compress_HC_continue (LZ4_streamHC_t* LZ4_streamHCPtr, const char* src, char* dst, int sr| 18288     1
  1138       +cSize, int dstCapacity)                                                                          + 18288     1
  1139       |{                                                                                                | 18289     1
  1140       |    if (dstCapacity < LZ4_compressBound(srcSize))                                                | 18290     1
  1141       |        return LZ4_compressHC_continue_generic (LZ4_streamHCPtr, src, dst, &srcSize, dstCapacity,| 18291     1
  1141       + limitedOutput);                                                                                 + 18291     1
  1142       |    else                                                                                         | 18292     1
  1143       |        return LZ4_compressHC_continue_generic (LZ4_streamHCPtr, src, dst, &srcSize, dstCapacity,| 18293     1
  1143       + notLimited);                                                                                    + 18293     1
  1144       |}                                                                                                | 18294     1
  1145       |                                                                                                 | 18295     1
  1146       |int LZ4_compress_HC_continue_destSize (LZ4_streamHC_t* LZ4_streamHCPtr, const char* src, char* ds| 18296     1
  1146       +t, int* srcSizePtr, int targetDestSize)                                                          + 18296     1
  1147       |{                                                                                                | 18297     1
  1148       |    return LZ4_compressHC_continue_generic(LZ4_streamHCPtr, src, dst, srcSizePtr, targetDestSize,| 18298     1
  1148       + fillOutput);                                                                                    + 18298     1
  1149       |}                                                                                                | 18299     1
  1150       |                                                                                                 | 18300     1
  1151       |                                                                                                 | 18301     1
  1152       |                                                                                                 | 18302     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   366


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1153       |/* LZ4_saveDictHC :                                                                              | 18303     1
  1154       | * save history content                                                                          | 18304     1
  1155       | * into a user-provided buffer                                                                   | 18305     1
  1156       | * which is then used to continue compression                                                    | 18306     1
  1157       | */                                                                                              | 18307     1
  1158       |int LZ4_saveDictHC (LZ4_streamHC_t* LZ4_streamHCPtr, char* safeBuffer, int dictSize)             | 18308     1
  1159       |{                                                                                                | 18309     1
  1160       |    LZ4HC_CCtx_internal* const streamPtr = &LZ4_streamHCPtr->internal_donotuse;                  | 18310     1
  1161       |    int const prefixSize = (int)(streamPtr->end - (streamPtr->base + streamPtr->dictLimit));     | 18311     1
  1162       |    DEBUGLOG(5, "LZ4_saveDictHC(%p, %p, %d)", LZ4_streamHCPtr, safeBuffer, dictSize);            | 18312     1
  1162       +        {};                                                                                      + 18312     1
  1163       |    assert(prefixSize >= 0);                                                                     | 18313     1
  1163       +        ((void)0);                                                                               + 18313     1
  1164       |    if (dictSize > 64 KB) dictSize = 64 KB;                                                      | 18314     1
  1164       +        if (dictSize > 64 *(1 <<10)) dictSize = 64 *(1 <<10);                                    + 18314     1
  1165       |    if (dictSize < 4) dictSize = 0;                                                              | 18315     1
  1166       |    if (dictSize > prefixSize) dictSize = prefixSize;                                            | 18316     1
  1167       |    if (safeBuffer == NULL) assert(dictSize == 0);                                               | 18317     1
  1167       +        if (safeBuffer == ((void *)0)) ((void)0);                                                + 18317     1
  1168       |    if (dictSize > 0)                                                                            | 18318     1
  1169       |        memmove(safeBuffer, streamPtr->end - dictSize, dictSize);                                | 18319     1
  1170       |    {   U32 const endIndex = (U32)(streamPtr->end - streamPtr->base);                            | 18320     1
  1171       |        streamPtr->end = (const BYTE*)safeBuffer + dictSize;                                     | 18321     1
  1172       |        streamPtr->base = streamPtr->end - endIndex;                                             | 18322     1
  1173       |        streamPtr->dictLimit = endIndex - (U32)dictSize;                                         | 18323     1
  1174       |        streamPtr->lowLimit = endIndex - (U32)dictSize;                                          | 18324     1
  1175       |        if (streamPtr->nextToUpdate < streamPtr->dictLimit)                                      | 18325     1
  1176       |            streamPtr->nextToUpdate = streamPtr->dictLimit;                                      | 18326     1
  1177       |    }                                                                                            | 18327     1
  1178       |    return dictSize;                                                                             | 18328     1
  1179       |}                                                                                                | 18329     1
  1180       |                                                                                                 | 18330     1
  1181       |                                                                                                 | 18331     1
  1182       |/***************************************************                                             | 18332     1
  1183       |*  Deprecated Functions                                                                          | 18333     1
  1184       |***************************************************/                                             | 18334     1
  1185       |                                                                                                 | 18335     1
  1186       |/* These functions currently generate deprecation warnings */                                    | 18336     1
  1187       |                                                                                                 | 18337     1
  1188       |/* Wrappers for deprecated compression functions */                                              | 18338     1
  1189       |int LZ4_compressHC(const char* src, char* dst, int srcSize) { return LZ4_compress_HC (src, dst, s| 18339     1
  1189       +rcSize, LZ4_compressBound(srcSize), 0); }                                                        + 18339     1
  1190       |int LZ4_compressHC_limitedOutput(const char* src, char* dst, int srcSize, int maxDstSize) { retur| 18340     1
  1190       +n LZ4_compress_HC(src, dst, srcSize, maxDstSize, 0); }                                           + 18340     1
  1191       |int LZ4_compressHC2(const char* src, char* dst, int srcSize, int cLevel) { return LZ4_compress_HC| 18341     1
  1191       + (src, dst, srcSize, LZ4_compressBound(srcSize), cLevel); }                                      + 18341     1
  1192       |int LZ4_compressHC2_limitedOutput(const char* src, char* dst, int srcSize, int maxDstSize, int cL| 18342     1
  1192       +evel) { return LZ4_compress_HC(src, dst, srcSize, maxDstSize, cLevel); }                         + 18342     1
  1193       |int LZ4_compressHC_withStateHC (void* state, const char* src, char* dst, int srcSize) { return LZ| 18343     1
  1193       +4_compress_HC_extStateHC (state, src, dst, srcSize, LZ4_compressBound(srcSize), 0); }            + 18343     1
  1194       |int LZ4_compressHC_limitedOutput_withStateHC (void* state, const char* src, char* dst, int srcSiz| 18344     1
  1194       +e, int maxDstSize) { return LZ4_compress_HC_extStateHC (state, src, dst, srcSize, maxDstSize, 0);+ 18344     1
  1194       + }                                                                                               + 18344     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   367


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1195       |int LZ4_compressHC2_withStateHC (void* state, const char* src, char* dst, int srcSize, int cLevel| 18345     1
  1195       +) { return LZ4_compress_HC_extStateHC(state, src, dst, srcSize, LZ4_compressBound(srcSize), cLeve+ 18345     1
  1195       +l); }                                                                                            + 18345     1
  1196       |int LZ4_compressHC2_limitedOutput_withStateHC (void* state, const char* src, char* dst, int srcSi| 18346     1
  1196       +ze, int maxDstSize, int cLevel) { return LZ4_compress_HC_extStateHC(state, src, dst, srcSize, max+ 18346     1
  1196       +DstSize, cLevel); }                                                                              + 18346     1
  1197       |int LZ4_compressHC_continue (LZ4_streamHC_t* ctx, const char* src, char* dst, int srcSize) { retu| 18347     1
  1197       +rn LZ4_compress_HC_continue (ctx, src, dst, srcSize, LZ4_compressBound(srcSize)); }              + 18347     1
  1198       |int LZ4_compressHC_limitedOutput_continue (LZ4_streamHC_t* ctx, const char* src, char* dst, int s| 18348     1
  1198       +rcSize, int maxDstSize) { return LZ4_compress_HC_continue (ctx, src, dst, srcSize, maxDstSize); }+ 18348     1
  1199       |                                                                                                 | 18349     1
  1200       |                                                                                                 | 18350     1
  1201       |/* Deprecated streaming functions */                                                             | 18351     1
  1202       |int LZ4_sizeofStreamStateHC(void) { return LZ4_STREAMHCSIZE; }                                   | 18352     1
  1202       +int LZ4_sizeofStreamStateHC(void) { return 262200; }                                             + 18352     1
  1203       |                                                                                                 | 18353     1
  1204       |/* state is presumed correctly sized, aka >= sizeof(LZ4_streamHC_t)                              | 18354     1
  1205       | * @return : 0 on success, !=0 if error */                                                       | 18355     1
  1206       |int LZ4_resetStreamStateHC(void* state, char* inputBuffer)                                       | 18356     1
  1207       |{                                                                                                | 18357     1
  1208       |    LZ4_streamHC_t* const hc4 = LZ4_initStreamHC(state, sizeof(*hc4));                           | 18358     1
  1209       |    if (hc4 == NULL) return 1;   /* init failed */                                               | 18359     1
  1209       +        if (hc4 == ((void *)0)) return 1;                                                        + 18359     1
  1210       |    LZ4HC_init_internal (&hc4->internal_donotuse, (const BYTE*)inputBuffer);                     | 18360     1
  1211       |    return 0;                                                                                    | 18361     1
  1212       |}                                                                                                | 18362     1
  1213       |                                                                                                 | 18363     1
  1214       |void* LZ4_createHC (const char* inputBuffer)                                                     | 18364     1
  1215       |{                                                                                                | 18365     1
  1216       |    LZ4_streamHC_t* const hc4 = LZ4_createStreamHC();                                            | 18366     1
  1217       |    if (hc4 == NULL) return NULL;   /* not enough memory */                                      | 18367     1
  1217       +        if (hc4 == ((void *)0)) return ((void *)0);                                              + 18367     1
  1218       |    LZ4HC_init_internal (&hc4->internal_donotuse, (const BYTE*)inputBuffer);                     | 18368     1
  1219       |    return hc4;                                                                                  | 18369     1
  1220       |}                                                                                                | 18370     1
  1221       |                                                                                                 | 18371     1
  1222       |int LZ4_freeHC (void* LZ4HC_Data)                                                                | 18372     1
  1223       |{                                                                                                | 18373     1
  1224       |    if (!LZ4HC_Data) return 0;  /* support free on NULL */                                       | 18374     1
  1225       |    FREEMEM(LZ4HC_Data);                                                                         | 18375     1
  1225       +        rd_kafka_mem_free(((void *)0), LZ4HC_Data);                                              + 18375     1
  1226       |    return 0;                                                                                    | 18376     1
  1227       |}                                                                                                | 18377     1
  1228       |                                                                                                 | 18378     1
  1229       |int LZ4_compressHC2_continue (void* LZ4HC_Data, const char* src, char* dst, int srcSize, int cLev| 18379     1
  1229       +el)                                                                                              + 18379     1
  1230       |{                                                                                                | 18380     1
  1231       |    return LZ4HC_compress_generic (&((LZ4_streamHC_t*)LZ4HC_Data)->internal_donotuse, src, dst, &| 18381     1
  1231       +srcSize, 0, cLevel, notLimited);                                                                 + 18381     1
  1232       |}                                                                                                | 18382     1
  1233       |                                                                                                 | 18383     1
  1234       |int LZ4_compressHC2_limitedOutput_continue (void* LZ4HC_Data, const char* src, char* dst, int src| 18384     1
  1234       +Size, int dstCapacity, int cLevel)                                                               + 18384     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   368


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1235       |{                                                                                                | 18385     1
  1236       |    return LZ4HC_compress_generic (&((LZ4_streamHC_t*)LZ4HC_Data)->internal_donotuse, src, dst, &| 18386     1
  1236       +srcSize, dstCapacity, cLevel, limitedOutput);                                                    + 18386     1
  1237       |}                                                                                                | 18387     1
  1238       |                                                                                                 | 18388     1
  1239       |char* LZ4_slideInputBufferHC(void* LZ4HC_Data)                                                   | 18389     1
  1240       |{                                                                                                | 18390     1
  1241       |    LZ4_streamHC_t *ctx = (LZ4_streamHC_t*)LZ4HC_Data;                                           | 18391     1
  1242       |    const BYTE *bufferStart = ctx->internal_donotuse.base + ctx->internal_donotuse.lowLimit;     | 18392     1
  1243       |    LZ4_resetStreamHC_fast(ctx, ctx->internal_donotuse.compressionLevel);                        | 18393     1
  1244       |    /* avoid const char * -> char * conversion warning :( */                                     | 18394     1
  1245       |    return (char *)(uptrval)bufferStart;                                                         | 18395     1
  1246       |}                                                                                                | 18396     1
  1247       |                                                                                                 | 18397     1
  1248       |                                                                                                 | 18398     1
  1249       |/* ================================================                                              | 18399     1
  1250       | *  LZ4 Optimal parser (levels [LZ4HC_CLEVEL_OPT_MIN - LZ4HC_CLEVEL_MAX])                        | 18400     1
  1251       | * ===============================================*/                                             | 18401     1
  1252       |typedef struct {                                                                                 | 18402     1
  1253       |    int price;                                                                                   | 18403     1
  1254       |    int off;                                                                                     | 18404     1
  1255       |    int mlen;                                                                                    | 18405     1
  1256       |    int litlen;                                                                                  | 18406     1
  1257       |} LZ4HC_optimal_t;                                                                               | 18407     1
  1258       |                                                                                                 | 18408     1
  1259       |/* price in bytes */                                                                             | 18409     1
  1260       |LZ4_FORCE_INLINE int LZ4HC_literalsPrice(int const litlen)                                       | 18410     1
  1260       +static inline int LZ4HC_literalsPrice(int const litlen)                                          + 18410     1
  1261       |{                                                                                                | 18411     1
  1262       |    int price = litlen;                                                                          | 18412     1
  1263       |    assert(litlen >= 0);                                                                         | 18413     1
  1263       +        ((void)0);                                                                               + 18413     1
  1264       |    if (litlen >= (int)RUN_MASK)                                                                 | 18414     1
  1264       +        if (litlen >= (int)((1U<<(8-4))-1))                                                      + 18414     1
  1265       |        price += 1 + ((litlen-(int)RUN_MASK) / 255);                                             | 18415     1
  1265       +                price += 1 + ((litlen-(int)((1U<<(8-4))-1)) / 255);                              + 18415     1
  1266       |    return price;                                                                                | 18416     1
  1267       |}                                                                                                | 18417     1
  1268       |                                                                                                 | 18418     1
  1269       |                                                                                                 | 18419     1
  1270       |/* requires mlen >= MINMATCH */                                                                  | 18420     1
  1271       |LZ4_FORCE_INLINE int LZ4HC_sequencePrice(int litlen, int mlen)                                   | 18421     1
  1271       +static inline int LZ4HC_sequencePrice(int litlen, int mlen)                                      + 18421     1
  1272       |{                                                                                                | 18422     1
  1273       |    int price = 1 + 2 ; /* token + 16-bit offset */                                              | 18423     1
  1274       |    assert(litlen >= 0);                                                                         | 18424     1
  1274       +        ((void)0);                                                                               + 18424     1
  1275       |    assert(mlen >= MINMATCH);                                                                    | 18425     1
  1275       +        ((void)0);                                                                               + 18425     1
  1276       |                                                                                                 | 18426     1
  1277       |    price += LZ4HC_literalsPrice(litlen);                                                        | 18427     1
  1278       |                                                                                                 | 18428     1
  1279       |    if (mlen >= (int)(ML_MASK+MINMATCH))                                                         | 18429     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   369


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1279       +        if (mlen >= (int)(((1U<<4)-1)+4))                                                        + 18429     1
  1280       |        price += 1 + ((mlen-(int)(ML_MASK+MINMATCH)) / 255);                                     | 18430     1
  1280       +                price += 1 + ((mlen-(int)(((1U<<4)-1)+4)) / 255);                                + 18430     1
  1281       |                                                                                                 | 18431     1
  1282       |    return price;                                                                                | 18432     1
  1283       |}                                                                                                | 18433     1
  1284       |                                                                                                 | 18434     1
  1285       |                                                                                                 | 18435     1
  1286       |typedef struct {                                                                                 | 18436     1
  1287       |    int off;                                                                                     | 18437     1
  1288       |    int len;                                                                                     | 18438     1
  1289       |} LZ4HC_match_t;                                                                                 | 18439     1
  1290       |                                                                                                 | 18440     1
  1291       |LZ4_FORCE_INLINE LZ4HC_match_t                                                                   | 18441     1
  1291       +static inline LZ4HC_match_t                                                                      + 18441     1
  1292       |LZ4HC_FindLongerMatch(LZ4HC_CCtx_internal* const ctx,                                            | 18442     1
  1293       |                      const BYTE* ip, const BYTE* const iHighLimit,                              | 18443     1
  1294       |                      int minLen, int nbSearches,                                                | 18444     1
  1295       |                      const dictCtx_directive dict,                                              | 18445     1
  1296       |                      const HCfavor_e favorDecSpeed)                                             | 18446     1
  1297       |{                                                                                                | 18447     1
  1298       |    LZ4HC_match_t match = { 0 , 0 };                                                             | 18448     1
  1299       |    const BYTE* matchPtr = NULL;                                                                 | 18449     1
  1299       +        const BYTE* matchPtr = ((void *)0);                                                      + 18449     1
  1300       |    /* note : LZ4HC_InsertAndGetWiderMatch() is able to modify the starting position of a match (| 18450     1
  1300       +*startpos),                                                                                      + 18450     1
  1301       |     * but this won't be the case here, as we define iLowLimit==ip,                              | 18451     1
  1302       |     * so LZ4HC_InsertAndGetWiderMatch() won't be allowed to search past ip */                   | 18452     1
  1303       |    int matchLength = LZ4HC_InsertAndGetWiderMatch(ctx, ip, ip, iHighLimit, minLen, &matchPtr, &i| 18453     1
  1303       +p, nbSearches, 1 /*patternAnalysis*/, 1 /*chainSwap*/, dict, favorDecSpeed);                     + 18453     1
  1304       |    if (matchLength <= minLen) return match;                                                     | 18454     1
  1305       |    if (favorDecSpeed) {                                                                         | 18455     1
  1306       |        if ((matchLength>18) & (matchLength<=36)) matchLength=18;   /* favor shortcut */         | 18456     1
  1307       |    }                                                                                            | 18457     1
  1308       |    match.len = matchLength;                                                                     | 18458     1
  1309       |    match.off = (int)(ip-matchPtr);                                                              | 18459     1
  1310       |    return match;                                                                                | 18460     1
  1311       |}                                                                                                | 18461     1
  1312       |                                                                                                 | 18462     1
  1313       |                                                                                                 | 18463     1
  1314       |static int LZ4HC_compress_optimal ( LZ4HC_CCtx_internal* ctx,                                    | 18464     1
  1315       |                                    const char* const source,                                    | 18465     1
  1316       |                                    char* dst,                                                   | 18466     1
  1317       |                                    int* srcSizePtr,                                             | 18467     1
  1318       |                                    int dstCapacity,                                             | 18468     1
  1319       |                                    int const nbSearches,                                        | 18469     1
  1320       |                                    size_t sufficient_len,                                       | 18470     1
  1321       |                                    const limitedOutput_directive limit,                         | 18471     1
  1322       |                                    int const fullUpdate,                                        | 18472     1
  1323       |                                    const dictCtx_directive dict,                                | 18473     1
  1324       |                                    const HCfavor_e favorDecSpeed)                               | 18474     1
  1325       |{                                                                                                | 18475     1
  1326       |    int retval = 0;                                                                              | 18476     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   370


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1327       |#define TRAILING_LITERALS 3                                                                      | 18477     1
  1328       |#ifdef LZ4HC_HEAPMODE                                                                            | 18478     1
  1329       |    LZ4HC_optimal_t* const opt = (LZ4HC_optimal_t*)ALLOC(sizeof(LZ4HC_optimal_t) * (LZ4_OPT_NUM +| 18479     1
  1329       + TRAILING_LITERALS));                                                                            + 18479     1
  1329       +        LZ4HC_optimal_t* const opt = (LZ4HC_optimal_t*)rd_kafka_mem_malloc(((void *)0), sizeof(LZ+ 18479     1
  1329       +4HC_optimal_t) * ((1<<12) + 3));                                                                 + 18479     1
  1330       |#else                                                                                            | 18480     1
  1331       |    LZ4HC_optimal_t opt[LZ4_OPT_NUM + TRAILING_LITERALS];   /* ~64 KB, which is a bit large for s| 18481     1
  1331       +tack... */                                                                                       + 18481     1
  1332       |#endif                                                                                           | 18482     1
  1333       |                                                                                                 | 18483     1
  1334       |    const BYTE* ip = (const BYTE*) source;                                                       | 18484     1
  1335       |    const BYTE* anchor = ip;                                                                     | 18485     1
  1336       |    const BYTE* const iend = ip + *srcSizePtr;                                                   | 18486     1
  1337       |    const BYTE* const mflimit = iend - MFLIMIT;                                                  | 18487     1
  1337       +        const BYTE* const mflimit = iend - 12;                                                   + 18487     1
  1338       |    const BYTE* const matchlimit = iend - LASTLITERALS;                                          | 18488     1
  1338       +        const BYTE* const matchlimit = iend - 5;                                                 + 18488     1
  1339       |    BYTE* op = (BYTE*) dst;                                                                      | 18489     1
  1340       |    BYTE* opSaved = (BYTE*) dst;                                                                 | 18490     1
  1341       |    BYTE* oend = op + dstCapacity;                                                               | 18491     1
  1342       |    int ovml = MINMATCH;  /* overflow - last sequence */                                         | 18492     1
  1342       +        int ovml = 4;                                                                            + 18492     1
  1343       |    const BYTE* ovref = NULL;                                                                    | 18493     1
  1343       +        const BYTE* ovref = ((void *)0);                                                         + 18493     1
  1344       |                                                                                                 | 18494     1
  1345       |    /* init */                                                                                   | 18495     1
  1346       |#ifdef LZ4HC_HEAPMODE                                                                            | 18496     1
  1347       |    if (opt == NULL) goto _return_label;                                                         | 18497     1
  1347       +        if (opt == ((void *)0)) goto _return_label;                                              + 18497     1
  1348       |#endif                                                                                           | 18498     1
  1349       |    DEBUGLOG(5, "LZ4HC_compress_optimal(dst=%p, dstCapa=%u)", dst, (unsigned)dstCapacity);       | 18499     1
  1349       +        {};                                                                                      + 18499     1
  1350       |    *srcSizePtr = 0;                                                                             | 18500     1
  1351       |    if (limit == fillOutput) oend -= LASTLITERALS;   /* Hack for support LZ4 format restriction *| 18501     1
  1351       +/                                                                                                + 18501     1
  1351       +        if (limit == fillOutput) oend -= 5;                                                      + 18501     1
  1352       |    if (sufficient_len >= LZ4_OPT_NUM) sufficient_len = LZ4_OPT_NUM-1;                           | 18502     1
  1352       +        if (sufficient_len >= (1<<12)) sufficient_len = (1<<12)-1;                               + 18502     1
  1353       |                                                                                                 | 18503     1
  1354       |    /* Main Loop */                                                                              | 18504     1
  1355       |    while (ip <= mflimit) {                                                                      | 18505     1
  1356       |         int const llen = (int)(ip - anchor);                                                    | 18506     1
  1357       |         int best_mlen, best_off;                                                                | 18507     1
  1358       |         int cur, last_match_pos = 0;                                                            | 18508     1
  1359       |                                                                                                 | 18509     1
  1360       |         LZ4HC_match_t const firstMatch = LZ4HC_FindLongerMatch(ctx, ip, matchlimit, MINMATCH-1, | 18510     1
  1360       +nbSearches, dict, favorDecSpeed);                                                                + 18510     1
  1360       +                  LZ4HC_match_t const firstMatch = LZ4HC_FindLongerMatch(ctx, ip, matchlimit, 4-1+ 18510     1
  1360       +, nbSearches, dict, favorDecSpeed);                                                              + 18510     1
  1361       |         if (firstMatch.len==0) { ip++; continue; }                                              | 18511     1
  1362       |                                                                                                 | 18512     1
  1363       |         if ((size_t)firstMatch.len > sufficient_len) {                                          | 18513     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   371


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1364       |             /* good enough solution : immediate encoding */                                     | 18514     1
  1365       |             int const firstML = firstMatch.len;                                                 | 18515     1
  1366       |             const BYTE* const matchPos = ip - firstMatch.off;                                   | 18516     1
  1367       |             opSaved = op;                                                                       | 18517     1
  1368       |             if ( LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), firstML, matchPos, limit, oend)| 18518     1
  1368       + ) {  /* updates ip, op and anchor */                                                            + 18518     1
  1368       +                          if ( LZ4HC_encodeSequence(&ip, &op, &anchor, firstML, matchPos, limit, + 18518     1
  1368       +oend) ) {                                                                                        + 18518     1
  1369       |                 ovml = firstML;                                                                 | 18519     1
  1370       |                 ovref = matchPos;                                                               | 18520     1
  1371       |                 goto _dest_overflow;                                                            | 18521     1
  1372       |             }                                                                                   | 18522     1
  1373       |             continue;                                                                           | 18523     1
  1374       |         }                                                                                       | 18524     1
  1375       |                                                                                                 | 18525     1
  1376       |         /* set prices for first positions (literals) */                                         | 18526     1
  1377       |         {   int rPos;                                                                           | 18527     1
  1378       |             for (rPos = 0 ; rPos < MINMATCH ; rPos++) {                                         | 18528     1
  1378       +                          for (rPos = 0 ; rPos < 4 ; rPos++) {                                   + 18528     1
  1379       |                 int const cost = LZ4HC_literalsPrice(llen + rPos);                              | 18529     1
  1380       |                 opt[rPos].mlen = 1;                                                             | 18530     1
  1381       |                 opt[rPos].off = 0;                                                              | 18531     1
  1382       |                 opt[rPos].litlen = llen + rPos;                                                 | 18532     1
  1383       |                 opt[rPos].price = cost;                                                         | 18533     1
  1384       |                 DEBUGLOG(7, "rPos:%3i => price:%3i (litlen=%i) -- initial setup",               | 18534     1
  1385       |                             rPos, cost, opt[rPos].litlen);                                      | 18535     1
  1385       +                                              {};                                                + 18535     1
  1386       |         }   }                                                                                   | 18536     1
  1387       |         /* set prices using initial match */                                                    | 18537     1
  1388       |         {   int mlen = MINMATCH;                                                                | 18538     1
  1388       +                  {   int mlen = 4;                                                              + 18538     1
  1389       |             int const matchML = firstMatch.len;   /* necessarily < sufficient_len < LZ4_OPT_NUM | 18539     1
  1389       +*/                                                                                               + 18539     1
  1390       |             int const offset = firstMatch.off;                                                  | 18540     1
  1391       |             assert(matchML < LZ4_OPT_NUM);                                                      | 18541     1
  1391       +                          ((void)0);                                                             + 18541     1
  1392       |             for ( ; mlen <= matchML ; mlen++) {                                                 | 18542     1
  1393       |                 int const cost = LZ4HC_sequencePrice(llen, mlen);                               | 18543     1
  1394       |                 opt[mlen].mlen = mlen;                                                          | 18544     1
  1395       |                 opt[mlen].off = offset;                                                         | 18545     1
  1396       |                 opt[mlen].litlen = llen;                                                        | 18546     1
  1397       |                 opt[mlen].price = cost;                                                         | 18547     1
  1398       |                 DEBUGLOG(7, "rPos:%3i => price:%3i (matchlen=%i) -- initial setup",             | 18548     1
  1399       |                             mlen, cost, mlen);                                                  | 18549     1
  1399       +                                              {};                                                + 18549     1
  1400       |         }   }                                                                                   | 18550     1
  1401       |         last_match_pos = firstMatch.len;                                                        | 18551     1
  1402       |         {   int addLit;                                                                         | 18552     1
  1403       |             for (addLit = 1; addLit <= TRAILING_LITERALS; addLit ++) {                          | 18553     1
  1403       +                          for (addLit = 1; addLit <= 3; addLit ++) {                             + 18553     1
  1404       |                 opt[last_match_pos+addLit].mlen = 1; /* literal */                              | 18554     1
  1405       |                 opt[last_match_pos+addLit].off = 0;                                             | 18555     1
  1406       |                 opt[last_match_pos+addLit].litlen = addLit;                                     | 18556     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   372


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1407       |                 opt[last_match_pos+addLit].price = opt[last_match_pos].price + LZ4HC_literalsPri| 18557     1
  1407       +ce(addLit);                                                                                      + 18557     1
  1408       |                 DEBUGLOG(7, "rPos:%3i => price:%3i (litlen=%i) -- initial setup",               | 18558     1
  1409       |                             last_match_pos+addLit, opt[last_match_pos+addLit].price, addLit);   | 18559     1
  1409       +                                              {};                                                + 18559     1
  1410       |         }   }                                                                                   | 18560     1
  1411       |                                                                                                 | 18561     1
  1412       |         /* check further positions */                                                           | 18562     1
  1413       |         for (cur = 1; cur < last_match_pos; cur++) {                                            | 18563     1
  1414       |             const BYTE* const curPtr = ip + cur;                                                | 18564     1
  1415       |             LZ4HC_match_t newMatch;                                                             | 18565     1
  1416       |                                                                                                 | 18566     1
  1417       |             if (curPtr > mflimit) break;                                                        | 18567     1
  1418       |             DEBUGLOG(7, "rPos:%u[%u] vs [%u]%u",                                                | 18568     1
  1419       |                     cur, opt[cur].price, opt[cur+1].price, cur+1);                              | 18569     1
  1419       +                                  {};                                                            + 18569     1
  1420       |             if (fullUpdate) {                                                                   | 18570     1
  1421       |                 /* not useful to search here if next position has same (or lower) cost */       | 18571     1
  1422       |                 if ( (opt[cur+1].price <= opt[cur].price)                                       | 18572     1
  1423       |                   /* in some cases, next position has same cost, but cost rises sharply after, s| 18573     1
  1423       +o a small match would still be beneficial */                                                     + 18573     1
  1424       |                   && (opt[cur+MINMATCH].price < opt[cur].price + 3/*min seq price*/) )          | 18574     1
  1424       +                                      && (opt[cur+4].price < opt[cur].price + 3) )               + 18574     1
  1425       |                     continue;                                                                   | 18575     1
  1426       |             } else {                                                                            | 18576     1
  1427       |                 /* not useful to search here if next position has same (or lower) cost */       | 18577     1
  1428       |                 if (opt[cur+1].price <= opt[cur].price) continue;                               | 18578     1
  1429       |             }                                                                                   | 18579     1
  1430       |                                                                                                 | 18580     1
  1431       |             DEBUGLOG(7, "search at rPos:%u", cur);                                              | 18581     1
  1431       +                          {};                                                                    + 18581     1
  1432       |             if (fullUpdate)                                                                     | 18582     1
  1433       |                 newMatch = LZ4HC_FindLongerMatch(ctx, curPtr, matchlimit, MINMATCH-1, nbSearches| 18583     1
  1433       +, dict, favorDecSpeed);                                                                          + 18583     1
  1433       +                                  newMatch = LZ4HC_FindLongerMatch(ctx, curPtr, matchlimit, 4-1, + 18583     1
  1433       +nbSearches, dict, favorDecSpeed);                                                                + 18583     1
  1434       |             else                                                                                | 18584     1
  1435       |                 /* only test matches of minimum length; slightly faster, but misses a few bytes | 18585     1
  1435       +*/                                                                                               + 18585     1
  1436       |                 newMatch = LZ4HC_FindLongerMatch(ctx, curPtr, matchlimit, last_match_pos - cur, | 18586     1
  1436       +nbSearches, dict, favorDecSpeed);                                                                + 18586     1
  1437       |             if (!newMatch.len) continue;                                                        | 18587     1
  1438       |                                                                                                 | 18588     1
  1439       |             if ( ((size_t)newMatch.len > sufficient_len)                                        | 18589     1
  1440       |               || (newMatch.len + cur >= LZ4_OPT_NUM) ) {                                        | 18590     1
  1440       +                              || (newMatch.len + cur >= (1<<12)) ) {                             + 18590     1
  1441       |                 /* immediate encoding */                                                        | 18591     1
  1442       |                 best_mlen = newMatch.len;                                                       | 18592     1
  1443       |                 best_off = newMatch.off;                                                        | 18593     1
  1444       |                 last_match_pos = cur + 1;                                                       | 18594     1
  1445       |                 goto encode;                                                                    | 18595     1
  1446       |             }                                                                                   | 18596     1
  1447       |                                                                                                 | 18597     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   373


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1448       |             /* before match : set price with literals at beginning */                           | 18598     1
  1449       |             {   int const baseLitlen = opt[cur].litlen;                                         | 18599     1
  1450       |                 int litlen;                                                                     | 18600     1
  1451       |                 for (litlen = 1; litlen < MINMATCH; litlen++) {                                 | 18601     1
  1451       +                                  for (litlen = 1; litlen < 4; litlen++) {                       + 18601     1
  1452       |                     int const price = opt[cur].price - LZ4HC_literalsPrice(baseLitlen) + LZ4HC_l| 18602     1
  1452       +iteralsPrice(baseLitlen+litlen);                                                                 + 18602     1
  1453       |                     int const pos = cur + litlen;                                               | 18603     1
  1454       |                     if (price < opt[pos].price) {                                               | 18604     1
  1455       |                         opt[pos].mlen = 1; /* literal */                                        | 18605     1
  1456       |                         opt[pos].off = 0;                                                       | 18606     1
  1457       |                         opt[pos].litlen = baseLitlen+litlen;                                    | 18607     1
  1458       |                         opt[pos].price = price;                                                 | 18608     1
  1459       |                         DEBUGLOG(7, "rPos:%3i => price:%3i (litlen=%i)",                        | 18609     1
  1460       |                                     pos, price, opt[pos].litlen);                               | 18610     1
  1460       +                                                              {};                                + 18610     1
  1461       |             }   }   }                                                                           | 18611     1
  1462       |                                                                                                 | 18612     1
  1463       |             /* set prices using match at position = cur */                                      | 18613     1
  1464       |             {   int const matchML = newMatch.len;                                               | 18614     1
  1465       |                 int ml = MINMATCH;                                                              | 18615     1
  1465       +                                  int ml = 4;                                                    + 18615     1
  1466       |                                                                                                 | 18616     1
  1467       |                 assert(cur + newMatch.len < LZ4_OPT_NUM);                                       | 18617     1
  1467       +                                  ((void)0);                                                     + 18617     1
  1468       |                 for ( ; ml <= matchML ; ml++) {                                                 | 18618     1
  1469       |                     int const pos = cur + ml;                                                   | 18619     1
  1470       |                     int const offset = newMatch.off;                                            | 18620     1
  1471       |                     int price;                                                                  | 18621     1
  1472       |                     int ll;                                                                     | 18622     1
  1473       |                     DEBUGLOG(7, "testing price rPos %i (last_match_pos=%i)",                    | 18623     1
  1474       |                                 pos, last_match_pos);                                           | 18624     1
  1474       +                                                      {};                                        + 18624     1
  1475       |                     if (opt[cur].mlen == 1) {                                                   | 18625     1
  1476       |                         ll = opt[cur].litlen;                                                   | 18626     1
  1477       |                         price = ((cur > ll) ? opt[cur - ll].price : 0)                          | 18627     1
  1478       |                               + LZ4HC_sequencePrice(ll, ml);                                    | 18628     1
  1479       |                     } else {                                                                    | 18629     1
  1480       |                         ll = 0;                                                                 | 18630     1
  1481       |                         price = opt[cur].price + LZ4HC_sequencePrice(0, ml);                    | 18631     1
  1482       |                     }                                                                           | 18632     1
  1483       |                                                                                                 | 18633     1
  1484       |                    assert((U32)favorDecSpeed <= 1);                                             | 18634     1
  1484       +                                        ((void)0);                                               + 18634     1
  1485       |                     if (pos > last_match_pos+TRAILING_LITERALS                                  | 18635     1
  1485       +                                          if (pos > last_match_pos+3                             + 18635     1
  1486       |                      || price <= opt[pos].price - (int)favorDecSpeed) {                         | 18636     1
  1487       |                         DEBUGLOG(7, "rPos:%3i => price:%3i (matchlen=%i)",                      | 18637     1
  1488       |                                     pos, price, ml);                                            | 18638     1
  1488       +                                                              {};                                + 18638     1
  1489       |                         assert(pos < LZ4_OPT_NUM);                                              | 18639     1
  1489       +                                                  ((void)0);                                     + 18639     1
  1490       |                         if ( (ml == matchML)  /* last pos of last match */                      | 18640     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   374


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1491       |                           && (last_match_pos < pos) )                                           | 18641     1
  1492       |                             last_match_pos = pos;                                               | 18642     1
  1493       |                         opt[pos].mlen = ml;                                                     | 18643     1
  1494       |                         opt[pos].off = offset;                                                  | 18644     1
  1495       |                         opt[pos].litlen = ll;                                                   | 18645     1
  1496       |                         opt[pos].price = price;                                                 | 18646     1
  1497       |             }   }   }                                                                           | 18647     1
  1498       |             /* complete following positions with literals */                                    | 18648     1
  1499       |             {   int addLit;                                                                     | 18649     1
  1500       |                 for (addLit = 1; addLit <= TRAILING_LITERALS; addLit ++) {                      | 18650     1
  1500       +                                  for (addLit = 1; addLit <= 3; addLit ++) {                     + 18650     1
  1501       |                     opt[last_match_pos+addLit].mlen = 1; /* literal */                          | 18651     1
  1502       |                     opt[last_match_pos+addLit].off = 0;                                         | 18652     1
  1503       |                     opt[last_match_pos+addLit].litlen = addLit;                                 | 18653     1
  1504       |                     opt[last_match_pos+addLit].price = opt[last_match_pos].price + LZ4HC_literal| 18654     1
  1504       +sPrice(addLit);                                                                                  + 18654     1
  1505       |                     DEBUGLOG(7, "rPos:%3i => price:%3i (litlen=%i)", last_match_pos+addLit, opt[| 18655     1
  1505       +last_match_pos+addLit].price, addLit);                                                           + 18655     1
  1505       +                                          {};                                                    + 18655     1
  1506       |             }   }                                                                               | 18656     1
  1507       |         }  /* for (cur = 1; cur <= last_match_pos; cur++) */                                    | 18657     1
  1508       |                                                                                                 | 18658     1
  1509       |         assert(last_match_pos < LZ4_OPT_NUM + TRAILING_LITERALS);                               | 18659     1
  1509       +                  ((void)0);                                                                     + 18659     1
  1510       |         best_mlen = opt[last_match_pos].mlen;                                                   | 18660     1
  1511       |         best_off = opt[last_match_pos].off;                                                     | 18661     1
  1512       |         cur = last_match_pos - best_mlen;                                                       | 18662     1
  1513       |                                                                                                 | 18663     1
  1514       |encode: /* cur, last_match_pos, best_mlen, best_off must be set */                               | 18664     1
  1515       |         assert(cur < LZ4_OPT_NUM);                                                              | 18665     1
  1515       +                  ((void)0);                                                                     + 18665     1
  1516       |         assert(last_match_pos >= 1);  /* == 1 when only one candidate */                        | 18666     1
  1516       +                  ((void)0);                                                                     + 18666     1
  1517       |         DEBUGLOG(6, "reverse traversal, looking for shortest path (last_match_pos=%i)", last_mat| 18667     1
  1517       +ch_pos);                                                                                         + 18667     1
  1517       +                  {};                                                                            + 18667     1
  1518       |         {   int candidate_pos = cur;                                                            | 18668     1
  1519       |             int selected_matchLength = best_mlen;                                               | 18669     1
  1520       |             int selected_offset = best_off;                                                     | 18670     1
  1521       |             while (1) {  /* from end to beginning */                                            | 18671     1
  1522       |                 int const next_matchLength = opt[candidate_pos].mlen;  /* can be 1, means litera| 18672     1
  1522       +l */                                                                                             + 18672     1
  1523       |                 int const next_offset = opt[candidate_pos].off;                                 | 18673     1
  1524       |                 DEBUGLOG(7, "pos %i: sequence length %i", candidate_pos, selected_matchLength); | 18674     1
  1524       +                                  {};                                                            + 18674     1
  1525       |                 opt[candidate_pos].mlen = selected_matchLength;                                 | 18675     1
  1526       |                 opt[candidate_pos].off = selected_offset;                                       | 18676     1
  1527       |                 selected_matchLength = next_matchLength;                                        | 18677     1
  1528       |                 selected_offset = next_offset;                                                  | 18678     1
  1529       |                 if (next_matchLength > candidate_pos) break; /* last match elected, first match | 18679     1
  1529       +to encode */                                                                                     + 18679     1
  1530       |                 assert(next_matchLength > 0);  /* can be 1, means literal */                    | 18680     1
  1530       +                                  ((void)0);                                                     + 18680     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   375


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1531       |                 candidate_pos -= next_matchLength;                                              | 18681     1
  1532       |         }   }                                                                                   | 18682     1
  1533       |                                                                                                 | 18683     1
  1534       |         /* encode all recorded sequences in order */                                            | 18684     1
  1535       |         {   int rPos = 0;  /* relative position (to ip) */                                      | 18685     1
  1536       |             while (rPos < last_match_pos) {                                                     | 18686     1
  1537       |                 int const ml = opt[rPos].mlen;                                                  | 18687     1
  1538       |                 int const offset = opt[rPos].off;                                               | 18688     1
  1539       |                 if (ml == 1) { ip++; rPos++; continue; }  /* literal; note: can end up with seve| 18689     1
  1539       +ral literals, in which case, skip them */                                                        + 18689     1
  1540       |                 rPos += ml;                                                                     | 18690     1
  1541       |                 assert(ml >= MINMATCH);                                                         | 18691     1
  1541       +                                  ((void)0);                                                     + 18691     1
  1542       |                 assert((offset >= 1) && (offset <= LZ4_DISTANCE_MAX));                          | 18692     1
  1542       +                                  ((void)0);                                                     + 18692     1
  1543       |                 opSaved = op;                                                                   | 18693     1
  1544       |                 if ( LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ml, ip - offset, limit, oen| 18694     1
  1544       +d) ) {  /* updates ip, op and anchor */                                                          + 18694     1
  1544       +                                  if ( LZ4HC_encodeSequence(&ip, &op, &anchor, ml, ip - offset, l+ 18694     1
  1544       +imit, oend) ) {                                                                                  + 18694     1
  1545       |                     ovml = ml;                                                                  | 18695     1
  1546       |                     ovref = ip - offset;                                                        | 18696     1
  1547       |                     goto _dest_overflow;                                                        | 18697     1
  1548       |         }   }   }                                                                               | 18698     1
  1549       |     }  /* while (ip <= mflimit) */                                                              | 18699     1
  1550       |                                                                                                 | 18700     1
  1551       |_last_literals:                                                                                  | 18701     1
  1552       |     /* Encode Last Literals */                                                                  | 18702     1
  1553       |     {   size_t lastRunSize = (size_t)(iend - anchor);  /* literals */                           | 18703     1
  1554       |         size_t llAdd = (lastRunSize + 255 - RUN_MASK) / 255;                                    | 18704     1
  1554       +                  size_t llAdd = (lastRunSize + 255 - ((1U<<(8-4))-1)) / 255;                    + 18704     1
  1555       |         size_t const totalSize = 1 + llAdd + lastRunSize;                                       | 18705     1
  1556       |         if (limit == fillOutput) oend += LASTLITERALS;  /* restore correct value */             | 18706     1
  1556       +                  if (limit == fillOutput) oend += 5;                                            + 18706     1
  1557       |         if (limit && (op + totalSize > oend)) {                                                 | 18707     1
  1558       |             if (limit == limitedOutput) { /* Check output limit */                              | 18708     1
  1559       |                retval = 0;                                                                      | 18709     1
  1560       |                goto _return_label;                                                              | 18710     1
  1561       |             }                                                                                   | 18711     1
  1562       |             /* adapt lastRunSize to fill 'dst' */                                               | 18712     1
  1563       |             lastRunSize  = (size_t)(oend - op) - 1 /*token*/;                                   | 18713     1
  1564       |             llAdd = (lastRunSize + 256 - RUN_MASK) / 256;                                       | 18714     1
  1564       +                          llAdd = (lastRunSize + 256 - ((1U<<(8-4))-1)) / 256;                   + 18714     1
  1565       |             lastRunSize -= llAdd;                                                               | 18715     1
  1566       |         }                                                                                       | 18716     1
  1567       |         DEBUGLOG(6, "Final literal run : %i literals", (int)lastRunSize);                       | 18717     1
  1567       +                  {};                                                                            + 18717     1
  1568       |         ip = anchor + lastRunSize; /* can be != iend if limit==fillOutput */                    | 18718     1
  1569       |                                                                                                 | 18719     1
  1570       |         if (lastRunSize >= RUN_MASK) {                                                          | 18720     1
  1570       +                  if (lastRunSize >= ((1U<<(8-4))-1)) {                                          + 18720     1
  1571       |             size_t accumulator = lastRunSize - RUN_MASK;                                        | 18721     1
  1571       +                          size_t accumulator = lastRunSize - ((1U<<(8-4))-1);                    + 18721     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   376


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1572       |             *op++ = (RUN_MASK << ML_BITS);                                                      | 18722     1
  1572       +                          *op++ = (((1U<<(8-4))-1) << 4);                                        + 18722     1
  1573       |             for(; accumulator >= 255 ; accumulator -= 255) *op++ = 255;                         | 18723     1
  1574       |             *op++ = (BYTE) accumulator;                                                         | 18724     1
  1575       |         } else {                                                                                | 18725     1
  1576       |             *op++ = (BYTE)(lastRunSize << ML_BITS);                                             | 18726     1
  1576       +                          *op++ = (BYTE)(lastRunSize << 4);                                      + 18726     1
  1577       |         }                                                                                       | 18727     1
  1578       |         memcpy(op, anchor, lastRunSize);                                                        | 18728     1
  1578       +                  __memcpy(op,anchor,lastRunSize);                                               + 18728     1
  1579       |         op += lastRunSize;                                                                      | 18729     1
  1580       |     }                                                                                           | 18730     1
  1581       |                                                                                                 | 18731     1
  1582       |     /* End */                                                                                   | 18732     1
  1583       |     *srcSizePtr = (int) (((const char*)ip) - source);                                           | 18733     1
  1584       |     retval = (int) ((char*)op-dst);                                                             | 18734     1
  1585       |     goto _return_label;                                                                         | 18735     1
  1586       |                                                                                                 | 18736     1
  1587       |_dest_overflow:                                                                                  | 18737     1
  1588       |if (limit == fillOutput) {                                                                       | 18738     1
  1589       |     /* Assumption : ip, anchor, ovml and ovref must be set correctly */                         | 18739     1
  1590       |     size_t const ll = (size_t)(ip - anchor);                                                    | 18740     1
  1591       |     size_t const ll_addbytes = (ll + 240) / 255;                                                | 18741     1
  1592       |     size_t const ll_totalCost = 1 + ll_addbytes + ll;                                           | 18742     1
  1593       |     BYTE* const maxLitPos = oend - 3; /* 2 for offset, 1 for token */                           | 18743     1
  1594       |     DEBUGLOG(6, "Last sequence overflowing (only %i bytes remaining)", (int)(oend-1-opSaved));  | 18744     1
  1594       +          {};                                                                                    + 18744     1
  1595       |     op = opSaved;  /* restore correct out pointer */                                            | 18745     1
  1596       |     if (op + ll_totalCost <= maxLitPos) {                                                       | 18746     1
  1597       |         /* ll validated; now adjust match length */                                             | 18747     1
  1598       |         size_t const bytesLeftForMl = (size_t)(maxLitPos - (op+ll_totalCost));                  | 18748     1
  1599       |         size_t const maxMlSize = MINMATCH + (ML_MASK-1) + (bytesLeftForMl * 255);               | 18749     1
  1599       +                  size_t const maxMlSize = 4 + (((1U<<4)-1)-1) + (bytesLeftForMl * 255);         + 18749     1
  1600       |         assert(maxMlSize < INT_MAX); assert(ovml >= 0);                                         | 18750     1
  1600       +                  ((void)0); ((void)0);                                                          + 18750     1
  1601       |         if ((size_t)ovml > maxMlSize) ovml = (int)maxMlSize;                                    | 18751     1
  1602       |         if ((oend + LASTLITERALS) - (op + ll_totalCost + 2) - 1 + ovml >= MFLIMIT) {            | 18752     1
  1602       +                  if ((oend + 5) - (op + ll_totalCost + 2) - 1 + ovml >= 12) {                   + 18752     1
  1603       |             DEBUGLOG(6, "Space to end : %i + ml (%i)", (int)((oend + LASTLITERALS) - (op + ll_to| 18753     1
  1603       +talCost + 2) - 1), ovml);                                                                        + 18753     1
  1603       +                          {};                                                                    + 18753     1
  1604       |             DEBUGLOG(6, "Before : ip = %p, anchor = %p", ip, anchor);                           | 18754     1
  1604       +                          {};                                                                    + 18754     1
  1605       |             LZ4HC_encodeSequence(UPDATABLE(ip, op, anchor), ovml, ovref, notLimited, oend);     | 18755     1
  1605       +                          LZ4HC_encodeSequence(&ip, &op, &anchor, ovml, ovref, notLimited, oend);+ 18755     1
  1606       |             DEBUGLOG(6, "After : ip = %p, anchor = %p", ip, anchor);                            | 18756     1
  1606       +                          {};                                                                    + 18756     1
  1607       |     }   }                                                                                       | 18757     1
  1608       |     goto _last_literals;                                                                        | 18758     1
  1609       |}                                                                                                | 18759     1
  1610       |_return_label:                                                                                   | 18760     1
  1611       |#ifdef LZ4HC_HEAPMODE                                                                            | 18761     1
  1612       |     FREEMEM(opt);                                                                               | 18762     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   377


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
  1612       +          rd_kafka_mem_free(((void *)0), opt);                                                   + 18762     1
  1613       |#endif                                                                                           | 18763     1
  1614       |     return retval;                                                                              | 18764     1
  1615       |}                                                                                                | 18765     1
                                     * * * * *   E N D   O F   S O U R C E   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   378


                         * * * * *   F I L E S   * * * * *

         FILES  ---  FILE#   NAME

                        1   C:\asgkafka\librdkafka\src\lz4hc.c
                        2   C:\asgkafka\librdkafka\src\sysc.h
                        3   C:\dignus\include\sys\types.h
                        4   C:\dignus\include\sys\cdefs.h
                        5   C:\dignus\include\machine\endian.h
                        6   C:\dignus\include\sys\_types.h
                        7   C:\dignus\include\machine\_types.h
                        8   C:\dignus\include\sys\_pthreadtypes.h
                        9   C:\dignus\include\sys\select.h
                       10   C:\dignus\include\sys\_sigset.h
                       11   C:\dignus\include\sys\_timeval.h
                       12   C:\dignus\include\sys\timespec.h
                       13   C:\dignus\include\unistd.h
                       14   C:\dignus\include\sys\unistd.h
                       15   C:\dignus\include\sys\_null.h
                       16   C:\dignus\include\time.h
                       17   C:\dignus\include\sys\time.h
                       18   C:\asgkafka\librdkafka\src\lz4hc.h
                       19   C:\asgkafka\librdkafka\src\lz4.h
                       20   C:\dignus\include\stddef.h
                       21   C:\dignus\include\stdint.h
                       22   C:\dignus\include\machine\_stdint.h
                       23   C:\asgkafka\librdkafka\src\lz4.c
                       24   C:\dignus\include\string.h
                       25   C:\dignus\include\strings.h
                       26   C:\dignus\include\limits.h
                       27   C:\dignus\include\sys\limits.h
                       28   C:\dignus\include\machine\_limits.h
                       29   C:\dignus\include\sys\syslimits.h

                         * * * * *   E N D   O F   F I L E S   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   379


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *


===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __mbstate8[128]                                                                         |
|       0           |       8           | _mbstateL                                                                               |
|       8           |     120           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_attr                                                         Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_attr                                                 Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __i[16]                                                                                 |
|       0           |      64           | __vi[16]                                                                                |
|       0           |      64           | __s[8]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_mutex                                                        Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      40           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_mutex                                                Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   380


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |      40           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      40           | __i[10]                                                                                 |
|       0           |      40           | __vi[10]                                                                                |
|       0           |      40           | __p[5]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_cond                                                         Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_cond                                                 Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __i[12]                                                                                 |
|       0           |      48           | __vi[12]                                                                                |
|       0           |      48           | __p[6]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_rwlock                                                       Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_rwlock                                               Total size: 56 bytes             |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   381


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __i[14]                                                                                 |
|       0           |      56           | __vi[14]                                                                                |
|       0           |      56           | __p[7]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_barrier                                                      Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_barrier                                              Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __i[8]                                                                                  |
|       0           |      32           | __vi[8]                                                                                 |
|       0           |      32           | __p[4]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   382


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *


===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __i[14]                                                                                 |
|       0           |      56           | __vi[14]                                                                                |
|       0           |      56           | __p[7]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __attr[2]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __sigset                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   383


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __sigset                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct timeval                                                              Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_usec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct timeval                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_usec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct timespec                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_nsec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct timespec                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_nsec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __sigset_t                                                           Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   384


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __sigset_t                                                   Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct fd_set                                                               Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct fd_set                                                       Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct fd_set                                                               Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct fd_set                                                       Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigset_t                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   385


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigset_t                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct tm                                                                   Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tm_sec                                                                                  |
|       4           |       4           | tm_min                                                                                  |
|       8           |       4           | tm_hour                                                                                 |
|      12           |       4           | tm_mday                                                                                 |
|      16           |       4           | tm_mon                                                                                  |
|      20           |       4           | tm_year                                                                                 |
|      24           |       4           | tm_wday                                                                                 |
|      28           |       4           | tm_yday                                                                                 |
|      32           |       4           | tm_isdst                                                                                |
|      36           |       4           | ***PADDING***                                                                           |
|      40           |       8           | tm_gmtoff                                                                               |
|      48           |       8           | tm_zone                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct tm                                                           Total size: 52 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tm_sec                                                                                  |
|       4           |       4           | tm_min                                                                                  |
|       8           |       4           | tm_hour                                                                                 |
|      12           |       4           | tm_mday                                                                                 |
|      16           |       4           | tm_mon                                                                                  |
|      20           |       4           | tm_year                                                                                 |
|      24           |       4           | tm_wday                                                                                 |
|      28           |       4           | tm_yday                                                                                 |
|      32           |       4           | tm_isdst                                                                                |
|      36           |       8           | tm_gmtoff                                                                               |
|      44           |       8           | tm_zone                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct timezone                                                             Total size: 8 bytes              |
|=================================================================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   386


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tz_minuteswest                                                                          |
|       4           |       4           | tz_dsttime                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct timezone                                                     Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tz_minuteswest                                                                          |
|       4           |       4           | tz_dsttime                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct bintime                                                              Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | sec                                                                                     |
|       8           |       8           | frac                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct bintime                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | sec                                                                                     |
|       8           |       8           | frac                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct itimerval                                                            Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | it_interval                                                                             |
|      16           |      16           | it_value                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct itimerval                                                    Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | it_interval                                                                             |
|      16           |      16           | it_value                                                                                |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   387


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct clockinfo                                                            Total size: 20 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | hz                                                                                      |
|       4           |       4           | tick                                                                                    |
|       8           |       4           | spare                                                                                   |
|      12           |       4           | stathz                                                                                  |
|      16           |       4           | profhz                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct clockinfo                                                    Total size: 20 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | hz                                                                                      |
|       4           |       4           | tick                                                                                    |
|       8           |       4           | spare                                                                                   |
|      12           |       4           | stathz                                                                                  |
|      16           |       4           | profhz                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4_stream_t_internal                                                Total size: 16416 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16384           | hashTable[4096]                                                                         |
|   16384           |       4           | currentOffset                                                                           |
|   16388           |       4           | tableType                                                                               |
|   16392           |       8           | dictionary                                                                              |
|   16400           |       8           | dictCtx                                                                                 |
|   16408           |       4           | dictSize                                                                                |
|   16412           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4_stream_t_internal                                        Total size: 16412 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16384           | hashTable[4096]                                                                         |
|   16384           |       4           | currentOffset                                                                           |
|   16388           |       4           | tableType                                                                               |
|   16392           |       8           | dictionary                                                                              |
|   16400           |       8           | dictCtx                                                                                 |
|   16408           |       4           | dictSize                                                                                |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   388


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | externalDict                                                                            |
|       8           |       8           | extDictSize                                                                             |
|      16           |       8           | prefixEnd                                                                               |
|      24           |       8           | prefixSize                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union LZ4_stream_u                                                          Total size: 16416 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16416           | table[2052]                                                                             |
|       0           |   16416           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union LZ4_stream_u                                                  Total size: 16416 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16416           | table[2052]                                                                             |
|       0           |   16416           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4_stream_t_internal                                                Total size: 16416 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16384           | hashTable[4096]                                                                         |
|   16384           |       4           | currentOffset                                                                           |
|   16388           |       4           | tableType                                                                               |
|   16392           |       8           | dictionary                                                                              |
|   16400           |       8           | dictCtx                                                                                 |
|   16408           |       4           | dictSize                                                                                |
|   16412           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4_stream_t_internal                                        Total size: 16412 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   389


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|       0           |   16384           | hashTable[4096]                                                                         |
|   16384           |       4           | currentOffset                                                                           |
|   16388           |       4           | tableType                                                                               |
|   16392           |       8           | dictionary                                                                              |
|   16400           |       8           | dictCtx                                                                                 |
|   16408           |       4           | dictSize                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union LZ4_stream_t                                                          Total size: 16416 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16416           | table[2052]                                                                             |
|       0           |   16416           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union LZ4_stream_t                                                  Total size: 16416 bytes          |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |   16416           | table[2052]                                                                             |
|       0           |   16416           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union LZ4_streamDecode_u                                                    Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | table[4]                                                                                |
|       0           |      32           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union LZ4_streamDecode_u                                            Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | table[4]                                                                                |
|       0           |      32           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4_streamDecode_t_internal                                          Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | externalDict                                                                            |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   390


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|       8           |       8           | extDictSize                                                                             |
|      16           |       8           | prefixEnd                                                                               |
|      24           |       8           | prefixSize                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4_streamDecode_t_internal                                  Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | externalDict                                                                            |
|       8           |       8           | extDictSize                                                                             |
|      16           |       8           | prefixEnd                                                                               |
|      24           |       8           | prefixSize                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union LZ4_streamDecode_t                                                    Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | table[4]                                                                                |
|       0           |      32           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union LZ4_streamDecode_t                                            Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | table[4]                                                                                |
|       0           |      32           | internal_donotuse                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4HC_CCtx_internal                                                  Total size: 262192 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  131072           | hashTable[32768]                                                                        |
|  131072           |  131072           | chainTable[65536]                                                                       |
|  262144           |       8           | end                                                                                     |
|  262152           |       8           | base                                                                                    |
|  262160           |       8           | dictBase                                                                                |
|  262168           |       4           | dictLimit                                                                               |
|  262172           |       4           | lowLimit                                                                                |
|  262176           |       4           | nextToUpdate                                                                            |
|  262180           |       2           | compressionLevel                                                                        |
|  262182           |       1           | favorDecSpeed                                                                           |
|  262183           |       1           | dirty                                                                                   |
|  262184           |       8           | dictCtx                                                                                 |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   391


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4HC_CCtx_internal                                          Total size: 262192 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  131072           | hashTable[32768]                                                                        |
|  131072           |  131072           | chainTable[65536]                                                                       |
|  262144           |       8           | end                                                                                     |
|  262152           |       8           | base                                                                                    |
|  262160           |       8           | dictBase                                                                                |
|  262168           |       4           | dictLimit                                                                               |
|  262172           |       4           | lowLimit                                                                                |
|  262176           |       4           | nextToUpdate                                                                            |
|  262180           |       2           | compressionLevel                                                                        |
|  262182           |       1           | favorDecSpeed                                                                           |
|  262183           |       1           | dirty                                                                                   |
|  262184           |       8           | dictCtx                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union LZ4_streamHC_u                                                        Total size: 262200 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  262200           | table[32775]                                                                            |
|       0           |  262192           | internal_donotuse                                                                       |
|  262192           |       8           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union LZ4_streamHC_u                                                Total size: 262200 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  262200           | table[32775]                                                                            |
|       0           |  262192           | internal_donotuse                                                                       |
|  262192           |       8           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4HC_CCtx_internal                                                  Total size: 262192 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  131072           | hashTable[32768]                                                                        |
|  131072           |  131072           | chainTable[65536]                                                                       |
|  262144           |       8           | end                                                                                     |
|  262152           |       8           | base                                                                                    |
|  262160           |       8           | dictBase                                                                                |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   392


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|  262168           |       4           | dictLimit                                                                               |
|  262172           |       4           | lowLimit                                                                                |
|  262176           |       4           | nextToUpdate                                                                            |
|  262180           |       2           | compressionLevel                                                                        |
|  262182           |       1           | favorDecSpeed                                                                           |
|  262183           |       1           | dirty                                                                                   |
|  262184           |       8           | dictCtx                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4HC_CCtx_internal                                          Total size: 262192 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  131072           | hashTable[32768]                                                                        |
|  131072           |  131072           | chainTable[65536]                                                                       |
|  262144           |       8           | end                                                                                     |
|  262152           |       8           | base                                                                                    |
|  262160           |       8           | dictBase                                                                                |
|  262168           |       4           | dictLimit                                                                               |
|  262172           |       4           | lowLimit                                                                                |
|  262176           |       4           | nextToUpdate                                                                            |
|  262180           |       2           | compressionLevel                                                                        |
|  262182           |       1           | favorDecSpeed                                                                           |
|  262183           |       1           | dirty                                                                                   |
|  262184           |       8           | dictCtx                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union LZ4_streamHC_t                                                        Total size: 262200 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  262200           | table[32775]                                                                            |
|       0           |  262192           | internal_donotuse                                                                       |
|  262192           |       8           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union LZ4_streamHC_t                                                Total size: 262200 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |  262200           | table[32775]                                                                            |
|       0           |  262192           | internal_donotuse                                                                       |
|  262192           |       8           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   393


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | u                                                                                       |
|       0           |       4           | c[4]                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | strat                                                                                   |
|       4           |       4           | nbSearches                                                                              |
|       8           |       4           | targetLength                                                                            |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct cParams_t                                                            Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | strat                                                                                   |
|       4           |       4           | nbSearches                                                                              |
|       8           |       4           | targetLength                                                                            |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct cParams_t                                                    Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | strat                                                                                   |
|       4           |       4           | nbSearches                                                                              |
|       8           |       4           | targetLength                                                                            |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 262208 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       1           | c                                                                                       |
|       1           |       7           | ***PADDING***                                                                           |
|       8           |  262200           | t                                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct t_a                                                                  Total size: 262208 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   394


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |       1           | c                                                                                       |
|       1           |       7           | ***PADDING***                                                                           |
|       8           |  262200           | t                                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct t_a                                                          Total size: 262201 bytes         |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       1           | c                                                                                       |
|       1           |  262200           | t                                                                                       |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | price                                                                                   |
|       4           |       4           | off                                                                                     |
|       8           |       4           | mlen                                                                                    |
|      12           |       4           | litlen                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | off                                                                                     |
|       4           |       4           | len                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4HC_match_t                                                        Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | off                                                                                     |
|       4           |       4           | len                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4HC_match_t                                                Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | off                                                                                     |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   395


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|       4           |       4           | len                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct LZ4HC_optimal_t                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | price                                                                                   |
|       4           |       4           | off                                                                                     |
|       8           |       4           | mlen                                                                                    |
|      12           |       4           | litlen                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct LZ4HC_optimal_t                                              Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | price                                                                                   |
|       4           |       4           | off                                                                                     |
|       8           |       4           | mlen                                                                                    |
|      12           |       4           | litlen                                                                                  |
===================================================================================================================================
                           * * * * *   E N D   O F   S T R U C T U R E   M A P S   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   396

                               * * * * *   S T O R A G E   O F F S E T   L I S T I N G   * * * * *

IDENTIFIER          DEFINITION      ATTRIBUTES

E2U                 7579-2:29       Class = static,              Location = 0 + WSA + Q(@STATIC),              Length = 256

U2E                 7612-2:62       Class = static,              Location = 256 + WSA + Q(@STATIC),            Length = 256

LZ4_minLength       13595-23:224    Class = static,              Location = 0 + CSECT @STATIC,                 Length = 4

ptr                 13638-23:267    Class = parameter,           Location = 0(r1),                             Length = 8

alignment           13638-23:267    Class = parameter,           Location = 8(r1),                             Length = 8

one                 15048-23:330    Class = automatic,           Location = 168(r13),                          Length = 4

memPtr              15078-23:360    Class = parameter,           Location = 0(r1),                             Length = 8

val                 15080-23:362    Class = automatic,           Location = 168(r13),                          Length = 2

memPtr              15083-23:365    Class = parameter,           Location = 0(r1),                             Length = 8

val                 15085-23:367    Class = automatic,           Location = 168(r13),                          Length = 4

memPtr              15088-23:370    Class = parameter,           Location = 0(r1),                             Length = 8

val                 15090-23:372    Class = automatic,           Location = 168(r13),                          Length = 8

memPtr              15093-23:375    Class = parameter,           Location = 0(r1),                             Length = 8

value               15093-23:375    Class = parameter,           Location = 14(r1),                            Length = 2

memPtr              15116-23:398    Class = parameter,           Location = 0(r1),                             Length = 8

value               15116-23:398    Class = parameter,           Location = 14(r1),                            Length = 2

p                   15121-23:403    Class = automatic,           Location = 168(r13),                          Length = 8

dstPtr              15129-23:411    Class = parameter,           Location = 0(r1),                             Length = 8

srcPtr              15129-23:411    Class = parameter,           Location = 8(r1),                             Length = 8

dstEnd              15129-23:411    Class = parameter,           Location = 16(r1),                            Length = 8

d                   15131-23:413    Class = automatic,           Location = 168(r13),                          Length = 8

s                   15132-23:414    Class = automatic,           Location = 168(r13),                          Length = 8

e                   15133-23:415    Class = automatic,           Location = 168(r13),                          Length = 8

inc32table          15138-23:420    Class = static,              Location = 4 + CSECT @STATIC,                 Length = 32

dec64table          15139-23:421    Class = static,              Location = 36 + CSECT @STATIC,                Length = 32

val                 15234-23:516    Class = parameter,           Location = 0(r1),                             Length = 8

m                   15251-23:533    Class = automatic,           Location = 168(r13),                          Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   397

IDENTIFIER          DEFINITION      ATTRIBUTES


m                   15265-23:547    Class = automatic,           Location = 168(r13),                          Length = 4

ctz7_tab            15279-23:561    Class = static,              Location = 68 + CSECT @STATIC,                Length = 128

mask                15289-23:571    Class = automatic,           Location = 168(r13),                          Length = 8

t                   15290-23:572    Class = automatic,           Location = 168(r13),                          Length = 8

pIn                 15324-23:606    Class = parameter,           Location = 0(r1),                             Length = 8

pMatch              15324-23:606    Class = parameter,           Location = 8(r1),                             Length = 8

pInLimit            15324-23:606    Class = parameter,           Location = 16(r1),                            Length = 8

pStart              15326-23:608    Class = automatic,           Location = 168(r13),                          Length = 8

diff                15329-23:611    Class = automatic,           Location = 168(r13),                          Length = 8

diff                15337-23:619    Class = automatic,           Location = 168(r13),                          Length = 8

ptr                 17238-1:88      Class = parameter,           Location = 0(r1),                             Length = 8

hc4                 17244-1:94      Class = parameter,           Location = 0(r1),                             Length = 8

hc4                 17250-1:100     Class = parameter,           Location = 0(r1),                             Length = 8

start               17250-1:100     Class = parameter,           Location = 8(r1),                             Length = 8

startingOffset      17252-1:102     Class = automatic,           Location = 168(r13),                          Length = 8

hc4                 17268-1:118     Class = parameter,           Location = 0(r1),                             Length = 8

ip                  17268-1:118     Class = parameter,           Location = 8(r1),                             Length = 8

chainTable          17270-1:120     Class = automatic,           Location = 168(r13),                          Length = 8

hashTable           17271-1:121     Class = automatic,           Location = 168(r13),                          Length = 8

base                17272-1:122     Class = automatic,           Location = 168(r13),                          Length = 8

target              17273-1:123     Class = automatic,           Location = 168(r13),                          Length = 4

idx                 17274-1:124     Class = automatic,           Location = 168(r13),                          Length = 4

h                   17277-1:127     Class = automatic,           Location = 168(r13),                          Length = 4

delta               17278-1:128     Class = automatic,           Location = 168(r13),                          Length = 8

ip                  17291-1:141     Class = parameter,           Location = 0(r1),                             Length = 8

match               17291-1:141     Class = parameter,           Location = 8(r1),                             Length = 8

iMin                17292-1:142     Class = parameter,           Location = 16(r1),                            Length = 8

mMin                17292-1:142     Class = parameter,           Location = 24(r1),                            Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   398

IDENTIFIER          DEFINITION      ATTRIBUTES


back                17294-1:144     Class = automatic,           Location = 168(r13),                          Length = 4

min                 17295-1:145     Class = automatic,           Location = 168(r13),                          Length = 4

rotate              17312-1:162     Class = parameter,           Location = 0(r1),                             Length = 8

pattern             17312-1:162     Class = parameter,           Location = 12(r1),                            Length = 4

bitsToRotate        17314-1:164     Class = automatic,           Location = 168(r13),                          Length = 8

ip                  17322-1:172     Class = parameter,           Location = 0(r1),                             Length = 8

iEnd                17322-1:172     Class = parameter,           Location = 8(r1),                             Length = 8

pattern32           17322-1:172     Class = parameter,           Location = 20(r1),                            Length = 4

iStart              17324-1:174     Class = automatic,           Location = 168(r13),                          Length = 8

pattern             17325-1:175     Class = automatic,           Location = 168(r13),                          Length = 8

diff                17329-1:179     Class = automatic,           Location = 168(r13),                          Length = 8

patternByte         17336-1:186     Class = automatic,           Location = 168(r13),                          Length = 8

bitOffset           17341-1:191     Class = automatic,           Location = 168(r13),                          Length = 4

byte                17343-1:193     Class = automatic,           Location = 168(r13),                          Length = 1

ip                  17356-1:206     Class = parameter,           Location = 0(r1),                             Length = 8

iLow                17356-1:206     Class = parameter,           Location = 8(r1),                             Length = 8

pattern             17356-1:206     Class = parameter,           Location = 20(r1),                            Length = 4

iStart              17358-1:208     Class = automatic,           Location = 168(r13),                          Length = 8

bytePtr             17364-1:214     Class = automatic,           Location = 168(r13),                          Length = 8

dictLimit           17377-1:227     Class = parameter,           Location = 4(r1),                             Length = 4

matchIndex          17377-1:227     Class = parameter,           Location = 12(r1),                            Length = 4

hc4                 17387-1:237     Class = parameter,           Location = 0(r1),                             Length = 8

ip                  17388-1:238     Class = parameter,           Location = 8(r1),                             Length = 8

iLowLimit           17389-1:239     Class = parameter,           Location = 16(r1),                            Length = 8

iHighLimit          17390-1:240     Class = parameter,           Location = 24(r1),                            Length = 8

longest             17391-1:241     Class = parameter,           Location = 36(r1),                            Length = 4

matchpos            17392-1:242     Class = parameter,           Location = 40(r1),                            Length = 8

startpos            17393-1:243     Class = parameter,           Location = 48(r1),                            Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   399

IDENTIFIER          DEFINITION      ATTRIBUTES


maxNbAttempts       17394-1:244     Class = parameter,           Location = 60(r1),                            Length = 4

patternAnalysis     17395-1:245     Class = parameter,           Location = 68(r1),                            Length = 4

chainSwap           17396-1:246     Class = parameter,           Location = 76(r1),                            Length = 4

dict                17397-1:247     Class = parameter,           Location = 84(r1),                            Length = 4

favorDecSpeed       17398-1:248     Class = parameter,           Location = 92(r1),                            Length = 4

chainTable          17400-1:250     Class = automatic,           Location = 168(r13),                          Length = 8

HashTable           17401-1:251     Class = automatic,           Location = 168(r13),                          Length = 8

dictCtx             17402-1:252     Class = automatic,           Location = 168(r13),                          Length = 8

base                17403-1:253     Class = automatic,           Location = 168(r13),                          Length = 8

dictLimit           17404-1:254     Class = automatic,           Location = 168(r13),                          Length = 4

lowPrefixPtr        17405-1:255     Class = automatic,           Location = 168(r13),                          Length = 8

ipIndex             17406-1:256     Class = automatic,           Location = 168(r13),                          Length = 4

lowestMatchIndex    17407-1:257     Class = automatic,           Location = 168(r13),                          Length = 4

dictBase            17408-1:258     Class = automatic,           Location = 168(r13),                          Length = 8

lookBackLength      17409-1:259     Class = automatic,           Location = 168(r13),                          Length = 4

nbAttempts          17410-1:260     Class = automatic,           Location = 168(r13),                          Length = 4

matchChainPos       17411-1:261     Class = automatic,           Location = 168(r13),                          Length = 4

pattern             17412-1:262     Class = automatic,           Location = 168(r13),                          Length = 4

matchIndex          17413-1:263     Class = automatic,           Location = 168(r13),                          Length = 4

repeat              17414-1:264     Class = automatic,           Location = 168(r13),                          Length = 4

srcPatternLength    17415-1:265     Class = automatic,           Location = 168(r13),                          Length = 8

matchLength         17425-1:275     Class = automatic,           Location = 168(r13),                          Length = 4

matchPtr            17431-1:281     Class = automatic,           Location = 168(r13),                          Length = 8

back                17437-1:287     Class = automatic,           Location = 168(r13),                          Length = 4

matchPtr            17446-1:296     Class = automatic,           Location = 168(r13),                          Length = 8

dictStart           17448-1:298     Class = automatic,           Location = 168(r13),                          Length = 8

back                17449-1:299     Class = automatic,           Location = 168(r13),                          Length = 4

vLimit              17450-1:300     Class = automatic,           Location = 168(r13),                          Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   400

IDENTIFIER          DEFINITION      ATTRIBUTES


kTrigger            17466-1:316     Class = automatic,           Location = 168(r13),                          Length = 4

distanceToNextMatch 17467-1:317     Class = automatic,           Location = 168(r13),                          Length = 4

end                 17468-1:318     Class = automatic,           Location = 168(r13),                          Length = 4

step                17469-1:319     Class = automatic,           Location = 168(r13),                          Length = 4

accel               17470-1:320     Class = automatic,           Location = 168(r13),                          Length = 4

pos                 17471-1:321     Class = automatic,           Location = 168(r13),                          Length = 4

candidateDist       17473-1:323     Class = automatic,           Location = 168(r13),                          Length = 4

distNextMatch       17487-1:337     Class = automatic,           Location = 168(r13),                          Length = 4

matchCandidateIdx   17489-1:339     Class = automatic,           Location = 168(r13),                          Length = 4

extDict             17501-1:351     Class = automatic,           Location = 168(r13),                          Length = 4

matchPtr            17502-1:352     Class = automatic,           Location = 168(r13),                          Length = 8

dictStart           17504-1:354     Class = automatic,           Location = 168(r13),                          Length = 8

iLimit              17505-1:355     Class = automatic,           Location = 168(r13),                          Length = 8

forwardPatternLength
                    17506-1:356     Class = automatic,           Location = 168(r13),                          Length = 8

rotatedPattern      17508-1:358     Class = automatic,           Location = 168(r13),                          Length = 4

lowestMatchPtr      17511-1:361     Class = automatic,           Location = 168(r13),                          Length = 8

backLength          17512-1:362     Class = automatic,           Location = 168(r13),                          Length = 8

currentSegmentLength
                    17513-1:363     Class = automatic,           Location = 168(r13),                          Length = 8

rotatedPattern      17515-1:365     Class = automatic,           Location = 168(r13),                          Length = 4

newMatchIndex       17525-1:375     Class = automatic,           Location = 168(r13),                          Length = 4

newMatchIndex       17534-1:384     Class = automatic,           Location = 168(r13),                          Length = 4

maxML               17541-1:391     Class = automatic,           Location = 168(r13),                          Length = 8

distToNextPattern   17550-1:400     Class = automatic,           Location = 168(r13),                          Length = 4

dictEndOffset       17566-1:416     Class = automatic,           Location = 168(r13),                          Length = 8

dictMatchIndex      17567-1:417     Class = automatic,           Location = 168(r13),                          Length = 4

matchPtr            17571-1:421     Class = automatic,           Location = 168(r13),                          Length = 8

mlt                 17574-1:424     Class = automatic,           Location = 168(r13),                          Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   401

IDENTIFIER          DEFINITION      ATTRIBUTES


back                17575-1:425     Class = automatic,           Location = 168(r13),                          Length = 4

vLimit              17576-1:426     Class = automatic,           Location = 168(r13),                          Length = 8

nextOffset          17587-1:437     Class = automatic,           Location = 168(r13),                          Length = 4

hc4                 17596-1:446     Class = parameter,           Location = 0(r1),                             Length = 8

ip                  17597-1:447     Class = parameter,           Location = 8(r1),                             Length = 8

iLimit              17597-1:447     Class = parameter,           Location = 16(r1),                            Length = 8

matchpos            17598-1:448     Class = parameter,           Location = 24(r1),                            Length = 8

maxNbAttempts       17599-1:449     Class = parameter,           Location = 36(r1),                            Length = 4

patternAnalysis     17600-1:450     Class = parameter,           Location = 44(r1),                            Length = 4

dict                17601-1:451     Class = parameter,           Location = 52(r1),                            Length = 4

uselessPtr          17603-1:453     Class = automatic,           Location = 168(r13),                          Length = 8

_ip                 17614-1:464     Class = parameter,           Location = 0(r1),                             Length = 8

_op                 17615-1:465     Class = parameter,           Location = 8(r1),                             Length = 8

_anchor             17616-1:466     Class = parameter,           Location = 16(r1),                            Length = 8

matchLength         17617-1:467     Class = parameter,           Location = 28(r1),                            Length = 4

match               17618-1:468     Class = parameter,           Location = 32(r1),                            Length = 8

limit               17619-1:469     Class = parameter,           Location = 44(r1),                            Length = 4

oend                17620-1:470     Class = parameter,           Location = 48(r1),                            Length = 8

length              17626-1:476     Class = automatic,           Location = 168(r13),                          Length = 8

token               17627-1:477     Class = automatic,           Location = 168(r13),                          Length = 8

len                 17656-1:506     Class = automatic,           Location = 168(r13),                          Length = 8

ctx                 17700-1:550     Class = parameter,           Location = 0(r1),                             Length = 8

source              17701-1:551     Class = parameter,           Location = 8(r1),                             Length = 8

dest                17702-1:552     Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          17703-1:553     Class = parameter,           Location = 24(r1),                            Length = 8

maxOutputSize       17704-1:554     Class = parameter,           Location = 36(r1),                            Length = 4

maxNbAttempts       17705-1:555     Class = parameter,           Location = 44(r1),                            Length = 4

limit               17706-1:556     Class = parameter,           Location = 52(r1),                            Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   402

IDENTIFIER          DEFINITION      ATTRIBUTES


dict                17708-1:558     Class = parameter,           Location = 60(r1),                            Length = 4

inputSize           17710-1:560     Class = automatic,           Location = 168(r13),                          Length = 4

patternAnalysis     17711-1:561     Class = automatic,           Location = 168(r13),                          Length = 4

ip                  17713-1:563     Class = automatic,           Location = 168(r13),                          Length = 8

anchor              17714-1:564     Class = automatic,           Location = 176(r13),                          Length = 8

iend                17715-1:565     Class = automatic,           Location = 168(r13),                          Length = 8

mflimit             17716-1:566     Class = automatic,           Location = 168(r13),                          Length = 8

matchlimit          17717-1:567     Class = automatic,           Location = 168(r13),                          Length = 8

optr                17719-1:569     Class = automatic,           Location = 168(r13),                          Length = 8

op                  17720-1:570     Class = automatic,           Location = 184(r13),                          Length = 8

oend                17721-1:571     Class = automatic,           Location = 168(r13),                          Length = 8

ml3                 17723-1:573     Class = automatic,           Location = 168(r13),                          Length = 4

ml2                 17723-1:573     Class = automatic,           Location = 168(r13),                          Length = 4

ml                  17723-1:573     Class = automatic,           Location = 168(r13),                          Length = 4

ml0                 17723-1:573     Class = automatic,           Location = 168(r13),                          Length = 4

start0              17724-1:574     Class = automatic,           Location = 168(r13),                          Length = 8

ref0                17725-1:575     Class = automatic,           Location = 168(r13),                          Length = 8

ref                 17726-1:576     Class = automatic,           Location = 192(r13),                          Length = 8

start2              17727-1:577     Class = automatic,           Location = 200(r13),                          Length = 8

ref2                17728-1:578     Class = automatic,           Location = 208(r13),                          Length = 8

start3              17729-1:579     Class = automatic,           Location = 216(r13),                          Length = 8

ref3                17730-1:580     Class = automatic,           Location = 224(r13),                          Length = 8

correction          17778-1:628     Class = automatic,           Location = 168(r13),                          Length = 4

new_ml              17779-1:629     Class = automatic,           Location = 168(r13),                          Length = 4

correction          17818-1:668     Class = automatic,           Location = 168(r13),                          Length = 4

correction          17854-1:704     Class = automatic,           Location = 168(r13),                          Length = 4

lastRunSize         17882-1:732     Class = automatic,           Location = 168(r13),                          Length = 8

llAdd               17883-1:733     Class = automatic,           Location = 168(r13),                          Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   403

IDENTIFIER          DEFINITION      ATTRIBUTES


totalSize           17884-1:734     Class = automatic,           Location = 168(r13),                          Length = 8

accumulator         17897-1:747     Class = automatic,           Location = 168(r13),                          Length = 8

ll                  17915-1:765     Class = automatic,           Location = 168(r13),                          Length = 8

ll_addbytes         17916-1:766     Class = automatic,           Location = 168(r13),                          Length = 8

ll_totalCost        17917-1:767     Class = automatic,           Location = 168(r13),                          Length = 8

maxLitPos           17918-1:768     Class = automatic,           Location = 168(r13),                          Length = 8

bytesLeftForMl      17923-1:773     Class = automatic,           Location = 168(r13),                          Length = 8

maxMlSize           17924-1:774     Class = automatic,           Location = 168(r13),                          Length = 8

ctx                 17947-1:797     Class = parameter,           Location = 0(r1),                             Length = 8

src                 17948-1:798     Class = parameter,           Location = 8(r1),                             Length = 8

dst                 17949-1:799     Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          17950-1:800     Class = parameter,           Location = 24(r1),                            Length = 8

dstCapacity         17951-1:801     Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              17952-1:802     Class = parameter,           Location = 44(r1),                            Length = 4

limit               17953-1:803     Class = parameter,           Location = 52(r1),                            Length = 4

dict                17955-1:805     Class = parameter,           Location = 60(r1),                            Length = 4

clTable             17963-1:813     Class = static,              Location = 196 + CSECT @STATIC,               Length = 156

cParam              17988-1:838     Class = automatic,           Location = 168(r13),                          Length = 12

favor               17989-1:839     Class = automatic,           Location = 168(r13),                          Length = 4

result              17990-1:840     Class = automatic,           Location = 168(r13),                          Length = 4

ctx                 18013-1:863     Class = parameter,           Location = 0(r1),                             Length = 8

src                 18014-1:864     Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18015-1:865     Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          18016-1:866     Class = parameter,           Location = 24(r1),                            Length = 8

dstCapacity         18017-1:867     Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              18018-1:868     Class = parameter,           Location = 44(r1),                            Length = 4

limit               18020-1:870     Class = parameter,           Location = 52(r1),                            Length = 4

ctx                 18028-1:878     Class = parameter,           Location = 0(r1),                             Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   404

IDENTIFIER          DEFINITION      ATTRIBUTES


src                 18029-1:879     Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18030-1:880     Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          18031-1:881     Class = parameter,           Location = 24(r1),                            Length = 8

dstCapacity         18032-1:882     Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              18033-1:883     Class = parameter,           Location = 44(r1),                            Length = 4

limit               18035-1:885     Class = parameter,           Location = 52(r1),                            Length = 4

position            18037-1:887     Class = automatic,           Location = 168(r13),                          Length = 8

ctx                 18054-1:904     Class = parameter,           Location = 0(r1),                             Length = 8

src                 18055-1:905     Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18056-1:906     Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          18057-1:907     Class = parameter,           Location = 24(r1),                            Length = 8

dstCapacity         18058-1:908     Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              18059-1:909     Class = parameter,           Location = 44(r1),                            Length = 4

limit               18061-1:911     Class = parameter,           Location = 52(r1),                            Length = 4

state               18085-1:935     Class = parameter,           Location = 0(r1),                             Length = 8

src                 18085-1:935     Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18085-1:935     Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18085-1:935     Class = parameter,           Location = 28(r1),                            Length = 4

dstCapacity         18085-1:935     Class = parameter,           Location = 36(r1),                            Length = 4

compressionLevel    18085-1:935     Class = parameter,           Location = 44(r1),                            Length = 4

ctx                 18087-1:937     Class = automatic,           Location = 168(r13),                          Length = 8

state               18097-1:947     Class = parameter,           Location = 0(r1),                             Length = 8

src                 18097-1:947     Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18097-1:947     Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18097-1:947     Class = parameter,           Location = 28(r1),                            Length = 4

dstCapacity         18097-1:947     Class = parameter,           Location = 36(r1),                            Length = 4

compressionLevel    18097-1:947     Class = parameter,           Location = 44(r1),                            Length = 4

ctx                 18099-1:949     Class = automatic,           Location = 168(r13),                          Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   405

IDENTIFIER          DEFINITION      ATTRIBUTES


src                 18104-1:954     Class = parameter,           Location = 0(r1),                             Length = 8

dst                 18104-1:954     Class = parameter,           Location = 8(r1),                             Length = 8

srcSize             18104-1:954     Class = parameter,           Location = 20(r1),                            Length = 4

dstCapacity         18104-1:954     Class = parameter,           Location = 28(r1),                            Length = 4

compressionLevel    18104-1:954     Class = parameter,           Location = 36(r1),                            Length = 4

statePtr            18107-1:957     Class = automatic,           Location = 168(r13),                          Length = 8

cSize               18112-1:962     Class = automatic,           Location = 168(r13),                          Length = 4

state               18120-1:970     Class = parameter,           Location = 0(r1),                             Length = 8

source              18120-1:970     Class = parameter,           Location = 8(r1),                             Length = 8

dest                18120-1:970     Class = parameter,           Location = 16(r1),                            Length = 8

sourceSizePtr       18120-1:970     Class = parameter,           Location = 24(r1),                            Length = 8

targetDestSize      18120-1:970     Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              18120-1:970     Class = parameter,           Location = 44(r1),                            Length = 4

ctx                 18122-1:972     Class = automatic,           Location = 168(r13),                          Length = 8

state               18137-1:987     Class = automatic,           Location = 168(r13),                          Length = 8

LZ4_streamHCPtr     18144-1:994     Class = parameter,           Location = 0(r1),                             Length = 8

buffer              18153-1:1003    Class = parameter,           Location = 0(r1),                             Length = 8

size                18153-1:1003    Class = parameter,           Location = 8(r1),                             Length = 8

LZ4_streamHCPtr     18155-1:1005    Class = automatic,           Location = 168(r13),                          Length = 8

hcstate             18164-1:1014    Class = automatic,           Location = 168(r13),                          Length = 8

LZ4_streamHCPtr     18171-1:1021    Class = parameter,           Location = 0(r1),                             Length = 8

compressionLevel    18171-1:1021    Class = parameter,           Location = 12(r1),                            Length = 4

LZ4_streamHCPtr     18177-1:1027    Class = parameter,           Location = 0(r1),                             Length = 8

compressionLevel    18177-1:1027    Class = parameter,           Location = 12(r1),                            Length = 4

LZ4_streamHCPtr     18191-1:1041    Class = parameter,           Location = 0(r1),                             Length = 8

compressionLevel    18191-1:1041    Class = parameter,           Location = 12(r1),                            Length = 4

LZ4_streamHCPtr     18199-1:1049    Class = parameter,           Location = 0(r1),                             Length = 8

favor               18199-1:1049    Class = parameter,           Location = 12(r1),                            Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   406

IDENTIFIER          DEFINITION      ATTRIBUTES


LZ4_streamHCPtr     18206-1:1056    Class = parameter,           Location = 0(r1),                             Length = 8

dictionary          18207-1:1057    Class = parameter,           Location = 8(r1),                             Length = 8

dictSize            18207-1:1057    Class = parameter,           Location = 20(r1),                            Length = 4

ctxPtr              18209-1:1059    Class = automatic,           Location = 168(r13),                          Length = 8

cLevel              18217-1:1067    Class = automatic,           Location = 168(r13),                          Length = 4

working_stream      18227-1:1077    Class = parameter,           Location = 0(r1),                             Length = 8

dictionary_stream   18227-1:1077    Class = parameter,           Location = 8(r1),                             Length = 8

ctxPtr              18233-1:1083    Class = parameter,           Location = 0(r1),                             Length = 8

newBlock            18233-1:1083    Class = parameter,           Location = 8(r1),                             Length = 8

LZ4_streamHCPtr     18252-1:1102    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18253-1:1103    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18253-1:1103    Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          18254-1:1104    Class = parameter,           Location = 24(r1),                            Length = 8

dstCapacity         18254-1:1104    Class = parameter,           Location = 36(r1),                            Length = 4

limit               18255-1:1105    Class = parameter,           Location = 44(r1),                            Length = 4

ctxPtr              18257-1:1107    Class = automatic,           Location = 168(r13),                          Length = 8

dictSize            18266-1:1116    Class = automatic,           Location = 168(r13),                          Length = 8

sourceEnd           18276-1:1126    Class = automatic,           Location = 168(r13),                          Length = 8

dictBegin           18277-1:1127    Class = automatic,           Location = 168(r13),                          Length = 8

dictEnd             18278-1:1128    Class = automatic,           Location = 168(r13),                          Length = 8

LZ4_streamHCPtr     18288-1:1138    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18288-1:1138    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18288-1:1138    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18288-1:1138    Class = parameter,           Location = 28(r1),                            Length = 4

dstCapacity         18288-1:1138    Class = parameter,           Location = 36(r1),                            Length = 4

LZ4_streamHCPtr     18296-1:1146    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18296-1:1146    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18296-1:1146    Class = parameter,           Location = 16(r1),                            Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   407

IDENTIFIER          DEFINITION      ATTRIBUTES


srcSizePtr          18296-1:1146    Class = parameter,           Location = 24(r1),                            Length = 8

targetDestSize      18296-1:1146    Class = parameter,           Location = 36(r1),                            Length = 4

LZ4_streamHCPtr     18308-1:1158    Class = parameter,           Location = 0(r1),                             Length = 8

safeBuffer          18308-1:1158    Class = parameter,           Location = 8(r1),                             Length = 8

dictSize            18308-1:1158    Class = parameter,           Location = 20(r1),                            Length = 4

streamPtr           18310-1:1160    Class = automatic,           Location = 168(r13),                          Length = 8

prefixSize          18311-1:1161    Class = automatic,           Location = 168(r13),                          Length = 4

endIndex            18320-1:1170    Class = automatic,           Location = 168(r13),                          Length = 4

src                 18339-1:1189    Class = parameter,           Location = 0(r1),                             Length = 8

dst                 18339-1:1189    Class = parameter,           Location = 8(r1),                             Length = 8

srcSize             18339-1:1189    Class = parameter,           Location = 20(r1),                            Length = 4

src                 18340-1:1190    Class = parameter,           Location = 0(r1),                             Length = 8

dst                 18340-1:1190    Class = parameter,           Location = 8(r1),                             Length = 8

srcSize             18340-1:1190    Class = parameter,           Location = 20(r1),                            Length = 4

maxDstSize          18340-1:1190    Class = parameter,           Location = 28(r1),                            Length = 4

src                 18341-1:1191    Class = parameter,           Location = 0(r1),                             Length = 8

dst                 18341-1:1191    Class = parameter,           Location = 8(r1),                             Length = 8

srcSize             18341-1:1191    Class = parameter,           Location = 20(r1),                            Length = 4

cLevel              18341-1:1191    Class = parameter,           Location = 28(r1),                            Length = 4

src                 18342-1:1192    Class = parameter,           Location = 0(r1),                             Length = 8

dst                 18342-1:1192    Class = parameter,           Location = 8(r1),                             Length = 8

srcSize             18342-1:1192    Class = parameter,           Location = 20(r1),                            Length = 4

maxDstSize          18342-1:1192    Class = parameter,           Location = 28(r1),                            Length = 4

cLevel              18342-1:1192    Class = parameter,           Location = 36(r1),                            Length = 4

state               18343-1:1193    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18343-1:1193    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18343-1:1193    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18343-1:1193    Class = parameter,           Location = 28(r1),                            Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   408

IDENTIFIER          DEFINITION      ATTRIBUTES


state               18344-1:1194    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18344-1:1194    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18344-1:1194    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18344-1:1194    Class = parameter,           Location = 28(r1),                            Length = 4

maxDstSize          18344-1:1194    Class = parameter,           Location = 36(r1),                            Length = 4

state               18345-1:1195    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18345-1:1195    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18345-1:1195    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18345-1:1195    Class = parameter,           Location = 28(r1),                            Length = 4

cLevel              18345-1:1195    Class = parameter,           Location = 36(r1),                            Length = 4

state               18346-1:1196    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18346-1:1196    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18346-1:1196    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18346-1:1196    Class = parameter,           Location = 28(r1),                            Length = 4

maxDstSize          18346-1:1196    Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              18346-1:1196    Class = parameter,           Location = 44(r1),                            Length = 4

ctx                 18347-1:1197    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18347-1:1197    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18347-1:1197    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18347-1:1197    Class = parameter,           Location = 28(r1),                            Length = 4

ctx                 18348-1:1198    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18348-1:1198    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18348-1:1198    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18348-1:1198    Class = parameter,           Location = 28(r1),                            Length = 4

maxDstSize          18348-1:1198    Class = parameter,           Location = 36(r1),                            Length = 4

state               18356-1:1206    Class = parameter,           Location = 0(r1),                             Length = 8

inputBuffer         18356-1:1206    Class = parameter,           Location = 8(r1),                             Length = 8

hc4                 18358-1:1208    Class = automatic,           Location = 168(r13),                          Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   409

IDENTIFIER          DEFINITION      ATTRIBUTES


inputBuffer         18364-1:1214    Class = parameter,           Location = 0(r1),                             Length = 8

hc4                 18366-1:1216    Class = automatic,           Location = 168(r13),                          Length = 8

LZ4HC_Data          18372-1:1222    Class = parameter,           Location = 0(r1),                             Length = 8

LZ4HC_Data          18379-1:1229    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18379-1:1229    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18379-1:1229    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18379-1:1229    Class = parameter,           Location = 28(r1),                            Length = 4

cLevel              18379-1:1229    Class = parameter,           Location = 36(r1),                            Length = 4

LZ4HC_Data          18384-1:1234    Class = parameter,           Location = 0(r1),                             Length = 8

src                 18384-1:1234    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18384-1:1234    Class = parameter,           Location = 16(r1),                            Length = 8

srcSize             18384-1:1234    Class = parameter,           Location = 28(r1),                            Length = 4

dstCapacity         18384-1:1234    Class = parameter,           Location = 36(r1),                            Length = 4

cLevel              18384-1:1234    Class = parameter,           Location = 44(r1),                            Length = 4

LZ4HC_Data          18389-1:1239    Class = parameter,           Location = 0(r1),                             Length = 8

ctx                 18391-1:1241    Class = automatic,           Location = 168(r13),                          Length = 8

bufferStart         18392-1:1242    Class = automatic,           Location = 168(r13),                          Length = 8

litlen              18410-1:1260    Class = parameter,           Location = 4(r1),                             Length = 4

price               18412-1:1262    Class = automatic,           Location = 168(r13),                          Length = 4

litlen              18421-1:1271    Class = parameter,           Location = 4(r1),                             Length = 4

mlen                18421-1:1271    Class = parameter,           Location = 12(r1),                            Length = 4

price               18423-1:1273    Class = automatic,           Location = 168(r13),                          Length = 4

ctx                 18442-1:1292    Class = parameter,           Location = 8(r1),                             Length = 8

ip                  18443-1:1293    Class = parameter,           Location = 16(r1),                            Length = 8

iHighLimit          18443-1:1293    Class = parameter,           Location = 24(r1),                            Length = 8

minLen              18444-1:1294    Class = parameter,           Location = 36(r1),                            Length = 4

nbSearches          18444-1:1294    Class = parameter,           Location = 44(r1),                            Length = 4

dict                18445-1:1295    Class = parameter,           Location = 52(r1),                            Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   410

IDENTIFIER          DEFINITION      ATTRIBUTES


favorDecSpeed       18446-1:1296    Class = parameter,           Location = 60(r1),                            Length = 4

match               18448-1:1298    Class = automatic,           Location = 168(r13),                          Length = 8

matchPtr            18449-1:1299    Class = automatic,           Location = 176(r13),                          Length = 8

matchLength         18453-1:1303    Class = automatic,           Location = 168(r13),                          Length = 4

ctx                 18464-1:1314    Class = parameter,           Location = 0(r1),                             Length = 8

source              18465-1:1315    Class = parameter,           Location = 8(r1),                             Length = 8

dst                 18466-1:1316    Class = parameter,           Location = 16(r1),                            Length = 8

srcSizePtr          18467-1:1317    Class = parameter,           Location = 24(r1),                            Length = 8

dstCapacity         18468-1:1318    Class = parameter,           Location = 36(r1),                            Length = 4

nbSearches          18469-1:1319    Class = parameter,           Location = 44(r1),                            Length = 4

sufficient_len      18470-1:1320    Class = parameter,           Location = 48(r1),                            Length = 8

limit               18471-1:1321    Class = parameter,           Location = 60(r1),                            Length = 4

fullUpdate          18472-1:1322    Class = parameter,           Location = 68(r1),                            Length = 4

dict                18473-1:1323    Class = parameter,           Location = 76(r1),                            Length = 4

favorDecSpeed       18474-1:1324    Class = parameter,           Location = 84(r1),                            Length = 4

retval              18476-1:1326    Class = automatic,           Location = 168(r13),                          Length = 4

opt                 18479-1:1329    Class = automatic,           Location = 168(r13),                          Length = 8

ip                  18484-1:1334    Class = automatic,           Location = 168(r13),                          Length = 8

anchor              18485-1:1335    Class = automatic,           Location = 176(r13),                          Length = 8

iend                18486-1:1336    Class = automatic,           Location = 168(r13),                          Length = 8

mflimit             18487-1:1337    Class = automatic,           Location = 168(r13),                          Length = 8

matchlimit          18488-1:1338    Class = automatic,           Location = 168(r13),                          Length = 8

op                  18489-1:1339    Class = automatic,           Location = 184(r13),                          Length = 8

opSaved             18490-1:1340    Class = automatic,           Location = 168(r13),                          Length = 8

oend                18491-1:1341    Class = automatic,           Location = 168(r13),                          Length = 8

ovml                18492-1:1342    Class = automatic,           Location = 168(r13),                          Length = 4

ovref               18493-1:1343    Class = automatic,           Location = 168(r13),                          Length = 8

llen                18506-1:1356    Class = automatic,           Location = 168(r13),                          Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   411

IDENTIFIER          DEFINITION      ATTRIBUTES


best_mlen           18507-1:1357    Class = automatic,           Location = 168(r13),                          Length = 4

best_off            18507-1:1357    Class = automatic,           Location = 168(r13),                          Length = 4

cur                 18508-1:1358    Class = automatic,           Location = 168(r13),                          Length = 4

last_match_pos      18508-1:1358    Class = automatic,           Location = 168(r13),                          Length = 4

firstMatch          18510-1:1360    Class = automatic,           Location = 192(r13),                          Length = 8

firstML             18515-1:1365    Class = automatic,           Location = 168(r13),                          Length = 4

matchPos            18516-1:1366    Class = automatic,           Location = 168(r13),                          Length = 8

rPos                18527-1:1377    Class = automatic,           Location = 168(r13),                          Length = 4

cost                18529-1:1379    Class = automatic,           Location = 168(r13),                          Length = 4

mlen                18538-1:1388    Class = automatic,           Location = 168(r13),                          Length = 4

matchML             18539-1:1389    Class = automatic,           Location = 168(r13),                          Length = 4

offset              18540-1:1390    Class = automatic,           Location = 168(r13),                          Length = 4

cost                18543-1:1393    Class = automatic,           Location = 168(r13),                          Length = 4

addLit              18552-1:1402    Class = automatic,           Location = 168(r13),                          Length = 4

curPtr              18564-1:1414    Class = automatic,           Location = 168(r13),                          Length = 8

newMatch            18565-1:1415    Class = automatic,           Location = 200(r13),                          Length = 8

baseLitlen          18599-1:1449    Class = automatic,           Location = 168(r13),                          Length = 4

litlen              18600-1:1450    Class = automatic,           Location = 168(r13),                          Length = 4

price               18602-1:1452    Class = automatic,           Location = 168(r13),                          Length = 4

pos                 18603-1:1453    Class = automatic,           Location = 168(r13),                          Length = 4

matchML             18614-1:1464    Class = automatic,           Location = 168(r13),                          Length = 4

ml                  18615-1:1465    Class = automatic,           Location = 168(r13),                          Length = 4

pos                 18619-1:1469    Class = automatic,           Location = 168(r13),                          Length = 4

offset              18620-1:1470    Class = automatic,           Location = 168(r13),                          Length = 4

price               18621-1:1471    Class = automatic,           Location = 168(r13),                          Length = 4

ll                  18622-1:1472    Class = automatic,           Location = 168(r13),                          Length = 4

addLit              18649-1:1499    Class = automatic,           Location = 168(r13),                          Length = 4

candidate_pos       18668-1:1518    Class = automatic,           Location = 168(r13),                          Length = 4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   412

IDENTIFIER          DEFINITION      ATTRIBUTES


selected_matchLength
                    18669-1:1519    Class = automatic,           Location = 168(r13),                          Length = 4

selected_offset     18670-1:1520    Class = automatic,           Location = 168(r13),                          Length = 4

next_matchLength    18672-1:1522    Class = automatic,           Location = 168(r13),                          Length = 4

next_offset         18673-1:1523    Class = automatic,           Location = 168(r13),                          Length = 4

rPos                18685-1:1535    Class = automatic,           Location = 168(r13),                          Length = 4

ml                  18687-1:1537    Class = automatic,           Location = 168(r13),                          Length = 4

offset              18688-1:1538    Class = automatic,           Location = 168(r13),                          Length = 4

lastRunSize         18703-1:1553    Class = automatic,           Location = 168(r13),                          Length = 8

llAdd               18704-1:1554    Class = automatic,           Location = 168(r13),                          Length = 8

totalSize           18705-1:1555    Class = automatic,           Location = 168(r13),                          Length = 8

accumulator         18721-1:1571    Class = automatic,           Location = 168(r13),                          Length = 8

ll                  18740-1:1590    Class = automatic,           Location = 168(r13),                          Length = 8

ll_addbytes         18741-1:1591    Class = automatic,           Location = 168(r13),                          Length = 8

ll_totalCost        18742-1:1592    Class = automatic,           Location = 168(r13),                          Length = 8

maxLitPos           18743-1:1593    Class = automatic,           Location = 168(r13),                          Length = 8

bytesLeftForMl      18748-1:1598    Class = automatic,           Location = 168(r13),                          Length = 8

maxMlSize           18749-1:1599    Class = automatic,           Location = 168(r13),                          Length = 8


                         * * * * *   E N D   O F   S T O R A G E   O F F S E T   L I S T I N G   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07           C:\asgkafka\librdkafka\src\lz4hc.c           04/30/2021 15:35:13 Page   413

                                           * * * * *   S T A T I C     M A P   * * * * *

OFFSET (HEX)   LENGTH (HEX)   NAME

          0            100    E2U
          0              4    LZ4_minLength
          4             20    inc32table
         24             20    dec64table
         44             80    ctz7_tab
         C4             9C    clTable
        100            100    U2E
                                  * * * * *   E N D     O F     S T A T I C     M A P   * * * * *

                              * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
