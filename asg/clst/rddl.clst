Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     1
                                       * * * * *   P R O L O G   * * * * *
  Command options:
    Overriding Parameters . . . . : -DHOST_MVS -I. -fwarn_disable=2356,2357,2405,2610,2011,2282,2284,1130 -fc11 -fextended_variadic_
macros -fanonstruct -march=z7 -mlp64 -DSYSC=1 -frent -IC:\dignus\include -fpreinclude=sysc.h -flisting=../asg/clst/rddl.clst -o../as
g/asm/rddl.asm C:\asgkafka\librdkafka\src\rddl.c
    Program name. . . . . . . . . : C:\asgkafka\librdkafka\src\rddl.c
Compiler options. . . . . . . : -DHOST_MVS -DSYSC=1 -I. -IC:\dignus\include -O0 -fnoaddh -falias_stmts -famode=64 -fanonstruct
                              : -fnoansi_bitfield_packing -fnoasciiout -fasmcomm=expanded -fnoasmlnno -fnoat -fnoatid -fc11 -fc99
                              : -fno_common -fctrlz_is_eof -fcxx_comments -fdfe -fnodfp -fnodollar -fno_dwarf_extern
                              : -fextended_variadic_macros -ffar=ao -fnofar_align -fno_fnio -ffplocal -fno_gnu89_inline
                              : -fnohfpfloatpromote -fnoignore_case -fnoincrepsuf -fnoincstripdir -fnoincstripsuf
                              : -finline=1:128:256 -fno_instrument_functions -flinkageospromote
                              : -flisting=../asg/clst/rddl.clst -fnollgrande -flnameaddr -flong_names -fnolowerh -fno_mapat
                              : -fnomargins -fmesg=microsoft -fmin_lm_reg=2 -fmin_stm_reg=2 -fnomrc -fnonint_bitfield -fpack=0 
                              : -fpagesize=60 -fnopatch -fnopic -fpreinclude=sysc.h -frent -fnosascdigraphs -fsave_dsa_over_call
                              : -fno_sched_inst -fsearchlocal -fshow_skipped -fshowinc -fsname -fsource_enc=ascii -fstructmap
                              : -fnostructmaphex -fno_test -fnotrim -funsigned_bitfields -funsigned_char -fuser_sys_hdrmap
                              : -fwarn_disable=2356,2357,2405,2610,2011,2282,2284,1130 -fwchar=4 -fnowchar_ucs -fno_xref
                              : -mno-decimal-floating-point-packed-conversion-facility -mno-distinct-operands
                              : -mno-fp-extensions -mno-high-word-facility -mno-load-store-on-condition
                              : -mno-misc-instruction-extensions-facility-1 -mno-misc-instruction-extensions-facility-2
                              : -mno-misc-instruction-extensions-facility-3 -mno-mvcle -mno-population-count-facility
                              : -mno-tpf-trace -mno-tpf-trace-skip -mno-transaction-facility -march=z7
                              : -mdecimal-floating-point-facility -mextended-immediate
                              : -mfloating-point-support-sign-handling-facility -mfp-support-extension -mfp16
                              : -mfpr-gr-transfer-facility -mgeneral-instructions-extension -mhfp-extensions
                              : -mhfp-multiply-add -mlong-displacement -mlong-double-128 -mlp64 -mpfpo -msquare-root
                              : -o ../asg/asm/rddl.asm
                                * * * * *   E N D   O F   P R O L O G   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     2


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
*=Warning===> cc: #2181 license: license will expire in one day
     1       |//                                                                                               |     1     2
     2       |//  sysc.h                                                                                       |     2     2
     3       |//                                                                                               |     3     2
     4       |//  Created by Mike Arnold on 5/5/20.                                                            |     4     2
     5       |//  Copyright Â© 2020 Mike Arnold. All rights reserved.                                          |     5     2
     6       |//                                                                                               |     6     2
     7       |                                                                                                 |     7     2
     8       |#ifndef sysc_h                                                                                   |     8     2
     9       |#define sysc_h                                                                                   |     9     2
    10       |                                                                                                 |    10     2
    11       |#ifdef SYSC                                                                                      |    11     2
    12       |#define INLINE __inline                                                                          |    12     2
    13       |#define max(a,b) ({__typeof__ (a) _a = (a), _b = (b); _a > _b ? _a : _b; })                      |    13     2
    14       |#define min(a,b) ({__typeof__ (a) _a = (a), _b = (b); _a < _b ? _a : _b; })                      |    14     2
    15       |                                                                                                 |    15     2
    16       |#define __builtin_expect(x,y) (x)                                                                |    16     2
    17       |                                                                                                 |    17     2
    18       |#ifndef CLOCK_MONOTONIC                                                                          |    18     2
    19       |#define CLOCK_MONOTONIC CLOCK_REALTIME                                                           |    19     2
    20       |#endif                                                                                           |    20     2
    21       |#include <sys/types.h>                                                                           |    21     2
     1       |/* release 2.25.00 */                                                                            |    22     3
     2       |#pragma pack()                                                                                   |    23     3
     3       |/*-                                                                                              |    24     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    |    25     3
     5       | *      The Regents of the University of California.  All rights reserved.                       |    26     3
     6       | * (c) UNIX System Laboratories, Inc.                                                            |    27     3
     7       | * All or some portions of this file are derived from material licensed                          |    28     3
     8       | * to the University of California by American Telephone and Telegraph                           |    29     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |    30     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              |    31     3
    11       | *                                                                                               |    32     3
    12       | * Redistribution and use in source and binary forms, with or without                            |    33     3
    13       | * modification, are permitted provided that the following conditions                            |    34     3
    14       | * are met:                                                                                      |    35     3
    15       | * 1. Redistributions of source code must retain the above copyright                             |    36     3
    16       | *    notice, this list of conditions and the following disclaimer.                              |    37     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |    38     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        |    39     3
    19       | *    documentation and/or other materials provided with the distribution.                       |    40     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       |    41     3
    21       | *    may be used to endorse or promote products derived from this software                      |    42     3
    22       | *    without specific prior written permission.                                                 |    43     3
    23       | *                                                                                               |    44     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |    45     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |    46     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |    47     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |    48     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |    49     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |    50     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |    51     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |    52     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     3


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |    53     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |    54     3
    34       | * SUCH DAMAGE.                                                                                  |    55     3
    35       | *                                                                                               |    56     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   |    57     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        |    58     3
    38       | */                                                                                              |    59     3
    39       |                                                                                                 |    60     3
    40       |#ifndef _SYS_TYPES_H_                                                                            |    61     3
    41       |#define _SYS_TYPES_H_                                                                            |    62     3
    42       |                                                                                                 |    63     3
    43       |#include <sys/cdefs.h>                                                                           |    64     3
     1       |/* release 2.25.00 */                                                                            |    65     4
     2       |#pragma pack()                                                                                   |    66     4
     3       |/*                                                                                               |    67     4
     4       | * Copyright (c) 1991, 1993                                                                      |    68     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |    69     4
     6       | *                                                                                               |    70     4
     7       | * This code is derived from software contributed to Berkeley by                                 |    71     4
     8       | * Berkeley Software Design, Inc.                                                                |    72     4
     9       | *                                                                                               |    73     4
    10       | * Redistribution and use in source and binary forms, with or without                            |    74     4
    11       | * modification, are permitted provided that the following conditions                            |    75     4
    12       | * are met:                                                                                      |    76     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |    77     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |    78     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |    79     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |    80     4
    17       | *    documentation and/or other materials provided with the distribution.                       |    81     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |    82     4
    19       | *    must display the following acknowledgement:                                                |    83     4
    20       | *      This product includes software developed by the University of                            |    84     4
    21       | *      California, Berkeley and its contributors.                                               |    85     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |    86     4
    23       | *    may be used to endorse or promote products derived from this software                      |    87     4
    24       | *    without specific prior written permission.                                                 |    88     4
    25       | *                                                                                               |    89     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |    90     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |    91     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |    92     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |    93     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |    94     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |    95     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |    96     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |    97     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |    98     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |    99     4
    36       | * SUCH DAMAGE.                                                                                  |   100     4
    37       | *                                                                                               |   101     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |   102     4
    39       | */                                                                                              |   103     4
    40       |                                                                                                 |   104     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |   105     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     4


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    42       |#define _SYS_CDEFS_H_                                                                            |   106     4
    43       |                                                                                                 |   107     4
    44       |#if defined(__cplusplus)                                                                         |   108     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |   109     4
    46       |#define __END_DECLS     }                                                                        |   110     4
    47       |#else                                                                                            |   111     4
    48       |#define __BEGIN_DECLS                                                                            |   112     4
    49       |#define __END_DECLS                                                                              |   113     4
    50       |#endif                                                                                           |   114     4
    51       |                                                                                                 |   115     4
    52       |/*                                                                                               |   116     4
    53       | * This code has been put in place to help reduce the addition of                                |   117     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |   118     4
    55       | * having a compiler-agnostic source tree.                                                       |   119     4
    56       | */                                                                                              |   120     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |   121     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |   122     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |   123     4
    60       |                                                                                                 |   124     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |   125     4
    62       |                                                                                                 |   126     4
    63       |                                                                                                 |   127     4
    64       |/*                                                                                               |   128     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |   129     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |   130     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |   131     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |   132     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |   133     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |   134     4
    71       | * this only works with ANSI C.                                                                  |   135     4
    72       | *                                                                                               |   136     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |   137     4
    74       | * first.  It is only available with ANSI C.                                                     |   138     4
    75       | */                                                                                              |   139     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |   140     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |   141     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |   142     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |   143     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |   144     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |   145     4
    82       |                                                                                                 |   146     4
    83       |#define __const         const           /* define reserved names to standard */                  |   147     4
    84       |#define __signed        signed                                                                   |   148     4
    85       |#define __volatile      volatile                                                                 |   149     4
    86       |#if defined(__cplusplus)                                                                         |   150     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |   151     4
    88       |#else                                                                                            |   152     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |   153     4
    90       |#endif /* !__cplusplus */                                                                        |   154     4
    91       |                                                                                                 |   155     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |   156     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |   157     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |   158     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     5


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    95       |#define __STRING(x)     "x"                                                                      |   159     4
    96       |                                                                                                 |   160     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |   161     4
    98       |#define __inline                                                                                 |   162     4
    99       |#define __signed                                                                                 |   163     4
   100       |#define __volatile                                                                               |   164     4
   101       |/*                                                                                               |   165     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |   166     4
   103       | * deleted from the program and old programs will want them left alone.                          |   167     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |   168     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |   169     4
   106       | */                                                                                              |   170     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |   171     4
   108       |#define const                           /* delete ANSI C keywords */                             |   172     4
   109       |#define inline                                                                                   |   173     4
   110       |#define signed                                                                                   |   174     4
   111       |#define volatile                                                                                 |   175     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |   176     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |   177     4
   114       |                                                                                                 |   178     4
   115       |/*                                                                                               |   179     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |   180     4
   117       | * pure (no side effects) functions, and unused variables.                                       |   181     4
   118       | */                                                                                              |   182     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |   183     4
   120       |#define __pure  __attribute__((__pure__))                                                        |   184     4
   121       |#define __pure2 __attribute__((__const__))                                                       |   185     4
   122       |#define __unused                                                                                 |   186     4
   123       |#define __aligned(x)                                                                             |   187     4
   124       |#define __section(x)                                                                             |   188     4
   125       |#define __nonnull(x)                                                                             |   189     4
   126       |#define __used                                                                                   |   190     4
   127       |                                                                                                 |   191     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |   192     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |   193     4
   130       |                                                                                                 |   194     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |   195     4
   132       |#define __func__  NULL                                                                           |   196     4
   133       |#endif                                                                                           |   197     4
   134       |                                                                                                 |   198     4
   134       +                                                                                                 +   198     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |   199     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |   200     4
   137       |#endif                                                                                           |   201     4
   138       |                                                                                                 |   202     4
   138       +                                                                                                 +   202     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |   203     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |   204     4
   141       | **/                                                                                             |   205     4
   142       |#ifndef __cplusplus                                                                              |   206     4
   143       |#define __restrict __restrict__                                                                  |   207     4
   144       |#else                                                                                            |   208     4
   145       |/* Systems/C++ does not */                                                                       |   209     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     6


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   146       |#define __restrict                                                                               |   210     4
   147       |#endif                                                                                           |   211     4
   148       |                                                                                                 |   212     4
   149       |/*                                                                                               |   213     4
   150       | * define-away GCC-specific branch-prediction markers                                            |   214     4
   151       | */                                                                                              |   215     4
   152       |#define __predict_true(exp)     (exp)                                                            |   216     4
   153       |#define __predict_false(exp)    (exp)                                                            |   217     4
   154       |                                                                                                 |   218     4
   155       |                                                                                                 |   219     4
   156       |/*                                                                                               |   220     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |   221     4
   158       | * <sys/types.h> reference __offsetof().                                                         |   222     4
   159       | *                                                                                               |   223     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |   224     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |   225     4
   162       | */                                                                                              |   226     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |   227     4
   164       |#undef __offsetof                                                                                |   228     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |   229     4
   166       |#endif                                                                                           |   230     4
   167       |                                                                                                 |   231     4
   167       +                                                                                                 +   231     4
   168       |/*                                                                                               |   232     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |   233     4
   170       | * or scanf-like arguments.                                                                      |   234     4
   171       | */                                                                                              |   235     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |   236     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |   237     4
   174       |#define __format_arg(fmtarg)                                                                     |   238     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |   239     4
   176       |                                                                                                 |   240     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |   241     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |   242     4
   179       |                                                                                                 |   243     4
   180       |  /* intended to generate a weak reference as an alias */                                        |   244     4
   181       |#define __weak_reference(sym,alias)                                                              |   245     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |   246     4
   183       |#define __warn_references(sym,msg)                                                               |   247     4
   184       |                                                                                                 |   248     4
   185       | /* This places the string into the resulting object.  It should */                              |   249     4
   186       | /* probably become #pragma ident */                                                             |   250     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |   251     4
   188       |                                                                                                 |   252     4
   189       |#ifndef __RCSID                                                                                  |   253     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |   254     4
   191       |#endif                                                                                           |   255     4
   192       |                                                                                                 |   256     4
   193       |/*                                                                                               |   257     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |   258     4
   195       | * Usage:                                                                                        |   259     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |   260     4
   197       |*                                            04:05:13 mikeh Exp $");                             |   261     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     7


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   198       | */                                                                                              |   262     4
   199       |#ifndef __SYSCID                                                                                 |   263     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |   264     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |   265     4
   202       |#else                                                                                            |   266     4
   203       |#define __SYSCID(s)     struct __hack                                                            |   267     4
   204       |#endif                                                                                           |   268     4
   205       |#endif                                                                                           |   269     4
   206       |                                                                                                 |   270     4
   207       |#ifndef __RCSID_SOURCE                                                                           |   271     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |   272     4
   209       |#endif                                                                                           |   273     4
   210       |                                                                                                 |   274     4
   211       |#ifndef __COPYRIGHT                                                                              |   275     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |   276     4
   213       |#endif                                                                                           |   277     4
   214       |                                                                                                 |   278     4
   215       |                                                                                                 |   279     4
   216       |#ifndef __DECONST                                                                                |   280     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |   281     4
   218       |#endif                                                                                           |   282     4
   219       |                                                                                                 |   283     4
   220       |#ifndef __DEVOLATILE                                                                             |   284     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |   285     4
   222       |#endif                                                                                           |   286     4
   223       |                                                                                                 |   287     4
   224       |#ifndef __DEQUALIFY                                                                              |   288     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |   289     4
   226       |#endif                                                                                           |   290     4
   227       |                                                                                                 |   291     4
   228       |                                                                                                 |   292     4
   229       |/*-                                                                                              |   293     4
   230       | * The following definitions are an extension of the behavior originally                         |   294     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   295     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |   296     4
   233       | * header file is included.                                                                      |   297     4
   234       | *                                                                                               |   298     4
   235       | * Here's a quick run-down of the versions:                                                      |   299     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   300     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   301     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   302     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   303     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   304     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   305     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   306     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   307     4
   244       | *                                                                                               |   308     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   309     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |   310     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   311     4
   248       | *                                                                                               |   312     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |   313     4
   250       | */                                                                                              |   314     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     8


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   251       |                                                                                                 |   315     4
   252       |/*                                                                                               |   316     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |   317     4
   254       | * available. Also make them available when requested so.                                        |   318     4
   255       | */                                                                                              |   319     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |   320     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |   321     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |   322     4
   259       |#define __DF_VISIBLE    1                                                                        |   323     4
   260       |#else                                                                                            |   324     4
   261       |#define __DF_VISIBLE    0                                                                        |   325     4
   262       |#endif                                                                                           |   326     4
   263       |                                                                                                 |   327     4
   264       |/*-                                                                                              |   328     4
   265       | * The following definitions are an extension of the behavior originally                         |   329     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   330     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |   331     4
   268       | * header file is included.                                                                      |   332     4
   269       | *                                                                                               |   333     4
   270       | * Here's a quick run-down of the versions:                                                      |   334     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   335     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   336     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   337     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   338     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   339     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   340     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   341     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   342     4
   279       | *                                                                                               |   343     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   344     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |   345     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   346     4
   283       | *                                                                                               |   347     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |   348     4
   285       | */                                                                                              |   349     4
   286       |                                                                                                 |   350     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |   351     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |   352     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |   353     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |   354     4
   291       |#endif                                                                                           |   355     4
   292       |                                                                                                 |   356     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |   357     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |   358     4
   295       |#undef _POSIX_C_SOURCE                                                                           |   359     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |   360     4
   297       |#endif                                                                                           |   361     4
   298       |                                                                                                 |   362     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |   363     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |   364     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |   365     4
   302       |#define __XSI_VISIBLE           700                                                              |   366     4
   303       |#undef _POSIX_C_SOURCE                                                                           |   367     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page     9


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   304       |#define _POSIX_C_SOURCE         200809                                                           |   368     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |   369     4
   306       |#define __XSI_VISIBLE           600                                                              |   370     4
   307       |#undef _POSIX_C_SOURCE                                                                           |   371     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |   372     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |   373     4
   310       |#define __XSI_VISIBLE           500                                                              |   374     4
   311       |#undef _POSIX_C_SOURCE                                                                           |   375     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |   376     4
   313       |#endif                                                                                           |   377     4
   314       |#endif                                                                                           |   378     4
   315       |                                                                                                 |   379     4
   316       |/*                                                                                               |   380     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |   381     4
   318       | * important.                                                                                    |   382     4
   319       | */                                                                                              |   383     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |   384     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |   385     4
   322       |#endif                                                                                           |   386     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |   387     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |   388     4
   325       |#define __POSIX_VISIBLE         200809                                                           |   389     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |   390     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |   391     4
   328       |#define __POSIX_VISIBLE         200112                                                           |   392     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |   393     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |   394     4
   331       |#define __POSIX_VISIBLE         199506                                                           |   395     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |   396     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |   397     4
   334       |#define __POSIX_VISIBLE         199309                                                           |   398     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |   399     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |   400     4
   337       |#define __POSIX_VISIBLE         199209                                                           |   401     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |   402     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |   403     4
   340       |#define __POSIX_VISIBLE         199009                                                           |   404     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |   405     4
   342       |#else                                                                                            |   406     4
   343       |#define __POSIX_VISIBLE         198808                                                           |   407     4
   344       |#define __ISO_C_VISIBLE         0                                                                |   408     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |   409     4
   346       |#else                                                                                            |   410     4
   347       |/*-                                                                                              |   411     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |   412     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |   413     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |   414     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |   415     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |   416     4
   353       | * a test program to print out the values.                                                       |   417     4
   354       | *                                                                                               |   418     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |   419     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |   420     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    10


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   357       | * environment (and in fact we will never get here).                                             |   421     4
   358       | */                                                                                              |   422     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |   423     4
   360       |#define __POSIX_VISIBLE         0                                                                |   424     4
   361       |#define __XSI_VISIBLE           0                                                                |   425     4
   362       |#define __BSD_VISIBLE           0                                                                |   426     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |   427     4
   364       |#define __EXT1_VISIBLE          0                                                                |   428     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |   429     4
   366       |#define __POSIX_VISIBLE         0                                                                |   430     4
   367       |#define __XSI_VISIBLE           0                                                                |   431     4
   368       |#define __BSD_VISIBLE           0                                                                |   432     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |   433     4
   370       |#define __EXT1_VISIBLE          0                                                                |   434     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |   435     4
   372       |#define __POSIX_VISIBLE         0                                                                |   436     4
   373       |#define __XSI_VISIBLE           0                                                                |   437     4
   374       |#define __BSD_VISIBLE           0                                                                |   438     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |   439     4
   376       |#define __EXT1_VISIBLE          0                                                                |   440     4
   377       |#else                           /* Default environment: show everything. */                      |   441     4
   378       |#define __POSIX_VISIBLE         200809                                                           |   442     4
   379       |#define __XSI_VISIBLE           700                                                              |   443     4
   380       |#define __BSD_VISIBLE           1                                                                |   444     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |   445     4
   382       |#define __EXT1_VISIBLE          1                                                                |   446     4
   383       |#endif                                                                                           |   447     4
   384       |#endif                                                                                           |   448     4
   385       |                                                                                                 |   449     4
   386       |/* User override __EXT1_VISIBLE */                                                               |   450     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |   451     4
   388       |#undef  __EXT1_VISIBLE                                                                           |   452     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |   453     4
   390       |#define __EXT1_VISIBLE          1                                                                |   454     4
   391       |#else                                                                                            |   455     4
   392       |#define __EXT1_VISIBLE          0                                                                |   456     4
   393       |#endif                                                                                           |   457     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |   458     4
   395       |                                                                                                 |   459     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |   460     4
   397       |#define __NO_TLS 1                                                                               |   461     4
   398       |#endif                                                                                           |   462     4
   399       |                                                                                                 |   463     4
   400       |                                                                                                 |   464     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |   465     4
   402       |#define __FBSDID(x)                                                                              |   466     4
   403       |                                                                                                 |   467     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |   468     4
   405       |#pragma pack(reset)                                                                              |   469     4
    44       |                                                                                                 |   470     3
    45       |/* Machine type dependent parameters. */                                                         |   471     3
    46       |#include <machine/endian.h>                                                                      |   472     3
     1       |/* release 2.25.00 */                                                                            |   473     5
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    11


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |   474     5
     3       |/*-                                                                                              |   475     5
     4       | * Copyright (c) 1987, 1991 Regents of the University of California.                             |   476     5
     5       | * All rights reserved.                                                                          |   477     5
     6       | *                                                                                               |   478     5
     7       | * Redistribution and use in source and binary forms, with or without                            |   479     5
     8       | * modification, are permitted provided that the following conditions                            |   480     5
     9       | * are met:                                                                                      |   481     5
    10       | * 1. Redistributions of source code must retain the above copyright                             |   482     5
    11       | *    notice, this list of conditions and the following disclaimer.                              |   483     5
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |   484     5
    13       | *    notice, this list of conditions and the following disclaimer in the                        |   485     5
    14       | *    documentation and/or other materials provided with the distribution.                       |   486     5
    15       | * 4. Neither the name of the University nor the names of its contributors                       |   487     5
    16       | *    may be used to endorse or promote products derived from this software                      |   488     5
    17       | *    without specific prior written permission.                                                 |   489     5
    18       | *                                                                                               |   490     5
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |   491     5
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   492     5
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   493     5
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |   494     5
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   495     5
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   496     5
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   497     5
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   498     5
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   499     5
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   500     5
    29       | * SUCH DAMAGE.                                                                                  |   501     5
    30       | *                                                                                               |   502     5
    31       | *      @(#)endian.h    7.8 (Berkeley) 4/3/91                                                    |   503     5
    32       | */                                                                                              |   504     5
    33       |                                                                                                 |   505     5
    34       |#ifndef _MACHINE_ENDIAN_H_                                                                       |   506     5
    35       |#define _MACHINE_ENDIAN_H_                                                                       |   507     5
    36       |                                                                                                 |   508     5
    37       |#include <sys/cdefs.h>                                                                           |   509     5
     1       |/* release 2.25.00 */                                                                            |   510     4
     2       |#pragma pack()                                                                                   |   511     4
     3       |/*                                                                                               |   512     4
     4       | * Copyright (c) 1991, 1993                                                                      |   513     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |   514     4
     6       | *                                                                                               |   515     4
     7       | * This code is derived from software contributed to Berkeley by                                 |   516     4
     8       | * Berkeley Software Design, Inc.                                                                |   517     4
     9       | *                                                                                               |   518     4
    10       | * Redistribution and use in source and binary forms, with or without                            |   519     4
    11       | * modification, are permitted provided that the following conditions                            |   520     4
    12       | * are met:                                                                                      |   521     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |   522     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |   523     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |   524     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |   525     4
    17       | *    documentation and/or other materials provided with the distribution.                       |   526     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    12


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       | * 3. All advertising materials mentioning features or use of this software                      |   527     4
    19       | *    must display the following acknowledgement:                                                |   528     4
    20       | *      This product includes software developed by the University of                            |   529     4
    21       | *      California, Berkeley and its contributors.                                               |   530     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |   531     4
    23       | *    may be used to endorse or promote products derived from this software                      |   532     4
    24       | *    without specific prior written permission.                                                 |   533     4
    25       | *                                                                                               |   534     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |   535     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   536     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   537     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |   538     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   539     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   540     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   541     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   542     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   543     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   544     4
    36       | * SUCH DAMAGE.                                                                                  |   545     4
    37       | *                                                                                               |   546     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |   547     4
    39       | */                                                                                              |   548     4
    40       |                                                                                                 |   549     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |   550     4
    42       |#define _SYS_CDEFS_H_                                                                            |   551     4
    43       |                                                                                                 |   552     4
    44       |#if defined(__cplusplus)                                                                         |   553     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |   554     4
    46       |#define __END_DECLS     }                                                                        |   555     4
    47       |#else                                                                                            |   556     4
    48       |#define __BEGIN_DECLS                                                                            |   557     4
    49       |#define __END_DECLS                                                                              |   558     4
    50       |#endif                                                                                           |   559     4
    51       |                                                                                                 |   560     4
    52       |/*                                                                                               |   561     4
    53       | * This code has been put in place to help reduce the addition of                                |   562     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |   563     4
    55       | * having a compiler-agnostic source tree.                                                       |   564     4
    56       | */                                                                                              |   565     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |   566     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |   567     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |   568     4
    60       |                                                                                                 |   569     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |   570     4
    62       |                                                                                                 |   571     4
    63       |                                                                                                 |   572     4
    64       |/*                                                                                               |   573     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |   574     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |   575     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |   576     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |   577     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |   578     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |   579     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    13


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    71       | * this only works with ANSI C.                                                                  |   580     4
    72       | *                                                                                               |   581     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |   582     4
    74       | * first.  It is only available with ANSI C.                                                     |   583     4
    75       | */                                                                                              |   584     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |   585     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |   586     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |   587     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |   588     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |   589     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |   590     4
    82       |                                                                                                 |   591     4
    83       |#define __const         const           /* define reserved names to standard */                  |   592     4
    84       |#define __signed        signed                                                                   |   593     4
    85       |#define __volatile      volatile                                                                 |   594     4
    86       |#if defined(__cplusplus)                                                                         |   595     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |   596     4
    88       |#else                                                                                            |   597     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |   598     4
    90       |#endif /* !__cplusplus */                                                                        |   599     4
    91       |                                                                                                 |   600     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |   601     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |   602     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |   603     4
    95       |#define __STRING(x)     "x"                                                                      |   604     4
    96       |                                                                                                 |   605     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |   606     4
    98       |#define __inline                                                                                 |   607     4
    99       |#define __signed                                                                                 |   608     4
   100       |#define __volatile                                                                               |   609     4
   101       |/*                                                                                               |   610     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |   611     4
   103       | * deleted from the program and old programs will want them left alone.                          |   612     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |   613     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |   614     4
   106       | */                                                                                              |   615     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |   616     4
   108       |#define const                           /* delete ANSI C keywords */                             |   617     4
   109       |#define inline                                                                                   |   618     4
   110       |#define signed                                                                                   |   619     4
   111       |#define volatile                                                                                 |   620     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |   621     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |   622     4
   114       |                                                                                                 |   623     4
   115       |/*                                                                                               |   624     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |   625     4
   117       | * pure (no side effects) functions, and unused variables.                                       |   626     4
   118       | */                                                                                              |   627     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |   628     4
   120       |#define __pure  __attribute__((__pure__))                                                        |   629     4
   121       |#define __pure2 __attribute__((__const__))                                                       |   630     4
   122       |#define __unused                                                                                 |   631     4
   123       |#define __aligned(x)                                                                             |   632     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    14


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   124       |#define __section(x)                                                                             |   633     4
   125       |#define __nonnull(x)                                                                             |   634     4
   126       |#define __used                                                                                   |   635     4
   127       |                                                                                                 |   636     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |   637     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |   638     4
   130       |                                                                                                 |   639     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |   640     4
   132       |#define __func__  NULL                                                                           |   641     4
   133       |#endif                                                                                           |   642     4
   134       |                                                                                                 |   643     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |   644     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |   645     4
   137       |#endif                                                                                           |   646     4
   138       |                                                                                                 |   647     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |   648     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |   649     4
   141       | **/                                                                                             |   650     4
   142       |#ifndef __cplusplus                                                                              |   651     4
   143       |#define __restrict __restrict__                                                                  |   652     4
   144       |#else                                                                                            |   653     4
   145       |/* Systems/C++ does not */                                                                       |   654     4
   146       |#define __restrict                                                                               |   655     4
   147       |#endif                                                                                           |   656     4
   148       |                                                                                                 |   657     4
   149       |/*                                                                                               |   658     4
   150       | * define-away GCC-specific branch-prediction markers                                            |   659     4
   151       | */                                                                                              |   660     4
   152       |#define __predict_true(exp)     (exp)                                                            |   661     4
   153       |#define __predict_false(exp)    (exp)                                                            |   662     4
   154       |                                                                                                 |   663     4
   155       |                                                                                                 |   664     4
   156       |/*                                                                                               |   665     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |   666     4
   158       | * <sys/types.h> reference __offsetof().                                                         |   667     4
   159       | *                                                                                               |   668     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |   669     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |   670     4
   162       | */                                                                                              |   671     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |   672     4
   164       |#undef __offsetof                                                                                |   673     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |   674     4
   166       |#endif                                                                                           |   675     4
   167       |                                                                                                 |   676     4
   168       |/*                                                                                               |   677     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |   678     4
   170       | * or scanf-like arguments.                                                                      |   679     4
   171       | */                                                                                              |   680     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |   681     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |   682     4
   174       |#define __format_arg(fmtarg)                                                                     |   683     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |   684     4
   176       |                                                                                                 |   685     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    15


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |   686     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |   687     4
   179       |                                                                                                 |   688     4
   180       |  /* intended to generate a weak reference as an alias */                                        |   689     4
   181       |#define __weak_reference(sym,alias)                                                              |   690     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |   691     4
   183       |#define __warn_references(sym,msg)                                                               |   692     4
   184       |                                                                                                 |   693     4
   185       | /* This places the string into the resulting object.  It should */                              |   694     4
   186       | /* probably become #pragma ident */                                                             |   695     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |   696     4
   188       |                                                                                                 |   697     4
   189       |#ifndef __RCSID                                                                                  |   698     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |   699     4
   191       |#endif                                                                                           |   700     4
   192       |                                                                                                 |   701     4
   193       |/*                                                                                               |   702     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |   703     4
   195       | * Usage:                                                                                        |   704     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |   705     4
   197       |*                                            04:05:13 mikeh Exp $");                             |   706     4
   198       | */                                                                                              |   707     4
   199       |#ifndef __SYSCID                                                                                 |   708     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |   709     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |   710     4
   202       |#else                                                                                            |   711     4
   203       |#define __SYSCID(s)     struct __hack                                                            |   712     4
   204       |#endif                                                                                           |   713     4
   205       |#endif                                                                                           |   714     4
   206       |                                                                                                 |   715     4
   207       |#ifndef __RCSID_SOURCE                                                                           |   716     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |   717     4
   209       |#endif                                                                                           |   718     4
   210       |                                                                                                 |   719     4
   211       |#ifndef __COPYRIGHT                                                                              |   720     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |   721     4
   213       |#endif                                                                                           |   722     4
   214       |                                                                                                 |   723     4
   215       |                                                                                                 |   724     4
   216       |#ifndef __DECONST                                                                                |   725     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |   726     4
   218       |#endif                                                                                           |   727     4
   219       |                                                                                                 |   728     4
   220       |#ifndef __DEVOLATILE                                                                             |   729     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |   730     4
   222       |#endif                                                                                           |   731     4
   223       |                                                                                                 |   732     4
   224       |#ifndef __DEQUALIFY                                                                              |   733     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |   734     4
   226       |#endif                                                                                           |   735     4
   227       |                                                                                                 |   736     4
   228       |                                                                                                 |   737     4
   229       |/*-                                                                                              |   738     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    16


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   230       | * The following definitions are an extension of the behavior originally                         |   739     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   740     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |   741     4
   233       | * header file is included.                                                                      |   742     4
   234       | *                                                                                               |   743     4
   235       | * Here's a quick run-down of the versions:                                                      |   744     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   745     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   746     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   747     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   748     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   749     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   750     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   751     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   752     4
   244       | *                                                                                               |   753     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   754     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |   755     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   756     4
   248       | *                                                                                               |   757     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |   758     4
   250       | */                                                                                              |   759     4
   251       |                                                                                                 |   760     4
   252       |/*                                                                                               |   761     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |   762     4
   254       | * available. Also make them available when requested so.                                        |   763     4
   255       | */                                                                                              |   764     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |   765     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |   766     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |   767     4
   259       |#define __DF_VISIBLE    1                                                                        |   768     4
   260       |#else                                                                                            |   769     4
   261       |#define __DF_VISIBLE    0                                                                        |   770     4
   262       |#endif                                                                                           |   771     4
   263       |                                                                                                 |   772     4
   264       |/*-                                                                                              |   773     4
   265       | * The following definitions are an extension of the behavior originally                         |   774     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |   775     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |   776     4
   268       | * header file is included.                                                                      |   777     4
   269       | *                                                                                               |   778     4
   270       | * Here's a quick run-down of the versions:                                                      |   779     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |   780     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |   781     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |   782     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |   783     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |   784     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |   785     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |   786     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |   787     4
   279       | *                                                                                               |   788     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |   789     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |   790     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |   791     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    17


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   283       | *                                                                                               |   792     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |   793     4
   285       | */                                                                                              |   794     4
   286       |                                                                                                 |   795     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |   796     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |   797     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |   798     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |   799     4
   291       |#endif                                                                                           |   800     4
   292       |                                                                                                 |   801     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |   802     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |   803     4
   295       |#undef _POSIX_C_SOURCE                                                                           |   804     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |   805     4
   297       |#endif                                                                                           |   806     4
   298       |                                                                                                 |   807     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |   808     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |   809     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |   810     4
   302       |#define __XSI_VISIBLE           700                                                              |   811     4
   303       |#undef _POSIX_C_SOURCE                                                                           |   812     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |   813     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |   814     4
   306       |#define __XSI_VISIBLE           600                                                              |   815     4
   307       |#undef _POSIX_C_SOURCE                                                                           |   816     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |   817     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |   818     4
   310       |#define __XSI_VISIBLE           500                                                              |   819     4
   311       |#undef _POSIX_C_SOURCE                                                                           |   820     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |   821     4
   313       |#endif                                                                                           |   822     4
   314       |#endif                                                                                           |   823     4
   315       |                                                                                                 |   824     4
   316       |/*                                                                                               |   825     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |   826     4
   318       | * important.                                                                                    |   827     4
   319       | */                                                                                              |   828     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |   829     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |   830     4
   322       |#endif                                                                                           |   831     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |   832     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |   833     4
   325       |#define __POSIX_VISIBLE         200809                                                           |   834     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |   835     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |   836     4
   328       |#define __POSIX_VISIBLE         200112                                                           |   837     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |   838     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |   839     4
   331       |#define __POSIX_VISIBLE         199506                                                           |   840     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |   841     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |   842     4
   334       |#define __POSIX_VISIBLE         199309                                                           |   843     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |   844     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    18


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |   845     4
   337       |#define __POSIX_VISIBLE         199209                                                           |   846     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |   847     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |   848     4
   340       |#define __POSIX_VISIBLE         199009                                                           |   849     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |   850     4
   342       |#else                                                                                            |   851     4
   343       |#define __POSIX_VISIBLE         198808                                                           |   852     4
   344       |#define __ISO_C_VISIBLE         0                                                                |   853     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |   854     4
   346       |#else                                                                                            |   855     4
   347       |/*-                                                                                              |   856     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |   857     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |   858     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |   859     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |   860     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |   861     4
   353       | * a test program to print out the values.                                                       |   862     4
   354       | *                                                                                               |   863     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |   864     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |   865     4
   357       | * environment (and in fact we will never get here).                                             |   866     4
   358       | */                                                                                              |   867     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |   868     4
   360       |#define __POSIX_VISIBLE         0                                                                |   869     4
   361       |#define __XSI_VISIBLE           0                                                                |   870     4
   362       |#define __BSD_VISIBLE           0                                                                |   871     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |   872     4
   364       |#define __EXT1_VISIBLE          0                                                                |   873     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |   874     4
   366       |#define __POSIX_VISIBLE         0                                                                |   875     4
   367       |#define __XSI_VISIBLE           0                                                                |   876     4
   368       |#define __BSD_VISIBLE           0                                                                |   877     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |   878     4
   370       |#define __EXT1_VISIBLE          0                                                                |   879     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |   880     4
   372       |#define __POSIX_VISIBLE         0                                                                |   881     4
   373       |#define __XSI_VISIBLE           0                                                                |   882     4
   374       |#define __BSD_VISIBLE           0                                                                |   883     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |   884     4
   376       |#define __EXT1_VISIBLE          0                                                                |   885     4
   377       |#else                           /* Default environment: show everything. */                      |   886     4
   378       |#define __POSIX_VISIBLE         200809                                                           |   887     4
   379       |#define __XSI_VISIBLE           700                                                              |   888     4
   380       |#define __BSD_VISIBLE           1                                                                |   889     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |   890     4
   382       |#define __EXT1_VISIBLE          1                                                                |   891     4
   383       |#endif                                                                                           |   892     4
   384       |#endif                                                                                           |   893     4
   385       |                                                                                                 |   894     4
   386       |/* User override __EXT1_VISIBLE */                                                               |   895     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |   896     4
   388       |#undef  __EXT1_VISIBLE                                                                           |   897     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    19


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |   898     4
   390       |#define __EXT1_VISIBLE          1                                                                |   899     4
   391       |#else                                                                                            |   900     4
   392       |#define __EXT1_VISIBLE          0                                                                |   901     4
   393       |#endif                                                                                           |   902     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |   903     4
   395       |                                                                                                 |   904     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |   905     4
   397       |#define __NO_TLS 1                                                                               |   906     4
   398       |#endif                                                                                           |   907     4
   399       |                                                                                                 |   908     4
   400       |                                                                                                 |   909     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |   910     4
   402       |#define __FBSDID(x)                                                                              |   911     4
   403       |                                                                                                 |   912     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |   913     4
   405       |#pragma pack(reset)                                                                              |   914     4
    38       |#include <sys/_types.h>                                                                          |   915     5
     1       |/* release 2.25.00 */                                                                            |   916     6
     2       |#pragma pack()                                                                                   |   917     6
     3       |/*-                                                                                              |   918     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |   919     6
     5       | * All rights reserved.                                                                          |   920     6
     6       | *                                                                                               |   921     6
     7       | * Redistribution and use in source and binary forms, with or without                            |   922     6
     8       | * modification, are permitted provided that the following conditions                            |   923     6
     9       | * are met:                                                                                      |   924     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |   925     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |   926     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |   927     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |   928     6
    14       | *    documentation and/or other materials provided with the distribution.                       |   929     6
    15       | *                                                                                               |   930     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |   931     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   932     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   933     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |   934     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   935     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   936     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   937     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   938     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   939     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   940     6
    26       | * SUCH DAMAGE.                                                                                  |   941     6
    27       | *                                                                                               |   942     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |   943     6
    29       | */                                                                                              |   944     6
    30       |                                                                                                 |   945     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |   946     6
    32       |#define _SYS__TYPES_H_                                                                           |   947     6
    33       |                                                                                                 |   948     6
    34       |#include <sys/cdefs.h>                                                                           |   949     6
     1       |/* release 2.25.00 */                                                                            |   950     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    20


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |   951     4
     3       |/*                                                                                               |   952     4
     4       | * Copyright (c) 1991, 1993                                                                      |   953     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |   954     4
     6       | *                                                                                               |   955     4
     7       | * This code is derived from software contributed to Berkeley by                                 |   956     4
     8       | * Berkeley Software Design, Inc.                                                                |   957     4
     9       | *                                                                                               |   958     4
    10       | * Redistribution and use in source and binary forms, with or without                            |   959     4
    11       | * modification, are permitted provided that the following conditions                            |   960     4
    12       | * are met:                                                                                      |   961     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |   962     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |   963     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |   964     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |   965     4
    17       | *    documentation and/or other materials provided with the distribution.                       |   966     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |   967     4
    19       | *    must display the following acknowledgement:                                                |   968     4
    20       | *      This product includes software developed by the University of                            |   969     4
    21       | *      California, Berkeley and its contributors.                                               |   970     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |   971     4
    23       | *    may be used to endorse or promote products derived from this software                      |   972     4
    24       | *    without specific prior written permission.                                                 |   973     4
    25       | *                                                                                               |   974     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |   975     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |   976     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |   977     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |   978     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |   979     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |   980     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |   981     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |   982     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |   983     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |   984     4
    36       | * SUCH DAMAGE.                                                                                  |   985     4
    37       | *                                                                                               |   986     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |   987     4
    39       | */                                                                                              |   988     4
    40       |                                                                                                 |   989     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |   990     4
    42       |#define _SYS_CDEFS_H_                                                                            |   991     4
    43       |                                                                                                 |   992     4
    44       |#if defined(__cplusplus)                                                                         |   993     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |   994     4
    46       |#define __END_DECLS     }                                                                        |   995     4
    47       |#else                                                                                            |   996     4
    48       |#define __BEGIN_DECLS                                                                            |   997     4
    49       |#define __END_DECLS                                                                              |   998     4
    50       |#endif                                                                                           |   999     4
    51       |                                                                                                 |  1000     4
    52       |/*                                                                                               |  1001     4
    53       | * This code has been put in place to help reduce the addition of                                |  1002     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  1003     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    21


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       | * having a compiler-agnostic source tree.                                                       |  1004     4
    56       | */                                                                                              |  1005     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  1006     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  1007     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  1008     4
    60       |                                                                                                 |  1009     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  1010     4
    62       |                                                                                                 |  1011     4
    63       |                                                                                                 |  1012     4
    64       |/*                                                                                               |  1013     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  1014     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  1015     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  1016     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  1017     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  1018     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  1019     4
    71       | * this only works with ANSI C.                                                                  |  1020     4
    72       | *                                                                                               |  1021     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  1022     4
    74       | * first.  It is only available with ANSI C.                                                     |  1023     4
    75       | */                                                                                              |  1024     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  1025     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  1026     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  1027     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  1028     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  1029     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  1030     4
    82       |                                                                                                 |  1031     4
    83       |#define __const         const           /* define reserved names to standard */                  |  1032     4
    84       |#define __signed        signed                                                                   |  1033     4
    85       |#define __volatile      volatile                                                                 |  1034     4
    86       |#if defined(__cplusplus)                                                                         |  1035     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  1036     4
    88       |#else                                                                                            |  1037     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  1038     4
    90       |#endif /* !__cplusplus */                                                                        |  1039     4
    91       |                                                                                                 |  1040     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  1041     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  1042     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  1043     4
    95       |#define __STRING(x)     "x"                                                                      |  1044     4
    96       |                                                                                                 |  1045     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  1046     4
    98       |#define __inline                                                                                 |  1047     4
    99       |#define __signed                                                                                 |  1048     4
   100       |#define __volatile                                                                               |  1049     4
   101       |/*                                                                                               |  1050     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  1051     4
   103       | * deleted from the program and old programs will want them left alone.                          |  1052     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  1053     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  1054     4
   106       | */                                                                                              |  1055     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  1056     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    22


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   108       |#define const                           /* delete ANSI C keywords */                             |  1057     4
   109       |#define inline                                                                                   |  1058     4
   110       |#define signed                                                                                   |  1059     4
   111       |#define volatile                                                                                 |  1060     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  1061     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  1062     4
   114       |                                                                                                 |  1063     4
   115       |/*                                                                                               |  1064     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  1065     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  1066     4
   118       | */                                                                                              |  1067     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  1068     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  1069     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  1070     4
   122       |#define __unused                                                                                 |  1071     4
   123       |#define __aligned(x)                                                                             |  1072     4
   124       |#define __section(x)                                                                             |  1073     4
   125       |#define __nonnull(x)                                                                             |  1074     4
   126       |#define __used                                                                                   |  1075     4
   127       |                                                                                                 |  1076     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  1077     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  1078     4
   130       |                                                                                                 |  1079     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  1080     4
   132       |#define __func__  NULL                                                                           |  1081     4
   133       |#endif                                                                                           |  1082     4
   134       |                                                                                                 |  1083     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  1084     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  1085     4
   137       |#endif                                                                                           |  1086     4
   138       |                                                                                                 |  1087     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  1088     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  1089     4
   141       | **/                                                                                             |  1090     4
   142       |#ifndef __cplusplus                                                                              |  1091     4
   143       |#define __restrict __restrict__                                                                  |  1092     4
   144       |#else                                                                                            |  1093     4
   145       |/* Systems/C++ does not */                                                                       |  1094     4
   146       |#define __restrict                                                                               |  1095     4
   147       |#endif                                                                                           |  1096     4
   148       |                                                                                                 |  1097     4
   149       |/*                                                                                               |  1098     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  1099     4
   151       | */                                                                                              |  1100     4
   152       |#define __predict_true(exp)     (exp)                                                            |  1101     4
   153       |#define __predict_false(exp)    (exp)                                                            |  1102     4
   154       |                                                                                                 |  1103     4
   155       |                                                                                                 |  1104     4
   156       |/*                                                                                               |  1105     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  1106     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  1107     4
   159       | *                                                                                               |  1108     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  1109     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    23


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  1110     4
   162       | */                                                                                              |  1111     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  1112     4
   164       |#undef __offsetof                                                                                |  1113     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  1114     4
   166       |#endif                                                                                           |  1115     4
   167       |                                                                                                 |  1116     4
   168       |/*                                                                                               |  1117     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  1118     4
   170       | * or scanf-like arguments.                                                                      |  1119     4
   171       | */                                                                                              |  1120     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  1121     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  1122     4
   174       |#define __format_arg(fmtarg)                                                                     |  1123     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  1124     4
   176       |                                                                                                 |  1125     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  1126     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  1127     4
   179       |                                                                                                 |  1128     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  1129     4
   181       |#define __weak_reference(sym,alias)                                                              |  1130     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  1131     4
   183       |#define __warn_references(sym,msg)                                                               |  1132     4
   184       |                                                                                                 |  1133     4
   185       | /* This places the string into the resulting object.  It should */                              |  1134     4
   186       | /* probably become #pragma ident */                                                             |  1135     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  1136     4
   188       |                                                                                                 |  1137     4
   189       |#ifndef __RCSID                                                                                  |  1138     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  1139     4
   191       |#endif                                                                                           |  1140     4
   192       |                                                                                                 |  1141     4
   193       |/*                                                                                               |  1142     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  1143     4
   195       | * Usage:                                                                                        |  1144     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  1145     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  1146     4
   198       | */                                                                                              |  1147     4
   199       |#ifndef __SYSCID                                                                                 |  1148     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  1149     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  1150     4
   202       |#else                                                                                            |  1151     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  1152     4
   204       |#endif                                                                                           |  1153     4
   205       |#endif                                                                                           |  1154     4
   206       |                                                                                                 |  1155     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  1156     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  1157     4
   209       |#endif                                                                                           |  1158     4
   210       |                                                                                                 |  1159     4
   211       |#ifndef __COPYRIGHT                                                                              |  1160     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  1161     4
   213       |#endif                                                                                           |  1162     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    24


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   214       |                                                                                                 |  1163     4
   215       |                                                                                                 |  1164     4
   216       |#ifndef __DECONST                                                                                |  1165     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  1166     4
   218       |#endif                                                                                           |  1167     4
   219       |                                                                                                 |  1168     4
   220       |#ifndef __DEVOLATILE                                                                             |  1169     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  1170     4
   222       |#endif                                                                                           |  1171     4
   223       |                                                                                                 |  1172     4
   224       |#ifndef __DEQUALIFY                                                                              |  1173     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  1174     4
   226       |#endif                                                                                           |  1175     4
   227       |                                                                                                 |  1176     4
   228       |                                                                                                 |  1177     4
   229       |/*-                                                                                              |  1178     4
   230       | * The following definitions are an extension of the behavior originally                         |  1179     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  1180     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  1181     4
   233       | * header file is included.                                                                      |  1182     4
   234       | *                                                                                               |  1183     4
   235       | * Here's a quick run-down of the versions:                                                      |  1184     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  1185     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  1186     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  1187     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  1188     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  1189     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  1190     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  1191     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  1192     4
   244       | *                                                                                               |  1193     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  1194     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  1195     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  1196     4
   248       | *                                                                                               |  1197     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  1198     4
   250       | */                                                                                              |  1199     4
   251       |                                                                                                 |  1200     4
   252       |/*                                                                                               |  1201     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  1202     4
   254       | * available. Also make them available when requested so.                                        |  1203     4
   255       | */                                                                                              |  1204     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  1205     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  1206     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  1207     4
   259       |#define __DF_VISIBLE    1                                                                        |  1208     4
   260       |#else                                                                                            |  1209     4
   261       |#define __DF_VISIBLE    0                                                                        |  1210     4
   262       |#endif                                                                                           |  1211     4
   263       |                                                                                                 |  1212     4
   264       |/*-                                                                                              |  1213     4
   265       | * The following definitions are an extension of the behavior originally                         |  1214     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  1215     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    25


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  1216     4
   268       | * header file is included.                                                                      |  1217     4
   269       | *                                                                                               |  1218     4
   270       | * Here's a quick run-down of the versions:                                                      |  1219     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  1220     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  1221     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  1222     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  1223     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  1224     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  1225     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  1226     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  1227     4
   279       | *                                                                                               |  1228     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  1229     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  1230     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  1231     4
   283       | *                                                                                               |  1232     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  1233     4
   285       | */                                                                                              |  1234     4
   286       |                                                                                                 |  1235     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  1236     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  1237     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  1238     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  1239     4
   291       |#endif                                                                                           |  1240     4
   292       |                                                                                                 |  1241     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  1242     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  1243     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  1244     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  1245     4
   297       |#endif                                                                                           |  1246     4
   298       |                                                                                                 |  1247     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  1248     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  1249     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  1250     4
   302       |#define __XSI_VISIBLE           700                                                              |  1251     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  1252     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  1253     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  1254     4
   306       |#define __XSI_VISIBLE           600                                                              |  1255     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  1256     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  1257     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  1258     4
   310       |#define __XSI_VISIBLE           500                                                              |  1259     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  1260     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  1261     4
   313       |#endif                                                                                           |  1262     4
   314       |#endif                                                                                           |  1263     4
   315       |                                                                                                 |  1264     4
   316       |/*                                                                                               |  1265     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  1266     4
   318       | * important.                                                                                    |  1267     4
   319       | */                                                                                              |  1268     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    26


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  1269     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  1270     4
   322       |#endif                                                                                           |  1271     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  1272     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  1273     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  1274     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  1275     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  1276     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  1277     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  1278     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  1279     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  1280     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  1281     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  1282     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  1283     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  1284     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  1285     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  1286     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  1287     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  1288     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  1289     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  1290     4
   342       |#else                                                                                            |  1291     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  1292     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  1293     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  1294     4
   346       |#else                                                                                            |  1295     4
   347       |/*-                                                                                              |  1296     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  1297     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  1298     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  1299     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  1300     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  1301     4
   353       | * a test program to print out the values.                                                       |  1302     4
   354       | *                                                                                               |  1303     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  1304     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  1305     4
   357       | * environment (and in fact we will never get here).                                             |  1306     4
   358       | */                                                                                              |  1307     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  1308     4
   360       |#define __POSIX_VISIBLE         0                                                                |  1309     4
   361       |#define __XSI_VISIBLE           0                                                                |  1310     4
   362       |#define __BSD_VISIBLE           0                                                                |  1311     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  1312     4
   364       |#define __EXT1_VISIBLE          0                                                                |  1313     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  1314     4
   366       |#define __POSIX_VISIBLE         0                                                                |  1315     4
   367       |#define __XSI_VISIBLE           0                                                                |  1316     4
   368       |#define __BSD_VISIBLE           0                                                                |  1317     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  1318     4
   370       |#define __EXT1_VISIBLE          0                                                                |  1319     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  1320     4
   372       |#define __POSIX_VISIBLE         0                                                                |  1321     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    27


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   373       |#define __XSI_VISIBLE           0                                                                |  1322     4
   374       |#define __BSD_VISIBLE           0                                                                |  1323     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  1324     4
   376       |#define __EXT1_VISIBLE          0                                                                |  1325     4
   377       |#else                           /* Default environment: show everything. */                      |  1326     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  1327     4
   379       |#define __XSI_VISIBLE           700                                                              |  1328     4
   380       |#define __BSD_VISIBLE           1                                                                |  1329     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  1330     4
   382       |#define __EXT1_VISIBLE          1                                                                |  1331     4
   383       |#endif                                                                                           |  1332     4
   384       |#endif                                                                                           |  1333     4
   385       |                                                                                                 |  1334     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  1335     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  1336     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  1337     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  1338     4
   390       |#define __EXT1_VISIBLE          1                                                                |  1339     4
   391       |#else                                                                                            |  1340     4
   392       |#define __EXT1_VISIBLE          0                                                                |  1341     4
   393       |#endif                                                                                           |  1342     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  1343     4
   395       |                                                                                                 |  1344     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  1345     4
   397       |#define __NO_TLS 1                                                                               |  1346     4
   398       |#endif                                                                                           |  1347     4
   399       |                                                                                                 |  1348     4
   400       |                                                                                                 |  1349     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  1350     4
   402       |#define __FBSDID(x)                                                                              |  1351     4
   403       |                                                                                                 |  1352     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  1353     4
   405       |#pragma pack(reset)                                                                              |  1354     4
    35       |#include <machine/_types.h>                                                                      |  1355     6
     1       |/* release 2.25.00 */                                                                            |  1356     7
     2       |#pragma pack()                                                                                   |  1357     7
     3       |/*-                                                                                              |  1358     7
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  1359     7
     5       | * Copyright (c) 1990, 1993                                                                      |  1360     7
     6       | *      The Regents of the University of California.  All rights reserved.                       |  1361     7
     7       | *                                                                                               |  1362     7
     8       | * Redistribution and use in source and binary forms, with or without                            |  1363     7
     9       | * modification, are permitted provided that the following conditions                            |  1364     7
    10       | * are met:                                                                                      |  1365     7
    11       | * 1. Redistributions of source code must retain the above copyright                             |  1366     7
    12       | *    notice, this list of conditions and the following disclaimer.                              |  1367     7
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  1368     7
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  1369     7
    15       | *    documentation and/or other materials provided with the distribution.                       |  1370     7
    16       | * 3. All advertising materials mentioning features or use of this software                      |  1371     7
    17       | *    must display the following acknowledgement:                                                |  1372     7
    18       | *      This product includes software developed by the University of                            |  1373     7
    19       | *      California, Berkeley and its contributors.                                               |  1374     7
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    28


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  1375     7
    21       | *    may be used to endorse or promote products derived from this software                      |  1376     7
    22       | *    without specific prior written permission.                                                 |  1377     7
    23       | *                                                                                               |  1378     7
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  1379     7
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  1380     7
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  1381     7
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  1382     7
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  1383     7
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  1384     7
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  1385     7
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  1386     7
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  1387     7
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  1388     7
    34       | * SUCH DAMAGE.                                                                                  |  1389     7
    35       | *                                                                                               |  1390     7
    36       | *      From: @(#)ansi.h        8.2 (Berkeley) 1/4/94                                            |  1391     7
    37       | *      From: @(#)types.h       8.3 (Berkeley) 1/5/94                                            |  1392     7
    38       | * $FreeBSD: src/sys/i386/include/_types.h,v 1.12 2005/07/02 23:13:31                            |  1393     7
    39       | *  thompsa Exp $                                                                                |  1394     7
    40       | */                                                                                              |  1395     7
    41       |                                                                                                 |  1396     7
    42       |#ifndef _MACHINE__TYPES_H_                                                                       |  1397     7
    43       |#define _MACHINE__TYPES_H_                                                                       |  1398     7
    44       |                                                                                                 |  1399     7
    45       |#ifndef _SYS_CDEFS_H_                                                                            |  1400     7
    46       |#error this file needs sys/cdefs.h as a prerequisite                                             |  1401     7
    47       |#endif                                                                                           |  1402     7
    48       |                                                                                                 |  1403     7
    49       |#define __NO_STRICT_ALIGNMENT                                                                    |  1404     7
    50       |                                                                                                 |  1405     7
    51       |/*                                                                                               |  1406     7
    52       | * Basic types upon which most other types are built.                                            |  1407     7
    53       | */                                                                                              |  1408     7
    54       |typedef __signed char           __int8_t;                                                        |  1409     7
    54       +typedef signed char             __int8_t;                                                        +  1409     7
    55       |typedef unsigned char           __uint8_t;                                                       |  1410     7
    56       |typedef short                   __int16_t;                                                       |  1411     7
    57       |typedef unsigned short          __uint16_t;                                                      |  1412     7
    58       |typedef int                     __int32_t;                                                       |  1413     7
    59       |typedef unsigned int            __uint32_t;                                                      |  1414     7
    60       |                                                                                                 |  1415     7
    61       |#if defined(lint)                                                                                |  1416     7
    62       |/* LONGLONG */                                                                                   |  1417     7
    63       |typedef long long               __int64_t;                                                       |  1418     7
    64       |/* LONGLONG */                                                                                   |  1419     7
    65       |typedef unsigned long long      __uint64_t;                                                      |  1420     7
    66       |#elif defined(__GNUCLIKE_ATTRIBUTE_MODE_DI)                                                      |  1421     7
    67       |typedef int __attribute__((__mode__(__DI__)))           __int64_t;                               |  1422     7
    68       |typedef unsigned int __attribute__((__mode__(__DI__)))  __uint64_t;                              |  1423     7
    69       |#else                                                                                            |  1424     7
    70       |/* LONGLONG */                                                                                   |  1425     7
    71       |typedef long long               __int64_t;                                                       |  1426     7
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    29


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    72       |/* LONGLONG */                                                                                   |  1427     7
    73       |typedef unsigned long long      __uint64_t;                                                      |  1428     7
    74       |#endif                                                                                           |  1429     7
    75       |                                                                                                 |  1430     7
    76       |/*                                                                                               |  1431     7
    77       | * Standard type definitions.                                                                    |  1432     7
    78       | */                                                                                              |  1433     7
    79       |typedef unsigned long   __clock_t;              /* clock()... */                                 |  1434     7
    80       |typedef unsigned int    __cpumask_t;                                                             |  1435     7
    81       |typedef __int32_t       __critical_t;                                                            |  1436     7
    82       |typedef double          __double_t;                                                              |  1437     7
    83       |typedef double          __float_t;                                                               |  1438     7
    84       |#ifdef __SYSC_64BIT__                                                                            |  1439     7
    85       |typedef __int64_t       __intfptr_t;                                                             |  1440     7
    86       |#else /* !__SYSC_64_BIT__: */                                                                    |  1441     7
    87       |typedef __int32_t       __intfptr_t;                                                             |  1442     7
    88       |#endif /* __SYSC_64_BIT__ */                                                                     |  1443     7
    89       |typedef __int64_t       __intmax_t;                                                              |  1444     7
    90       |typedef __int32_t       __int_fast8_t;                                                           |  1445     7
    91       |typedef __int32_t       __int_fast16_t;                                                          |  1446     7
    92       |typedef __int32_t       __int_fast32_t;                                                          |  1447     7
    93       |typedef __int64_t       __int_fast64_t;                                                          |  1448     7
    94       |typedef __int8_t        __int_least8_t;                                                          |  1449     7
    95       |typedef __int16_t       __int_least16_t;                                                         |  1450     7
    96       |typedef __int32_t       __int_least32_t;                                                         |  1451     7
    97       |typedef __int64_t       __int_least64_t;                                                         |  1452     7
    98       |#ifdef __SYSC_64BIT__                                                                            |  1453     7
    99       |typedef __int64_t       __ptrdiff_t;            /* ptr1 - ptr2 */                                |  1454     7
   100       |typedef __int64_t       __register_t;                                                            |  1455     7
   101       |typedef __int64_t       __segsz_t;              /* segment size (in pages) */                    |  1456     7
   102       |/* was "__uint64_t" for __size_t, but I am using "unsigned long" instead                         |  1457     7
   103       | * because it's what the C++ compiler prefers, and it should be the same.  Note                  |  1458     7
   104       | * that this will fall over if (pointer_is_64_bits && !long_is_64_bits), but                     |  1459     7
   105       | * that's not possible at the moment. - Greg 2008/09/24 */                                       |  1460     7
   106       |typedef unsigned long   __size_t;               /* sizeof() */                                   |  1461     7
   107       |typedef __int64_t       __ssize_t;              /* byte count or error */                        |  1462     7
   108       |typedef __int64_t       __time_t;               /* time()... */                                  |  1463     7
   109       |typedef __uint64_t      __uintfptr_t;                                                            |  1464     7
   110       |typedef __int64_t       __intptr_t;                                                              |  1465     7
   111       |typedef __uint64_t      __uintptr_t;                                                             |  1466     7
   112       |typedef __uint64_t      __u_register_t;                                                          |  1467     7
   113       |typedef __uint64_t      __vm_offset_t;                                                           |  1468     7
   114       |typedef __uint64_t      __vm_size_t;                                                             |  1469     7
   115       |#else /* !__SYSC_64_BIT__: */                                                                    |  1470     7
   116       |typedef __int32_t       __ptrdiff_t;            /* ptr1 - ptr2 */                                |  1471     7
   117       |typedef __int32_t       __register_t;                                                            |  1472     7
   118       |typedef __int32_t       __segsz_t;              /* segment size (in pages) */                    |  1473     7
   119       |typedef __uint32_t      __size_t;               /* sizeof() */                                   |  1474     7
   120       |typedef __int32_t       __ssize_t;              /* byte count or error */                        |  1475     7
   121       |typedef __int64_t       __time_t;               /* time()... */                                  |  1476     7
   122       |typedef __uint32_t      __uintfptr_t;                                                            |  1477     7
   123       |typedef __int32_t       __intptr_t;                                                              |  1478     7
   124       |typedef __uint32_t      __uintptr_t;                                                             |  1479     7
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    30


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   125       |typedef __uint32_t      __u_register_t;                                                          |  1480     7
   126       |typedef __uint32_t      __vm_offset_t;                                                           |  1481     7
   127       |typedef __uint32_t      __vm_size_t;                                                             |  1482     7
   128       |#endif /* __SYSC_64_BIT__ */                                                                     |  1483     7
   129       |typedef __uint64_t      __uintmax_t;                                                             |  1484     7
   130       |typedef __uint32_t      __uint_fast8_t;                                                          |  1485     7
   131       |typedef __uint32_t      __uint_fast16_t;                                                         |  1486     7
   132       |typedef __uint32_t      __uint_fast32_t;                                                         |  1487     7
   133       |typedef __uint64_t      __uint_fast64_t;                                                         |  1488     7
   134       |typedef __uint8_t       __uint_least8_t;                                                         |  1489     7
   135       |typedef __uint16_t      __uint_least16_t;                                                        |  1490     7
   136       |typedef __uint32_t      __uint_least32_t;                                                        |  1491     7
   137       |typedef __uint64_t      __uint_least64_t;                                                        |  1492     7
   138       |typedef __int64_t       __vm_ooffset_t;                                                          |  1493     7
   139       |#if defined(PAE) || defined(__SYSC_64BIT__)                                                      |  1494     7
   140       |typedef __uint64_t      __vm_paddr_t;                                                            |  1495     7
   141       |#else                                                                                            |  1496     7
   142       |typedef __uint32_t      __vm_paddr_t;                                                            |  1497     7
   143       |#endif                                                                                           |  1498     7
   144       |typedef __uint64_t      __vm_pindex_t;                                                           |  1499     7
   145       |                                                                                                 |  1500     7
   146       |/*                                                                                               |  1501     7
   147       | * Unusual type definitions.                                                                     |  1502     7
   148       | */                                                                                              |  1503     7
   149       |#ifdef __GNUCLIKE_BUILTIN_VARARGS                                                                |  1504     7
   150       |typedef __builtin_va_list       __va_list;      /* internally known to gcc */                    |  1505     7
   151       |#else                                                                                            |  1506     7
   152       |typedef char *                  __va_list;                                                       |  1507     7
   153       |#endif /* __GNUCLIKE_BUILTIN_VARARGS */                                                          |  1508     7
   154       |#if defined(__GNUC_VA_LIST_COMPATIBILITY) && !defined(__GNUC_VA_LIST) \                          |  1509     7
   155       |    && !defined(__NO_GNUC_VA_LIST)                                                               |  1510     7
   156       |#define __GNUC_VA_LIST                                                                           |  1511     7
   157       |typedef __va_list               __gnuc_va_list; /* compatibility w/GNU headers*/                 |  1512     7
   158       |#endif                                                                                           |  1513     7
   159       |                                                                                                 |  1514     7
   160       |#endif /* !_MACHINE__TYPES_H_ */                                                                 |  1515     7
   161       |#pragma pack(reset)                                                                              |  1516     7
    36       |                                                                                                 |  1517     6
    37       |/*                                                                                               |  1518     6
    38       | * Standard type definitions.                                                                    |  1519     6
    39       | */                                                                                              |  1520     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  1521     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  1522     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  1523     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  1524     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  1525     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  1526     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  1527     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  1528     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  1529     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  1530     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  1531     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  1532     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    31


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |typedef int             __nl_item;                                                               |  1533     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  1534     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  1535     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  1536     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  1537     6
    57       |                                        /* signed, because of legacy code */                     |  1538     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  1539     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  1540     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  1541     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  1542     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  1543     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  1544     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  1545     6
    65       |                                                                                                 |  1546     6
    66       |/*                                                                                               |  1547     6
    67       | * Unusual type definitions.                                                                     |  1548     6
    68       | */                                                                                              |  1549     6
    69       |/*                                                                                               |  1550     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  1551     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  1552     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  1553     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  1554     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  1555     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  1556     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  1557     6
    77       | *                                                                                               |  1558     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  1559     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  1560     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  1561     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  1562     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  1563     6
    83       | */                                                                                              |  1564     6
    84       |#ifdef __cplusplus                                                                               |  1565     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  1566     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  1567     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  1568     6
    88       |#else                                                                                            |  1569     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  1570     6
    90       |#endif                                                                                           |  1571     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  1572     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  1573     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  1574     6
    94       |                                                                                                 |  1575     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  1576     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  1577     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  1578     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  1579     6
    99       |#endif                                                                                           |  1580     6
   100       |                                                                                                 |  1581     6
   101       |#if !defined(__cplusplus)                                                                        |  1582     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  1583     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  1584     6
   104       |#endif                                                                                           |  1585     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    32


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   105       |                                                                                                 |  1586     6
   106       |                                                                                                 |  1587     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  1588     6
   108       |                                                                                                 |  1589     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  1590     6
   110       |                                                                                                 |  1591     6
   111       |/*                                                                                               |  1592     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  1593     6
   113       | * stream conversions.                                                                           |  1594     6
   114       | */                                                                                              |  1595     6
   115       |typedef union {                                                                                  |  1596     6
   116       |        char            __mbstate8[128];                                                         |  1597     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  1598     6
   118       |} __mbstate_t;                                                                                   |  1599     6
   119       |                                                                                                 |  1600     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  1601     6
   121       |#pragma pack(reset)                                                                              |  1602     6
    39       |                                                                                                 |  1603     5
    40       |#ifdef __cplusplus                                                                               |  1604     5
    41       |extern "C" {                                                                                     |  1605     5
    42       |#endif                                                                                           |  1606     5
    43       |                                                                                                 |  1607     5
    44       |/*                                                                                               |  1608     5
    45       | * Define the order of 32-bit words in 64-bit words.                                             |  1609     5
    46       | */                                                                                              |  1610     5
    47       |#define _QUAD_HIGHWORD 1                                                                         |  1611     5
    48       |#define _QUAD_LOWWORD 0                                                                          |  1612     5
    49       |                                                                                                 |  1613     5
    50       |/*                                                                                               |  1614     5
    51       | * Definitions for byte order, according to byte significance from low                           |  1615     5
    52       | * address to high.                                                                              |  1616     5
    53       | */                                                                                              |  1617     5
    54       |#define _LITTLE_ENDIAN  1234    /* LSB first: i386, vax */                                       |  1618     5
    55       |#define _BIG_ENDIAN     4321    /* MSB first: 68000, ibm, net */                                 |  1619     5
    56       |#define _PDP_ENDIAN     3412    /* LSB first in word, MSW first in long */                       |  1620     5
    57       |                                                                                                 |  1621     5
    58       |#define _BYTE_ORDER     _BIG_ENDIAN                                                              |  1622     5
    59       |                                                                                                 |  1623     5
    60       |/*                                                                                               |  1624     5
    61       | * Deprecated variants that don't have enough underscores to be useful in more                   |  1625     5
    62       | * strict namespaces.                                                                            |  1626     5
    63       | */                                                                                              |  1627     5
    64       |#if __BSD_VISIBLE                                                                                |  1628     5
    65       |#define LITTLE_ENDIAN   _LITTLE_ENDIAN                                                           |  1629     5
    66       |#define BIG_ENDIAN      _BIG_ENDIAN                                                              |  1630     5
    67       |#define PDP_ENDIAN      _PDP_ENDIAN                                                              |  1631     5
    68       |#define BYTE_ORDER      _BYTE_ORDER                                                              |  1632     5
    69       |#endif                                                                                           |  1633     5
    70       |                                                                                                 |  1634     5
    70       +                                                                                                 +  1634     5
    71       |/*                                                                                               |  1635     5
    72       | * The mainframe architecture is in "network" order, so there                                    |  1636     5
    73       | * is nothing for these macros to do.                                                            |  1637     5
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    33


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    74       | */                                                                                              |  1638     5
    75       |#define __htonl(x)      (x)                                                                      |  1639     5
    76       |#define __htons(x)      (x)                                                                      |  1640     5
    77       |#define __ntohl(x)      (x)                                                                      |  1641     5
    78       |#define __ntohs(x)      (x)                                                                      |  1642     5
    79       |                                                                                                 |  1643     5
    80       |#ifdef __cplusplus                                                                               |  1644     5
    81       |}                                                                                                |  1645     5
    82       |#endif                                                                                           |  1646     5
    83       |                                                                                                 |  1647     5
    84       |#endif /* !_MACHINE_ENDIAN_H_ */                                                                 |  1648     5
    85       |#pragma pack(reset)                                                                              |  1649     5
    47       |#include <sys/_types.h>                                                                          |  1650     3
     1       |/* release 2.25.00 */                                                                            |  1651     6
     2       |#pragma pack()                                                                                   |  1652     6
     3       |/*-                                                                                              |  1653     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  1654     6
     5       | * All rights reserved.                                                                          |  1655     6
     6       | *                                                                                               |  1656     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  1657     6
     8       | * modification, are permitted provided that the following conditions                            |  1658     6
     9       | * are met:                                                                                      |  1659     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  1660     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  1661     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  1662     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  1663     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  1664     6
    15       | *                                                                                               |  1665     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  1666     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  1667     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  1668     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  1669     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  1670     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  1671     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  1672     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  1673     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  1674     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  1675     6
    26       | * SUCH DAMAGE.                                                                                  |  1676     6
    27       | *                                                                                               |  1677     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  1678     6
    29       | */                                                                                              |  1679     6
    30       |                                                                                                 |  1680     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  1681     6
    32       |#define _SYS__TYPES_H_                                                                           |  1682     6
    33       |                                                                                                 |  1683     6
    34       |#include <sys/cdefs.h>                                                                           |  1684     6
    35       |#include <machine/_types.h>                                                                      |  1685     6
    36       |                                                                                                 |  1686     6
    37       |/*                                                                                               |  1687     6
    38       | * Standard type definitions.                                                                    |  1688     6
    39       | */                                                                                              |  1689     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  1690     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    34


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  1691     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  1692     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  1693     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  1694     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  1695     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  1696     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  1697     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  1698     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  1699     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  1700     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  1701     6
    52       |typedef int             __nl_item;                                                               |  1702     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  1703     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  1704     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  1705     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  1706     6
    57       |                                        /* signed, because of legacy code */                     |  1707     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  1708     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  1709     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  1710     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  1711     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  1712     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  1713     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  1714     6
    65       |                                                                                                 |  1715     6
    66       |/*                                                                                               |  1716     6
    67       | * Unusual type definitions.                                                                     |  1717     6
    68       | */                                                                                              |  1718     6
    69       |/*                                                                                               |  1719     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  1720     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  1721     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  1722     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  1723     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  1724     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  1725     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  1726     6
    77       | *                                                                                               |  1727     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  1728     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  1729     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  1730     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  1731     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  1732     6
    83       | */                                                                                              |  1733     6
    84       |#ifdef __cplusplus                                                                               |  1734     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  1735     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  1736     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  1737     6
    88       |#else                                                                                            |  1738     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  1739     6
    90       |#endif                                                                                           |  1740     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  1741     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  1742     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  1743     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    35


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    94       |                                                                                                 |  1744     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  1745     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  1746     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  1747     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  1748     6
    99       |#endif                                                                                           |  1749     6
   100       |                                                                                                 |  1750     6
   101       |#if !defined(__cplusplus)                                                                        |  1751     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  1752     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  1753     6
   104       |#endif                                                                                           |  1754     6
   105       |                                                                                                 |  1755     6
   106       |                                                                                                 |  1756     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  1757     6
   108       |                                                                                                 |  1758     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  1759     6
   110       |                                                                                                 |  1760     6
   111       |/*                                                                                               |  1761     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  1762     6
   113       | * stream conversions.                                                                           |  1763     6
   114       | */                                                                                              |  1764     6
   115       |typedef union {                                                                                  |  1765     6
   116       |        char            __mbstate8[128];                                                         |  1766     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  1767     6
   118       |} __mbstate_t;                                                                                   |  1768     6
   119       |                                                                                                 |  1769     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  1770     6
   121       |#pragma pack(reset)                                                                              |  1771     6
    48       |                                                                                                 |  1772     3
    49       |#include <sys/_pthreadtypes.h>                                                                   |  1773     3
     1       |/* release 2.25.00 */                                                                            |  1774     8
     2       |#pragma pack()                                                                                   |  1775     8
     3       |/*                                                                                               |  1776     8
     4       | * Copyright (c) 1993, 1994 by Chris Provenzano, proven@mit.edu                                  |  1777     8
     5       | * Copyright (c) 1995-1998 by John Birrell <jb@cimlogic.com.au>                                  |  1778     8
     6       | * All rights reserved.                                                                          |  1779     8
     7       | *                                                                                               |  1780     8
     8       | * Redistribution and use in source and binary forms, with or without                            |  1781     8
     9       | * modification, are permitted provided that the following conditions                            |  1782     8
    10       | * are met:                                                                                      |  1783     8
    11       | * 1. Redistributions of source code must retain the above copyright                             |  1784     8
    12       | *    notice, this list of conditions and the following disclaimer.                              |  1785     8
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  1786     8
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  1787     8
    15       | *    documentation and/or other materials provided with the distribution.                       |  1788     8
    16       | * 3. All advertising materials mentioning features or use of this software                      |  1789     8
    17       | *    must display the following acknowledgement:                                                |  1790     8
    18       | *  This product includes software developed by Chris Provenzano.                                |  1791     8
    19       | * 4. The name of Chris Provenzano may not be used to endorse or promote                         |  1792     8
    20       | *        products derived from this software without specific prior written                     |  1793     8
    21       | *        permission.                                                                            |  1794     8
    22       | *                                                                                               |  1795     8
    23       | * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND                                   |  1796     8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    36


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  1797     8
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  1798     8
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY                         |  1799     8
    27       | * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES                    |  1800     8
    28       | * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR                            |  1801     8
    29       | * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER                    |  1802     8
    30       | * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                            |  1803     8
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  1804     8
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  1805     8
    33       | * SUCH DAMAGE.                                                                                  |  1806     8
    34       | *                                                                                               |  1807     8
    35       | * $FreeBSD: src/sys/sys/_pthreadtypes.h,v 1.1 2005/05/31 15:18:17 rodrigc Exp $                 |  1808     8
    36       | */                                                                                              |  1809     8
    37       |                                                                                                 |  1810     8
    38       |#ifndef _SYS__PTHREADTYPES_H_                                                                    |  1811     8
    39       |#define _SYS__PTHREADTYPES_H_                                                                    |  1812     8
    40       |                                                                                                 |  1813     8
    41       |/*                                                                                               |  1814     8
    42       | * Forward structure definitions.                                                                |  1815     8
    43       | *                                                                                               |  1816     8
    44       | * These are mostly opaque to the user.                                                          |  1817     8
    45       | */                                                                                              |  1818     8
    46       |struct __pthread;                                                                                |  1819     8
    47       |struct pthread;                                                                                  |  1820     8
    48       |struct pthread_cond_attr;                                                                        |  1821     8
    49       |struct pthread_mutex_attr;                                                                       |  1822     8
    50       |struct pthread_once;                                                                             |  1823     8
    51       |struct pthread_rwlockattr;                                                                       |  1824     8
    52       |struct pthread_barrier_attr;                                                                     |  1825     8
    53       |struct pthread_spinlock;                                                                         |  1826     8
    54       |struct pthread_attr { union { int __i[16]; volatile int __vi[16];                                |  1827     8
    55       |                              unsigned long __s[8]; } __u; };                                    |  1828     8
    56       |struct pthread_mutex { union { int __i[10]; volatile int __vi[10];                               |  1829     8
    57       |                               volatile void *volatile __p[5]; } __u; };                         |  1830     8
    58       |struct pthread_cond { union { int __i[12]; volatile int __vi[12];                                |  1831     8
    59       |                              void *__p[6]; } __u; };                                            |  1832     8
    60       |struct pthread_rwlock { union { int __i[14]; volatile int __vi[14];                              |  1833     8
    61       |                                void *__p[7]; } __u; };                                          |  1834     8
    62       |struct pthread_barrier { union { int __i[8]; volatile int __vi[8];                               |  1835     8
    63       |                                 void *__p[4]; } __u; };                                         |  1836     8
    64       |                                                                                                 |  1837     8
    65       |                                                                                                 |  1838     8
    66       |/*                                                                                               |  1839     8
    67       | * Primitive system data type definitions required by P1003.1c.                                  |  1840     8
    68       | *                                                                                               |  1841     8
    69       | * Note that P1003.1c specifies that there are no defined comparison                             |  1842     8
    70       | * or assignment operators for the types pthread_attr_t, pthread_cond_t,                         |  1843     8
    71       | * pthread_condattr_t, pthread_mutex_t, pthread_mutexattr_t.                                     |  1844     8
    72       | */                                                                                              |  1845     8
    73       |#ifndef _PTHREAD_T_DECLARED                                                                      |  1846     8
    74       |typedef struct __pthread                        *pthread_t;                                      |  1847     8
    75       |#define _PTHREAD_T_DECLARED                                                                      |  1848     8
    76       |#endif                                                                                           |  1849     8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    37


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    77       |typedef struct  pthread_attr            pthread_attr_t;                                          |  1850     8
    78       |typedef struct  pthread_mutex           pthread_mutex_t;                                         |  1851     8
    79       |typedef struct { unsigned __attr; }     pthread_mutexattr_t;                                     |  1852     8
    80       |typedef struct  pthread_cond            pthread_cond_t;                                          |  1853     8
    81       |typedef struct { unsigned __attr; }     pthread_condattr_t;                                      |  1854     8
    82       |typedef unsigned int                    pthread_key_t;                                           |  1855     8
    83       |typedef int                             pthread_once_t;                                          |  1856     8
    84       |typedef struct { union { int __i[14]; volatile int __vi[14];                                     |  1857     8
    85       |                         void *__p[7]; } __u; } pthread_rwlock_t;                                |  1858     8
    86       |typedef struct { unsigned __attr[2]; }  pthread_rwlockattr_t;                                    |  1859     8
    87       |typedef struct pthread_barrier          pthread_barrier_t;                                       |  1860     8
    88       |typedef struct { unsigned __attr; }     pthread_barrierattr_t;                                   |  1861     8
    89       |typedef int                             pthread_spinlock_t;                                      |  1862     8
    90       |                                                                                                 |  1863     8
    91       |/*                                                                                               |  1864     8
    92       | * Additional type definitions:                                                                  |  1865     8
    93       | *                                                                                               |  1866     8
    94       | * Note that P1003.1c reserves the prefixes pthread_ and PTHREAD_ for                            |  1867     8
    95       | * use in header symbols.                                                                        |  1868     8
    96       | */                                                                                              |  1869     8
    97       |typedef void    *pthread_addr_t;                                                                 |  1870     8
    98       |typedef void    *(*pthread_startroutine_t)(void *);                                              |  1871     8
    99       |                                                                                                 |  1872     8
   100       |#endif /* ! _SYS__PTHREADTYPES_H_ */                                                             |  1873     8
   101       |#pragma pack(reset)                                                                              |  1874     8
    50       |                                                                                                 |  1875     3
    51       |#if __BSD_VISIBLE                                                                                |  1876     3
    52       |typedef unsigned char   u_char;                                                                  |  1877     3
    52       +typedef unsigned char   u_char;                                                                  +  1877     3
    53       |typedef unsigned short  u_short;                                                                 |  1878     3
    54       |typedef unsigned int    u_int;                                                                   |  1879     3
    55       |typedef unsigned long   u_long;                                                                  |  1880     3
    56       |#ifndef _KERNEL                                                                                  |  1881     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                |  1882     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                |  1883     3
    59       |#endif                                                                                           |  1884     3
    60       |#endif                                                                                           |  1885     3
    61       |                                                                                                 |  1886     3
    62       |/*                                                                                               |  1887     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          |  1888     3
    64       | */                                                                                              |  1889     3
    65       |#ifndef _INT8_T_DECLARED                                                                         |  1890     3
    66       |typedef __int8_t        int8_t;                                                                  |  1891     3
    67       |#define _INT8_T_DECLARED                                                                         |  1892     3
    68       |#endif                                                                                           |  1893     3
    69       |                                                                                                 |  1894     3
    70       |#ifndef _INT16_T_DECLARED                                                                        |  1895     3
    71       |typedef __int16_t       int16_t;                                                                 |  1896     3
    72       |#define _INT16_T_DECLARED                                                                        |  1897     3
    73       |#endif                                                                                           |  1898     3
    74       |                                                                                                 |  1899     3
    75       |#ifndef _INT32_T_DECLARED                                                                        |  1900     3
    76       |typedef __int32_t       int32_t;                                                                 |  1901     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    38


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    77       |#define _INT32_T_DECLARED                                                                        |  1902     3
    78       |#endif                                                                                           |  1903     3
    79       |                                                                                                 |  1904     3
    80       |#ifndef _INT64_T_DECLARED                                                                        |  1905     3
    81       |typedef __int64_t       int64_t;                                                                 |  1906     3
    82       |#define _INT64_T_DECLARED                                                                        |  1907     3
    83       |#endif                                                                                           |  1908     3
    84       |                                                                                                 |  1909     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        |  1910     3
    86       |typedef __uint8_t       uint8_t;                                                                 |  1911     3
    87       |#define _UINT8_T_DECLARED                                                                        |  1912     3
    88       |#endif                                                                                           |  1913     3
    89       |                                                                                                 |  1914     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       |  1915     3
    91       |typedef __uint16_t      uint16_t;                                                                |  1916     3
    92       |#define _UINT16_T_DECLARED                                                                       |  1917     3
    93       |#endif                                                                                           |  1918     3
    94       |                                                                                                 |  1919     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       |  1920     3
    96       |typedef __uint32_t      uint32_t;                                                                |  1921     3
    97       |#define _UINT32_T_DECLARED                                                                       |  1922     3
    98       |#endif                                                                                           |  1923     3
    99       |                                                                                                 |  1924     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       |  1925     3
   101       |typedef __uint64_t      uint64_t;                                                                |  1926     3
   102       |#define _UINT64_T_DECLARED                                                                       |  1927     3
   103       |#endif                                                                                           |  1928     3
   104       |                                                                                                 |  1929     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       |  1930     3
   106       |typedef __intptr_t      intptr_t;                                                                |  1931     3
   107       |typedef __uintptr_t     uintptr_t;                                                               |  1932     3
   108       |#define _INTPTR_T_DECLARED                                                                       |  1933     3
   109       |#endif                                                                                           |  1934     3
   110       |                                                                                                 |  1935     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    |  1936     3
   112       |typedef __uint16_t      u_int16_t;                                                               |  1937     3
   113       |typedef __uint32_t      u_int32_t;                                                               |  1938     3
   114       |typedef __uint64_t      u_int64_t;                                                               |  1939     3
   115       |                                                                                                 |  1940     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 |  1941     3
   117       |typedef __int64_t       quad_t;                                                                  |  1942     3
   118       |typedef quad_t *        qaddr_t;                                                                 |  1943     3
   119       |                                                                                                 |  1944     3
   120       |typedef char *          caddr_t;        /* core address */                                       |  1945     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     |  1946     3
   121       +typedef const char *    c_caddr_t;                                                               +  1946     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  |  1947     3
   122       +typedef volatile char *v_caddr_t;                                                                +  1947     3
   123       |                                                                                                 |  1948     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      |  1949     3
   125       |typedef __blksize_t     blksize_t;                                                               |  1950     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      |  1951     3
   127       |#endif                                                                                           |  1952     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    39


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   128       |                                                                                                 |  1953     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       |  1954     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                |  1955     3
   131       |#define _BLKCNT_T_DECLARED                                                                       |  1956     3
   132       |#endif                                                                                           |  1957     3
   133       |                                                                                                 |  1958     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        |  1959     3
   135       |typedef __clock_t       clock_t;                                                                 |  1960     3
   136       |#define _CLOCK_T_DECLARED                                                                        |  1961     3
   137       |#endif                                                                                           |  1962     3
   138       |                                                                                                 |  1963     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      |  1964     3
   140       |typedef __clockid_t     clockid_t;                                                               |  1965     3
   141       |#define _CLOCKID_T_DECLARED                                                                      |  1966     3
   142       |#endif                                                                                           |  1967     3
   143       |                                                                                                 |  1968     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             |  1969     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       |  1970     3
   146       |                                                                                                 |  1971     3
   147       |#ifndef _DEV_T_DECLARED                                                                          |  1972     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       |  1973     3
   149       |#define _DEV_T_DECLARED                                                                          |  1974     3
   150       |#endif                                                                                           |  1975     3
   151       |                                                                                                 |  1976     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       |  1977     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         |  1978     3
   154       |#define _FFLAGS_T_DECLARED                                                                       |  1979     3
   155       |#endif                                                                                           |  1980     3
   156       |                                                                                                 |  1981     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 |  1982     3
   158       |                                                                                                 |  1983     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      |  1984     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              |  1985     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              |  1986     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     |  1987     3
   163       |#endif                                                                                           |  1988     3
   164       |                                                                                                 |  1989     3
   165       |#ifndef _GID_T_DECLARED                                                                          |  1990     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           |  1991     3
   167       |#define _GID_T_DECLARED                                                                          |  1992     3
   168       |#endif                                                                                           |  1993     3
   169       |                                                                                                 |  1994     3
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      |  1995     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     |  1996     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      |  1997     3
   173       |#endif                                                                                           |  1998     3
   174       |                                                                                                 |  1999     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      |  2000     3
   176       |typedef __uint16_t      in_port_t;                                                               |  2001     3
   177       |#define _IN_PORT_T_DECLARED                                                                      |  2002     3
   178       |#endif                                                                                           |  2003     3
   179       |                                                                                                 |  2004     3
   180       |#ifndef _ID_T_DECLARED                                                                           |  2005     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    40


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          |  2006     3
   182       |#define _ID_T_DECLARED                                                                           |  2007     3
   183       |#endif                                                                                           |  2008     3
   184       |                                                                                                 |  2009     3
   185       |#ifndef _INO_T_DECLARED                                                                          |  2010     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       |  2011     3
   187       |#define _INO_T_DECLARED                                                                          |  2012     3
   188       |#endif                                                                                           |  2013     3
   189       |                                                                                                 |  2014     3
   190       |#ifndef _KEY_T_DECLARED                                                                          |  2015     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            |  2016     3
   192       |#define _KEY_T_DECLARED                                                                          |  2017     3
   193       |#endif                                                                                           |  2018     3
   194       |                                                                                                 |  2019     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        |  2020     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             |  2021     3
   197       |#define _LWPID_T_DECLARED                                                                        |  2022     3
   198       |#endif                                                                                           |  2023     3
   199       |                                                                                                 |  2024     3
   200       |#ifndef _MODE_T_DECLARED                                                                         |  2025     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        |  2026     3
   202       |#define _MODE_T_DECLARED                                                                         |  2027     3
   203       |#endif                                                                                           |  2028     3
   204       |                                                                                                 |  2029     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        |  2030     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         |  2031     3
   207       |#define _NLINK_T_DECLARED                                                                        |  2032     3
   208       |#endif                                                                                           |  2033     3
   209       |                                                                                                 |  2034     3
   210       |#ifndef _OFF_T_DECLARED                                                                          |  2035     3
   211       |typedef __off_t         off_t;          /* file offset */                                        |  2036     3
   212       |#define _OFF_T_DECLARED                                                                          |  2037     3
   213       |#endif                                                                                           |  2038     3
   214       |                                                                                                 |  2039     3
   215       |#ifndef _PID_T_DECLARED                                                                          |  2040     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         |  2041     3
   217       |#define _PID_T_DECLARED                                                                          |  2042     3
   218       |#endif                                                                                           |  2043     3
   219       |                                                                                                 |  2044     3
   220       |typedef __register_t    register_t;                                                              |  2045     3
   221       |                                                                                                 |  2046     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         |  2047     3
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     |  2048     3
   224       |#define _RLIM_T_DECLARED                                                                         |  2049     3
   225       |#endif                                                                                           |  2050     3
   226       |                                                                                                 |  2051     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            |  2052     3
   228       |                                                                                                 |  2053     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         |  2054     3
   230       |typedef __size_t        size_t;                                                                  |  2055     3
   231       |#define _SIZE_T_DECLARED                                                                         |  2056     3
   232       |#endif                                                                                           |  2057     3
   233       |                                                                                                 |  2058     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    41


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   234       |#ifndef _SSIZE_T_DECLARED                                                                        |  2059     3
   235       |typedef __ssize_t       ssize_t;                                                                 |  2060     3
   236       |#define _SSIZE_T_DECLARED                                                                        |  2061     3
   237       |#endif                                                                                           |  2062     3
   238       |                                                                                                 |  2063     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  2064     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              |  2065     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    |  2066     3
   242       |#endif                                                                                           |  2067     3
   243       |                                                                                                 |  2068     3
   244       |#ifndef _TIME_T_DECLARED                                                                         |  2069     3
   245       |typedef __time_t        time_t;                                                                  |  2070     3
   246       |#define _TIME_T_DECLARED                                                                         |  2071     3
   247       |#endif                                                                                           |  2072     3
   248       |                                                                                                 |  2073     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        |  2074     3
   250       |typedef __timer_t       timer_t;                                                                 |  2075     3
   251       |#define _TIMER_T_DECLARED                                                                        |  2076     3
   252       |#endif                                                                                           |  2077     3
   253       |                                                                                                 |  2078     3
   254       |typedef __u_register_t  u_register_t;                                                            |  2079     3
   255       |                                                                                                 |  2080     3
   256       |#ifndef _UID_T_DECLARED                                                                          |  2081     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            |  2082     3
   258       |#define _UID_T_DECLARED                                                                          |  2083     3
   259       |#endif                                                                                           |  2084     3
   260       |                                                                                                 |  2085     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     |  2086     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            |  2087     3
   263       |#define _USECONDS_T_DECLARED                                                                     |  2088     3
   264       |#endif                                                                                           |  2089     3
   265       |                                                                                                 |  2090     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             |  2091     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            |  2092     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              |  2093     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             |  2094     3
   270       |typedef __vm_size_t     vm_size_t;                                                               |  2095     3
   271       |                                                                                                 |  2096     3
   272       |#ifdef _KERNEL                                                                                   |  2097     3
   273       |typedef int             boolean_t;                                                               |  2098     3
   274       |typedef __cpumask_t     cpumask_t;                                                               |  2099     3
   275       |typedef __intfptr_t     intfptr_t;                                                               |  2100     3
   276       |                                                                                                 |  2101     3
   277       |/*-                                                                                              |  2102     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      |  2103     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           |  2104     3
   280       | * compatibility is essential.  Least-width types should be used even less                       |  2105     3
   281       | * since they provide smaller benefits.                                                          |  2106     3
   282       | * XXX should be MD.                                                                             |  2107     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     |  2108     3
   284       | */                                                                                              |  2109     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 |  2110     3
   286       |                                                                                                 |  2111     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    42


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   287       |typedef __uintfptr_t    uintfptr_t;                                                              |  2112     3
   288       |typedef __uint64_t      uoff_t;                                                                  |  2113     3
   289       |typedef struct vm_page  *vm_page_t;                                                              |  2114     3
   290       |                                                                                                 |  2115     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            |  2116     3
   292       |                                                                                                 |  2117     3
   293       |#endif /* !_KERNEL */                                                                            |  2118     3
   294       |                                                                                                 |  2119     3
   295       |/*                                                                                               |  2120     3
   296       | * The following are all things that really shouldn't exist in this header,                      |  2121     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          |  2122     3
   298       | */                                                                                              |  2123     3
   299       |#if __BSD_VISIBLE                                                                                |  2124     3
   300       |                                                                                                 |  2125     3
   300       +                                                                                                 +  2125     3
   301       |#include <sys/select.h>                                                                          |  2126     3
     1       |/* release 2.25.00 */                                                                            |  2127     9
     2       |#pragma pack()                                                                                   |  2128     9
     3       |/*-                                                                                              |  2129     9
     4       | * Copyright (c) 1992, 1993                                                                      |  2130     9
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2131     9
     6       | *                                                                                               |  2132     9
     7       | * Redistribution and use in source and binary forms, with or without                            |  2133     9
     8       | * modification, are permitted provided that the following conditions                            |  2134     9
     9       | * are met:                                                                                      |  2135     9
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2136     9
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2137     9
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2138     9
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2139     9
    14       | *    documentation and/or other materials provided with the distribution.                       |  2140     9
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  2141     9
    16       | *    may be used to endorse or promote products derived from this software                      |  2142     9
    17       | *    without specific prior written permission.                                                 |  2143     9
    18       | *                                                                                               |  2144     9
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2145     9
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2146     9
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2147     9
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2148     9
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2149     9
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2150     9
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2151     9
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2152     9
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2153     9
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2154     9
    29       | * SUCH DAMAGE.                                                                                  |  2155     9
    30       | *                                                                                               |  2156     9
    31       | * $FreeBSD: src/sys/sys/select.h,v 1.19.8.1 2006/01/13 03:11:16 marcel Exp $                    |  2157     9
    32       | */                                                                                              |  2158     9
    33       |                                                                                                 |  2159     9
    34       |#ifndef _SYS_SELECT_H_                                                                           |  2160     9
    35       |#define _SYS_SELECT_H_                                                                           |  2161     9
    36       |                                                                                                 |  2162     9
    37       |#include <sys/cdefs.h>                                                                           |  2163     9
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    43


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/* release 2.25.00 */                                                                            |  2164     4
     2       |#pragma pack()                                                                                   |  2165     4
     3       |/*                                                                                               |  2166     4
     4       | * Copyright (c) 1991, 1993                                                                      |  2167     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2168     4
     6       | *                                                                                               |  2169     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  2170     4
     8       | * Berkeley Software Design, Inc.                                                                |  2171     4
     9       | *                                                                                               |  2172     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  2173     4
    11       | * modification, are permitted provided that the following conditions                            |  2174     4
    12       | * are met:                                                                                      |  2175     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  2176     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  2177     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2178     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  2179     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  2180     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  2181     4
    19       | *    must display the following acknowledgement:                                                |  2182     4
    20       | *      This product includes software developed by the University of                            |  2183     4
    21       | *      California, Berkeley and its contributors.                                               |  2184     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  2185     4
    23       | *    may be used to endorse or promote products derived from this software                      |  2186     4
    24       | *    without specific prior written permission.                                                 |  2187     4
    25       | *                                                                                               |  2188     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2189     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2190     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2191     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2192     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2193     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2194     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2195     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2196     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2197     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2198     4
    36       | * SUCH DAMAGE.                                                                                  |  2199     4
    37       | *                                                                                               |  2200     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  2201     4
    39       | */                                                                                              |  2202     4
    40       |                                                                                                 |  2203     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  2204     4
    42       |#define _SYS_CDEFS_H_                                                                            |  2205     4
    43       |                                                                                                 |  2206     4
    44       |#if defined(__cplusplus)                                                                         |  2207     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  2208     4
    46       |#define __END_DECLS     }                                                                        |  2209     4
    47       |#else                                                                                            |  2210     4
    48       |#define __BEGIN_DECLS                                                                            |  2211     4
    49       |#define __END_DECLS                                                                              |  2212     4
    50       |#endif                                                                                           |  2213     4
    51       |                                                                                                 |  2214     4
    52       |/*                                                                                               |  2215     4
    53       | * This code has been put in place to help reduce the addition of                                |  2216     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    44


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  2217     4
    55       | * having a compiler-agnostic source tree.                                                       |  2218     4
    56       | */                                                                                              |  2219     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  2220     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  2221     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  2222     4
    60       |                                                                                                 |  2223     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  2224     4
    62       |                                                                                                 |  2225     4
    63       |                                                                                                 |  2226     4
    64       |/*                                                                                               |  2227     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  2228     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  2229     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  2230     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  2231     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  2232     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  2233     4
    71       | * this only works with ANSI C.                                                                  |  2234     4
    72       | *                                                                                               |  2235     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  2236     4
    74       | * first.  It is only available with ANSI C.                                                     |  2237     4
    75       | */                                                                                              |  2238     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  2239     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  2240     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  2241     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  2242     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  2243     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  2244     4
    82       |                                                                                                 |  2245     4
    83       |#define __const         const           /* define reserved names to standard */                  |  2246     4
    84       |#define __signed        signed                                                                   |  2247     4
    85       |#define __volatile      volatile                                                                 |  2248     4
    86       |#if defined(__cplusplus)                                                                         |  2249     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  2250     4
    88       |#else                                                                                            |  2251     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  2252     4
    90       |#endif /* !__cplusplus */                                                                        |  2253     4
    91       |                                                                                                 |  2254     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  2255     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  2256     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  2257     4
    95       |#define __STRING(x)     "x"                                                                      |  2258     4
    96       |                                                                                                 |  2259     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  2260     4
    98       |#define __inline                                                                                 |  2261     4
    99       |#define __signed                                                                                 |  2262     4
   100       |#define __volatile                                                                               |  2263     4
   101       |/*                                                                                               |  2264     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  2265     4
   103       | * deleted from the program and old programs will want them left alone.                          |  2266     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  2267     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  2268     4
   106       | */                                                                                              |  2269     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    45


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  2270     4
   108       |#define const                           /* delete ANSI C keywords */                             |  2271     4
   109       |#define inline                                                                                   |  2272     4
   110       |#define signed                                                                                   |  2273     4
   111       |#define volatile                                                                                 |  2274     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  2275     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  2276     4
   114       |                                                                                                 |  2277     4
   115       |/*                                                                                               |  2278     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  2279     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  2280     4
   118       | */                                                                                              |  2281     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  2282     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  2283     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  2284     4
   122       |#define __unused                                                                                 |  2285     4
   123       |#define __aligned(x)                                                                             |  2286     4
   124       |#define __section(x)                                                                             |  2287     4
   125       |#define __nonnull(x)                                                                             |  2288     4
   126       |#define __used                                                                                   |  2289     4
   127       |                                                                                                 |  2290     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  2291     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  2292     4
   130       |                                                                                                 |  2293     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  2294     4
   132       |#define __func__  NULL                                                                           |  2295     4
   133       |#endif                                                                                           |  2296     4
   134       |                                                                                                 |  2297     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  2298     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  2299     4
   137       |#endif                                                                                           |  2300     4
   138       |                                                                                                 |  2301     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  2302     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  2303     4
   141       | **/                                                                                             |  2304     4
   142       |#ifndef __cplusplus                                                                              |  2305     4
   143       |#define __restrict __restrict__                                                                  |  2306     4
   144       |#else                                                                                            |  2307     4
   145       |/* Systems/C++ does not */                                                                       |  2308     4
   146       |#define __restrict                                                                               |  2309     4
   147       |#endif                                                                                           |  2310     4
   148       |                                                                                                 |  2311     4
   149       |/*                                                                                               |  2312     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  2313     4
   151       | */                                                                                              |  2314     4
   152       |#define __predict_true(exp)     (exp)                                                            |  2315     4
   153       |#define __predict_false(exp)    (exp)                                                            |  2316     4
   154       |                                                                                                 |  2317     4
   155       |                                                                                                 |  2318     4
   156       |/*                                                                                               |  2319     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  2320     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  2321     4
   159       | *                                                                                               |  2322     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    46


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  2323     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  2324     4
   162       | */                                                                                              |  2325     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  2326     4
   164       |#undef __offsetof                                                                                |  2327     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  2328     4
   166       |#endif                                                                                           |  2329     4
   167       |                                                                                                 |  2330     4
   168       |/*                                                                                               |  2331     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  2332     4
   170       | * or scanf-like arguments.                                                                      |  2333     4
   171       | */                                                                                              |  2334     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  2335     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  2336     4
   174       |#define __format_arg(fmtarg)                                                                     |  2337     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  2338     4
   176       |                                                                                                 |  2339     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  2340     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  2341     4
   179       |                                                                                                 |  2342     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  2343     4
   181       |#define __weak_reference(sym,alias)                                                              |  2344     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  2345     4
   183       |#define __warn_references(sym,msg)                                                               |  2346     4
   184       |                                                                                                 |  2347     4
   185       | /* This places the string into the resulting object.  It should */                              |  2348     4
   186       | /* probably become #pragma ident */                                                             |  2349     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  2350     4
   188       |                                                                                                 |  2351     4
   189       |#ifndef __RCSID                                                                                  |  2352     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  2353     4
   191       |#endif                                                                                           |  2354     4
   192       |                                                                                                 |  2355     4
   193       |/*                                                                                               |  2356     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  2357     4
   195       | * Usage:                                                                                        |  2358     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  2359     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  2360     4
   198       | */                                                                                              |  2361     4
   199       |#ifndef __SYSCID                                                                                 |  2362     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  2363     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  2364     4
   202       |#else                                                                                            |  2365     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  2366     4
   204       |#endif                                                                                           |  2367     4
   205       |#endif                                                                                           |  2368     4
   206       |                                                                                                 |  2369     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  2370     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  2371     4
   209       |#endif                                                                                           |  2372     4
   210       |                                                                                                 |  2373     4
   211       |#ifndef __COPYRIGHT                                                                              |  2374     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  2375     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    47


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   213       |#endif                                                                                           |  2376     4
   214       |                                                                                                 |  2377     4
   215       |                                                                                                 |  2378     4
   216       |#ifndef __DECONST                                                                                |  2379     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  2380     4
   218       |#endif                                                                                           |  2381     4
   219       |                                                                                                 |  2382     4
   220       |#ifndef __DEVOLATILE                                                                             |  2383     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  2384     4
   222       |#endif                                                                                           |  2385     4
   223       |                                                                                                 |  2386     4
   224       |#ifndef __DEQUALIFY                                                                              |  2387     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  2388     4
   226       |#endif                                                                                           |  2389     4
   227       |                                                                                                 |  2390     4
   228       |                                                                                                 |  2391     4
   229       |/*-                                                                                              |  2392     4
   230       | * The following definitions are an extension of the behavior originally                         |  2393     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  2394     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  2395     4
   233       | * header file is included.                                                                      |  2396     4
   234       | *                                                                                               |  2397     4
   235       | * Here's a quick run-down of the versions:                                                      |  2398     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  2399     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  2400     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  2401     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  2402     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  2403     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  2404     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  2405     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  2406     4
   244       | *                                                                                               |  2407     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  2408     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  2409     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  2410     4
   248       | *                                                                                               |  2411     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  2412     4
   250       | */                                                                                              |  2413     4
   251       |                                                                                                 |  2414     4
   252       |/*                                                                                               |  2415     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  2416     4
   254       | * available. Also make them available when requested so.                                        |  2417     4
   255       | */                                                                                              |  2418     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  2419     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  2420     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  2421     4
   259       |#define __DF_VISIBLE    1                                                                        |  2422     4
   260       |#else                                                                                            |  2423     4
   261       |#define __DF_VISIBLE    0                                                                        |  2424     4
   262       |#endif                                                                                           |  2425     4
   263       |                                                                                                 |  2426     4
   264       |/*-                                                                                              |  2427     4
   265       | * The following definitions are an extension of the behavior originally                         |  2428     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    48


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  2429     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  2430     4
   268       | * header file is included.                                                                      |  2431     4
   269       | *                                                                                               |  2432     4
   270       | * Here's a quick run-down of the versions:                                                      |  2433     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  2434     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  2435     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  2436     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  2437     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  2438     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  2439     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  2440     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  2441     4
   279       | *                                                                                               |  2442     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  2443     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  2444     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  2445     4
   283       | *                                                                                               |  2446     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  2447     4
   285       | */                                                                                              |  2448     4
   286       |                                                                                                 |  2449     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  2450     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  2451     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  2452     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  2453     4
   291       |#endif                                                                                           |  2454     4
   292       |                                                                                                 |  2455     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  2456     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  2457     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  2458     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  2459     4
   297       |#endif                                                                                           |  2460     4
   298       |                                                                                                 |  2461     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  2462     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  2463     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  2464     4
   302       |#define __XSI_VISIBLE           700                                                              |  2465     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  2466     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  2467     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  2468     4
   306       |#define __XSI_VISIBLE           600                                                              |  2469     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  2470     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  2471     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  2472     4
   310       |#define __XSI_VISIBLE           500                                                              |  2473     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  2474     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  2475     4
   313       |#endif                                                                                           |  2476     4
   314       |#endif                                                                                           |  2477     4
   315       |                                                                                                 |  2478     4
   316       |/*                                                                                               |  2479     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  2480     4
   318       | * important.                                                                                    |  2481     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    49


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   319       | */                                                                                              |  2482     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  2483     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  2484     4
   322       |#endif                                                                                           |  2485     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  2486     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  2487     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  2488     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  2489     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  2490     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  2491     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  2492     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  2493     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  2494     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  2495     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  2496     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  2497     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  2498     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  2499     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  2500     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  2501     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  2502     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  2503     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  2504     4
   342       |#else                                                                                            |  2505     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  2506     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  2507     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  2508     4
   346       |#else                                                                                            |  2509     4
   347       |/*-                                                                                              |  2510     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  2511     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  2512     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  2513     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  2514     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  2515     4
   353       | * a test program to print out the values.                                                       |  2516     4
   354       | *                                                                                               |  2517     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  2518     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  2519     4
   357       | * environment (and in fact we will never get here).                                             |  2520     4
   358       | */                                                                                              |  2521     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  2522     4
   360       |#define __POSIX_VISIBLE         0                                                                |  2523     4
   361       |#define __XSI_VISIBLE           0                                                                |  2524     4
   362       |#define __BSD_VISIBLE           0                                                                |  2525     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  2526     4
   364       |#define __EXT1_VISIBLE          0                                                                |  2527     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  2528     4
   366       |#define __POSIX_VISIBLE         0                                                                |  2529     4
   367       |#define __XSI_VISIBLE           0                                                                |  2530     4
   368       |#define __BSD_VISIBLE           0                                                                |  2531     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  2532     4
   370       |#define __EXT1_VISIBLE          0                                                                |  2533     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  2534     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    50


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   372       |#define __POSIX_VISIBLE         0                                                                |  2535     4
   373       |#define __XSI_VISIBLE           0                                                                |  2536     4
   374       |#define __BSD_VISIBLE           0                                                                |  2537     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  2538     4
   376       |#define __EXT1_VISIBLE          0                                                                |  2539     4
   377       |#else                           /* Default environment: show everything. */                      |  2540     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  2541     4
   379       |#define __XSI_VISIBLE           700                                                              |  2542     4
   380       |#define __BSD_VISIBLE           1                                                                |  2543     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  2544     4
   382       |#define __EXT1_VISIBLE          1                                                                |  2545     4
   383       |#endif                                                                                           |  2546     4
   384       |#endif                                                                                           |  2547     4
   385       |                                                                                                 |  2548     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  2549     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  2550     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  2551     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  2552     4
   390       |#define __EXT1_VISIBLE          1                                                                |  2553     4
   391       |#else                                                                                            |  2554     4
   392       |#define __EXT1_VISIBLE          0                                                                |  2555     4
   393       |#endif                                                                                           |  2556     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  2557     4
   395       |                                                                                                 |  2558     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  2559     4
   397       |#define __NO_TLS 1                                                                               |  2560     4
   398       |#endif                                                                                           |  2561     4
   399       |                                                                                                 |  2562     4
   400       |                                                                                                 |  2563     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  2564     4
   402       |#define __FBSDID(x)                                                                              |  2565     4
   403       |                                                                                                 |  2566     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  2567     4
   405       |#pragma pack(reset)                                                                              |  2568     4
    38       |#include <sys/_types.h>                                                                          |  2569     9
     1       |/* release 2.25.00 */                                                                            |  2570     6
     2       |#pragma pack()                                                                                   |  2571     6
     3       |/*-                                                                                              |  2572     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2573     6
     5       | * All rights reserved.                                                                          |  2574     6
     6       | *                                                                                               |  2575     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  2576     6
     8       | * modification, are permitted provided that the following conditions                            |  2577     6
     9       | * are met:                                                                                      |  2578     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2579     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2580     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2581     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2582     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  2583     6
    15       | *                                                                                               |  2584     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2585     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2586     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2587     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    51


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2588     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2589     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2590     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2591     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2592     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2593     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2594     6
    26       | * SUCH DAMAGE.                                                                                  |  2595     6
    27       | *                                                                                               |  2596     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  2597     6
    29       | */                                                                                              |  2598     6
    30       |                                                                                                 |  2599     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  2600     6
    32       |#define _SYS__TYPES_H_                                                                           |  2601     6
    33       |                                                                                                 |  2602     6
    34       |#include <sys/cdefs.h>                                                                           |  2603     6
    35       |#include <machine/_types.h>                                                                      |  2604     6
    36       |                                                                                                 |  2605     6
    37       |/*                                                                                               |  2606     6
    38       | * Standard type definitions.                                                                    |  2607     6
    39       | */                                                                                              |  2608     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  2609     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  2610     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  2611     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  2612     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  2613     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  2614     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  2615     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  2616     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  2617     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  2618     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  2619     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  2620     6
    52       |typedef int             __nl_item;                                                               |  2621     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  2622     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  2623     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  2624     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  2625     6
    57       |                                        /* signed, because of legacy code */                     |  2626     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  2627     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  2628     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  2629     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  2630     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  2631     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  2632     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  2633     6
    65       |                                                                                                 |  2634     6
    66       |/*                                                                                               |  2635     6
    67       | * Unusual type definitions.                                                                     |  2636     6
    68       | */                                                                                              |  2637     6
    69       |/*                                                                                               |  2638     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  2639     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  2640     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    52


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  2641     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  2642     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  2643     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  2644     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  2645     6
    77       | *                                                                                               |  2646     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  2647     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  2648     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  2649     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  2650     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  2651     6
    83       | */                                                                                              |  2652     6
    84       |#ifdef __cplusplus                                                                               |  2653     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  2654     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  2655     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  2656     6
    88       |#else                                                                                            |  2657     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  2658     6
    90       |#endif                                                                                           |  2659     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  2660     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  2661     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  2662     6
    94       |                                                                                                 |  2663     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  2664     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  2665     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  2666     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  2667     6
    99       |#endif                                                                                           |  2668     6
   100       |                                                                                                 |  2669     6
   101       |#if !defined(__cplusplus)                                                                        |  2670     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  2671     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  2672     6
   104       |#endif                                                                                           |  2673     6
   105       |                                                                                                 |  2674     6
   106       |                                                                                                 |  2675     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  2676     6
   108       |                                                                                                 |  2677     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  2678     6
   110       |                                                                                                 |  2679     6
   111       |/*                                                                                               |  2680     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  2681     6
   113       | * stream conversions.                                                                           |  2682     6
   114       | */                                                                                              |  2683     6
   115       |typedef union {                                                                                  |  2684     6
   116       |        char            __mbstate8[128];                                                         |  2685     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  2686     6
   118       |} __mbstate_t;                                                                                   |  2687     6
   119       |                                                                                                 |  2688     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  2689     6
   121       |#pragma pack(reset)                                                                              |  2690     6
    39       |                                                                                                 |  2691     9
    40       |#include <sys/_sigset.h>                                                                         |  2692     9
     1       |/* release 2.25.00 */                                                                            |  2693    10
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    53


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |  2694    10
     3       |/*-                                                                                              |  2695    10
     4       | * Copyright (c) 1982, 1986, 1989, 1991, 1993                                                    |  2696    10
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2697    10
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  2698    10
     7       | * All or some portions of this file are derived from material licensed                          |  2699    10
     8       | * to the University of California by American Telephone and Telegraph                           |  2700    10
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  2701    10
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  2702    10
    11       | *                                                                                               |  2703    10
    12       | * Redistribution and use in source and binary forms, with or without                            |  2704    10
    13       | * modification, are permitted provided that the following conditions                            |  2705    10
    14       | * are met:                                                                                      |  2706    10
    15       | * 1. Redistributions of source code must retain the above copyright                             |  2707    10
    16       | *    notice, this list of conditions and the following disclaimer.                              |  2708    10
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2709    10
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  2710    10
    19       | *    documentation and/or other materials provided with the distribution.                       |  2711    10
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  2712    10
    21       | *    may be used to endorse or promote products derived from this software                      |  2713    10
    22       | *    without specific prior written permission.                                                 |  2714    10
    23       | *                                                                                               |  2715    10
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2716    10
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2717    10
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2718    10
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2719    10
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2720    10
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2721    10
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2722    10
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2723    10
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2724    10
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2725    10
    34       | * SUCH DAMAGE.                                                                                  |  2726    10
    35       | *                                                                                               |  2727    10
    36       | *      @(#)signal.h    8.4 (Berkeley) 5/4/95                                                    |  2728    10
    37       | * $FreeBSD: src/sys/sys/_sigset.h,v 1.36 2005/01/07 02:29:23 imp Exp $                          |  2729    10
    38       | */                                                                                              |  2730    10
    39       |                                                                                                 |  2731    10
    40       |#ifndef _SYS__SIGSET_H_                                                                          |  2732    10
    41       |#define _SYS__SIGSET_H_                                                                          |  2733    10
    42       |                                                                                                 |  2734    10
    43       |/*                                                                                               |  2735    10
    44       | * sigset_t macros.                                                                              |  2736    10
    45       | */                                                                                              |  2737    10
    46       |#define _SIG_WORDS      4                                                                        |  2738    10
    47       |#define _SIG_MAXSIG     128                                                                      |  2739    10
    48       |#define _SIG_IDX(sig)   ((sig) - 1)                                                              |  2740    10
    49       |#define _SIG_WORD(sig)  (_SIG_IDX(sig) >> 5)                                                     |  2741    10
    50       |#define _SIG_BIT(sig)   (1 << (_SIG_IDX(sig) & 31))                                              |  2742    10
    51       |#define _SIG_VALID(sig) ((sig) <= _SIG_MAXSIG && (sig) > 0)                                      |  2743    10
    52       |                                                                                                 |  2744    10
    53       |typedef struct __sigset {                                                                        |  2745    10
    54       |        __uint32_t __bits[_SIG_WORDS];                                                           |  2746    10
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    54


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       +                __uint32_t __bits[4];                                                            +  2746    10
    55       |} __sigset_t;                                                                                    |  2747    10
    56       |                                                                                                 |  2748    10
    57       |#if defined(_KERNEL) && defined(COMPAT_43)                                                       |  2749    10
    58       |typedef unsigned int osigset_t;                                                                  |  2750    10
    59       |#endif                                                                                           |  2751    10
    60       |                                                                                                 |  2752    10
    61       |#endif /* !_SYS__SIGSET_H_ */                                                                    |  2753    10
    62       |#pragma pack(reset)                                                                              |  2754    10
    41       |#include <sys/_timeval.h>                                                                        |  2755     9
     1       |/* release 2.25.00 */                                                                            |  2756    11
     2       |#pragma pack()                                                                                   |  2757    11
     3       |/*-                                                                                              |  2758    11
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2759    11
     5       | * All rights reserved.                                                                          |  2760    11
     6       | *                                                                                               |  2761    11
     7       | * Redistribution and use in source and binary forms, with or without                            |  2762    11
     8       | * modification, are permitted provided that the following conditions                            |  2763    11
     9       | * are met:                                                                                      |  2764    11
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2765    11
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2766    11
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2767    11
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2768    11
    14       | *    documentation and/or other materials provided with the distribution.                       |  2769    11
    15       | *                                                                                               |  2770    11
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2771    11
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2772    11
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2773    11
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2774    11
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2775    11
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2776    11
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2777    11
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2778    11
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2779    11
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2780    11
    26       | * SUCH DAMAGE.                                                                                  |  2781    11
    27       | *                                                                                               |  2782    11
    28       | * $FreeBSD: src/sys/sys/_timeval.h,v 1.1.12.1 2006/06/23 23:41:05 cognet Exp $                  |  2783    11
    29       | */                                                                                              |  2784    11
    30       |                                                                                                 |  2785    11
    31       |#ifndef _SYS__TIMEVAL_H_                                                                         |  2786    11
    32       |#define _SYS__TIMEVAL_H_                                                                         |  2787    11
    33       |                                                                                                 |  2788    11
    34       |#include <sys/_types.h>                                                                          |  2789    11
     1       |/* release 2.25.00 */                                                                            |  2790     6
     2       |#pragma pack()                                                                                   |  2791     6
     3       |/*-                                                                                              |  2792     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2793     6
     5       | * All rights reserved.                                                                          |  2794     6
     6       | *                                                                                               |  2795     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  2796     6
     8       | * modification, are permitted provided that the following conditions                            |  2797     6
     9       | * are met:                                                                                      |  2798     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    55


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2799     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2800     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2801     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2802     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  2803     6
    15       | *                                                                                               |  2804     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2805     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2806     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2807     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2808     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2809     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2810     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2811     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2812     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2813     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2814     6
    26       | * SUCH DAMAGE.                                                                                  |  2815     6
    27       | *                                                                                               |  2816     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  2817     6
    29       | */                                                                                              |  2818     6
    30       |                                                                                                 |  2819     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  2820     6
    32       |#define _SYS__TYPES_H_                                                                           |  2821     6
    33       |                                                                                                 |  2822     6
    34       |#include <sys/cdefs.h>                                                                           |  2823     6
    35       |#include <machine/_types.h>                                                                      |  2824     6
    36       |                                                                                                 |  2825     6
    37       |/*                                                                                               |  2826     6
    38       | * Standard type definitions.                                                                    |  2827     6
    39       | */                                                                                              |  2828     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  2829     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  2830     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  2831     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  2832     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  2833     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  2834     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  2835     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  2836     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  2837     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  2838     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  2839     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  2840     6
    52       |typedef int             __nl_item;                                                               |  2841     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  2842     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  2843     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  2844     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  2845     6
    57       |                                        /* signed, because of legacy code */                     |  2846     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  2847     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  2848     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  2849     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  2850     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  2851     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    56


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    63       |typedef __uint32_t      __uid_t;                                                                 |  2852     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  2853     6
    65       |                                                                                                 |  2854     6
    66       |/*                                                                                               |  2855     6
    67       | * Unusual type definitions.                                                                     |  2856     6
    68       | */                                                                                              |  2857     6
    69       |/*                                                                                               |  2858     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  2859     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  2860     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  2861     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  2862     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  2863     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  2864     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  2865     6
    77       | *                                                                                               |  2866     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  2867     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  2868     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  2869     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  2870     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  2871     6
    83       | */                                                                                              |  2872     6
    84       |#ifdef __cplusplus                                                                               |  2873     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  2874     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  2875     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  2876     6
    88       |#else                                                                                            |  2877     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  2878     6
    90       |#endif                                                                                           |  2879     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  2880     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  2881     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  2882     6
    94       |                                                                                                 |  2883     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  2884     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  2885     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  2886     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  2887     6
    99       |#endif                                                                                           |  2888     6
   100       |                                                                                                 |  2889     6
   101       |#if !defined(__cplusplus)                                                                        |  2890     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  2891     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  2892     6
   104       |#endif                                                                                           |  2893     6
   105       |                                                                                                 |  2894     6
   106       |                                                                                                 |  2895     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  2896     6
   108       |                                                                                                 |  2897     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  2898     6
   110       |                                                                                                 |  2899     6
   111       |/*                                                                                               |  2900     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  2901     6
   113       | * stream conversions.                                                                           |  2902     6
   114       | */                                                                                              |  2903     6
   115       |typedef union {                                                                                  |  2904     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    57


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   116       |        char            __mbstate8[128];                                                         |  2905     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  2906     6
   118       |} __mbstate_t;                                                                                   |  2907     6
   119       |                                                                                                 |  2908     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  2909     6
   121       |#pragma pack(reset)                                                                              |  2910     6
    35       |                                                                                                 |  2911    11
    36       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  2912    11
    37       |typedef __suseconds_t   suseconds_t;                                                             |  2913    11
    38       |#define _SUSECONDS_T_DECLARED                                                                    |  2914    11
    39       |#endif                                                                                           |  2915    11
    40       |                                                                                                 |  2916    11
    41       |#ifndef _TIME_T_DECLARED                                                                         |  2917    11
    42       |typedef __time_t        time_t;                                                                  |  2918    11
    43       |#define _TIME_T_DECLARED                                                                         |  2919    11
    44       |#endif                                                                                           |  2920    11
    45       |                                                                                                 |  2921    11
    46       |/*                                                                                               |  2922    11
    47       | * Structure returned by gettimeofday(2) system call, and used in other calls.                   |  2923    11
    48       | */                                                                                              |  2924    11
    49       |struct timeval {                                                                                 |  2925    11
    50       |        time_t          tv_sec;                                                                  |  2926    11
    51       |        suseconds_t     tv_usec;        /* and microseconds */                                   |  2927    11
    52       |};                                                                                               |  2928    11
    53       |                                                                                                 |  2929    11
    54       |#endif /* !_SYS__TIMEVAL_H_ */                                                                   |  2930    11
    55       |#pragma pack(reset)                                                                              |  2931    11
    42       |#include <sys/timespec.h>                                                                        |  2932     9
     1       |/* release 2.25.00 */                                                                            |  2933    12
     2       |#pragma pack()                                                                                   |  2934    12
     3       |/*-                                                                                              |  2935    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  2936    12
     5       | *      The Regents of the University of California.  All rights reserved.                       |  2937    12
     6       | *                                                                                               |  2938    12
     7       | * Redistribution and use in source and binary forms, with or without                            |  2939    12
     8       | * modification, are permitted provided that the following conditions                            |  2940    12
     9       | * are met:                                                                                      |  2941    12
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2942    12
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2943    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2944    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2945    12
    14       | *    documentation and/or other materials provided with the distribution.                       |  2946    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  2947    12
    16       | *    may be used to endorse or promote products derived from this software                      |  2948    12
    17       | *    without specific prior written permission.                                                 |  2949    12
    18       | *                                                                                               |  2950    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  2951    12
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2952    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2953    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  2954    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2955    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2956    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2957    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    58


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2958    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2959    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  2960    12
    29       | * SUCH DAMAGE.                                                                                  |  2961    12
    30       | *                                                                                               |  2962    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  2963    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          |  2964    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     |  2965    12
    34       | */                                                                                              |  2966    12
    35       |                                                                                                 |  2967    12
    36       |/*                                                                                               |  2968    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  |  2969    12
    38       | */                                                                                              |  2970    12
    39       |                                                                                                 |  2971    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         |  2972    12
    41       |#define _SYS_TIMESPEC_H_                                                                         |  2973    12
    42       |                                                                                                 |  2974    12
    43       |#include <sys/_types.h>                                                                          |  2975    12
     1       |/* release 2.25.00 */                                                                            |  2976     6
     2       |#pragma pack()                                                                                   |  2977     6
     3       |/*-                                                                                              |  2978     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  2979     6
     5       | * All rights reserved.                                                                          |  2980     6
     6       | *                                                                                               |  2981     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  2982     6
     8       | * modification, are permitted provided that the following conditions                            |  2983     6
     9       | * are met:                                                                                      |  2984     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  2985     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  2986     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  2987     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  2988     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  2989     6
    15       | *                                                                                               |  2990     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  2991     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  2992     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  2993     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  2994     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  2995     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  2996     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  2997     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  2998     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  2999     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3000     6
    26       | * SUCH DAMAGE.                                                                                  |  3001     6
    27       | *                                                                                               |  3002     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  3003     6
    29       | */                                                                                              |  3004     6
    30       |                                                                                                 |  3005     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  3006     6
    32       |#define _SYS__TYPES_H_                                                                           |  3007     6
    33       |                                                                                                 |  3008     6
    34       |#include <sys/cdefs.h>                                                                           |  3009     6
    35       |#include <machine/_types.h>                                                                      |  3010     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    59


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       |                                                                                                 |  3011     6
    37       |/*                                                                                               |  3012     6
    38       | * Standard type definitions.                                                                    |  3013     6
    39       | */                                                                                              |  3014     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  3015     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  3016     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  3017     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  3018     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  3019     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  3020     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  3021     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  3022     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  3023     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  3024     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  3025     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  3026     6
    52       |typedef int             __nl_item;                                                               |  3027     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  3028     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  3029     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  3030     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  3031     6
    57       |                                        /* signed, because of legacy code */                     |  3032     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  3033     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  3034     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  3035     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  3036     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  3037     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  3038     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  3039     6
    65       |                                                                                                 |  3040     6
    66       |/*                                                                                               |  3041     6
    67       | * Unusual type definitions.                                                                     |  3042     6
    68       | */                                                                                              |  3043     6
    69       |/*                                                                                               |  3044     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  3045     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  3046     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  3047     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  3048     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  3049     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  3050     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  3051     6
    77       | *                                                                                               |  3052     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  3053     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  3054     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  3055     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  3056     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  3057     6
    83       | */                                                                                              |  3058     6
    84       |#ifdef __cplusplus                                                                               |  3059     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  3060     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  3061     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  3062     6
    88       |#else                                                                                            |  3063     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    60


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  3064     6
    90       |#endif                                                                                           |  3065     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  3066     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  3067     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  3068     6
    94       |                                                                                                 |  3069     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  3070     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  3071     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  3072     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  3073     6
    99       |#endif                                                                                           |  3074     6
   100       |                                                                                                 |  3075     6
   101       |#if !defined(__cplusplus)                                                                        |  3076     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  3077     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  3078     6
   104       |#endif                                                                                           |  3079     6
   105       |                                                                                                 |  3080     6
   106       |                                                                                                 |  3081     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  3082     6
   108       |                                                                                                 |  3083     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  3084     6
   110       |                                                                                                 |  3085     6
   111       |/*                                                                                               |  3086     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  3087     6
   113       | * stream conversions.                                                                           |  3088     6
   114       | */                                                                                              |  3089     6
   115       |typedef union {                                                                                  |  3090     6
   116       |        char            __mbstate8[128];                                                         |  3091     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  3092     6
   118       |} __mbstate_t;                                                                                   |  3093     6
   119       |                                                                                                 |  3094     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  3095     6
   121       |#pragma pack(reset)                                                                              |  3096     6
    44       |                                                                                                 |  3097    12
    45       |#ifndef _TIME_T_DECLARED                                                                         |  3098    12
    46       |typedef __time_t        time_t;                                                                  |  3099    12
    47       |#define _TIME_T_DECLARED                                                                         |  3100    12
    48       |#endif                                                                                           |  3101    12
    49       |                                                                                                 |  3102    12
    50       |struct timespec {                                                                                |  3103    12
    51       |        time_t  tv_sec;         /* seconds */                                                    |  3104    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            |  3105    12
    53       |};                                                                                               |  3106    12
    54       |                                                                                                 |  3107    12
    55       |#if __BSD_VISIBLE                                                                                |  3108    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        |  3109    12
    57       |        do {                                                            \                        |  3110    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        |  3111    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        |  3112    12
    60       |        } while (0)                                                                              |  3113    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        |  3114    12
    62       |        do {                                                            \                        |  3115    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        |  3116    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    61


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        |  3117    12
    65       |        } while (0)                                                                              |  3118    12
    66       |                                                                                                 |  3119    12
    66       +                                                                                                 +  3119    12
    67       |#endif /* __BSD_VISIBLE */                                                                       |  3120    12
    68       |                                                                                                 |  3121    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    |  3122    12
    70       |#pragma pack(reset)                                                                              |  3123    12
    43       |                                                                                                 |  3124     9
    44       |typedef unsigned long   __fd_mask;                                                               |  3125     9
    45       |#if __BSD_VISIBLE                                                                                |  3126     9
    46       |typedef __fd_mask       fd_mask;                                                                 |  3127     9
    46       +typedef __fd_mask       fd_mask;                                                                 +  3127     9
    47       |#endif                                                                                           |  3128     9
    48       |                                                                                                 |  3129     9
    49       |#ifndef _SIGSET_T_DECLARED                                                                       |  3130     9
    50       |#define _SIGSET_T_DECLARED                                                                       |  3131     9
    51       |typedef __sigset_t      sigset_t;                                                                |  3132     9
    52       |#endif                                                                                           |  3133     9
    53       |                                                                                                 |  3134     9
    54       |/*                                                                                               |  3135     9
    55       | * Select uses bit masks of file descriptors in longs.  These macros                             |  3136     9
    56       | * manipulate such bit fields (the filesystem macros use chars).                                 |  3137     9
    57       | * FD_SETSIZE may be defined by the user, but the default here should                            |  3138     9
    58       | * be enough for most uses.                                                                      |  3139     9
    59       | */                                                                                              |  3140     9
    60       |#ifndef FD_SETSIZE                                                                               |  3141     9
    61       |#define FD_SETSIZE      1024U                                                                    |  3142     9
    62       |#endif                                                                                           |  3143     9
    63       |                                                                                                 |  3144     9
    64       |#define _NFDBITS        (sizeof(__fd_mask) * 8) /* bits per mask */                              |  3145     9
    65       |#if __BSD_VISIBLE                                                                                |  3146     9
    66       |#define NFDBITS         _NFDBITS                                                                 |  3147     9
    67       |#endif                                                                                           |  3148     9
    68       |                                                                                                 |  3149     9
    68       +                                                                                                 +  3149     9
    69       |#ifndef _howmany                                                                                 |  3150     9
    70       |#define _howmany(x, y)  (((x) + ((y) - 1)) / (y))                                                |  3151     9
    71       |#endif                                                                                           |  3152     9
    72       |                                                                                                 |  3153     9
    73       |typedef struct fd_set {                                                                          |  3154     9
    74       |        __fd_mask       __fds_bits[_howmany(FD_SETSIZE, _NFDBITS)];                              |  3155     9
    74       +                __fd_mask       __fds_bits[(((1024U) + (((sizeof(__fd_mask) * 8)) - 1)) / ((sizeo+  3155     9
    74       +f(__fd_mask) * 8)))];                                                                            +  3155     9
    75       |} fd_set;                                                                                        |  3156     9
    76       |#if __BSD_VISIBLE                                                                                |  3157     9
    77       |#define fds_bits        __fds_bits                                                               |  3158     9
    78       |#endif                                                                                           |  3159     9
    79       |                                                                                                 |  3160     9
    79       +                                                                                                 +  3160     9
    80       |#define __fdset_mask(n) ((__fd_mask)1 << ((n) % _NFDBITS))                                       |  3161     9
    81       |#define FD_CLR(n, p)    ((p)->__fds_bits[(n)/_NFDBITS] &= ~__fdset_mask(n))                      |  3162     9
    82       |#if __BSD_VISIBLE                                                                                |  3163     9
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    62


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    83       |#define FD_COPY(f, t)   (void)(*(t) = *(f))                                                      |  3164     9
    84       |#endif                                                                                           |  3165     9
    85       |#define FD_ISSET(n, p)  (((p)->__fds_bits[(n)/_NFDBITS] & __fdset_mask(n)) != 0)                 |  3166     9
    86       |#define FD_SET(n, p)    ((p)->__fds_bits[(n)/_NFDBITS] |= __fdset_mask(n))                       |  3167     9
    87       |#define FD_ZERO(p) do {                                 \                                        |  3168     9
    88       |        fd_set *_p;                                     \                                        |  3169     9
    89       |        __size_t _n;                                    \                                        |  3170     9
    90       |                                                        \                                        |  3171     9
    91       |        _p = (p);                                       \                                        |  3172     9
    92       |        _n = _howmany(FD_SETSIZE, _NFDBITS);            \                                        |  3173     9
    93       |        while (_n > 0)                                  \                                        |  3174     9
    94       |                _p->__fds_bits[--_n] = 0;               \                                        |  3175     9
    95       |} while (0)                                                                                      |  3176     9
    96       |                                                                                                 |  3177     9
    96       +                                                                                                 +  3177     9
    97       |#ifndef _KERNEL                                                                                  |  3178     9
    98       |                                                                                                 |  3179     9
    99       |__BEGIN_DECLS                                                                                    |  3180     9
    99       +                                                                                                 +  3180     9
   100       |int pselect(int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict,                     |  3181     9
   100       +int pselect(int, fd_set *__restrict__, fd_set *__restrict__, fd_set *__restrict__,               +  3181     9
   101       |        const struct timespec *__restrict, const sigset_t *__restrict);                          |  3182     9
   101       +                const struct timespec *__restrict__, const sigset_t *__restrict__);              +  3182     9
   102       |#ifndef _SELECT_DECLARED                                                                         |  3183     9
   103       |#define _SELECT_DECLARED                                                                         |  3184     9
   104       |/* XXX missing restrict type-qualifier */                                                        |  3185     9
   105       |int     select(int, fd_set *, fd_set *, fd_set *, struct timeval *);                             |  3186     9
   106       |int     selectex(int, fd_set *, fd_set *, fd_set *, struct timeval *,                            |  3187     9
   107       |                       int *ecbptr);                                                             |  3188     9
   108       |#endif                                                                                           |  3189     9
   109       |__END_DECLS                                                                                      |  3190     9
   109       +                                                                                                 +  3190     9
   110       |#endif /* !_KERNEL */                                                                            |  3191     9
   111       |                                                                                                 |  3192     9
   112       |#endif /* _SYS_SELECT_H_ */                                                                      |  3193     9
   113       |#pragma pack(reset)                                                                              |  3194     9
   302       |                                                                                                 |  3195     3
   303       |#ifndef _KERNEL                                                                                  |  3196     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    |  3197     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    |  3198     3
   306       |#endif /* !_KERNEL */                                                                            |  3199     3
   307       |                                                                                                 |  3200     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    |  3201     3
   309       |                                                                                                 |  3202     3
   310       |/*                                                                                               |  3203     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             |  3204     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             |  3205     3
   313       | * 64-bit off_t's.                                                                               |  3206     3
   314       | */                                                                                              |  3207     3
   315       |#ifndef _KERNEL                                                                                  |  3208     3
   316       |__BEGIN_DECLS                                                                                    |  3209     3
   316       +                                                                                                 +  3209     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      |  3210     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    63


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   318       |#define _FTRUNCATE_DECLARED                                                                      |  3211     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  3212     3
   320       |int      ftruncate(int, off_t);                                                                  |  3213     3
   321       |#endif                                                                                           |  3214     3
   322       |#ifndef _LSEEK_DECLARED                                                                          |  3215     3
   323       |#define _LSEEK_DECLARED                                                                          |  3216     3
   324       |off_t    lseek(int, off_t, int);                                                                 |  3217     3
   325       |#endif                                                                                           |  3218     3
   326       |#ifndef _MMAP_DECLARED                                                                           |  3219     3
   327       |#define _MMAP_DECLARED                                                                           |  3220     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             |  3221     3
   329       |#endif                                                                                           |  3222     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       |  3223     3
   331       |#define _TRUNCATE_DECLARED                                                                       |  3224     3
   332       |int      truncate(const char *, off_t);                                                          |  3225     3
   333       |#endif                                                                                           |  3226     3
   334       |__END_DECLS                                                                                      |  3227     3
   334       +                                                                                                 +  3227     3
   335       |#endif /* !_KERNEL */                                                                            |  3228     3
   336       |                                                                                                 |  3229     3
   337       |#endif /* __BSD_VISIBLE */                                                                       |  3230     3
   338       |                                                                                                 |  3231     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      |  3232     3
   340       |#pragma pack(reset)                                                                              |  3233     3
    22       |#include <unistd.h>                                                                              |  3234     2
     1       |/* release 2.25.00 */                                                                            |  3235    13
     2       |#pragma pack()                                                                                   |  3236    13
     3       |/*-                                                                                              |  3237    13
     4       | * Copyright (c) 1991, 1993, 1994                                                                |  3238    13
     5       | *      The Regents of the University of California.  All rights reserved.                       |  3239    13
     6       | *                                                                                               |  3240    13
     7       | * Redistribution and use in source and binary forms, with or without                            |  3241    13
     8       | * modification, are permitted provided that the following conditions                            |  3242    13
     9       | * are met:                                                                                      |  3243    13
    10       | * 1. Redistributions of source code must retain the above copyright                             |  3244    13
    11       | *    notice, this list of conditions and the following disclaimer.                              |  3245    13
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  3246    13
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  3247    13
    14       | *    documentation and/or other materials provided with the distribution.                       |  3248    13
    15       | * 3. All advertising materials mentioning features or use of this software                      |  3249    13
    16       | *    must display the following acknowledgement:                                                |  3250    13
    17       | *      This product includes software developed by the University of                            |  3251    13
    18       | *      California, Berkeley and its contributors.                                               |  3252    13
    19       | * 4. Neither the name of the University nor the names of its contributors                       |  3253    13
    20       | *    may be used to endorse or promote products derived from this software                      |  3254    13
    21       | *    without specific prior written permission.                                                 |  3255    13
    22       | *                                                                                               |  3256    13
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  3257    13
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  3258    13
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  3259    13
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  3260    13
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  3261    13
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  3262    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    64


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  3263    13
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  3264    13
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  3265    13
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3266    13
    33       | * SUCH DAMAGE.                                                                                  |  3267    13
    34       | *                                                                                               |  3268    13
    35       | *      @(#)unistd.h    8.12 (Berkeley) 4/27/95                                                  |  3269    13
    36       | */                                                                                              |  3270    13
    37       |                                                                                                 |  3271    13
    38       |#ifndef _UNISTD_H_                                                                               |  3272    13
    39       |#define _UNISTD_H_                                                                               |  3273    13
    40       |                                                                                                 |  3274    13
    41       |#include <sys/cdefs.h>                                                                           |  3275    13
     1       |/* release 2.25.00 */                                                                            |  3276     4
     2       |#pragma pack()                                                                                   |  3277     4
     3       |/*                                                                                               |  3278     4
     4       | * Copyright (c) 1991, 1993                                                                      |  3279     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  3280     4
     6       | *                                                                                               |  3281     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  3282     4
     8       | * Berkeley Software Design, Inc.                                                                |  3283     4
     9       | *                                                                                               |  3284     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  3285     4
    11       | * modification, are permitted provided that the following conditions                            |  3286     4
    12       | * are met:                                                                                      |  3287     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  3288     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  3289     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  3290     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  3291     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  3292     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  3293     4
    19       | *    must display the following acknowledgement:                                                |  3294     4
    20       | *      This product includes software developed by the University of                            |  3295     4
    21       | *      California, Berkeley and its contributors.                                               |  3296     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  3297     4
    23       | *    may be used to endorse or promote products derived from this software                      |  3298     4
    24       | *    without specific prior written permission.                                                 |  3299     4
    25       | *                                                                                               |  3300     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  3301     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  3302     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  3303     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  3304     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  3305     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  3306     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  3307     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  3308     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  3309     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3310     4
    36       | * SUCH DAMAGE.                                                                                  |  3311     4
    37       | *                                                                                               |  3312     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  3313     4
    39       | */                                                                                              |  3314     4
    40       |                                                                                                 |  3315     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    65


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  3316     4
    42       |#define _SYS_CDEFS_H_                                                                            |  3317     4
    43       |                                                                                                 |  3318     4
    44       |#if defined(__cplusplus)                                                                         |  3319     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  3320     4
    46       |#define __END_DECLS     }                                                                        |  3321     4
    47       |#else                                                                                            |  3322     4
    48       |#define __BEGIN_DECLS                                                                            |  3323     4
    49       |#define __END_DECLS                                                                              |  3324     4
    50       |#endif                                                                                           |  3325     4
    51       |                                                                                                 |  3326     4
    52       |/*                                                                                               |  3327     4
    53       | * This code has been put in place to help reduce the addition of                                |  3328     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  3329     4
    55       | * having a compiler-agnostic source tree.                                                       |  3330     4
    56       | */                                                                                              |  3331     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  3332     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  3333     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  3334     4
    60       |                                                                                                 |  3335     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  3336     4
    62       |                                                                                                 |  3337     4
    63       |                                                                                                 |  3338     4
    64       |/*                                                                                               |  3339     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  3340     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  3341     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  3342     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  3343     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  3344     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  3345     4
    71       | * this only works with ANSI C.                                                                  |  3346     4
    72       | *                                                                                               |  3347     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  3348     4
    74       | * first.  It is only available with ANSI C.                                                     |  3349     4
    75       | */                                                                                              |  3350     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  3351     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  3352     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  3353     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  3354     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  3355     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  3356     4
    82       |                                                                                                 |  3357     4
    83       |#define __const         const           /* define reserved names to standard */                  |  3358     4
    84       |#define __signed        signed                                                                   |  3359     4
    85       |#define __volatile      volatile                                                                 |  3360     4
    86       |#if defined(__cplusplus)                                                                         |  3361     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  3362     4
    88       |#else                                                                                            |  3363     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  3364     4
    90       |#endif /* !__cplusplus */                                                                        |  3365     4
    91       |                                                                                                 |  3366     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  3367     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  3368     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    66


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  3369     4
    95       |#define __STRING(x)     "x"                                                                      |  3370     4
    96       |                                                                                                 |  3371     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  3372     4
    98       |#define __inline                                                                                 |  3373     4
    99       |#define __signed                                                                                 |  3374     4
   100       |#define __volatile                                                                               |  3375     4
   101       |/*                                                                                               |  3376     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  3377     4
   103       | * deleted from the program and old programs will want them left alone.                          |  3378     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  3379     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  3380     4
   106       | */                                                                                              |  3381     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  3382     4
   108       |#define const                           /* delete ANSI C keywords */                             |  3383     4
   109       |#define inline                                                                                   |  3384     4
   110       |#define signed                                                                                   |  3385     4
   111       |#define volatile                                                                                 |  3386     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  3387     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  3388     4
   114       |                                                                                                 |  3389     4
   115       |/*                                                                                               |  3390     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  3391     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  3392     4
   118       | */                                                                                              |  3393     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  3394     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  3395     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  3396     4
   122       |#define __unused                                                                                 |  3397     4
   123       |#define __aligned(x)                                                                             |  3398     4
   124       |#define __section(x)                                                                             |  3399     4
   125       |#define __nonnull(x)                                                                             |  3400     4
   126       |#define __used                                                                                   |  3401     4
   127       |                                                                                                 |  3402     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  3403     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  3404     4
   130       |                                                                                                 |  3405     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  3406     4
   132       |#define __func__  NULL                                                                           |  3407     4
   133       |#endif                                                                                           |  3408     4
   134       |                                                                                                 |  3409     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  3410     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  3411     4
   137       |#endif                                                                                           |  3412     4
   138       |                                                                                                 |  3413     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  3414     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  3415     4
   141       | **/                                                                                             |  3416     4
   142       |#ifndef __cplusplus                                                                              |  3417     4
   143       |#define __restrict __restrict__                                                                  |  3418     4
   144       |#else                                                                                            |  3419     4
   145       |/* Systems/C++ does not */                                                                       |  3420     4
   146       |#define __restrict                                                                               |  3421     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    67


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   147       |#endif                                                                                           |  3422     4
   148       |                                                                                                 |  3423     4
   149       |/*                                                                                               |  3424     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  3425     4
   151       | */                                                                                              |  3426     4
   152       |#define __predict_true(exp)     (exp)                                                            |  3427     4
   153       |#define __predict_false(exp)    (exp)                                                            |  3428     4
   154       |                                                                                                 |  3429     4
   155       |                                                                                                 |  3430     4
   156       |/*                                                                                               |  3431     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  3432     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  3433     4
   159       | *                                                                                               |  3434     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  3435     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  3436     4
   162       | */                                                                                              |  3437     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  3438     4
   164       |#undef __offsetof                                                                                |  3439     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  3440     4
   166       |#endif                                                                                           |  3441     4
   167       |                                                                                                 |  3442     4
   168       |/*                                                                                               |  3443     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  3444     4
   170       | * or scanf-like arguments.                                                                      |  3445     4
   171       | */                                                                                              |  3446     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  3447     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  3448     4
   174       |#define __format_arg(fmtarg)                                                                     |  3449     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  3450     4
   176       |                                                                                                 |  3451     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  3452     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  3453     4
   179       |                                                                                                 |  3454     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  3455     4
   181       |#define __weak_reference(sym,alias)                                                              |  3456     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  3457     4
   183       |#define __warn_references(sym,msg)                                                               |  3458     4
   184       |                                                                                                 |  3459     4
   185       | /* This places the string into the resulting object.  It should */                              |  3460     4
   186       | /* probably become #pragma ident */                                                             |  3461     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  3462     4
   188       |                                                                                                 |  3463     4
   189       |#ifndef __RCSID                                                                                  |  3464     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  3465     4
   191       |#endif                                                                                           |  3466     4
   192       |                                                                                                 |  3467     4
   193       |/*                                                                                               |  3468     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  3469     4
   195       | * Usage:                                                                                        |  3470     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  3471     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  3472     4
   198       | */                                                                                              |  3473     4
   199       |#ifndef __SYSCID                                                                                 |  3474     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    68


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  3475     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  3476     4
   202       |#else                                                                                            |  3477     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  3478     4
   204       |#endif                                                                                           |  3479     4
   205       |#endif                                                                                           |  3480     4
   206       |                                                                                                 |  3481     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  3482     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  3483     4
   209       |#endif                                                                                           |  3484     4
   210       |                                                                                                 |  3485     4
   211       |#ifndef __COPYRIGHT                                                                              |  3486     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  3487     4
   213       |#endif                                                                                           |  3488     4
   214       |                                                                                                 |  3489     4
   215       |                                                                                                 |  3490     4
   216       |#ifndef __DECONST                                                                                |  3491     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  3492     4
   218       |#endif                                                                                           |  3493     4
   219       |                                                                                                 |  3494     4
   220       |#ifndef __DEVOLATILE                                                                             |  3495     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  3496     4
   222       |#endif                                                                                           |  3497     4
   223       |                                                                                                 |  3498     4
   224       |#ifndef __DEQUALIFY                                                                              |  3499     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  3500     4
   226       |#endif                                                                                           |  3501     4
   227       |                                                                                                 |  3502     4
   228       |                                                                                                 |  3503     4
   229       |/*-                                                                                              |  3504     4
   230       | * The following definitions are an extension of the behavior originally                         |  3505     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  3506     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  3507     4
   233       | * header file is included.                                                                      |  3508     4
   234       | *                                                                                               |  3509     4
   235       | * Here's a quick run-down of the versions:                                                      |  3510     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  3511     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  3512     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  3513     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  3514     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  3515     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  3516     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  3517     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  3518     4
   244       | *                                                                                               |  3519     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  3520     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  3521     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  3522     4
   248       | *                                                                                               |  3523     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  3524     4
   250       | */                                                                                              |  3525     4
   251       |                                                                                                 |  3526     4
   252       |/*                                                                                               |  3527     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    69


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   253       | * If no special macro was specified, make the DragonFly extensions                              |  3528     4
   254       | * available. Also make them available when requested so.                                        |  3529     4
   255       | */                                                                                              |  3530     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  3531     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  3532     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  3533     4
   259       |#define __DF_VISIBLE    1                                                                        |  3534     4
   260       |#else                                                                                            |  3535     4
   261       |#define __DF_VISIBLE    0                                                                        |  3536     4
   262       |#endif                                                                                           |  3537     4
   263       |                                                                                                 |  3538     4
   264       |/*-                                                                                              |  3539     4
   265       | * The following definitions are an extension of the behavior originally                         |  3540     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  3541     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  3542     4
   268       | * header file is included.                                                                      |  3543     4
   269       | *                                                                                               |  3544     4
   270       | * Here's a quick run-down of the versions:                                                      |  3545     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  3546     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  3547     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  3548     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  3549     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  3550     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  3551     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  3552     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  3553     4
   279       | *                                                                                               |  3554     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  3555     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  3556     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  3557     4
   283       | *                                                                                               |  3558     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  3559     4
   285       | */                                                                                              |  3560     4
   286       |                                                                                                 |  3561     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  3562     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  3563     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  3564     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  3565     4
   291       |#endif                                                                                           |  3566     4
   292       |                                                                                                 |  3567     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  3568     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  3569     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  3570     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  3571     4
   297       |#endif                                                                                           |  3572     4
   298       |                                                                                                 |  3573     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  3574     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  3575     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  3576     4
   302       |#define __XSI_VISIBLE           700                                                              |  3577     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  3578     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  3579     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  3580     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    70


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   306       |#define __XSI_VISIBLE           600                                                              |  3581     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  3582     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  3583     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  3584     4
   310       |#define __XSI_VISIBLE           500                                                              |  3585     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  3586     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  3587     4
   313       |#endif                                                                                           |  3588     4
   314       |#endif                                                                                           |  3589     4
   315       |                                                                                                 |  3590     4
   316       |/*                                                                                               |  3591     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  3592     4
   318       | * important.                                                                                    |  3593     4
   319       | */                                                                                              |  3594     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  3595     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  3596     4
   322       |#endif                                                                                           |  3597     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  3598     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  3599     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  3600     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  3601     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  3602     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  3603     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  3604     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  3605     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  3606     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  3607     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  3608     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  3609     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  3610     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  3611     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  3612     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  3613     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  3614     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  3615     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  3616     4
   342       |#else                                                                                            |  3617     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  3618     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  3619     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  3620     4
   346       |#else                                                                                            |  3621     4
   347       |/*-                                                                                              |  3622     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  3623     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  3624     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  3625     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  3626     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  3627     4
   353       | * a test program to print out the values.                                                       |  3628     4
   354       | *                                                                                               |  3629     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  3630     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  3631     4
   357       | * environment (and in fact we will never get here).                                             |  3632     4
   358       | */                                                                                              |  3633     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    71


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  3634     4
   360       |#define __POSIX_VISIBLE         0                                                                |  3635     4
   361       |#define __XSI_VISIBLE           0                                                                |  3636     4
   362       |#define __BSD_VISIBLE           0                                                                |  3637     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  3638     4
   364       |#define __EXT1_VISIBLE          0                                                                |  3639     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  3640     4
   366       |#define __POSIX_VISIBLE         0                                                                |  3641     4
   367       |#define __XSI_VISIBLE           0                                                                |  3642     4
   368       |#define __BSD_VISIBLE           0                                                                |  3643     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  3644     4
   370       |#define __EXT1_VISIBLE          0                                                                |  3645     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  3646     4
   372       |#define __POSIX_VISIBLE         0                                                                |  3647     4
   373       |#define __XSI_VISIBLE           0                                                                |  3648     4
   374       |#define __BSD_VISIBLE           0                                                                |  3649     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  3650     4
   376       |#define __EXT1_VISIBLE          0                                                                |  3651     4
   377       |#else                           /* Default environment: show everything. */                      |  3652     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  3653     4
   379       |#define __XSI_VISIBLE           700                                                              |  3654     4
   380       |#define __BSD_VISIBLE           1                                                                |  3655     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  3656     4
   382       |#define __EXT1_VISIBLE          1                                                                |  3657     4
   383       |#endif                                                                                           |  3658     4
   384       |#endif                                                                                           |  3659     4
   385       |                                                                                                 |  3660     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  3661     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  3662     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  3663     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  3664     4
   390       |#define __EXT1_VISIBLE          1                                                                |  3665     4
   391       |#else                                                                                            |  3666     4
   392       |#define __EXT1_VISIBLE          0                                                                |  3667     4
   393       |#endif                                                                                           |  3668     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  3669     4
   395       |                                                                                                 |  3670     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  3671     4
   397       |#define __NO_TLS 1                                                                               |  3672     4
   398       |#endif                                                                                           |  3673     4
   399       |                                                                                                 |  3674     4
   400       |                                                                                                 |  3675     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  3676     4
   402       |#define __FBSDID(x)                                                                              |  3677     4
   403       |                                                                                                 |  3678     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  3679     4
   405       |#pragma pack(reset)                                                                              |  3680     4
    42       |#include <sys/types.h>                  /* XXX adds too much pollution. */                       |  3681    13
     1       |/* release 2.25.00 */                                                                            |  3682     3
     2       |#pragma pack()                                                                                   |  3683     3
     3       |/*-                                                                                              |  3684     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    |  3685     3
     5       | *      The Regents of the University of California.  All rights reserved.                       |  3686     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    72


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  3687     3
     7       | * All or some portions of this file are derived from material licensed                          |  3688     3
     8       | * to the University of California by American Telephone and Telegraph                           |  3689     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  3690     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  3691     3
    11       | *                                                                                               |  3692     3
    12       | * Redistribution and use in source and binary forms, with or without                            |  3693     3
    13       | * modification, are permitted provided that the following conditions                            |  3694     3
    14       | * are met:                                                                                      |  3695     3
    15       | * 1. Redistributions of source code must retain the above copyright                             |  3696     3
    16       | *    notice, this list of conditions and the following disclaimer.                              |  3697     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  3698     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  3699     3
    19       | *    documentation and/or other materials provided with the distribution.                       |  3700     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  3701     3
    21       | *    may be used to endorse or promote products derived from this software                      |  3702     3
    22       | *    without specific prior written permission.                                                 |  3703     3
    23       | *                                                                                               |  3704     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  3705     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  3706     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  3707     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  3708     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  3709     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  3710     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  3711     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  3712     3
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  3713     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  3714     3
    34       | * SUCH DAMAGE.                                                                                  |  3715     3
    35       | *                                                                                               |  3716     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   |  3717     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        |  3718     3
    38       | */                                                                                              |  3719     3
    39       |                                                                                                 |  3720     3
    40       |#ifndef _SYS_TYPES_H_                                                                            |  3721     3
    41       |#define _SYS_TYPES_H_                                                                            |  3722     3
    42       |                                                                                                 |  3723     3
    43       |#include <sys/cdefs.h>                                                                           |  3724     3
    44       |                                                                                                 |  3725     3
    45       |/* Machine type dependent parameters. */                                                         |  3726     3
    46       |#include <machine/endian.h>                                                                      |  3727     3
    47       |#include <sys/_types.h>                                                                          |  3728     3
    48       |                                                                                                 |  3729     3
    49       |#include <sys/_pthreadtypes.h>                                                                   |  3730     3
    50       |                                                                                                 |  3731     3
    51       |#if __BSD_VISIBLE                                                                                |  3732     3
    52       |typedef unsigned char   u_char;                                                                  |  3733     3
    53       |typedef unsigned short  u_short;                                                                 |  3734     3
    54       |typedef unsigned int    u_int;                                                                   |  3735     3
    55       |typedef unsigned long   u_long;                                                                  |  3736     3
    56       |#ifndef _KERNEL                                                                                  |  3737     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                |  3738     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                |  3739     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    73


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    59       |#endif                                                                                           |  3740     3
    60       |#endif                                                                                           |  3741     3
    61       |                                                                                                 |  3742     3
    62       |/*                                                                                               |  3743     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          |  3744     3
    64       | */                                                                                              |  3745     3
    65       |#ifndef _INT8_T_DECLARED                                                                         |  3746     3
    66       |typedef __int8_t        int8_t;                                                                  |  3747     3
    67       |#define _INT8_T_DECLARED                                                                         |  3748     3
    68       |#endif                                                                                           |  3749     3
    69       |                                                                                                 |  3750     3
    70       |#ifndef _INT16_T_DECLARED                                                                        |  3751     3
    71       |typedef __int16_t       int16_t;                                                                 |  3752     3
    72       |#define _INT16_T_DECLARED                                                                        |  3753     3
    73       |#endif                                                                                           |  3754     3
    74       |                                                                                                 |  3755     3
    75       |#ifndef _INT32_T_DECLARED                                                                        |  3756     3
    76       |typedef __int32_t       int32_t;                                                                 |  3757     3
    77       |#define _INT32_T_DECLARED                                                                        |  3758     3
    78       |#endif                                                                                           |  3759     3
    79       |                                                                                                 |  3760     3
    80       |#ifndef _INT64_T_DECLARED                                                                        |  3761     3
    81       |typedef __int64_t       int64_t;                                                                 |  3762     3
    82       |#define _INT64_T_DECLARED                                                                        |  3763     3
    83       |#endif                                                                                           |  3764     3
    84       |                                                                                                 |  3765     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        |  3766     3
    86       |typedef __uint8_t       uint8_t;                                                                 |  3767     3
    87       |#define _UINT8_T_DECLARED                                                                        |  3768     3
    88       |#endif                                                                                           |  3769     3
    89       |                                                                                                 |  3770     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       |  3771     3
    91       |typedef __uint16_t      uint16_t;                                                                |  3772     3
    92       |#define _UINT16_T_DECLARED                                                                       |  3773     3
    93       |#endif                                                                                           |  3774     3
    94       |                                                                                                 |  3775     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       |  3776     3
    96       |typedef __uint32_t      uint32_t;                                                                |  3777     3
    97       |#define _UINT32_T_DECLARED                                                                       |  3778     3
    98       |#endif                                                                                           |  3779     3
    99       |                                                                                                 |  3780     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       |  3781     3
   101       |typedef __uint64_t      uint64_t;                                                                |  3782     3
   102       |#define _UINT64_T_DECLARED                                                                       |  3783     3
   103       |#endif                                                                                           |  3784     3
   104       |                                                                                                 |  3785     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       |  3786     3
   106       |typedef __intptr_t      intptr_t;                                                                |  3787     3
   107       |typedef __uintptr_t     uintptr_t;                                                               |  3788     3
   108       |#define _INTPTR_T_DECLARED                                                                       |  3789     3
   109       |#endif                                                                                           |  3790     3
   110       |                                                                                                 |  3791     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    |  3792     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    74


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   112       |typedef __uint16_t      u_int16_t;                                                               |  3793     3
   113       |typedef __uint32_t      u_int32_t;                                                               |  3794     3
   114       |typedef __uint64_t      u_int64_t;                                                               |  3795     3
   115       |                                                                                                 |  3796     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 |  3797     3
   117       |typedef __int64_t       quad_t;                                                                  |  3798     3
   118       |typedef quad_t *        qaddr_t;                                                                 |  3799     3
   119       |                                                                                                 |  3800     3
   120       |typedef char *          caddr_t;        /* core address */                                       |  3801     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     |  3802     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  |  3803     3
   123       |                                                                                                 |  3804     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      |  3805     3
   125       |typedef __blksize_t     blksize_t;                                                               |  3806     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      |  3807     3
   127       |#endif                                                                                           |  3808     3
   128       |                                                                                                 |  3809     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       |  3810     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                |  3811     3
   131       |#define _BLKCNT_T_DECLARED                                                                       |  3812     3
   132       |#endif                                                                                           |  3813     3
   133       |                                                                                                 |  3814     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        |  3815     3
   135       |typedef __clock_t       clock_t;                                                                 |  3816     3
   136       |#define _CLOCK_T_DECLARED                                                                        |  3817     3
   137       |#endif                                                                                           |  3818     3
   138       |                                                                                                 |  3819     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      |  3820     3
   140       |typedef __clockid_t     clockid_t;                                                               |  3821     3
   141       |#define _CLOCKID_T_DECLARED                                                                      |  3822     3
   142       |#endif                                                                                           |  3823     3
   143       |                                                                                                 |  3824     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             |  3825     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       |  3826     3
   146       |                                                                                                 |  3827     3
   147       |#ifndef _DEV_T_DECLARED                                                                          |  3828     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       |  3829     3
   149       |#define _DEV_T_DECLARED                                                                          |  3830     3
   150       |#endif                                                                                           |  3831     3
   151       |                                                                                                 |  3832     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       |  3833     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         |  3834     3
   154       |#define _FFLAGS_T_DECLARED                                                                       |  3835     3
   155       |#endif                                                                                           |  3836     3
   156       |                                                                                                 |  3837     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 |  3838     3
   158       |                                                                                                 |  3839     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      |  3840     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              |  3841     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              |  3842     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     |  3843     3
   163       |#endif                                                                                           |  3844     3
   164       |                                                                                                 |  3845     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    75


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   165       |#ifndef _GID_T_DECLARED                                                                          |  3846     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           |  3847     3
   167       |#define _GID_T_DECLARED                                                                          |  3848     3
   168       |#endif                                                                                           |  3849     3
   169       |                                                                                                 |  3850     3
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      |  3851     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     |  3852     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      |  3853     3
   173       |#endif                                                                                           |  3854     3
   174       |                                                                                                 |  3855     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      |  3856     3
   176       |typedef __uint16_t      in_port_t;                                                               |  3857     3
   177       |#define _IN_PORT_T_DECLARED                                                                      |  3858     3
   178       |#endif                                                                                           |  3859     3
   179       |                                                                                                 |  3860     3
   180       |#ifndef _ID_T_DECLARED                                                                           |  3861     3
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          |  3862     3
   182       |#define _ID_T_DECLARED                                                                           |  3863     3
   183       |#endif                                                                                           |  3864     3
   184       |                                                                                                 |  3865     3
   185       |#ifndef _INO_T_DECLARED                                                                          |  3866     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       |  3867     3
   187       |#define _INO_T_DECLARED                                                                          |  3868     3
   188       |#endif                                                                                           |  3869     3
   189       |                                                                                                 |  3870     3
   190       |#ifndef _KEY_T_DECLARED                                                                          |  3871     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            |  3872     3
   192       |#define _KEY_T_DECLARED                                                                          |  3873     3
   193       |#endif                                                                                           |  3874     3
   194       |                                                                                                 |  3875     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        |  3876     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             |  3877     3
   197       |#define _LWPID_T_DECLARED                                                                        |  3878     3
   198       |#endif                                                                                           |  3879     3
   199       |                                                                                                 |  3880     3
   200       |#ifndef _MODE_T_DECLARED                                                                         |  3881     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        |  3882     3
   202       |#define _MODE_T_DECLARED                                                                         |  3883     3
   203       |#endif                                                                                           |  3884     3
   204       |                                                                                                 |  3885     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        |  3886     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         |  3887     3
   207       |#define _NLINK_T_DECLARED                                                                        |  3888     3
   208       |#endif                                                                                           |  3889     3
   209       |                                                                                                 |  3890     3
   210       |#ifndef _OFF_T_DECLARED                                                                          |  3891     3
   211       |typedef __off_t         off_t;          /* file offset */                                        |  3892     3
   212       |#define _OFF_T_DECLARED                                                                          |  3893     3
   213       |#endif                                                                                           |  3894     3
   214       |                                                                                                 |  3895     3
   215       |#ifndef _PID_T_DECLARED                                                                          |  3896     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         |  3897     3
   217       |#define _PID_T_DECLARED                                                                          |  3898     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    76


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   218       |#endif                                                                                           |  3899     3
   219       |                                                                                                 |  3900     3
   220       |typedef __register_t    register_t;                                                              |  3901     3
   221       |                                                                                                 |  3902     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         |  3903     3
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     |  3904     3
   224       |#define _RLIM_T_DECLARED                                                                         |  3905     3
   225       |#endif                                                                                           |  3906     3
   226       |                                                                                                 |  3907     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            |  3908     3
   228       |                                                                                                 |  3909     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         |  3910     3
   230       |typedef __size_t        size_t;                                                                  |  3911     3
   231       |#define _SIZE_T_DECLARED                                                                         |  3912     3
   232       |#endif                                                                                           |  3913     3
   233       |                                                                                                 |  3914     3
   234       |#ifndef _SSIZE_T_DECLARED                                                                        |  3915     3
   235       |typedef __ssize_t       ssize_t;                                                                 |  3916     3
   236       |#define _SSIZE_T_DECLARED                                                                        |  3917     3
   237       |#endif                                                                                           |  3918     3
   238       |                                                                                                 |  3919     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  3920     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              |  3921     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    |  3922     3
   242       |#endif                                                                                           |  3923     3
   243       |                                                                                                 |  3924     3
   244       |#ifndef _TIME_T_DECLARED                                                                         |  3925     3
   245       |typedef __time_t        time_t;                                                                  |  3926     3
   246       |#define _TIME_T_DECLARED                                                                         |  3927     3
   247       |#endif                                                                                           |  3928     3
   248       |                                                                                                 |  3929     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        |  3930     3
   250       |typedef __timer_t       timer_t;                                                                 |  3931     3
   251       |#define _TIMER_T_DECLARED                                                                        |  3932     3
   252       |#endif                                                                                           |  3933     3
   253       |                                                                                                 |  3934     3
   254       |typedef __u_register_t  u_register_t;                                                            |  3935     3
   255       |                                                                                                 |  3936     3
   256       |#ifndef _UID_T_DECLARED                                                                          |  3937     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            |  3938     3
   258       |#define _UID_T_DECLARED                                                                          |  3939     3
   259       |#endif                                                                                           |  3940     3
   260       |                                                                                                 |  3941     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     |  3942     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            |  3943     3
   263       |#define _USECONDS_T_DECLARED                                                                     |  3944     3
   264       |#endif                                                                                           |  3945     3
   265       |                                                                                                 |  3946     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             |  3947     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            |  3948     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              |  3949     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             |  3950     3
   270       |typedef __vm_size_t     vm_size_t;                                                               |  3951     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    77


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   271       |                                                                                                 |  3952     3
   272       |#ifdef _KERNEL                                                                                   |  3953     3
   273       |typedef int             boolean_t;                                                               |  3954     3
   274       |typedef __cpumask_t     cpumask_t;                                                               |  3955     3
   275       |typedef __intfptr_t     intfptr_t;                                                               |  3956     3
   276       |                                                                                                 |  3957     3
   277       |/*-                                                                                              |  3958     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      |  3959     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           |  3960     3
   280       | * compatibility is essential.  Least-width types should be used even less                       |  3961     3
   281       | * since they provide smaller benefits.                                                          |  3962     3
   282       | * XXX should be MD.                                                                             |  3963     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     |  3964     3
   284       | */                                                                                              |  3965     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 |  3966     3
   286       |                                                                                                 |  3967     3
   287       |typedef __uintfptr_t    uintfptr_t;                                                              |  3968     3
   288       |typedef __uint64_t      uoff_t;                                                                  |  3969     3
   289       |typedef struct vm_page  *vm_page_t;                                                              |  3970     3
   290       |                                                                                                 |  3971     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            |  3972     3
   292       |                                                                                                 |  3973     3
   293       |#endif /* !_KERNEL */                                                                            |  3974     3
   294       |                                                                                                 |  3975     3
   295       |/*                                                                                               |  3976     3
   296       | * The following are all things that really shouldn't exist in this header,                      |  3977     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          |  3978     3
   298       | */                                                                                              |  3979     3
   299       |#if __BSD_VISIBLE                                                                                |  3980     3
   300       |                                                                                                 |  3981     3
   301       |#include <sys/select.h>                                                                          |  3982     3
   302       |                                                                                                 |  3983     3
   303       |#ifndef _KERNEL                                                                                  |  3984     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    |  3985     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    |  3986     3
   306       |#endif /* !_KERNEL */                                                                            |  3987     3
   307       |                                                                                                 |  3988     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    |  3989     3
   309       |                                                                                                 |  3990     3
   310       |/*                                                                                               |  3991     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             |  3992     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             |  3993     3
   313       | * 64-bit off_t's.                                                                               |  3994     3
   314       | */                                                                                              |  3995     3
   315       |#ifndef _KERNEL                                                                                  |  3996     3
   316       |__BEGIN_DECLS                                                                                    |  3997     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      |  3998     3
   318       |#define _FTRUNCATE_DECLARED                                                                      |  3999     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  4000     3
   320       |int      ftruncate(int, off_t);                                                                  |  4001     3
   321       |#endif                                                                                           |  4002     3
   322       |#ifndef _LSEEK_DECLARED                                                                          |  4003     3
   323       |#define _LSEEK_DECLARED                                                                          |  4004     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    78


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   324       |off_t    lseek(int, off_t, int);                                                                 |  4005     3
   325       |#endif                                                                                           |  4006     3
   326       |#ifndef _MMAP_DECLARED                                                                           |  4007     3
   327       |#define _MMAP_DECLARED                                                                           |  4008     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             |  4009     3
   329       |#endif                                                                                           |  4010     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       |  4011     3
   331       |#define _TRUNCATE_DECLARED                                                                       |  4012     3
   332       |int      truncate(const char *, off_t);                                                          |  4013     3
   333       |#endif                                                                                           |  4014     3
   334       |__END_DECLS                                                                                      |  4015     3
   335       |#endif /* !_KERNEL */                                                                            |  4016     3
   336       |                                                                                                 |  4017     3
   337       |#endif /* __BSD_VISIBLE */                                                                       |  4018     3
   338       |                                                                                                 |  4019     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      |  4020     3
   340       |#pragma pack(reset)                                                                              |  4021     3
    43       |#include <sys/unistd.h>                                                                          |  4022    13
     1       |/* release 2.25.00 */                                                                            |  4023    14
     2       |#pragma pack()                                                                                   |  4024    14
     3       |/*-                                                                                              |  4025    14
     4       | * Copyright (c) 1989, 1993                                                                      |  4026    14
     5       | *      The Regents of the University of California.  All rights reserved.                       |  4027    14
     6       | *                                                                                               |  4028    14
     7       | * Redistribution and use in source and binary forms, with or without                            |  4029    14
     8       | * modification, are permitted provided that the following conditions                            |  4030    14
     9       | * are met:                                                                                      |  4031    14
    10       | * 1. Redistributions of source code must retain the above copyright                             |  4032    14
    11       | *    notice, this list of conditions and the following disclaimer.                              |  4033    14
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4034    14
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  4035    14
    14       | *    documentation and/or other materials provided with the distribution.                       |  4036    14
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  4037    14
    16       | *    may be used to endorse or promote products derived from this software                      |  4038    14
    17       | *    without specific prior written permission.                                                 |  4039    14
    18       | *                                                                                               |  4040    14
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  4041    14
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  4042    14
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  4043    14
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  4044    14
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  4045    14
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  4046    14
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  4047    14
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  4048    14
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  4049    14
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  4050    14
    29       | * SUCH DAMAGE.                                                                                  |  4051    14
    30       | *                                                                                               |  4052    14
    31       | *      @(#)unistd.h    8.2 (Berkeley) 1/7/94                                                    |  4053    14
    32       | */                                                                                              |  4054    14
    33       |                                                                                                 |  4055    14
    34       |#ifndef _SYS_UNISTD_H_                                                                           |  4056    14
    35       |#define _SYS_UNISTD_H_                                                                           |  4057    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    79


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       |                                                                                                 |  4058    14
    37       |#include <sys/cdefs.h>                                                                           |  4059    14
     1       |/* release 2.25.00 */                                                                            |  4060     4
     2       |#pragma pack()                                                                                   |  4061     4
     3       |/*                                                                                               |  4062     4
     4       | * Copyright (c) 1991, 1993                                                                      |  4063     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  4064     4
     6       | *                                                                                               |  4065     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  4066     4
     8       | * Berkeley Software Design, Inc.                                                                |  4067     4
     9       | *                                                                                               |  4068     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  4069     4
    11       | * modification, are permitted provided that the following conditions                            |  4070     4
    12       | * are met:                                                                                      |  4071     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  4072     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  4073     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4074     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  4075     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  4076     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  4077     4
    19       | *    must display the following acknowledgement:                                                |  4078     4
    20       | *      This product includes software developed by the University of                            |  4079     4
    21       | *      California, Berkeley and its contributors.                                               |  4080     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  4081     4
    23       | *    may be used to endorse or promote products derived from this software                      |  4082     4
    24       | *    without specific prior written permission.                                                 |  4083     4
    25       | *                                                                                               |  4084     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  4085     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  4086     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  4087     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  4088     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  4089     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  4090     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  4091     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  4092     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  4093     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  4094     4
    36       | * SUCH DAMAGE.                                                                                  |  4095     4
    37       | *                                                                                               |  4096     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  4097     4
    39       | */                                                                                              |  4098     4
    40       |                                                                                                 |  4099     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  4100     4
    42       |#define _SYS_CDEFS_H_                                                                            |  4101     4
    43       |                                                                                                 |  4102     4
    44       |#if defined(__cplusplus)                                                                         |  4103     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  4104     4
    46       |#define __END_DECLS     }                                                                        |  4105     4
    47       |#else                                                                                            |  4106     4
    48       |#define __BEGIN_DECLS                                                                            |  4107     4
    49       |#define __END_DECLS                                                                              |  4108     4
    50       |#endif                                                                                           |  4109     4
    51       |                                                                                                 |  4110     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    80


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |/*                                                                                               |  4111     4
    53       | * This code has been put in place to help reduce the addition of                                |  4112     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  4113     4
    55       | * having a compiler-agnostic source tree.                                                       |  4114     4
    56       | */                                                                                              |  4115     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  4116     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  4117     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  4118     4
    60       |                                                                                                 |  4119     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  4120     4
    62       |                                                                                                 |  4121     4
    63       |                                                                                                 |  4122     4
    64       |/*                                                                                               |  4123     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  4124     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  4125     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  4126     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  4127     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  4128     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  4129     4
    71       | * this only works with ANSI C.                                                                  |  4130     4
    72       | *                                                                                               |  4131     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  4132     4
    74       | * first.  It is only available with ANSI C.                                                     |  4133     4
    75       | */                                                                                              |  4134     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  4135     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  4136     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  4137     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  4138     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  4139     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  4140     4
    82       |                                                                                                 |  4141     4
    83       |#define __const         const           /* define reserved names to standard */                  |  4142     4
    84       |#define __signed        signed                                                                   |  4143     4
    85       |#define __volatile      volatile                                                                 |  4144     4
    86       |#if defined(__cplusplus)                                                                         |  4145     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  4146     4
    88       |#else                                                                                            |  4147     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  4148     4
    90       |#endif /* !__cplusplus */                                                                        |  4149     4
    91       |                                                                                                 |  4150     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  4151     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  4152     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  4153     4
    95       |#define __STRING(x)     "x"                                                                      |  4154     4
    96       |                                                                                                 |  4155     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  4156     4
    98       |#define __inline                                                                                 |  4157     4
    99       |#define __signed                                                                                 |  4158     4
   100       |#define __volatile                                                                               |  4159     4
   101       |/*                                                                                               |  4160     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  4161     4
   103       | * deleted from the program and old programs will want them left alone.                          |  4162     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  4163     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    81


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  4164     4
   106       | */                                                                                              |  4165     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  4166     4
   108       |#define const                           /* delete ANSI C keywords */                             |  4167     4
   109       |#define inline                                                                                   |  4168     4
   110       |#define signed                                                                                   |  4169     4
   111       |#define volatile                                                                                 |  4170     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  4171     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  4172     4
   114       |                                                                                                 |  4173     4
   115       |/*                                                                                               |  4174     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  4175     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  4176     4
   118       | */                                                                                              |  4177     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  4178     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  4179     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  4180     4
   122       |#define __unused                                                                                 |  4181     4
   123       |#define __aligned(x)                                                                             |  4182     4
   124       |#define __section(x)                                                                             |  4183     4
   125       |#define __nonnull(x)                                                                             |  4184     4
   126       |#define __used                                                                                   |  4185     4
   127       |                                                                                                 |  4186     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  4187     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  4188     4
   130       |                                                                                                 |  4189     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  4190     4
   132       |#define __func__  NULL                                                                           |  4191     4
   133       |#endif                                                                                           |  4192     4
   134       |                                                                                                 |  4193     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  4194     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  4195     4
   137       |#endif                                                                                           |  4196     4
   138       |                                                                                                 |  4197     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  4198     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  4199     4
   141       | **/                                                                                             |  4200     4
   142       |#ifndef __cplusplus                                                                              |  4201     4
   143       |#define __restrict __restrict__                                                                  |  4202     4
   144       |#else                                                                                            |  4203     4
   145       |/* Systems/C++ does not */                                                                       |  4204     4
   146       |#define __restrict                                                                               |  4205     4
   147       |#endif                                                                                           |  4206     4
   148       |                                                                                                 |  4207     4
   149       |/*                                                                                               |  4208     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  4209     4
   151       | */                                                                                              |  4210     4
   152       |#define __predict_true(exp)     (exp)                                                            |  4211     4
   153       |#define __predict_false(exp)    (exp)                                                            |  4212     4
   154       |                                                                                                 |  4213     4
   155       |                                                                                                 |  4214     4
   156       |/*                                                                                               |  4215     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  4216     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    82


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   158       | * <sys/types.h> reference __offsetof().                                                         |  4217     4
   159       | *                                                                                               |  4218     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  4219     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  4220     4
   162       | */                                                                                              |  4221     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  4222     4
   164       |#undef __offsetof                                                                                |  4223     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  4224     4
   166       |#endif                                                                                           |  4225     4
   167       |                                                                                                 |  4226     4
   168       |/*                                                                                               |  4227     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  4228     4
   170       | * or scanf-like arguments.                                                                      |  4229     4
   171       | */                                                                                              |  4230     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  4231     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  4232     4
   174       |#define __format_arg(fmtarg)                                                                     |  4233     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  4234     4
   176       |                                                                                                 |  4235     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  4236     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  4237     4
   179       |                                                                                                 |  4238     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  4239     4
   181       |#define __weak_reference(sym,alias)                                                              |  4240     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  4241     4
   183       |#define __warn_references(sym,msg)                                                               |  4242     4
   184       |                                                                                                 |  4243     4
   185       | /* This places the string into the resulting object.  It should */                              |  4244     4
   186       | /* probably become #pragma ident */                                                             |  4245     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  4246     4
   188       |                                                                                                 |  4247     4
   189       |#ifndef __RCSID                                                                                  |  4248     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  4249     4
   191       |#endif                                                                                           |  4250     4
   192       |                                                                                                 |  4251     4
   193       |/*                                                                                               |  4252     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  4253     4
   195       | * Usage:                                                                                        |  4254     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  4255     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  4256     4
   198       | */                                                                                              |  4257     4
   199       |#ifndef __SYSCID                                                                                 |  4258     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  4259     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  4260     4
   202       |#else                                                                                            |  4261     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  4262     4
   204       |#endif                                                                                           |  4263     4
   205       |#endif                                                                                           |  4264     4
   206       |                                                                                                 |  4265     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  4266     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  4267     4
   209       |#endif                                                                                           |  4268     4
   210       |                                                                                                 |  4269     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    83


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   211       |#ifndef __COPYRIGHT                                                                              |  4270     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  4271     4
   213       |#endif                                                                                           |  4272     4
   214       |                                                                                                 |  4273     4
   215       |                                                                                                 |  4274     4
   216       |#ifndef __DECONST                                                                                |  4275     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  4276     4
   218       |#endif                                                                                           |  4277     4
   219       |                                                                                                 |  4278     4
   220       |#ifndef __DEVOLATILE                                                                             |  4279     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  4280     4
   222       |#endif                                                                                           |  4281     4
   223       |                                                                                                 |  4282     4
   224       |#ifndef __DEQUALIFY                                                                              |  4283     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  4284     4
   226       |#endif                                                                                           |  4285     4
   227       |                                                                                                 |  4286     4
   228       |                                                                                                 |  4287     4
   229       |/*-                                                                                              |  4288     4
   230       | * The following definitions are an extension of the behavior originally                         |  4289     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  4290     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  4291     4
   233       | * header file is included.                                                                      |  4292     4
   234       | *                                                                                               |  4293     4
   235       | * Here's a quick run-down of the versions:                                                      |  4294     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  4295     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  4296     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  4297     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  4298     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  4299     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  4300     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  4301     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  4302     4
   244       | *                                                                                               |  4303     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  4304     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  4305     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  4306     4
   248       | *                                                                                               |  4307     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  4308     4
   250       | */                                                                                              |  4309     4
   251       |                                                                                                 |  4310     4
   252       |/*                                                                                               |  4311     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  4312     4
   254       | * available. Also make them available when requested so.                                        |  4313     4
   255       | */                                                                                              |  4314     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  4315     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  4316     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  4317     4
   259       |#define __DF_VISIBLE    1                                                                        |  4318     4
   260       |#else                                                                                            |  4319     4
   261       |#define __DF_VISIBLE    0                                                                        |  4320     4
   262       |#endif                                                                                           |  4321     4
   263       |                                                                                                 |  4322     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    84


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   264       |/*-                                                                                              |  4323     4
   265       | * The following definitions are an extension of the behavior originally                         |  4324     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  4325     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  4326     4
   268       | * header file is included.                                                                      |  4327     4
   269       | *                                                                                               |  4328     4
   270       | * Here's a quick run-down of the versions:                                                      |  4329     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  4330     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  4331     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  4332     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  4333     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  4334     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  4335     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  4336     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  4337     4
   279       | *                                                                                               |  4338     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  4339     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  4340     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  4341     4
   283       | *                                                                                               |  4342     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  4343     4
   285       | */                                                                                              |  4344     4
   286       |                                                                                                 |  4345     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  4346     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  4347     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  4348     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  4349     4
   291       |#endif                                                                                           |  4350     4
   292       |                                                                                                 |  4351     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  4352     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  4353     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  4354     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  4355     4
   297       |#endif                                                                                           |  4356     4
   298       |                                                                                                 |  4357     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  4358     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  4359     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  4360     4
   302       |#define __XSI_VISIBLE           700                                                              |  4361     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  4362     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  4363     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  4364     4
   306       |#define __XSI_VISIBLE           600                                                              |  4365     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  4366     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  4367     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  4368     4
   310       |#define __XSI_VISIBLE           500                                                              |  4369     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  4370     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  4371     4
   313       |#endif                                                                                           |  4372     4
   314       |#endif                                                                                           |  4373     4
   315       |                                                                                                 |  4374     4
   316       |/*                                                                                               |  4375     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    85


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  4376     4
   318       | * important.                                                                                    |  4377     4
   319       | */                                                                                              |  4378     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  4379     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  4380     4
   322       |#endif                                                                                           |  4381     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  4382     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  4383     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  4384     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  4385     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  4386     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  4387     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  4388     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  4389     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  4390     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  4391     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  4392     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  4393     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  4394     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  4395     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  4396     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  4397     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  4398     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  4399     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  4400     4
   342       |#else                                                                                            |  4401     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  4402     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  4403     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  4404     4
   346       |#else                                                                                            |  4405     4
   347       |/*-                                                                                              |  4406     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  4407     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  4408     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  4409     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  4410     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  4411     4
   353       | * a test program to print out the values.                                                       |  4412     4
   354       | *                                                                                               |  4413     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  4414     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  4415     4
   357       | * environment (and in fact we will never get here).                                             |  4416     4
   358       | */                                                                                              |  4417     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  4418     4
   360       |#define __POSIX_VISIBLE         0                                                                |  4419     4
   361       |#define __XSI_VISIBLE           0                                                                |  4420     4
   362       |#define __BSD_VISIBLE           0                                                                |  4421     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  4422     4
   364       |#define __EXT1_VISIBLE          0                                                                |  4423     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  4424     4
   366       |#define __POSIX_VISIBLE         0                                                                |  4425     4
   367       |#define __XSI_VISIBLE           0                                                                |  4426     4
   368       |#define __BSD_VISIBLE           0                                                                |  4427     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  4428     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    86


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   370       |#define __EXT1_VISIBLE          0                                                                |  4429     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  4430     4
   372       |#define __POSIX_VISIBLE         0                                                                |  4431     4
   373       |#define __XSI_VISIBLE           0                                                                |  4432     4
   374       |#define __BSD_VISIBLE           0                                                                |  4433     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  4434     4
   376       |#define __EXT1_VISIBLE          0                                                                |  4435     4
   377       |#else                           /* Default environment: show everything. */                      |  4436     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  4437     4
   379       |#define __XSI_VISIBLE           700                                                              |  4438     4
   380       |#define __BSD_VISIBLE           1                                                                |  4439     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  4440     4
   382       |#define __EXT1_VISIBLE          1                                                                |  4441     4
   383       |#endif                                                                                           |  4442     4
   384       |#endif                                                                                           |  4443     4
   385       |                                                                                                 |  4444     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  4445     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  4446     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  4447     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  4448     4
   390       |#define __EXT1_VISIBLE          1                                                                |  4449     4
   391       |#else                                                                                            |  4450     4
   392       |#define __EXT1_VISIBLE          0                                                                |  4451     4
   393       |#endif                                                                                           |  4452     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  4453     4
   395       |                                                                                                 |  4454     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  4455     4
   397       |#define __NO_TLS 1                                                                               |  4456     4
   398       |#endif                                                                                           |  4457     4
   399       |                                                                                                 |  4458     4
   400       |                                                                                                 |  4459     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  4460     4
   402       |#define __FBSDID(x)                                                                              |  4461     4
   403       |                                                                                                 |  4462     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  4463     4
   405       |#pragma pack(reset)                                                                              |  4464     4
    38       |                                                                                                 |  4465    14
    39       |/*                                                                                               |  4466    14
    40       | * POSIX options and option groups we unconditionally do or don't                                |  4467    14
    41       | * implement.  Those options which are implemented (or not) entirely                             |  4468    14
    42       | * in user mode are defined in <unistd.h>.  Please keep this list in                             |  4469    14
    43       | * alphabetical order.                                                                           |  4470    14
    44       | *                                                                                               |  4471    14
    45       | * Anything which is defined as zero below **must** have an                                      |  4472    14
    46       | * implementation for the corresponding sysconf() which is able to                               |  4473    14
    47       | * determine conclusively whether or not the feature is supported.                               |  4474    14
    48       | * Anything which is defined as other than -1 below **must** have                                |  4475    14
    49       | * complete headers, types, and function declarations as specified by                            |  4476    14
    50       | * the POSIX standard; however, if the relevant sysconf() function                               |  4477    14
    51       | * returns -1, the functions may be stubbed out.                                                 |  4478    14
    52       | */                                                                                              |  4479    14
    53       |#define _POSIX_ADVISORY_INFO            -1                                                       |  4480    14
    54       |#define _POSIX_ASYNCHRONOUS_IO          0                                                        |  4481    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    87


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       |#define _POSIX_CHOWN_RESTRICTED         1                                                        |  4482    14
    56       |#define _POSIX_CLOCK_SELECTION          -1                                                       |  4483    14
    57       |#define _POSIX_CPUTIME                  -1                                                       |  4484    14
    58       |#define _POSIX_FSYNC                    200112L                                                  |  4485    14
    59       |#define _POSIX_IPV6                     0                                                        |  4486    14
    60       |#define _POSIX_JOB_CONTROL              1                                                        |  4487    14
    61       |#define _POSIX_MAPPED_FILES             200112L                                                  |  4488    14
    62       |#define _POSIX_MEMLOCK                  -1                                                       |  4489    14
    63       |#define _POSIX_MEMLOCK_RANGE            200112L                                                  |  4490    14
    64       |#define _POSIX_MEMORY_PROTECTION        200112L                                                  |  4491    14
    65       |#define _POSIX_MESSAGE_PASSING          -1                                                       |  4492    14
    66       |#define _POSIX_MONOTONIC_CLOCK          -1                                                       |  4493    14
    67       |#define _POSIX_NO_TRUNC                 1                                                        |  4494    14
    68       |#define _POSIX_PRIORITIZED_IO           -1                                                       |  4495    14
    69       |#define _POSIX_PRIORITY_SCHEDULING      200112L                                                  |  4496    14
    70       |#define _POSIX_RAW_SOCKETS              200112L                                                  |  4497    14
    71       |#define _POSIX_REALTIME_SIGNALS         -1                                                       |  4498    14
    72       |#define _POSIX_SEMAPHORES               -1                                                       |  4499    14
    73       |#define _POSIX_SHARED_MEMORY_OBJECTS    200112L                                                  |  4500    14
    74       |#define _POSIX_SPORADIC_SERVER          -1                                                       |  4501    14
    75       |#define _POSIX_SYNCHRONIZED_IO          -1                                                       |  4502    14
    76       |#define _POSIX_TIMEOUTS                 -1                                                       |  4503    14
    77       |#define _POSIX_TYPED_MEMORY_OBJECTS     -1                                                       |  4504    14
    78       |#define _POSIX_VDISABLE                 0xff                                                     |  4505    14
    79       |                                                                                                 |  4506    14
    80       |#if __XSI_VISIBLE                                                                                |  4507    14
    81       |#define _XOPEN_SHM                      1                                                        |  4508    14
    82       |#define _XOPEN_STREAMS                  -1                                                       |  4509    14
    83       |#endif                                                                                           |  4510    14
    84       |                                                                                                 |  4511    14
    84       +                                                                                                 +  4511    14
    85       |/*                                                                                               |  4512    14
    86       | * Although we have saved user/group IDs, we do not use them in setuid                           |  4513    14
    87       | * as described in POSIX 1003.1, because the feature does not work for                           |  4514    14
    88       | * root.  We use the saved IDs in seteuid/setegid, which are not currently                       |  4515    14
    89       | * part of the POSIX 1003.1 specification.  XXX revisit for 1003.1-2001                          |  4516    14
    90       | * as this is now mandatory.                                                                     |  4517    14
    91       | */                                                                                              |  4518    14
    92       |#ifdef  _NOT_AVAILABLE                                                                           |  4519    14
    93       |#define _POSIX_SAVED_IDS        1 /* saved set-user-ID and set-group-ID */                       |  4520    14
    94       |#endif                                                                                           |  4521    14
    95       |                                                                                                 |  4522    14
    96       |/* Define the POSIX.1 version we target for compliance. */                                       |  4523    14
    97       |#define _POSIX_VERSION          200112L                                                          |  4524    14
    98       |                                                                                                 |  4525    14
    99       |/* access function */                                                                            |  4526    14
   100       |#define F_OK            0       /* test for existence of file */                                 |  4527    14
   101       |#define X_OK            0x01    /* test for execute or search permission */                      |  4528    14
   102       |#define W_OK            0x02    /* test for write permission */                                  |  4529    14
   103       |#define R_OK            0x04    /* test for read permission */                                   |  4530    14
   104       |                                                                                                 |  4531    14
   105       |/* whence values for lseek(2) */                                                                 |  4532    14
   106       |#ifndef SEEK_SET                                                                                 |  4533    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    88


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |#define SEEK_SET        0       /* set file offset to offset */                                  |  4534    14
   108       |#define SEEK_CUR        1       /* set file offset to current plus offset */                     |  4535    14
   109       |#define SEEK_END        2       /* set file offset to EOF plus offset */                         |  4536    14
   110       |#endif                                                                                           |  4537    14
   111       |                                                                                                 |  4538    14
   112       |#ifndef _POSIX_SOURCE                                                                            |  4539    14
   113       |/* whence values for lseek(2); renamed by POSIX 1003.1 */                                        |  4540    14
   114       |#define L_SET           SEEK_SET                                                                 |  4541    14
   115       |#define L_INCR          SEEK_CUR                                                                 |  4542    14
   116       |#define L_XTND          SEEK_END                                                                 |  4543    14
   117       |#endif                                                                                           |  4544    14
   118       |                                                                                                 |  4545    14
   119       |/* configurable pathname variables */                                                            |  4546    14
   120       |#define _PC_LINK_MAX             1                                                               |  4547    14
   121       |#define _PC_MAX_CANON            2                                                               |  4548    14
   122       |#define _PC_MAX_INPUT            3                                                               |  4549    14
   123       |#define _PC_NAME_MAX             4                                                               |  4550    14
   124       |#define _PC_PATH_MAX             5                                                               |  4551    14
   125       |#define _PC_PIPE_BUF             6                                                               |  4552    14
   126       |#define _PC_CHOWN_RESTRICTED     7                                                               |  4553    14
   127       |#define _PC_NO_TRUNC             8                                                               |  4554    14
   128       |#define _PC_VDISABLE             9                                                               |  4555    14
   129       |                                                                                                 |  4556    14
   130       |#if __POSIX_VISIBLE >= 199309                                                                    |  4557    14
   131       |#define _PC_ASYNC_IO            53                                                               |  4558    14
   132       |#define _PC_PRIO_IO             54                                                               |  4559    14
   133       |#define _PC_SYNC_IO             55                                                               |  4560    14
   134       |#endif                                                                                           |  4561    14
   135       |                                                                                                 |  4562    14
   135       +                                                                                                 +  4562    14
   136       |#if __POSIX_VISIBLE >= 200112                                                                    |  4563    14
   137       |#define _PC_ALLOC_SIZE_MIN      10                                                               |  4564    14
   138       |#define _PC_FILESIZEBITS        12                                                               |  4565    14
   139       |#define _PC_REC_INCR_XFER_SIZE  14                                                               |  4566    14
   140       |#define _PC_REC_MAX_XFER_SIZE   15                                                               |  4567    14
   141       |#define _PC_REC_MIN_XFER_SIZE   16                                                               |  4568    14
   142       |#define _PC_REC_XFER_ALIGN      17                                                               |  4569    14
   143       |#define _PC_SYMLINK_MAX         18                                                               |  4570    14
   144       |#endif                                                                                           |  4571    14
   145       |                                                                                                 |  4572    14
   145       +                                                                                                 +  4572    14
   146       |#if __BSD_VISIBLE                                                                                |  4573    14
   147       |#define _PC_ACL_EXTENDED        59                                                               |  4574    14
   148       |#define _PC_ACL_PATH_MAX        60                                                               |  4575    14
   149       |#define _PC_CAP_PRESENT         61                                                               |  4576    14
   150       |#define _PC_INF_PRESENT         62                                                               |  4577    14
   151       |#define _PC_MAC_PRESENT         63                                                               |  4578    14
   152       |#endif                                                                                           |  4579    14
   153       |                                                                                                 |  4580    14
   153       +                                                                                                 +  4580    14
   154       |#if __BSD_VISIBLE                                                                                |  4581    14
   155       |/*                                                                                               |  4582    14
   156       | * rfork() options.                                                                              |  4583    14
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    89


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   157       | *                                                                                               |  4584    14
   158       | * XXX currently, some operations without RFPROC set are not supported.                          |  4585    14
   159       | */                                                                                              |  4586    14
   159       +                                                                                                 +  4586    14
   160       |#define RFNAMEG         (1<<0)  /* UNIMPL new plan9 `name space' */                              |  4587    14
   161       |#define RFENVG          (1<<1)  /* UNIMPL copy plan9 `env space' */                              |  4588    14
   162       |#define RFFDG           (1<<2)  /* copy fd table */                                              |  4589    14
   163       |#define RFNOTEG         (1<<3)  /* UNIMPL create new plan9 `note group' */                       |  4590    14
   164       |#define RFPROC          (1<<4)  /* change child (else changes curproc) */                        |  4591    14
   165       |#define RFMEM           (1<<5)  /* share `address space' */                                      |  4592    14
   166       |#define RFNOWAIT        (1<<6)  /* give child to init */                                         |  4593    14
   167       |#define RFCNAMEG        (1<<10) /* UNIMPL zero plan9 `name space' */                             |  4594    14
   168       |#define RFCENVG         (1<<11) /* UNIMPL zero plan9 `env space' */                              |  4595    14
   169       |#define RFCFDG          (1<<12) /* close all fds, zero fd table */                               |  4596    14
   170       |#define RFTHREAD        (1<<13) /* enable kernel thread support */                               |  4597    14
   171       |#define RFSIGSHARE      (1<<14) /* share signal handlers */                                      |  4598    14
   172       |#define RFLINUXTHPN     (1<<16) /* do linux clone exit parent notification */                    |  4599    14
   173       |#define RFSTOPPED       (1<<17) /* leave child in a stopped state */                             |  4600    14
   174       |#define RFHIGHPID       (1<<18) /* use a pid higher then 10 (idleproc) */                        |  4601    14
   175       |#define RFPPWAIT        (1<<31) /* parent sleeps until child exits (vfork) */                    |  4602    14
   176       |#define RFKERNELONLY    (RFSTOPPED | RFHIGHPID | RFPPWAIT)                                       |  4603    14
   177       |                                                                                                 |  4604    14
   178       |#endif /* __BSD_VISIBLE */                                                                       |  4605    14
   179       |                                                                                                 |  4606    14
   180       |#endif /* !_SYS_UNISTD_H_ */                                                                     |  4607    14
   181       |#pragma pack(reset)                                                                              |  4608    14
    44       |#include <sys/_null.h>                                                                           |  4609    13
     1       |/* release 2.25.00 */                                                                            |  4610    15
     2       |#pragma pack()                                                                                   |  4611    15
     3       |/*-                                                                                              |  4612    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  4613    15
     5       | * All rights reserved.                                                                          |  4614    15
     6       | *                                                                                               |  4615    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  4616    15
     8       | * modification, are permitted provided that the following conditions                            |  4617    15
     9       | * are met:                                                                                      |  4618    15
    10       | *                                                                                               |  4619    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  4620    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  4621    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4622    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  4623    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  4624    15
    16       | *                                                                                               |  4625    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  4626    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  4627    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  4628    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  4629    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  4630    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  4631    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  4632    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  4633    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  4634    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  4635    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    90


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    27       | *                                                                                               |  4636    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  4637    15
    29       | */                                                                                              |  4638    15
    30       |                                                                                                 |  4639    15
    31       |#ifndef NULL                                                                                     |  4640    15
    32       |                                                                                                 |  4641    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  4642    15
    34       |#define NULL    ((void *)0)                                                                      |  4643    15
    35       |#else                                                                                            |  4644    15
    36       |#if defined(__LP64__)                                                                            |  4645    15
    37       |#define NULL    (0L)                                                                             |  4646    15
    38       |#else                                                                                            |  4647    15
    39       |#define NULL    0                                                                                |  4648    15
    40       |#endif  /* __LP64__ */                                                                           |  4649    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  4650    15
    42       |                                                                                                 |  4651    15
    43       |#endif                                                                                           |  4652    15
    44       |#pragma pack(reset)                                                                              |  4653    15
    45       |#include <sys/_types.h>                                                                          |  4654    13
     1       |/* release 2.25.00 */                                                                            |  4655     6
     2       |#pragma pack()                                                                                   |  4656     6
     3       |/*-                                                                                              |  4657     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  4658     6
     5       | * All rights reserved.                                                                          |  4659     6
     6       | *                                                                                               |  4660     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  4661     6
     8       | * modification, are permitted provided that the following conditions                            |  4662     6
     9       | * are met:                                                                                      |  4663     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  4664     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  4665     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  4666     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  4667     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  4668     6
    15       | *                                                                                               |  4669     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  4670     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  4671     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  4672     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  4673     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  4674     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  4675     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  4676     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  4677     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  4678     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  4679     6
    26       | * SUCH DAMAGE.                                                                                  |  4680     6
    27       | *                                                                                               |  4681     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  4682     6
    29       | */                                                                                              |  4683     6
    30       |                                                                                                 |  4684     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  4685     6
    32       |#define _SYS__TYPES_H_                                                                           |  4686     6
    33       |                                                                                                 |  4687     6
    34       |#include <sys/cdefs.h>                                                                           |  4688     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    91


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    35       |#include <machine/_types.h>                                                                      |  4689     6
    36       |                                                                                                 |  4690     6
    37       |/*                                                                                               |  4691     6
    38       | * Standard type definitions.                                                                    |  4692     6
    39       | */                                                                                              |  4693     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  4694     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  4695     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  4696     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  4697     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  4698     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  4699     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  4700     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  4701     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  4702     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  4703     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  4704     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  4705     6
    52       |typedef int             __nl_item;                                                               |  4706     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  4707     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  4708     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  4709     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  4710     6
    57       |                                        /* signed, because of legacy code */                     |  4711     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  4712     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  4713     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  4714     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  4715     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  4716     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  4717     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  4718     6
    65       |                                                                                                 |  4719     6
    66       |/*                                                                                               |  4720     6
    67       | * Unusual type definitions.                                                                     |  4721     6
    68       | */                                                                                              |  4722     6
    69       |/*                                                                                               |  4723     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  4724     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  4725     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  4726     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  4727     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  4728     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  4729     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  4730     6
    77       | *                                                                                               |  4731     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  4732     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  4733     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  4734     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  4735     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  4736     6
    83       | */                                                                                              |  4737     6
    84       |#ifdef __cplusplus                                                                               |  4738     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  4739     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  4740     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  4741     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    92


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    88       |#else                                                                                            |  4742     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  4743     6
    90       |#endif                                                                                           |  4744     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  4745     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  4746     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  4747     6
    94       |                                                                                                 |  4748     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  4749     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  4750     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  4751     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  4752     6
    99       |#endif                                                                                           |  4753     6
   100       |                                                                                                 |  4754     6
   101       |#if !defined(__cplusplus)                                                                        |  4755     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  4756     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  4757     6
   104       |#endif                                                                                           |  4758     6
   105       |                                                                                                 |  4759     6
   106       |                                                                                                 |  4760     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  4761     6
   108       |                                                                                                 |  4762     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  4763     6
   110       |                                                                                                 |  4764     6
   111       |/*                                                                                               |  4765     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  4766     6
   113       | * stream conversions.                                                                           |  4767     6
   114       | */                                                                                              |  4768     6
   115       |typedef union {                                                                                  |  4769     6
   116       |        char            __mbstate8[128];                                                         |  4770     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  4771     6
   118       |} __mbstate_t;                                                                                   |  4772     6
   119       |                                                                                                 |  4773     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  4774     6
   121       |#pragma pack(reset)                                                                              |  4775     6
    46       |                                                                                                 |  4776    13
    47       |#ifndef _GID_T_DECLARED                                                                          |  4777    13
    48       |typedef __gid_t         gid_t;                                                                   |  4778    13
    49       |#define _GID_T_DECLARED                                                                          |  4779    13
    50       |#endif                                                                                           |  4780    13
    51       |                                                                                                 |  4781    13
    52       |#ifndef _OFF_T_DECLARED                                                                          |  4782    13
    53       |typedef __off_t         off_t;                                                                   |  4783    13
    54       |#define _OFF_T_DECLARED                                                                          |  4784    13
    55       |#endif                                                                                           |  4785    13
    56       |                                                                                                 |  4786    13
    57       |#ifndef _PID_T_DECLARED                                                                          |  4787    13
    58       |typedef __pid_t         pid_t;                                                                   |  4788    13
    59       |#define _PID_T_DECLARED                                                                          |  4789    13
    60       |#endif                                                                                           |  4790    13
    61       |                                                                                                 |  4791    13
    62       |#ifndef _SIZE_T_DECLARED                                                                         |  4792    13
    63       |typedef __size_t        size_t;                                                                  |  4793    13
    64       |#define _SIZE_T_DECLARED                                                                         |  4794    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    93


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    65       |#endif                                                                                           |  4795    13
    66       |                                                                                                 |  4796    13
    67       |#ifndef _SSIZE_T_DECLARED                                                                        |  4797    13
    68       |typedef __ssize_t       ssize_t;                                                                 |  4798    13
    69       |#define _SSIZE_T_DECLARED                                                                        |  4799    13
    70       |#endif                                                                                           |  4800    13
    71       |                                                                                                 |  4801    13
    72       |#ifndef _UID_T_DECLARED                                                                          |  4802    13
    73       |typedef __uid_t         uid_t;                                                                   |  4803    13
    74       |#define _UID_T_DECLARED                                                                          |  4804    13
    75       |#endif                                                                                           |  4805    13
    76       |                                                                                                 |  4806    13
    77       |#ifndef _USECONDS_T_DECLARED                                                                     |  4807    13
    78       |typedef __useconds_t    useconds_t;                                                              |  4808    13
    79       |#define _USECONDS_T_DECLARED                                                                     |  4809    13
    80       |#endif                                                                                           |  4810    13
    81       |                                                                                                 |  4811    13
    82       |#define  STDIN_FILENO   0       /* standard input file descriptor */                             |  4812    13
    83       |#define STDOUT_FILENO   1       /* standard output file descriptor */                            |  4813    13
    84       |#define STDERR_FILENO   2       /* standard error file descriptor */                             |  4814    13
    85       |                                                                                                 |  4815    13
    86       |#if __XSI_VISIBLE || __POSIX_VISIBLE >= 200112                                                   |  4816    13
    87       |#define F_ULOCK         0       /* unlock locked section */                                      |  4817    13
    88       |#define F_LOCK          1       /* lock a section for exclusive use */                           |  4818    13
    89       |#define F_TLOCK         2       /* test and lock a section for exclusive use */                  |  4819    13
    90       |#define F_TEST          3       /* test a section for locks by other procs */                    |  4820    13
    91       |#endif                                                                                           |  4821    13
    92       |                                                                                                 |  4822    13
    92       +                                                                                                 +  4822    13
    93       |/*                                                                                               |  4823    13
    94       | * POSIX options and option groups we unconditionally do or don't                                |  4824    13
    95       | * implement.  This list includes those options which are exclusively                            |  4825    13
    96       | * implemented (or not) in user mode.  Please keep this list in                                  |  4826    13
    97       | * alphabetical order.                                                                           |  4827    13
    98       | *                                                                                               |  4828    13
    99       | * Anything which is defined as zero below **must** have an                                      |  4829    13
   100       | * implementation for the corresponding sysconf() which is able to                               |  4830    13
   101       | * determine conclusively whether or not the feature is supported.                               |  4831    13
   102       | * Anything which is defined as other than -1 below **must** have                                |  4832    13
   103       | * complete headers, types, and function declarations as specified by                            |  4833    13
   104       | * the POSIX standard; however, if the relevant sysconf() function                               |  4834    13
   105       | * returns -1, the functions may be stubbed out.                                                 |  4835    13
   106       | */                                                                                              |  4836    13
   107       |#define _POSIX_BARRIERS                 -1                                                       |  4837    13
   108       |#define _POSIX_READER_WRITER_LOCKS      200112L                                                  |  4838    13
   109       |#define _POSIX_REGEXP                   1                                                        |  4839    13
   110       |#define _POSIX_SHELL                    1                                                        |  4840    13
   111       |#define _POSIX_SPAWN                    -1                                                       |  4841    13
   112       |#define _POSIX_SPIN_LOCKS               -1                                                       |  4842    13
   113       |#define _POSIX_THREAD_ATTR_STACKADDR    200112L                                                  |  4843    13
   114       |#define _POSIX_THREAD_ATTR_STACKSIZE    200112L                                                  |  4844    13
   115       |#define _POSIX_THREAD_CPUTIME           -1                                                       |  4845    13
   116       |#define _POSIX_THREAD_PRIO_INHERIT      200112L                                                  |  4846    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    94


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   117       |#define _POSIX_THREAD_PRIO_PROTECT      200112L                                                  |  4847    13
   118       |#if 0                                                                                            |  4848    13
   119       |  /* z/OS doesn't support THREAD_PRIORITY_SCHEDULING */                                          |  4849    13
   120       |#define _POSIX_THREAD_PRIORITY_SCHEDULING 200112L                                                |  4850    13
   121       |#endif                                                                                           |  4851    13
   122       |#define _POSIX_THREAD_PROCESS_SHARED    -1                                                       |  4852    13
   123       |#define _POSIX_THREAD_SAFE_FUNCTIONS    -1                                                       |  4853    13
   124       |#define _POSIX_THREAD_SPORADIC_SERVER   -1                                                       |  4854    13
   125       |#define _POSIX_THREADS                  200112L                                                  |  4855    13
   126       |#define _POSIX_TRACE                    -1                                                       |  4856    13
   127       |#define _POSIX_TRACE_EVENT_FILTER       -1                                                       |  4857    13
   128       |#define _POSIX_TRACE_INHERIT            -1                                                       |  4858    13
   129       |#define _POSIX_TRACE_LOG                -1                                                       |  4859    13
   130       |#define _POSIX2_C_BIND                  200112L /* mandatory */                                  |  4860    13
   131       |#define _POSIX2_C_DEV                   -1 /* need c99 utility */                                |  4861    13
   132       |#define _POSIX2_CHAR_TERM               1                                                        |  4862    13
   133       |#define _POSIX2_FORT_DEV                -1 /* need fort77 utility */                             |  4863    13
   134       |#define _POSIX2_FORT_RUN                200112L                                                  |  4864    13
   135       |#define _POSIX2_LOCALEDEF               -1                                                       |  4865    13
   136       |#define _POSIX2_PBS                     -1                                                       |  4866    13
   137       |#define _POSIX2_PBS_ACCOUNTING          -1                                                       |  4867    13
   138       |#define _POSIX2_PBS_CHECKPOINT          -1                                                       |  4868    13
   139       |#define _POSIX2_PBS_LOCATE              -1                                                       |  4869    13
   140       |#define _POSIX2_PBS_MESSAGE             -1                                                       |  4870    13
   141       |#define _POSIX2_PBS_TRACK               -1                                                       |  4871    13
   142       |#define _POSIX2_SW_DEV                  -1 /* XXX ??? */                                         |  4872    13
   143       |#define _POSIX2_UPE                     200112L                                                  |  4873    13
   144       |#define _V6_ILP32_OFF32                 -1                                                       |  4874    13
   145       |#define _V6_ILP32_OFFBIG                0                                                        |  4875    13
   146       |#define _V6_LP64_OFF64                  0                                                        |  4876    13
   147       |#define _V6_LPBIG_OFFBIG                -1                                                       |  4877    13
   148       |                                                                                                 |  4878    13
   149       |#if __XSI_VISIBLE                                                                                |  4879    13
   150       |#define _XOPEN_CRYPT                    -1 /* XXX ??? */                                         |  4880    13
   151       |#define _XOPEN_ENH_I18N                 -1 /* mandatory in XSI */                                |  4881    13
   152       |#define _XOPEN_LEGACY                   -1                                                       |  4882    13
   153       |#define _XOPEN_REALTIME                 -1                                                       |  4883    13
   154       |#define _XOPEN_REALTIME_THREADS         -1                                                       |  4884    13
   155       |#define _XOPEN_UNIX                     -1                                                       |  4885    13
   156       |#endif                                                                                           |  4886    13
   157       |                                                                                                 |  4887    13
   157       +                                                                                                 +  4887    13
   158       |/* Define the POSIX.2 version we target for compliance. */                                       |  4888    13
   159       |#define _POSIX2_VERSION         199212L                                                          |  4889    13
   160       |                                                                                                 |  4890    13
   161       |/*                                                                                               |  4891    13
   162       | * POSIX-style system configuration variable accessors (for the                                  |  4892    13
   163       | * sysconf function).  If these are -1 then they aren't supported                                |  4893    13
   164       | * by the sysconf function (sysconf will dutifully return -1.)                                   |  4894    13
   165       | *                                                                                               |  4895    13
   166       | * The sysconf() function on MVS is the BPX version, so only                                     |  4896    13
   167       | * the ones supported there are defined.                                                         |  4897    13
   168       | */                                                                                              |  4898    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    95


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   169       |                                                                                                 |  4899    13
   170       |#define _SC_ARG_MAX              1                                                               |  4900    13
   171       |#define _SC_CHILD_MAX            2                                                               |  4901    13
   172       |#define _SC_CLK_TCK              3                                                               |  4902    13
   173       |#define _SC_JOB_CONTROL          4                                                               |  4903    13
   174       |#define _SC_NGROUPS_MAX          5                                                               |  4904    13
   175       |#define _SC_OPEN_MAX             6                                                               |  4905    13
   176       |#define _SC_SAVED_IDS            7                                                               |  4906    13
   177       |#define _SC_TZNAME_MAX           9                                                               |  4907    13
   178       |#define _SC_VERSION             10                                                               |  4908    13
   179       |#define _SC_THREAD_TASKS_MAX_NP 11                                                               |  4909    13
   180       |#define _SC_2_CHAR_TERM         12                                                               |  4910    13
   181       |#define _SC_THREADS_MAX_NP      13                                                               |  4911    13
   182       |#define _SC_MMAP_MEM_MAX_NP     14                                                               |  4912    13
   183       |#define _SC_BC_BASE_MAX          -1                                                              |  4913    13
   184       |#define _SC_BC_DIM_MAX          -1                                                               |  4914    13
   185       |#define _SC_BC_SCALE_MAX        -1                                                               |  4915    13
   186       |#define _SC_BC_STRING_MAX       -1                                                               |  4916    13
   187       |#define _SC_COLL_WEIGHTS_MAX    -1                                                               |  4917    13
   188       |#define _SC_EXPR_NEST_MAX       -1                                                               |  4918    13
   189       |#define _SC_LINE_MAX            -1                                                               |  4919    13
   190       |#define _SC_RE_DUP_MAX          -1                                                               |  4920    13
   191       |#define _SC_2_VERSION           -1                                                               |  4921    13
   192       |#define _SC_2_C_BIND            -1                                                               |  4922    13
   193       |#define _SC_2_C_DEV             -1                                                               |  4923    13
   194       |#define _SC_2_FORT_DEV          -1                                                               |  4924    13
   195       |#define _SC_2_FORT_RUN          -1                                                               |  4925    13
   196       |#define _SC_2_LOCALEDEF         -1                                                               |  4926    13
   197       |#define _SC_2_SW_DEV            -1                                                               |  4927    13
   198       |#define _SC_2_UPE               -1                                                               |  4928    13
   199       |#define _SC_STREAM_MAX          118                                                              |  4929    13
   200       |                                                                                                 |  4930    13
   201       |#if __POSIX_VISIBLE >= 199309                                                                    |  4931    13
   202       |#define _SC_ASYNCHRONOUS_IO     -1                                                               |  4932    13
   203       |#define _SC_MAPPED_FILES        -1                                                               |  4933    13
   204       |#define _SC_MEMLOCK             -1                                                               |  4934    13
   205       |#define _SC_MEMLOCK_RANGE       -1                                                               |  4935    13
   206       |#define _SC_MEMORY_PROTECTION   -1                                                               |  4936    13
   207       |#define _SC_MESSAGE_PASSING     -1                                                               |  4937    13
   208       |#define _SC_PRIORITIZED_IO      -1                                                               |  4938    13
   209       |#define _SC_PRIORITY_SCHEDULING -1                                                               |  4939    13
   210       |#define _SC_REALTIME_SIGNALS    -1                                                               |  4940    13
   211       |#define _SC_SEMAPHORES          -1                                                               |  4941    13
   212       |#define _SC_FSYNC               -1                                                               |  4942    13
   213       |#define _SC_SHARED_MEMORY_OBJECTS -1                                                             |  4943    13
   214       |#define _SC_SYNCHRONIZED_IO     -1                                                               |  4944    13
   215       |#define _SC_TIMERS              -1                                                               |  4945    13
   216       |#define _SC_AIO_LISTIO_MAX      -1                                                               |  4946    13
   217       |#define _SC_AIO_MAX             -1                                                               |  4947    13
   218       |#define _SC_AIO_PRIO_DELTA_MAX  -1                                                               |  4948    13
   219       |#define _SC_DELAYTIMER_MAX      -1                                                               |  4949    13
   220       |#define _SC_MQ_OPEN_MAX         -1                                                               |  4950    13
   221       |#define _SC_PAGESIZE            16                                                               |  4951    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    96


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   222       |#define _SC_RTSIG_MAX           -1                                                               |  4952    13
   223       |#define _SC_SEM_NSEMS_MAX      210                                                               |  4953    13
   224       |#define _SC_SEM_VALUE_MAX      211                                                               |  4954    13
   225       |#define _SC_SIGQUEUE_MAX        -1                                                               |  4955    13
   226       |#define _SC_TIMER_MAX           -1                                                               |  4956    13
   227       |#endif                                                                                           |  4957    13
   228       |                                                                                                 |  4958    13
   228       +                                                                                                 +  4958    13
   229       |#if __POSIX_VISIBLE >= 200112                                                                    |  4959    13
   230       |#define _SC_2_PBS               -1                                                               |  4960    13
   231       |#define _SC_2_PBS_ACCOUNTING    -1                                                               |  4961    13
   232       |#define _SC_2_PBS_CHECKPOINT    -1                                                               |  4962    13
   233       |#define _SC_2_PBS_LOCATE        -1                                                               |  4963    13
   234       |#define _SC_2_PBS_MESSAGE       -1                                                               |  4964    13
   235       |#define _SC_2_PBS_TRACK         -1                                                               |  4965    13
   236       |#define _SC_ADVISORY_INFO       -1                                                               |  4966    13
   237       |#define _SC_BARRIERS            -1                                                               |  4967    13
   238       |#define _SC_CLOCK_SELECTION     -1                                                               |  4968    13
   239       |#define _SC_CPUTIME             -1                                                               |  4969    13
   240       |#define _SC_FILE_LOCKING        -1                                                               |  4970    13
   241       |#define _SC_GETGR_R_SIZE_MAX    -1                                                               |  4971    13
   242       |#define _SC_GETPW_R_SIZE_MAX    -1                                                               |  4972    13
   243       |#define _SC_HOST_NAME_MAX       -1                                                               |  4973    13
   244       |#define _SC_LOGIN_NAME_MAX      -1                                                               |  4974    13
   245       |#define _SC_MONOTONIC_CLOCK     -1                                                               |  4975    13
   246       |#define _SC_MQ_PRIO_MAX         -1                                                               |  4976    13
   247       |#define _SC_READER_WRITER_LOCKS -1                                                               |  4977    13
   248       |#define _SC_REGEXP              -1                                                               |  4978    13
   249       |#define _SC_SHELL               -1                                                               |  4979    13
   250       |#define _SC_SPAWN               -1                                                               |  4980    13
   251       |#define _SC_SPIN_LOCKS          171                                                              |  4981    13
   252       |#define _SC_SPORADIC_SERVER     172                                                              |  4982    13
   253       |#define _SC_THREAD_ATTR_STACKADDR 175                                                            |  4983    13
   254       |#define _SC_THREAD_ATTR_STACKSIZE 176                                                            |  4984    13
   255       |#define _SC_THREAD_CPUTIME        177                                                            |  4985    13
   256       |#define _SC_THREAD_DESTRUCTOR_ITERATIONS -1                                                      |  4986    13
   257       |#define _SC_THREAD_KEYS_MAX     207                                                              |  4987    13
   258       |#define _SC_THREAD_PRIO_INHERIT 178                                                              |  4988    13
   259       |#define _SC_THREAD_PRIO_PROTECT 179                                                              |  4989    13
   260       |#define _SC_THREAD_PRIORITY_SCHEDULING 180                                                       |  4990    13
   261       |#define _SC_THREAD_PROCESS_SHARED 181                                                            |  4991    13
   262       |#define _SC_THREAD_SAFE_FUNCTIONS 182                                                            |  4992    13
   263       |#define _SC_THREAD_SPORADIC_SERVER 183                                                           |  4993    13
   264       |#define _SC_THREAD_STACK_MIN    208                                                              |  4994    13
   265       |#define _SC_THREAD_THREADS_MAX  _SC_THREADS_MAX_NP                                               |  4995    13
   266       |#define _SC_THREADS             184                                                              |  4996    13
   267       |#define _SC_TIMEOUTS            185                                                              |  4997    13
   268       |#define _SC_TRACE               -1                                                               |  4998    13
   269       |#define _SC_TRACE_EVENT_FILTER  -1                                                               |  4999    13
   270       |#define _SC_TRACE_INHERIT       -1                                                               |  5000    13
   271       |#define _SC_TRACE_LOG           -1                                                               |  5001    13
   272       |#define _SC_TTY_NAME_MAX        -1                                                               |  5002    13
   273       |#define _SC_TYPED_MEMORY_OBJECTS -1                                                              |  5003    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    97


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   274       |#define _SC_V6_ILP32_OFF32      -1                                                               |  5004    13
   275       |#define _SC_V6_ILP32_OFFBIG     -1                                                               |  5005    13
   276       |#define _SC_V6_LP64_OFF64       -1                                                               |  5006    13
   277       |#define _SC_V6_LPBIG_OFFBIG     -1                                                               |  5007    13
   278       |#define _SC_IPV6                -1                                                               |  5008    13
   279       |#define _SC_RAW_SOCKETS         -1                                                               |  5009    13
   280       |#define _SC_SYMLOOP_MAX         -1                                                               |  5010    13
   281       |#endif                                                                                           |  5011    13
   282       |                                                                                                 |  5012    13
   282       +                                                                                                 +  5012    13
   283       |#if __XSI_VISIBLE                                                                                |  5013    13
   284       |#define _SC_ATEXIT_MAX          -1                                                               |  5014    13
   285       |#define _SC_IOV_MAX             -1                                                               |  5015    13
   286       |#define _SC_PAGE_SIZE           _SC_PAGESIZE                                                     |  5016    13
   287       |#define _SC_XOPEN_CRYPT         -1                                                               |  5017    13
   288       |#define _SC_XOPEN_ENH_I18N      -1                                                               |  5018    13
   289       |#define _SC_XOPEN_LEGACY        -1                                                               |  5019    13
   290       |#define _SC_XOPEN_REALTIME      -1                                                               |  5020    13
   291       |#define _SC_XOPEN_REALTIME_THREADS -1                                                            |  5021    13
   292       |#define _SC_XOPEN_SHM           -1                                                               |  5022    13
   293       |#define _SC_XOPEN_STREAMS       -1                                                               |  5023    13
   294       |#define _SC_XOPEN_UNIX          -1                                                               |  5024    13
   295       |#define _SC_XOPEN_VERSION       -1                                                               |  5025    13
   296       |#define _SC_XOPEN_XCU_VERSION   -1                                                               |  5026    13
   297       |#endif                                                                                           |  5027    13
   298       |                                                                                                 |  5028    13
   298       +                                                                                                 +  5028    13
   299       |#if ( defined(_LP64) || defined(__U98) )                                                         |  5029    13
   300       |#define _XBS5_ILP32_OFF32        1                                                               |  5030    13
   301       |#define _XBS5_ILP32_OFFBIG      -1                                                               |  5031    13
   302       |#define _XBS5_LP64_OFF64        -1                                                               |  5032    13
   303       |#define _XBS5_LPBIG_OFFBIG      -1                                                               |  5033    13
   304       |#endif  /*  _LP64  ||  __U98  */                                                                 |  5034    13
   305       |                                                                                                 |  5035    13
   306       |#if __BSD_VISIBLE                                                                                |  5036    13
   307       |#define _SC_NPROCESSORS_CONF    -1                                                               |  5037    13
   308       |#define _SC_NPROCESSORS_ONLN    -1                                                               |  5038    13
   309       |#endif                                                                                           |  5039    13
   310       |                                                                                                 |  5040    13
   310       +                                                                                                 +  5040    13
   311       |/* Keys for the confstr(3) function. */                                                          |  5041    13
   312       |#if __POSIX_VISIBLE >= 199209                                                                    |  5042    13
   313       |#define _CS_PATH                1       /* default value of PATH */                              |  5043    13
   314       |#endif                                                                                           |  5044    13
   315       |                                                                                                 |  5045    13
   315       +                                                                                                 +  5045    13
   316       |#if __POSIX_VISIBLE >= 200112                                                                    |  5046    13
   317       |#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS         2                                                |  5047    13
   318       |#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS        3                                                |  5048    13
   319       |#define _CS_POSIX_V6_ILP32_OFF32_LIBS           4                                                |  5049    13
   320       |#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS        5                                                |  5050    13
   321       |#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS       6                                                |  5051    13
   322       |#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS          7                                                |  5052    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    98


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   323       |#define _CS_POSIX_V6_LP64_OFF64_CFLAGS          8                                                |  5053    13
   324       |#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS         9                                                |  5054    13
   325       |#define _CS_POSIX_V6_LP64_OFF64_LIBS            10                                               |  5055    13
   326       |#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS        11                                               |  5056    13
   327       |#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS       12                                               |  5057    13
   328       |#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS          13                                               |  5058    13
   329       |#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS      14                                               |  5059    13
   330       |#endif                                                                                           |  5060    13
   331       |                                                                                                 |  5061    13
   331       +                                                                                                 +  5061    13
   332       |                                                                                                 |  5062    13
   333       |#ifndef _POSIX_SOURCE                                                                            |  5063    13
   334       |#define       F_ULOCK     0    /* unlock locked section */                                       |  5064    13
   335       |#define       F_LOCK      1    /* lock a section for exclusive use */                            |  5065    13
   336       |#define       F_TLOCK     2    /* test and lock a section for exclusive use */                   |  5066    13
   337       |#define       F_TEST      3    /* test a section for locks by other procs */                     |  5067    13
   338       |#endif                                                                                           |  5068    13
   339       |                                                                                                 |  5069    13
   340       |/* For z/OS BPX (posix-y) interface, we also have the */                                         |  5070    13
   341       |/* __querydub() function that determines if a task has */                                        |  5071    13
   342       |/* been "dub'd" into the POSIX system */                                                         |  5072    13
   343       |#define _QDB_DUBBED_FIRST    (1) /* The task has already been dubbed.  */                        |  5073    13
   344       |                                 /* This task and this RB caused the dub. */                     |  5074    13
   345       |#define _QDB_DUBBED          (2) /* The task has already been dubbed.  */                        |  5075    13
   346       |                                 /* Another task or another RB caused it */                      |  5076    13
   347       |#define _QDB_DUB_MAY_FAIL    (4) /* The task has not been dubbed; an attempt */                  |  5077    13
   348       |                                 /* to dub the task may fail. */                                 |  5078    13
   349       |#define _QDB_DUB_OKAY        (8) /* The task has not beed dubbed; an attempt */                  |  5079    13
   350       |                                 /* to dub will probably succeed. */                             |  5080    13
   351       |#define _QDB_DUB_AS_PROCESS (16) /* The task has not been dubbed; but its */                     |  5081    13
   352       |                                 /* address space has. If dubbed, if will */                     |  5082    13
   353       |                                 /* become another process. */                                   |  5083    13
   354       |#define _QDB_DUB_AS_THREAD  (32) /* The task has not been dubbed; but its */                     |  5084    13
   355       |                                 /* address space has. If dubbed, it will */                     |  5085    13
   356       |                                 /* become a thread within the process. */                       |  5086    13
   357       |                                                                                                 |  5087    13
   358       |__BEGIN_DECLS                                                                                    |  5088    13
   358       +                                                                                                 +  5088    13
   359       |#pragma map(__querydub,"@@QDUB")                                                                 |  5089    13
   360       |int __querydub(void);                                                                            |  5090    13
   361       |                                                                                                 |  5091    13
   362       |/* 1003.1-1990 */                                                                                |  5092    13
   363       |#pragma map (_exit, "@@EXIT")                                                                    |  5093    13
   364       |void     _exit(int) __dead2;                                                                     |  5094    13
   364       +void     _exit(int) __attribute__((__noreturn__));                                               +  5094    13
   365       |int      access(const char *, int);                                                              |  5095    13
   366       |unsigned int     alarm(unsigned int);                                                            |  5096    13
   367       |int      chdir(const char *);                                                                    |  5097    13
   368       |int      chown(const char *, uid_t, gid_t);                                                      |  5098    13
   369       |int      close(int);                                                                             |  5099    13
   370       |int      dup(int);                                                                               |  5100    13
   371       |int      dup2(int, int);                                                                         |  5101    13
   372       |int      eaccess(const char *, int);                                                             |  5102    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page    99


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   373       |int      execl(const char *, const char *, ...);                                                 |  5103    13
   374       |int      execle(const char *, const char *, ...);                                                |  5104    13
   375       |int      execlp(const char *, const char *, ...);                                                |  5105    13
   376       |int      execv(const char *, char * const *);                                                    |  5106    13
   377       |int      execve(const char *, char * const *, char * const *);                                   |  5107    13
   378       |int      execvp(const char *, char * const *);                                                   |  5108    13
   379       |pid_t    fork(void);                                                                             |  5109    13
   380       |#pragma map(fpathconf, "@@FPATHC")                                                               |  5110    13
   381       |long     fpathconf(int, int);                                                                    |  5111    13
   382       |char    *getcwd(char *, size_t);                                                                 |  5112    13
   383       |gid_t    getegid(void);                                                                          |  5113    13
   384       |uid_t    geteuid(void);                                                                          |  5114    13
   385       |gid_t    getgid(void);                                                                           |  5115    13
   386       |#pragma map(getgroups, "@@GETGRO")                                                               |  5116    13
   387       |int      getgroups(int, gid_t []);                                                               |  5117    13
   388       |char    *getlogin(void);                                                                         |  5118    13
   389       |pid_t    getpgrp(void);                                                                          |  5119    13
   390       |pid_t    getpid(void);                                                                           |  5120    13
   391       |pid_t    getppid(void);                                                                          |  5121    13
   392       |uid_t    getuid(void);                                                                           |  5122    13
   393       |int      isatty(int);                                                                            |  5123    13
   394       |int      link(const char *, const char *);                                                       |  5124    13
   395       |#ifndef _LSEEK_DECLARED                                                                          |  5125    13
   396       |#define _LSEEK_DECLARED                                                                          |  5126    13
   397       |off_t    lseek(int, off_t, int);                                                                 |  5127    13
   398       |#endif                                                                                           |  5128    13
   399       |long     pathconf(const char *, int);                                                            |  5129    13
   400       |int      pause(void);                                                                            |  5130    13
   401       |int      pipe(int *);                                                                            |  5131    13
   402       |ssize_t  read(int, void *, size_t);                                                              |  5132    13
   403       |int      rmdir(const char *);                                                                    |  5133    13
   404       |int      setgid(gid_t);                                                                          |  5134    13
   405       |int      setpgid(pid_t, pid_t);                                                                  |  5135    13
   406       |void     setproctitle(const char *_fmt, ...) __printf0like(1, 2);                                |  5136    13
   406       +void     setproctitle(const char *_fmt, ...) ;                                                   +  5136    13
   407       |pid_t    setsid(void);                                                                           |  5137    13
   408       |int      setuid(uid_t);                                                                          |  5138    13
   409       |unsigned int     sleep(unsigned int);                                                            |  5139    13
   410       |long     sysconf(int);                                                                           |  5140    13
   411       |#pragma map(tcgetpgrp, "@@TCGPGR")                                                               |  5141    13
   412       |pid_t    tcgetpgrp(int);                                                                         |  5142    13
   413       |#pragma map(tcsetpgrp, "@@TCSPGR")                                                               |  5143    13
   414       |int      tcsetpgrp(int, pid_t);                                                                  |  5144    13
   415       |char    *ttyname(int);                                                                           |  5145    13
   416       |int     ttyname_r(int, char *, size_t);                                                          |  5146    13
   417       |int      unlink(const char *);                                                                   |  5147    13
   418       |ssize_t  write(int, const void *, size_t);                                                       |  5148    13
   419       |                                                                                                 |  5149    13
   420       |/* 1003.2-1992 */                                                                                |  5150    13
   421       |#if __POSIX_VISIBLE >= 199209 || __XSI_VISIBLE                                                   |  5151    13
   422       |size_t   confstr(int, char *, size_t);                                                           |  5152    13
   422       +size_t   confstr(int, char *, size_t);                                                           +  5152    13
   423       |#ifndef _GETOPT_DECLARED                                                                         |  5153    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   100


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   424       |#define _GETOPT_DECLARED                                                                         |  5154    13
   425       |int      getopt(int, char * const [], const char *);                                             |  5155    13
   426       |                                                                                                 |  5156    13
   427       |extern char *optarg;                    /* getopt(3) external variables */                       |  5157    13
   428       |extern int optind, opterr, optopt;                                                               |  5158    13
   429       |#endif /* _GETOPT_DECLARED */                                                                    |  5159    13
   430       |#endif                                                                                           |  5160    13
   431       |                                                                                                 |  5161    13
   432       |/* ISO/IEC 9945-1: 1996 */                                                                       |  5162    13
   433       |#if __POSIX_VISIBLE >= 199506 || __XSI_VISIBLE                                                   |  5163    13
   434       |int      fsync(int);                                                                             |  5164    13
   434       +int      fsync(int);                                                                             +  5164    13
   435       |                                                                                                 |  5165    13
   436       |/*                                                                                               |  5166    13
   437       | * ftruncate() was in the POSIX Realtime Extension (it's used for shared                         |  5167    13
   438       | * memory), but truncate() was not.                                                              |  5168    13
   439       | */                                                                                              |  5169    13
   440       |#ifndef _FTRUNCATE_DECLARED                                                                      |  5170    13
   441       |#define _FTRUNCATE_DECLARED                                                                      |  5171    13
   442       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  5172    13
   443       |int      ftruncate(int, off_t);                                                                  |  5173    13
   444       |#endif                                                                                           |  5174    13
   445       |#endif                                                                                           |  5175    13
   446       |                                                                                                 |  5176    13
   447       |#if __POSIX_VISIBLE >= 199506                                                                    |  5177    13
   448       |int      getlogin_r(char *, int);                                                                |  5178    13
   448       +int      getlogin_r(char *, int);                                                                +  5178    13
   449       |#endif                                                                                           |  5179    13
   450       |                                                                                                 |  5180    13
   451       |/* 1003.1-2001 */                                                                                |  5181    13
   452       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   |  5182    13
   453       |int      fchown(int, uid_t, gid_t);                                                              |  5183    13
   453       +int      fchown(int, uid_t, gid_t);                                                              +  5183    13
   454       |int      readlink(const char *, char *, int);                                                    |  5184    13
   455       |#endif                                                                                           |  5185    13
   456       |#if __POSIX_VISIBLE >= 200112                                                                    |  5186    13
   457       |#pragma map (gethostname,"@@GHNAM")                                                              |  5187    13
   457       +#pragma map ( gethostname , "@@GHNAM" )                                                          +  5187    13
   458       |int      gethostname(char *, size_t);                                                            |  5188    13
   459       |int      setegid(gid_t);                                                                         |  5189    13
   460       |int      seteuid(uid_t);                                                                         |  5190    13
   461       |int    getpeereid(int, uid_t *, gid_t *);                                                        |  5191    13
   462       |int    getpgid(pid_t _pid);                                                                      |  5192    13
   463       |int    getresgid(gid_t *, gid_t *, gid_t *);                                                     |  5193    13
   464       |int    getresuid(uid_t *, uid_t *, uid_t *);                                                     |  5194    13
   465       |int    getsid(pid_t _pid);                                                                       |  5195    13
   466       |#endif                                                                                           |  5196    13
   467       |                                                                                                 |  5197    13
   468       |/*                                                                                               |  5198    13
   469       | * symlink() was originally in POSIX.1a, which was withdrawn after                               |  5199    13
   470       | * being overtaken by events (1003.1-2001).  It was in XPG4.2, and of                            |  5200    13
   471       | * course has been in BSD since 4.2.                                                             |  5201    13
   472       | */                                                                                              |  5202    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   101


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   473       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE >= 402 || __BSD_VISIBLE                           |  5203    13
   474       |int      symlink(const char * __restrict, const char * __restrict);                              |  5204    13
   474       +int      symlink(const char * __restrict__, const char * __restrict__);                          +  5204    13
   475       |#endif                                                                                           |  5205    13
   476       |                                                                                                 |  5206    13
   477       |/* X/Open System Interfaces */                                                                   |  5207    13
   478       |#if __XSI_VISIBLE                                                                                |  5208    13
   479       |char    *crypt(const char *, const char *);                                                      |  5209    13
   479       +char    *crypt(const char *, const char *);                                                      +  5209    13
   480       |/* char *ctermid(char *); */            /* XXX ??? */                                            |  5210    13
   481       |int      encrypt(char *, int);                                                                   |  5211    13
   482       |int      fchdir(int);                                                                            |  5212    13
   483       |#pragma map (gethostid,"@@GHTID")                                                                |  5213    13
   484       |long     gethostid(void);                                                                        |  5214    13
   485       |int      getpgid(pid_t _pid);                                                                    |  5215    13
   486       |int      getsid(pid_t _pid);                                                                     |  5216    13
   487       |char    *getwd(char *);                 /* LEGACY: obsoleted by getcwd() */                      |  5217    13
   488       |int      lchown(const char *, uid_t, gid_t);                                                     |  5218    13
   489       |int      lockf(int, int, off_t);                                                                 |  5219    13
   490       |int      nice(int);                                                                              |  5220    13
   491       |ssize_t  pread(int, void *, size_t, off_t);                                                      |  5221    13
   492       |ssize_t  pwrite(int, const void *, size_t, off_t);                                               |  5222    13
   493       |int      setpgrp(pid_t _pid, pid_t _pgrp); /* obsoleted by setpgid() */                          |  5223    13
   494       |int      setregid(gid_t, gid_t);                                                                 |  5224    13
   495       |int      setreuid(uid_t, uid_t);                                                                 |  5225    13
   496       |                                                                                                 |  5226    13
   497       |#ifndef _SWAB_DECLARED                                                                           |  5227    13
   498       |#define _SWAB_DECLARED                                                                           |  5228    13
   499       |void     swab(const void * __restrict, void * __restrict, ssize_t);                              |  5229    13
   499       +void     swab(const void * __restrict__, void * __restrict__, ssize_t);                          +  5229    13
   500       |#endif /* _SWAB_DECLARED */                                                                      |  5230    13
   501       |                                                                                                 |  5231    13
   502       |void     sync(void);                                                                             |  5232    13
   503       |useconds_t       ualarm(useconds_t, useconds_t);                                                 |  5233    13
   504       |int      usleep(useconds_t);                                                                     |  5234    13
   505       |pid_t    vfork(void);                                                                            |  5235    13
   506       |                                                                                                 |  5236    13
   507       |/* See comment at ftruncate() above. */                                                          |  5237    13
   508       |#ifndef _TRUNCATE_DECLARED                                                                       |  5238    13
   509       |#define _TRUNCATE_DECLARED                                                                       |  5239    13
   510       |int      truncate(const char *, off_t);                                                          |  5240    13
   511       |#endif                                                                                           |  5241    13
   512       |#endif /* __XSI_VISIBLE */                                                                       |  5242    13
   513       |                                                                                                 |  5243    13
   514       |#if __XSI_VISIBLE <= 500 || __BSD_VISIBLE                                                        |  5244    13
   515       |/* int   brk(const void *); */                                                                   |  5245    13
   515       +                                                                                                 +  5245    13
   516       |int      chroot(const char *);                                                                   |  5246    13
   517       |#pragma map (getdtablesize, "@GDTBLSZ")                                                          |  5247    13
   518       |int      getdtablesize(void);                                                                    |  5248    13
   519       |int      getpagesize(void) __pure2;                                                              |  5249    13
   519       +int      getpagesize(void) __attribute__((__const__));                                           +  5249    13
   520       |char    *getpass(const char *);                                                                  |  5250    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   102


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   521       |void    *sbrk(intptr_t);                                                                         |  5251    13
   522       |#endif                                                                                           |  5252    13
   523       |                                                                                                 |  5253    13
   524       |#pragma map(__isPosixOn, "@@ISPOSI")                                                             |  5254    13
   525       |int      __isPosixOn(void);                                                                      |  5255    13
   526       |                                                                                                 |  5256    13
   527       |#if __BSD_VISIBLE                                                                                |  5257    13
   528       |struct timeval;                         /* select(2) */                                          |  5258    13
   528       +struct timeval;                                                                                  +  5258    13
   529       |int      acct(const char *);                                                                     |  5259    13
   530       |int      async_daemon(void);                                                                     |  5260    13
   531       |int      check_utility_compat(const char *);                                                     |  5261    13
   532       |const char *                                                                                     |  5262    13
   533       |         crypt_get_format(void);                                                                 |  5263    13
   534       |int      crypt_set_format(const char *);                                                         |  5264    13
   535       |int      des_cipher(const char *, char *, long, int);                                            |  5265    13
   536       |int      des_setkey(const char *key);                                                            |  5266    13
   537       |void     endusershell(void);                                                                     |  5267    13
   538       |int      exect(const char *, char * const *, char * const *);                                    |  5268    13
   539       |int      execvP(const char *, const char *, char * const *);                                     |  5269    13
   540       |char    *fflagstostr(u_long);                                                                    |  5270    13
   541       |int      getdomainname(char *, int);                                                             |  5271    13
   542       |int      getgrouplist(const char *, gid_t, gid_t *, int *);                                      |  5272    13
   543       |mode_t   getmode(const void *, mode_t);                                                          |  5273    13
   544       |int      getpeereid(int, uid_t *, gid_t *);                                                      |  5274    13
   545       |int      getresgid(gid_t *, gid_t *, gid_t *);                                                   |  5275    13
   546       |int      getresuid(uid_t *, uid_t *, uid_t *);                                                   |  5276    13
   547       |char    *getusershell(void);                                                                     |  5277    13
   548       |int      initgroups(const char *, gid_t);                                                        |  5278    13
   549       |int      iruserok(unsigned long, int, const char *, const char *);                               |  5279    13
   550       |int      iruserok_sa(const void *, int, int, const char *, const char *);                        |  5280    13
   551       |#pragma map(issetugid, "ISSETUGI")                                                               |  5281    13
   552       |int      issetugid(void);                                                                        |  5282    13
   553       |char    *mkdtemp(char *);                                                                        |  5283    13
   554       |#ifndef _MKNOD_DECLARED                                                                          |  5284    13
   555       |int      mknod(const char *, mode_t, dev_t);                                                     |  5285    13
   556       |#define _MKNOD_DECLARED                                                                          |  5286    13
   557       |#endif                                                                                           |  5287    13
   558       |#ifndef _MKSTEMP_DECLARED                                                                        |  5288    13
   559       |int      mkstemp(char *);                                                                        |  5289    13
   560       |#define _MKSTEMP_DECLARED                                                                        |  5290    13
   561       |#endif                                                                                           |  5291    13
   562       |int      mkstemps(char *, int);                                                                  |  5292    13
   563       |#ifndef _MKTEMP_DECLARED                                                                         |  5293    13
   564       |char    *mktemp(char *);                                                                         |  5294    13
   565       |#define _MKTEMP_DECLARED                                                                         |  5295    13
   566       |#endif                                                                                           |  5296    13
   567       |int      nfssvc(int, void *);                                                                    |  5297    13
   568       |int      profil(char *, size_t, vm_offset_t, int);                                               |  5298    13
   569       |int      rcmd(char **, int, const char *, const char *, const char *, int *);                    |  5299    13
   570       |int      rcmd_af(char **, int, const char *,                                                     |  5300    13
   571       |                const char *, const char *, int *, int);                                         |  5301    13
   572       |int      rcmdsh(char **, int, const char *,                                                      |  5302    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   103


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   573       |                const char *, const char *, const char *);                                       |  5303    13
   574       |char    *re_comp(const char *);                                                                  |  5304    13
   575       |int      re_exec(const char *);                                                                  |  5305    13
   576       |int      reboot(int);                                                                            |  5306    13
   577       |int      revoke(const char *);                                                                   |  5307    13
   578       |pid_t    rfork(int);                                                                             |  5308    13
   579       |pid_t    rfork_thread(int, void *, int (*)(void *), void *);                                     |  5309    13
   580       |int      rresvport(int *);                                                                       |  5310    13
   581       |int      rresvport_af(int *, int);                                                               |  5311    13
   582       |int      ruserok(const char *, int, const char *, const char *);                                 |  5312    13
   583       |#if __BSD_VISIBLE                                                                                |  5313    13
   584       |#ifndef _SELECT_DECLARED                                                                         |  5314    13
   585       |#define _SELECT_DECLARED                                                                         |  5315    13
   586       |int      select(int, fd_set *, fd_set *, fd_set *, struct timeval *);                            |  5316    13
   587       |int      selectex(int, fd_set *, fd_set *, fd_set *, struct timeval *,                           |  5317    13
   588       |                       int *ecbptr);                                                             |  5318    13
   589       |                                                                                                 |  5319    13
   590       |#endif                                                                                           |  5320    13
   591       |#endif                                                                                           |  5321    13
   592       |int      setdomainname(const char *, int);                                                       |  5322    13
   592       +int      setdomainname(const char *, int);                                                       +  5322    13
   593       |#pragma map(setgroups, "@@SETGRP")                                                               |  5323    13
   594       |int      setgroups(int, const gid_t *);                                                          |  5324    13
   595       |void     sethostid(long);                                                                        |  5325    13
   596       |int      sethostname(const char *, int);                                                         |  5326    13
   597       |#ifndef _SETKEY_DECLARED                                                                         |  5327    13
   598       |int      setkey(const char *);                                                                   |  5328    13
   599       |#define _SETKEY_DECLARED                                                                         |  5329    13
   600       |#endif                                                                                           |  5330    13
   601       |int      setlogin(const char *);                                                                 |  5331    13
   602       |void    *setmode(const char *);                                                                  |  5332    13
   603       |int      setresgid(gid_t, gid_t, gid_t);                                                         |  5333    13
   604       |int      setresuid(uid_t, uid_t, uid_t);                                                         |  5334    13
   605       |int      setrgid(gid_t);                                                                         |  5335    13
   606       |int      setruid(uid_t);                                                                         |  5336    13
   607       |void     setusershell(void);                                                                     |  5337    13
   608       |int      strtofflags(char **, u_long *, u_long *);                                               |  5338    13
   609       |int      swapon(const char *);                                                                   |  5339    13
   610       |int      swapoff(const char *);                                                                  |  5340    13
   611       |int      syscall(int, ...);                                                                      |  5341    13
   612       |off_t    __syscall(quad_t, ...);                                                                 |  5342    13
   613       |int      ttyslot(void);                                                                          |  5343    13
   614       |int      undelete(const char *);                                                                 |  5344    13
   615       |int      unwhiteout(const char *);                                                               |  5345    13
   616       |void    *valloc(size_t);                        /* obsoleted by malloc() */                      |  5346    13
   617       |                                                                                                 |  5347    13
   618       |#ifndef _OPTRESET_DECLARED                                                                       |  5348    13
   619       |#define _OPTRESET_DECLARED                                                                       |  5349    13
   620       |extern int optreset;                    /* getopt(3) external variable */                        |  5350    13
   621       |#endif                                                                                           |  5351    13
   622       |#endif /* __BSD_VISIBLE */                                                                       |  5352    13
   623       |__END_DECLS                                                                                      |  5353    13
   623       +                                                                                                 +  5353    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   104


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   624       |                                                                                                 |  5354    13
   625       |#endif /* !_UNISTD_H_ */                                                                         |  5355    13
   626       |#pragma pack(reset)                                                                              |  5356    13
    23       |#include <time.h>                                                                                |  5357     2
     1       |/* release 2.25.00 */                                                                            |  5358    16
     2       |#pragma pack()                                                                                   |  5359    16
     3       |/*                                                                                               |  5360    16
     4       | * Copyright (c) 1989, 1993                                                                      |  5361    16
     5       | *      The Regents of the University of California.  All rights reserved.                       |  5362    16
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  5363    16
     7       | * All or some portions of this file are derived from material licensed                          |  5364    16
     8       | * to the University of California by American Telephone and Telegraph                           |  5365    16
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  5366    16
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  5367    16
    11       | *                                                                                               |  5368    16
    12       | * Redistribution and use in source and binary forms, with or without                            |  5369    16
    13       | * modification, are permitted provided that the following conditions                            |  5370    16
    14       | * are met:                                                                                      |  5371    16
    15       | * 1. Redistributions of source code must retain the above copyright                             |  5372    16
    16       | *    notice, this list of conditions and the following disclaimer.                              |  5373    16
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5374    16
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  5375    16
    19       | *    documentation and/or other materials provided with the distribution.                       |  5376    16
    20       | * 3. All advertising materials mentioning features or use of this software                      |  5377    16
    21       | *    must display the following acknowledgement:                                                |  5378    16
    22       | *      This product includes software developed by the University of                            |  5379    16
    23       | *      California, Berkeley and its contributors.                                               |  5380    16
    24       | * 4. Neither the name of the University nor the names of its contributors                       |  5381    16
    25       | *    may be used to endorse or promote products derived from this software                      |  5382    16
    26       | *    without specific prior written permission.                                                 |  5383    16
    27       | *                                                                                               |  5384    16
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  5385    16
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  5386    16
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  5387    16
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  5388    16
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  5389    16
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  5390    16
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  5391    16
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  5392    16
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  5393    16
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  5394    16
    38       | * SUCH DAMAGE.                                                                                  |  5395    16
    39       | *                                                                                               |  5396    16
    40       | *      @(#)time.h      8.3 (Berkeley) 1/21/94                                                   |  5397    16
    41       | */                                                                                              |  5398    16
    42       |                                                                                                 |  5399    16
    43       |/*                                                                                               |  5400    16
    44       | */                                                                                              |  5401    16
    45       |                                                                                                 |  5402    16
    46       |#ifndef _TIME_H_                                                                                 |  5403    16
    47       |#define _TIME_H_                                                                                 |  5404    16
    48       |                                                                                                 |  5405    16
    49       |#include <sys/cdefs.h>                                                                           |  5406    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   105


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/* release 2.25.00 */                                                                            |  5407     4
     2       |#pragma pack()                                                                                   |  5408     4
     3       |/*                                                                                               |  5409     4
     4       | * Copyright (c) 1991, 1993                                                                      |  5410     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  5411     4
     6       | *                                                                                               |  5412     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  5413     4
     8       | * Berkeley Software Design, Inc.                                                                |  5414     4
     9       | *                                                                                               |  5415     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  5416     4
    11       | * modification, are permitted provided that the following conditions                            |  5417     4
    12       | * are met:                                                                                      |  5418     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  5419     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  5420     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5421     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  5422     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  5423     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  5424     4
    19       | *    must display the following acknowledgement:                                                |  5425     4
    20       | *      This product includes software developed by the University of                            |  5426     4
    21       | *      California, Berkeley and its contributors.                                               |  5427     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  5428     4
    23       | *    may be used to endorse or promote products derived from this software                      |  5429     4
    24       | *    without specific prior written permission.                                                 |  5430     4
    25       | *                                                                                               |  5431     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  5432     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  5433     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  5434     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  5435     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  5436     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  5437     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  5438     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  5439     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  5440     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  5441     4
    36       | * SUCH DAMAGE.                                                                                  |  5442     4
    37       | *                                                                                               |  5443     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  5444     4
    39       | */                                                                                              |  5445     4
    40       |                                                                                                 |  5446     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  5447     4
    42       |#define _SYS_CDEFS_H_                                                                            |  5448     4
    43       |                                                                                                 |  5449     4
    44       |#if defined(__cplusplus)                                                                         |  5450     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  5451     4
    46       |#define __END_DECLS     }                                                                        |  5452     4
    47       |#else                                                                                            |  5453     4
    48       |#define __BEGIN_DECLS                                                                            |  5454     4
    49       |#define __END_DECLS                                                                              |  5455     4
    50       |#endif                                                                                           |  5456     4
    51       |                                                                                                 |  5457     4
    52       |/*                                                                                               |  5458     4
    53       | * This code has been put in place to help reduce the addition of                                |  5459     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   106


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  5460     4
    55       | * having a compiler-agnostic source tree.                                                       |  5461     4
    56       | */                                                                                              |  5462     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  5463     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  5464     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  5465     4
    60       |                                                                                                 |  5466     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  5467     4
    62       |                                                                                                 |  5468     4
    63       |                                                                                                 |  5469     4
    64       |/*                                                                                               |  5470     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  5471     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  5472     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  5473     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  5474     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  5475     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  5476     4
    71       | * this only works with ANSI C.                                                                  |  5477     4
    72       | *                                                                                               |  5478     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  5479     4
    74       | * first.  It is only available with ANSI C.                                                     |  5480     4
    75       | */                                                                                              |  5481     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  5482     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  5483     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  5484     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  5485     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  5486     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  5487     4
    82       |                                                                                                 |  5488     4
    83       |#define __const         const           /* define reserved names to standard */                  |  5489     4
    84       |#define __signed        signed                                                                   |  5490     4
    85       |#define __volatile      volatile                                                                 |  5491     4
    86       |#if defined(__cplusplus)                                                                         |  5492     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  5493     4
    88       |#else                                                                                            |  5494     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  5495     4
    90       |#endif /* !__cplusplus */                                                                        |  5496     4
    91       |                                                                                                 |  5497     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  5498     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  5499     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  5500     4
    95       |#define __STRING(x)     "x"                                                                      |  5501     4
    96       |                                                                                                 |  5502     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  5503     4
    98       |#define __inline                                                                                 |  5504     4
    99       |#define __signed                                                                                 |  5505     4
   100       |#define __volatile                                                                               |  5506     4
   101       |/*                                                                                               |  5507     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  5508     4
   103       | * deleted from the program and old programs will want them left alone.                          |  5509     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  5510     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  5511     4
   106       | */                                                                                              |  5512     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   107


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  5513     4
   108       |#define const                           /* delete ANSI C keywords */                             |  5514     4
   109       |#define inline                                                                                   |  5515     4
   110       |#define signed                                                                                   |  5516     4
   111       |#define volatile                                                                                 |  5517     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  5518     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  5519     4
   114       |                                                                                                 |  5520     4
   115       |/*                                                                                               |  5521     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  5522     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  5523     4
   118       | */                                                                                              |  5524     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  5525     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  5526     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  5527     4
   122       |#define __unused                                                                                 |  5528     4
   123       |#define __aligned(x)                                                                             |  5529     4
   124       |#define __section(x)                                                                             |  5530     4
   125       |#define __nonnull(x)                                                                             |  5531     4
   126       |#define __used                                                                                   |  5532     4
   127       |                                                                                                 |  5533     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  5534     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  5535     4
   130       |                                                                                                 |  5536     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  5537     4
   132       |#define __func__  NULL                                                                           |  5538     4
   133       |#endif                                                                                           |  5539     4
   134       |                                                                                                 |  5540     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  5541     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  5542     4
   137       |#endif                                                                                           |  5543     4
   138       |                                                                                                 |  5544     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  5545     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  5546     4
   141       | **/                                                                                             |  5547     4
   142       |#ifndef __cplusplus                                                                              |  5548     4
   143       |#define __restrict __restrict__                                                                  |  5549     4
   144       |#else                                                                                            |  5550     4
   145       |/* Systems/C++ does not */                                                                       |  5551     4
   146       |#define __restrict                                                                               |  5552     4
   147       |#endif                                                                                           |  5553     4
   148       |                                                                                                 |  5554     4
   149       |/*                                                                                               |  5555     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  5556     4
   151       | */                                                                                              |  5557     4
   152       |#define __predict_true(exp)     (exp)                                                            |  5558     4
   153       |#define __predict_false(exp)    (exp)                                                            |  5559     4
   154       |                                                                                                 |  5560     4
   155       |                                                                                                 |  5561     4
   156       |/*                                                                                               |  5562     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  5563     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  5564     4
   159       | *                                                                                               |  5565     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   108


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  5566     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  5567     4
   162       | */                                                                                              |  5568     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  5569     4
   164       |#undef __offsetof                                                                                |  5570     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  5571     4
   166       |#endif                                                                                           |  5572     4
   167       |                                                                                                 |  5573     4
   168       |/*                                                                                               |  5574     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  5575     4
   170       | * or scanf-like arguments.                                                                      |  5576     4
   171       | */                                                                                              |  5577     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  5578     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  5579     4
   174       |#define __format_arg(fmtarg)                                                                     |  5580     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  5581     4
   176       |                                                                                                 |  5582     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  5583     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  5584     4
   179       |                                                                                                 |  5585     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  5586     4
   181       |#define __weak_reference(sym,alias)                                                              |  5587     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  5588     4
   183       |#define __warn_references(sym,msg)                                                               |  5589     4
   184       |                                                                                                 |  5590     4
   185       | /* This places the string into the resulting object.  It should */                              |  5591     4
   186       | /* probably become #pragma ident */                                                             |  5592     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  5593     4
   188       |                                                                                                 |  5594     4
   189       |#ifndef __RCSID                                                                                  |  5595     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  5596     4
   191       |#endif                                                                                           |  5597     4
   192       |                                                                                                 |  5598     4
   193       |/*                                                                                               |  5599     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  5600     4
   195       | * Usage:                                                                                        |  5601     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  5602     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  5603     4
   198       | */                                                                                              |  5604     4
   199       |#ifndef __SYSCID                                                                                 |  5605     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  5606     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  5607     4
   202       |#else                                                                                            |  5608     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  5609     4
   204       |#endif                                                                                           |  5610     4
   205       |#endif                                                                                           |  5611     4
   206       |                                                                                                 |  5612     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  5613     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  5614     4
   209       |#endif                                                                                           |  5615     4
   210       |                                                                                                 |  5616     4
   211       |#ifndef __COPYRIGHT                                                                              |  5617     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  5618     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   109


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   213       |#endif                                                                                           |  5619     4
   214       |                                                                                                 |  5620     4
   215       |                                                                                                 |  5621     4
   216       |#ifndef __DECONST                                                                                |  5622     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  5623     4
   218       |#endif                                                                                           |  5624     4
   219       |                                                                                                 |  5625     4
   220       |#ifndef __DEVOLATILE                                                                             |  5626     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  5627     4
   222       |#endif                                                                                           |  5628     4
   223       |                                                                                                 |  5629     4
   224       |#ifndef __DEQUALIFY                                                                              |  5630     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  5631     4
   226       |#endif                                                                                           |  5632     4
   227       |                                                                                                 |  5633     4
   228       |                                                                                                 |  5634     4
   229       |/*-                                                                                              |  5635     4
   230       | * The following definitions are an extension of the behavior originally                         |  5636     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  5637     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  5638     4
   233       | * header file is included.                                                                      |  5639     4
   234       | *                                                                                               |  5640     4
   235       | * Here's a quick run-down of the versions:                                                      |  5641     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  5642     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  5643     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  5644     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  5645     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  5646     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  5647     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  5648     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  5649     4
   244       | *                                                                                               |  5650     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  5651     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  5652     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  5653     4
   248       | *                                                                                               |  5654     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  5655     4
   250       | */                                                                                              |  5656     4
   251       |                                                                                                 |  5657     4
   252       |/*                                                                                               |  5658     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  5659     4
   254       | * available. Also make them available when requested so.                                        |  5660     4
   255       | */                                                                                              |  5661     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  5662     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  5663     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  5664     4
   259       |#define __DF_VISIBLE    1                                                                        |  5665     4
   260       |#else                                                                                            |  5666     4
   261       |#define __DF_VISIBLE    0                                                                        |  5667     4
   262       |#endif                                                                                           |  5668     4
   263       |                                                                                                 |  5669     4
   264       |/*-                                                                                              |  5670     4
   265       | * The following definitions are an extension of the behavior originally                         |  5671     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   110


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  5672     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  5673     4
   268       | * header file is included.                                                                      |  5674     4
   269       | *                                                                                               |  5675     4
   270       | * Here's a quick run-down of the versions:                                                      |  5676     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  5677     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  5678     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  5679     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  5680     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  5681     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  5682     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  5683     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  5684     4
   279       | *                                                                                               |  5685     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  5686     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  5687     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  5688     4
   283       | *                                                                                               |  5689     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  5690     4
   285       | */                                                                                              |  5691     4
   286       |                                                                                                 |  5692     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  5693     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  5694     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  5695     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  5696     4
   291       |#endif                                                                                           |  5697     4
   292       |                                                                                                 |  5698     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  5699     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  5700     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  5701     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  5702     4
   297       |#endif                                                                                           |  5703     4
   298       |                                                                                                 |  5704     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  5705     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  5706     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  5707     4
   302       |#define __XSI_VISIBLE           700                                                              |  5708     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  5709     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  5710     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  5711     4
   306       |#define __XSI_VISIBLE           600                                                              |  5712     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  5713     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  5714     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  5715     4
   310       |#define __XSI_VISIBLE           500                                                              |  5716     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  5717     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  5718     4
   313       |#endif                                                                                           |  5719     4
   314       |#endif                                                                                           |  5720     4
   315       |                                                                                                 |  5721     4
   316       |/*                                                                                               |  5722     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  5723     4
   318       | * important.                                                                                    |  5724     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   111


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   319       | */                                                                                              |  5725     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  5726     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  5727     4
   322       |#endif                                                                                           |  5728     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  5729     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  5730     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  5731     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  5732     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  5733     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  5734     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  5735     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  5736     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  5737     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  5738     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  5739     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  5740     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  5741     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  5742     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  5743     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  5744     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  5745     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  5746     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  5747     4
   342       |#else                                                                                            |  5748     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  5749     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  5750     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  5751     4
   346       |#else                                                                                            |  5752     4
   347       |/*-                                                                                              |  5753     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  5754     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  5755     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  5756     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  5757     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  5758     4
   353       | * a test program to print out the values.                                                       |  5759     4
   354       | *                                                                                               |  5760     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  5761     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  5762     4
   357       | * environment (and in fact we will never get here).                                             |  5763     4
   358       | */                                                                                              |  5764     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  5765     4
   360       |#define __POSIX_VISIBLE         0                                                                |  5766     4
   361       |#define __XSI_VISIBLE           0                                                                |  5767     4
   362       |#define __BSD_VISIBLE           0                                                                |  5768     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  5769     4
   364       |#define __EXT1_VISIBLE          0                                                                |  5770     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  5771     4
   366       |#define __POSIX_VISIBLE         0                                                                |  5772     4
   367       |#define __XSI_VISIBLE           0                                                                |  5773     4
   368       |#define __BSD_VISIBLE           0                                                                |  5774     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  5775     4
   370       |#define __EXT1_VISIBLE          0                                                                |  5776     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  5777     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   112


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   372       |#define __POSIX_VISIBLE         0                                                                |  5778     4
   373       |#define __XSI_VISIBLE           0                                                                |  5779     4
   374       |#define __BSD_VISIBLE           0                                                                |  5780     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  5781     4
   376       |#define __EXT1_VISIBLE          0                                                                |  5782     4
   377       |#else                           /* Default environment: show everything. */                      |  5783     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  5784     4
   379       |#define __XSI_VISIBLE           700                                                              |  5785     4
   380       |#define __BSD_VISIBLE           1                                                                |  5786     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  5787     4
   382       |#define __EXT1_VISIBLE          1                                                                |  5788     4
   383       |#endif                                                                                           |  5789     4
   384       |#endif                                                                                           |  5790     4
   385       |                                                                                                 |  5791     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  5792     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  5793     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  5794     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  5795     4
   390       |#define __EXT1_VISIBLE          1                                                                |  5796     4
   391       |#else                                                                                            |  5797     4
   392       |#define __EXT1_VISIBLE          0                                                                |  5798     4
   393       |#endif                                                                                           |  5799     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  5800     4
   395       |                                                                                                 |  5801     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  5802     4
   397       |#define __NO_TLS 1                                                                               |  5803     4
   398       |#endif                                                                                           |  5804     4
   399       |                                                                                                 |  5805     4
   400       |                                                                                                 |  5806     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  5807     4
   402       |#define __FBSDID(x)                                                                              |  5808     4
   403       |                                                                                                 |  5809     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  5810     4
   405       |#pragma pack(reset)                                                                              |  5811     4
    50       |#include <sys/_null.h>                                                                           |  5812    16
     1       |/* release 2.25.00 */                                                                            |  5813    15
     2       |#pragma pack()                                                                                   |  5814    15
     3       |/*-                                                                                              |  5815    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  5816    15
     5       | * All rights reserved.                                                                          |  5817    15
     6       | *                                                                                               |  5818    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  5819    15
     8       | * modification, are permitted provided that the following conditions                            |  5820    15
     9       | * are met:                                                                                      |  5821    15
    10       | *                                                                                               |  5822    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  5823    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  5824    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5825    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  5826    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  5827    15
    16       | *                                                                                               |  5828    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  5829    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  5830    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   113


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  5831    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  5832    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  5833    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  5834    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  5835    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  5836    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  5837    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  5838    15
    27       | *                                                                                               |  5839    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  5840    15
    29       | */                                                                                              |  5841    15
    30       |                                                                                                 |  5842    15
    31       |#ifndef NULL                                                                                     |  5843    15
    32       |                                                                                                 |  5844    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  5845    15
    34       |#define NULL    ((void *)0)                                                                      |  5846    15
    35       |#else                                                                                            |  5847    15
    36       |#if defined(__LP64__)                                                                            |  5848    15
    37       |#define NULL    (0L)                                                                             |  5849    15
    38       |#else                                                                                            |  5850    15
    39       |#define NULL    0                                                                                |  5851    15
    40       |#endif  /* __LP64__ */                                                                           |  5852    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  5853    15
    42       |                                                                                                 |  5854    15
    43       |#endif                                                                                           |  5855    15
    44       |#pragma pack(reset)                                                                              |  5856    15
    51       |#include <sys/_types.h>                                                                          |  5857    16
     1       |/* release 2.25.00 */                                                                            |  5858     6
     2       |#pragma pack()                                                                                   |  5859     6
     3       |/*-                                                                                              |  5860     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  5861     6
     5       | * All rights reserved.                                                                          |  5862     6
     6       | *                                                                                               |  5863     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  5864     6
     8       | * modification, are permitted provided that the following conditions                            |  5865     6
     9       | * are met:                                                                                      |  5866     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  5867     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  5868     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  5869     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  5870     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  5871     6
    15       | *                                                                                               |  5872     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  5873     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  5874     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  5875     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  5876     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  5877     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  5878     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  5879     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  5880     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  5881     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  5882     6
    26       | * SUCH DAMAGE.                                                                                  |  5883     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   114


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    27       | *                                                                                               |  5884     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  5885     6
    29       | */                                                                                              |  5886     6
    30       |                                                                                                 |  5887     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  5888     6
    32       |#define _SYS__TYPES_H_                                                                           |  5889     6
    33       |                                                                                                 |  5890     6
    34       |#include <sys/cdefs.h>                                                                           |  5891     6
    35       |#include <machine/_types.h>                                                                      |  5892     6
    36       |                                                                                                 |  5893     6
    37       |/*                                                                                               |  5894     6
    38       | * Standard type definitions.                                                                    |  5895     6
    39       | */                                                                                              |  5896     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  5897     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  5898     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  5899     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  5900     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  5901     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  5902     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  5903     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  5904     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  5905     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  5906     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  5907     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  5908     6
    52       |typedef int             __nl_item;                                                               |  5909     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  5910     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  5911     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  5912     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  5913     6
    57       |                                        /* signed, because of legacy code */                     |  5914     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  5915     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  5916     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  5917     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  5918     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  5919     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  5920     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  5921     6
    65       |                                                                                                 |  5922     6
    66       |/*                                                                                               |  5923     6
    67       | * Unusual type definitions.                                                                     |  5924     6
    68       | */                                                                                              |  5925     6
    69       |/*                                                                                               |  5926     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  5927     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  5928     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  5929     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  5930     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  5931     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  5932     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  5933     6
    77       | *                                                                                               |  5934     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  5935     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  5936     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   115


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  5937     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  5938     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  5939     6
    83       | */                                                                                              |  5940     6
    84       |#ifdef __cplusplus                                                                               |  5941     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  5942     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  5943     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  5944     6
    88       |#else                                                                                            |  5945     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  5946     6
    90       |#endif                                                                                           |  5947     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  5948     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  5949     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  5950     6
    94       |                                                                                                 |  5951     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  5952     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  5953     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  5954     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  5955     6
    99       |#endif                                                                                           |  5956     6
   100       |                                                                                                 |  5957     6
   101       |#if !defined(__cplusplus)                                                                        |  5958     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  5959     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  5960     6
   104       |#endif                                                                                           |  5961     6
   105       |                                                                                                 |  5962     6
   106       |                                                                                                 |  5963     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  5964     6
   108       |                                                                                                 |  5965     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  5966     6
   110       |                                                                                                 |  5967     6
   111       |/*                                                                                               |  5968     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  5969     6
   113       | * stream conversions.                                                                           |  5970     6
   114       | */                                                                                              |  5971     6
   115       |typedef union {                                                                                  |  5972     6
   116       |        char            __mbstate8[128];                                                         |  5973     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  5974     6
   118       |} __mbstate_t;                                                                                   |  5975     6
   119       |                                                                                                 |  5976     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  5977     6
   121       |#pragma pack(reset)                                                                              |  5978     6
    52       |                                                                                                 |  5979    16
    53       |#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE                             |  5980    16
    54       |/*                                                                                               |  5981    16
    55       | * Frequency of the clock ticks reported by times().  Deprecated - use                           |  5982    16
    56       | * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)                                      |  5983    16
    57       | *                                                                                               |  5984    16
    58       | */                                                                                              |  5985    16
    58       +                                                                                                 +  5985    16
    59       |#define CLK_TCK         10000                                                                    |  5986    16
    60       |#endif                                                                                           |  5987    16
    61       |                                                                                                 |  5988    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   116


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    62       |/* Frequency of the clock ticks reported by clock().  */                                         |  5989    16
    63       |#define CLOCKS_PER_SEC  128                                                                      |  5990    16
    64       |                                                                                                 |  5991    16
    65       |#ifndef _CLOCK_T_DECLARED                                                                        |  5992    16
    66       |typedef __clock_t       clock_t;                                                                 |  5993    16
    67       |#define _CLOCK_T_DECLARED                                                                        |  5994    16
    68       |#endif                                                                                           |  5995    16
    69       |                                                                                                 |  5996    16
    70       |#ifndef _TIME_T_DECLARED                                                                         |  5997    16
    71       |typedef __time_t        time_t;                                                                  |  5998    16
    72       |#define _TIME_T_DECLARED                                                                         |  5999    16
    73       |#endif                                                                                           |  6000    16
    74       |                                                                                                 |  6001    16
    75       |#ifndef _SIZE_T_DECLARED                                                                         |  6002    16
    76       |typedef __size_t        size_t;                                                                  |  6003    16
    77       |#define _SIZE_T_DECLARED                                                                         |  6004    16
    78       |#endif                                                                                           |  6005    16
    79       |                                                                                                 |  6006    16
    80       |#if __POSIX_VISIBLE >= 199309                                                                    |  6007    16
    81       |/*                                                                                               |  6008    16
    82       | * New in POSIX 1003.1b-1993.                                                                    |  6009    16
    83       | */                                                                                              |  6010    16
    83       +                                                                                                 +  6010    16
    84       |#ifndef _CLOCKID_T_DECLARED                                                                      |  6011    16
    85       |typedef __clockid_t     clockid_t;                                                               |  6012    16
    86       |#define _CLOCKID_T_DECLARED                                                                      |  6013    16
    87       |#endif                                                                                           |  6014    16
    88       |                                                                                                 |  6015    16
    89       |#ifndef _TIMER_T_DECLARED                                                                        |  6016    16
    90       |typedef __timer_t       timer_t;                                                                 |  6017    16
    91       |#define _TIMER_T_DECLARED                                                                        |  6018    16
    92       |#endif                                                                                           |  6019    16
    93       |                                                                                                 |  6020    16
    94       |#include <sys/timespec.h>                                                                        |  6021    16
     1       |/* release 2.25.00 */                                                                            |  6022    12
     2       |#pragma pack()                                                                                   |  6023    12
     3       |/*-                                                                                              |  6024    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  6025    12
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6026    12
     6       | *                                                                                               |  6027    12
     7       | * Redistribution and use in source and binary forms, with or without                            |  6028    12
     8       | * modification, are permitted provided that the following conditions                            |  6029    12
     9       | * are met:                                                                                      |  6030    12
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6031    12
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6032    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6033    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6034    12
    14       | *    documentation and/or other materials provided with the distribution.                       |  6035    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  6036    12
    16       | *    may be used to endorse or promote products derived from this software                      |  6037    12
    17       | *    without specific prior written permission.                                                 |  6038    12
    18       | *                                                                                               |  6039    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6040    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   117


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6041    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6042    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6043    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6044    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6045    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6046    12
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6047    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6048    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6049    12
    29       | * SUCH DAMAGE.                                                                                  |  6050    12
    30       | *                                                                                               |  6051    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  6052    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          |  6053    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     |  6054    12
    34       | */                                                                                              |  6055    12
    35       |                                                                                                 |  6056    12
    36       |/*                                                                                               |  6057    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  |  6058    12
    38       | */                                                                                              |  6059    12
    39       |                                                                                                 |  6060    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         |  6061    12
    41       |#define _SYS_TIMESPEC_H_                                                                         |  6062    12
    42       |                                                                                                 |  6063    12
    43       |#include <sys/_types.h>                                                                          |  6064    12
    44       |                                                                                                 |  6065    12
    45       |#ifndef _TIME_T_DECLARED                                                                         |  6066    12
    46       |typedef __time_t        time_t;                                                                  |  6067    12
    47       |#define _TIME_T_DECLARED                                                                         |  6068    12
    48       |#endif                                                                                           |  6069    12
    49       |                                                                                                 |  6070    12
    50       |struct timespec {                                                                                |  6071    12
    51       |        time_t  tv_sec;         /* seconds */                                                    |  6072    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            |  6073    12
    53       |};                                                                                               |  6074    12
    54       |                                                                                                 |  6075    12
    55       |#if __BSD_VISIBLE                                                                                |  6076    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        |  6077    12
    57       |        do {                                                            \                        |  6078    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        |  6079    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        |  6080    12
    60       |        } while (0)                                                                              |  6081    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        |  6082    12
    62       |        do {                                                            \                        |  6083    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        |  6084    12
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        |  6085    12
    65       |        } while (0)                                                                              |  6086    12
    66       |                                                                                                 |  6087    12
    67       |#endif /* __BSD_VISIBLE */                                                                       |  6088    12
    68       |                                                                                                 |  6089    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    |  6090    12
    70       |#pragma pack(reset)                                                                              |  6091    12
    95       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  6092    16
    96       |                                                                                                 |  6093    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   118


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    97       |/* These macros are also in sys/time.h. */                                                       |  6094    16
    98       |#if !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112                                        |  6095    16
    99       |#define CLOCK_REALTIME  0                                                                        |  6096    16
   100       |#if 0                                                                                            |  6097    16
   101       |  /* only CLOCK_REALTIME exists in this implementation */                                        |  6098    16
   102       |#ifdef __BSD_VISIBLE                                                                             |  6099    16
   103       |#define CLOCK_VIRTUAL   1                                                                        |  6100    16
   104       |#define CLOCK_PROF      2                                                                        |  6101    16
   105       |#endif                                                                                           |  6102    16
   106       |#define CLOCK_MONOTONIC 4                                                                        |  6103    16
   107       |#endif /* 0 */                                                                                   |  6104    16
   108       |#endif /* !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112 */                               |  6105    16
   109       |                                                                                                 |  6106    16
   109       +                                                                                                 +  6106    16
   110       |#if !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112                                         |  6107    16
   111       |#if __BSD_VISIBLE                                                                                |  6108    16
   112       |#define TIMER_RELTIME   0x0     /* relative timer */                                             |  6109    16
   113       |#endif                                                                                           |  6110    16
   114       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             |  6111    16
   115       |#endif /* !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112 */                                |  6112    16
   116       |                                                                                                 |  6113    16
   116       +                                                                                                 +  6113    16
   117       |struct tm {                                                                                      |  6114    16
   118       |        int     tm_sec;         /* seconds after the minute [0-60] */                            |  6115    16
   119       |        int     tm_min;         /* minutes after the hour [0-59] */                              |  6116    16
   120       |        int     tm_hour;        /* hours since midnight [0-23] */                                |  6117    16
   121       |        int     tm_mday;        /* day of the month [1-31] */                                    |  6118    16
   122       |        int     tm_mon;         /* months since January [0-11] */                                |  6119    16
   123       |        int     tm_year;        /* years since 1900 */                                           |  6120    16
   124       |        int     tm_wday;        /* days since Sunday [0-6] */                                    |  6121    16
   125       |        int     tm_yday;        /* days since January 1 [0-365] */                               |  6122    16
   126       |        int     tm_isdst;       /* Daylight Savings Time flag */                                 |  6123    16
   127       |        long    tm_gmtoff;      /* offset from UTC in seconds */                                 |  6124    16
   128       |        char    *tm_zone;       /* timezone abbreviation */                                      |  6125    16
   129       |};                                                                                               |  6126    16
   130       |                                                                                                 |  6127    16
   131       |#if __POSIX_VISIBLE                                                                              |  6128    16
   132       |extern char *tzname[];                                                                           |  6129    16
   132       +extern char *tzname[];                                                                           +  6129    16
   133       |#endif                                                                                           |  6130    16
   134       |                                                                                                 |  6131    16
   135       |__BEGIN_DECLS                                                                                    |  6132    16
   135       +                                                                                                 +  6132    16
   136       |char *asctime(const struct tm *);                                                                |  6133    16
   137       |clock_t clock(void);                                                                             |  6134    16
   138       |char *ctime(const time_t *);                                                                     |  6135    16
   139       |double difftime(time_t, time_t);                                                                 |  6136    16
   140       |/* XXX missing: getdate() */                                                                     |  6137    16
   141       |struct tm *gmtime(const time_t *);                                                               |  6138    16
   142       |#pragma map (localtime, "LC@LTIME")                                                              |  6139    16
   143       |struct tm *localtime(const time_t *);                                                            |  6140    16
   144       |time_t mktime(struct tm *);                                                                      |  6141    16
   145       |size_t strftime(char * __restrict, size_t, const char * __restrict,                              |  6142    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   119


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   145       +size_t strftime(char * __restrict__, size_t, const char * __restrict__,                          +  6142    16
   146       |    const struct tm * __restrict);                                                               |  6143    16
   146       +        const struct tm * __restrict__);                                                         +  6143    16
   147       |time_t time(time_t *);                                                                           |  6144    16
   148       |                                                                                                 |  6145    16
   149       |#if __POSIX_VISIBLE                                                                              |  6146    16
   150       |void tzset(void);                                                                                |  6147    16
   150       +void tzset(void);                                                                                +  6147    16
   151       |#endif                                                                                           |  6148    16
   152       |                                                                                                 |  6149    16
   153       |#if __POSIX_VISIBLE >= 199309                                                                    |  6150    16
   154       |#pragma map(clock_getres, "@@CLKRES")                                                            |  6151    16
   154       +#pragma map ( clock_getres , "@@CLKRES" )                                                        +  6151    16
   155       |int clock_getres(clockid_t, struct timespec *);                                                  |  6152    16
   156       |#pragma map(clock_gettime, "@@CLKGET")                                                           |  6153    16
   157       |int clock_gettime(clockid_t, struct timespec *);                                                 |  6154    16
   158       |#pragma map(clock_settime, "@@CLKSET")                                                           |  6155    16
   159       |int clock_settime(clockid_t, const struct timespec *);                                           |  6156    16
   160       |#pragma map(nanosleep,"@@NNOSLP")                                                                |  6157    16
   161       |int nanosleep(const struct timespec *, struct timespec *);                                       |  6158    16
   162       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  6159    16
   163       |                                                                                                 |  6160    16
   164       |#if __POSIX_VISIBLE >= 199506                                                                    |  6161    16
   165       |#pragma map(asctime_r, "@@ASCT@R")                                                               |  6162    16
   165       +#pragma map ( asctime_r , "@@ASCT@R" )                                                           +  6162    16
   166       |char *asctime_r(const struct tm *, char *);                                                      |  6163    16
   167       |#pragma map(ctime_r, "@@CTME@R")                                                                 |  6164    16
   168       |char *ctime_r(const time_t *, char *);                                                           |  6165    16
   169       |#pragma map(gmtime_r, "@@GMTM@R")                                                                |  6166    16
   170       |struct tm *gmtime_r(const time_t *, struct tm *);                                                |  6167    16
   171       |#pragma map(localtime_r, "@@LCLT@R")                                                             |  6168    16
   172       |struct tm *localtime_r(const time_t *, struct tm *);                                             |  6169    16
   173       |#endif                                                                                           |  6170    16
   174       |                                                                                                 |  6171    16
   175       |#if __XSI_VISIBLE                                                                                |  6172    16
   176       |char *strptime(const char * __restrict, const char * __restrict,                                 |  6173    16
   176       +char *strptime(const char * __restrict__, const char * __restrict__,                             +  6173    16
   177       |    struct tm * __restrict);                                                                     |  6174    16
   177       +        struct tm * __restrict__);                                                               +  6174    16
   178       |#endif                                                                                           |  6175    16
   179       |                                                                                                 |  6176    16
   180       |#if __BSD_VISIBLE                                                                                |  6177    16
   181       |char *timezone(int, int);       /* XXX XSI conflict */                                           |  6178    16
   181       +char *timezone(int, int);                                                                        +  6178    16
   182       |void tzsetwall(void);                                                                            |  6179    16
   183       |#pragma map (timelocal, "TIMELC@L")                                                              |  6180    16
   184       |time_t timelocal(struct tm * const);                                                             |  6181    16
   185       |time_t timegm(struct tm * const);                                                                |  6182    16
   186       |#endif /* __BSD_VISIBLE */                                                                       |  6183    16
   187       |__END_DECLS                                                                                      |  6184    16
   187       +                                                                                                 +  6184    16
   188       |                                                                                                 |  6185    16
   189       |#endif /* !_TIME_H_ */                                                                           |  6186    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   120


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   190       |#pragma pack(reset)                                                                              |  6187    16
    24       |#include <sys/time.h>                                                                            |  6188     2
     1       |/* release 2.25.00 */                                                                            |  6189    17
     2       |#pragma pack()                                                                                   |  6190    17
     3       |/*-                                                                                              |  6191    17
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  6192    17
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6193    17
     6       | *                                                                                               |  6194    17
     7       | * Redistribution and use in source and binary forms, with or without                            |  6195    17
     8       | * modification, are permitted provided that the following conditions                            |  6196    17
     9       | * are met:                                                                                      |  6197    17
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6198    17
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6199    17
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6200    17
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6201    17
    14       | *    documentation and/or other materials provided with the distribution.                       |  6202    17
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  6203    17
    16       | *    may be used to endorse or promote products derived from this software                      |  6204    17
    17       | *    without specific prior written permission.                                                 |  6205    17
    18       | *                                                                                               |  6206    17
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6207    17
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6208    17
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6209    17
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6210    17
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6211    17
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6212    17
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6213    17
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6214    17
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6215    17
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6216    17
    29       | * SUCH DAMAGE.                                                                                  |  6217    17
    30       | *                                                                                               |  6218    17
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  6219    17
    32       | * $FreeBSD: src/sys/sys/time.h,v 1.69 2005/04/02 12:33:27 das Exp $                             |  6220    17
    33       | */                                                                                              |  6221    17
    34       |                                                                                                 |  6222    17
    35       |#ifndef _SYS_TIME_H_                                                                             |  6223    17
    36       |#define _SYS_TIME_H_                                                                             |  6224    17
    37       |                                                                                                 |  6225    17
    38       |#include <sys/_timeval.h>                                                                        |  6226    17
     1       |/* release 2.25.00 */                                                                            |  6227    11
     2       |#pragma pack()                                                                                   |  6228    11
     3       |/*-                                                                                              |  6229    11
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  6230    11
     5       | * All rights reserved.                                                                          |  6231    11
     6       | *                                                                                               |  6232    11
     7       | * Redistribution and use in source and binary forms, with or without                            |  6233    11
     8       | * modification, are permitted provided that the following conditions                            |  6234    11
     9       | * are met:                                                                                      |  6235    11
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6236    11
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6237    11
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6238    11
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6239    11
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   121


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    14       | *    documentation and/or other materials provided with the distribution.                       |  6240    11
    15       | *                                                                                               |  6241    11
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  6242    11
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6243    11
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6244    11
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  6245    11
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6246    11
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6247    11
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6248    11
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6249    11
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6250    11
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6251    11
    26       | * SUCH DAMAGE.                                                                                  |  6252    11
    27       | *                                                                                               |  6253    11
    28       | * $FreeBSD: src/sys/sys/_timeval.h,v 1.1.12.1 2006/06/23 23:41:05 cognet Exp $                  |  6254    11
    29       | */                                                                                              |  6255    11
    30       |                                                                                                 |  6256    11
    31       |#ifndef _SYS__TIMEVAL_H_                                                                         |  6257    11
    32       |#define _SYS__TIMEVAL_H_                                                                         |  6258    11
    33       |                                                                                                 |  6259    11
    34       |#include <sys/_types.h>                                                                          |  6260    11
    35       |                                                                                                 |  6261    11
    36       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  6262    11
    37       |typedef __suseconds_t   suseconds_t;                                                             |  6263    11
    38       |#define _SUSECONDS_T_DECLARED                                                                    |  6264    11
    39       |#endif                                                                                           |  6265    11
    40       |                                                                                                 |  6266    11
    41       |#ifndef _TIME_T_DECLARED                                                                         |  6267    11
    42       |typedef __time_t        time_t;                                                                  |  6268    11
    43       |#define _TIME_T_DECLARED                                                                         |  6269    11
    44       |#endif                                                                                           |  6270    11
    45       |                                                                                                 |  6271    11
    46       |/*                                                                                               |  6272    11
    47       | * Structure returned by gettimeofday(2) system call, and used in other calls.                   |  6273    11
    48       | */                                                                                              |  6274    11
    49       |struct timeval {                                                                                 |  6275    11
    50       |        time_t          tv_sec;                                                                  |  6276    11
    51       |        suseconds_t     tv_usec;        /* and microseconds */                                   |  6277    11
    52       |};                                                                                               |  6278    11
    53       |                                                                                                 |  6279    11
    54       |#endif /* !_SYS__TIMEVAL_H_ */                                                                   |  6280    11
    55       |#pragma pack(reset)                                                                              |  6281    11
    39       |#include <sys/types.h>                                                                           |  6282    17
     1       |/* release 2.25.00 */                                                                            |  6283     3
     2       |#pragma pack()                                                                                   |  6284     3
     3       |/*-                                                                                              |  6285     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    |  6286     3
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6287     3
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  6288     3
     7       | * All or some portions of this file are derived from material licensed                          |  6289     3
     8       | * to the University of California by American Telephone and Telegraph                           |  6290     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  6291     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  6292     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   122


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    11       | *                                                                                               |  6293     3
    12       | * Redistribution and use in source and binary forms, with or without                            |  6294     3
    13       | * modification, are permitted provided that the following conditions                            |  6295     3
    14       | * are met:                                                                                      |  6296     3
    15       | * 1. Redistributions of source code must retain the above copyright                             |  6297     3
    16       | *    notice, this list of conditions and the following disclaimer.                              |  6298     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6299     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  6300     3
    19       | *    documentation and/or other materials provided with the distribution.                       |  6301     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       |  6302     3
    21       | *    may be used to endorse or promote products derived from this software                      |  6303     3
    22       | *    without specific prior written permission.                                                 |  6304     3
    23       | *                                                                                               |  6305     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6306     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6307     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6308     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6309     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6310     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6311     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6312     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6313     3
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6314     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6315     3
    34       | * SUCH DAMAGE.                                                                                  |  6316     3
    35       | *                                                                                               |  6317     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   |  6318     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        |  6319     3
    38       | */                                                                                              |  6320     3
    39       |                                                                                                 |  6321     3
    40       |#ifndef _SYS_TYPES_H_                                                                            |  6322     3
    41       |#define _SYS_TYPES_H_                                                                            |  6323     3
    42       |                                                                                                 |  6324     3
    43       |#include <sys/cdefs.h>                                                                           |  6325     3
    44       |                                                                                                 |  6326     3
    45       |/* Machine type dependent parameters. */                                                         |  6327     3
    46       |#include <machine/endian.h>                                                                      |  6328     3
    47       |#include <sys/_types.h>                                                                          |  6329     3
    48       |                                                                                                 |  6330     3
    49       |#include <sys/_pthreadtypes.h>                                                                   |  6331     3
    50       |                                                                                                 |  6332     3
    51       |#if __BSD_VISIBLE                                                                                |  6333     3
    52       |typedef unsigned char   u_char;                                                                  |  6334     3
    53       |typedef unsigned short  u_short;                                                                 |  6335     3
    54       |typedef unsigned int    u_int;                                                                   |  6336     3
    55       |typedef unsigned long   u_long;                                                                  |  6337     3
    56       |#ifndef _KERNEL                                                                                  |  6338     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                |  6339     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                |  6340     3
    59       |#endif                                                                                           |  6341     3
    60       |#endif                                                                                           |  6342     3
    61       |                                                                                                 |  6343     3
    62       |/*                                                                                               |  6344     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          |  6345     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   123


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    64       | */                                                                                              |  6346     3
    65       |#ifndef _INT8_T_DECLARED                                                                         |  6347     3
    66       |typedef __int8_t        int8_t;                                                                  |  6348     3
    67       |#define _INT8_T_DECLARED                                                                         |  6349     3
    68       |#endif                                                                                           |  6350     3
    69       |                                                                                                 |  6351     3
    70       |#ifndef _INT16_T_DECLARED                                                                        |  6352     3
    71       |typedef __int16_t       int16_t;                                                                 |  6353     3
    72       |#define _INT16_T_DECLARED                                                                        |  6354     3
    73       |#endif                                                                                           |  6355     3
    74       |                                                                                                 |  6356     3
    75       |#ifndef _INT32_T_DECLARED                                                                        |  6357     3
    76       |typedef __int32_t       int32_t;                                                                 |  6358     3
    77       |#define _INT32_T_DECLARED                                                                        |  6359     3
    78       |#endif                                                                                           |  6360     3
    79       |                                                                                                 |  6361     3
    80       |#ifndef _INT64_T_DECLARED                                                                        |  6362     3
    81       |typedef __int64_t       int64_t;                                                                 |  6363     3
    82       |#define _INT64_T_DECLARED                                                                        |  6364     3
    83       |#endif                                                                                           |  6365     3
    84       |                                                                                                 |  6366     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        |  6367     3
    86       |typedef __uint8_t       uint8_t;                                                                 |  6368     3
    87       |#define _UINT8_T_DECLARED                                                                        |  6369     3
    88       |#endif                                                                                           |  6370     3
    89       |                                                                                                 |  6371     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       |  6372     3
    91       |typedef __uint16_t      uint16_t;                                                                |  6373     3
    92       |#define _UINT16_T_DECLARED                                                                       |  6374     3
    93       |#endif                                                                                           |  6375     3
    94       |                                                                                                 |  6376     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       |  6377     3
    96       |typedef __uint32_t      uint32_t;                                                                |  6378     3
    97       |#define _UINT32_T_DECLARED                                                                       |  6379     3
    98       |#endif                                                                                           |  6380     3
    99       |                                                                                                 |  6381     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       |  6382     3
   101       |typedef __uint64_t      uint64_t;                                                                |  6383     3
   102       |#define _UINT64_T_DECLARED                                                                       |  6384     3
   103       |#endif                                                                                           |  6385     3
   104       |                                                                                                 |  6386     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       |  6387     3
   106       |typedef __intptr_t      intptr_t;                                                                |  6388     3
   107       |typedef __uintptr_t     uintptr_t;                                                               |  6389     3
   108       |#define _INTPTR_T_DECLARED                                                                       |  6390     3
   109       |#endif                                                                                           |  6391     3
   110       |                                                                                                 |  6392     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    |  6393     3
   112       |typedef __uint16_t      u_int16_t;                                                               |  6394     3
   113       |typedef __uint32_t      u_int32_t;                                                               |  6395     3
   114       |typedef __uint64_t      u_int64_t;                                                               |  6396     3
   115       |                                                                                                 |  6397     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 |  6398     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   124


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   117       |typedef __int64_t       quad_t;                                                                  |  6399     3
   118       |typedef quad_t *        qaddr_t;                                                                 |  6400     3
   119       |                                                                                                 |  6401     3
   120       |typedef char *          caddr_t;        /* core address */                                       |  6402     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     |  6403     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  |  6404     3
   123       |                                                                                                 |  6405     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      |  6406     3
   125       |typedef __blksize_t     blksize_t;                                                               |  6407     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      |  6408     3
   127       |#endif                                                                                           |  6409     3
   128       |                                                                                                 |  6410     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       |  6411     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                |  6412     3
   131       |#define _BLKCNT_T_DECLARED                                                                       |  6413     3
   132       |#endif                                                                                           |  6414     3
   133       |                                                                                                 |  6415     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        |  6416     3
   135       |typedef __clock_t       clock_t;                                                                 |  6417     3
   136       |#define _CLOCK_T_DECLARED                                                                        |  6418     3
   137       |#endif                                                                                           |  6419     3
   138       |                                                                                                 |  6420     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      |  6421     3
   140       |typedef __clockid_t     clockid_t;                                                               |  6422     3
   141       |#define _CLOCKID_T_DECLARED                                                                      |  6423     3
   142       |#endif                                                                                           |  6424     3
   143       |                                                                                                 |  6425     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             |  6426     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       |  6427     3
   146       |                                                                                                 |  6428     3
   147       |#ifndef _DEV_T_DECLARED                                                                          |  6429     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       |  6430     3
   149       |#define _DEV_T_DECLARED                                                                          |  6431     3
   150       |#endif                                                                                           |  6432     3
   151       |                                                                                                 |  6433     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       |  6434     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         |  6435     3
   154       |#define _FFLAGS_T_DECLARED                                                                       |  6436     3
   155       |#endif                                                                                           |  6437     3
   156       |                                                                                                 |  6438     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 |  6439     3
   158       |                                                                                                 |  6440     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      |  6441     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              |  6442     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              |  6443     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     |  6444     3
   163       |#endif                                                                                           |  6445     3
   164       |                                                                                                 |  6446     3
   165       |#ifndef _GID_T_DECLARED                                                                          |  6447     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           |  6448     3
   167       |#define _GID_T_DECLARED                                                                          |  6449     3
   168       |#endif                                                                                           |  6450     3
   169       |                                                                                                 |  6451     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   125


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      |  6452     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     |  6453     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      |  6454     3
   173       |#endif                                                                                           |  6455     3
   174       |                                                                                                 |  6456     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      |  6457     3
   176       |typedef __uint16_t      in_port_t;                                                               |  6458     3
   177       |#define _IN_PORT_T_DECLARED                                                                      |  6459     3
   178       |#endif                                                                                           |  6460     3
   179       |                                                                                                 |  6461     3
   180       |#ifndef _ID_T_DECLARED                                                                           |  6462     3
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          |  6463     3
   182       |#define _ID_T_DECLARED                                                                           |  6464     3
   183       |#endif                                                                                           |  6465     3
   184       |                                                                                                 |  6466     3
   185       |#ifndef _INO_T_DECLARED                                                                          |  6467     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       |  6468     3
   187       |#define _INO_T_DECLARED                                                                          |  6469     3
   188       |#endif                                                                                           |  6470     3
   189       |                                                                                                 |  6471     3
   190       |#ifndef _KEY_T_DECLARED                                                                          |  6472     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            |  6473     3
   192       |#define _KEY_T_DECLARED                                                                          |  6474     3
   193       |#endif                                                                                           |  6475     3
   194       |                                                                                                 |  6476     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        |  6477     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             |  6478     3
   197       |#define _LWPID_T_DECLARED                                                                        |  6479     3
   198       |#endif                                                                                           |  6480     3
   199       |                                                                                                 |  6481     3
   200       |#ifndef _MODE_T_DECLARED                                                                         |  6482     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        |  6483     3
   202       |#define _MODE_T_DECLARED                                                                         |  6484     3
   203       |#endif                                                                                           |  6485     3
   204       |                                                                                                 |  6486     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        |  6487     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         |  6488     3
   207       |#define _NLINK_T_DECLARED                                                                        |  6489     3
   208       |#endif                                                                                           |  6490     3
   209       |                                                                                                 |  6491     3
   210       |#ifndef _OFF_T_DECLARED                                                                          |  6492     3
   211       |typedef __off_t         off_t;          /* file offset */                                        |  6493     3
   212       |#define _OFF_T_DECLARED                                                                          |  6494     3
   213       |#endif                                                                                           |  6495     3
   214       |                                                                                                 |  6496     3
   215       |#ifndef _PID_T_DECLARED                                                                          |  6497     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         |  6498     3
   217       |#define _PID_T_DECLARED                                                                          |  6499     3
   218       |#endif                                                                                           |  6500     3
   219       |                                                                                                 |  6501     3
   220       |typedef __register_t    register_t;                                                              |  6502     3
   221       |                                                                                                 |  6503     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         |  6504     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   126


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     |  6505     3
   224       |#define _RLIM_T_DECLARED                                                                         |  6506     3
   225       |#endif                                                                                           |  6507     3
   226       |                                                                                                 |  6508     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            |  6509     3
   228       |                                                                                                 |  6510     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         |  6511     3
   230       |typedef __size_t        size_t;                                                                  |  6512     3
   231       |#define _SIZE_T_DECLARED                                                                         |  6513     3
   232       |#endif                                                                                           |  6514     3
   233       |                                                                                                 |  6515     3
   234       |#ifndef _SSIZE_T_DECLARED                                                                        |  6516     3
   235       |typedef __ssize_t       ssize_t;                                                                 |  6517     3
   236       |#define _SSIZE_T_DECLARED                                                                        |  6518     3
   237       |#endif                                                                                           |  6519     3
   238       |                                                                                                 |  6520     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    |  6521     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              |  6522     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    |  6523     3
   242       |#endif                                                                                           |  6524     3
   243       |                                                                                                 |  6525     3
   244       |#ifndef _TIME_T_DECLARED                                                                         |  6526     3
   245       |typedef __time_t        time_t;                                                                  |  6527     3
   246       |#define _TIME_T_DECLARED                                                                         |  6528     3
   247       |#endif                                                                                           |  6529     3
   248       |                                                                                                 |  6530     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        |  6531     3
   250       |typedef __timer_t       timer_t;                                                                 |  6532     3
   251       |#define _TIMER_T_DECLARED                                                                        |  6533     3
   252       |#endif                                                                                           |  6534     3
   253       |                                                                                                 |  6535     3
   254       |typedef __u_register_t  u_register_t;                                                            |  6536     3
   255       |                                                                                                 |  6537     3
   256       |#ifndef _UID_T_DECLARED                                                                          |  6538     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            |  6539     3
   258       |#define _UID_T_DECLARED                                                                          |  6540     3
   259       |#endif                                                                                           |  6541     3
   260       |                                                                                                 |  6542     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     |  6543     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            |  6544     3
   263       |#define _USECONDS_T_DECLARED                                                                     |  6545     3
   264       |#endif                                                                                           |  6546     3
   265       |                                                                                                 |  6547     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             |  6548     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            |  6549     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              |  6550     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             |  6551     3
   270       |typedef __vm_size_t     vm_size_t;                                                               |  6552     3
   271       |                                                                                                 |  6553     3
   272       |#ifdef _KERNEL                                                                                   |  6554     3
   273       |typedef int             boolean_t;                                                               |  6555     3
   274       |typedef __cpumask_t     cpumask_t;                                                               |  6556     3
   275       |typedef __intfptr_t     intfptr_t;                                                               |  6557     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   127


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   276       |                                                                                                 |  6558     3
   277       |/*-                                                                                              |  6559     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      |  6560     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           |  6561     3
   280       | * compatibility is essential.  Least-width types should be used even less                       |  6562     3
   281       | * since they provide smaller benefits.                                                          |  6563     3
   282       | * XXX should be MD.                                                                             |  6564     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     |  6565     3
   284       | */                                                                                              |  6566     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 |  6567     3
   286       |                                                                                                 |  6568     3
   287       |typedef __uintfptr_t    uintfptr_t;                                                              |  6569     3
   288       |typedef __uint64_t      uoff_t;                                                                  |  6570     3
   289       |typedef struct vm_page  *vm_page_t;                                                              |  6571     3
   290       |                                                                                                 |  6572     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            |  6573     3
   292       |                                                                                                 |  6574     3
   293       |#endif /* !_KERNEL */                                                                            |  6575     3
   294       |                                                                                                 |  6576     3
   295       |/*                                                                                               |  6577     3
   296       | * The following are all things that really shouldn't exist in this header,                      |  6578     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          |  6579     3
   298       | */                                                                                              |  6580     3
   299       |#if __BSD_VISIBLE                                                                                |  6581     3
   300       |                                                                                                 |  6582     3
   301       |#include <sys/select.h>                                                                          |  6583     3
   302       |                                                                                                 |  6584     3
   303       |#ifndef _KERNEL                                                                                  |  6585     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    |  6586     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    |  6587     3
   306       |#endif /* !_KERNEL */                                                                            |  6588     3
   307       |                                                                                                 |  6589     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    |  6590     3
   309       |                                                                                                 |  6591     3
   310       |/*                                                                                               |  6592     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             |  6593     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             |  6594     3
   313       | * 64-bit off_t's.                                                                               |  6595     3
   314       | */                                                                                              |  6596     3
   315       |#ifndef _KERNEL                                                                                  |  6597     3
   316       |__BEGIN_DECLS                                                                                    |  6598     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      |  6599     3
   318       |#define _FTRUNCATE_DECLARED                                                                      |  6600     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  6601     3
   320       |int      ftruncate(int, off_t);                                                                  |  6602     3
   321       |#endif                                                                                           |  6603     3
   322       |#ifndef _LSEEK_DECLARED                                                                          |  6604     3
   323       |#define _LSEEK_DECLARED                                                                          |  6605     3
   324       |off_t    lseek(int, off_t, int);                                                                 |  6606     3
   325       |#endif                                                                                           |  6607     3
   326       |#ifndef _MMAP_DECLARED                                                                           |  6608     3
   327       |#define _MMAP_DECLARED                                                                           |  6609     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             |  6610     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   128


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   329       |#endif                                                                                           |  6611     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       |  6612     3
   331       |#define _TRUNCATE_DECLARED                                                                       |  6613     3
   332       |int      truncate(const char *, off_t);                                                          |  6614     3
   333       |#endif                                                                                           |  6615     3
   334       |__END_DECLS                                                                                      |  6616     3
   335       |#endif /* !_KERNEL */                                                                            |  6617     3
   336       |                                                                                                 |  6618     3
   337       |#endif /* __BSD_VISIBLE */                                                                       |  6619     3
   338       |                                                                                                 |  6620     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      |  6621     3
   340       |#pragma pack(reset)                                                                              |  6622     3
    40       |#include <sys/timespec.h>                                                                        |  6623    17
     1       |/* release 2.25.00 */                                                                            |  6624    12
     2       |#pragma pack()                                                                                   |  6625    12
     3       |/*-                                                                                              |  6626    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                |  6627    12
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6628    12
     6       | *                                                                                               |  6629    12
     7       | * Redistribution and use in source and binary forms, with or without                            |  6630    12
     8       | * modification, are permitted provided that the following conditions                            |  6631    12
     9       | * are met:                                                                                      |  6632    12
    10       | * 1. Redistributions of source code must retain the above copyright                             |  6633    12
    11       | *    notice, this list of conditions and the following disclaimer.                              |  6634    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6635    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  6636    12
    14       | *    documentation and/or other materials provided with the distribution.                       |  6637    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       |  6638    12
    16       | *    may be used to endorse or promote products derived from this software                      |  6639    12
    17       | *    without specific prior written permission.                                                 |  6640    12
    18       | *                                                                                               |  6641    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6642    12
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6643    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6644    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6645    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6646    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6647    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6648    12
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6649    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6650    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6651    12
    29       | * SUCH DAMAGE.                                                                                  |  6652    12
    30       | *                                                                                               |  6653    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    |  6654    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          |  6655    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     |  6656    12
    34       | */                                                                                              |  6657    12
    35       |                                                                                                 |  6658    12
    36       |/*                                                                                               |  6659    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  |  6660    12
    38       | */                                                                                              |  6661    12
    39       |                                                                                                 |  6662    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         |  6663    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   129


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    41       |#define _SYS_TIMESPEC_H_                                                                         |  6664    12
    42       |                                                                                                 |  6665    12
    43       |#include <sys/_types.h>                                                                          |  6666    12
    44       |                                                                                                 |  6667    12
    45       |#ifndef _TIME_T_DECLARED                                                                         |  6668    12
    46       |typedef __time_t        time_t;                                                                  |  6669    12
    47       |#define _TIME_T_DECLARED                                                                         |  6670    12
    48       |#endif                                                                                           |  6671    12
    49       |                                                                                                 |  6672    12
    50       |struct timespec {                                                                                |  6673    12
    51       |        time_t  tv_sec;         /* seconds */                                                    |  6674    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            |  6675    12
    53       |};                                                                                               |  6676    12
    54       |                                                                                                 |  6677    12
    55       |#if __BSD_VISIBLE                                                                                |  6678    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        |  6679    12
    57       |        do {                                                            \                        |  6680    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        |  6681    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        |  6682    12
    60       |        } while (0)                                                                              |  6683    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        |  6684    12
    62       |        do {                                                            \                        |  6685    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        |  6686    12
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        |  6687    12
    65       |        } while (0)                                                                              |  6688    12
    66       |                                                                                                 |  6689    12
    67       |#endif /* __BSD_VISIBLE */                                                                       |  6690    12
    68       |                                                                                                 |  6691    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    |  6692    12
    70       |#pragma pack(reset)                                                                              |  6693    12
    41       |                                                                                                 |  6694    17
    42       |struct timezone {                                                                                |  6695    17
    43       |        int     tz_minuteswest; /* minutes west of Greenwich */                                  |  6696    17
    44       |        int     tz_dsttime;     /* type of dst correction */                                     |  6697    17
    45       |};                                                                                               |  6698    17
    46       |#define DST_NONE        0       /* not on dst */                                                 |  6699    17
    47       |#define DST_USA         1       /* USA style dst */                                              |  6700    17
    48       |#define DST_AUST        2       /* Australian style dst */                                       |  6701    17
    49       |#define DST_WET         3       /* Western European dst */                                       |  6702    17
    50       |#define DST_MET         4       /* Middle European dst */                                        |  6703    17
    51       |#define DST_EET         5       /* Eastern European dst */                                       |  6704    17
    52       |#define DST_CAN         6       /* Canada */                                                     |  6705    17
    53       |                                                                                                 |  6706    17
    54       |#if __BSD_VISIBLE                                                                                |  6707    17
    55       |struct bintime {                                                                                 |  6708    17
    55       +struct bintime {                                                                                 +  6708    17
    56       |        time_t  sec;                                                                             |  6709    17
    57       |        uint64_t frac;                                                                           |  6710    17
    58       |};                                                                                               |  6711    17
    59       |                                                                                                 |  6712    17
    60       |static __inline void                                                                             |  6713    17
    60       +static __inline__ void                                                                           +  6713    17
    61       |bintime_addx(struct bintime *bt, uint64_t x)                                                     |  6714    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   130


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    62       |{                                                                                                |  6715    17
    63       |        uint64_t u;                                                                              |  6716    17
    64       |                                                                                                 |  6717    17
    65       |        u = bt->frac;                                                                            |  6718    17
    66       |        bt->frac += x;                                                                           |  6719    17
    67       |        if (u > bt->frac)                                                                        |  6720    17
    68       |                bt->sec++;                                                                       |  6721    17
    69       |}                                                                                                |  6722    17
    70       |                                                                                                 |  6723    17
    71       |static __inline void                                                                             |  6724    17
    71       +static __inline__ void                                                                           +  6724    17
    72       |bintime_add(struct bintime *bt, const struct bintime *bt2)                                       |  6725    17
    73       |{                                                                                                |  6726    17
    74       |        uint64_t u;                                                                              |  6727    17
    75       |                                                                                                 |  6728    17
    76       |        u = bt->frac;                                                                            |  6729    17
    77       |        bt->frac += bt2->frac;                                                                   |  6730    17
    78       |        if (u > bt->frac)                                                                        |  6731    17
    79       |                bt->sec++;                                                                       |  6732    17
    80       |        bt->sec += bt2->sec;                                                                     |  6733    17
    81       |}                                                                                                |  6734    17
    82       |                                                                                                 |  6735    17
    83       |static __inline void                                                                             |  6736    17
    83       +static __inline__ void                                                                           +  6736    17
    84       |bintime_sub(struct bintime *bt, const struct bintime *bt2)                                       |  6737    17
    85       |{                                                                                                |  6738    17
    86       |        uint64_t u;                                                                              |  6739    17
    87       |                                                                                                 |  6740    17
    88       |        u = bt->frac;                                                                            |  6741    17
    89       |        bt->frac -= bt2->frac;                                                                   |  6742    17
    90       |        if (u < bt->frac)                                                                        |  6743    17
    91       |                bt->sec--;                                                                       |  6744    17
    92       |        bt->sec -= bt2->sec;                                                                     |  6745    17
    93       |}                                                                                                |  6746    17
    94       |                                                                                                 |  6747    17
    95       |/*-                                                                                              |  6748    17
    96       | * Background information:                                                                       |  6749    17
    97       | *                                                                                               |  6750    17
    98       | * When converting between timestamps on parallel timescales of differing                        |  6751    17
    99       | * resolutions it is historical and scientific practice to round down rather                     |  6752    17
   100       | * than doing 4/5 rounding.                                                                      |  6753    17
   101       | *                                                                                               |  6754    17
   102       | *   The date changes at midnight, not at noon.                                                  |  6755    17
   103       | *                                                                                               |  6756    17
   104       | *   Even at 15:59:59.999999999 it's not four'o'clock.                                           |  6757    17
   105       | *                                                                                               |  6758    17
   106       | *   time_second ticks after N.999999999 not after N.4999999999                                  |  6759    17
   107       | */                                                                                              |  6760    17
   108       |                                                                                                 |  6761    17
   109       |static __inline void                                                                             |  6762    17
   109       +static __inline__ void                                                                           +  6762    17
   110       |bintime2timespec(const struct bintime *bt, struct timespec *ts)                                  |  6763    17
   111       |{                                                                                                |  6764    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   131


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   112       |                                                                                                 |  6765    17
   113       |        ts->tv_sec = bt->sec;                                                                    |  6766    17
   114       |        ts->tv_nsec = ((uint64_t)1000000000 * (uint32_t)(bt->frac >> 32)) >> 32;                 |  6767    17
   115       |}                                                                                                |  6768    17
   116       |                                                                                                 |  6769    17
   117       |static __inline void                                                                             |  6770    17
   117       +static __inline__ void                                                                           +  6770    17
   118       |timespec2bintime(const struct timespec *ts, struct bintime *bt)                                  |  6771    17
   119       |{                                                                                                |  6772    17
   120       |                                                                                                 |  6773    17
   121       |        bt->sec = ts->tv_sec;                                                                    |  6774    17
   122       |        /* 18446744073 = int(2^64 / 1000000000) */                                               |  6775    17
   123       |        bt->frac = ts->tv_nsec * (uint64_t)18446744073LL;                                        |  6776    17
   124       |}                                                                                                |  6777    17
   125       |                                                                                                 |  6778    17
   126       |static __inline void                                                                             |  6779    17
   126       +static __inline__ void                                                                           +  6779    17
   127       |bintime2timeval(const struct bintime *bt, struct timeval *tv)                                    |  6780    17
   128       |{                                                                                                |  6781    17
   129       |                                                                                                 |  6782    17
   130       |        tv->tv_sec = bt->sec;                                                                    |  6783    17
   131       |        tv->tv_usec = ((uint64_t)1000000 * (uint32_t)(bt->frac >> 32)) >> 32;                    |  6784    17
   132       |}                                                                                                |  6785    17
   133       |                                                                                                 |  6786    17
   134       |static __inline void                                                                             |  6787    17
   134       +static __inline__ void                                                                           +  6787    17
   135       |timeval2bintime(const struct timeval *tv, struct bintime *bt)                                    |  6788    17
   136       |{                                                                                                |  6789    17
   137       |                                                                                                 |  6790    17
   138       |        bt->sec = tv->tv_sec;                                                                    |  6791    17
   139       |        /* 18446744073709 = int(2^64 / 1000000) */                                               |  6792    17
   140       |        bt->frac = tv->tv_usec * (uint64_t)18446744073709LL;                                     |  6793    17
   141       |}                                                                                                |  6794    17
   142       |#endif /* __BSD_VISIBLE */                                                                       |  6795    17
   143       |                                                                                                 |  6796    17
   144       |#ifdef _KERNEL                                                                                   |  6797    17
   145       |                                                                                                 |  6798    17
   146       |/* Operations on timespecs */                                                                    |  6799    17
   147       |#define timespecclear(tvp)      ((tvp)->tv_sec = (tvp)->tv_nsec = 0)                             |  6800    17
   148       |#define timespecisset(tvp)      ((tvp)->tv_sec || (tvp)->tv_nsec)                                |  6801    17
   149       |#define timespeccmp(tvp, uvp, cmp)                                      \                        |  6802    17
   150       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        |  6803    17
   151       |            ((tvp)->tv_nsec cmp (uvp)->tv_nsec) :                       \                        |  6804    17
   152       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   |  6805    17
   153       |#define timespecadd(vvp, uvp)                                           \                        |  6806    17
   154       |        do {                                                            \                        |  6807    17
   155       |                (vvp)->tv_sec += (uvp)->tv_sec;                         \                        |  6808    17
   156       |                (vvp)->tv_nsec += (uvp)->tv_nsec;                       \                        |  6809    17
   157       |                if ((vvp)->tv_nsec >= 1000000000) {                     \                        |  6810    17
   158       |                        (vvp)->tv_sec++;                                \                        |  6811    17
   159       |                        (vvp)->tv_nsec -= 1000000000;                   \                        |  6812    17
   160       |                }                                                       \                        |  6813    17
   161       |        } while (0)                                                                              |  6814    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   132


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   162       |#define timespecsub(vvp, uvp)                                           \                        |  6815    17
   163       |        do {                                                            \                        |  6816    17
   164       |                (vvp)->tv_sec -= (uvp)->tv_sec;                         \                        |  6817    17
   165       |                (vvp)->tv_nsec -= (uvp)->tv_nsec;                       \                        |  6818    17
   166       |                if ((vvp)->tv_nsec < 0) {                               \                        |  6819    17
   167       |                        (vvp)->tv_sec--;                                \                        |  6820    17
   168       |                        (vvp)->tv_nsec += 1000000000;                   \                        |  6821    17
   169       |                }                                                       \                        |  6822    17
   170       |        } while (0)                                                                              |  6823    17
   171       |                                                                                                 |  6824    17
   172       |/* Operations on timevals. */                                                                    |  6825    17
   173       |                                                                                                 |  6826    17
   174       |#define timevalclear(tvp)               ((tvp)->tv_sec = (tvp)->tv_usec = 0)                     |  6827    17
   175       |#define timevalisset(tvp)               ((tvp)->tv_sec || (tvp)->tv_usec)                        |  6828    17
   176       |#define timevalcmp(tvp, uvp, cmp)                                       \                        |  6829    17
   177       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        |  6830    17
   178       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        |  6831    17
   179       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   |  6832    17
   180       |                                                                                                 |  6833    17
   181       |/* timevaladd and timevalsub are not inlined */                                                  |  6834    17
   182       |                                                                                                 |  6835    17
   183       |#endif /* _KERNEL */                                                                             |  6836    17
   184       |                                                                                                 |  6837    17
   185       |#ifndef _KERNEL                 /* NetBSD/OpenBSD compatible interfaces */                       |  6838    17
   186       |                                                                                                 |  6839    17
   187       |#define timerclear(tvp)         ((tvp)->tv_sec = (tvp)->tv_usec = 0)                             |  6840    17
   188       |#define timerisset(tvp)         ((tvp)->tv_sec || (tvp)->tv_usec)                                |  6841    17
   189       |#define timercmp(tvp, uvp, cmp)                                 \                                |  6842    17
   190       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        |  6843    17
   191       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        |  6844    17
   192       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   |  6845    17
   193       |#define timeradd(tvp, uvp, vvp)                                         \                        |  6846    17
   194       |        do {                                                            \                        |  6847    17
   195       |                (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec;          \                        |  6848    17
   196       |                (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec;       \                        |  6849    17
   197       |                if ((vvp)->tv_usec >= 1000000) {                        \                        |  6850    17
   198       |                        (vvp)->tv_sec++;                                \                        |  6851    17
   199       |                        (vvp)->tv_usec -= 1000000;                      \                        |  6852    17
   200       |                }                                                       \                        |  6853    17
   201       |        } while (0)                                                                              |  6854    17
   202       |#define timersub(tvp, uvp, vvp)                                         \                        |  6855    17
   203       |        do {                                                            \                        |  6856    17
   204       |                (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec;          \                        |  6857    17
   205       |                (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec;       \                        |  6858    17
   206       |                if ((vvp)->tv_usec < 0) {                               \                        |  6859    17
   207       |                        (vvp)->tv_sec--;                                \                        |  6860    17
   208       |                        (vvp)->tv_usec += 1000000;                      \                        |  6861    17
   209       |                }                                                       \                        |  6862    17
   210       |        } while (0)                                                                              |  6863    17
   211       |#endif                                                                                           |  6864    17
   212       |                                                                                                 |  6865    17
   213       |/*                                                                                               |  6866    17
   214       | * Names of the interval timers, and structure                                                   |  6867    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   133


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   215       | * defining a timer setting.                                                                     |  6868    17
   216       | */                                                                                              |  6869    17
   217       |#define ITIMER_REAL     0                                                                        |  6870    17
   218       |#define ITIMER_VIRTUAL  1                                                                        |  6871    17
   219       |#define ITIMER_PROF     2                                                                        |  6872    17
   220       |                                                                                                 |  6873    17
   221       |struct itimerval {                                                                               |  6874    17
   222       |        struct  timeval it_interval;    /* timer interval */                                     |  6875    17
   223       |        struct  timeval it_value;       /* current value */                                      |  6876    17
   224       |};                                                                                               |  6877    17
   225       |                                                                                                 |  6878    17
   226       |/*                                                                                               |  6879    17
   227       | * Getkerninfo clock information structure                                                       |  6880    17
   228       | */                                                                                              |  6881    17
   229       |struct clockinfo {                                                                               |  6882    17
   230       |        int     hz;             /* clock frequency */                                            |  6883    17
   231       |        int     tick;           /* micro-seconds per hz tick */                                  |  6884    17
   232       |        int     spare;                                                                           |  6885    17
   233       |        int     stathz;         /* statistics clock frequency */                                 |  6886    17
   234       |        int     profhz;         /* profiling clock frequency */                                  |  6887    17
   235       |};                                                                                               |  6888    17
   236       |                                                                                                 |  6889    17
   237       |/* These macros are also in time.h. */                                                           |  6890    17
   238       |#ifndef CLOCK_REALTIME                                                                           |  6891    17
   239       |#define CLOCK_REALTIME  0                                                                        |  6892    17
   240       |#if 0                                                                                            |  6893    17
   241       |  /* only CLOCK_REALTIME exists in this implementation */                                        |  6894    17
   242       |#define CLOCK_VIRTUAL   1                                                                        |  6895    17
   243       |#define CLOCK_PROF      2                                                                        |  6896    17
   244       |#define CLOCK_MONOTONIC 4                                                                        |  6897    17
   245       |#endif                                                                                           |  6898    17
   246       |#endif                                                                                           |  6899    17
   247       |                                                                                                 |  6900    17
   248       |#ifndef TIMER_ABSTIME                                                                            |  6901    17
   249       |#define TIMER_RELTIME   0x0     /* relative timer */                                             |  6902    17
   250       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             |  6903    17
   251       |#endif                                                                                           |  6904    17
   252       |                                                                                                 |  6905    17
   253       |#ifdef _KERNEL                                                                                   |  6906    17
   254       |extern time_t   time_second;                                                                     |  6907    17
   255       |extern time_t   time_uptime;                                                                     |  6908    17
   256       |extern struct timeval boottime;                                                                  |  6909    17
   257       |                                                                                                 |  6910    17
   258       |/*                                                                                               |  6911    17
   259       | * Functions for looking at our clock: [get]{bin,nano,micro}[up]time()                           |  6912    17
   260       | *                                                                                               |  6913    17
   261       | * Functions without the "get" prefix returns the best timestamp                                 |  6914    17
   262       | * we can produce in the given format.                                                           |  6915    17
   263       | *                                                                                               |  6916    17
   264       | * "bin"   == struct bintime  == seconds + 64 bit fraction of seconds.                           |  6917    17
   265       | * "nano"  == struct timespec == seconds + nanoseconds.                                          |  6918    17
   266       | * "micro" == struct timeval  == seconds + microseconds.                                         |  6919    17
   267       | *                                                                                               |  6920    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   134


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   268       | * Functions containing "up" returns time relative to boot and                                   |  6921    17
   269       | * should be used for calculating time intervals.                                                |  6922    17
   270       | *                                                                                               |  6923    17
   271       | * Functions without "up" returns GMT time.                                                      |  6924    17
   272       | *                                                                                               |  6925    17
   273       | * Functions with the "get" prefix returns a less precise result                                 |  6926    17
   274       | * much faster than the functions without "get" prefix and should                                |  6927    17
   275       | * be used where a precision of 10 msec is acceptable or where                                   |  6928    17
   276       | * performance is priority. (NB: "precision", _not_ "resolution" !)                              |  6929    17
   277       | *                                                                                               |  6930    17
   278       | */                                                                                              |  6931    17
   279       |                                                                                                 |  6932    17
   280       |void    binuptime(struct bintime *bt);                                                           |  6933    17
   281       |void    nanouptime(struct timespec *tsp);                                                        |  6934    17
   282       |void    microuptime(struct timeval *tvp);                                                        |  6935    17
   283       |                                                                                                 |  6936    17
   284       |void    bintime(struct bintime *bt);                                                             |  6937    17
   285       |void    nanotime(struct timespec *tsp);                                                          |  6938    17
   286       |void    microtime(struct timeval *tvp);                                                          |  6939    17
   287       |                                                                                                 |  6940    17
   288       |void    getbinuptime(struct bintime *bt);                                                        |  6941    17
   289       |void    getnanouptime(struct timespec *tsp);                                                     |  6942    17
   290       |void    getmicrouptime(struct timeval *tvp);                                                     |  6943    17
   291       |                                                                                                 |  6944    17
   292       |void    getbintime(struct bintime *bt);                                                          |  6945    17
   293       |void    getnanotime(struct timespec *tsp);                                                       |  6946    17
   294       |void    getmicrotime(struct timeval *tvp);                                                       |  6947    17
   295       |                                                                                                 |  6948    17
   296       |/* Other functions */                                                                            |  6949    17
   297       |int     itimerdecr(struct itimerval *itp, int usec);                                             |  6950    17
   298       |int     itimerfix(struct timeval *tv);                                                           |  6951    17
   299       |int     ppsratecheck(struct timeval *, int *, int);                                              |  6952    17
   300       |int     ratecheck(struct timeval *, const struct timeval *);                                     |  6953    17
   301       |void    timevaladd(struct timeval *t1, const struct timeval *t2);                                |  6954    17
   302       |void    timevalsub(struct timeval *t1, const struct timeval *t2);                                |  6955    17
   303       |int     tvtohz(struct timeval *tv);                                                              |  6956    17
   304       |#else /* !_KERNEL */                                                                             |  6957    17
   305       |#include <time.h>                                                                                |  6958    17
     1       |/* release 2.25.00 */                                                                            |  6959    16
     2       |#pragma pack()                                                                                   |  6960    16
     3       |/*                                                                                               |  6961    16
     4       | * Copyright (c) 1989, 1993                                                                      |  6962    16
     5       | *      The Regents of the University of California.  All rights reserved.                       |  6963    16
     6       | * (c) UNIX System Laboratories, Inc.                                                            |  6964    16
     7       | * All or some portions of this file are derived from material licensed                          |  6965    16
     8       | * to the University of California by American Telephone and Telegraph                           |  6966    16
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          |  6967    16
    10       | * the permission of UNIX System Laboratories, Inc.                                              |  6968    16
    11       | *                                                                                               |  6969    16
    12       | * Redistribution and use in source and binary forms, with or without                            |  6970    16
    13       | * modification, are permitted provided that the following conditions                            |  6971    16
    14       | * are met:                                                                                      |  6972    16
    15       | * 1. Redistributions of source code must retain the above copyright                             |  6973    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   135


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    16       | *    notice, this list of conditions and the following disclaimer.                              |  6974    16
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          |  6975    16
    18       | *    notice, this list of conditions and the following disclaimer in the                        |  6976    16
    19       | *    documentation and/or other materials provided with the distribution.                       |  6977    16
    20       | * 3. All advertising materials mentioning features or use of this software                      |  6978    16
    21       | *    must display the following acknowledgement:                                                |  6979    16
    22       | *      This product includes software developed by the University of                            |  6980    16
    23       | *      California, Berkeley and its contributors.                                               |  6981    16
    24       | * 4. Neither the name of the University nor the names of its contributors                       |  6982    16
    25       | *    may be used to endorse or promote products derived from this software                      |  6983    16
    26       | *    without specific prior written permission.                                                 |  6984    16
    27       | *                                                                                               |  6985    16
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  6986    16
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  6987    16
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  6988    16
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  6989    16
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  6990    16
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  6991    16
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  6992    16
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  6993    16
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  6994    16
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  6995    16
    38       | * SUCH DAMAGE.                                                                                  |  6996    16
    39       | *                                                                                               |  6997    16
    40       | *      @(#)time.h      8.3 (Berkeley) 1/21/94                                                   |  6998    16
    41       | */                                                                                              |  6999    16
    42       |                                                                                                 |  7000    16
    43       |/*                                                                                               |  7001    16
    44       | */                                                                                              |  7002    16
    45       |                                                                                                 |  7003    16
    46       |#ifndef _TIME_H_                                                                                 |  7004    16
    47       |#define _TIME_H_                                                                                 |  7005    16
    48       |                                                                                                 |  7006    16
    49       |#include <sys/cdefs.h>                                                                           |  7007    16
    50       |#include <sys/_null.h>                                                                           |  7008    16
    51       |#include <sys/_types.h>                                                                          |  7009    16
    52       |                                                                                                 |  7010    16
    53       |#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE                             |  7011    16
    54       |/*                                                                                               |  7012    16
    55       | * Frequency of the clock ticks reported by times().  Deprecated - use                           |  7013    16
    56       | * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)                                      |  7014    16
    57       | *                                                                                               |  7015    16
    58       | */                                                                                              |  7016    16
    59       |#define CLK_TCK         10000                                                                    |  7017    16
    60       |#endif                                                                                           |  7018    16
    61       |                                                                                                 |  7019    16
    62       |/* Frequency of the clock ticks reported by clock().  */                                         |  7020    16
    63       |#define CLOCKS_PER_SEC  128                                                                      |  7021    16
    64       |                                                                                                 |  7022    16
    65       |#ifndef _CLOCK_T_DECLARED                                                                        |  7023    16
    66       |typedef __clock_t       clock_t;                                                                 |  7024    16
    67       |#define _CLOCK_T_DECLARED                                                                        |  7025    16
    68       |#endif                                                                                           |  7026    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   136


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    69       |                                                                                                 |  7027    16
    70       |#ifndef _TIME_T_DECLARED                                                                         |  7028    16
    71       |typedef __time_t        time_t;                                                                  |  7029    16
    72       |#define _TIME_T_DECLARED                                                                         |  7030    16
    73       |#endif                                                                                           |  7031    16
    74       |                                                                                                 |  7032    16
    75       |#ifndef _SIZE_T_DECLARED                                                                         |  7033    16
    76       |typedef __size_t        size_t;                                                                  |  7034    16
    77       |#define _SIZE_T_DECLARED                                                                         |  7035    16
    78       |#endif                                                                                           |  7036    16
    79       |                                                                                                 |  7037    16
    80       |#if __POSIX_VISIBLE >= 199309                                                                    |  7038    16
    81       |/*                                                                                               |  7039    16
    82       | * New in POSIX 1003.1b-1993.                                                                    |  7040    16
    83       | */                                                                                              |  7041    16
    84       |#ifndef _CLOCKID_T_DECLARED                                                                      |  7042    16
    85       |typedef __clockid_t     clockid_t;                                                               |  7043    16
    86       |#define _CLOCKID_T_DECLARED                                                                      |  7044    16
    87       |#endif                                                                                           |  7045    16
    88       |                                                                                                 |  7046    16
    89       |#ifndef _TIMER_T_DECLARED                                                                        |  7047    16
    90       |typedef __timer_t       timer_t;                                                                 |  7048    16
    91       |#define _TIMER_T_DECLARED                                                                        |  7049    16
    92       |#endif                                                                                           |  7050    16
    93       |                                                                                                 |  7051    16
    94       |#include <sys/timespec.h>                                                                        |  7052    16
    95       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  7053    16
    96       |                                                                                                 |  7054    16
    97       |/* These macros are also in sys/time.h. */                                                       |  7055    16
    98       |#if !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112                                        |  7056    16
    99       |#define CLOCK_REALTIME  0                                                                        |  7057    16
   100       |#if 0                                                                                            |  7058    16
   101       |  /* only CLOCK_REALTIME exists in this implementation */                                        |  7059    16
   102       |#ifdef __BSD_VISIBLE                                                                             |  7060    16
   103       |#define CLOCK_VIRTUAL   1                                                                        |  7061    16
   104       |#define CLOCK_PROF      2                                                                        |  7062    16
   105       |#endif                                                                                           |  7063    16
   106       |#define CLOCK_MONOTONIC 4                                                                        |  7064    16
   107       |#endif /* 0 */                                                                                   |  7065    16
   108       |#endif /* !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112 */                               |  7066    16
   109       |                                                                                                 |  7067    16
   110       |#if !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112                                         |  7068    16
   111       |#if __BSD_VISIBLE                                                                                |  7069    16
   112       |#define TIMER_RELTIME   0x0     /* relative timer */                                             |  7070    16
   113       |#endif                                                                                           |  7071    16
   114       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             |  7072    16
   115       |#endif /* !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112 */                                |  7073    16
   116       |                                                                                                 |  7074    16
   117       |struct tm {                                                                                      |  7075    16
   118       |        int     tm_sec;         /* seconds after the minute [0-60] */                            |  7076    16
   119       |        int     tm_min;         /* minutes after the hour [0-59] */                              |  7077    16
   120       |        int     tm_hour;        /* hours since midnight [0-23] */                                |  7078    16
   121       |        int     tm_mday;        /* day of the month [1-31] */                                    |  7079    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   137


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   122       |        int     tm_mon;         /* months since January [0-11] */                                |  7080    16
   123       |        int     tm_year;        /* years since 1900 */                                           |  7081    16
   124       |        int     tm_wday;        /* days since Sunday [0-6] */                                    |  7082    16
   125       |        int     tm_yday;        /* days since January 1 [0-365] */                               |  7083    16
   126       |        int     tm_isdst;       /* Daylight Savings Time flag */                                 |  7084    16
   127       |        long    tm_gmtoff;      /* offset from UTC in seconds */                                 |  7085    16
   128       |        char    *tm_zone;       /* timezone abbreviation */                                      |  7086    16
   129       |};                                                                                               |  7087    16
   130       |                                                                                                 |  7088    16
   131       |#if __POSIX_VISIBLE                                                                              |  7089    16
   132       |extern char *tzname[];                                                                           |  7090    16
   133       |#endif                                                                                           |  7091    16
   134       |                                                                                                 |  7092    16
   135       |__BEGIN_DECLS                                                                                    |  7093    16
   136       |char *asctime(const struct tm *);                                                                |  7094    16
   137       |clock_t clock(void);                                                                             |  7095    16
   138       |char *ctime(const time_t *);                                                                     |  7096    16
   139       |double difftime(time_t, time_t);                                                                 |  7097    16
   140       |/* XXX missing: getdate() */                                                                     |  7098    16
   141       |struct tm *gmtime(const time_t *);                                                               |  7099    16
   142       |#pragma map (localtime, "LC@LTIME")                                                              |  7100    16
   143       |struct tm *localtime(const time_t *);                                                            |  7101    16
   144       |time_t mktime(struct tm *);                                                                      |  7102    16
   145       |size_t strftime(char * __restrict, size_t, const char * __restrict,                              |  7103    16
   146       |    const struct tm * __restrict);                                                               |  7104    16
   147       |time_t time(time_t *);                                                                           |  7105    16
   148       |                                                                                                 |  7106    16
   149       |#if __POSIX_VISIBLE                                                                              |  7107    16
   150       |void tzset(void);                                                                                |  7108    16
   151       |#endif                                                                                           |  7109    16
   152       |                                                                                                 |  7110    16
   153       |#if __POSIX_VISIBLE >= 199309                                                                    |  7111    16
   154       |#pragma map(clock_getres, "@@CLKRES")                                                            |  7112    16
   155       |int clock_getres(clockid_t, struct timespec *);                                                  |  7113    16
   156       |#pragma map(clock_gettime, "@@CLKGET")                                                           |  7114    16
   157       |int clock_gettime(clockid_t, struct timespec *);                                                 |  7115    16
   158       |#pragma map(clock_settime, "@@CLKSET")                                                           |  7116    16
   159       |int clock_settime(clockid_t, const struct timespec *);                                           |  7117    16
   160       |#pragma map(nanosleep,"@@NNOSLP")                                                                |  7118    16
   161       |int nanosleep(const struct timespec *, struct timespec *);                                       |  7119    16
   162       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           |  7120    16
   163       |                                                                                                 |  7121    16
   164       |#if __POSIX_VISIBLE >= 199506                                                                    |  7122    16
   165       |#pragma map(asctime_r, "@@ASCT@R")                                                               |  7123    16
   166       |char *asctime_r(const struct tm *, char *);                                                      |  7124    16
   167       |#pragma map(ctime_r, "@@CTME@R")                                                                 |  7125    16
   168       |char *ctime_r(const time_t *, char *);                                                           |  7126    16
   169       |#pragma map(gmtime_r, "@@GMTM@R")                                                                |  7127    16
   170       |struct tm *gmtime_r(const time_t *, struct tm *);                                                |  7128    16
   171       |#pragma map(localtime_r, "@@LCLT@R")                                                             |  7129    16
   172       |struct tm *localtime_r(const time_t *, struct tm *);                                             |  7130    16
   173       |#endif                                                                                           |  7131    16
   174       |                                                                                                 |  7132    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   138


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   175       |#if __XSI_VISIBLE                                                                                |  7133    16
   176       |char *strptime(const char * __restrict, const char * __restrict,                                 |  7134    16
   177       |    struct tm * __restrict);                                                                     |  7135    16
   178       |#endif                                                                                           |  7136    16
   179       |                                                                                                 |  7137    16
   180       |#if __BSD_VISIBLE                                                                                |  7138    16
   181       |char *timezone(int, int);       /* XXX XSI conflict */                                           |  7139    16
   182       |void tzsetwall(void);                                                                            |  7140    16
   183       |#pragma map (timelocal, "TIMELC@L")                                                              |  7141    16
   184       |time_t timelocal(struct tm * const);                                                             |  7142    16
   185       |time_t timegm(struct tm * const);                                                                |  7143    16
   186       |#endif /* __BSD_VISIBLE */                                                                       |  7144    16
   187       |__END_DECLS                                                                                      |  7145    16
   188       |                                                                                                 |  7146    16
   189       |#endif /* !_TIME_H_ */                                                                           |  7147    16
   190       |#pragma pack(reset)                                                                              |  7148    16
   306       |                                                                                                 |  7149    17
   307       |#include <sys/cdefs.h>                                                                           |  7150    17
     1       |/* release 2.25.00 */                                                                            |  7151     4
     2       |#pragma pack()                                                                                   |  7152     4
     3       |/*                                                                                               |  7153     4
     4       | * Copyright (c) 1991, 1993                                                                      |  7154     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  7155     4
     6       | *                                                                                               |  7156     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  7157     4
     8       | * Berkeley Software Design, Inc.                                                                |  7158     4
     9       | *                                                                                               |  7159     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  7160     4
    11       | * modification, are permitted provided that the following conditions                            |  7161     4
    12       | * are met:                                                                                      |  7162     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  7163     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  7164     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  7165     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  7166     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  7167     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  7168     4
    19       | *    must display the following acknowledgement:                                                |  7169     4
    20       | *      This product includes software developed by the University of                            |  7170     4
    21       | *      California, Berkeley and its contributors.                                               |  7171     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  7172     4
    23       | *    may be used to endorse or promote products derived from this software                      |  7173     4
    24       | *    without specific prior written permission.                                                 |  7174     4
    25       | *                                                                                               |  7175     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  7176     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  7177     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7178     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  7179     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  7180     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  7181     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  7182     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  7183     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  7184     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  7185     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   139


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       | * SUCH DAMAGE.                                                                                  |  7186     4
    37       | *                                                                                               |  7187     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  7188     4
    39       | */                                                                                              |  7189     4
    40       |                                                                                                 |  7190     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  7191     4
    42       |#define _SYS_CDEFS_H_                                                                            |  7192     4
    43       |                                                                                                 |  7193     4
    44       |#if defined(__cplusplus)                                                                         |  7194     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  7195     4
    46       |#define __END_DECLS     }                                                                        |  7196     4
    47       |#else                                                                                            |  7197     4
    48       |#define __BEGIN_DECLS                                                                            |  7198     4
    49       |#define __END_DECLS                                                                              |  7199     4
    50       |#endif                                                                                           |  7200     4
    51       |                                                                                                 |  7201     4
    52       |/*                                                                                               |  7202     4
    53       | * This code has been put in place to help reduce the addition of                                |  7203     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  7204     4
    55       | * having a compiler-agnostic source tree.                                                       |  7205     4
    56       | */                                                                                              |  7206     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  7207     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  7208     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  7209     4
    60       |                                                                                                 |  7210     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  7211     4
    62       |                                                                                                 |  7212     4
    63       |                                                                                                 |  7213     4
    64       |/*                                                                                               |  7214     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  7215     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  7216     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  7217     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  7218     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  7219     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  7220     4
    71       | * this only works with ANSI C.                                                                  |  7221     4
    72       | *                                                                                               |  7222     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  7223     4
    74       | * first.  It is only available with ANSI C.                                                     |  7224     4
    75       | */                                                                                              |  7225     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  7226     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  7227     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  7228     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  7229     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  7230     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  7231     4
    82       |                                                                                                 |  7232     4
    83       |#define __const         const           /* define reserved names to standard */                  |  7233     4
    84       |#define __signed        signed                                                                   |  7234     4
    85       |#define __volatile      volatile                                                                 |  7235     4
    86       |#if defined(__cplusplus)                                                                         |  7236     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  7237     4
    88       |#else                                                                                            |  7238     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   140


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  7239     4
    90       |#endif /* !__cplusplus */                                                                        |  7240     4
    91       |                                                                                                 |  7241     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  7242     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  7243     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  7244     4
    95       |#define __STRING(x)     "x"                                                                      |  7245     4
    96       |                                                                                                 |  7246     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  7247     4
    98       |#define __inline                                                                                 |  7248     4
    99       |#define __signed                                                                                 |  7249     4
   100       |#define __volatile                                                                               |  7250     4
   101       |/*                                                                                               |  7251     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  7252     4
   103       | * deleted from the program and old programs will want them left alone.                          |  7253     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  7254     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  7255     4
   106       | */                                                                                              |  7256     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  7257     4
   108       |#define const                           /* delete ANSI C keywords */                             |  7258     4
   109       |#define inline                                                                                   |  7259     4
   110       |#define signed                                                                                   |  7260     4
   111       |#define volatile                                                                                 |  7261     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  7262     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  7263     4
   114       |                                                                                                 |  7264     4
   115       |/*                                                                                               |  7265     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  7266     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  7267     4
   118       | */                                                                                              |  7268     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  7269     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  7270     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  7271     4
   122       |#define __unused                                                                                 |  7272     4
   123       |#define __aligned(x)                                                                             |  7273     4
   124       |#define __section(x)                                                                             |  7274     4
   125       |#define __nonnull(x)                                                                             |  7275     4
   126       |#define __used                                                                                   |  7276     4
   127       |                                                                                                 |  7277     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  7278     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  7279     4
   130       |                                                                                                 |  7280     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  7281     4
   132       |#define __func__  NULL                                                                           |  7282     4
   133       |#endif                                                                                           |  7283     4
   134       |                                                                                                 |  7284     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  7285     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  7286     4
   137       |#endif                                                                                           |  7287     4
   138       |                                                                                                 |  7288     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  7289     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  7290     4
   141       | **/                                                                                             |  7291     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   141


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   142       |#ifndef __cplusplus                                                                              |  7292     4
   143       |#define __restrict __restrict__                                                                  |  7293     4
   144       |#else                                                                                            |  7294     4
   145       |/* Systems/C++ does not */                                                                       |  7295     4
   146       |#define __restrict                                                                               |  7296     4
   147       |#endif                                                                                           |  7297     4
   148       |                                                                                                 |  7298     4
   149       |/*                                                                                               |  7299     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  7300     4
   151       | */                                                                                              |  7301     4
   152       |#define __predict_true(exp)     (exp)                                                            |  7302     4
   153       |#define __predict_false(exp)    (exp)                                                            |  7303     4
   154       |                                                                                                 |  7304     4
   155       |                                                                                                 |  7305     4
   156       |/*                                                                                               |  7306     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  7307     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  7308     4
   159       | *                                                                                               |  7309     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  7310     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  7311     4
   162       | */                                                                                              |  7312     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  7313     4
   164       |#undef __offsetof                                                                                |  7314     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  7315     4
   166       |#endif                                                                                           |  7316     4
   167       |                                                                                                 |  7317     4
   168       |/*                                                                                               |  7318     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  7319     4
   170       | * or scanf-like arguments.                                                                      |  7320     4
   171       | */                                                                                              |  7321     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  7322     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  7323     4
   174       |#define __format_arg(fmtarg)                                                                     |  7324     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  7325     4
   176       |                                                                                                 |  7326     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  7327     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  7328     4
   179       |                                                                                                 |  7329     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  7330     4
   181       |#define __weak_reference(sym,alias)                                                              |  7331     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  7332     4
   183       |#define __warn_references(sym,msg)                                                               |  7333     4
   184       |                                                                                                 |  7334     4
   185       | /* This places the string into the resulting object.  It should */                              |  7335     4
   186       | /* probably become #pragma ident */                                                             |  7336     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  7337     4
   188       |                                                                                                 |  7338     4
   189       |#ifndef __RCSID                                                                                  |  7339     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  7340     4
   191       |#endif                                                                                           |  7341     4
   192       |                                                                                                 |  7342     4
   193       |/*                                                                                               |  7343     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  7344     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   142


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   195       | * Usage:                                                                                        |  7345     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  7346     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  7347     4
   198       | */                                                                                              |  7348     4
   199       |#ifndef __SYSCID                                                                                 |  7349     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  7350     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  7351     4
   202       |#else                                                                                            |  7352     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  7353     4
   204       |#endif                                                                                           |  7354     4
   205       |#endif                                                                                           |  7355     4
   206       |                                                                                                 |  7356     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  7357     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  7358     4
   209       |#endif                                                                                           |  7359     4
   210       |                                                                                                 |  7360     4
   211       |#ifndef __COPYRIGHT                                                                              |  7361     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  7362     4
   213       |#endif                                                                                           |  7363     4
   214       |                                                                                                 |  7364     4
   215       |                                                                                                 |  7365     4
   216       |#ifndef __DECONST                                                                                |  7366     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  7367     4
   218       |#endif                                                                                           |  7368     4
   219       |                                                                                                 |  7369     4
   220       |#ifndef __DEVOLATILE                                                                             |  7370     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  7371     4
   222       |#endif                                                                                           |  7372     4
   223       |                                                                                                 |  7373     4
   224       |#ifndef __DEQUALIFY                                                                              |  7374     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  7375     4
   226       |#endif                                                                                           |  7376     4
   227       |                                                                                                 |  7377     4
   228       |                                                                                                 |  7378     4
   229       |/*-                                                                                              |  7379     4
   230       | * The following definitions are an extension of the behavior originally                         |  7380     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  7381     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  7382     4
   233       | * header file is included.                                                                      |  7383     4
   234       | *                                                                                               |  7384     4
   235       | * Here's a quick run-down of the versions:                                                      |  7385     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  7386     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  7387     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  7388     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  7389     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  7390     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  7391     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  7392     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  7393     4
   244       | *                                                                                               |  7394     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  7395     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  7396     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  7397     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   143


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   248       | *                                                                                               |  7398     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  7399     4
   250       | */                                                                                              |  7400     4
   251       |                                                                                                 |  7401     4
   252       |/*                                                                                               |  7402     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  7403     4
   254       | * available. Also make them available when requested so.                                        |  7404     4
   255       | */                                                                                              |  7405     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  7406     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  7407     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  7408     4
   259       |#define __DF_VISIBLE    1                                                                        |  7409     4
   260       |#else                                                                                            |  7410     4
   261       |#define __DF_VISIBLE    0                                                                        |  7411     4
   262       |#endif                                                                                           |  7412     4
   263       |                                                                                                 |  7413     4
   264       |/*-                                                                                              |  7414     4
   265       | * The following definitions are an extension of the behavior originally                         |  7415     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  7416     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  7417     4
   268       | * header file is included.                                                                      |  7418     4
   269       | *                                                                                               |  7419     4
   270       | * Here's a quick run-down of the versions:                                                      |  7420     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  7421     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  7422     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  7423     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  7424     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  7425     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  7426     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  7427     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  7428     4
   279       | *                                                                                               |  7429     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  7430     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  7431     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  7432     4
   283       | *                                                                                               |  7433     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  7434     4
   285       | */                                                                                              |  7435     4
   286       |                                                                                                 |  7436     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  7437     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  7438     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  7439     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  7440     4
   291       |#endif                                                                                           |  7441     4
   292       |                                                                                                 |  7442     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  7443     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  7444     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  7445     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  7446     4
   297       |#endif                                                                                           |  7447     4
   298       |                                                                                                 |  7448     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  7449     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  7450     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   144


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  7451     4
   302       |#define __XSI_VISIBLE           700                                                              |  7452     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  7453     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  7454     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  7455     4
   306       |#define __XSI_VISIBLE           600                                                              |  7456     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  7457     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  7458     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  7459     4
   310       |#define __XSI_VISIBLE           500                                                              |  7460     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  7461     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  7462     4
   313       |#endif                                                                                           |  7463     4
   314       |#endif                                                                                           |  7464     4
   315       |                                                                                                 |  7465     4
   316       |/*                                                                                               |  7466     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  7467     4
   318       | * important.                                                                                    |  7468     4
   319       | */                                                                                              |  7469     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  7470     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  7471     4
   322       |#endif                                                                                           |  7472     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  7473     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  7474     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  7475     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  7476     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  7477     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  7478     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  7479     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  7480     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  7481     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  7482     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  7483     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  7484     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  7485     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  7486     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  7487     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  7488     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  7489     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  7490     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  7491     4
   342       |#else                                                                                            |  7492     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  7493     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  7494     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  7495     4
   346       |#else                                                                                            |  7496     4
   347       |/*-                                                                                              |  7497     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  7498     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  7499     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  7500     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  7501     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  7502     4
   353       | * a test program to print out the values.                                                       |  7503     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   145


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   354       | *                                                                                               |  7504     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  7505     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  7506     4
   357       | * environment (and in fact we will never get here).                                             |  7507     4
   358       | */                                                                                              |  7508     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  7509     4
   360       |#define __POSIX_VISIBLE         0                                                                |  7510     4
   361       |#define __XSI_VISIBLE           0                                                                |  7511     4
   362       |#define __BSD_VISIBLE           0                                                                |  7512     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  7513     4
   364       |#define __EXT1_VISIBLE          0                                                                |  7514     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  7515     4
   366       |#define __POSIX_VISIBLE         0                                                                |  7516     4
   367       |#define __XSI_VISIBLE           0                                                                |  7517     4
   368       |#define __BSD_VISIBLE           0                                                                |  7518     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  7519     4
   370       |#define __EXT1_VISIBLE          0                                                                |  7520     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  7521     4
   372       |#define __POSIX_VISIBLE         0                                                                |  7522     4
   373       |#define __XSI_VISIBLE           0                                                                |  7523     4
   374       |#define __BSD_VISIBLE           0                                                                |  7524     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  7525     4
   376       |#define __EXT1_VISIBLE          0                                                                |  7526     4
   377       |#else                           /* Default environment: show everything. */                      |  7527     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  7528     4
   379       |#define __XSI_VISIBLE           700                                                              |  7529     4
   380       |#define __BSD_VISIBLE           1                                                                |  7530     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  7531     4
   382       |#define __EXT1_VISIBLE          1                                                                |  7532     4
   383       |#endif                                                                                           |  7533     4
   384       |#endif                                                                                           |  7534     4
   385       |                                                                                                 |  7535     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  7536     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  7537     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  7538     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  7539     4
   390       |#define __EXT1_VISIBLE          1                                                                |  7540     4
   391       |#else                                                                                            |  7541     4
   392       |#define __EXT1_VISIBLE          0                                                                |  7542     4
   393       |#endif                                                                                           |  7543     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  7544     4
   395       |                                                                                                 |  7545     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  7546     4
   397       |#define __NO_TLS 1                                                                               |  7547     4
   398       |#endif                                                                                           |  7548     4
   399       |                                                                                                 |  7549     4
   400       |                                                                                                 |  7550     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  7551     4
   402       |#define __FBSDID(x)                                                                              |  7552     4
   403       |                                                                                                 |  7553     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  7554     4
   405       |#pragma pack(reset)                                                                              |  7555     4
   308       |                                                                                                 |  7556    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   146


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   309       |__BEGIN_DECLS                                                                                    |  7557    17
   309       +                                                                                                 +  7557    17
   310       |int     adjtime(const struct timeval *, struct timeval *);                                       |  7558    17
   311       |int     futimes(int, const struct timeval *);                                                    |  7559    17
   312       |#pragma map (getitimer, "@@GITMR")                                                               |  7560    17
   313       |int     getitimer(int, struct itimerval *);                                                      |  7561    17
   314       |#pragma map (gettimeofday,"GETTFD@Y")                                                            |  7562    17
   315       |int     gettimeofday(struct timeval *, struct timezone *);                                       |  7563    17
   316       |int     lutimes(const char *, const struct timeval *);                                           |  7564    17
   317       |#pragma map (setitimer, "@@SITMR")                                                               |  7565    17
   318       |int     setitimer(int, const struct itimerval *, struct itimerval *);                            |  7566    17
   319       |int     settimeofday(const struct timeval *, const struct timezone *);                           |  7567    17
   320       |int     utimes(const char *, const struct timeval *);                                            |  7568    17
   321       |__END_DECLS                                                                                      |  7569    17
   321       +                                                                                                 +  7569    17
   322       |                                                                                                 |  7570    17
   323       |#endif /* !_KERNEL */                                                                            |  7571    17
   324       |                                                                                                 |  7572    17
   325       |#endif /* !_SYS_TIME_H_ */                                                                       |  7573    17
   326       |#pragma pack(reset)                                                                              |  7574    17
    25       |#else                                                                                            |  7575     2
    26       |#define INLINE                                                                                   |  7576     2
    27       |#endif                                                                                           |  7577     2
    28       |                                                                                                 |  7578     2
    29       |static unsigned char E2U[256] =                                                                  |  7579     2
    30       |{                                                                                                |  7580     2
    31       |    0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F,0x97,                                                |  7581     2
    32       |    0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,                                                |  7582     2
    33       |    0x12,0x13,0x9D,0x85,0x08,0x87,0x18,0x19,0x92,                                                |  7583     2
    34       |    0x8F,0x1C,0x1D,0x1E,0x1F,0x80,0x81,0x82,0x83,                                                |  7584     2
    35       |    0x84,0x0A,0x17,0x1B,0x88,0x89,0x8A,0x8B,0x8C,                                                |  7585     2
    36       |    0x05,0x06,0x07,0x90,0x91,0x16,0x93,0x94,0x95,                                                |  7586     2
    37       |    0x96,0x04,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,                                                |  7587     2
    38       |    0x1A,0x20,0xA0,0xE2,0xE4,0xE0,0xE1,0xE3,0xE5,                                                |  7588     2
    39       |    0xE7,0xF1,0xA2,0x2E,0x3C,0x28,0x2B,0x7C,0x26,                                                |  7589     2
    40       |    0xE9,0xEA,0xEB,0xE8,0xED,0xEE,0xEF,0xEC,0xDF,                                                |  7590     2
    41       |    0x21,0x24,0x2A,0x29,0x3B,0x5E,0x2D,0x2F,0xC2,                                                |  7591     2
    42       |    0xC4,0xC0,0xC1,0xC3,0xC5,0xC7,0xD1,0xA6,0x2C,                                                |  7592     2
    43       |    0x25,0x5F,0x3E,0x3F,0xF8,0xC9,0xCA,0xCB,0xC8,                                                |  7593     2
    44       |    0xCD,0xCE,0xCF,0xCC,0x60,0x3A,0x23,0x40,0x27,                                                |  7594     2
    45       |    0x3D,0x22,0xD8,0x61,0x62,0x63,0x64,0x65,0x66,                                                |  7595     2
    46       |    0x67,0x68,0x69,0xAB,0xBB,0xF0,0xFD,0xFE,0xB1,                                                |  7596     2
    47       |    0xB0,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,                                                |  7597     2
    48       |    0x72,0xAA,0xBA,0xE6,0xB8,0xC6,0xA4,0xB5,0x7E,                                                |  7598     2
    49       |    0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xA1,                                                |  7599     2
    50       |    0xBF,0xD0,0x5B,0xDE,0xAE,0xAC,0xA3,0xA5,0xB7,                                                |  7600     2
    51       |    0xA9,0xA7,0xB6,0xBC,0xBD,0xBE,0xDD,0xA8,0xAF,                                                |  7601     2
    52       |    0x5D,0xB4,0xD7,0x7B,0x41,0x42,0x43,0x44,0x45,                                                |  7602     2
    53       |    0x46,0x47,0x48,0x49,0xAD,0xF4,0xF6,0xF2,0xF3,                                                |  7603     2
    54       |    0xF5,0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,                                                |  7604     2
    55       |    0x51,0x52,0xB9,0xFB,0xFC,0xF9,0xFA,0xFF,0x5C,                                                |  7605     2
    56       |    0xF7,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,                                                |  7606     2
    57       |    0xB2,0xD4,0xD6,0xD2,0xD3,0xD5,0x30,0x31,0x32,                                                |  7607     2
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   147


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    58       |    0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xB3,0xDB,                                                |  7608     2
    59       |    0xDC,0xD9,0xDA,0x9F                                                                          |  7609     2
    60       |};                                                                                               |  7610     2
    61       |                                                                                                 |  7611     2
    62       |static unsigned char U2E[256] =                                                                  |  7612     2
    63       |{                                                                                                |  7613     2
    64       |    0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,                                                |  7614     2
    65       |    0x05,0x15,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,                                                |  7615     2
    66       |    0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x3F,                                                |  7616     2
    67       |    0x27,0x1C,0x1D,0x1E,0x1F,0x40,0x5A,0x7F,0x7B,                                                |  7617     2
    68       |    0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,                                                |  7618     2
    69       |    0x60,0x4B,0x61,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,                                                |  7619     2
    70       |    0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,                                                |  7620     2
    71       |    0x6F,0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,                                                |  7621     2
    72       |    0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,                                                |  7622     2
    73       |    0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,                                                |  7623     2
    74       |    0xE9,0xAD,0xE0,0xBD,0x5F,0x6D,0x79,0x81,0x82,                                                |  7624     2
    75       |    0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,                                                |  7625     2
    76       |    0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xA2,0xA3,                                                |  7626     2
    77       |    0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,                                                |  7627     2
    78       |    0xA1,0x07,0x20,0x21,0x22,0x23,0x24,0x25,0x06,                                                |  7628     2
    79       |    0x17,0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B,                                                |  7629     2
    80       |    0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08,0x38,                                                |  7630     2
    81       |    0x39,0x3A,0x3B,0x04,0x14,0x3E,0xFF,0x80,0x00,                                                |  7631     2
    82       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7632     2
    83       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7633     2
    84       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7634     2
    85       |    0x00,0x00,0x00,0x8A,0x00,0x00,0x00,0x00,0x00,                                                |  7635     2
    86       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7636     2
    87       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7637     2
    88       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8B,                                                |  7638     2
    89       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7639     2
    90       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7640     2
    91       |    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                                |  7641     2
    92       |    0x00,0x00,0x00,0x00                                                                          |  7642     2
    93       |};                                                                                               |  7643     2
    94       |                                                                                                 |  7644     2
    95       |static INLINE int ebcdic_2_utf8(unsigned char* out, size_t* outlen, const unsigned char* in, size|  7645     2
    95       +_t* inlen)                                                                                       +  7645     2
    95       +static __inline__ int ebcdic_2_utf8(unsigned char* out, size_t* outlen, const unsigned char* in, +  7645     2
    95       +size_t* inlen)                                                                                   +  7645     2
    96       |{                                                                                                |  7646     2
    97       |    const unsigned char* outstart = out;                                                         |  7647     2
    98       |    const unsigned char* base = in;                                                              |  7648     2
    99       |    const unsigned char* processed = in;                                                         |  7649     2
   100       |    const unsigned char* inend = in + (*inlen);                                                  |  7650     2
   101       |    const unsigned char* outend = out + (*outlen);                                               |  7651     2
   102       |    unsigned char c;                                                                             |  7652     2
   103       |                                                                                                 |  7653     2
   104       |    while ((in < inend) && ((out - outstart) < *outlen)) {                                       |  7654     2
   105       |        c = *in++;                                                                               |  7655     2
   106       |        if (c > 0xFF)                                                                            |  7656     2
   107       |        {                                                                                        |  7657     2
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   148


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   108       |            *outlen = out - outstart;                                                            |  7658     2
   109       |            *inlen = processed - base;                                                           |  7659     2
   110       |            return(-1);                                                                          |  7660     2
   111       |        }                                                                                        |  7661     2
   112       |                                                                                                 |  7662     2
   113       |        if (out >= outend)                                                                       |  7663     2
   114       |            break;                                                                               |  7664     2
   115       |                                                                                                 |  7665     2
   116       |        *out++ = E2U[c];                                                                         |  7666     2
   117       |        processed = (unsigned char*)in;                                                          |  7667     2
   118       |                                                                                                 |  7668     2
   119       |    }                                                                                            |  7669     2
   120       |                                                                                                 |  7670     2
   121       |    *outlen = out - outstart;                                                                    |  7671     2
   122       |    *inlen = processed - base;                                                                   |  7672     2
   123       |    return(0);                                                                                   |  7673     2
   124       |}                                                                                                |  7674     2
   125       |                                                                                                 |  7675     2
   126       |static INLINE int utf8_2_ebcdic(unsigned char* out, size_t* outlen, const unsigned char* in, size|  7676     2
   126       +_t* inlen)                                                                                       +  7676     2
   126       +static __inline__ int utf8_2_ebcdic(unsigned char* out, size_t* outlen, const unsigned char* in, +  7676     2
   126       +size_t* inlen)                                                                                   +  7676     2
   127       |{                                                                                                |  7677     2
   128       |    const unsigned char* outstart = out;                                                         |  7678     2
   129       |    const unsigned char* base = in;                                                              |  7679     2
   130       |    const unsigned char* processed = in;                                                         |  7680     2
   131       |    const unsigned char* inend = in + (*inlen);                                                  |  7681     2
   132       |    const unsigned char* outend = out + (*outlen);                                               |  7682     2
   133       |    unsigned char c;                                                                             |  7683     2
   134       |                                                                                                 |  7684     2
   135       |    while ((in < inend) && ((out - outstart) < *outlen)) {                                       |  7685     2
   136       |        c = *in++;                                                                               |  7686     2
   137       |        if (c > 0xFF)                                                                            |  7687     2
   138       |        {                                                                                        |  7688     2
   139       |            *outlen = out - outstart;                                                            |  7689     2
   140       |            *inlen = processed - base;                                                           |  7690     2
   141       |            return(-1);                                                                          |  7691     2
   142       |        }                                                                                        |  7692     2
   143       |                                                                                                 |  7693     2
   144       |        if (out >= outend)                                                                       |  7694     2
   145       |            break;                                                                               |  7695     2
   146       |                                                                                                 |  7696     2
   147       |        *out++ = U2E[c];                                                                         |  7697     2
   148       |        processed = (unsigned char*)in;                                                          |  7698     2
   149       |    }                                                                                            |  7699     2
   150       |                                                                                                 |  7700     2
   151       |    *outlen = out - outstart;                                                                    |  7701     2
   152       |    *inlen = processed - base;                                                                   |  7702     2
   153       |    return(0);                                                                                   |  7703     2
   154       |}                                                                                                |  7704     2
   155       |                                                                                                 |  7705     2
   156       |                                                                                                 |  7706     2
   157       |#endif /* sysc_h */                                                                              |  7707     2
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   149


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/*                                                                                               |  7708     1
     2       | * librdkafka - The Apache Kafka C/C++ library                                                   |  7709     1
     3       | *                                                                                               |  7710     1
     4       | * Copyright (c) 2017 Magnus Edenhill                                                            |  7711     1
     5       | * All rights reserved.                                                                          |  7712     1
     6       | *                                                                                               |  7713     1
     7       | * Redistribution and use in source and binary forms, with or without                            |  7714     1
     8       | * modification, are permitted provided that the following conditions are met:                   |  7715     1
     9       | *                                                                                               |  7716     1
    10       | * 1. Redistributions of source code must retain the above copyright notice,                     |  7717     1
    11       | *    this list of conditions and the following disclaimer.                                      |  7718     1
    12       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  |  7719     1
    13       | *    this list of conditions and the following disclaimer in the documentation                  |  7720     1
    14       | *    and/or other materials provided with the distribution.                                     |  7721     1
    15       | *                                                                                               |  7722     1
    16       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   |  7723     1
    17       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     |  7724     1
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7725     1
    19       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      |  7726     1
    20       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           |  7727     1
    21       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          |  7728     1
    22       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      |  7729     1
    23       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       |  7730     1
    24       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       |  7731     1
    25       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    |  7732     1
    26       | * POSSIBILITY OF SUCH DAMAGE.                                                                   |  7733     1
    27       | */                                                                                              |  7734     1
    28       |                                                                                                 |  7735     1
    29       |#include "rd.h"                                                                                  |  7736     1
     1       |/*                                                                                               |  7737    18
     2       | * librd - Rapid Development C library                                                           |  7738    18
     3       | *                                                                                               |  7739    18
     4       | * Copyright (c) 2012, Magnus Edenhill                                                           |  7740    18
     5       | * All rights reserved.                                                                          |  7741    18
     6       | *                                                                                               |  7742    18
     7       | * Redistribution and use in source and binary forms, with or without                            |  7743    18
     8       | * modification, are permitted provided that the following conditions are met:                   |  7744    18
     9       | *                                                                                               |  7745    18
    10       | * 1. Redistributions of source code must retain the above copyright notice,                     |  7746    18
    11       | *    this list of conditions and the following disclaimer.                                      |  7747    18
    12       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  |  7748    18
    13       | *    this list of conditions and the following disclaimer in the documentation                  |  7749    18
    14       | *    and/or other materials provided with the distribution.                                     |  7750    18
    15       | *                                                                                               |  7751    18
    16       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   |  7752    18
    17       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     |  7753    18
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7754    18
    19       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      |  7755    18
    20       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           |  7756    18
    21       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          |  7757    18
    22       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      |  7758    18
    23       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       |  7759    18
    24       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       |  7760    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   150


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    |  7761    18
    26       | * POSSIBILITY OF SUCH DAMAGE.                                                                   |  7762    18
    27       | */                                                                                              |  7763    18
    28       |                                                                                                 |  7764    18
    29       |                                                                                                 |  7765    18
    30       |#ifndef _RD_H_                                                                                   |  7766    18
    31       |#define _RD_H_                                                                                   |  7767    18
    32       |                                                                                                 |  7768    18
    33       |#ifndef _WIN32                                                                                   |  7769    18
    34       |#ifndef _GNU_SOURCE                                                                              |  7770    18
    35       |#define _GNU_SOURCE  /* for strndup() */                                                         |  7771    18
    36       |#endif                                                                                           |  7772    18
    37       |                                                                                                 |  7773    18
    38       |#if defined(__APPLE__) && !defined(_DARWIN_C_SOURCE)                                             |  7774    18
    39       |#define _DARWIN_C_SOURCE /* for strlcpy, pthread_setname_np, etc */                              |  7775    18
    40       |#endif                                                                                           |  7776    18
    41       |                                                                                                 |  7777    18
    42       |#define __need_IOV_MAX                                                                           |  7778    18
    43       |#ifndef _POSIX_C_SOURCE                                                                          |  7779    18
    44       |#define _POSIX_C_SOURCE 200809L  /* for timespec on solaris */                                   |  7780    18
    45       |#endif                                                                                           |  7781    18
    46       |#endif                                                                                           |  7782    18
    47       |                                                                                                 |  7783    18
    48       |#include <stdio.h>                                                                               |  7784    18
     1       |/* release 2.25.00 */                                                                            |  7785    19
     2       |#pragma pack()                                                                                   |  7786    19
     3       |/*-                                                                                              |  7787    19
     4       | * Copyright (c) 1990, 1993                                                                      |  7788    19
     5       | *      The Regents of the University of California.  All rights reserved.                       |  7789    19
     6       | *                                                                                               |  7790    19
     7       | * This code is derived from software contributed to Berkeley by                                 |  7791    19
     8       | * Chris Torek.                                                                                  |  7792    19
     9       | *                                                                                               |  7793    19
    10       | * Redistribution and use in source and binary forms, with or without                            |  7794    19
    11       | * modification, are permitted provided that the following conditions                            |  7795    19
    12       | * are met:                                                                                      |  7796    19
    13       | * 1. Redistributions of source code must retain the above copyright                             |  7797    19
    14       | *    notice, this list of conditions and the following disclaimer.                              |  7798    19
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  7799    19
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  7800    19
    17       | *    documentation and/or other materials provided with the distribution.                       |  7801    19
    18       | * 3. All advertising materials mentioning features or use of this software                      |  7802    19
    19       | *    must display the following acknowledgement:                                                |  7803    19
    20       | *      This product includes software developed by the University of                            |  7804    19
    21       | *      California, Berkeley and its contributors.                                               |  7805    19
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  7806    19
    23       | *    may be used to endorse or promote products derived from this software                      |  7807    19
    24       | *    without specific prior written permission.                                                 |  7808    19
    25       | *                                                                                               |  7809    19
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  7810    19
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  7811    19
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7812    19
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  7813    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   151


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  7814    19
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  7815    19
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  7816    19
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  7817    19
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  7818    19
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  7819    19
    36       | * SUCH DAMAGE.                                                                                  |  7820    19
    37       | *                                                                                               |  7821    19
    38       | *      @(#)stdio.h     8.5 (Berkeley) 4/29/95                                                   |  7822    19
    39       | */                                                                                              |  7823    19
    40       |                                                                                                 |  7824    19
    41       |#ifndef _STDIO_H_                                                                                |  7825    19
    42       |#define _STDIO_H_                                                                                |  7826    19
    43       |                                                                                                 |  7827    19
    44       |#include <sys/cdefs.h>                                                                           |  7828    19
     1       |/* release 2.25.00 */                                                                            |  7829     4
     2       |#pragma pack()                                                                                   |  7830     4
     3       |/*                                                                                               |  7831     4
     4       | * Copyright (c) 1991, 1993                                                                      |  7832     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  7833     4
     6       | *                                                                                               |  7834     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  7835     4
     8       | * Berkeley Software Design, Inc.                                                                |  7836     4
     9       | *                                                                                               |  7837     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  7838     4
    11       | * modification, are permitted provided that the following conditions                            |  7839     4
    12       | * are met:                                                                                      |  7840     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  7841     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  7842     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  7843     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  7844     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  7845     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  7846     4
    19       | *    must display the following acknowledgement:                                                |  7847     4
    20       | *      This product includes software developed by the University of                            |  7848     4
    21       | *      California, Berkeley and its contributors.                                               |  7849     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  7850     4
    23       | *    may be used to endorse or promote products derived from this software                      |  7851     4
    24       | *    without specific prior written permission.                                                 |  7852     4
    25       | *                                                                                               |  7853     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  7854     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  7855     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  7856     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  7857     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  7858     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  7859     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  7860     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  7861     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  7862     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  7863     4
    36       | * SUCH DAMAGE.                                                                                  |  7864     4
    37       | *                                                                                               |  7865     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  7866     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   152


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    39       | */                                                                                              |  7867     4
    40       |                                                                                                 |  7868     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  7869     4
    42       |#define _SYS_CDEFS_H_                                                                            |  7870     4
    43       |                                                                                                 |  7871     4
    44       |#if defined(__cplusplus)                                                                         |  7872     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  7873     4
    46       |#define __END_DECLS     }                                                                        |  7874     4
    47       |#else                                                                                            |  7875     4
    48       |#define __BEGIN_DECLS                                                                            |  7876     4
    49       |#define __END_DECLS                                                                              |  7877     4
    50       |#endif                                                                                           |  7878     4
    51       |                                                                                                 |  7879     4
    52       |/*                                                                                               |  7880     4
    53       | * This code has been put in place to help reduce the addition of                                |  7881     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  7882     4
    55       | * having a compiler-agnostic source tree.                                                       |  7883     4
    56       | */                                                                                              |  7884     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  7885     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  7886     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  7887     4
    60       |                                                                                                 |  7888     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  7889     4
    62       |                                                                                                 |  7890     4
    63       |                                                                                                 |  7891     4
    64       |/*                                                                                               |  7892     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  7893     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  7894     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  7895     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  7896     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  7897     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  7898     4
    71       | * this only works with ANSI C.                                                                  |  7899     4
    72       | *                                                                                               |  7900     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  7901     4
    74       | * first.  It is only available with ANSI C.                                                     |  7902     4
    75       | */                                                                                              |  7903     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  7904     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  7905     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  7906     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  7907     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  7908     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  7909     4
    82       |                                                                                                 |  7910     4
    83       |#define __const         const           /* define reserved names to standard */                  |  7911     4
    84       |#define __signed        signed                                                                   |  7912     4
    85       |#define __volatile      volatile                                                                 |  7913     4
    86       |#if defined(__cplusplus)                                                                         |  7914     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  7915     4
    88       |#else                                                                                            |  7916     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  7917     4
    90       |#endif /* !__cplusplus */                                                                        |  7918     4
    91       |                                                                                                 |  7919     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   153


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  7920     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  7921     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  7922     4
    95       |#define __STRING(x)     "x"                                                                      |  7923     4
    96       |                                                                                                 |  7924     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  7925     4
    98       |#define __inline                                                                                 |  7926     4
    99       |#define __signed                                                                                 |  7927     4
   100       |#define __volatile                                                                               |  7928     4
   101       |/*                                                                                               |  7929     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  7930     4
   103       | * deleted from the program and old programs will want them left alone.                          |  7931     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  7932     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  7933     4
   106       | */                                                                                              |  7934     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  7935     4
   108       |#define const                           /* delete ANSI C keywords */                             |  7936     4
   109       |#define inline                                                                                   |  7937     4
   110       |#define signed                                                                                   |  7938     4
   111       |#define volatile                                                                                 |  7939     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  7940     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  7941     4
   114       |                                                                                                 |  7942     4
   115       |/*                                                                                               |  7943     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  7944     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  7945     4
   118       | */                                                                                              |  7946     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  7947     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  7948     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  7949     4
   122       |#define __unused                                                                                 |  7950     4
   123       |#define __aligned(x)                                                                             |  7951     4
   124       |#define __section(x)                                                                             |  7952     4
   125       |#define __nonnull(x)                                                                             |  7953     4
   126       |#define __used                                                                                   |  7954     4
   127       |                                                                                                 |  7955     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  7956     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  7957     4
   130       |                                                                                                 |  7958     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  7959     4
   132       |#define __func__  NULL                                                                           |  7960     4
   133       |#endif                                                                                           |  7961     4
   134       |                                                                                                 |  7962     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  7963     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  7964     4
   137       |#endif                                                                                           |  7965     4
   138       |                                                                                                 |  7966     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  7967     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  7968     4
   141       | **/                                                                                             |  7969     4
   142       |#ifndef __cplusplus                                                                              |  7970     4
   143       |#define __restrict __restrict__                                                                  |  7971     4
   144       |#else                                                                                            |  7972     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   154


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   145       |/* Systems/C++ does not */                                                                       |  7973     4
   146       |#define __restrict                                                                               |  7974     4
   147       |#endif                                                                                           |  7975     4
   148       |                                                                                                 |  7976     4
   149       |/*                                                                                               |  7977     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  7978     4
   151       | */                                                                                              |  7979     4
   152       |#define __predict_true(exp)     (exp)                                                            |  7980     4
   153       |#define __predict_false(exp)    (exp)                                                            |  7981     4
   154       |                                                                                                 |  7982     4
   155       |                                                                                                 |  7983     4
   156       |/*                                                                                               |  7984     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  7985     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  7986     4
   159       | *                                                                                               |  7987     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  7988     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  7989     4
   162       | */                                                                                              |  7990     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  7991     4
   164       |#undef __offsetof                                                                                |  7992     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  7993     4
   166       |#endif                                                                                           |  7994     4
   167       |                                                                                                 |  7995     4
   168       |/*                                                                                               |  7996     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  7997     4
   170       | * or scanf-like arguments.                                                                      |  7998     4
   171       | */                                                                                              |  7999     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  8000     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  8001     4
   174       |#define __format_arg(fmtarg)                                                                     |  8002     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  8003     4
   176       |                                                                                                 |  8004     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  8005     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  8006     4
   179       |                                                                                                 |  8007     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  8008     4
   181       |#define __weak_reference(sym,alias)                                                              |  8009     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  8010     4
   183       |#define __warn_references(sym,msg)                                                               |  8011     4
   184       |                                                                                                 |  8012     4
   185       | /* This places the string into the resulting object.  It should */                              |  8013     4
   186       | /* probably become #pragma ident */                                                             |  8014     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  8015     4
   188       |                                                                                                 |  8016     4
   189       |#ifndef __RCSID                                                                                  |  8017     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  8018     4
   191       |#endif                                                                                           |  8019     4
   192       |                                                                                                 |  8020     4
   193       |/*                                                                                               |  8021     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  8022     4
   195       | * Usage:                                                                                        |  8023     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  8024     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  8025     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   155


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   198       | */                                                                                              |  8026     4
   199       |#ifndef __SYSCID                                                                                 |  8027     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  8028     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  8029     4
   202       |#else                                                                                            |  8030     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  8031     4
   204       |#endif                                                                                           |  8032     4
   205       |#endif                                                                                           |  8033     4
   206       |                                                                                                 |  8034     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  8035     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  8036     4
   209       |#endif                                                                                           |  8037     4
   210       |                                                                                                 |  8038     4
   211       |#ifndef __COPYRIGHT                                                                              |  8039     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  8040     4
   213       |#endif                                                                                           |  8041     4
   214       |                                                                                                 |  8042     4
   215       |                                                                                                 |  8043     4
   216       |#ifndef __DECONST                                                                                |  8044     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  8045     4
   218       |#endif                                                                                           |  8046     4
   219       |                                                                                                 |  8047     4
   220       |#ifndef __DEVOLATILE                                                                             |  8048     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  8049     4
   222       |#endif                                                                                           |  8050     4
   223       |                                                                                                 |  8051     4
   224       |#ifndef __DEQUALIFY                                                                              |  8052     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  8053     4
   226       |#endif                                                                                           |  8054     4
   227       |                                                                                                 |  8055     4
   228       |                                                                                                 |  8056     4
   229       |/*-                                                                                              |  8057     4
   230       | * The following definitions are an extension of the behavior originally                         |  8058     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  8059     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  8060     4
   233       | * header file is included.                                                                      |  8061     4
   234       | *                                                                                               |  8062     4
   235       | * Here's a quick run-down of the versions:                                                      |  8063     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  8064     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  8065     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  8066     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  8067     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  8068     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  8069     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  8070     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  8071     4
   244       | *                                                                                               |  8072     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  8073     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  8074     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  8075     4
   248       | *                                                                                               |  8076     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  8077     4
   250       | */                                                                                              |  8078     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   156


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   251       |                                                                                                 |  8079     4
   252       |/*                                                                                               |  8080     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  8081     4
   254       | * available. Also make them available when requested so.                                        |  8082     4
   255       | */                                                                                              |  8083     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  8084     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  8085     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  8086     4
   259       |#define __DF_VISIBLE    1                                                                        |  8087     4
   260       |#else                                                                                            |  8088     4
   261       |#define __DF_VISIBLE    0                                                                        |  8089     4
   262       |#endif                                                                                           |  8090     4
   263       |                                                                                                 |  8091     4
   264       |/*-                                                                                              |  8092     4
   265       | * The following definitions are an extension of the behavior originally                         |  8093     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  8094     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  8095     4
   268       | * header file is included.                                                                      |  8096     4
   269       | *                                                                                               |  8097     4
   270       | * Here's a quick run-down of the versions:                                                      |  8098     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  8099     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  8100     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  8101     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  8102     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  8103     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  8104     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  8105     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  8106     4
   279       | *                                                                                               |  8107     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  8108     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  8109     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  8110     4
   283       | *                                                                                               |  8111     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  8112     4
   285       | */                                                                                              |  8113     4
   286       |                                                                                                 |  8114     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  8115     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  8116     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  8117     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  8118     4
   291       |#endif                                                                                           |  8119     4
   292       |                                                                                                 |  8120     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  8121     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  8122     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  8123     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  8124     4
   297       |#endif                                                                                           |  8125     4
   298       |                                                                                                 |  8126     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  8127     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  8128     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  8129     4
   302       |#define __XSI_VISIBLE           700                                                              |  8130     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  8131     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   157


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   304       |#define _POSIX_C_SOURCE         200809                                                           |  8132     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  8133     4
   306       |#define __XSI_VISIBLE           600                                                              |  8134     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  8135     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  8136     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  8137     4
   310       |#define __XSI_VISIBLE           500                                                              |  8138     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  8139     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  8140     4
   313       |#endif                                                                                           |  8141     4
   314       |#endif                                                                                           |  8142     4
   315       |                                                                                                 |  8143     4
   316       |/*                                                                                               |  8144     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  8145     4
   318       | * important.                                                                                    |  8146     4
   319       | */                                                                                              |  8147     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  8148     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  8149     4
   322       |#endif                                                                                           |  8150     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  8151     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  8152     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  8153     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  8154     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  8155     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  8156     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  8157     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  8158     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  8159     4
   332       |#define __ISO_C_VISIBLE         1990                                                             |  8160     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  8161     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  8162     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  8163     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  8164     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  8165     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  8166     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  8167     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  8168     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  8169     4
   342       |#else                                                                                            |  8170     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  8171     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  8172     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  8173     4
   346       |#else                                                                                            |  8174     4
   347       |/*-                                                                                              |  8175     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  8176     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  8177     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  8178     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  8179     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  8180     4
   353       | * a test program to print out the values.                                                       |  8181     4
   354       | *                                                                                               |  8182     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  8183     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  8184     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   158


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   357       | * environment (and in fact we will never get here).                                             |  8185     4
   358       | */                                                                                              |  8186     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  8187     4
   360       |#define __POSIX_VISIBLE         0                                                                |  8188     4
   361       |#define __XSI_VISIBLE           0                                                                |  8189     4
   362       |#define __BSD_VISIBLE           0                                                                |  8190     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  8191     4
   364       |#define __EXT1_VISIBLE          0                                                                |  8192     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  8193     4
   366       |#define __POSIX_VISIBLE         0                                                                |  8194     4
   367       |#define __XSI_VISIBLE           0                                                                |  8195     4
   368       |#define __BSD_VISIBLE           0                                                                |  8196     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  8197     4
   370       |#define __EXT1_VISIBLE          0                                                                |  8198     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  8199     4
   372       |#define __POSIX_VISIBLE         0                                                                |  8200     4
   373       |#define __XSI_VISIBLE           0                                                                |  8201     4
   374       |#define __BSD_VISIBLE           0                                                                |  8202     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  8203     4
   376       |#define __EXT1_VISIBLE          0                                                                |  8204     4
   377       |#else                           /* Default environment: show everything. */                      |  8205     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  8206     4
   379       |#define __XSI_VISIBLE           700                                                              |  8207     4
   380       |#define __BSD_VISIBLE           1                                                                |  8208     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  8209     4
   382       |#define __EXT1_VISIBLE          1                                                                |  8210     4
   383       |#endif                                                                                           |  8211     4
   384       |#endif                                                                                           |  8212     4
   385       |                                                                                                 |  8213     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  8214     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  8215     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  8216     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  8217     4
   390       |#define __EXT1_VISIBLE          1                                                                |  8218     4
   391       |#else                                                                                            |  8219     4
   392       |#define __EXT1_VISIBLE          0                                                                |  8220     4
   393       |#endif                                                                                           |  8221     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  8222     4
   395       |                                                                                                 |  8223     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  8224     4
   397       |#define __NO_TLS 1                                                                               |  8225     4
   398       |#endif                                                                                           |  8226     4
   399       |                                                                                                 |  8227     4
   400       |                                                                                                 |  8228     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  8229     4
   402       |#define __FBSDID(x)                                                                              |  8230     4
   403       |                                                                                                 |  8231     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  8232     4
   405       |#pragma pack(reset)                                                                              |  8233     4
    45       |#include <sys/_null.h>                                                                           |  8234    19
     1       |/* release 2.25.00 */                                                                            |  8235    15
     2       |#pragma pack()                                                                                   |  8236    15
     3       |/*-                                                                                              |  8237    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   159


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  8238    15
     5       | * All rights reserved.                                                                          |  8239    15
     6       | *                                                                                               |  8240    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  8241    15
     8       | * modification, are permitted provided that the following conditions                            |  8242    15
     9       | * are met:                                                                                      |  8243    15
    10       | *                                                                                               |  8244    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  8245    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  8246    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  8247    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  8248    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  8249    15
    16       | *                                                                                               |  8250    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  8251    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  8252    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  8253    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  8254    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  8255    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  8256    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  8257    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  8258    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  8259    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  8260    15
    27       | *                                                                                               |  8261    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  8262    15
    29       | */                                                                                              |  8263    15
    30       |                                                                                                 |  8264    15
    31       |#ifndef NULL                                                                                     |  8265    15
    32       |                                                                                                 |  8266    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  8267    15
    34       |#define NULL    ((void *)0)                                                                      |  8268    15
    35       |#else                                                                                            |  8269    15
    36       |#if defined(__LP64__)                                                                            |  8270    15
    37       |#define NULL    (0L)                                                                             |  8271    15
    38       |#else                                                                                            |  8272    15
    39       |#define NULL    0                                                                                |  8273    15
    40       |#endif  /* __LP64__ */                                                                           |  8274    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  8275    15
    42       |                                                                                                 |  8276    15
    43       |#endif                                                                                           |  8277    15
    44       |#pragma pack(reset)                                                                              |  8278    15
    46       |#include <sys/_types.h>                                                                          |  8279    19
     1       |/* release 2.25.00 */                                                                            |  8280     6
     2       |#pragma pack()                                                                                   |  8281     6
     3       |/*-                                                                                              |  8282     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  8283     6
     5       | * All rights reserved.                                                                          |  8284     6
     6       | *                                                                                               |  8285     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  8286     6
     8       | * modification, are permitted provided that the following conditions                            |  8287     6
     9       | * are met:                                                                                      |  8288     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  8289     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  8290     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   160


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  8291     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  8292     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  8293     6
    15       | *                                                                                               |  8294     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  8295     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  8296     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  8297     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  8298     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  8299     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  8300     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  8301     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  8302     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  8303     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  8304     6
    26       | * SUCH DAMAGE.                                                                                  |  8305     6
    27       | *                                                                                               |  8306     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  8307     6
    29       | */                                                                                              |  8308     6
    30       |                                                                                                 |  8309     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  8310     6
    32       |#define _SYS__TYPES_H_                                                                           |  8311     6
    33       |                                                                                                 |  8312     6
    34       |#include <sys/cdefs.h>                                                                           |  8313     6
    35       |#include <machine/_types.h>                                                                      |  8314     6
    36       |                                                                                                 |  8315     6
    37       |/*                                                                                               |  8316     6
    38       | * Standard type definitions.                                                                    |  8317     6
    39       | */                                                                                              |  8318     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  8319     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  8320     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  8321     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  8322     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  8323     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  8324     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  8325     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  8326     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  8327     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  8328     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  8329     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  8330     6
    52       |typedef int             __nl_item;                                                               |  8331     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  8332     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  8333     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  8334     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  8335     6
    57       |                                        /* signed, because of legacy code */                     |  8336     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  8337     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  8338     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  8339     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  8340     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  8341     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  8342     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  8343     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   161


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    65       |                                                                                                 |  8344     6
    66       |/*                                                                                               |  8345     6
    67       | * Unusual type definitions.                                                                     |  8346     6
    68       | */                                                                                              |  8347     6
    69       |/*                                                                                               |  8348     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  8349     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  8350     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  8351     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  8352     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  8353     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  8354     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  8355     6
    77       | *                                                                                               |  8356     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  8357     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  8358     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  8359     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  8360     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  8361     6
    83       | */                                                                                              |  8362     6
    84       |#ifdef __cplusplus                                                                               |  8363     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  8364     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  8365     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  8366     6
    88       |#else                                                                                            |  8367     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  8368     6
    90       |#endif                                                                                           |  8369     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  8370     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  8371     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  8372     6
    94       |                                                                                                 |  8373     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  8374     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  8375     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  8376     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  8377     6
    99       |#endif                                                                                           |  8378     6
   100       |                                                                                                 |  8379     6
   101       |#if !defined(__cplusplus)                                                                        |  8380     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  8381     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  8382     6
   104       |#endif                                                                                           |  8383     6
   105       |                                                                                                 |  8384     6
   106       |                                                                                                 |  8385     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  8386     6
   108       |                                                                                                 |  8387     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  8388     6
   110       |                                                                                                 |  8389     6
   111       |/*                                                                                               |  8390     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  8391     6
   113       | * stream conversions.                                                                           |  8392     6
   114       | */                                                                                              |  8393     6
   115       |typedef union {                                                                                  |  8394     6
   116       |        char            __mbstate8[128];                                                         |  8395     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  8396     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   162


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   118       |} __mbstate_t;                                                                                   |  8397     6
   119       |                                                                                                 |  8398     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  8399     6
   121       |#pragma pack(reset)                                                                              |  8400     6
    47       |                                                                                                 |  8401    19
    48       |typedef __off_t         fpos_t;                                                                  |  8402    19
    49       |                                                                                                 |  8403    19
    50       |#ifndef _SIZE_T_DECLARED                                                                         |  8404    19
    51       |typedef __size_t        size_t;                                                                  |  8405    19
    52       |#define _SIZE_T_DECLARED                                                                         |  8406    19
    53       |#endif                                                                                           |  8407    19
    54       |                                                                                                 |  8408    19
    55       |#if __POSIX_VISIBLE >= 200809                                                                    |  8409    19
    56       |#ifndef _OFF_T_DECLARED                                                                          |  8410    19
    57       |#define _OFF_T_DECLARED                                                                          |  8411    19
    58       |typedef __off_t         off_t;                                                                   |  8412    19
    59       |#endif                                                                                           |  8413    19
    60       |#ifndef _SSIZE_T_DECLARED                                                                        |  8414    19
    61       |#define _SSIZE_T_DECLARED                                                                        |  8415    19
    62       |typedef __ssize_t       ssize_t;                                                                 |  8416    19
    63       |#endif                                                                                           |  8417    19
    64       |#endif                                                                                           |  8418    19
    65       |                                                                                                 |  8419    19
    65       +                                                                                                 +  8419    19
    66       |#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                  |  8420    19
    67       |#ifndef _VA_LIST_DECLARED                                                                        |  8421    19
    68       |typedef __va_list       va_list;                                                                 |  8422    19
    68       +typedef __va_list       va_list;                                                                 +  8422    19
    69       |#define _VA_LIST_DECLARED                                                                        |  8423    19
    70       |#endif                                                                                           |  8424    19
    71       |#endif                                                                                           |  8425    19
    72       |                                                                                                 |  8426    19
    73       |#define _FSTDIO                 /* Define for new stdio with functions. */                       |  8427    19
    74       |                                                                                                 |  8428    19
    75       |/*                                                                                               |  8429    19
    76       | * NB: to fit things in six character monocase externals, the stdio                              |  8430    19
    77       | * code uses the prefix `__s' for stdio objects, typically followed                              |  8431    19
    78       | * by a three-character attempt at a mnemonic.                                                   |  8432    19
    79       | */                                                                                              |  8433    19
    80       |                                                                                                 |  8434    19
    81       |/* stdio buffers */                                                                              |  8435    19
    82       |struct __sbuf {                                                                                  |  8436    19
    83       |        unsigned char *_base;                                                                    |  8437    19
    84       |        int     _size;                                                                           |  8438    19
    85       |};                                                                                               |  8439    19
    86       |                                                                                                 |  8440    19
    87       |/* hold a buncha junk that would grow the ABI */                                                 |  8441    19
    88       |struct __sFILEX;                                                                                 |  8442    19
    89       |                                                                                                 |  8443    19
    90       |/*                                                                                               |  8444    19
    91       | * stdio state variables.                                                                        |  8445    19
    92       | *                                                                                               |  8446    19
    93       | * The following always hold:                                                                    |  8447    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   163


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    94       | *                                                                                               |  8448    19
    95       | *      if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),                                            |  8449    19
    96       | *              _lbfsize is -_bf._size, else _lbfsize is 0                                       |  8450    19
    97       | *      if _flags&__SRD, _w is 0                                                                 |  8451    19
    98       | *      if _flags&__SWR, _r is 0                                                                 |  8452    19
    99       | *                                                                                               |  8453    19
   100       | * This ensures that the getc and putc macros (or inline functions) never                        |  8454    19
   101       | * try to write or read from a file that is in `read' or `write' mode.                           |  8455    19
   102       | * (Moreover, they can, and do, automatically switch from read mode to                           |  8456    19
   103       | * write mode, and back, on "r+" and "w+" files.)                                                |  8457    19
   104       | *                                                                                               |  8458    19
   105       | * _lbfsize is used only to make the inline line-buffered output stream                          |  8459    19
   106       | * code as compact as possible.                                                                  |  8460    19
   107       | *                                                                                               |  8461    19
   108       | * _ub, _up, and _ur are used when ungetc() pushes back more characters                          |  8462    19
   109       | * than fit in the current _bf, or when ungetc() pushes back a character                         |  8463    19
   110       | * that does not match the previous one in _bf.  When this happens,                              |  8464    19
   111       | * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff                               |  8465    19
   112       | * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.                        |  8466    19
   113       | */                                                                                              |  8467    19
   114       |typedef struct __sFILE {                                                                         |  8468    19
   115       |        unsigned char *_p;      /* current position in (some) buffer */                          |  8469    19
   116       |        int     _r;             /* read space left for getc() */                                 |  8470    19
   117       |        int     _w;             /* write space left for putc() */                                |  8471    19
   118       |        int     _flags;         /* flags, below; this FILE is free if 0 */                       |  8472    19
   119       |        short   _file;          /* fileno, if Unix descriptor, else -1 */                        |  8473    19
   120       |        struct  __sbuf _bf;     /* the buffer (at least 1 byte, if !NULL) */                     |  8474    19
   121       |        int     _lbfsize;       /* 0 or -_bf._size, for inline putc */                           |  8475    19
   122       |                                                                                                 |  8476    19
   123       |        /* operations */                                                                         |  8477    19
   124       |        void    *_cookie;       /* cookie passed to io functions */                              |  8478    19
   125       |        int     (*_close)(void *);                                                               |  8479    19
   126       |        int     (*_read)(void *, char *, int);                                                   |  8480    19
   127       |        fpos_t  (*_seek)(void *, fpos_t, int);                                                   |  8481    19
   128       |        int     (*_write)(void *, const char *, int);                                            |  8482    19
   129       |                                                                                                 |  8483    19
   130       |        /* separate buffer for long sequences of ungetc() */                                     |  8484    19
   131       |        struct  __sbuf _ub;     /* ungetc buffer */                                              |  8485    19
   132       |        struct __sFILEX *_extra; /* additions to FILE to not break ABI */                        |  8486    19
   133       |        int     _ur;            /* saved _r when _r is counting ungetc data */                   |  8487    19
   134       |                                                                                                 |  8488    19
   135       |        /* tricks to meet minimum requirements even when malloc() fails */                       |  8489    19
   136       |        unsigned char _ubuf[3]; /* guarantee an ungetc() buffer */                               |  8490    19
   137       |        unsigned char _nbuf[1]; /* guarantee a getc() buffer */                                  |  8491    19
   138       |                                                                                                 |  8492    19
   139       |        /* separate buffer for fgetln() when line crosses buffer boundary */                     |  8493    19
   140       |        struct  __sbuf _lb;     /* buffer for fgetln() */                                        |  8494    19
   141       |                                                                                                 |  8495    19
   142       |        /* Unix stdio files get aligned to block boundaries on fseek() */                        |  8496    19
   143       |        int     _blksize;       /* stat.st_blksize (may be != _bf._size) */                      |  8497    19
   144       |        fpos_t  _offset;        /* current lseek offset */                                       |  8498    19
   145       |} FILE;                                                                                          |  8499    19
   146       |                                                                                                 |  8500    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   164


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   147       |#ifndef _STDSTREAM_DECLARED                                                                      |  8501    19
   148       |__BEGIN_DECLS                                                                                    |  8502    19
   148       +                                                                                                 +  8502    19
   149       |#pragma map(__stdinp, "@@STDINP")                                                                |  8503    19
   150       |#pragma map(__stdoutp, "@@STDOUP")                                                               |  8504    19
   151       |#pragma map(__stderrp, "@@STDERP")                                                               |  8505    19
   152       |extern FILE *__stdinp;                                                                           |  8506    19
   153       |extern FILE *__stdoutp;                                                                          |  8507    19
   154       |extern FILE *__stderrp;                                                                          |  8508    19
   155       |__END_DECLS                                                                                      |  8509    19
   155       +                                                                                                 +  8509    19
   156       |#define _STDSTREAM_DECLARED                                                                      |  8510    19
   157       |#endif                                                                                           |  8511    19
   158       |                                                                                                 |  8512    19
   159       |#define __SLBF  0x0001          /* line buffered */                                              |  8513    19
   160       |#define __SNBF  0x0002          /* unbuffered */                                                 |  8514    19
   161       |#define __SRD   0x0004          /* OK to read */                                                 |  8515    19
   162       |#define __SWR   0x0008          /* OK to write */                                                |  8516    19
   163       |        /* RD and WR are never simultaneously asserted */                                        |  8517    19
   164       |#define __SRW   0x0010          /* open for reading & writing */                                 |  8518    19
   165       |#define __SEOF  0x0020          /* found EOF */                                                  |  8519    19
   166       |#define __SERR  0x0040          /* found error */                                                |  8520    19
   167       |#define __SMBF  0x0080          /* _buf is from malloc */                                        |  8521    19
   168       |#define __SAPP  0x0100          /* fdopen()ed in append mode */                                  |  8522    19
   169       |#define __SSTR  0x0200          /* this is an sprintf/snprintf string */                         |  8523    19
   170       |#define __SOPT  0x0400          /* do fseek() optimization */                                    |  8524    19
   171       |#define __SNPT  0x0800          /* do not do fseek() optimization */                             |  8525    19
   172       |#define __SOFF  0x1000          /* set iff _offset is in fact correct */                         |  8526    19
   173       |#define __SMOD  0x2000          /* true => fgetln modified _p text */                            |  8527    19
   174       |#define __SREC  0x4000          /* Systems/C record I/O extension */                             |  8528    19
   175       |#define __SALC  0x8000          /* allocate string space dynamically */                          |  8529    19
   176       |#define __SIGN  0x10000         /* ignore this file in _fwalk */                                 |  8530    19
   177       |                                                                                                 |  8531    19
   178       |/*                                                                                               |  8532    19
   179       | * The following three definitions are for ANSI C, which took them                               |  8533    19
   180       | * from System V, which brilliantly took internal interface macros and                           |  8534    19
   181       | * made them official arguments to setvbuf(), without renaming them.                             |  8535    19
   182       | * Hence, these ugly _IOxxx names are *supposed* to appear in user code.                         |  8536    19
   183       | *                                                                                               |  8537    19
   184       | * Although numbered as their counterparts above, the implementation                             |  8538    19
   185       | * does not rely on this.                                                                        |  8539    19
   186       | */                                                                                              |  8540    19
   187       |#define _IOFBF  0               /* setvbuf should set fully buffered */                          |  8541    19
   188       |#define _IOLBF  1               /* setvbuf should set line buffered */                           |  8542    19
   189       |#define _IONBF  2               /* setvbuf should set unbuffered */                              |  8543    19
   190       |                                                                                                 |  8544    19
   191       |#define BUFSIZ  1024            /* size of buffer used by setbuf */                              |  8545    19
   192       |#define EOF     (-1)                                                                             |  8546    19
   193       |                                                                                                 |  8547    19
   194       |/*                                                                                               |  8548    19
   195       | * FOPEN_MAX is a minimum maximum, and is the number of streams that                             |  8549    19
   196       | * stdio can provide without attempting to allocate further resources                            |  8550    19
   197       | * (which could fail).  Do not use this for anything.                                            |  8551    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   165


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   198       | */                                                                                              |  8552    19
   199       |                                /* must be == _POSIX_STREAM_MAX <limits.h> */                    |  8553    19
   200       |#define FOPEN_MAX       20      /* must be <= OPEN_MAX <sys/syslimits.h> */                      |  8554    19
   201       |#define FILENAME_MAX    1024    /* must be <= PATH_MAX <sys/syslimits.h> */                      |  8555    19
   202       |                                                                                                 |  8556    19
   203       |/* System V/ANSI C; this is the wrong way to do this, do *not* use these. */                     |  8557    19
   204       |#if __XSI_VISIBLE                                                                                |  8558    19
   205       |#define P_tmpdir        "/tmp/"                                                                  |  8559    19
   206       |#endif                                                                                           |  8560    19
   207       |#define L_tmpnam        1024    /* XXX must be == PATH_MAX */                                    |  8561    19
   208       |#define TMP_MAX         308915776                                                                |  8562    19
   209       |                                                                                                 |  8563    19
   209       +                                                                                                 +  8563    19
   210       |#ifndef SEEK_SET                                                                                 |  8564    19
   211       |#define SEEK_SET        0       /* set file offset to offset */                                  |  8565    19
   212       |#endif                                                                                           |  8566    19
   213       |#ifndef SEEK_CUR                                                                                 |  8567    19
   214       |#define SEEK_CUR        1       /* set file offset to current plus offset */                     |  8568    19
   215       |#endif                                                                                           |  8569    19
   216       |#ifndef SEEK_END                                                                                 |  8570    19
   217       |#define SEEK_END        2       /* set file offset to EOF plus offset */                         |  8571    19
   218       |#endif                                                                                           |  8572    19
   219       |                                                                                                 |  8573    19
   220       |#define stdin   __stdinp                                                                         |  8574    19
   221       |#define stdout  __stdoutp                                                                        |  8575    19
   222       |#define stderr  __stderrp                                                                        |  8576    19
   223       |                                                                                                 |  8577    19
   224       |/* Map some of the longer names to shorter versions for linking on */                            |  8578    19
   225       |/*  the mainframe. */                                                                            |  8579    19
   226       |#pragma map (setbuffer, "STB@FFER")                                                              |  8580    19
   227       |#pragma map (vasprintf, "V@SPRNTF")                                                              |  8581    19
   228       |#pragma map (vsnprintf, "VSNPRNT@")                                                              |  8582    19
   229       |                                                                                                 |  8583    19
   230       |__BEGIN_DECLS                                                                                    |  8584    19
   230       +                                                                                                 +  8584    19
   231       |/*                                                                                               |  8585    19
   232       | * Functions defined in ANSI C standard.                                                         |  8586    19
   233       | */                                                                                              |  8587    19
   234       |void     clearerr(FILE *);                                                                       |  8588    19
   235       |int      fclose(FILE *);                                                                         |  8589    19
   236       |int      feof(FILE *);                                                                           |  8590    19
   237       |int      ferror(FILE *);                                                                         |  8591    19
   238       |int      fflush(FILE *);                                                                         |  8592    19
   239       |int      fgetc(FILE *);                                                                          |  8593    19
   240       |int      fgetpos(FILE * __restrict, fpos_t * __restrict);                                        |  8594    19
   240       +int      fgetpos(FILE * __restrict__, fpos_t * __restrict__);                                    +  8594    19
   241       |char    *fgets(char * __restrict, int, FILE * __restrict);                                       |  8595    19
   241       +char    *fgets(char * __restrict__, int, FILE * __restrict__);                                   +  8595    19
   242       |FILE    *fopen(const char * __restrict, const char * __restrict);                                |  8596    19
   242       +FILE    *fopen(const char * __restrict__, const char * __restrict__);                            +  8596    19
   243       |int      fprintf(FILE * __restrict, const char * __restrict, ...);                               |  8597    19
   243       +int      fprintf(FILE * __restrict__, const char * __restrict__, ...);                           +  8597    19
   244       |int      fputc(int, FILE *);                                                                     |  8598    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   166


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   245       |int      fputs(const char * __restrict, FILE * __restrict);                                      |  8599    19
   245       +int      fputs(const char * __restrict__, FILE * __restrict__);                                  +  8599    19
   246       |size_t   fread(void * __restrict, size_t, size_t, FILE * __restrict);                            |  8600    19
   246       +size_t   fread(void * __restrict__, size_t, size_t, FILE * __restrict__);                        +  8600    19
   247       |FILE    *freopen(const char * __restrict, const char * __restrict,                               |  8601    19
   247       +FILE    *freopen(const char * __restrict__, const char * __restrict__,                           +  8601    19
   248       |                 FILE * __restrict);                                                             |  8602    19
   248       +                                  FILE * __restrict__);                                          +  8602    19
   249       |int      fscanf(FILE * __restrict, const char * __restrict, ...);                                |  8603    19
   249       +int      fscanf(FILE * __restrict__, const char * __restrict__, ...);                            +  8603    19
   250       |int      fseek(FILE *, long, int);                                                               |  8604    19
   251       |int      fsetpos(FILE *, const fpos_t *);                                                        |  8605    19
   252       |long     ftell(FILE *);                                                                          |  8606    19
   253       |size_t   fwrite(const void * __restrict, size_t, size_t, FILE * __restrict);                     |  8607    19
   253       +size_t   fwrite(const void * __restrict__, size_t, size_t, FILE * __restrict__);                 +  8607    19
   254       |int      getc(FILE *);                                                                           |  8608    19
   255       |int      getchar(void);                                                                          |  8609    19
   256       |char    *gets(char *);                                                                           |  8610    19
   257       |void     perror(const char *);                                                                   |  8611    19
   258       |int      printf(const char * __restrict, ...);                                                   |  8612    19
   258       +int      printf(const char * __restrict__, ...);                                                 +  8612    19
   259       |int      putc(int, FILE *);                                                                      |  8613    19
   260       |int      putchar(int);                                                                           |  8614    19
   261       |int      puts(const char *);                                                                     |  8615    19
   262       |int      remove(const char *);                                                                   |  8616    19
   263       |int      rename(const char *, const char *);                                                     |  8617    19
   264       |void     rewind(FILE *);                                                                         |  8618    19
   265       |int      scanf(const char * __restrict, ...);                                                    |  8619    19
   265       +int      scanf(const char * __restrict__, ...);                                                  +  8619    19
   266       |void     setbuf(FILE * __restrict, char * __restrict);                                           |  8620    19
   266       +void     setbuf(FILE * __restrict__, char * __restrict__);                                       +  8620    19
   267       |int      setvbuf(FILE * __restrict, char * __restrict, int, size_t);                             |  8621    19
   267       +int      setvbuf(FILE * __restrict__, char * __restrict__, int, size_t);                         +  8621    19
   268       |int      sprintf(char * __restrict, const char * __restrict, ...);                               |  8622    19
   268       +int      sprintf(char * __restrict__, const char * __restrict__, ...);                           +  8622    19
   269       |int      sscanf(const char * __restrict, const char * __restrict, ...);                          |  8623    19
   269       +int      sscanf(const char * __restrict__, const char * __restrict__, ...);                      +  8623    19
   270       |FILE    *tmpfile(void);                                                                          |  8624    19
   271       |char    *tmpnam(char *);                                                                         |  8625    19
   272       |int      ungetc(int, FILE *);                                                                    |  8626    19
   273       |int      vfprintf(FILE * __restrict, const char * __restrict,                                    |  8627    19
   273       +int      vfprintf(FILE * __restrict__, const char * __restrict__,                                +  8627    19
   274       |            __va_list);                                                                          |  8628    19
   275       |int      vprintf(const char * __restrict, __va_list);                                            |  8629    19
   275       +int      vprintf(const char * __restrict__, __va_list);                                          +  8629    19
   276       |int      vsprintf(char * __restrict, const char * __restrict,                                    |  8630    19
   276       +int      vsprintf(char * __restrict__, const char * __restrict__,                                +  8630    19
   277       |            __va_list);                                                                          |  8631    19
   278       |                                                                                                 |  8632    19
   279       |#if __ISO_C_VISIBLE >= 1999                                                                      |  8633    19
   280       |int      snprintf(char * __restrict, size_t, const char * __restrict,                            |  8634    19
   280       +int      snprintf(char * __restrict__, size_t, const char * __restrict__,                        +  8634    19
   281       |            ...) __printflike(3, 4);                                                             |  8635    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   167


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   281       +                    ...) ;                                                                       +  8635    19
   282       |int      vfscanf(FILE * __restrict, const char * __restrict, __va_list)                          |  8636    19
   282       +int      vfscanf(FILE * __restrict__, const char * __restrict__, __va_list)                      +  8636    19
   283       |            __scanflike(2, 0);                                                                   |  8637    19
   283       +                    ;                                                                            +  8637    19
   284       |int      vscanf(const char * __restrict, __va_list) __scanflike(1, 0);                           |  8638    19
   284       +int      vscanf(const char * __restrict__, __va_list) ;                                          +  8638    19
   285       |int      vsnprintf(char * __restrict, size_t, const char * __restrict,                           |  8639    19
   285       +int      vsnprintf(char * __restrict__, size_t, const char * __restrict__,                       +  8639    19
   286       |            __va_list) __printflike(3, 0);                                                       |  8640    19
   286       +                    __va_list) ;                                                                 +  8640    19
   287       |int      vsscanf(const char * __restrict, const char * __restrict, __va_list)                    |  8641    19
   287       +int      vsscanf(const char * __restrict__, const char * __restrict__, __va_list)                +  8641    19
   288       |            __scanflike(2, 0);                                                                   |  8642    19
   288       +                    ;                                                                            +  8642    19
   289       |#endif                                                                                           |  8643    19
   290       |                                                                                                 |  8644    19
   291       |/*                                                                                               |  8645    19
   292       | * Functions defined in all versions of POSIX 1003.1.                                            |  8646    19
   293       | */                                                                                              |  8647    19
   294       |#if __BSD_VISIBLE || __POSIX_VISIBLE <= 199506                                                   |  8648    19
   295       |/* size for cuserid(3); UT_NAMESIZE + 1, see <utmp.h> */                                         |  8649    19
   295       +                                                                                                 +  8649    19
   296       |#define L_cuserid       17      /* legacy */                                                     |  8650    19
   297       |#endif                                                                                           |  8651    19
   298       |                                                                                                 |  8652    19
   299       |#if __POSIX_VISIBLE                                                                              |  8653    19
   300       |#define L_ctermid       1024    /* size for ctermid(3); PATH_MAX */                              |  8654    19
   301       |                                                                                                 |  8655    19
   301       +                                                                                                 +  8655    19
   302       |char    *ctermid(char *);                                                                        |  8656    19
   303       |FILE    *fdopen(int, const char *);                                                              |  8657    19
   304       |int      fileno(FILE *);                                                                         |  8658    19
   305       |#endif /* __POSIX_VISIBLE */                                                                     |  8659    19
   306       |                                                                                                 |  8660    19
   307       |#if __POSIX_VISIBLE >= 199209                                                                    |  8661    19
   308       |int      pclose(FILE *);                                                                         |  8662    19
   308       +int      pclose(FILE *);                                                                         +  8662    19
   309       |FILE    *popen(const char *, const char *);                                                      |  8663    19
   310       |#endif                                                                                           |  8664    19
   311       |                                                                                                 |  8665    19
   312       |#if __POSIX_VISIBLE >= 199506                                                                    |  8666    19
   313       |int      ftrylockfile(FILE *);                                                                   |  8667    19
   313       +int      ftrylockfile(FILE *);                                                                   +  8667    19
   314       |#pragma map (flockfile, "@@FLCKFL")                                                              |  8668    19
   315       |void     flockfile(FILE *);                                                                      |  8669    19
   316       |void     funlockfile(FILE *);                                                                    |  8670    19
   317       |                                                                                                 |  8671    19
   318       |/*                                                                                               |  8672    19
   319       | * These are normally used through macros as defined below, but POSIX                            |  8673    19
   320       | * requires functions as well.                                                                   |  8674    19
   321       | */                                                                                              |  8675    19
   322       |int      getc_unlocked(FILE *);                                                                  |  8676    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   168


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   323       |int      getchar_unlocked(void);                                                                 |  8677    19
   324       |int      putc_unlocked(int, FILE *);                                                             |  8678    19
   325       |int      putchar_unlocked(int);                                                                  |  8679    19
   326       |#endif                                                                                           |  8680    19
   327       |#if __BSD_VISIBLE                                                                                |  8681    19
   328       |void    clearerr_unlocked(FILE *);                                                               |  8682    19
   328       +void    clearerr_unlocked(FILE *);                                                               +  8682    19
   329       |int     feof_unlocked(FILE *);                                                                   |  8683    19
   330       |int     ferror_unlocked(FILE *);                                                                 |  8684    19
   331       |int     fileno_unlocked(FILE *);                                                                 |  8685    19
   332       |#endif                                                                                           |  8686    19
   333       |                                                                                                 |  8687    19
   334       |#if __POSIX_VISIBLE >= 200112                                                                    |  8688    19
   335       |int      fseeko(FILE *, __off_t, int);                                                           |  8689    19
   335       +int      fseeko(FILE *, __off_t, int);                                                           +  8689    19
   336       |__off_t  ftello(FILE *);                                                                         |  8690    19
   337       |#endif                                                                                           |  8691    19
   338       |                                                                                                 |  8692    19
   339       |#if __BSD_VISIBLE || __XSI_VISIBLE > 0 && __XSI_VISIBLE < 600                                    |  8693    19
   340       |int      getw(FILE *);                                                                           |  8694    19
   340       +int      getw(FILE *);                                                                           +  8694    19
   341       |int      putw(int, FILE *);                                                                      |  8695    19
   342       |#endif /* BSD or X/Open before issue 6 */                                                        |  8696    19
   343       |                                                                                                 |  8697    19
   344       |#if __XSI_VISIBLE                                                                                |  8698    19
   345       |char    *tempnam(const char *, const char *);                                                    |  8699    19
   345       +char    *tempnam(const char *, const char *);                                                    +  8699    19
   346       |#endif                                                                                           |  8700    19
   347       |                                                                                                 |  8701    19
   348       |#if __POSIX_VISIBLE >= 200809                                                                    |  8702    19
   349       |/* FILE *fmemopen(void * __restrict, size_t, const char * __restrict); */                        |  8703    19
   349       +                                                                                                 +  8703    19
   350       |#pragma map(getdelim, "@@GETDLM")                                                                |  8704    19
   351       |ssize_t  getdelim(char ** __restrict, size_t * __restrict, int,                                  |  8705    19
   351       +ssize_t  getdelim(char ** __restrict__, size_t * __restrict__, int,                              +  8705    19
   352       |            FILE * __restrict);                                                                  |  8706    19
   352       +                    FILE * __restrict__);                                                        +  8706    19
   353       |/* FILE *open_memstream(char **, size_t *); */                                                   |  8707    19
   354       |/* int   renameat(int, const char *, int, const char *); */                                      |  8708    19
   355       |/* int   vdprintf(int, const char * __restrict, __va_list) __printflike(2, 0); */                |  8709    19
   356       |                                                                                                 |  8710    19
   357       |/*                                                                                               |  8711    19
   358       | * Every programmer and his dog wrote functions called getline() and dprintf()                   |  8712    19
   359       | * before POSIX.1-2008 came along and decided to usurp the names, so we                          |  8713    19
   360       | * don't prototype them by default unless one of the following is true:                          |  8714    19
   361       | *   a) the app has requested them specifically by defining _WITH_GETLINE or                     |  8715    19
   362       | *      _WITH_DPRINTF, respectively                                                              |  8716    19
   363       | *   b) the app has requested a POSIX.1-2008 environment via _POSIX_C_SOURCE                     |  8717    19
   364       | *   c) the app defines a GNUism such as _BSD_SOURCE or _GNU_SOURCE                              |  8718    19
   365       | */                                                                                              |  8719    19
   366       |#ifndef _WITH_GETLINE                                                                            |  8720    19
   367       |#if defined(_BSD_SOURCE) || defined(_GNU_SOURCE)                                                 |  8721    19
   368       |#define _WITH_GETLINE                                                                            |  8722    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   169


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   369       |#elif defined(_POSIX_C_SOURCE)                                                                   |  8723    19
   370       |#if _POSIX_C_SOURCE >= 200809                                                                    |  8724    19
   371       |#define _WITH_GETLINE                                                                            |  8725    19
   372       |#endif                                                                                           |  8726    19
   373       |#endif                                                                                           |  8727    19
   374       |#endif                                                                                           |  8728    19
   375       |                                                                                                 |  8729    19
   376       |#ifdef _WITH_GETLINE                                                                             |  8730    19
   377       |#pragma map(getline, "@@GETLNE")                                                                 |  8731    19
   378       |ssize_t  getline(char ** __restrict, size_t * __restrict, FILE * __restrict);                    |  8732    19
   378       +ssize_t  getline(char ** __restrict__, size_t * __restrict__, FILE * __restrict__);              +  8732    19
   379       |#endif                                                                                           |  8733    19
   380       |                                                                                                 |  8734    19
   381       |#endif /* __POSIX_VISIBLE >= 200809 */                                                           |  8735    19
   382       |/*                                                                                               |  8736    19
   383       | * Routines that are purely local.                                                               |  8737    19
   384       | */                                                                                              |  8738    19
   385       |#if __BSD_VISIBLE                                                                                |  8739    19
   386       |int      asprintf(char **, const char *, ...) __printflike(2, 3);                                |  8740    19
   386       +int      asprintf(char **, const char *, ...) ;                                                  +  8740    19
   387       |char    *ctermid_r(char *);                                                                      |  8741    19
   388       |char    *fgetln(FILE *, size_t *);                                                               |  8742    19
   389       |__const char *fmtcheck(const char *, const char *) __format_arg(2);                              |  8743    19
   389       +const char *fmtcheck(const char *, const char *) ;                                               +  8743    19
   390       |int      fpurge(FILE *);                                                                         |  8744    19
   391       |void     setbuffer(FILE *, char *, int);                                                         |  8745    19
   392       |int      setlinebuf(FILE *);                                                                     |  8746    19
   393       |int      vasprintf(char **, const char *, __va_list)                                             |  8747    19
   394       |            __printflike(2, 0);                                                                  |  8748    19
   394       +                    ;                                                                            +  8748    19
   395       |                                                                                                 |  8749    19
   396       |/*                                                                                               |  8750    19
   397       | * The system error table contains messages for the first sys_nerr                               |  8751    19
   398       | * positive errno values.  Use strerror() or strerror_r() from <string.h>                        |  8752    19
   399       | * instead.                                                                                      |  8753    19
   400       | */                                                                                              |  8754    19
   401       |extern __const int sys_nerr;                                                                     |  8755    19
   401       +extern const int sys_nerr;                                                                       +  8755    19
   402       |extern __const char *__const sys_errlist[];                                                      |  8756    19
   402       +extern const char *const sys_errlist[];                                                          +  8756    19
   403       |#pragma map(sys_errlist, "@@serrls")                                                             |  8757    19
   404       |                                                                                                 |  8758    19
   405       |/*                                                                                               |  8759    19
   406       | * Stdio function-access interface.                                                              |  8760    19
   407       | */                                                                                              |  8761    19
   408       |FILE    *funopen(const void *,                                                                   |  8762    19
   409       |            int (*)(void *, char *, int),                                                        |  8763    19
   410       |            int (*)(void *, const char *, int),                                                  |  8764    19
   411       |            fpos_t (*)(void *, fpos_t, int),                                                     |  8765    19
   412       |            int (*)(void *));                                                                    |  8766    19
   413       |#define fropen(cookie, fn) funopen(cookie, fn, 0, 0, 0)                                          |  8767    19
   414       |#define fwopen(cookie, fn) funopen(cookie, 0, fn, 0, 0)                                          |  8768    19
   415       |                                                                                                 |  8769    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   170


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   416       |/*                                                                                               |  8770    19
   417       | * Portability hacks.  See <sys/types.h>.                                                        |  8771    19
   418       | */                                                                                              |  8772    19
   419       |#ifndef _FTRUNCATE_DECLARED                                                                      |  8773    19
   420       |#define _FTRUNCATE_DECLARED                                                                      |  8774    19
   421       |#pragma map (ftruncate, "@@FTRUNC")                                                              |  8775    19
   422       |int      ftruncate(int, __off_t);                                                                |  8776    19
   423       |#endif                                                                                           |  8777    19
   424       |#ifndef _LSEEK_DECLARED                                                                          |  8778    19
   425       |#define _LSEEK_DECLARED                                                                          |  8779    19
   426       |__off_t  lseek(int, __off_t, int);                                                               |  8780    19
   427       |#endif                                                                                           |  8781    19
   428       |#ifndef _MMAP_DECLARED                                                                           |  8782    19
   429       |#define _MMAP_DECLARED                                                                           |  8783    19
   430       |void    *mmap(void *, size_t, int, int, int, __off_t);                                           |  8784    19
   431       |#endif                                                                                           |  8785    19
   432       |#ifndef _TRUNCATE_DECLARED                                                                       |  8786    19
   433       |#define _TRUNCATE_DECLARED                                                                       |  8787    19
   434       |int      truncate(const char *, __off_t);                                                        |  8788    19
   435       |#endif                                                                                           |  8789    19
   436       |#endif /* __BSD_VISIBLE */                                                                       |  8790    19
   437       |                                                                                                 |  8791    19
   438       |/*                                                                                               |  8792    19
   439       | * Functions internal to the implementation.                                                     |  8793    19
   440       | */                                                                                              |  8794    19
   441       |#pragma map (__srget, "@@SRGET")                                                                 |  8795    19
   442       |int     __srget(FILE *);                                                                         |  8796    19
   443       |#pragma map (__swbuf,"@@SWBUF")                                                                  |  8797    19
   444       |int     __swbuf(int, FILE *);                                                                    |  8798    19
   445       |                                                                                                 |  8799    19
   446       |/*                                                                                               |  8800    19
   447       | * The __sfoo macros are here so that we can                                                     |  8801    19
   448       | * define function versions in the C library.                                                    |  8802    19
   449       | */                                                                                              |  8803    19
   450       |#define __sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))                              |  8804    19
   451       |#if (defined(__GNUC__) || (defined(__SYSC__) && __SYSC_VER__ >= 16500)) && \                     |  8805    19
   452       |    defined(__STDC__)                                                                            |  8806    19
   453       |static __inline int __sputc(int _c, FILE *_p) {                                                  |  8807    19
   453       +static __inline__ int __sputc(int _c, FILE *_p) {                                                +  8807    19
   454       |        if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))                       |  8808    19
   455       |                return (*_p->_p++ = _c);                                                         |  8809    19
   456       |        else                                                                                     |  8810    19
   457       |                return (__swbuf(_c, _p));                                                        |  8811    19
   458       |}                                                                                                |  8812    19
   459       |#else                                                                                            |  8813    19
   460       |/*                                                                                               |  8814    19
   461       | * This has been tuned to generate reasonable code on the vax using pcc.                         |  8815    19
   462       | */                                                                                              |  8816    19
   463       |#define __sputc(c, p) \                                                                          |  8817    19
   464       |        (--(p)->_w < 0 ? \                                                                       |  8818    19
   465       |                (p)->_w >= (p)->_lbfsize ? \                                                     |  8819    19
   466       |                        (*(p)->_p = (c)), *(p)->_p != '\n' ? \                                   |  8820    19
   467       |                                (int)*(p)->_p++ : \                                              |  8821    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   171


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   468       |                                __swbuf('\n', p) : \                                             |  8822    19
   469       |                        __swbuf((int)(c), p) : \                                                 |  8823    19
   470       |                (*(p)->_p = (c), (int)*(p)->_p++))                                               |  8824    19
   471       |#endif                                                                                           |  8825    19
   472       |                                                                                                 |  8826    19
   473       |#define __sfeof(p)      (((p)->_flags & __SEOF) != 0)                                            |  8827    19
   474       |#define __sferror(p)    (((p)->_flags & __SERR) != 0)                                            |  8828    19
   475       |#define __sclearerr(p)  ((void)((p)->_flags &= ~(__SERR|__SEOF)))                                |  8829    19
   476       |#define __sfileno(p)    ((p)->_file)                                                             |  8830    19
   477       |                                                                                                 |  8831    19
   478       |extern int __isthreaded;                                                                         |  8832    19
   479       |                                                                                                 |  8833    19
   480       |#define feof(p)         (!__isthreaded ? __sfeof(p) : (feof)(p))                                 |  8834    19
   481       |#define ferror(p)       (!__isthreaded ? __sferror(p) : (ferror)(p))                             |  8835    19
   482       |#define clearerr(p)     (!__isthreaded ? __sclearerr(p) : (clearerr)(p))                         |  8836    19
   483       |                                                                                                 |  8837    19
   484       |#if __POSIX_VISIBLE                                                                              |  8838    19
   485       |#define fileno(p)       (!__isthreaded ? __sfileno(p) : (fileno)(p))                             |  8839    19
   486       |#endif                                                                                           |  8840    19
   487       |                                                                                                 |  8841    19
   487       +                                                                                                 +  8841    19
   488       |#define getc(fp)        (!__isthreaded ? __sgetc(fp) : (getc)(fp))                               |  8842    19
   489       |#define putc(x, fp)     (!__isthreaded ? __sputc(x, fp) : (putc)(x, fp))                         |  8843    19
   490       |                                                                                                 |  8844    19
   491       |#define getchar()       getc(stdin)                                                              |  8845    19
   492       |#define putchar(x)      putc(x, stdout)                                                          |  8846    19
   493       |                                                                                                 |  8847    19
   494       |#if __BSD_VISIBLE                                                                                |  8848    19
   495       |/*                                                                                               |  8849    19
   496       | * See ISO/IEC 9945-1 ANSI/IEEE Std 1003.1 Second Edition 1996-07-12                             |  8850    19
   497       | * B.8.2.7 for the rationale behind the *_unlocked() macros.                                     |  8851    19
   498       | */                                                                                              |  8852    19
   498       +                                                                                                 +  8852    19
   499       |#define feof_unlocked(p)        __sfeof(p)                                                       |  8853    19
   500       |#define ferror_unlocked(p)      __sferror(p)                                                     |  8854    19
   501       |#define clearerr_unlocked(p)    __sclearerr(p)                                                   |  8855    19
   502       |#define fileno_unlocked(p)      __sfileno(p)                                                     |  8856    19
   503       |#endif                                                                                           |  8857    19
   504       |#if __POSIX_VISIBLE >= 199506                                                                    |  8858    19
   505       |#define getc_unlocked(fp)       __sgetc(fp)                                                      |  8859    19
   506       |#define putc_unlocked(x, fp)    __sputc(x, fp)                                                   |  8860    19
   507       |                                                                                                 |  8861    19
   507       +                                                                                                 +  8861    19
   508       |#define getchar_unlocked()      getc_unlocked(stdin)                                             |  8862    19
   509       |#define putchar_unlocked(x)     putc_unlocked(x, stdout)                                         |  8863    19
   510       |#endif                                                                                           |  8864    19
   511       |                                                                                                 |  8865    19
   512       |__END_DECLS                                                                                      |  8866    19
   512       +                                                                                                 +  8866    19
   513       |#endif /* !_STDIO_H_ */                                                                          |  8867    19
   514       |#pragma pack(reset)                                                                              |  8868    19
    49       |#include <stdlib.h>                                                                              |  8869    18
     1       |/* release 2.25.00 */                                                                            |  8870    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   172


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   |  8871    20
     3       |/*-                                                                                              |  8872    20
     4       | * Copyright (c) 1990, 1993                                                                      |  8873    20
     5       | *      The Regents of the University of California.  All rights reserved.                       |  8874    20
     6       | *                                                                                               |  8875    20
     7       | * Redistribution and use in source and binary forms, with or without                            |  8876    20
     8       | * modification, are permitted provided that the following conditions                            |  8877    20
     9       | * are met:                                                                                      |  8878    20
    10       | * 1. Redistributions of source code must retain the above copyright                             |  8879    20
    11       | *    notice, this list of conditions and the following disclaimer.                              |  8880    20
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  8881    20
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  8882    20
    14       | *    documentation and/or other materials provided with the distribution.                       |  8883    20
    15       | * 3. All advertising materials mentioning features or use of this software                      |  8884    20
    16       | *    must display the following acknowledgement:                                                |  8885    20
    17       | *      This product includes software developed by the University of                            |  8886    20
    18       | *      California, Berkeley and its contributors.                                               |  8887    20
    19       | * 4. Neither the name of the University nor the names of its contributors                       |  8888    20
    20       | *    may be used to endorse or promote products derived from this software                      |  8889    20
    21       | *    without specific prior written permission.                                                 |  8890    20
    22       | *                                                                                               |  8891    20
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  8892    20
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  8893    20
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  8894    20
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  8895    20
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  8896    20
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  8897    20
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  8898    20
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  8899    20
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  8900    20
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  8901    20
    33       | * SUCH DAMAGE.                                                                                  |  8902    20
    34       | *                                                                                               |  8903    20
    35       | *       @(#)stdlib.h    8.5 (Berkeley) 5/19/95                                                  |  8904    20
    36       | */                                                                                              |  8905    20
    37       |                                                                                                 |  8906    20
    38       |#ifndef _STDLIB_H_                                                                               |  8907    20
    39       |#define _STDLIB_H_                                                                               |  8908    20
    40       |                                                                                                 |  8909    20
    41       |#include <sys/cdefs.h>                                                                           |  8910    20
     1       |/* release 2.25.00 */                                                                            |  8911     4
     2       |#pragma pack()                                                                                   |  8912     4
     3       |/*                                                                                               |  8913     4
     4       | * Copyright (c) 1991, 1993                                                                      |  8914     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  8915     4
     6       | *                                                                                               |  8916     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  8917     4
     8       | * Berkeley Software Design, Inc.                                                                |  8918     4
     9       | *                                                                                               |  8919     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  8920     4
    11       | * modification, are permitted provided that the following conditions                            |  8921     4
    12       | * are met:                                                                                      |  8922     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  8923     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   173


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    14       | *    notice, this list of conditions and the following disclaimer.                              |  8924     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  8925     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  8926     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  8927     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  8928     4
    19       | *    must display the following acknowledgement:                                                |  8929     4
    20       | *      This product includes software developed by the University of                            |  8930     4
    21       | *      California, Berkeley and its contributors.                                               |  8931     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  8932     4
    23       | *    may be used to endorse or promote products derived from this software                      |  8933     4
    24       | *    without specific prior written permission.                                                 |  8934     4
    25       | *                                                                                               |  8935     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  8936     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  8937     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  8938     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  8939     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  8940     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  8941     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  8942     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  8943     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  8944     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  8945     4
    36       | * SUCH DAMAGE.                                                                                  |  8946     4
    37       | *                                                                                               |  8947     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  8948     4
    39       | */                                                                                              |  8949     4
    40       |                                                                                                 |  8950     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  8951     4
    42       |#define _SYS_CDEFS_H_                                                                            |  8952     4
    43       |                                                                                                 |  8953     4
    44       |#if defined(__cplusplus)                                                                         |  8954     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  8955     4
    46       |#define __END_DECLS     }                                                                        |  8956     4
    47       |#else                                                                                            |  8957     4
    48       |#define __BEGIN_DECLS                                                                            |  8958     4
    49       |#define __END_DECLS                                                                              |  8959     4
    50       |#endif                                                                                           |  8960     4
    51       |                                                                                                 |  8961     4
    52       |/*                                                                                               |  8962     4
    53       | * This code has been put in place to help reduce the addition of                                |  8963     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  8964     4
    55       | * having a compiler-agnostic source tree.                                                       |  8965     4
    56       | */                                                                                              |  8966     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  8967     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  8968     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  8969     4
    60       |                                                                                                 |  8970     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  8971     4
    62       |                                                                                                 |  8972     4
    63       |                                                                                                 |  8973     4
    64       |/*                                                                                               |  8974     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  8975     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  8976     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   174


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  8977     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  8978     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  8979     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  8980     4
    71       | * this only works with ANSI C.                                                                  |  8981     4
    72       | *                                                                                               |  8982     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  8983     4
    74       | * first.  It is only available with ANSI C.                                                     |  8984     4
    75       | */                                                                                              |  8985     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  8986     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  8987     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  8988     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  8989     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  8990     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  8991     4
    82       |                                                                                                 |  8992     4
    83       |#define __const         const           /* define reserved names to standard */                  |  8993     4
    84       |#define __signed        signed                                                                   |  8994     4
    85       |#define __volatile      volatile                                                                 |  8995     4
    86       |#if defined(__cplusplus)                                                                         |  8996     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  8997     4
    88       |#else                                                                                            |  8998     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  8999     4
    90       |#endif /* !__cplusplus */                                                                        |  9000     4
    91       |                                                                                                 |  9001     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  9002     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  9003     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  9004     4
    95       |#define __STRING(x)     "x"                                                                      |  9005     4
    96       |                                                                                                 |  9006     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  9007     4
    98       |#define __inline                                                                                 |  9008     4
    99       |#define __signed                                                                                 |  9009     4
   100       |#define __volatile                                                                               |  9010     4
   101       |/*                                                                                               |  9011     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  9012     4
   103       | * deleted from the program and old programs will want them left alone.                          |  9013     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  9014     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  9015     4
   106       | */                                                                                              |  9016     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  9017     4
   108       |#define const                           /* delete ANSI C keywords */                             |  9018     4
   109       |#define inline                                                                                   |  9019     4
   110       |#define signed                                                                                   |  9020     4
   111       |#define volatile                                                                                 |  9021     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  9022     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  9023     4
   114       |                                                                                                 |  9024     4
   115       |/*                                                                                               |  9025     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  9026     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  9027     4
   118       | */                                                                                              |  9028     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  9029     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   175


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   120       |#define __pure  __attribute__((__pure__))                                                        |  9030     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  9031     4
   122       |#define __unused                                                                                 |  9032     4
   123       |#define __aligned(x)                                                                             |  9033     4
   124       |#define __section(x)                                                                             |  9034     4
   125       |#define __nonnull(x)                                                                             |  9035     4
   126       |#define __used                                                                                   |  9036     4
   127       |                                                                                                 |  9037     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  9038     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  9039     4
   130       |                                                                                                 |  9040     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  9041     4
   132       |#define __func__  NULL                                                                           |  9042     4
   133       |#endif                                                                                           |  9043     4
   134       |                                                                                                 |  9044     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  9045     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  9046     4
   137       |#endif                                                                                           |  9047     4
   138       |                                                                                                 |  9048     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  9049     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  9050     4
   141       | **/                                                                                             |  9051     4
   142       |#ifndef __cplusplus                                                                              |  9052     4
   143       |#define __restrict __restrict__                                                                  |  9053     4
   144       |#else                                                                                            |  9054     4
   145       |/* Systems/C++ does not */                                                                       |  9055     4
   146       |#define __restrict                                                                               |  9056     4
   147       |#endif                                                                                           |  9057     4
   148       |                                                                                                 |  9058     4
   149       |/*                                                                                               |  9059     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  9060     4
   151       | */                                                                                              |  9061     4
   152       |#define __predict_true(exp)     (exp)                                                            |  9062     4
   153       |#define __predict_false(exp)    (exp)                                                            |  9063     4
   154       |                                                                                                 |  9064     4
   155       |                                                                                                 |  9065     4
   156       |/*                                                                                               |  9066     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  9067     4
   158       | * <sys/types.h> reference __offsetof().                                                         |  9068     4
   159       | *                                                                                               |  9069     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  9070     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  9071     4
   162       | */                                                                                              |  9072     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  9073     4
   164       |#undef __offsetof                                                                                |  9074     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  9075     4
   166       |#endif                                                                                           |  9076     4
   167       |                                                                                                 |  9077     4
   168       |/*                                                                                               |  9078     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  9079     4
   170       | * or scanf-like arguments.                                                                      |  9080     4
   171       | */                                                                                              |  9081     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  9082     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   176


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  9083     4
   174       |#define __format_arg(fmtarg)                                                                     |  9084     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  9085     4
   176       |                                                                                                 |  9086     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  9087     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  9088     4
   179       |                                                                                                 |  9089     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  9090     4
   181       |#define __weak_reference(sym,alias)                                                              |  9091     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  9092     4
   183       |#define __warn_references(sym,msg)                                                               |  9093     4
   184       |                                                                                                 |  9094     4
   185       | /* This places the string into the resulting object.  It should */                              |  9095     4
   186       | /* probably become #pragma ident */                                                             |  9096     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  9097     4
   188       |                                                                                                 |  9098     4
   189       |#ifndef __RCSID                                                                                  |  9099     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  9100     4
   191       |#endif                                                                                           |  9101     4
   192       |                                                                                                 |  9102     4
   193       |/*                                                                                               |  9103     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  9104     4
   195       | * Usage:                                                                                        |  9105     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  9106     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  9107     4
   198       | */                                                                                              |  9108     4
   199       |#ifndef __SYSCID                                                                                 |  9109     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  9110     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                |  9111     4
   202       |#else                                                                                            |  9112     4
   203       |#define __SYSCID(s)     struct __hack                                                            |  9113     4
   204       |#endif                                                                                           |  9114     4
   205       |#endif                                                                                           |  9115     4
   206       |                                                                                                 |  9116     4
   207       |#ifndef __RCSID_SOURCE                                                                           |  9117     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             |  9118     4
   209       |#endif                                                                                           |  9119     4
   210       |                                                                                                 |  9120     4
   211       |#ifndef __COPYRIGHT                                                                              |  9121     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  |  9122     4
   213       |#endif                                                                                           |  9123     4
   214       |                                                                                                 |  9124     4
   215       |                                                                                                 |  9125     4
   216       |#ifndef __DECONST                                                                                |  9126     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           |  9127     4
   218       |#endif                                                                                           |  9128     4
   219       |                                                                                                 |  9129     4
   220       |#ifndef __DEVOLATILE                                                                             |  9130     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        |  9131     4
   222       |#endif                                                                                           |  9132     4
   223       |                                                                                                 |  9133     4
   224       |#ifndef __DEQUALIFY                                                                              |  9134     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  |  9135     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   177


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   226       |#endif                                                                                           |  9136     4
   227       |                                                                                                 |  9137     4
   228       |                                                                                                 |  9138     4
   229       |/*-                                                                                              |  9139     4
   230       | * The following definitions are an extension of the behavior originally                         |  9140     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  9141     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       |  9142     4
   233       | * header file is included.                                                                      |  9143     4
   234       | *                                                                                               |  9144     4
   235       | * Here's a quick run-down of the versions:                                                      |  9145     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  9146     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  9147     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  9148     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  9149     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  9150     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  9151     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  9152     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  9153     4
   244       | *                                                                                               |  9154     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  9155     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    |  9156     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  9157     4
   248       | *                                                                                               |  9158     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            |  9159     4
   250       | */                                                                                              |  9160     4
   251       |                                                                                                 |  9161     4
   252       |/*                                                                                               |  9162     4
   253       | * If no special macro was specified, make the DragonFly extensions                              |  9163     4
   254       | * available. Also make them available when requested so.                                        |  9164     4
   255       | */                                                                                              |  9165     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   |  9166     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        |  9167     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        |  9168     4
   259       |#define __DF_VISIBLE    1                                                                        |  9169     4
   260       |#else                                                                                            |  9170     4
   261       |#define __DF_VISIBLE    0                                                                        |  9171     4
   262       |#endif                                                                                           |  9172     4
   263       |                                                                                                 |  9173     4
   264       |/*-                                                                                              |  9174     4
   265       | * The following definitions are an extension of the behavior originally                         |  9175     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     |  9176     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       |  9177     4
   268       | * header file is included.                                                                      |  9178     4
   269       | *                                                                                               |  9179     4
   270       | * Here's a quick run-down of the versions:                                                      |  9180     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              |  9181     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              |  9182     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    |  9183     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             |  9184     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              |  9185     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     |  9186     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              |  9187     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              |  9188     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   178


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   279       | *                                                                                               |  9189     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       |  9190     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    |  9191     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       |  9192     4
   283       | *                                                                                               |  9193     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            |  9194     4
   285       | */                                                                                              |  9195     4
   286       |                                                                                                 |  9196     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            |  9197     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             |  9198     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   |  9199     4
   290       |#define _POSIX_C_SOURCE         199009                                                           |  9200     4
   291       |#endif                                                                                           |  9201     4
   292       |                                                                                                 |  9202     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            |  9203     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             |  9204     4
   295       |#undef _POSIX_C_SOURCE                                                                           |  9205     4
   296       |#define _POSIX_C_SOURCE         199209                                                           |  9206     4
   297       |#endif                                                                                           |  9207     4
   298       |                                                                                                 |  9208     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          |  9209     4
   300       |#ifdef _XOPEN_SOURCE                                                                             |  9210     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     |  9211     4
   302       |#define __XSI_VISIBLE           700                                                              |  9212     4
   303       |#undef _POSIX_C_SOURCE                                                                           |  9213     4
   304       |#define _POSIX_C_SOURCE         200809                                                           |  9214     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   |  9215     4
   306       |#define __XSI_VISIBLE           600                                                              |  9216     4
   307       |#undef _POSIX_C_SOURCE                                                                           |  9217     4
   308       |#define _POSIX_C_SOURCE         200112                                                           |  9218     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   |  9219     4
   310       |#define __XSI_VISIBLE           500                                                              |  9220     4
   311       |#undef _POSIX_C_SOURCE                                                                           |  9221     4
   312       |#define _POSIX_C_SOURCE         199506                                                           |  9222     4
   313       |#endif                                                                                           |  9223     4
   314       |#endif                                                                                           |  9224     4
   315       |                                                                                                 |  9225     4
   316       |/*                                                                                               |  9226     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 |  9227     4
   318       | * important.                                                                                    |  9228     4
   319       | */                                                                                              |  9229     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          |  9230     4
   321       |#define _POSIX_C_SOURCE         198808                                                           |  9231     4
   322       |#endif                                                                                           |  9232     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           |  9233     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    |  9234     4
   325       |#define __POSIX_VISIBLE         200809                                                           |  9235     4
   326       |#define __ISO_C_VISIBLE         1999                                                             |  9236     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  |  9237     4
   328       |#define __POSIX_VISIBLE         200112                                                           |  9238     4
   329       |#define __ISO_C_VISIBLE         1999                                                             |  9239     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  |  9240     4
   331       |#define __POSIX_VISIBLE         199506                                                           |  9241     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   179


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   332       |#define __ISO_C_VISIBLE         1990                                                             |  9242     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  |  9243     4
   334       |#define __POSIX_VISIBLE         199309                                                           |  9244     4
   335       |#define __ISO_C_VISIBLE         1990                                                             |  9245     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  |  9246     4
   337       |#define __POSIX_VISIBLE         199209                                                           |  9247     4
   338       |#define __ISO_C_VISIBLE         1990                                                             |  9248     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  |  9249     4
   340       |#define __POSIX_VISIBLE         199009                                                           |  9250     4
   341       |#define __ISO_C_VISIBLE         1990                                                             |  9251     4
   342       |#else                                                                                            |  9252     4
   343       |#define __POSIX_VISIBLE         198808                                                           |  9253     4
   344       |#define __ISO_C_VISIBLE         0                                                                |  9254     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     |  9255     4
   346       |#else                                                                                            |  9256     4
   347       |/*-                                                                                              |  9257     4
   348       | * Deal with _ANSI_SOURCE:                                                                       |  9258     4
   349       | * If it is defined, and no other compilation environment is explicitly                          |  9259     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        |  9260     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   |  9261     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 |  9262     4
   353       | * a test program to print out the values.                                                       |  9263     4
   354       | *                                                                                               |  9264     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     |  9265     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         |  9266     4
   357       | * environment (and in fact we will never get here).                                             |  9267     4
   358       | */                                                                                              |  9268     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    |  9269     4
   360       |#define __POSIX_VISIBLE         0                                                                |  9270     4
   361       |#define __XSI_VISIBLE           0                                                                |  9271     4
   362       |#define __BSD_VISIBLE           0                                                                |  9272     4
   363       |#define __ISO_C_VISIBLE         1990                                                             |  9273     4
   364       |#define __EXT1_VISIBLE          0                                                                |  9274     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        |  9275     4
   366       |#define __POSIX_VISIBLE         0                                                                |  9276     4
   367       |#define __XSI_VISIBLE           0                                                                |  9277     4
   368       |#define __BSD_VISIBLE           0                                                                |  9278     4
   369       |#define __ISO_C_VISIBLE         1999                                                             |  9279     4
   370       |#define __EXT1_VISIBLE          0                                                                |  9280     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        |  9281     4
   372       |#define __POSIX_VISIBLE         0                                                                |  9282     4
   373       |#define __XSI_VISIBLE           0                                                                |  9283     4
   374       |#define __BSD_VISIBLE           0                                                                |  9284     4
   375       |#define __ISO_C_VISIBLE         2011                                                             |  9285     4
   376       |#define __EXT1_VISIBLE          0                                                                |  9286     4
   377       |#else                           /* Default environment: show everything. */                      |  9287     4
   378       |#define __POSIX_VISIBLE         200809                                                           |  9288     4
   379       |#define __XSI_VISIBLE           700                                                              |  9289     4
   380       |#define __BSD_VISIBLE           1                                                                |  9290     4
   381       |#define __ISO_C_VISIBLE         2011                                                             |  9291     4
   382       |#define __EXT1_VISIBLE          1                                                                |  9292     4
   383       |#endif                                                                                           |  9293     4
   384       |#endif                                                                                           |  9294     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   180


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   385       |                                                                                                 |  9295     4
   386       |/* User override __EXT1_VISIBLE */                                                               |  9296     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              |  9297     4
   388       |#undef  __EXT1_VISIBLE                                                                           |  9298     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       |  9299     4
   390       |#define __EXT1_VISIBLE          1                                                                |  9300     4
   391       |#else                                                                                            |  9301     4
   392       |#define __EXT1_VISIBLE          0                                                                |  9302     4
   393       |#endif                                                                                           |  9303     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              |  9304     4
   395       |                                                                                                 |  9305     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                |  9306     4
   397       |#define __NO_TLS 1                                                                               |  9307     4
   398       |#endif                                                                                           |  9308     4
   399       |                                                                                                 |  9309     4
   400       |                                                                                                 |  9310     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            |  9311     4
   402       |#define __FBSDID(x)                                                                              |  9312     4
   403       |                                                                                                 |  9313     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      |  9314     4
   405       |#pragma pack(reset)                                                                              |  9315     4
    42       |#include <sys/_null.h>                                                                           |  9316    20
     1       |/* release 2.25.00 */                                                                            |  9317    15
     2       |#pragma pack()                                                                                   |  9318    15
     3       |/*-                                                                                              |  9319    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           |  9320    15
     5       | * All rights reserved.                                                                          |  9321    15
     6       | *                                                                                               |  9322    15
     7       | * Redistribution and use in source and binary forms, with or without                            |  9323    15
     8       | * modification, are permitted provided that the following conditions                            |  9324    15
     9       | * are met:                                                                                      |  9325    15
    10       | *                                                                                               |  9326    15
    11       | * 1. Redistributions of source code must retain the above copyright                             |  9327    15
    12       | *    notice, this list of conditions and the following disclaimer.                              |  9328    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9329    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        |  9330    15
    15       | *    documentation and/or other materials provided with the distribution.                       |  9331    15
    16       | *                                                                                               |  9332    15
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          |  9333    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     |  9334    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       |  9335    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              |  9336    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      |  9337    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     |  9338    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         |  9339    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           |  9340    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      |  9341    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             |  9342    15
    27       | *                                                                                               |  9343    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             |  9344    15
    29       | */                                                                                              |  9345    15
    30       |                                                                                                 |  9346    15
    31       |#ifndef NULL                                                                                     |  9347    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   181


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    32       |                                                                                                 |  9348    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    |  9349    15
    34       |#define NULL    ((void *)0)                                                                      |  9350    15
    35       |#else                                                                                            |  9351    15
    36       |#if defined(__LP64__)                                                                            |  9352    15
    37       |#define NULL    (0L)                                                                             |  9353    15
    38       |#else                                                                                            |  9354    15
    39       |#define NULL    0                                                                                |  9355    15
    40       |#endif  /* __LP64__ */                                                                           |  9356    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            |  9357    15
    42       |                                                                                                 |  9358    15
    43       |#endif                                                                                           |  9359    15
    44       |#pragma pack(reset)                                                                              |  9360    15
    43       |#include <sys/_types.h>                                                                          |  9361    20
     1       |/* release 2.25.00 */                                                                            |  9362     6
     2       |#pragma pack()                                                                                   |  9363     6
     3       |/*-                                                                                              |  9364     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           |  9365     6
     5       | * All rights reserved.                                                                          |  9366     6
     6       | *                                                                                               |  9367     6
     7       | * Redistribution and use in source and binary forms, with or without                            |  9368     6
     8       | * modification, are permitted provided that the following conditions                            |  9369     6
     9       | * are met:                                                                                      |  9370     6
    10       | * 1. Redistributions of source code must retain the above copyright                             |  9371     6
    11       | *    notice, this list of conditions and the following disclaimer.                              |  9372     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9373     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  9374     6
    14       | *    documentation and/or other materials provided with the distribution.                       |  9375     6
    15       | *                                                                                               |  9376     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        |  9377     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  9378     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  9379     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       |  9380     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  9381     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  9382     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  9383     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  9384     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  9385     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  9386     6
    26       | * SUCH DAMAGE.                                                                                  |  9387     6
    27       | *                                                                                               |  9388     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           |  9389     6
    29       | */                                                                                              |  9390     6
    30       |                                                                                                 |  9391     6
    31       |#ifndef _SYS__TYPES_H_                                                                           |  9392     6
    32       |#define _SYS__TYPES_H_                                                                           |  9393     6
    33       |                                                                                                 |  9394     6
    34       |#include <sys/cdefs.h>                                                                           |  9395     6
    35       |#include <machine/_types.h>                                                                      |  9396     6
    36       |                                                                                                 |  9397     6
    37       |/*                                                                                               |  9398     6
    38       | * Standard type definitions.                                                                    |  9399     6
    39       | */                                                                                              |  9400     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   182


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    |  9401     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   |  9402     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 |  9403     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         |  9404     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            |  9405     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            |  9406     6
    46       |typedef __uint32_t      __gid_t;                                                                 |  9407     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  |  9408     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       |  9409     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            |  9410     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             |  9411     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        |  9412     6
    52       |typedef int             __nl_item;                                                               |  9413     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         |  9414     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        |  9415     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    |  9416     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     |  9417     6
    57       |                                        /* signed, because of legacy code */                     |  9418     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     |  9419     6
    59       |typedef __uint8_t       __sa_family_t;                                                           |  9420     6
    60       |typedef __uint32_t      __socklen_t;                                                             |  9421     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              |  9422     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 |  9423     6
    63       |typedef __uint32_t      __uid_t;                                                                 |  9424     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            |  9425     6
    65       |                                                                                                 |  9426     6
    66       |/*                                                                                               |  9427     6
    67       | * Unusual type definitions.                                                                     |  9428     6
    68       | */                                                                                              |  9429     6
    69       |/*                                                                                               |  9430     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               |  9431     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     |  9432     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    |  9433     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       |  9434     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      |  9435     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       |  9436     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             |  9437     6
    77       | *                                                                                               |  9438     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       |  9439     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        |  9440     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          |  9441     6
    81       | * wchar_t, and should be able to hold all members of the largest                                |  9442     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      |  9443     6
    83       | */                                                                                              |  9444     6
    84       |#ifdef __cplusplus                                                                               |  9445     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    |  9446     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 |  9447     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           |  9448     6
    88       |#else                                                                                            |  9449     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           |  9450     6
    90       |#endif                                                                                           |  9451     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 |  9452     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                |  9453     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   183


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 |  9454     6
    94       |                                                                                                 |  9455     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          |  9456     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               |  9457     6
    97       |#define _CHAR16_T_DECLARED                                                                       |  9458     6
    98       |#define _CHAR32_T_DECLARED                                                                       |  9459     6
    99       |#endif                                                                                           |  9460     6
   100       |                                                                                                 |  9461     6
   101       |#if !defined(__cplusplus)                                                                        |  9462     6
   102       |typedef __uint_least16_t __char16_t;                                                             |  9463     6
   103       |typedef __uint_least32_t __char32_t;                                                             |  9464     6
   104       |#endif                                                                                           |  9465     6
   105       |                                                                                                 |  9466     6
   106       |                                                                                                 |  9467     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      |  9468     6
   108       |                                                                                                 |  9469     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 |  9470     6
   110       |                                                                                                 |  9471     6
   111       |/*                                                                                               |  9472     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       |  9473     6
   113       | * stream conversions.                                                                           |  9474     6
   114       | */                                                                                              |  9475     6
   115       |typedef union {                                                                                  |  9476     6
   116       |        char            __mbstate8[128];                                                         |  9477     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      |  9478     6
   118       |} __mbstate_t;                                                                                   |  9479     6
   119       |                                                                                                 |  9480     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     |  9481     6
   121       |#pragma pack(reset)                                                                              |  9482     6
    44       |                                                                                                 |  9483    20
    45       |#if __BSD_VISIBLE                                                                                |  9484    20
    46       |#ifndef _RUNE_T_DECLARED                                                                         |  9485    20
    47       |typedef __rune_t        rune_t;                                                                  |  9486    20
    47       +typedef __rune_t        rune_t;                                                                  +  9486    20
    48       |#define _RUNE_T_DECLARED                                                                         |  9487    20
    49       |#endif                                                                                           |  9488    20
    50       |#endif                                                                                           |  9489    20
    51       |                                                                                                 |  9490    20
    52       |#ifndef _SIZE_T_DECLARED                                                                         |  9491    20
    53       |typedef __size_t        size_t;                                                                  |  9492    20
    54       |#define _SIZE_T_DECLARED                                                                         |  9493    20
    55       |#endif                                                                                           |  9494    20
    56       |                                                                                                 |  9495    20
    57       |#ifndef __cplusplus                                                                              |  9496    20
    58       |#ifndef _WCHAR_T_DECLARED                                                                        |  9497    20
    59       |typedef __wchar_t       wchar_t;                                                                 |  9498    20
    60       |#define _WCHAR_T_DECLARED                                                                        |  9499    20
    61       |#endif                                                                                           |  9500    20
    62       |#endif                                                                                           |  9501    20
    63       |                                                                                                 |  9502    20
    64       |typedef struct {                                                                                 |  9503    20
    65       |        int quot;               /* quotient */                                                   |  9504    20
    66       |        int rem;                /* remainder */                                                  |  9505    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   184


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    67       |} div_t;                                                                                         |  9506    20
    68       |                                                                                                 |  9507    20
    69       |typedef struct {                                                                                 |  9508    20
    70       |        long quot;              /* quotient */                                                   |  9509    20
    71       |        long rem;               /* remainder */                                                  |  9510    20
    72       |} ldiv_t;                                                                                        |  9511    20
    73       |                                                                                                 |  9512    20
    74       |#define EXIT_FAILURE    16                                                                       |  9513    20
    75       |#define EXIT_SUCCESS    0                                                                        |  9514    20
    76       |                                                                                                 |  9515    20
    77       |#define RAND_MAX        0x7fffffff                                                               |  9516    20
    78       |                                                                                                 |  9517    20
    79       |extern int __mb_cur_max;                                                                         |  9518    20
    80       |#define MB_CUR_MAX      __mb_cur_max                                                             |  9519    20
    81       |                                                                                                 |  9520    20
    82       |__BEGIN_DECLS                                                                                    |  9521    20
    82       +                                                                                                 +  9521    20
    83       |void     abort (void) __dead2;                                                                   |  9522    20
    83       +void     abort (void) __attribute__((__noreturn__));                                             +  9522    20
    84       |#ifdef __cplusplus                                                                               |  9523    20
    85       |extern "builtin" {                                                                               |  9524    20
    86       |#else                                                                                            |  9525    20
    87       |#pragma linkage (__abs, builtin)                                                                 |  9526    20
    88       |#pragma linkage (__labs, builtin)                                                                |  9527    20
    89       |#endif                                                                                           |  9528    20
    90       |int      __abs (int);                                                                            |  9529    20
    91       |long     __labs (long);                                                                          |  9530    20
    92       |#ifdef __cplusplus                                                                               |  9531    20
    93       |}                                                                                                |  9532    20
    94       |#endif                                                                                           |  9533    20
    95       |                                                                                                 |  9534    20
    96       |#ifdef __cplusplus                                                                               |  9535    20
    97       |inline int abs(int a) { return __abs(a); }                                                       |  9536    20
    98       |inline long labs(long l) { return __labs(l); }                                                   |  9537    20
    99       |#else                                                                                            |  9538    20
   100       |int      abs (int) __pure2;                                                                      |  9539    20
   100       +int      abs (int) __attribute__((__const__));                                                   +  9539    20
   101       |long     labs (long) __pure2;                                                                    |  9540    20
   101       +long     labs (long) __attribute__((__const__));                                                 +  9540    20
   102       |#define abs(a) __abs(a)                                                                          |  9541    20
   103       |#define labs(l) __labs(l)                                                                        |  9542    20
   104       |#endif                                                                                           |  9543    20
   105       |                                                                                                 |  9544    20
   106       |int      atexit (void (*)(void));                                                                |  9545    20
   107       |double   atof (const char *);                                                                    |  9546    20
   108       |int      atoi (const char *);                                                                    |  9547    20
   109       |long     atol (const char *);                                                                    |  9548    20
   110       |void    *bsearch (const void *, const void *, size_t,                                            |  9549    20
   111       |            size_t, int (*)(const void *, const void *));                                        |  9550    20
   112       |void    *calloc (size_t, size_t);                                                                |  9551    20
   113       |div_t    div (int, int) __pure2;                                                                 |  9552    20
   113       +div_t    div (int, int) __attribute__((__const__));                                              +  9552    20
   114       |void     exit (int) __dead2;                                                                     |  9553    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   185


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   114       +void     exit (int) __attribute__((__noreturn__));                                               +  9553    20
   115       |void     free (void *);                                                                          |  9554    20
   116       |void     __free31 (void *);                                                                      |  9555    20
   117       |void     __free24 (void *);                                                                      |  9556    20
   118       |char    *getenv (const char *);                                                                  |  9557    20
   119       |ldiv_t   ldiv (long, long) __pure2;                                                              |  9558    20
   119       +ldiv_t   ldiv (long, long) __attribute__((__const__));                                           +  9558    20
   120       |void    *malloc (size_t);                                                                        |  9559    20
   121       |#pragma map(__malloc31,"@@MLLC31")                                                               |  9560    20
   122       |void    *__malloc31 (size_t);                                                                    |  9561    20
   123       |#pragma map(__malloc24,"@@MLLC24")                                                               |  9562    20
   124       |void    *__malloc24 (size_t);                                                                    |  9563    20
   125       |int      mblen(const char *, size_t);                                                            |  9564    20
   126       |size_t   mbstowcs(wchar_t * __restrict , const char * __restrict, size_t);                       |  9565    20
   126       +size_t   mbstowcs(wchar_t * __restrict__ , const char * __restrict__, size_t);                   +  9565    20
   127       |int      mbtowc(wchar_t * __restrict, const char * __restrict, size_t);                          |  9566    20
   127       +int      mbtowc(wchar_t * __restrict__, const char * __restrict__, size_t);                      +  9566    20
   128       |void     qsort (void *, size_t, size_t,                                                          |  9567    20
   129       |            int (*)(const void *, const void *));                                                |  9568    20
   130       |int      rand(void);                                                                             |  9569    20
   131       |void    *realloc(void *, size_t);                                                                |  9570    20
   132       |void     srand (unsigned);                                                                       |  9571    20
   133       |double   strtod(const char * __restrict, char ** __restrict);                                    |  9572    20
   133       +double   strtod(const char * __restrict__, char ** __restrict__);                                +  9572    20
   134       |float    strtof(const char * __restrict, char ** __restrict);                                    |  9573    20
   134       +float    strtof(const char * __restrict__, char ** __restrict__);                                +  9573    20
   135       |long     strtol(const char * __restrict, char ** __restrict, int);                               |  9574    20
   135       +long     strtol(const char * __restrict__, char ** __restrict__, int);                           +  9574    20
   136       |long double                                                                                      |  9575    20
   137       |         strtold(const char * __restrict, char ** __restrict);                                   |  9576    20
   137       +                  strtold(const char * __restrict__, char ** __restrict__);                      +  9576    20
   138       |unsigned long                                                                                    |  9577    20
   139       |         strtoul(const char * __restrict, char ** __restrict, int);                              |  9578    20
   139       +                  strtoul(const char * __restrict__, char ** __restrict__, int);                 +  9578    20
   140       |#ifdef __DFP__                                                                                   |  9579    20
   141       |#pragma map(strtod32, "@@STR@D1")                                                                |  9580    20
   142       |#pragma map(strtod64, "@@STR@D2")                                                                |  9581    20
   143       |#pragma map(strtod128, "@@STR@D4")                                                               |  9582    20
   144       |_Decimal32   strtod32(const char * __restrict, char ** __restrict);                              |  9583    20
   145       |_Decimal64   strtod64(const char * __restrict, char ** __restrict);                              |  9584    20
   146       |_Decimal128  strtod128(const char * __restrict, char ** __restrict);                             |  9585    20
   147       |#endif                                                                                           |  9586    20
   148       |int      system (const char *);                                                                  |  9587    20
   149       |int      wctomb (char *, wchar_t);                                                               |  9588    20
   150       |size_t   wcstombs(char * __restrict, const wchar_t * __restrict, size_t);                        |  9589    20
   150       +size_t   wcstombs(char * __restrict__, const wchar_t * __restrict__, size_t);                    +  9589    20
   151       |                                                                                                 |  9590    20
   152       |/*                                                                                               |  9591    20
   153       | * Functions added in C99 which we make conditionally available in the                           |  9592    20
   154       | * BSD^C89 namespace if the compiler supports `long long'.                                       |  9593    20
   155       | * The #if test is more complicated than it ought to be because                                  |  9594    20
   156       | * __BSD_VISIBLE implies __ISO_C_VISIBLE == 1999 *even if* `long long'                           |  9595    20
   157       | * is not supported in the compilation environment (which therefore means                        |  9596    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   186


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   158       | * that it can't really be ISO C99).                                                             |  9597    20
   159       | *                                                                                               |  9598    20
   160       | * (The only other extension made by C99 in thie header is _Exit().)                             |  9599    20
   161       | *                                                                                               |  9600    20
   162       | */                                                                                              |  9601    20
   163       |#if __ISO_C_VISIBLE >= 1999                                                                      |  9602    20
   164       |#ifdef __LONG_LONG_SUPPORTED                                                                     |  9603    20
   165       |/* LONGLONG */                                                                                   |  9604    20
   165       +                                                                                                 +  9604    20
   166       |typedef struct {                                                                                 |  9605    20
   167       |        long long quot;                                                                          |  9606    20
   168       |        long long rem;                                                                           |  9607    20
   169       |} lldiv_t;                                                                                       |  9608    20
   170       |                                                                                                 |  9609    20
   171       |/* LONGLONG */                                                                                   |  9610    20
   172       |long long                                                                                        |  9611    20
   173       |         atoll(const char *);                                                                    |  9612    20
   174       |/* LONGLONG */                                                                                   |  9613    20
   175       |long long                                                                                        |  9614    20
   176       |         llabs(long long) __pure2;                                                               |  9615    20
   176       +                  llabs(long long) __attribute__((__const__));                                   +  9615    20
   177       |/* LONGLONG */                                                                                   |  9616    20
   178       |lldiv_t  lldiv(long long, long long) __pure2;                                                    |  9617    20
   178       +lldiv_t  lldiv(long long, long long) __attribute__((__const__));                                 +  9617    20
   179       |/* LONGLONG */                                                                                   |  9618    20
   180       |long long                                                                                        |  9619    20
   181       |         strtoll(const char * __restrict, char ** __restrict, int);                              |  9620    20
   181       +                  strtoll(const char * __restrict__, char ** __restrict__, int);                 +  9620    20
   182       |/* LONGLONG */                                                                                   |  9621    20
   183       |unsigned long long                                                                               |  9622    20
   184       |         strtoull(const char * __restrict, char ** __restrict, int);                             |  9623    20
   184       +                  strtoull(const char * __restrict__, char ** __restrict__, int);                +  9623    20
   185       |#endif /* __LONG_LONG_SUPPORTED */                                                               |  9624    20
   186       |                                                                                                 |  9625    20
   187       |#pragma map(_Exit,"@@#EXIT")                                                                     |  9626    20
   188       |void     _Exit(int) __dead2;                                                                     |  9627    20
   188       +void     _Exit(int) __attribute__((__noreturn__));                                               +  9627    20
   189       |#endif /* __ISO_C_VISIBLE >= 1999 */                                                             |  9628    20
   190       |                                                                                                 |  9629    20
   191       |/*                                                                                               |  9630    20
   192       | * Extensions made by POSIX relative to C.  We don't know yet which edition                      |  9631    20
   193       | * of POSIX made these extensions, so assume they've always been there until                     |  9632    20
   194       | * research can be done.                                                                         |  9633    20
   195       | */                                                                                              |  9634    20
   196       |#if __POSIX_VISIBLE /* >= ??? */                                                                 |  9635    20
   197       |int      rand_r(unsigned *);                    /* (TSF) */                                      |  9636    20
   197       +int      rand_r(unsigned *);                                                                     +  9636    20
   198       |int      setenv(const char *, const char *, int);                                                |  9637    20
   199       |int      unsetenv(const char *);                                                                 |  9638    20
   200       |#endif                                                                                           |  9639    20
   201       |                                                                                                 |  9640    20
   202       |/*                                                                                               |  9641    20
   203       | * The only changes to the XSI namespace in revision 6 were the deletion                         |  9642    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   187


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   204       | * of the ttyslot() and valloc() functions, which were never declared                            |  9643    20
   205       | * in this header.                                                                               |  9644    20
   206       | */                                                                                              |  9645    20
   207       |#if __XSI_VISIBLE                                                                                |  9646    20
   208       |/* XXX XSI requires pollution from <sys/wait.h> here.  We'd rather not. */                       |  9647    20
   208       +                                                                                                 +  9647    20
   209       |long     a64l(const char *);                                                                     |  9648    20
   210       |double   drand48(void);                                                                          |  9649    20
   211       |double   erand48(unsigned short[3]);                                                             |  9650    20
   212       |int      getsubopt(char **, char *const *, char **);                                             |  9651    20
   213       |int      grantpt(int);                                                                           |  9652    20
   214       |char    *initstate(unsigned long /* XSI requires u_int */, char *, long);                        |  9653    20
   215       |long     jrand48(unsigned short[3]);                                                             |  9654    20
   216       |char    *l64a(long);                                                                             |  9655    20
   217       |void     lcong48(unsigned short[7]);                                                             |  9656    20
   218       |long     lrand48(void);                                                                          |  9657    20
   219       |#ifndef _MKSTEMP_DECLARED                                                                        |  9658    20
   220       |int      mkstemp(char *);                                                                        |  9659    20
   221       |#define _MKSTEMP_DECLARED                                                                        |  9660    20
   222       |#endif                                                                                           |  9661    20
   223       |#ifndef _MKTEMP_DECLARED                                                                         |  9662    20
   224       |char    *mktemp(char *);                                                                         |  9663    20
   225       |#define _MKTEMP_DECLARED                                                                         |  9664    20
   226       |#endif                                                                                           |  9665    20
   227       |long     mrand48(void);                                                                          |  9666    20
   228       |long     nrand48(unsigned short[3]);                                                             |  9667    20
   229       |int      posix_openpt(int);                                                                      |  9668    20
   230       |char    *ptsname(int);                                                                           |  9669    20
   231       |int      putenv(const char *);                                                                   |  9670    20
   232       |long     random(void);                                                                           |  9671    20
   233       |char    *realpath(const char *, char resolved_path[]);                                           |  9672    20
   234       |unsigned short                                                                                   |  9673    20
   235       |        *seed48(unsigned short[3]);                                                              |  9674    20
   236       |#ifndef _SETKEY_DECLARED                                                                         |  9675    20
   237       |int      setkey(const char *);                                                                   |  9676    20
   238       |#define _SETKEY_DECLARED                                                                         |  9677    20
   239       |#endif                                                                                           |  9678    20
   240       |char    *setstate(/* const */ char *);                                                           |  9679    20
   241       |void     srand48(long);                                                                          |  9680    20
   242       |void     srandom(unsigned long);                                                                 |  9681    20
   243       |int      unlockpt(int);                                                                          |  9682    20
   244       |#endif /* __XSI_VISIBLE */                                                                       |  9683    20
   245       |                                                                                                 |  9684    20
   246       |#if __BSD_VISIBLE                                                                                |  9685    20
   247       |                                                                                                 |  9686    20
   247       +                                                                                                 +  9686    20
   248       |/*                                                                                               |  9687    20
   249       | * For the Systems/C compiler, alloca() is implemented                                           |  9688    20
   250       | * via __builtin_alloca(); which is pre-defined by the                                           |  9689    20
   251       | * compiler.                                                                                     |  9690    20
   252       | */                                                                                              |  9691    20
   253       |#undef alloca  /* in case something else has defined it */                                       |  9692    20
   254       |#define alloca(size) __builtin_alloca(size)                                                      |  9693    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   188


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   255       |                                                                                                 |  9694    20
   256       |#pragma map(arc4random,"@@A4RAND")                                                               |  9695    20
   257       |#pragma map(arc4random_addrandom, "@@A4RNDA")                                                    |  9696    20
   258       |#pragma map(arc4randome_stir, "@@A4RNDS")                                                        |  9697    20
   259       |__uint32_t                                                                                       |  9698    20
   260       |         arc4random(void);                                                                       |  9699    20
   261       |void     arc4random_addrandom(unsigned char *dat, int datlen);                                   |  9700    20
   262       |void     arc4random_stir(void);                                                                  |  9701    20
   263       |char    *getbsize(int *, long *);                                                                |  9702    20
   264       |                                        /* getcap(3) functions */                                |  9703    20
   265       |char    *cgetcap(char *, const char *, int);                                                     |  9704    20
   266       |int      cgetclose(void);                                                                        |  9705    20
   267       |int      cgetent(char **, char **, const char *);                                                |  9706    20
   268       |int      cgetfirst(char **, char **);                                                            |  9707    20
   269       |int      cgetmatch(const char *, const char *);                                                  |  9708    20
   270       |int      cgetnext(char **, char **);                                                             |  9709    20
   271       |int      cgetnum(char *, const char *, long *);                                                  |  9710    20
   272       |int      cgetset(const char *);                                                                  |  9711    20
   273       |int      cgetstr(char *, const char *, char **);                                                 |  9712    20
   274       |int      cgetustr(char *, const char *, char **);                                                |  9713    20
   275       |                                                                                                 |  9714    20
   276       |int      daemon(int, int);                                                                       |  9715    20
   277       |char    *devname(int, int);                                                                      |  9716    20
   278       |char    *devname_r(int, int, char *, int);                                                       |  9717    20
   279       |int      getloadavg(double [], int);                                                             |  9718    20
   280       |#pragma map(getprogname, "@@GPRGNM")                                                             |  9719    20
   281       |__const char *                                                                                   |  9720    20
   281       +const char *                                                                                     +  9720    20
   282       |         getprogname(void);                                                                      |  9721    20
   283       |                                                                                                 |  9722    20
   284       |int      heapsort(void *, size_t, size_t, int (*)(const void *, const void *));                  |  9723    20
   285       |int     l64a_r(long, char *, int);                                                               |  9724    20
   286       |#pragma map (mergesort, "MERGS@RT")                                                              |  9725    20
   287       |int      mergesort(void *, size_t, size_t, int (*)(const void *, const void *));                 |  9726    20
   288       |void     qsort_r(void *, size_t, size_t, void *,                                                 |  9727    20
   289       |            int (*)(void *, const void *, const void *));                                        |  9728    20
   290       |#pragma map (radixsort, "R@DXSORT")                                                              |  9729    20
   291       |int      radixsort(const unsigned char **, int, const unsigned char *,                           |  9730    20
   292       |            unsigned);                                                                           |  9731    20
   293       |void    *reallocf(void *, size_t);                                                               |  9732    20
   294       |int      rpmatch(const char *);                                                                  |  9733    20
   295       |#pragma map(setprogname, "@@SPRGNM")                                                             |  9734    20
   296       |void     setprogname(const char *);                                                              |  9735    20
   297       |#pragma map (sradixsort, "SR@DXSRT")                                                             |  9736    20
   298       |int      sradixsort(const unsigned char **, int, const unsigned char *,                          |  9737    20
   299       |            unsigned);                                                                           |  9738    20
   300       |void     sranddev(void);                                                                         |  9739    20
   301       |void     srandomdev(void);                                                                       |  9740    20
   302       |long long                                                                                        |  9741    20
   303       |         strtonum(const char *, long long, long long, const char **);                            |  9742    20
   304       |                                                                                                 |  9743    20
   305       |/* Deprecated interfaces, to be removed from Systems/C */                                        |  9744    20
   306       |/* Use strtoul() and strtoull() as appropriate */                                                |  9745    20
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   189


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   307       |__int64_t                                                                                        |  9746    20
   308       |         strtoq(const char *, char **, int);                                                     |  9747    20
   309       |__uint64_t                                                                                       |  9748    20
   310       |         strtouq(const char *, char **, int);                                                    |  9749    20
   311       |                                                                                                 |  9750    20
   312       |                                                                                                 |  9751    20
   313       |extern char *suboptarg;                 /* getsubopt(3) external variable */                     |  9752    20
   314       |#endif /* __BSD_VISIBLE */                                                                       |  9753    20
   315       |__END_DECLS                                                                                      |  9754    20
   315       +                                                                                                 +  9754    20
   316       |                                                                                                 |  9755    20
   317       |#endif /* !_STDLIB_H_ */                                                                         |  9756    20
   318       |#pragma pack(reset)                                                                              |  9757    20
    50       |#include <string.h>                                                                              |  9758    18
     1       |/* release 2.25.00 */                                                                            |  9759    21
     2       |#pragma pack()                                                                                   |  9760    21
     3       |/*-                                                                                              |  9761    21
     4       | * Copyright (c) 1990, 1993                                                                      |  9762    21
     5       | *      The Regents of the University of California.  All rights reserved.                       |  9763    21
     6       | *                                                                                               |  9764    21
     7       | * Redistribution and use in source and binary forms, with or without                            |  9765    21
     8       | * modification, are permitted provided that the following conditions                            |  9766    21
     9       | * are met:                                                                                      |  9767    21
    10       | * 1. Redistributions of source code must retain the above copyright                             |  9768    21
    11       | *    notice, this list of conditions and the following disclaimer.                              |  9769    21
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9770    21
    13       | *    notice, this list of conditions and the following disclaimer in the                        |  9771    21
    14       | *    documentation and/or other materials provided with the distribution.                       |  9772    21
    15       | * 3. All advertising materials mentioning features or use of this software                      |  9773    21
    16       | *    must display the following acknowledgement:                                                |  9774    21
    17       | *      This product includes software developed by the University of                            |  9775    21
    18       | *      California, Berkeley and its contributors.                                               |  9776    21
    19       | * 4. Neither the name of the University nor the names of its contributors                       |  9777    21
    20       | *    may be used to endorse or promote products derived from this software                      |  9778    21
    21       | *    without specific prior written permission.                                                 |  9779    21
    22       | *                                                                                               |  9780    21
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  9781    21
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  9782    21
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  9783    21
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  9784    21
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  9785    21
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  9786    21
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  9787    21
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  9788    21
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  9789    21
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  9790    21
    33       | * SUCH DAMAGE.                                                                                  |  9791    21
    34       | *                                                                                               |  9792    21
    35       | *      @(#)string.h    8.1 (Berkeley) 6/2/93                                                    |  9793    21
    36       | */                                                                                              |  9794    21
    37       |                                                                                                 |  9795    21
    38       |#ifndef _STRING_H_                                                                               |  9796    21
    39       |#define _STRING_H_                                                                               |  9797    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   190


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    40       |                                                                                                 |  9798    21
    41       |#include <sys/cdefs.h>                                                                           |  9799    21
     1       |/* release 2.25.00 */                                                                            |  9800     4
     2       |#pragma pack()                                                                                   |  9801     4
     3       |/*                                                                                               |  9802     4
     4       | * Copyright (c) 1991, 1993                                                                      |  9803     4
     5       | *      The Regents of the University of California.  All rights reserved.                       |  9804     4
     6       | *                                                                                               |  9805     4
     7       | * This code is derived from software contributed to Berkeley by                                 |  9806     4
     8       | * Berkeley Software Design, Inc.                                                                |  9807     4
     9       | *                                                                                               |  9808     4
    10       | * Redistribution and use in source and binary forms, with or without                            |  9809     4
    11       | * modification, are permitted provided that the following conditions                            |  9810     4
    12       | * are met:                                                                                      |  9811     4
    13       | * 1. Redistributions of source code must retain the above copyright                             |  9812     4
    14       | *    notice, this list of conditions and the following disclaimer.                              |  9813     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          |  9814     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        |  9815     4
    17       | *    documentation and/or other materials provided with the distribution.                       |  9816     4
    18       | * 3. All advertising materials mentioning features or use of this software                      |  9817     4
    19       | *    must display the following acknowledgement:                                                |  9818     4
    20       | *      This product includes software developed by the University of                            |  9819     4
    21       | *      California, Berkeley and its contributors.                                               |  9820     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       |  9821     4
    23       | *    may be used to endorse or promote products derived from this software                      |  9822     4
    24       | *    without specific prior written permission.                                                 |  9823     4
    25       | *                                                                                               |  9824     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       |  9825     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         |  9826     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    |  9827     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      |  9828     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    |  9829     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       |  9830     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         |  9831     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    |  9832     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     |  9833     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        |  9834     4
    36       | * SUCH DAMAGE.                                                                                  |  9835     4
    37       | *                                                                                               |  9836     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    |  9837     4
    39       | */                                                                                              |  9838     4
    40       |                                                                                                 |  9839     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            |  9840     4
    42       |#define _SYS_CDEFS_H_                                                                            |  9841     4
    43       |                                                                                                 |  9842     4
    44       |#if defined(__cplusplus)                                                                         |  9843     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             |  9844     4
    46       |#define __END_DECLS     }                                                                        |  9845     4
    47       |#else                                                                                            |  9846     4
    48       |#define __BEGIN_DECLS                                                                            |  9847     4
    49       |#define __END_DECLS                                                                              |  9848     4
    50       |#endif                                                                                           |  9849     4
    51       |                                                                                                 |  9850     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   191


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |/*                                                                                               |  9851     4
    53       | * This code has been put in place to help reduce the addition of                                |  9852     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    |  9853     4
    55       | * having a compiler-agnostic source tree.                                                       |  9854     4
    56       | */                                                                                              |  9855     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   |  9856     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 |  9857     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               |  9858     4
    60       |                                                                                                 |  9859     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 |  9860     4
    62       |                                                                                                 |  9861     4
    63       |                                                                                                 |  9862     4
    64       |/*                                                                                               |  9863     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         |  9864     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          |  9865     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         |  9866     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         |  9867     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        |  9868     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         |  9869     4
    71       | * this only works with ANSI C.                                                                  |  9870     4
    72       | *                                                                                               |  9871     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         |  9872     4
    74       | * first.  It is only available with ANSI C.                                                     |  9873     4
    75       | */                                                                                              |  9874     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    |  9875     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  |  9876     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   |  9877     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           |  9878     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      |  9879     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           |  9880     4
    82       |                                                                                                 |  9881     4
    83       |#define __const         const           /* define reserved names to standard */                  |  9882     4
    84       |#define __signed        signed                                                                   |  9883     4
    85       |#define __volatile      volatile                                                                 |  9884     4
    86       |#if defined(__cplusplus)                                                                         |  9885     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             |  9886     4
    88       |#else                                                                                            |  9887     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          |  9888     4
    90       |#endif /* !__cplusplus */                                                                        |  9889     4
    91       |                                                                                                 |  9890     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         |  9891     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         |  9892     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   |  9893     4
    95       |#define __STRING(x)     "x"                                                                      |  9894     4
    96       |                                                                                                 |  9895     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      |  9896     4
    98       |#define __inline                                                                                 |  9897     4
    99       |#define __signed                                                                                 |  9898     4
   100       |#define __volatile                                                                               |  9899     4
   101       |/*                                                                                               |  9900     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       |  9901     4
   103       | * deleted from the program and old programs will want them left alone.                          |  9902     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   |  9903     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   192


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    |  9904     4
   106       | */                                                                                              |  9905     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         |  9906     4
   108       |#define const                           /* delete ANSI C keywords */                             |  9907     4
   109       |#define inline                                                                                   |  9908     4
   110       |#define signed                                                                                   |  9909     4
   111       |#define volatile                                                                                 |  9910     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  |  9911     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         |  9912     4
   114       |                                                                                                 |  9913     4
   115       |/*                                                                                               |  9914     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            |  9915     4
   117       | * pure (no side effects) functions, and unused variables.                                       |  9916     4
   118       | */                                                                                              |  9917     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    |  9918     4
   120       |#define __pure  __attribute__((__pure__))                                                        |  9919     4
   121       |#define __pure2 __attribute__((__const__))                                                       |  9920     4
   122       |#define __unused                                                                                 |  9921     4
   123       |#define __aligned(x)                                                                             |  9922     4
   124       |#define __section(x)                                                                             |  9923     4
   125       |#define __nonnull(x)                                                                             |  9924     4
   126       |#define __used                                                                                   |  9925     4
   127       |                                                                                                 |  9926     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       |  9927     4
   129       |#define __noinline      __attribute__((__noinline__))                                            |  9928     4
   130       |                                                                                                 |  9929     4
   131       |#if __STDC_VERSION__ < 199901                                                                    |  9930     4
   132       |#define __func__  NULL                                                                           |  9931     4
   133       |#endif                                                                                           |  9932     4
   134       |                                                                                                 |  9933     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      |  9934     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    |  9935     4
   137       |#endif                                                                                           |  9936     4
   138       |                                                                                                 |  9937     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        |  9938     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    |  9939     4
   141       | **/                                                                                             |  9940     4
   142       |#ifndef __cplusplus                                                                              |  9941     4
   143       |#define __restrict __restrict__                                                                  |  9942     4
   144       |#else                                                                                            |  9943     4
   145       |/* Systems/C++ does not */                                                                       |  9944     4
   146       |#define __restrict                                                                               |  9945     4
   147       |#endif                                                                                           |  9946     4
   148       |                                                                                                 |  9947     4
   149       |/*                                                                                               |  9948     4
   150       | * define-away GCC-specific branch-prediction markers                                            |  9949     4
   151       | */                                                                                              |  9950     4
   152       |#define __predict_true(exp)     (exp)                                                            |  9951     4
   153       |#define __predict_false(exp)    (exp)                                                            |  9952     4
   154       |                                                                                                 |  9953     4
   155       |                                                                                                 |  9954     4
   156       |/*                                                                                               |  9955     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          |  9956     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   193


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   158       | * <sys/types.h> reference __offsetof().                                                         |  9957     4
   159       | *                                                                                               |  9958     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        |  9959     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                |  9960     4
   162       | */                                                                                              |  9961     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             |  9962     4
   164       |#undef __offsetof                                                                                |  9963     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 |  9964     4
   166       |#endif                                                                                           |  9965     4
   167       |                                                                                                 |  9966     4
   168       |/*                                                                                               |  9967     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          |  9968     4
   170       | * or scanf-like arguments.                                                                      |  9969     4
   171       | */                                                                                              |  9970     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        |  9971     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         |  9972     4
   174       |#define __format_arg(fmtarg)                                                                     |  9973     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       |  9974     4
   176       |                                                                                                 |  9975     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                |  9976     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       |  9977     4
   179       |                                                                                                 |  9978     4
   180       |  /* intended to generate a weak reference as an alias */                                        |  9979     4
   181       |#define __weak_reference(sym,alias)                                                              |  9980     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              |  9981     4
   183       |#define __warn_references(sym,msg)                                                               |  9982     4
   184       |                                                                                                 |  9983     4
   185       | /* This places the string into the resulting object.  It should */                              |  9984     4
   186       | /* probably become #pragma ident */                                                             |  9985     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       |  9986     4
   188       |                                                                                                 |  9987     4
   189       |#ifndef __RCSID                                                                                  |  9988     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      |  9989     4
   191       |#endif                                                                                           |  9990     4
   192       |                                                                                                 |  9991     4
   193       |/*                                                                                               |  9992     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   |  9993     4
   195       | * Usage:                                                                                        |  9994     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  |  9995     4
   197       |*                                            04:05:13 mikeh Exp $");                             |  9996     4
   198       | */                                                                                              |  9997     4
   199       |#ifndef __SYSCID                                                                                 |  9998     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     |  9999     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 10000     4
   202       |#else                                                                                            | 10001     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 10002     4
   204       |#endif                                                                                           | 10003     4
   205       |#endif                                                                                           | 10004     4
   206       |                                                                                                 | 10005     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 10006     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 10007     4
   209       |#endif                                                                                           | 10008     4
   210       |                                                                                                 | 10009     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   194


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   211       |#ifndef __COPYRIGHT                                                                              | 10010     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 10011     4
   213       |#endif                                                                                           | 10012     4
   214       |                                                                                                 | 10013     4
   215       |                                                                                                 | 10014     4
   216       |#ifndef __DECONST                                                                                | 10015     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 10016     4
   218       |#endif                                                                                           | 10017     4
   219       |                                                                                                 | 10018     4
   220       |#ifndef __DEVOLATILE                                                                             | 10019     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 10020     4
   222       |#endif                                                                                           | 10021     4
   223       |                                                                                                 | 10022     4
   224       |#ifndef __DEQUALIFY                                                                              | 10023     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 10024     4
   226       |#endif                                                                                           | 10025     4
   227       |                                                                                                 | 10026     4
   228       |                                                                                                 | 10027     4
   229       |/*-                                                                                              | 10028     4
   230       | * The following definitions are an extension of the behavior originally                         | 10029     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 10030     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 10031     4
   233       | * header file is included.                                                                      | 10032     4
   234       | *                                                                                               | 10033     4
   235       | * Here's a quick run-down of the versions:                                                      | 10034     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 10035     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 10036     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 10037     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 10038     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 10039     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 10040     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 10041     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 10042     4
   244       | *                                                                                               | 10043     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 10044     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 10045     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 10046     4
   248       | *                                                                                               | 10047     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 10048     4
   250       | */                                                                                              | 10049     4
   251       |                                                                                                 | 10050     4
   252       |/*                                                                                               | 10051     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 10052     4
   254       | * available. Also make them available when requested so.                                        | 10053     4
   255       | */                                                                                              | 10054     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 10055     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 10056     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 10057     4
   259       |#define __DF_VISIBLE    1                                                                        | 10058     4
   260       |#else                                                                                            | 10059     4
   261       |#define __DF_VISIBLE    0                                                                        | 10060     4
   262       |#endif                                                                                           | 10061     4
   263       |                                                                                                 | 10062     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   195


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   264       |/*-                                                                                              | 10063     4
   265       | * The following definitions are an extension of the behavior originally                         | 10064     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 10065     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 10066     4
   268       | * header file is included.                                                                      | 10067     4
   269       | *                                                                                               | 10068     4
   270       | * Here's a quick run-down of the versions:                                                      | 10069     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 10070     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 10071     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 10072     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 10073     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 10074     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 10075     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 10076     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 10077     4
   279       | *                                                                                               | 10078     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 10079     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 10080     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 10081     4
   283       | *                                                                                               | 10082     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 10083     4
   285       | */                                                                                              | 10084     4
   286       |                                                                                                 | 10085     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 10086     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 10087     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 10088     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 10089     4
   291       |#endif                                                                                           | 10090     4
   292       |                                                                                                 | 10091     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 10092     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 10093     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 10094     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 10095     4
   297       |#endif                                                                                           | 10096     4
   298       |                                                                                                 | 10097     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 10098     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 10099     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 10100     4
   302       |#define __XSI_VISIBLE           700                                                              | 10101     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 10102     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 10103     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 10104     4
   306       |#define __XSI_VISIBLE           600                                                              | 10105     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 10106     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 10107     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 10108     4
   310       |#define __XSI_VISIBLE           500                                                              | 10109     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 10110     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 10111     4
   313       |#endif                                                                                           | 10112     4
   314       |#endif                                                                                           | 10113     4
   315       |                                                                                                 | 10114     4
   316       |/*                                                                                               | 10115     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   196


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 10116     4
   318       | * important.                                                                                    | 10117     4
   319       | */                                                                                              | 10118     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 10119     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 10120     4
   322       |#endif                                                                                           | 10121     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 10122     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 10123     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 10124     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 10125     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 10126     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 10127     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 10128     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 10129     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 10130     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 10131     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 10132     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 10133     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 10134     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 10135     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 10136     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 10137     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 10138     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 10139     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 10140     4
   342       |#else                                                                                            | 10141     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 10142     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 10143     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 10144     4
   346       |#else                                                                                            | 10145     4
   347       |/*-                                                                                              | 10146     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 10147     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 10148     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 10149     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 10150     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 10151     4
   353       | * a test program to print out the values.                                                       | 10152     4
   354       | *                                                                                               | 10153     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 10154     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 10155     4
   357       | * environment (and in fact we will never get here).                                             | 10156     4
   358       | */                                                                                              | 10157     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 10158     4
   360       |#define __POSIX_VISIBLE         0                                                                | 10159     4
   361       |#define __XSI_VISIBLE           0                                                                | 10160     4
   362       |#define __BSD_VISIBLE           0                                                                | 10161     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 10162     4
   364       |#define __EXT1_VISIBLE          0                                                                | 10163     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 10164     4
   366       |#define __POSIX_VISIBLE         0                                                                | 10165     4
   367       |#define __XSI_VISIBLE           0                                                                | 10166     4
   368       |#define __BSD_VISIBLE           0                                                                | 10167     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 10168     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   197


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   370       |#define __EXT1_VISIBLE          0                                                                | 10169     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 10170     4
   372       |#define __POSIX_VISIBLE         0                                                                | 10171     4
   373       |#define __XSI_VISIBLE           0                                                                | 10172     4
   374       |#define __BSD_VISIBLE           0                                                                | 10173     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 10174     4
   376       |#define __EXT1_VISIBLE          0                                                                | 10175     4
   377       |#else                           /* Default environment: show everything. */                      | 10176     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 10177     4
   379       |#define __XSI_VISIBLE           700                                                              | 10178     4
   380       |#define __BSD_VISIBLE           1                                                                | 10179     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 10180     4
   382       |#define __EXT1_VISIBLE          1                                                                | 10181     4
   383       |#endif                                                                                           | 10182     4
   384       |#endif                                                                                           | 10183     4
   385       |                                                                                                 | 10184     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 10185     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 10186     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 10187     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 10188     4
   390       |#define __EXT1_VISIBLE          1                                                                | 10189     4
   391       |#else                                                                                            | 10190     4
   392       |#define __EXT1_VISIBLE          0                                                                | 10191     4
   393       |#endif                                                                                           | 10192     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 10193     4
   395       |                                                                                                 | 10194     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 10195     4
   397       |#define __NO_TLS 1                                                                               | 10196     4
   398       |#endif                                                                                           | 10197     4
   399       |                                                                                                 | 10198     4
   400       |                                                                                                 | 10199     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 10200     4
   402       |#define __FBSDID(x)                                                                              | 10201     4
   403       |                                                                                                 | 10202     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 10203     4
   405       |#pragma pack(reset)                                                                              | 10204     4
    42       |#include <sys/_null.h>                                                                           | 10205    21
     1       |/* release 2.25.00 */                                                                            | 10206    15
     2       |#pragma pack()                                                                                   | 10207    15
     3       |/*-                                                                                              | 10208    15
     4       | * Copyright (c) 2003 Marcel Moolenaar                                                           | 10209    15
     5       | * All rights reserved.                                                                          | 10210    15
     6       | *                                                                                               | 10211    15
     7       | * Redistribution and use in source and binary forms, with or without                            | 10212    15
     8       | * modification, are permitted provided that the following conditions                            | 10213    15
     9       | * are met:                                                                                      | 10214    15
    10       | *                                                                                               | 10215    15
    11       | * 1. Redistributions of source code must retain the above copyright                             | 10216    15
    12       | *    notice, this list of conditions and the following disclaimer.                              | 10217    15
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          | 10218    15
    14       | *    notice, this list of conditions and the following disclaimer in the                        | 10219    15
    15       | *    documentation and/or other materials provided with the distribution.                       | 10220    15
    16       | *                                                                                               | 10221    15
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   198


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    17       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          | 10222    15
    18       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     | 10223    15
    19       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       | 10224    15
    20       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              | 10225    15
    21       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      | 10226    15
    22       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     | 10227    15
    23       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         | 10228    15
    24       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           | 10229    15
    25       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      | 10230    15
    26       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             | 10231    15
    27       | *                                                                                               | 10232    15
    28       | * $FreeBSD: src/sys/sys/_null.h,v 1.7 2005/01/07 02:29:23 imp Exp $                             | 10233    15
    29       | */                                                                                              | 10234    15
    30       |                                                                                                 | 10235    15
    31       |#ifndef NULL                                                                                     | 10236    15
    32       |                                                                                                 | 10237    15
    33       |#if defined(_KERNEL) || !defined(__cplusplus)                                                    | 10238    15
    34       |#define NULL    ((void *)0)                                                                      | 10239    15
    35       |#else                                                                                            | 10240    15
    36       |#if defined(__LP64__)                                                                            | 10241    15
    37       |#define NULL    (0L)                                                                             | 10242    15
    38       |#else                                                                                            | 10243    15
    39       |#define NULL    0                                                                                | 10244    15
    40       |#endif  /* __LP64__ */                                                                           | 10245    15
    41       |#endif  /* _KERNEL || !__cplusplus */                                                            | 10246    15
    42       |                                                                                                 | 10247    15
    43       |#endif                                                                                           | 10248    15
    44       |#pragma pack(reset)                                                                              | 10249    15
    43       |#include <sys/_types.h>                                                                          | 10250    21
     1       |/* release 2.25.00 */                                                                            | 10251     6
     2       |#pragma pack()                                                                                   | 10252     6
     3       |/*-                                                                                              | 10253     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 10254     6
     5       | * All rights reserved.                                                                          | 10255     6
     6       | *                                                                                               | 10256     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 10257     6
     8       | * modification, are permitted provided that the following conditions                            | 10258     6
     9       | * are met:                                                                                      | 10259     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 10260     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 10261     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 10262     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 10263     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 10264     6
    15       | *                                                                                               | 10265     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 10266     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 10267     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 10268     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 10269     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 10270     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 10271     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 10272     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 10273     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 10274     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   199


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 10275     6
    26       | * SUCH DAMAGE.                                                                                  | 10276     6
    27       | *                                                                                               | 10277     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 10278     6
    29       | */                                                                                              | 10279     6
    30       |                                                                                                 | 10280     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 10281     6
    32       |#define _SYS__TYPES_H_                                                                           | 10282     6
    33       |                                                                                                 | 10283     6
    34       |#include <sys/cdefs.h>                                                                           | 10284     6
    35       |#include <machine/_types.h>                                                                      | 10285     6
    36       |                                                                                                 | 10286     6
    37       |/*                                                                                               | 10287     6
    38       | * Standard type definitions.                                                                    | 10288     6
    39       | */                                                                                              | 10289     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 10290     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 10291     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 10292     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 10293     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 10294     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 10295     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 10296     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 10297     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 10298     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 10299     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 10300     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 10301     6
    52       |typedef int             __nl_item;                                                               | 10302     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 10303     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 10304     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 10305     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 10306     6
    57       |                                        /* signed, because of legacy code */                     | 10307     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 10308     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 10309     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 10310     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 10311     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 10312     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 10313     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 10314     6
    65       |                                                                                                 | 10315     6
    66       |/*                                                                                               | 10316     6
    67       | * Unusual type definitions.                                                                     | 10317     6
    68       | */                                                                                              | 10318     6
    69       |/*                                                                                               | 10319     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 10320     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 10321     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 10322     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 10323     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 10324     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 10325     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 10326     6
    77       | *                                                                                               | 10327     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   200


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 10328     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 10329     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 10330     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 10331     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 10332     6
    83       | */                                                                                              | 10333     6
    84       |#ifdef __cplusplus                                                                               | 10334     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 10335     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 10336     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 10337     6
    88       |#else                                                                                            | 10338     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 10339     6
    90       |#endif                                                                                           | 10340     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 10341     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 10342     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 10343     6
    94       |                                                                                                 | 10344     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 10345     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 10346     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 10347     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 10348     6
    99       |#endif                                                                                           | 10349     6
   100       |                                                                                                 | 10350     6
   101       |#if !defined(__cplusplus)                                                                        | 10351     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 10352     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 10353     6
   104       |#endif                                                                                           | 10354     6
   105       |                                                                                                 | 10355     6
   106       |                                                                                                 | 10356     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 10357     6
   108       |                                                                                                 | 10358     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 10359     6
   110       |                                                                                                 | 10360     6
   111       |/*                                                                                               | 10361     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 10362     6
   113       | * stream conversions.                                                                           | 10363     6
   114       | */                                                                                              | 10364     6
   115       |typedef union {                                                                                  | 10365     6
   116       |        char            __mbstate8[128];                                                         | 10366     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 10367     6
   118       |} __mbstate_t;                                                                                   | 10368     6
   119       |                                                                                                 | 10369     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 10370     6
   121       |#pragma pack(reset)                                                                              | 10371     6
    44       |                                                                                                 | 10372    21
    45       |/*                                                                                               | 10373    21
    46       | * Prototype functions which were historically defined in <string.h>, but                        | 10374    21
    47       | * are required by POSIX to be prototyped in <strings.h>.                                        | 10375    21
    48       | */                                                                                              | 10376    21
    49       |#if __BSD_VISIBLE                                                                                | 10377    21
    50       |#include <strings.h>                                                                             | 10378    21
     1       |/* release 2.25.00 */                                                                            | 10379    22
     1       +                                                                                                 + 10379    22
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   201


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       |#pragma pack()                                                                                   | 10380    22
     3       |/*-                                                                                              | 10381    22
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 10382    22
     5       | * All rights reserved.                                                                          | 10383    22
     6       | *                                                                                               | 10384    22
     7       | * Redistribution and use in source and binary forms, with or without                            | 10385    22
     8       | * modification, are permitted provided that the following conditions                            | 10386    22
     9       | * are met:                                                                                      | 10387    22
    10       | * 1. Redistributions of source code must retain the above copyright                             | 10388    22
    11       | *    notice, this list of conditions and the following disclaimer.                              | 10389    22
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 10390    22
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 10391    22
    14       | *    documentation and/or other materials provided with the distribution.                       | 10392    22
    15       | *                                                                                               | 10393    22
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 10394    22
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 10395    22
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 10396    22
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 10397    22
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 10398    22
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 10399    22
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 10400    22
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 10401    22
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 10402    22
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 10403    22
    26       | * SUCH DAMAGE.                                                                                  | 10404    22
    27       | *                                                                                               | 10405    22
    28       | */                                                                                              | 10406    22
    29       |                                                                                                 | 10407    22
    30       |#ifndef _STRINGS_H_                                                                              | 10408    22
    31       |#define _STRINGS_H_                                                                              | 10409    22
    32       |                                                                                                 | 10410    22
    33       |#include <sys/cdefs.h>                                                                           | 10411    22
     1       |/* release 2.25.00 */                                                                            | 10412     4
     2       |#pragma pack()                                                                                   | 10413     4
     3       |/*                                                                                               | 10414     4
     4       | * Copyright (c) 1991, 1993                                                                      | 10415     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 10416     4
     6       | *                                                                                               | 10417     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 10418     4
     8       | * Berkeley Software Design, Inc.                                                                | 10419     4
     9       | *                                                                                               | 10420     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 10421     4
    11       | * modification, are permitted provided that the following conditions                            | 10422     4
    12       | * are met:                                                                                      | 10423     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 10424     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 10425     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 10426     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 10427     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 10428     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 10429     4
    19       | *    must display the following acknowledgement:                                                | 10430     4
    20       | *      This product includes software developed by the University of                            | 10431     4
    21       | *      California, Berkeley and its contributors.                                               | 10432     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   202


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 10433     4
    23       | *    may be used to endorse or promote products derived from this software                      | 10434     4
    24       | *    without specific prior written permission.                                                 | 10435     4
    25       | *                                                                                               | 10436     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 10437     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 10438     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 10439     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 10440     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 10441     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 10442     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 10443     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 10444     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 10445     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 10446     4
    36       | * SUCH DAMAGE.                                                                                  | 10447     4
    37       | *                                                                                               | 10448     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 10449     4
    39       | */                                                                                              | 10450     4
    40       |                                                                                                 | 10451     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 10452     4
    42       |#define _SYS_CDEFS_H_                                                                            | 10453     4
    43       |                                                                                                 | 10454     4
    44       |#if defined(__cplusplus)                                                                         | 10455     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 10456     4
    46       |#define __END_DECLS     }                                                                        | 10457     4
    47       |#else                                                                                            | 10458     4
    48       |#define __BEGIN_DECLS                                                                            | 10459     4
    49       |#define __END_DECLS                                                                              | 10460     4
    50       |#endif                                                                                           | 10461     4
    51       |                                                                                                 | 10462     4
    52       |/*                                                                                               | 10463     4
    53       | * This code has been put in place to help reduce the addition of                                | 10464     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 10465     4
    55       | * having a compiler-agnostic source tree.                                                       | 10466     4
    56       | */                                                                                              | 10467     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 10468     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 10469     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 10470     4
    60       |                                                                                                 | 10471     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 10472     4
    62       |                                                                                                 | 10473     4
    63       |                                                                                                 | 10474     4
    64       |/*                                                                                               | 10475     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 10476     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 10477     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 10478     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 10479     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 10480     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 10481     4
    71       | * this only works with ANSI C.                                                                  | 10482     4
    72       | *                                                                                               | 10483     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 10484     4
    74       | * first.  It is only available with ANSI C.                                                     | 10485     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   203


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    75       | */                                                                                              | 10486     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 10487     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 10488     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 10489     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 10490     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 10491     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 10492     4
    82       |                                                                                                 | 10493     4
    83       |#define __const         const           /* define reserved names to standard */                  | 10494     4
    84       |#define __signed        signed                                                                   | 10495     4
    85       |#define __volatile      volatile                                                                 | 10496     4
    86       |#if defined(__cplusplus)                                                                         | 10497     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 10498     4
    88       |#else                                                                                            | 10499     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 10500     4
    90       |#endif /* !__cplusplus */                                                                        | 10501     4
    91       |                                                                                                 | 10502     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 10503     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 10504     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 10505     4
    95       |#define __STRING(x)     "x"                                                                      | 10506     4
    96       |                                                                                                 | 10507     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 10508     4
    98       |#define __inline                                                                                 | 10509     4
    99       |#define __signed                                                                                 | 10510     4
   100       |#define __volatile                                                                               | 10511     4
   101       |/*                                                                                               | 10512     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 10513     4
   103       | * deleted from the program and old programs will want them left alone.                          | 10514     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 10515     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 10516     4
   106       | */                                                                                              | 10517     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 10518     4
   108       |#define const                           /* delete ANSI C keywords */                             | 10519     4
   109       |#define inline                                                                                   | 10520     4
   110       |#define signed                                                                                   | 10521     4
   111       |#define volatile                                                                                 | 10522     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 10523     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 10524     4
   114       |                                                                                                 | 10525     4
   115       |/*                                                                                               | 10526     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 10527     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 10528     4
   118       | */                                                                                              | 10529     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 10530     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 10531     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 10532     4
   122       |#define __unused                                                                                 | 10533     4
   123       |#define __aligned(x)                                                                             | 10534     4
   124       |#define __section(x)                                                                             | 10535     4
   125       |#define __nonnull(x)                                                                             | 10536     4
   126       |#define __used                                                                                   | 10537     4
   127       |                                                                                                 | 10538     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   204


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 10539     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 10540     4
   130       |                                                                                                 | 10541     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 10542     4
   132       |#define __func__  NULL                                                                           | 10543     4
   133       |#endif                                                                                           | 10544     4
   134       |                                                                                                 | 10545     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 10546     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 10547     4
   137       |#endif                                                                                           | 10548     4
   138       |                                                                                                 | 10549     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 10550     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 10551     4
   141       | **/                                                                                             | 10552     4
   142       |#ifndef __cplusplus                                                                              | 10553     4
   143       |#define __restrict __restrict__                                                                  | 10554     4
   144       |#else                                                                                            | 10555     4
   145       |/* Systems/C++ does not */                                                                       | 10556     4
   146       |#define __restrict                                                                               | 10557     4
   147       |#endif                                                                                           | 10558     4
   148       |                                                                                                 | 10559     4
   149       |/*                                                                                               | 10560     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 10561     4
   151       | */                                                                                              | 10562     4
   152       |#define __predict_true(exp)     (exp)                                                            | 10563     4
   153       |#define __predict_false(exp)    (exp)                                                            | 10564     4
   154       |                                                                                                 | 10565     4
   155       |                                                                                                 | 10566     4
   156       |/*                                                                                               | 10567     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 10568     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 10569     4
   159       | *                                                                                               | 10570     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 10571     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 10572     4
   162       | */                                                                                              | 10573     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 10574     4
   164       |#undef __offsetof                                                                                | 10575     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 10576     4
   166       |#endif                                                                                           | 10577     4
   167       |                                                                                                 | 10578     4
   168       |/*                                                                                               | 10579     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 10580     4
   170       | * or scanf-like arguments.                                                                      | 10581     4
   171       | */                                                                                              | 10582     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 10583     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 10584     4
   174       |#define __format_arg(fmtarg)                                                                     | 10585     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 10586     4
   176       |                                                                                                 | 10587     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 10588     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 10589     4
   179       |                                                                                                 | 10590     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 10591     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   205


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   181       |#define __weak_reference(sym,alias)                                                              | 10592     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 10593     4
   183       |#define __warn_references(sym,msg)                                                               | 10594     4
   184       |                                                                                                 | 10595     4
   185       | /* This places the string into the resulting object.  It should */                              | 10596     4
   186       | /* probably become #pragma ident */                                                             | 10597     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 10598     4
   188       |                                                                                                 | 10599     4
   189       |#ifndef __RCSID                                                                                  | 10600     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 10601     4
   191       |#endif                                                                                           | 10602     4
   192       |                                                                                                 | 10603     4
   193       |/*                                                                                               | 10604     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 10605     4
   195       | * Usage:                                                                                        | 10606     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 10607     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 10608     4
   198       | */                                                                                              | 10609     4
   199       |#ifndef __SYSCID                                                                                 | 10610     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 10611     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 10612     4
   202       |#else                                                                                            | 10613     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 10614     4
   204       |#endif                                                                                           | 10615     4
   205       |#endif                                                                                           | 10616     4
   206       |                                                                                                 | 10617     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 10618     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 10619     4
   209       |#endif                                                                                           | 10620     4
   210       |                                                                                                 | 10621     4
   211       |#ifndef __COPYRIGHT                                                                              | 10622     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 10623     4
   213       |#endif                                                                                           | 10624     4
   214       |                                                                                                 | 10625     4
   215       |                                                                                                 | 10626     4
   216       |#ifndef __DECONST                                                                                | 10627     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 10628     4
   218       |#endif                                                                                           | 10629     4
   219       |                                                                                                 | 10630     4
   220       |#ifndef __DEVOLATILE                                                                             | 10631     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 10632     4
   222       |#endif                                                                                           | 10633     4
   223       |                                                                                                 | 10634     4
   224       |#ifndef __DEQUALIFY                                                                              | 10635     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 10636     4
   226       |#endif                                                                                           | 10637     4
   227       |                                                                                                 | 10638     4
   228       |                                                                                                 | 10639     4
   229       |/*-                                                                                              | 10640     4
   230       | * The following definitions are an extension of the behavior originally                         | 10641     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 10642     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 10643     4
   233       | * header file is included.                                                                      | 10644     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   206


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   234       | *                                                                                               | 10645     4
   235       | * Here's a quick run-down of the versions:                                                      | 10646     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 10647     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 10648     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 10649     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 10650     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 10651     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 10652     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 10653     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 10654     4
   244       | *                                                                                               | 10655     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 10656     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 10657     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 10658     4
   248       | *                                                                                               | 10659     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 10660     4
   250       | */                                                                                              | 10661     4
   251       |                                                                                                 | 10662     4
   252       |/*                                                                                               | 10663     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 10664     4
   254       | * available. Also make them available when requested so.                                        | 10665     4
   255       | */                                                                                              | 10666     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 10667     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 10668     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 10669     4
   259       |#define __DF_VISIBLE    1                                                                        | 10670     4
   260       |#else                                                                                            | 10671     4
   261       |#define __DF_VISIBLE    0                                                                        | 10672     4
   262       |#endif                                                                                           | 10673     4
   263       |                                                                                                 | 10674     4
   264       |/*-                                                                                              | 10675     4
   265       | * The following definitions are an extension of the behavior originally                         | 10676     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 10677     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 10678     4
   268       | * header file is included.                                                                      | 10679     4
   269       | *                                                                                               | 10680     4
   270       | * Here's a quick run-down of the versions:                                                      | 10681     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 10682     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 10683     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 10684     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 10685     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 10686     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 10687     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 10688     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 10689     4
   279       | *                                                                                               | 10690     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 10691     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 10692     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 10693     4
   283       | *                                                                                               | 10694     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 10695     4
   285       | */                                                                                              | 10696     4
   286       |                                                                                                 | 10697     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   207


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 10698     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 10699     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 10700     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 10701     4
   291       |#endif                                                                                           | 10702     4
   292       |                                                                                                 | 10703     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 10704     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 10705     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 10706     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 10707     4
   297       |#endif                                                                                           | 10708     4
   298       |                                                                                                 | 10709     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 10710     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 10711     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 10712     4
   302       |#define __XSI_VISIBLE           700                                                              | 10713     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 10714     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 10715     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 10716     4
   306       |#define __XSI_VISIBLE           600                                                              | 10717     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 10718     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 10719     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 10720     4
   310       |#define __XSI_VISIBLE           500                                                              | 10721     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 10722     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 10723     4
   313       |#endif                                                                                           | 10724     4
   314       |#endif                                                                                           | 10725     4
   315       |                                                                                                 | 10726     4
   316       |/*                                                                                               | 10727     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 10728     4
   318       | * important.                                                                                    | 10729     4
   319       | */                                                                                              | 10730     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 10731     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 10732     4
   322       |#endif                                                                                           | 10733     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 10734     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 10735     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 10736     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 10737     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 10738     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 10739     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 10740     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 10741     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 10742     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 10743     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 10744     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 10745     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 10746     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 10747     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 10748     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 10749     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 10750     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   208


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   340       |#define __POSIX_VISIBLE         199009                                                           | 10751     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 10752     4
   342       |#else                                                                                            | 10753     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 10754     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 10755     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 10756     4
   346       |#else                                                                                            | 10757     4
   347       |/*-                                                                                              | 10758     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 10759     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 10760     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 10761     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 10762     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 10763     4
   353       | * a test program to print out the values.                                                       | 10764     4
   354       | *                                                                                               | 10765     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 10766     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 10767     4
   357       | * environment (and in fact we will never get here).                                             | 10768     4
   358       | */                                                                                              | 10769     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 10770     4
   360       |#define __POSIX_VISIBLE         0                                                                | 10771     4
   361       |#define __XSI_VISIBLE           0                                                                | 10772     4
   362       |#define __BSD_VISIBLE           0                                                                | 10773     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 10774     4
   364       |#define __EXT1_VISIBLE          0                                                                | 10775     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 10776     4
   366       |#define __POSIX_VISIBLE         0                                                                | 10777     4
   367       |#define __XSI_VISIBLE           0                                                                | 10778     4
   368       |#define __BSD_VISIBLE           0                                                                | 10779     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 10780     4
   370       |#define __EXT1_VISIBLE          0                                                                | 10781     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 10782     4
   372       |#define __POSIX_VISIBLE         0                                                                | 10783     4
   373       |#define __XSI_VISIBLE           0                                                                | 10784     4
   374       |#define __BSD_VISIBLE           0                                                                | 10785     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 10786     4
   376       |#define __EXT1_VISIBLE          0                                                                | 10787     4
   377       |#else                           /* Default environment: show everything. */                      | 10788     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 10789     4
   379       |#define __XSI_VISIBLE           700                                                              | 10790     4
   380       |#define __BSD_VISIBLE           1                                                                | 10791     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 10792     4
   382       |#define __EXT1_VISIBLE          1                                                                | 10793     4
   383       |#endif                                                                                           | 10794     4
   384       |#endif                                                                                           | 10795     4
   385       |                                                                                                 | 10796     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 10797     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 10798     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 10799     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 10800     4
   390       |#define __EXT1_VISIBLE          1                                                                | 10801     4
   391       |#else                                                                                            | 10802     4
   392       |#define __EXT1_VISIBLE          0                                                                | 10803     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   209


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   393       |#endif                                                                                           | 10804     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 10805     4
   395       |                                                                                                 | 10806     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 10807     4
   397       |#define __NO_TLS 1                                                                               | 10808     4
   398       |#endif                                                                                           | 10809     4
   399       |                                                                                                 | 10810     4
   400       |                                                                                                 | 10811     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 10812     4
   402       |#define __FBSDID(x)                                                                              | 10813     4
   403       |                                                                                                 | 10814     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 10815     4
   405       |#pragma pack(reset)                                                                              | 10816     4
    34       |#include <sys/_types.h>                                                                          | 10817    22
     1       |/* release 2.25.00 */                                                                            | 10818     6
     2       |#pragma pack()                                                                                   | 10819     6
     3       |/*-                                                                                              | 10820     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 10821     6
     5       | * All rights reserved.                                                                          | 10822     6
     6       | *                                                                                               | 10823     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 10824     6
     8       | * modification, are permitted provided that the following conditions                            | 10825     6
     9       | * are met:                                                                                      | 10826     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 10827     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 10828     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 10829     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 10830     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 10831     6
    15       | *                                                                                               | 10832     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 10833     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 10834     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 10835     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 10836     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 10837     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 10838     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 10839     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 10840     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 10841     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 10842     6
    26       | * SUCH DAMAGE.                                                                                  | 10843     6
    27       | *                                                                                               | 10844     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 10845     6
    29       | */                                                                                              | 10846     6
    30       |                                                                                                 | 10847     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 10848     6
    32       |#define _SYS__TYPES_H_                                                                           | 10849     6
    33       |                                                                                                 | 10850     6
    34       |#include <sys/cdefs.h>                                                                           | 10851     6
    35       |#include <machine/_types.h>                                                                      | 10852     6
    36       |                                                                                                 | 10853     6
    37       |/*                                                                                               | 10854     6
    38       | * Standard type definitions.                                                                    | 10855     6
    39       | */                                                                                              | 10856     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   210


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 10857     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 10858     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 10859     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 10860     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 10861     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 10862     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 10863     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 10864     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 10865     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 10866     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 10867     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 10868     6
    52       |typedef int             __nl_item;                                                               | 10869     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 10870     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 10871     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 10872     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 10873     6
    57       |                                        /* signed, because of legacy code */                     | 10874     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 10875     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 10876     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 10877     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 10878     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 10879     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 10880     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 10881     6
    65       |                                                                                                 | 10882     6
    66       |/*                                                                                               | 10883     6
    67       | * Unusual type definitions.                                                                     | 10884     6
    68       | */                                                                                              | 10885     6
    69       |/*                                                                                               | 10886     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 10887     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 10888     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 10889     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 10890     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 10891     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 10892     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 10893     6
    77       | *                                                                                               | 10894     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 10895     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 10896     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 10897     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 10898     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 10899     6
    83       | */                                                                                              | 10900     6
    84       |#ifdef __cplusplus                                                                               | 10901     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 10902     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 10903     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 10904     6
    88       |#else                                                                                            | 10905     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 10906     6
    90       |#endif                                                                                           | 10907     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 10908     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 10909     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   211


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 10910     6
    94       |                                                                                                 | 10911     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 10912     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 10913     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 10914     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 10915     6
    99       |#endif                                                                                           | 10916     6
   100       |                                                                                                 | 10917     6
   101       |#if !defined(__cplusplus)                                                                        | 10918     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 10919     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 10920     6
   104       |#endif                                                                                           | 10921     6
   105       |                                                                                                 | 10922     6
   106       |                                                                                                 | 10923     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 10924     6
   108       |                                                                                                 | 10925     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 10926     6
   110       |                                                                                                 | 10927     6
   111       |/*                                                                                               | 10928     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 10929     6
   113       | * stream conversions.                                                                           | 10930     6
   114       | */                                                                                              | 10931     6
   115       |typedef union {                                                                                  | 10932     6
   116       |        char            __mbstate8[128];                                                         | 10933     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 10934     6
   118       |} __mbstate_t;                                                                                   | 10935     6
   119       |                                                                                                 | 10936     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 10937     6
   121       |#pragma pack(reset)                                                                              | 10938     6
    35       |                                                                                                 | 10939    22
    36       |#ifndef _SIZE_T_DECLARED                                                                         | 10940    22
    37       |typedef __size_t        size_t;                                                                  | 10941    22
    38       |#define _SIZE_T_DECLARED                                                                         | 10942    22
    39       |#endif                                                                                           | 10943    22
    40       |                                                                                                 | 10944    22
    41       |__BEGIN_DECLS                                                                                    | 10945    22
    41       +                                                                                                 + 10945    22
    42       |int      bcmp(const void *, const void *, size_t) __pure;       /* LEGACY */                     | 10946    22
    42       +int      bcmp(const void *, const void *, size_t) __attribute__((__pure__));                     + 10946    22
    43       |void     bcopy(const void *, void *, size_t);                   /* LEGACY */                     | 10947    22
    44       |void     bzero(void *, size_t);                                 /* LEGACY */                     | 10948    22
    45       |int      ffs(int) __pure2;                                                                       | 10949    22
    45       +int      ffs(int) __attribute__((__const__));                                                    + 10949    22
    46       |#ifdef __BSD_VISIBLE                                                                             | 10950    22
    47       |int      ffsl(long) __pure2;                                                                     | 10951    22
    47       +int      ffsl(long) __attribute__((__const__));                                                  + 10951    22
    48       |int      ffsll(long long) __pure2;                                                               | 10952    22
    48       +int      ffsll(long long) __attribute__((__const__));                                            + 10952    22
    49       |int      fls(int) __pure2;                                                                       | 10953    22
    49       +int      fls(int) __attribute__((__const__));                                                    + 10953    22
    50       |int      flsl(long) __pure2;                                                                     | 10954    22
    50       +int      flsl(long) __attribute__((__const__));                                                  + 10954    22
    51       |int      flsll(long long) __pure2;                                                               | 10955    22
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   212


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    51       +int      flsll(long long) __attribute__((__const__));                                            + 10955    22
    52       |#endif                                                                                           | 10956    22
    53       |char    *index(const char *, int) __pure;                       /* LEGACY */                     | 10957    22
    53       +char    *index(const char *, int) __attribute__((__pure__));                                     + 10957    22
    54       |char    *rindex(const char *, int) __pure;                      /* LEGACY */                     | 10958    22
    54       +char    *rindex(const char *, int) __attribute__((__pure__));                                    + 10958    22
    55       |                                                                                                 | 10959    22
    56       |#pragma map (strcasecmp, "STRC@CMP")                                                             | 10960    22
    57       |int      strcasecmp(const char *, const char *) __pure;                                          | 10961    22
    57       +int      strcasecmp(const char *, const char *) __attribute__((__pure__));                       + 10961    22
    58       |#pragma map (strncasecmp, "STRNC@CM")                                                            | 10962    22
    59       |int      strncasecmp(const char *, const char *, size_t) __pure;                                 | 10963    22
    59       +int      strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));              + 10963    22
    60       |__END_DECLS                                                                                      | 10964    22
    60       +                                                                                                 + 10964    22
    61       |                                                                                                 | 10965    22
    62       |#endif /* _STRINGS_H_ */                                                                         | 10966    22
    63       |#pragma pack(reset)                                                                              | 10967    22
    51       |#endif                                                                                           | 10968    21
    52       |                                                                                                 | 10969    21
    53       |#ifndef _SIZE_T_DECLARED                                                                         | 10970    21
    54       |typedef __size_t        size_t;                                                                  | 10971    21
    55       |#define _SIZE_T_DECLARED                                                                         | 10972    21
    56       |#endif                                                                                           | 10973    21
    57       |                                                                                                 | 10974    21
    58       |                                                                                                 | 10975    21
    59       |__BEGIN_DECLS                                                                                    | 10976    21
    59       +                                                                                                 + 10976    21
    60       |                                                                                                 | 10977    21
    61       |/* Compiler-defined builtin's */                                                                 | 10978    21
    62       |                                                                                                 | 10979    21
    63       |#ifdef __cplusplus                                                                               | 10980    21
    64       |extern "builtin" {                                                                               | 10981    21
    65       |#else                                                                                            | 10982    21
    66       |#pragma linkage(__memcpy, builtin)                                                               | 10983    21
    67       |#pragma linkage(__memset, builtin)                                                               | 10984    21
    68       |#pragma linkage(__memcmp, builtin)                                                               | 10985    21
    69       |#pragma linkage(__memchr, builtin)                                                               | 10986    21
    70       |#pragma linkage(__strcpy, builtin)                                                               | 10987    21
    71       |#pragma linkage(__strlen, builtin)                                                               | 10988    21
    72       |#pragma linkage(__strcmp, builtin)                                                               | 10989    21
    73       |#pragma linkage(__strcat, builtin)                                                               | 10990    21
    74       |#pragma linkage(__strchr, builtin)                                                               | 10991    21
    75       |#pragma linkage(__strrchr, builtin)                                                              | 10992    21
    76       |#pragma linkage(__strncat, builtin)                                                              | 10993    21
    77       |#pragma linkage(__strncpy, builtin)                                                              | 10994    21
    78       |#pragma linkage(__strncmp, builtin)                                                              | 10995    21
    79       |#pragma linkage(__strpbrk, builtin)                                                              | 10996    21
    80       |#endif                                                                                           | 10997    21
    81       |                                                                                                 | 10998    21
    82       |void    *__memcpy (void * __restrict, const void * __restrict, size_t);                          | 10999    21
    82       +void    *__memcpy (void * __restrict__, const void * __restrict__, size_t);                      + 10999    21
    83       |void    *__memset (void *, int, size_t);                                                         | 11000    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   213


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    84       |int      __memcmp (const void *, const void *, size_t);                                          | 11001    21
    85       |void    *__memchr (const void *, int, size_t);                                                   | 11002    21
    86       |                                                                                                 | 11003    21
    87       |char    *__strcpy (char * __restrict, const char * __restrict);                                  | 11004    21
    87       +char    *__strcpy (char * __restrict__, const char * __restrict__);                              + 11004    21
    88       |size_t   __strlen (const char *);                                                                | 11005    21
    89       |int      __strcmp (const char *, const char *);                                                  | 11006    21
    90       |char    *__strcat (char * __restrict, const char * __restrict);                                  | 11007    21
    90       +char    *__strcat (char * __restrict__, const char * __restrict__);                              + 11007    21
    91       |char    *__strchr (const char *, int);                                                           | 11008    21
    92       |char    *__strrchr (const char *, int);                                                          | 11009    21
    93       |                                                                                                 | 11010    21
    94       |char    *__strncat (char * __restrict, const char * __restrict, size_t);                         | 11011    21
    94       +char    *__strncat (char * __restrict__, const char * __restrict__, size_t);                     + 11011    21
    95       |int      __strncmp (const char *, const char *, size_t);                                         | 11012    21
    96       |char    *__strncpy (char * __restrict, const char * __restrict, size_t);                         | 11013    21
    96       +char    *__strncpy (char * __restrict__, const char * __restrict__, size_t);                     + 11013    21
    97       |char    *__strpbrk (const char *, const char *);                                                 | 11014    21
    98       |#ifdef __cplusplus                                                                               | 11015    21
    99       |}                                                                                                | 11016    21
   100       |#endif                                                                                           | 11017    21
   101       |                                                                                                 | 11018    21
   102       |/* Define the functions that have builtin equivalents, so the */                                 | 11019    21
   103       |/*  builtins will be used when appropriate. */                                                   | 11020    21
   104       |#ifdef __cplusplus                                                                               | 11021    21
   105       |  /* For C++ - define inline functions which invoke the appropriate */                           | 11022    21
   106       |  /*  compiler builtin functions */                                                              | 11023    21
   107       |inline void * memchr (const void *x, int y, size_t z)                                            | 11024    21
   108       |       { return __memchr(x, y, z); }                                                             | 11025    21
   109       |inline void * memcpy (void *x, const void *y, size_t z)                                          | 11026    21
   110       |       { return __memcpy(x, y, z); }                                                             | 11027    21
   111       |inline int    memcmp (const void *x, const void *y, size_t z)                                    | 11028    21
   112       |       { return __memcmp(x, y, z); }                                                             | 11029    21
   113       |inline void * memset (void *x, int y, size_t z)                                                  | 11030    21
   114       |       { return __memset(x, y, z); }                                                             | 11031    21
   115       |                                                                                                 | 11032    21
   116       |inline size_t strlen (const char *x)                                                             | 11033    21
   117       |       { return __strlen(x);       }                                                             | 11034    21
   118       |inline char * strcat (char *x, const char *y)                                                    | 11035    21
   119       |       { return __strcat(x, y);    }                                                             | 11036    21
   120       |inline char * strcpy (char *x, const char *y)                                                    | 11037    21
   121       |       { return __strcpy(x, y);    }                                                             | 11038    21
   122       |inline int    strcmp (const char *x, const char *y)                                              | 11039    21
   123       |       { return __strcmp(x, y);    }                                                             | 11040    21
   124       |inline char * strchr (const char *s, int c)                                                      | 11041    21
   125       |       { return __strchr(s, c);    }                                                             | 11042    21
   126       |inline char * strrchr(const char *s, int c)                                                      | 11043    21
   127       |       { return __strrchr(s, c);   }                                                             | 11044    21
   128       |inline char * strpbrk (const char *s, const char *charset)                                       | 11045    21
   129       |       { return __strpbrk(s, charset); }                                                         | 11046    21
   130       |                                                                                                 | 11047    21
   131       |inline char * strncat (char *s, const char *x, size_t z)                                         | 11048    21
   132       |       { return __strncat(s, x, z); }                                                            | 11049    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   214


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   133       |inline int strncmp (const char *x, const char *y, size_t z)                                      | 11050    21
   134       |       { return __strncmp(x, y, z); }                                                            | 11051    21
   135       |inline char * strncpy (char *s, const char *x, size_t z)                                         | 11052    21
   136       |       { return __strncpy(s, x, z); }                                                            | 11053    21
   137       |#else                                                                                            | 11054    21
   138       |                                                                                                 | 11055    21
   139       |void    *memchr(const void *, int, size_t) __pure;                                               | 11056    21
   139       +void    *memchr(const void *, int, size_t) __attribute__((__pure__));                            + 11056    21
   140       |int      memcmp(const void *, const void *, size_t) __pure;                                      | 11057    21
   140       +int      memcmp(const void *, const void *, size_t) __attribute__((__pure__));                   + 11057    21
   141       |void    *memcpy(void * __restrict, const void * __restrict, size_t);                             | 11058    21
   141       +void    *memcpy(void * __restrict__, const void * __restrict__, size_t);                         + 11058    21
   142       |void    *memset(void *, int, size_t);                                                            | 11059    21
   143       |char    *strcat(char * __restrict, const char * __restrict);                                     | 11060    21
   143       +char    *strcat(char * __restrict__, const char * __restrict__);                                 + 11060    21
   144       |char    *strchr(const char *, int) __pure;                                                       | 11061    21
   144       +char    *strchr(const char *, int) __attribute__((__pure__));                                    + 11061    21
   145       |int      strcmp(const char *, const char *) __pure;                                              | 11062    21
   145       +int      strcmp(const char *, const char *) __attribute__((__pure__));                           + 11062    21
   146       |char    *strcpy(char * __restrict, const char * __restrict);                                     | 11063    21
   146       +char    *strcpy(char * __restrict__, const char * __restrict__);                                 + 11063    21
   147       |size_t   strlen(const char *) __pure;                                                            | 11064    21
   147       +size_t   strlen(const char *) __attribute__((__pure__));                                         + 11064    21
   148       |char    *strncat(char * __restrict, const char * __restrict, size_t);                            | 11065    21
   148       +char    *strncat(char * __restrict__, const char * __restrict__, size_t);                        + 11065    21
   149       |int      strncmp(const char *, const char *, size_t) __pure;                                     | 11066    21
   149       +int      strncmp(const char *, const char *, size_t) __attribute__((__pure__));                  + 11066    21
   150       |char    *strncpy(char * __restrict, const char * __restrict, size_t);                            | 11067    21
   150       +char    *strncpy(char * __restrict__, const char * __restrict__, size_t);                        + 11067    21
   151       |char    *strpbrk(const char *, const char *) __pure;                                             | 11068    21
   151       +char    *strpbrk(const char *, const char *) __attribute__((__pure__));                          + 11068    21
   152       |char    *strrchr(const char *, int) __pure;                                                      | 11069    21
   152       +char    *strrchr(const char *, int) __attribute__((__pure__));                                   + 11069    21
   153       |                                                                                                 | 11070    21
   154       |                                                                                                 | 11071    21
   155       | /* For `C' - use #define macros to handle this */                                               | 11072    21
   156       |#define memset(a,b,c) __memset(a,b,c)                                                            | 11073    21
   157       |#define memcpy(a,b,c) __memcpy(a,b,c)                                                            | 11074    21
   158       |#define memchr(a,b,c) __memchr(a,b,c)                                                            | 11075    21
   159       |#define memcmp(a,b,c) __memcmp(a,b,c)                                                            | 11076    21
   160       |                                                                                                 | 11077    21
   161       |#define strlen(a)     __strlen(a)                                                                | 11078    21
   162       |#define strcat(a,b)   __strcat(a,b)                                                              | 11079    21
   163       |#define strcpy(a,b)   __strcpy(a,b)                                                              | 11080    21
   164       |#define strcmp(a,b)   __strcmp(a,b)                                                              | 11081    21
   165       |#define strchr(a,b)   __strchr(a,b)                                                              | 11082    21
   166       |#define strrchr(a,b)  __strrchr(a,b)                                                             | 11083    21
   167       |#define strpbrk(a,b)  __strpbrk(a,b)                                                             | 11084    21
   168       |                                                                                                 | 11085    21
   169       |#define strncat(a,b,c) __strncat(a,b,c)                                                          | 11086    21
   170       |#define strncmp(a,b,c) __strncmp(a,b,c)                                                          | 11087    21
   171       |#define strncpy(a,b,c) __strncpy(a,b,c)                                                          | 11088    21
   172       |#endif                                                                                           | 11089    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   215


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   173       |                                                                                                 | 11090    21
   174       |#if __BSD_VISIBLE                                                                                | 11091    21
   175       |#pragma map(strchrnul,"STRCHR@L")                                                                | 11092    21
   175       +#pragma map ( strchrnul , "STRCHR@L" )                                                           + 11092    21
   176       |char    *strchrnul(const char*, int) __pure;                                                     | 11093    21
   176       +char    *strchrnul(const char*, int) __attribute__((__pure__));                                  + 11093    21
   177       |#endif                                                                                           | 11094    21
   178       |                                                                                                 | 11095    21
   179       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 11096    21
   180       |void    *memccpy(void * __restrict, const void * __restrict, int, size_t);                       | 11097    21
   180       +void    *memccpy(void * __restrict__, const void * __restrict__, int, size_t);                   + 11097    21
   181       |#endif                                                                                           | 11098    21
   182       |#if __BSD_VISIBLE                                                                                | 11099    21
   183       |void    *memmem(const void *, size_t, const void *, size_t);                                     | 11100    21
   183       +void    *memmem(const void *, size_t, const void *, size_t);                                     + 11100    21
   184       |#endif                                                                                           | 11101    21
   185       |void    *memmove(void *, const void *, size_t);                                                  | 11102    21
   186       |#if __BSD_VISIBLE                                                                                | 11103    21
   187       |char    *stpcpy(char *, const char *);                                                           | 11104    21
   187       +char    *stpcpy(char *, const char *);                                                           + 11104    21
   188       |#pragma map(strcasestr, "STRC@STR")                                                              | 11105    21
   189       |char    *strcasestr(const char *, const char *) __pure;                                          | 11106    21
   189       +char    *strcasestr(const char *, const char *) __attribute__((__pure__));                       + 11106    21
   190       |#endif                                                                                           | 11107    21
   191       |int      strcoll(const char *, const char *);                                                    | 11108    21
   192       |size_t   strcspn(const char *, const char *) __pure;                                             | 11109    21
   192       +size_t   strcspn(const char *, const char *) __attribute__((__pure__));                          + 11109    21
   193       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 11110    21
   194       |char    *strdup(const char *);                                                                   | 11111    21
   194       +char    *strdup(const char *);                                                                   + 11111    21
   195       |#endif                                                                                           | 11112    21
   196       |char    *strerror(int);                                                                          | 11113    21
   197       |#if __POSIX_VISIBLE >= 200112                                                                    | 11114    21
   198       |#pragma map(strerror_r, "STRERR@R")                                                              | 11115    21
   198       +#pragma map ( strerror_r , "STRERR@R" )                                                          + 11115    21
   199       |int      strerror_r(int, char *, size_t);                                                        | 11116    21
   200       |#endif                                                                                           | 11117    21
   201       |#if __BSD_VISIBLE                                                                                | 11118    21
   202       |size_t   strlcat(char *, const char *, size_t);                                                  | 11119    21
   202       +size_t   strlcat(char *, const char *, size_t);                                                  + 11119    21
   203       |size_t   strlcpy(char *, const char *, size_t);                                                  | 11120    21
   204       |#endif                                                                                           | 11121    21
   205       |#if __BSD_VISIBLE                                                                                | 11122    21
   206       |void     strmode(int, char *);                                                                   | 11123    21
   206       +void     strmode(int, char *);                                                                   + 11123    21
   207       |#endif                                                                                           | 11124    21
   208       |#if __BSD_VISIBLE                                                                                | 11125    21
   209       |char    *strnstr(const char *, const char *, size_t) __pure;                                     | 11126    21
   209       +char    *strnstr(const char *, const char *, size_t) __attribute__((__pure__));                  + 11126    21
   210       |#endif                                                                                           | 11127    21
   211       |                                                                                                 | 11128    21
   212       |#if __BSD_VISIBLE                                                                                | 11129    21
   213       |char    *strsep(char **, const char *);                                                          | 11130    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   216


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   213       +char    *strsep(char **, const char *);                                                          + 11130    21
   214       |char    *strsignal(int);                                                                         | 11131    21
   215       |#endif                                                                                           | 11132    21
   216       |size_t   strspn(const char *, const char *) __pure;                                              | 11133    21
   216       +size_t   strspn(const char *, const char *) __attribute__((__pure__));                           + 11133    21
   217       |char    *strstr(const char *, const char *) __pure;                                              | 11134    21
   217       +char    *strstr(const char *, const char *) __attribute__((__pure__));                           + 11134    21
   218       |char    *strtok(char * __restrict, const char * __restrict);                                     | 11135    21
   218       +char    *strtok(char * __restrict__, const char * __restrict__);                                 + 11135    21
   219       |#if __POSIX_VISIBLE >= 199506 || __XSI_VISIBLE >= 500                                            | 11136    21
   220       |char    *strtok_r(char *, const char *, char **);                                                | 11137    21
   220       +char    *strtok_r(char *, const char *, char **);                                                + 11137    21
   221       |#pragma map(strtok_r,"STRTOK@R")                                                                 | 11138    21
   222       |#endif                                                                                           | 11139    21
   223       |size_t   strxfrm(char * __restrict, const char * __restrict, size_t);                            | 11140    21
   223       +size_t   strxfrm(char * __restrict__, const char * __restrict__, size_t);                        + 11140    21
   224       |                                                                                                 | 11141    21
   225       |                                                                                                 | 11142    21
   226       |                                                                                                 | 11143    21
   227       |#if __BSD_VISIBLE                                                                                | 11144    21
   228       |                                                                                                 | 11145    21
   228       +                                                                                                 + 11145    21
   229       |#ifndef _SWAB_DECLARED                                                                           | 11146    21
   230       |#define _SWAB_DECLARED                                                                           | 11147    21
   231       |                                                                                                 | 11148    21
   232       |#ifndef _SSIZE_T_DECLARED                                                                        | 11149    21
   233       |typedef __ssize_t       ssize_t;                                                                 | 11150    21
   234       |#define _SSIZE_T_DECLARED                                                                        | 11151    21
   235       |#endif /* _SIZE_T_DECLARED */                                                                    | 11152    21
   236       |                                                                                                 | 11153    21
   237       |void     swab(const void * __restrict, void * __restrict, ssize_t);                              | 11154    21
   238       |#endif /* _SWAB_DECLARED */                                                                      | 11155    21
   239       |                                                                                                 | 11156    21
   240       |#endif /* __BSD_VISIBLE */                                                                       | 11157    21
   241       |                                                                                                 | 11158    21
   242       |__END_DECLS                                                                                      | 11159    21
   242       +                                                                                                 + 11159    21
   243       |                                                                                                 | 11160    21
   244       |#endif /* _STRING_H_ */                                                                          | 11161    21
   245       |#pragma pack(reset)                                                                              | 11162    21
    51       |#include <errno.h>                                                                               | 11163    18
     1       |/* release 2.25.00 */                                                                            | 11164    23
     2       |#pragma pack()                                                                                   | 11165    23
     3       |/*                                                                                               | 11166    23
     4       | * Copyright (c) 1982, 1986, 1989, 1993                                                          | 11167    23
     5       | *      The Regents of the University of California.  All rights reserved.                       | 11168    23
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 11169    23
     7       | * All or some portions of this file are derived from material licensed                          | 11170    23
     8       | * to the University of California by American Telephone and Telegraph                           | 11171    23
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 11172    23
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 11173    23
    11       | *                                                                                               | 11174    23
    12       | * Redistribution and use in source and binary forms, with or without                            | 11175    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   217


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    13       | * modification, are permitted provided that the following conditions                            | 11176    23
    14       | * are met:                                                                                      | 11177    23
    15       | * 1. Redistributions of source code must retain the above copyright                             | 11178    23
    16       | *    notice, this list of conditions and the following disclaimer.                              | 11179    23
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 11180    23
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 11181    23
    19       | *    documentation and/or other materials provided with the distribution.                       | 11182    23
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 11183    23
    21       | *    may be used to endorse or promote products derived from this software                      | 11184    23
    22       | *    without specific prior written permission.                                                 | 11185    23
    23       | *                                                                                               | 11186    23
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 11187    23
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 11188    23
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 11189    23
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 11190    23
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 11191    23
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 11192    23
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 11193    23
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 11194    23
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 11195    23
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 11196    23
    34       | * SUCH DAMAGE.                                                                                  | 11197    23
    35       | *                                                                                               | 11198    23
    36       | *      @(#)errno.h     8.5 (Berkeley) 1/21/94                                                   | 11199    23
    37       | */                                                                                              | 11200    23
    38       |                                                                                                 | 11201    23
    39       |#ifndef _SYS_ERRNO_H_                                                                            | 11202    23
    40       |#define _SYS_ERRNO_H_                                                                            | 11203    23
    41       |                                                                                                 | 11204    23
    42       |#ifndef _KERNEL                                                                                  | 11205    23
    43       |#include <sys/cdefs.h>                                                                           | 11206    23
     1       |/* release 2.25.00 */                                                                            | 11207     4
     2       |#pragma pack()                                                                                   | 11208     4
     3       |/*                                                                                               | 11209     4
     4       | * Copyright (c) 1991, 1993                                                                      | 11210     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 11211     4
     6       | *                                                                                               | 11212     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 11213     4
     8       | * Berkeley Software Design, Inc.                                                                | 11214     4
     9       | *                                                                                               | 11215     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 11216     4
    11       | * modification, are permitted provided that the following conditions                            | 11217     4
    12       | * are met:                                                                                      | 11218     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 11219     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 11220     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 11221     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 11222     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 11223     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 11224     4
    19       | *    must display the following acknowledgement:                                                | 11225     4
    20       | *      This product includes software developed by the University of                            | 11226     4
    21       | *      California, Berkeley and its contributors.                                               | 11227     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 11228     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   218


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    23       | *    may be used to endorse or promote products derived from this software                      | 11229     4
    24       | *    without specific prior written permission.                                                 | 11230     4
    25       | *                                                                                               | 11231     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 11232     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 11233     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 11234     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 11235     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 11236     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 11237     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 11238     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 11239     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 11240     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 11241     4
    36       | * SUCH DAMAGE.                                                                                  | 11242     4
    37       | *                                                                                               | 11243     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 11244     4
    39       | */                                                                                              | 11245     4
    40       |                                                                                                 | 11246     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 11247     4
    42       |#define _SYS_CDEFS_H_                                                                            | 11248     4
    43       |                                                                                                 | 11249     4
    44       |#if defined(__cplusplus)                                                                         | 11250     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 11251     4
    46       |#define __END_DECLS     }                                                                        | 11252     4
    47       |#else                                                                                            | 11253     4
    48       |#define __BEGIN_DECLS                                                                            | 11254     4
    49       |#define __END_DECLS                                                                              | 11255     4
    50       |#endif                                                                                           | 11256     4
    51       |                                                                                                 | 11257     4
    52       |/*                                                                                               | 11258     4
    53       | * This code has been put in place to help reduce the addition of                                | 11259     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 11260     4
    55       | * having a compiler-agnostic source tree.                                                       | 11261     4
    56       | */                                                                                              | 11262     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 11263     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 11264     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 11265     4
    60       |                                                                                                 | 11266     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 11267     4
    62       |                                                                                                 | 11268     4
    63       |                                                                                                 | 11269     4
    64       |/*                                                                                               | 11270     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 11271     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 11272     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 11273     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 11274     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 11275     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 11276     4
    71       | * this only works with ANSI C.                                                                  | 11277     4
    72       | *                                                                                               | 11278     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 11279     4
    74       | * first.  It is only available with ANSI C.                                                     | 11280     4
    75       | */                                                                                              | 11281     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   219


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 11282     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 11283     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 11284     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 11285     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 11286     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 11287     4
    82       |                                                                                                 | 11288     4
    83       |#define __const         const           /* define reserved names to standard */                  | 11289     4
    84       |#define __signed        signed                                                                   | 11290     4
    85       |#define __volatile      volatile                                                                 | 11291     4
    86       |#if defined(__cplusplus)                                                                         | 11292     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 11293     4
    88       |#else                                                                                            | 11294     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 11295     4
    90       |#endif /* !__cplusplus */                                                                        | 11296     4
    91       |                                                                                                 | 11297     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 11298     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 11299     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 11300     4
    95       |#define __STRING(x)     "x"                                                                      | 11301     4
    96       |                                                                                                 | 11302     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 11303     4
    98       |#define __inline                                                                                 | 11304     4
    99       |#define __signed                                                                                 | 11305     4
   100       |#define __volatile                                                                               | 11306     4
   101       |/*                                                                                               | 11307     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 11308     4
   103       | * deleted from the program and old programs will want them left alone.                          | 11309     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 11310     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 11311     4
   106       | */                                                                                              | 11312     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 11313     4
   108       |#define const                           /* delete ANSI C keywords */                             | 11314     4
   109       |#define inline                                                                                   | 11315     4
   110       |#define signed                                                                                   | 11316     4
   111       |#define volatile                                                                                 | 11317     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 11318     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 11319     4
   114       |                                                                                                 | 11320     4
   115       |/*                                                                                               | 11321     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 11322     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 11323     4
   118       | */                                                                                              | 11324     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 11325     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 11326     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 11327     4
   122       |#define __unused                                                                                 | 11328     4
   123       |#define __aligned(x)                                                                             | 11329     4
   124       |#define __section(x)                                                                             | 11330     4
   125       |#define __nonnull(x)                                                                             | 11331     4
   126       |#define __used                                                                                   | 11332     4
   127       |                                                                                                 | 11333     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 11334     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   220


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   129       |#define __noinline      __attribute__((__noinline__))                                            | 11335     4
   130       |                                                                                                 | 11336     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 11337     4
   132       |#define __func__  NULL                                                                           | 11338     4
   133       |#endif                                                                                           | 11339     4
   134       |                                                                                                 | 11340     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 11341     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 11342     4
   137       |#endif                                                                                           | 11343     4
   138       |                                                                                                 | 11344     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 11345     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 11346     4
   141       | **/                                                                                             | 11347     4
   142       |#ifndef __cplusplus                                                                              | 11348     4
   143       |#define __restrict __restrict__                                                                  | 11349     4
   144       |#else                                                                                            | 11350     4
   145       |/* Systems/C++ does not */                                                                       | 11351     4
   146       |#define __restrict                                                                               | 11352     4
   147       |#endif                                                                                           | 11353     4
   148       |                                                                                                 | 11354     4
   149       |/*                                                                                               | 11355     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 11356     4
   151       | */                                                                                              | 11357     4
   152       |#define __predict_true(exp)     (exp)                                                            | 11358     4
   153       |#define __predict_false(exp)    (exp)                                                            | 11359     4
   154       |                                                                                                 | 11360     4
   155       |                                                                                                 | 11361     4
   156       |/*                                                                                               | 11362     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 11363     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 11364     4
   159       | *                                                                                               | 11365     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 11366     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 11367     4
   162       | */                                                                                              | 11368     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 11369     4
   164       |#undef __offsetof                                                                                | 11370     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 11371     4
   166       |#endif                                                                                           | 11372     4
   167       |                                                                                                 | 11373     4
   168       |/*                                                                                               | 11374     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 11375     4
   170       | * or scanf-like arguments.                                                                      | 11376     4
   171       | */                                                                                              | 11377     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 11378     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 11379     4
   174       |#define __format_arg(fmtarg)                                                                     | 11380     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 11381     4
   176       |                                                                                                 | 11382     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 11383     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 11384     4
   179       |                                                                                                 | 11385     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 11386     4
   181       |#define __weak_reference(sym,alias)                                                              | 11387     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   221


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 11388     4
   183       |#define __warn_references(sym,msg)                                                               | 11389     4
   184       |                                                                                                 | 11390     4
   185       | /* This places the string into the resulting object.  It should */                              | 11391     4
   186       | /* probably become #pragma ident */                                                             | 11392     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 11393     4
   188       |                                                                                                 | 11394     4
   189       |#ifndef __RCSID                                                                                  | 11395     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 11396     4
   191       |#endif                                                                                           | 11397     4
   192       |                                                                                                 | 11398     4
   193       |/*                                                                                               | 11399     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 11400     4
   195       | * Usage:                                                                                        | 11401     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 11402     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 11403     4
   198       | */                                                                                              | 11404     4
   199       |#ifndef __SYSCID                                                                                 | 11405     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 11406     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 11407     4
   202       |#else                                                                                            | 11408     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 11409     4
   204       |#endif                                                                                           | 11410     4
   205       |#endif                                                                                           | 11411     4
   206       |                                                                                                 | 11412     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 11413     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 11414     4
   209       |#endif                                                                                           | 11415     4
   210       |                                                                                                 | 11416     4
   211       |#ifndef __COPYRIGHT                                                                              | 11417     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 11418     4
   213       |#endif                                                                                           | 11419     4
   214       |                                                                                                 | 11420     4
   215       |                                                                                                 | 11421     4
   216       |#ifndef __DECONST                                                                                | 11422     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 11423     4
   218       |#endif                                                                                           | 11424     4
   219       |                                                                                                 | 11425     4
   220       |#ifndef __DEVOLATILE                                                                             | 11426     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 11427     4
   222       |#endif                                                                                           | 11428     4
   223       |                                                                                                 | 11429     4
   224       |#ifndef __DEQUALIFY                                                                              | 11430     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 11431     4
   226       |#endif                                                                                           | 11432     4
   227       |                                                                                                 | 11433     4
   228       |                                                                                                 | 11434     4
   229       |/*-                                                                                              | 11435     4
   230       | * The following definitions are an extension of the behavior originally                         | 11436     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 11437     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 11438     4
   233       | * header file is included.                                                                      | 11439     4
   234       | *                                                                                               | 11440     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   222


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   235       | * Here's a quick run-down of the versions:                                                      | 11441     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 11442     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 11443     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 11444     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 11445     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 11446     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 11447     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 11448     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 11449     4
   244       | *                                                                                               | 11450     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 11451     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 11452     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 11453     4
   248       | *                                                                                               | 11454     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 11455     4
   250       | */                                                                                              | 11456     4
   251       |                                                                                                 | 11457     4
   252       |/*                                                                                               | 11458     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 11459     4
   254       | * available. Also make them available when requested so.                                        | 11460     4
   255       | */                                                                                              | 11461     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 11462     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 11463     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 11464     4
   259       |#define __DF_VISIBLE    1                                                                        | 11465     4
   260       |#else                                                                                            | 11466     4
   261       |#define __DF_VISIBLE    0                                                                        | 11467     4
   262       |#endif                                                                                           | 11468     4
   263       |                                                                                                 | 11469     4
   264       |/*-                                                                                              | 11470     4
   265       | * The following definitions are an extension of the behavior originally                         | 11471     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 11472     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 11473     4
   268       | * header file is included.                                                                      | 11474     4
   269       | *                                                                                               | 11475     4
   270       | * Here's a quick run-down of the versions:                                                      | 11476     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 11477     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 11478     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 11479     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 11480     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 11481     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 11482     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 11483     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 11484     4
   279       | *                                                                                               | 11485     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 11486     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 11487     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 11488     4
   283       | *                                                                                               | 11489     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 11490     4
   285       | */                                                                                              | 11491     4
   286       |                                                                                                 | 11492     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 11493     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   223


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 11494     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 11495     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 11496     4
   291       |#endif                                                                                           | 11497     4
   292       |                                                                                                 | 11498     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 11499     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 11500     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 11501     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 11502     4
   297       |#endif                                                                                           | 11503     4
   298       |                                                                                                 | 11504     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 11505     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 11506     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 11507     4
   302       |#define __XSI_VISIBLE           700                                                              | 11508     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 11509     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 11510     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 11511     4
   306       |#define __XSI_VISIBLE           600                                                              | 11512     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 11513     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 11514     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 11515     4
   310       |#define __XSI_VISIBLE           500                                                              | 11516     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 11517     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 11518     4
   313       |#endif                                                                                           | 11519     4
   314       |#endif                                                                                           | 11520     4
   315       |                                                                                                 | 11521     4
   316       |/*                                                                                               | 11522     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 11523     4
   318       | * important.                                                                                    | 11524     4
   319       | */                                                                                              | 11525     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 11526     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 11527     4
   322       |#endif                                                                                           | 11528     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 11529     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 11530     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 11531     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 11532     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 11533     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 11534     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 11535     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 11536     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 11537     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 11538     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 11539     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 11540     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 11541     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 11542     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 11543     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 11544     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 11545     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 11546     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   224


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   341       |#define __ISO_C_VISIBLE         1990                                                             | 11547     4
   342       |#else                                                                                            | 11548     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 11549     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 11550     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 11551     4
   346       |#else                                                                                            | 11552     4
   347       |/*-                                                                                              | 11553     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 11554     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 11555     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 11556     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 11557     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 11558     4
   353       | * a test program to print out the values.                                                       | 11559     4
   354       | *                                                                                               | 11560     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 11561     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 11562     4
   357       | * environment (and in fact we will never get here).                                             | 11563     4
   358       | */                                                                                              | 11564     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 11565     4
   360       |#define __POSIX_VISIBLE         0                                                                | 11566     4
   361       |#define __XSI_VISIBLE           0                                                                | 11567     4
   362       |#define __BSD_VISIBLE           0                                                                | 11568     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 11569     4
   364       |#define __EXT1_VISIBLE          0                                                                | 11570     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 11571     4
   366       |#define __POSIX_VISIBLE         0                                                                | 11572     4
   367       |#define __XSI_VISIBLE           0                                                                | 11573     4
   368       |#define __BSD_VISIBLE           0                                                                | 11574     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 11575     4
   370       |#define __EXT1_VISIBLE          0                                                                | 11576     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 11577     4
   372       |#define __POSIX_VISIBLE         0                                                                | 11578     4
   373       |#define __XSI_VISIBLE           0                                                                | 11579     4
   374       |#define __BSD_VISIBLE           0                                                                | 11580     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 11581     4
   376       |#define __EXT1_VISIBLE          0                                                                | 11582     4
   377       |#else                           /* Default environment: show everything. */                      | 11583     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 11584     4
   379       |#define __XSI_VISIBLE           700                                                              | 11585     4
   380       |#define __BSD_VISIBLE           1                                                                | 11586     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 11587     4
   382       |#define __EXT1_VISIBLE          1                                                                | 11588     4
   383       |#endif                                                                                           | 11589     4
   384       |#endif                                                                                           | 11590     4
   385       |                                                                                                 | 11591     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 11592     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 11593     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 11594     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 11595     4
   390       |#define __EXT1_VISIBLE          1                                                                | 11596     4
   391       |#else                                                                                            | 11597     4
   392       |#define __EXT1_VISIBLE          0                                                                | 11598     4
   393       |#endif                                                                                           | 11599     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   225


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 11600     4
   395       |                                                                                                 | 11601     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 11602     4
   397       |#define __NO_TLS 1                                                                               | 11603     4
   398       |#endif                                                                                           | 11604     4
   399       |                                                                                                 | 11605     4
   400       |                                                                                                 | 11606     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 11607     4
   402       |#define __FBSDID(x)                                                                              | 11608     4
   403       |                                                                                                 | 11609     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 11610     4
   405       |#pragma pack(reset)                                                                              | 11611     4
    44       |                                                                                                 | 11612    23
    45       |#pragma map(__error, "##ERROR")                                                                  | 11613    23
    46       |                                                                                                 | 11614    23
    47       |__BEGIN_DECLS                                                                                    | 11615    23
    47       +                                                                                                 + 11615    23
    48       |int *   __error __P((void));                                                                     | 11616    23
    48       +int *   __error (void);                                                                          + 11616    23
    49       |__END_DECLS                                                                                      | 11617    23
    49       +                                                                                                 + 11617    23
    50       |#define errno           (* __error())                                                            | 11618    23
    51       |#endif                                                                                           | 11619    23
    52       |                                                                                                 | 11620    23
    53       |#define EPERM           1               /* Operation not permitted */                            | 11621    23
    54       |#define ENOENT          2               /* No such file or directory */                          | 11622    23
    55       |#define ESRCH           3               /* No such process */                                    | 11623    23
    56       |#define EINTR           4               /* Interrupted system call */                            | 11624    23
    57       |#define EIO             5               /* Input/output error */                                 | 11625    23
    58       |#define ENXIO           6               /* Device not configured */                              | 11626    23
    59       |#define E2BIG           7               /* Argument list too long */                             | 11627    23
    60       |#define ENOEXEC         8               /* Exec format error */                                  | 11628    23
    61       |#define EBADF           9               /* Bad file descriptor */                                | 11629    23
    62       |#define ECHILD          10              /* No child processes */                                 | 11630    23
    63       |#define EDEADLK         11              /* Resource deadlock avoided */                          | 11631    23
    64       |                                        /* 11 was EAGAIN */                                      | 11632    23
    65       |#define ENOMEM          12              /* Cannot allocate memory */                             | 11633    23
    66       |#define EACCES          13              /* Permission denied */                                  | 11634    23
    67       |#define EFAULT          14              /* Bad address */                                        | 11635    23
    68       |#ifndef _POSIX_SOURCE                                                                            | 11636    23
    69       |#define ENOTBLK         15              /* Block device required */                              | 11637    23
    70       |#endif                                                                                           | 11638    23
    71       |#define EBUSY           16              /* Device busy */                                        | 11639    23
    72       |#define EEXIST          17              /* File exists */                                        | 11640    23
    73       |#define EXDEV           18              /* Cross-device link */                                  | 11641    23
    74       |#define ENODEV          19              /* Operation not supported by device */                  | 11642    23
    75       |#define ENOTDIR         20              /* Not a directory */                                    | 11643    23
    76       |#define EISDIR          21              /* Is a directory */                                     | 11644    23
    77       |#define EINVAL          22              /* Invalid argument */                                   | 11645    23
    78       |#define ENFILE          23              /* Too many open files in system */                      | 11646    23
    79       |#define EMFILE          24              /* Too many open files */                                | 11647    23
    80       |#define ENOTTY          25              /* Inappropriate ioctl for device */                     | 11648    23
    81       |#ifndef _POSIX_SOURCE                                                                            | 11649    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   226


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    82       |#define ETXTBSY         26              /* Text file busy */                                     | 11650    23
    83       |#endif                                                                                           | 11651    23
    84       |#define EFBIG           27              /* File too large */                                     | 11652    23
    85       |#define ENOSPC          28              /* No space left on device */                            | 11653    23
    86       |#define ESPIPE          29              /* Illegal seek */                                       | 11654    23
    87       |#define EROFS           30              /* Read-only filesystem */                               | 11655    23
    88       |#define EMLINK          31              /* Too many links */                                     | 11656    23
    89       |#define EPIPE           32              /* Broken pipe */                                        | 11657    23
    90       |                                                                                                 | 11658    23
    91       |/* math software */                                                                              | 11659    23
    92       |#define EDOM            33              /* Numerical argument out of domain */                   | 11660    23
    93       |#define ERANGE          34              /* Result too large */                                   | 11661    23
    94       |                                                                                                 | 11662    23
    95       |/* non-blocking and interrupt i/o */                                                             | 11663    23
    96       |#define EAGAIN          35              /* Resource temporarily unavailable */                   | 11664    23
    97       |#ifndef _POSIX_SOURCE                                                                            | 11665    23
    98       |#define EWOULDBLOCK     EAGAIN          /* Operation would block */                              | 11666    23
    99       |#define EINPROGRESS     36              /* Operation now in progress */                          | 11667    23
   100       |#define EALREADY        37              /* Operation already in progress */                      | 11668    23
   101       |                                                                                                 | 11669    23
   102       |/* ipc/network software -- argument errors */                                                    | 11670    23
   103       |#define ENOTSOCK        38              /* Socket operation on non-socket */                     | 11671    23
   104       |#define EDESTADDRREQ    39              /* Destination address required */                       | 11672    23
   105       |#define EMSGSIZE        40              /* Message too long */                                   | 11673    23
   106       |#define EPROTOTYPE      41              /* Protocol wrong type for socket */                     | 11674    23
   107       |#define ENOPROTOOPT     42              /* Protocol not available */                             | 11675    23
   108       |#define EPROTONOSUPPORT 43              /* Protocol not supported */                             | 11676    23
   109       |#define ESOCKTNOSUPPORT 44              /* Socket type not supported */                          | 11677    23
   110       |#define EOPNOTSUPP      45              /* Operation not supported */                            | 11678    23
   111       |#define ENOTSUP         EOPNOTSUPP      /* Operation not supported */                            | 11679    23
   112       |#define EPFNOSUPPORT    46              /* Protocol family not supported */                      | 11680    23
   113       |#define EAFNOSUPPORT    47              /* Address family not supported by protocol family */    | 11681    23
   114       |#define EADDRINUSE      48              /* Address already in use */                             | 11682    23
   115       |#define EADDRNOTAVAIL   49              /* Can't assign requested address */                     | 11683    23
   116       |                                                                                                 | 11684    23
   117       |/* ipc/network software -- operational errors */                                                 | 11685    23
   118       |#define ENETDOWN        50              /* Network is down */                                    | 11686    23
   119       |#define ENETUNREACH     51              /* Network is unreachable */                             | 11687    23
   120       |#define ENETRESET       52              /* Network dropped connection on reset */                | 11688    23
   121       |#define ECONNABORTED    53              /* Software caused connection abort */                   | 11689    23
   122       |#define ECONNRESET      54              /* Connection reset by peer */                           | 11690    23
   123       |#define ENOBUFS         55              /* No buffer space available */                          | 11691    23
   124       |#define EISCONN         56              /* Socket is already connected */                        | 11692    23
   125       |#define ENOTCONN        57              /* Socket is not connected */                            | 11693    23
   126       |#define ESHUTDOWN       58              /* Can't send after socket shutdown */                   | 11694    23
   127       |#define ETOOMANYREFS    59              /* Too many references: can't splice */                  | 11695    23
   128       |#define ETIMEDOUT       60              /* Operation timed out */                                | 11696    23
   129       |#define ECONNREFUSED    61              /* Connection refused */                                 | 11697    23
   130       |                                                                                                 | 11698    23
   131       |#define ELOOP           62              /* Too many levels of symbolic links */                  | 11699    23
   132       |#endif /* _POSIX_SOURCE */                                                                       | 11700    23
   133       |#define ENAMETOOLONG    63              /* File name too long */                                 | 11701    23
   134       |                                                                                                 | 11702    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   227


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   135       |/* should be rearranged */                                                                       | 11703    23
   136       |#ifndef _POSIX_SOURCE                                                                            | 11704    23
   137       |#define EHOSTDOWN       64              /* Host is down */                                       | 11705    23
   138       |#define EHOSTUNREACH    65              /* No route to host */                                   | 11706    23
   139       |#endif /* _POSIX_SOURCE */                                                                       | 11707    23
   140       |#define ENOTEMPTY       66              /* Directory not empty */                                | 11708    23
   141       |                                                                                                 | 11709    23
   142       |/* quotas & mush */                                                                              | 11710    23
   143       |#ifndef _POSIX_SOURCE                                                                            | 11711    23
   144       |#define EPROCLIM        67              /* Too many processes */                                 | 11712    23
   145       |#define EUSERS          68              /* Too many users */                                     | 11713    23
   146       |#define EDQUOT          69              /* Disc quota exceeded */                                | 11714    23
   147       |                                                                                                 | 11715    23
   148       |/* Network File System */                                                                        | 11716    23
   149       |#define ESTALE          70              /* Stale NFS file handle */                              | 11717    23
   150       |#define EREMOTE         71              /* Too many levels of remote in path */                  | 11718    23
   151       |#define EBADRPC         72              /* RPC struct is bad */                                  | 11719    23
   152       |#define ERPCMISMATCH    73              /* RPC version wrong */                                  | 11720    23
   153       |#define EPROGUNAVAIL    74              /* RPC prog. not avail */                                | 11721    23
   154       |#define EPROGMISMATCH   75              /* Program version wrong */                              | 11722    23
   155       |#define EPROCUNAVAIL    76              /* Bad procedure for program */                          | 11723    23
   156       |#endif /* _POSIX_SOURCE */                                                                       | 11724    23
   157       |                                                                                                 | 11725    23
   158       |#define ENOLCK          77              /* No locks available */                                 | 11726    23
   159       |#define ENOSYS          78              /* Function not implemented */                           | 11727    23
   160       |                                                                                                 | 11728    23
   161       |#ifndef _POSIX_SOURCE                                                                            | 11729    23
   162       |#define EFTYPE          79              /* Inappropriate file type or format */                  | 11730    23
   163       |#define EAUTH           80              /* Authentication error */                               | 11731    23
   164       |#define ENEEDAUTH       81              /* Need authenticator */                                 | 11732    23
   165       |#define EIDRM           82              /* Identifier removed */                                 | 11733    23
   166       |#define ENOMSG          83              /* No message of desired type */                         | 11734    23
   167       |#define EOVERFLOW       84              /* Value too large to be stored in data type */          | 11735    23
   168       |#define ECANCELED       85              /* Operation canceled */                                 | 11736    23
   169       |#define EILSEQ          86              /* Illegal byte sequence */                              | 11737    23
   170       |#define ENOATTR         87              /* Attribute not found */                                | 11738    23
   171       |                                                                                                 | 11739    23
   172       |#define EDOOFUS         88              /* Programming error */                                  | 11740    23
   173       |#endif /* _POSIX_SOURCE */                                                                       | 11741    23
   174       |                                                                                                 | 11742    23
   175       |#define EBADMSG         89              /* Bad message */                                        | 11743    23
   176       |#define EMULTIHOP       90              /* Multihop attempted */                                 | 11744    23
   177       |#define ENOLINK         91              /* Link has been severed */                              | 11745    23
   178       |#define EPROTO          92              /* Protocol error */                                     | 11746    23
   179       |                                                                                                 | 11747    23
   180       |#ifndef _POSIX_SOURCE                                                                            | 11748    23
   181       |#define ENOTCAPABLE     93              /* Capabilities insufficient */                          | 11749    23
   182       |#define ECAPMODE        94              /* Not permitted in capability mode */                   | 11750    23
   183       |#define ENOTRECOVERABLE 95              /* State not recoverable */                              | 11751    23
   184       |#define EOWNERDEAD      96              /* Previous owner died */                                | 11752    23
   185       |                                                                                                 | 11753    23
   186       |#define EMVSERR         97              /* An MVS environmental or internal */                   | 11754    23
   187       |                                        /* error */                                              | 11755    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   228


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   188       |#endif /* _POSIX_SOURCE */                                                                       | 11756    23
   189       |                                                                                                 | 11757    23
   190       |#ifndef _POSIX_SOURCE                                                                            | 11758    23
   191       |#define ELAST           97              /* Must be equal largest errno */                        | 11759    23
   192       |#endif /* _POSIX_SOURCE */                                                                       | 11760    23
   193       |                                                                                                 | 11761    23
   194       |#ifdef _KERNEL                                                                                   | 11762    23
   195       |/* pseudo-errors returned inside kernel to modify return to process */                           | 11763    23
   196       |#define ERESTART        (-1)            /* restart syscall */                                    | 11764    23
   197       |#define EJUSTRETURN     (-2)            /* don't modify regs, just return */                     | 11765    23
   198       |#define ENOIOCTL        (-3)            /* ioctl not handled by this layer */                    | 11766    23
   199       |#endif                                                                                           | 11767    23
   200       |                                                                                                 | 11768    23
   201       |#endif                                                                                           | 11769    23
   202       |#pragma pack(reset)                                                                              | 11770    23
    52       |#include <time.h>                                                                                | 11771    18
     1       |/* release 2.25.00 */                                                                            | 11772    16
     2       |#pragma pack()                                                                                   | 11773    16
     3       |/*                                                                                               | 11774    16
     4       | * Copyright (c) 1989, 1993                                                                      | 11775    16
     5       | *      The Regents of the University of California.  All rights reserved.                       | 11776    16
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 11777    16
     7       | * All or some portions of this file are derived from material licensed                          | 11778    16
     8       | * to the University of California by American Telephone and Telegraph                           | 11779    16
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 11780    16
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 11781    16
    11       | *                                                                                               | 11782    16
    12       | * Redistribution and use in source and binary forms, with or without                            | 11783    16
    13       | * modification, are permitted provided that the following conditions                            | 11784    16
    14       | * are met:                                                                                      | 11785    16
    15       | * 1. Redistributions of source code must retain the above copyright                             | 11786    16
    16       | *    notice, this list of conditions and the following disclaimer.                              | 11787    16
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 11788    16
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 11789    16
    19       | *    documentation and/or other materials provided with the distribution.                       | 11790    16
    20       | * 3. All advertising materials mentioning features or use of this software                      | 11791    16
    21       | *    must display the following acknowledgement:                                                | 11792    16
    22       | *      This product includes software developed by the University of                            | 11793    16
    23       | *      California, Berkeley and its contributors.                                               | 11794    16
    24       | * 4. Neither the name of the University nor the names of its contributors                       | 11795    16
    25       | *    may be used to endorse or promote products derived from this software                      | 11796    16
    26       | *    without specific prior written permission.                                                 | 11797    16
    27       | *                                                                                               | 11798    16
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 11799    16
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 11800    16
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 11801    16
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 11802    16
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 11803    16
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 11804    16
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 11805    16
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 11806    16
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 11807    16
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 11808    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   229


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    38       | * SUCH DAMAGE.                                                                                  | 11809    16
    39       | *                                                                                               | 11810    16
    40       | *      @(#)time.h      8.3 (Berkeley) 1/21/94                                                   | 11811    16
    41       | */                                                                                              | 11812    16
    42       |                                                                                                 | 11813    16
    43       |/*                                                                                               | 11814    16
    44       | */                                                                                              | 11815    16
    45       |                                                                                                 | 11816    16
    46       |#ifndef _TIME_H_                                                                                 | 11817    16
    47       |#define _TIME_H_                                                                                 | 11818    16
    48       |                                                                                                 | 11819    16
    49       |#include <sys/cdefs.h>                                                                           | 11820    16
    50       |#include <sys/_null.h>                                                                           | 11821    16
    51       |#include <sys/_types.h>                                                                          | 11822    16
    52       |                                                                                                 | 11823    16
    53       |#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE                             | 11824    16
    54       |/*                                                                                               | 11825    16
    55       | * Frequency of the clock ticks reported by times().  Deprecated - use                           | 11826    16
    56       | * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)                                      | 11827    16
    57       | *                                                                                               | 11828    16
    58       | */                                                                                              | 11829    16
    59       |#define CLK_TCK         10000                                                                    | 11830    16
    60       |#endif                                                                                           | 11831    16
    61       |                                                                                                 | 11832    16
    62       |/* Frequency of the clock ticks reported by clock().  */                                         | 11833    16
    63       |#define CLOCKS_PER_SEC  128                                                                      | 11834    16
    64       |                                                                                                 | 11835    16
    65       |#ifndef _CLOCK_T_DECLARED                                                                        | 11836    16
    66       |typedef __clock_t       clock_t;                                                                 | 11837    16
    67       |#define _CLOCK_T_DECLARED                                                                        | 11838    16
    68       |#endif                                                                                           | 11839    16
    69       |                                                                                                 | 11840    16
    70       |#ifndef _TIME_T_DECLARED                                                                         | 11841    16
    71       |typedef __time_t        time_t;                                                                  | 11842    16
    72       |#define _TIME_T_DECLARED                                                                         | 11843    16
    73       |#endif                                                                                           | 11844    16
    74       |                                                                                                 | 11845    16
    75       |#ifndef _SIZE_T_DECLARED                                                                         | 11846    16
    76       |typedef __size_t        size_t;                                                                  | 11847    16
    77       |#define _SIZE_T_DECLARED                                                                         | 11848    16
    78       |#endif                                                                                           | 11849    16
    79       |                                                                                                 | 11850    16
    80       |#if __POSIX_VISIBLE >= 199309                                                                    | 11851    16
    81       |/*                                                                                               | 11852    16
    82       | * New in POSIX 1003.1b-1993.                                                                    | 11853    16
    83       | */                                                                                              | 11854    16
    84       |#ifndef _CLOCKID_T_DECLARED                                                                      | 11855    16
    85       |typedef __clockid_t     clockid_t;                                                               | 11856    16
    86       |#define _CLOCKID_T_DECLARED                                                                      | 11857    16
    87       |#endif                                                                                           | 11858    16
    88       |                                                                                                 | 11859    16
    89       |#ifndef _TIMER_T_DECLARED                                                                        | 11860    16
    90       |typedef __timer_t       timer_t;                                                                 | 11861    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   230


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    91       |#define _TIMER_T_DECLARED                                                                        | 11862    16
    92       |#endif                                                                                           | 11863    16
    93       |                                                                                                 | 11864    16
    94       |#include <sys/timespec.h>                                                                        | 11865    16
    95       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           | 11866    16
    96       |                                                                                                 | 11867    16
    97       |/* These macros are also in sys/time.h. */                                                       | 11868    16
    98       |#if !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112                                        | 11869    16
    99       |#define CLOCK_REALTIME  0                                                                        | 11870    16
   100       |#if 0                                                                                            | 11871    16
   101       |  /* only CLOCK_REALTIME exists in this implementation */                                        | 11872    16
   102       |#ifdef __BSD_VISIBLE                                                                             | 11873    16
   103       |#define CLOCK_VIRTUAL   1                                                                        | 11874    16
   104       |#define CLOCK_PROF      2                                                                        | 11875    16
   105       |#endif                                                                                           | 11876    16
   106       |#define CLOCK_MONOTONIC 4                                                                        | 11877    16
   107       |#endif /* 0 */                                                                                   | 11878    16
   108       |#endif /* !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112 */                               | 11879    16
   109       |                                                                                                 | 11880    16
   110       |#if !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112                                         | 11881    16
   111       |#if __BSD_VISIBLE                                                                                | 11882    16
   112       |#define TIMER_RELTIME   0x0     /* relative timer */                                             | 11883    16
   113       |#endif                                                                                           | 11884    16
   114       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             | 11885    16
   115       |#endif /* !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112 */                                | 11886    16
   116       |                                                                                                 | 11887    16
   117       |struct tm {                                                                                      | 11888    16
   118       |        int     tm_sec;         /* seconds after the minute [0-60] */                            | 11889    16
   119       |        int     tm_min;         /* minutes after the hour [0-59] */                              | 11890    16
   120       |        int     tm_hour;        /* hours since midnight [0-23] */                                | 11891    16
   121       |        int     tm_mday;        /* day of the month [1-31] */                                    | 11892    16
   122       |        int     tm_mon;         /* months since January [0-11] */                                | 11893    16
   123       |        int     tm_year;        /* years since 1900 */                                           | 11894    16
   124       |        int     tm_wday;        /* days since Sunday [0-6] */                                    | 11895    16
   125       |        int     tm_yday;        /* days since January 1 [0-365] */                               | 11896    16
   126       |        int     tm_isdst;       /* Daylight Savings Time flag */                                 | 11897    16
   127       |        long    tm_gmtoff;      /* offset from UTC in seconds */                                 | 11898    16
   128       |        char    *tm_zone;       /* timezone abbreviation */                                      | 11899    16
   129       |};                                                                                               | 11900    16
   130       |                                                                                                 | 11901    16
   131       |#if __POSIX_VISIBLE                                                                              | 11902    16
   132       |extern char *tzname[];                                                                           | 11903    16
   133       |#endif                                                                                           | 11904    16
   134       |                                                                                                 | 11905    16
   135       |__BEGIN_DECLS                                                                                    | 11906    16
   136       |char *asctime(const struct tm *);                                                                | 11907    16
   137       |clock_t clock(void);                                                                             | 11908    16
   138       |char *ctime(const time_t *);                                                                     | 11909    16
   139       |double difftime(time_t, time_t);                                                                 | 11910    16
   140       |/* XXX missing: getdate() */                                                                     | 11911    16
   141       |struct tm *gmtime(const time_t *);                                                               | 11912    16
   142       |#pragma map (localtime, "LC@LTIME")                                                              | 11913    16
   143       |struct tm *localtime(const time_t *);                                                            | 11914    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   231


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   144       |time_t mktime(struct tm *);                                                                      | 11915    16
   145       |size_t strftime(char * __restrict, size_t, const char * __restrict,                              | 11916    16
   146       |    const struct tm * __restrict);                                                               | 11917    16
   147       |time_t time(time_t *);                                                                           | 11918    16
   148       |                                                                                                 | 11919    16
   149       |#if __POSIX_VISIBLE                                                                              | 11920    16
   150       |void tzset(void);                                                                                | 11921    16
   151       |#endif                                                                                           | 11922    16
   152       |                                                                                                 | 11923    16
   153       |#if __POSIX_VISIBLE >= 199309                                                                    | 11924    16
   154       |#pragma map(clock_getres, "@@CLKRES")                                                            | 11925    16
   155       |int clock_getres(clockid_t, struct timespec *);                                                  | 11926    16
   156       |#pragma map(clock_gettime, "@@CLKGET")                                                           | 11927    16
   157       |int clock_gettime(clockid_t, struct timespec *);                                                 | 11928    16
   158       |#pragma map(clock_settime, "@@CLKSET")                                                           | 11929    16
   159       |int clock_settime(clockid_t, const struct timespec *);                                           | 11930    16
   160       |#pragma map(nanosleep,"@@NNOSLP")                                                                | 11931    16
   161       |int nanosleep(const struct timespec *, struct timespec *);                                       | 11932    16
   162       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           | 11933    16
   163       |                                                                                                 | 11934    16
   164       |#if __POSIX_VISIBLE >= 199506                                                                    | 11935    16
   165       |#pragma map(asctime_r, "@@ASCT@R")                                                               | 11936    16
   166       |char *asctime_r(const struct tm *, char *);                                                      | 11937    16
   167       |#pragma map(ctime_r, "@@CTME@R")                                                                 | 11938    16
   168       |char *ctime_r(const time_t *, char *);                                                           | 11939    16
   169       |#pragma map(gmtime_r, "@@GMTM@R")                                                                | 11940    16
   170       |struct tm *gmtime_r(const time_t *, struct tm *);                                                | 11941    16
   171       |#pragma map(localtime_r, "@@LCLT@R")                                                             | 11942    16
   172       |struct tm *localtime_r(const time_t *, struct tm *);                                             | 11943    16
   173       |#endif                                                                                           | 11944    16
   174       |                                                                                                 | 11945    16
   175       |#if __XSI_VISIBLE                                                                                | 11946    16
   176       |char *strptime(const char * __restrict, const char * __restrict,                                 | 11947    16
   177       |    struct tm * __restrict);                                                                     | 11948    16
   178       |#endif                                                                                           | 11949    16
   179       |                                                                                                 | 11950    16
   180       |#if __BSD_VISIBLE                                                                                | 11951    16
   181       |char *timezone(int, int);       /* XXX XSI conflict */                                           | 11952    16
   182       |void tzsetwall(void);                                                                            | 11953    16
   183       |#pragma map (timelocal, "TIMELC@L")                                                              | 11954    16
   184       |time_t timelocal(struct tm * const);                                                             | 11955    16
   185       |time_t timegm(struct tm * const);                                                                | 11956    16
   186       |#endif /* __BSD_VISIBLE */                                                                       | 11957    16
   187       |__END_DECLS                                                                                      | 11958    16
   188       |                                                                                                 | 11959    16
   189       |#endif /* !_TIME_H_ */                                                                           | 11960    16
   190       |#pragma pack(reset)                                                                              | 11961    16
    53       |#include <assert.h>                                                                              | 11962    18
     1       |/* release 2.25.00 */                                                                            | 11963    24
     2       |#pragma pack()                                                                                   | 11964    24
     3       |/*-                                                                                              | 11965    24
     4       | * Copyright (c) 1992, 1993                                                                      | 11966    24
     5       | *      The Regents of the University of California.  All rights reserved.                       | 11967    24
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   232


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 11968    24
     7       | * All or some portions of this file are derived from material licensed                          | 11969    24
     8       | * to the University of California by American Telephone and Telegraph                           | 11970    24
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 11971    24
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 11972    24
    11       | *                                                                                               | 11973    24
    12       | * Redistribution and use in source and binary forms, with or without                            | 11974    24
    13       | * modification, are permitted provided that the following conditions                            | 11975    24
    14       | * are met:                                                                                      | 11976    24
    15       | * 1. Redistributions of source code must retain the above copyright                             | 11977    24
    16       | *    notice, this list of conditions and the following disclaimer.                              | 11978    24
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 11979    24
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 11980    24
    19       | *    documentation and/or other materials provided with the distribution.                       | 11981    24
    20       | * 3. All advertising materials mentioning features or use of this software                      | 11982    24
    21       | *    must display the following acknowledgement:                                                | 11983    24
    22       | *      This product includes software developed by the University of                            | 11984    24
    23       | *      California, Berkeley and its contributors.                                               | 11985    24
    24       | * 4. Neither the name of the University nor the names of its contributors                       | 11986    24
    25       | *    may be used to endorse or promote products derived from this software                      | 11987    24
    26       | *    without specific prior written permission.                                                 | 11988    24
    27       | *                                                                                               | 11989    24
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 11990    24
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 11991    24
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 11992    24
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 11993    24
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 11994    24
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 11995    24
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 11996    24
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 11997    24
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 11998    24
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 11999    24
    38       | * SUCH DAMAGE.                                                                                  | 12000    24
    39       | *                                                                                               | 12001    24
    40       | *      @(#)assert.h    8.2 (Berkeley) 1/21/94                                                   | 12002    24
    41       | */                                                                                              | 12003    24
    42       |                                                                                                 | 12004    24
    43       |#include <sys/cdefs.h>                                                                           | 12005    24
     1       |/* release 2.25.00 */                                                                            | 12006     4
     2       |#pragma pack()                                                                                   | 12007     4
     3       |/*                                                                                               | 12008     4
     4       | * Copyright (c) 1991, 1993                                                                      | 12009     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12010     4
     6       | *                                                                                               | 12011     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 12012     4
     8       | * Berkeley Software Design, Inc.                                                                | 12013     4
     9       | *                                                                                               | 12014     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 12015     4
    11       | * modification, are permitted provided that the following conditions                            | 12016     4
    12       | * are met:                                                                                      | 12017     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 12018     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 12019     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12020     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   233


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 12021     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 12022     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 12023     4
    19       | *    must display the following acknowledgement:                                                | 12024     4
    20       | *      This product includes software developed by the University of                            | 12025     4
    21       | *      California, Berkeley and its contributors.                                               | 12026     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 12027     4
    23       | *    may be used to endorse or promote products derived from this software                      | 12028     4
    24       | *    without specific prior written permission.                                                 | 12029     4
    25       | *                                                                                               | 12030     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12031     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12032     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12033     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12034     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12035     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12036     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12037     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12038     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12039     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12040     4
    36       | * SUCH DAMAGE.                                                                                  | 12041     4
    37       | *                                                                                               | 12042     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 12043     4
    39       | */                                                                                              | 12044     4
    40       |                                                                                                 | 12045     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 12046     4
    42       |#define _SYS_CDEFS_H_                                                                            | 12047     4
    43       |                                                                                                 | 12048     4
    44       |#if defined(__cplusplus)                                                                         | 12049     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 12050     4
    46       |#define __END_DECLS     }                                                                        | 12051     4
    47       |#else                                                                                            | 12052     4
    48       |#define __BEGIN_DECLS                                                                            | 12053     4
    49       |#define __END_DECLS                                                                              | 12054     4
    50       |#endif                                                                                           | 12055     4
    51       |                                                                                                 | 12056     4
    52       |/*                                                                                               | 12057     4
    53       | * This code has been put in place to help reduce the addition of                                | 12058     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 12059     4
    55       | * having a compiler-agnostic source tree.                                                       | 12060     4
    56       | */                                                                                              | 12061     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 12062     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 12063     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 12064     4
    60       |                                                                                                 | 12065     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 12066     4
    62       |                                                                                                 | 12067     4
    63       |                                                                                                 | 12068     4
    64       |/*                                                                                               | 12069     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 12070     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 12071     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 12072     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 12073     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   234


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 12074     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 12075     4
    71       | * this only works with ANSI C.                                                                  | 12076     4
    72       | *                                                                                               | 12077     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 12078     4
    74       | * first.  It is only available with ANSI C.                                                     | 12079     4
    75       | */                                                                                              | 12080     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 12081     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 12082     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 12083     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 12084     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 12085     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 12086     4
    82       |                                                                                                 | 12087     4
    83       |#define __const         const           /* define reserved names to standard */                  | 12088     4
    84       |#define __signed        signed                                                                   | 12089     4
    85       |#define __volatile      volatile                                                                 | 12090     4
    86       |#if defined(__cplusplus)                                                                         | 12091     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 12092     4
    88       |#else                                                                                            | 12093     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 12094     4
    90       |#endif /* !__cplusplus */                                                                        | 12095     4
    91       |                                                                                                 | 12096     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 12097     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 12098     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 12099     4
    95       |#define __STRING(x)     "x"                                                                      | 12100     4
    96       |                                                                                                 | 12101     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 12102     4
    98       |#define __inline                                                                                 | 12103     4
    99       |#define __signed                                                                                 | 12104     4
   100       |#define __volatile                                                                               | 12105     4
   101       |/*                                                                                               | 12106     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 12107     4
   103       | * deleted from the program and old programs will want them left alone.                          | 12108     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 12109     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 12110     4
   106       | */                                                                                              | 12111     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 12112     4
   108       |#define const                           /* delete ANSI C keywords */                             | 12113     4
   109       |#define inline                                                                                   | 12114     4
   110       |#define signed                                                                                   | 12115     4
   111       |#define volatile                                                                                 | 12116     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 12117     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 12118     4
   114       |                                                                                                 | 12119     4
   115       |/*                                                                                               | 12120     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 12121     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 12122     4
   118       | */                                                                                              | 12123     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 12124     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 12125     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 12126     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   235


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   122       |#define __unused                                                                                 | 12127     4
   123       |#define __aligned(x)                                                                             | 12128     4
   124       |#define __section(x)                                                                             | 12129     4
   125       |#define __nonnull(x)                                                                             | 12130     4
   126       |#define __used                                                                                   | 12131     4
   127       |                                                                                                 | 12132     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 12133     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 12134     4
   130       |                                                                                                 | 12135     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 12136     4
   132       |#define __func__  NULL                                                                           | 12137     4
   133       |#endif                                                                                           | 12138     4
   134       |                                                                                                 | 12139     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 12140     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 12141     4
   137       |#endif                                                                                           | 12142     4
   138       |                                                                                                 | 12143     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 12144     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 12145     4
   141       | **/                                                                                             | 12146     4
   142       |#ifndef __cplusplus                                                                              | 12147     4
   143       |#define __restrict __restrict__                                                                  | 12148     4
   144       |#else                                                                                            | 12149     4
   145       |/* Systems/C++ does not */                                                                       | 12150     4
   146       |#define __restrict                                                                               | 12151     4
   147       |#endif                                                                                           | 12152     4
   148       |                                                                                                 | 12153     4
   149       |/*                                                                                               | 12154     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 12155     4
   151       | */                                                                                              | 12156     4
   152       |#define __predict_true(exp)     (exp)                                                            | 12157     4
   153       |#define __predict_false(exp)    (exp)                                                            | 12158     4
   154       |                                                                                                 | 12159     4
   155       |                                                                                                 | 12160     4
   156       |/*                                                                                               | 12161     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 12162     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 12163     4
   159       | *                                                                                               | 12164     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 12165     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 12166     4
   162       | */                                                                                              | 12167     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 12168     4
   164       |#undef __offsetof                                                                                | 12169     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 12170     4
   166       |#endif                                                                                           | 12171     4
   167       |                                                                                                 | 12172     4
   168       |/*                                                                                               | 12173     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 12174     4
   170       | * or scanf-like arguments.                                                                      | 12175     4
   171       | */                                                                                              | 12176     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 12177     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 12178     4
   174       |#define __format_arg(fmtarg)                                                                     | 12179     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   236


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 12180     4
   176       |                                                                                                 | 12181     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 12182     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 12183     4
   179       |                                                                                                 | 12184     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 12185     4
   181       |#define __weak_reference(sym,alias)                                                              | 12186     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 12187     4
   183       |#define __warn_references(sym,msg)                                                               | 12188     4
   184       |                                                                                                 | 12189     4
   185       | /* This places the string into the resulting object.  It should */                              | 12190     4
   186       | /* probably become #pragma ident */                                                             | 12191     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 12192     4
   188       |                                                                                                 | 12193     4
   189       |#ifndef __RCSID                                                                                  | 12194     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 12195     4
   191       |#endif                                                                                           | 12196     4
   192       |                                                                                                 | 12197     4
   193       |/*                                                                                               | 12198     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 12199     4
   195       | * Usage:                                                                                        | 12200     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 12201     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 12202     4
   198       | */                                                                                              | 12203     4
   199       |#ifndef __SYSCID                                                                                 | 12204     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 12205     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 12206     4
   202       |#else                                                                                            | 12207     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 12208     4
   204       |#endif                                                                                           | 12209     4
   205       |#endif                                                                                           | 12210     4
   206       |                                                                                                 | 12211     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 12212     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 12213     4
   209       |#endif                                                                                           | 12214     4
   210       |                                                                                                 | 12215     4
   211       |#ifndef __COPYRIGHT                                                                              | 12216     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 12217     4
   213       |#endif                                                                                           | 12218     4
   214       |                                                                                                 | 12219     4
   215       |                                                                                                 | 12220     4
   216       |#ifndef __DECONST                                                                                | 12221     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 12222     4
   218       |#endif                                                                                           | 12223     4
   219       |                                                                                                 | 12224     4
   220       |#ifndef __DEVOLATILE                                                                             | 12225     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 12226     4
   222       |#endif                                                                                           | 12227     4
   223       |                                                                                                 | 12228     4
   224       |#ifndef __DEQUALIFY                                                                              | 12229     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 12230     4
   226       |#endif                                                                                           | 12231     4
   227       |                                                                                                 | 12232     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   237


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   228       |                                                                                                 | 12233     4
   229       |/*-                                                                                              | 12234     4
   230       | * The following definitions are an extension of the behavior originally                         | 12235     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 12236     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 12237     4
   233       | * header file is included.                                                                      | 12238     4
   234       | *                                                                                               | 12239     4
   235       | * Here's a quick run-down of the versions:                                                      | 12240     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 12241     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 12242     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 12243     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 12244     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 12245     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 12246     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 12247     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 12248     4
   244       | *                                                                                               | 12249     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 12250     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 12251     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 12252     4
   248       | *                                                                                               | 12253     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 12254     4
   250       | */                                                                                              | 12255     4
   251       |                                                                                                 | 12256     4
   252       |/*                                                                                               | 12257     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 12258     4
   254       | * available. Also make them available when requested so.                                        | 12259     4
   255       | */                                                                                              | 12260     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 12261     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 12262     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 12263     4
   259       |#define __DF_VISIBLE    1                                                                        | 12264     4
   260       |#else                                                                                            | 12265     4
   261       |#define __DF_VISIBLE    0                                                                        | 12266     4
   262       |#endif                                                                                           | 12267     4
   263       |                                                                                                 | 12268     4
   264       |/*-                                                                                              | 12269     4
   265       | * The following definitions are an extension of the behavior originally                         | 12270     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 12271     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 12272     4
   268       | * header file is included.                                                                      | 12273     4
   269       | *                                                                                               | 12274     4
   270       | * Here's a quick run-down of the versions:                                                      | 12275     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 12276     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 12277     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 12278     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 12279     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 12280     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 12281     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 12282     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 12283     4
   279       | *                                                                                               | 12284     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 12285     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   238


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 12286     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 12287     4
   283       | *                                                                                               | 12288     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 12289     4
   285       | */                                                                                              | 12290     4
   286       |                                                                                                 | 12291     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 12292     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 12293     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 12294     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 12295     4
   291       |#endif                                                                                           | 12296     4
   292       |                                                                                                 | 12297     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 12298     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 12299     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 12300     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 12301     4
   297       |#endif                                                                                           | 12302     4
   298       |                                                                                                 | 12303     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 12304     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 12305     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 12306     4
   302       |#define __XSI_VISIBLE           700                                                              | 12307     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 12308     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 12309     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 12310     4
   306       |#define __XSI_VISIBLE           600                                                              | 12311     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 12312     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 12313     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 12314     4
   310       |#define __XSI_VISIBLE           500                                                              | 12315     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 12316     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 12317     4
   313       |#endif                                                                                           | 12318     4
   314       |#endif                                                                                           | 12319     4
   315       |                                                                                                 | 12320     4
   316       |/*                                                                                               | 12321     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 12322     4
   318       | * important.                                                                                    | 12323     4
   319       | */                                                                                              | 12324     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 12325     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 12326     4
   322       |#endif                                                                                           | 12327     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 12328     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 12329     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 12330     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 12331     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 12332     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 12333     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 12334     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 12335     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 12336     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 12337     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 12338     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   239


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   334       |#define __POSIX_VISIBLE         199309                                                           | 12339     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 12340     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 12341     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 12342     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 12343     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 12344     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 12345     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 12346     4
   342       |#else                                                                                            | 12347     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 12348     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 12349     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 12350     4
   346       |#else                                                                                            | 12351     4
   347       |/*-                                                                                              | 12352     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 12353     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 12354     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 12355     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 12356     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 12357     4
   353       | * a test program to print out the values.                                                       | 12358     4
   354       | *                                                                                               | 12359     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 12360     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 12361     4
   357       | * environment (and in fact we will never get here).                                             | 12362     4
   358       | */                                                                                              | 12363     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 12364     4
   360       |#define __POSIX_VISIBLE         0                                                                | 12365     4
   361       |#define __XSI_VISIBLE           0                                                                | 12366     4
   362       |#define __BSD_VISIBLE           0                                                                | 12367     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 12368     4
   364       |#define __EXT1_VISIBLE          0                                                                | 12369     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 12370     4
   366       |#define __POSIX_VISIBLE         0                                                                | 12371     4
   367       |#define __XSI_VISIBLE           0                                                                | 12372     4
   368       |#define __BSD_VISIBLE           0                                                                | 12373     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 12374     4
   370       |#define __EXT1_VISIBLE          0                                                                | 12375     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 12376     4
   372       |#define __POSIX_VISIBLE         0                                                                | 12377     4
   373       |#define __XSI_VISIBLE           0                                                                | 12378     4
   374       |#define __BSD_VISIBLE           0                                                                | 12379     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 12380     4
   376       |#define __EXT1_VISIBLE          0                                                                | 12381     4
   377       |#else                           /* Default environment: show everything. */                      | 12382     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 12383     4
   379       |#define __XSI_VISIBLE           700                                                              | 12384     4
   380       |#define __BSD_VISIBLE           1                                                                | 12385     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 12386     4
   382       |#define __EXT1_VISIBLE          1                                                                | 12387     4
   383       |#endif                                                                                           | 12388     4
   384       |#endif                                                                                           | 12389     4
   385       |                                                                                                 | 12390     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 12391     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   240


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 12392     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 12393     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 12394     4
   390       |#define __EXT1_VISIBLE          1                                                                | 12395     4
   391       |#else                                                                                            | 12396     4
   392       |#define __EXT1_VISIBLE          0                                                                | 12397     4
   393       |#endif                                                                                           | 12398     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 12399     4
   395       |                                                                                                 | 12400     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 12401     4
   397       |#define __NO_TLS 1                                                                               | 12402     4
   398       |#endif                                                                                           | 12403     4
   399       |                                                                                                 | 12404     4
   400       |                                                                                                 | 12405     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 12406     4
   402       |#define __FBSDID(x)                                                                              | 12407     4
   403       |                                                                                                 | 12408     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 12409     4
   405       |#pragma pack(reset)                                                                              | 12410     4
    44       |                                                                                                 | 12411    24
    45       |/*                                                                                               | 12412    24
    46       | * Unlike other ANSI header files, <assert.h> may usefully be included                           | 12413    24
    47       | * multiple times, with and without NDEBUG defined.                                              | 12414    24
    48       | */                                                                                              | 12415    24
    49       |                                                                                                 | 12416    24
    50       |#undef assert                                                                                    | 12417    24
    51       |#undef _assert                                                                                   | 12418    24
    52       |                                                                                                 | 12419    24
    53       |#ifdef NDEBUG                                                                                    | 12420    24
    54       |#define assert(e)       ((void)0)                                                                | 12421    24
    55       |#define _assert(e)      ((void)0)                                                                | 12422    24
    56       |#else                                                                                            | 12423    24
    57       |#define _assert(e)      assert(e)                                                                | 12424    24
    58       |                                                                                                 | 12425    24
    59       |#ifndef __ASSERT_H_                                                                              | 12426    24
    60       |#define __ASSERT_H_                                                                              | 12427    24
    61       |#pragma map (__assert, "@@ASSERT")                                                               | 12428    24
    62       |#endif /* __ASSERT_H_ */                                                                         | 12429    24
    63       |                                                                                                 | 12430    24
    64       |#define assert(e)       ((e) ? (void)0 : __assert(__func__, __FILE__, \                          | 12431    24
    65       |                            __LINE__, #e))                                                       | 12432    24
    66       |#endif /* NDEBUG */                                                                              | 12433    24
    67       |                                                                                                 | 12434    24
    68       |__BEGIN_DECLS                                                                                    | 12435    24
    68       +                                                                                                 + 12435    24
    69       |void __assert(const char *, const char *, int, const char *);                                    | 12436    24
    70       |__END_DECLS                                                                                      | 12437    24
    70       +                                                                                                 + 12437    24
    71       |#pragma pack(reset)                                                                              | 12438    24
    54       |#include <limits.h>                                                                              | 12439    18
     1       |/* release 2.25.00 */                                                                            | 12440    25
     2       |#pragma pack()                                                                                   | 12441    25
     3       |/*-                                                                                              | 12442    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   241


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     4       | * Copyright (c) 1988, 1993                                                                      | 12443    25
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12444    25
     6       | *                                                                                               | 12445    25
     7       | * Redistribution and use in source and binary forms, with or without                            | 12446    25
     8       | * modification, are permitted provided that the following conditions                            | 12447    25
     9       | * are met:                                                                                      | 12448    25
    10       | * 1. Redistributions of source code must retain the above copyright                             | 12449    25
    11       | *    notice, this list of conditions and the following disclaimer.                              | 12450    25
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12451    25
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 12452    25
    14       | *    documentation and/or other materials provided with the distribution.                       | 12453    25
    15       | * 3. All advertising materials mentioning features or use of this software                      | 12454    25
    16       | *    must display the following acknowledgement:                                                | 12455    25
    17       | *      This product includes software developed by the University of                            | 12456    25
    18       | *      California, Berkeley and its contributors.                                               | 12457    25
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 12458    25
    20       | *    may be used to endorse or promote products derived from this software                      | 12459    25
    21       | *    without specific prior written permission.                                                 | 12460    25
    22       | *                                                                                               | 12461    25
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12462    25
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12463    25
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12464    25
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12465    25
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12466    25
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12467    25
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12468    25
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12469    25
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12470    25
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12471    25
    33       | * SUCH DAMAGE.                                                                                  | 12472    25
    34       | *                                                                                               | 12473    25
    35       | *      @(#)limits.h    8.2 (Berkeley) 1/4/94                                                    | 12474    25
    36       | */                                                                                              | 12475    25
    37       |                                                                                                 | 12476    25
    38       |#ifndef _LIMITS_H_                                                                               | 12477    25
    39       |#define _LIMITS_H_                                                                               | 12478    25
    40       |                                                                                                 | 12479    25
    41       |#include <sys/cdefs.h>                                                                           | 12480    25
     1       |/* release 2.25.00 */                                                                            | 12481     4
     2       |#pragma pack()                                                                                   | 12482     4
     3       |/*                                                                                               | 12483     4
     4       | * Copyright (c) 1991, 1993                                                                      | 12484     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12485     4
     6       | *                                                                                               | 12486     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 12487     4
     8       | * Berkeley Software Design, Inc.                                                                | 12488     4
     9       | *                                                                                               | 12489     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 12490     4
    11       | * modification, are permitted provided that the following conditions                            | 12491     4
    12       | * are met:                                                                                      | 12492     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 12493     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 12494     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12495     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   242


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 12496     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 12497     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 12498     4
    19       | *    must display the following acknowledgement:                                                | 12499     4
    20       | *      This product includes software developed by the University of                            | 12500     4
    21       | *      California, Berkeley and its contributors.                                               | 12501     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 12502     4
    23       | *    may be used to endorse or promote products derived from this software                      | 12503     4
    24       | *    without specific prior written permission.                                                 | 12504     4
    25       | *                                                                                               | 12505     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12506     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12507     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12508     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12509     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12510     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12511     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12512     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12513     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 12514     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 12515     4
    36       | * SUCH DAMAGE.                                                                                  | 12516     4
    37       | *                                                                                               | 12517     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 12518     4
    39       | */                                                                                              | 12519     4
    40       |                                                                                                 | 12520     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 12521     4
    42       |#define _SYS_CDEFS_H_                                                                            | 12522     4
    43       |                                                                                                 | 12523     4
    44       |#if defined(__cplusplus)                                                                         | 12524     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 12525     4
    46       |#define __END_DECLS     }                                                                        | 12526     4
    47       |#else                                                                                            | 12527     4
    48       |#define __BEGIN_DECLS                                                                            | 12528     4
    49       |#define __END_DECLS                                                                              | 12529     4
    50       |#endif                                                                                           | 12530     4
    51       |                                                                                                 | 12531     4
    52       |/*                                                                                               | 12532     4
    53       | * This code has been put in place to help reduce the addition of                                | 12533     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 12534     4
    55       | * having a compiler-agnostic source tree.                                                       | 12535     4
    56       | */                                                                                              | 12536     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 12537     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 12538     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 12539     4
    60       |                                                                                                 | 12540     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 12541     4
    62       |                                                                                                 | 12542     4
    63       |                                                                                                 | 12543     4
    64       |/*                                                                                               | 12544     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 12545     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 12546     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 12547     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 12548     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   243


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 12549     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 12550     4
    71       | * this only works with ANSI C.                                                                  | 12551     4
    72       | *                                                                                               | 12552     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 12553     4
    74       | * first.  It is only available with ANSI C.                                                     | 12554     4
    75       | */                                                                                              | 12555     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 12556     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 12557     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 12558     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 12559     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 12560     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 12561     4
    82       |                                                                                                 | 12562     4
    83       |#define __const         const           /* define reserved names to standard */                  | 12563     4
    84       |#define __signed        signed                                                                   | 12564     4
    85       |#define __volatile      volatile                                                                 | 12565     4
    86       |#if defined(__cplusplus)                                                                         | 12566     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 12567     4
    88       |#else                                                                                            | 12568     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 12569     4
    90       |#endif /* !__cplusplus */                                                                        | 12570     4
    91       |                                                                                                 | 12571     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 12572     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 12573     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 12574     4
    95       |#define __STRING(x)     "x"                                                                      | 12575     4
    96       |                                                                                                 | 12576     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 12577     4
    98       |#define __inline                                                                                 | 12578     4
    99       |#define __signed                                                                                 | 12579     4
   100       |#define __volatile                                                                               | 12580     4
   101       |/*                                                                                               | 12581     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 12582     4
   103       | * deleted from the program and old programs will want them left alone.                          | 12583     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 12584     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 12585     4
   106       | */                                                                                              | 12586     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 12587     4
   108       |#define const                           /* delete ANSI C keywords */                             | 12588     4
   109       |#define inline                                                                                   | 12589     4
   110       |#define signed                                                                                   | 12590     4
   111       |#define volatile                                                                                 | 12591     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 12592     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 12593     4
   114       |                                                                                                 | 12594     4
   115       |/*                                                                                               | 12595     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 12596     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 12597     4
   118       | */                                                                                              | 12598     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 12599     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 12600     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 12601     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   244


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   122       |#define __unused                                                                                 | 12602     4
   123       |#define __aligned(x)                                                                             | 12603     4
   124       |#define __section(x)                                                                             | 12604     4
   125       |#define __nonnull(x)                                                                             | 12605     4
   126       |#define __used                                                                                   | 12606     4
   127       |                                                                                                 | 12607     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 12608     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 12609     4
   130       |                                                                                                 | 12610     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 12611     4
   132       |#define __func__  NULL                                                                           | 12612     4
   133       |#endif                                                                                           | 12613     4
   134       |                                                                                                 | 12614     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 12615     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 12616     4
   137       |#endif                                                                                           | 12617     4
   138       |                                                                                                 | 12618     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 12619     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 12620     4
   141       | **/                                                                                             | 12621     4
   142       |#ifndef __cplusplus                                                                              | 12622     4
   143       |#define __restrict __restrict__                                                                  | 12623     4
   144       |#else                                                                                            | 12624     4
   145       |/* Systems/C++ does not */                                                                       | 12625     4
   146       |#define __restrict                                                                               | 12626     4
   147       |#endif                                                                                           | 12627     4
   148       |                                                                                                 | 12628     4
   149       |/*                                                                                               | 12629     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 12630     4
   151       | */                                                                                              | 12631     4
   152       |#define __predict_true(exp)     (exp)                                                            | 12632     4
   153       |#define __predict_false(exp)    (exp)                                                            | 12633     4
   154       |                                                                                                 | 12634     4
   155       |                                                                                                 | 12635     4
   156       |/*                                                                                               | 12636     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 12637     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 12638     4
   159       | *                                                                                               | 12639     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 12640     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 12641     4
   162       | */                                                                                              | 12642     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 12643     4
   164       |#undef __offsetof                                                                                | 12644     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 12645     4
   166       |#endif                                                                                           | 12646     4
   167       |                                                                                                 | 12647     4
   168       |/*                                                                                               | 12648     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 12649     4
   170       | * or scanf-like arguments.                                                                      | 12650     4
   171       | */                                                                                              | 12651     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 12652     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 12653     4
   174       |#define __format_arg(fmtarg)                                                                     | 12654     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   245


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 12655     4
   176       |                                                                                                 | 12656     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 12657     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 12658     4
   179       |                                                                                                 | 12659     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 12660     4
   181       |#define __weak_reference(sym,alias)                                                              | 12661     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 12662     4
   183       |#define __warn_references(sym,msg)                                                               | 12663     4
   184       |                                                                                                 | 12664     4
   185       | /* This places the string into the resulting object.  It should */                              | 12665     4
   186       | /* probably become #pragma ident */                                                             | 12666     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 12667     4
   188       |                                                                                                 | 12668     4
   189       |#ifndef __RCSID                                                                                  | 12669     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 12670     4
   191       |#endif                                                                                           | 12671     4
   192       |                                                                                                 | 12672     4
   193       |/*                                                                                               | 12673     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 12674     4
   195       | * Usage:                                                                                        | 12675     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 12676     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 12677     4
   198       | */                                                                                              | 12678     4
   199       |#ifndef __SYSCID                                                                                 | 12679     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 12680     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 12681     4
   202       |#else                                                                                            | 12682     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 12683     4
   204       |#endif                                                                                           | 12684     4
   205       |#endif                                                                                           | 12685     4
   206       |                                                                                                 | 12686     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 12687     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 12688     4
   209       |#endif                                                                                           | 12689     4
   210       |                                                                                                 | 12690     4
   211       |#ifndef __COPYRIGHT                                                                              | 12691     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 12692     4
   213       |#endif                                                                                           | 12693     4
   214       |                                                                                                 | 12694     4
   215       |                                                                                                 | 12695     4
   216       |#ifndef __DECONST                                                                                | 12696     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 12697     4
   218       |#endif                                                                                           | 12698     4
   219       |                                                                                                 | 12699     4
   220       |#ifndef __DEVOLATILE                                                                             | 12700     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 12701     4
   222       |#endif                                                                                           | 12702     4
   223       |                                                                                                 | 12703     4
   224       |#ifndef __DEQUALIFY                                                                              | 12704     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 12705     4
   226       |#endif                                                                                           | 12706     4
   227       |                                                                                                 | 12707     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   246


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   228       |                                                                                                 | 12708     4
   229       |/*-                                                                                              | 12709     4
   230       | * The following definitions are an extension of the behavior originally                         | 12710     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 12711     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 12712     4
   233       | * header file is included.                                                                      | 12713     4
   234       | *                                                                                               | 12714     4
   235       | * Here's a quick run-down of the versions:                                                      | 12715     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 12716     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 12717     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 12718     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 12719     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 12720     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 12721     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 12722     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 12723     4
   244       | *                                                                                               | 12724     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 12725     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 12726     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 12727     4
   248       | *                                                                                               | 12728     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 12729     4
   250       | */                                                                                              | 12730     4
   251       |                                                                                                 | 12731     4
   252       |/*                                                                                               | 12732     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 12733     4
   254       | * available. Also make them available when requested so.                                        | 12734     4
   255       | */                                                                                              | 12735     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 12736     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 12737     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 12738     4
   259       |#define __DF_VISIBLE    1                                                                        | 12739     4
   260       |#else                                                                                            | 12740     4
   261       |#define __DF_VISIBLE    0                                                                        | 12741     4
   262       |#endif                                                                                           | 12742     4
   263       |                                                                                                 | 12743     4
   264       |/*-                                                                                              | 12744     4
   265       | * The following definitions are an extension of the behavior originally                         | 12745     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 12746     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 12747     4
   268       | * header file is included.                                                                      | 12748     4
   269       | *                                                                                               | 12749     4
   270       | * Here's a quick run-down of the versions:                                                      | 12750     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 12751     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 12752     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 12753     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 12754     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 12755     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 12756     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 12757     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 12758     4
   279       | *                                                                                               | 12759     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 12760     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   247


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 12761     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 12762     4
   283       | *                                                                                               | 12763     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 12764     4
   285       | */                                                                                              | 12765     4
   286       |                                                                                                 | 12766     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 12767     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 12768     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 12769     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 12770     4
   291       |#endif                                                                                           | 12771     4
   292       |                                                                                                 | 12772     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 12773     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 12774     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 12775     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 12776     4
   297       |#endif                                                                                           | 12777     4
   298       |                                                                                                 | 12778     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 12779     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 12780     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 12781     4
   302       |#define __XSI_VISIBLE           700                                                              | 12782     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 12783     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 12784     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 12785     4
   306       |#define __XSI_VISIBLE           600                                                              | 12786     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 12787     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 12788     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 12789     4
   310       |#define __XSI_VISIBLE           500                                                              | 12790     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 12791     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 12792     4
   313       |#endif                                                                                           | 12793     4
   314       |#endif                                                                                           | 12794     4
   315       |                                                                                                 | 12795     4
   316       |/*                                                                                               | 12796     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 12797     4
   318       | * important.                                                                                    | 12798     4
   319       | */                                                                                              | 12799     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 12800     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 12801     4
   322       |#endif                                                                                           | 12802     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 12803     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 12804     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 12805     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 12806     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 12807     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 12808     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 12809     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 12810     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 12811     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 12812     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 12813     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   248


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   334       |#define __POSIX_VISIBLE         199309                                                           | 12814     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 12815     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 12816     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 12817     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 12818     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 12819     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 12820     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 12821     4
   342       |#else                                                                                            | 12822     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 12823     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 12824     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 12825     4
   346       |#else                                                                                            | 12826     4
   347       |/*-                                                                                              | 12827     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 12828     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 12829     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 12830     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 12831     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 12832     4
   353       | * a test program to print out the values.                                                       | 12833     4
   354       | *                                                                                               | 12834     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 12835     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 12836     4
   357       | * environment (and in fact we will never get here).                                             | 12837     4
   358       | */                                                                                              | 12838     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 12839     4
   360       |#define __POSIX_VISIBLE         0                                                                | 12840     4
   361       |#define __XSI_VISIBLE           0                                                                | 12841     4
   362       |#define __BSD_VISIBLE           0                                                                | 12842     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 12843     4
   364       |#define __EXT1_VISIBLE          0                                                                | 12844     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 12845     4
   366       |#define __POSIX_VISIBLE         0                                                                | 12846     4
   367       |#define __XSI_VISIBLE           0                                                                | 12847     4
   368       |#define __BSD_VISIBLE           0                                                                | 12848     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 12849     4
   370       |#define __EXT1_VISIBLE          0                                                                | 12850     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 12851     4
   372       |#define __POSIX_VISIBLE         0                                                                | 12852     4
   373       |#define __XSI_VISIBLE           0                                                                | 12853     4
   374       |#define __BSD_VISIBLE           0                                                                | 12854     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 12855     4
   376       |#define __EXT1_VISIBLE          0                                                                | 12856     4
   377       |#else                           /* Default environment: show everything. */                      | 12857     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 12858     4
   379       |#define __XSI_VISIBLE           700                                                              | 12859     4
   380       |#define __BSD_VISIBLE           1                                                                | 12860     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 12861     4
   382       |#define __EXT1_VISIBLE          1                                                                | 12862     4
   383       |#endif                                                                                           | 12863     4
   384       |#endif                                                                                           | 12864     4
   385       |                                                                                                 | 12865     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 12866     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   249


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 12867     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 12868     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 12869     4
   390       |#define __EXT1_VISIBLE          1                                                                | 12870     4
   391       |#else                                                                                            | 12871     4
   392       |#define __EXT1_VISIBLE          0                                                                | 12872     4
   393       |#endif                                                                                           | 12873     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 12874     4
   395       |                                                                                                 | 12875     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 12876     4
   397       |#define __NO_TLS 1                                                                               | 12877     4
   398       |#endif                                                                                           | 12878     4
   399       |                                                                                                 | 12879     4
   400       |                                                                                                 | 12880     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 12881     4
   402       |#define __FBSDID(x)                                                                              | 12882     4
   403       |                                                                                                 | 12883     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 12884     4
   405       |#pragma pack(reset)                                                                              | 12885     4
    42       |                                                                                                 | 12886    25
    43       |#if __POSIX_VISIBLE                                                                              | 12887    25
    44       |#define _POSIX_ARG_MAX          4096                                                             | 12888    25
    45       |#define _POSIX_CHILD_MAX        25                                                               | 12889    25
    46       |#define _POSIX_LINK_MAX         8                                                                | 12890    25
    47       |#define _POSIX_MAX_CANON        255                                                              | 12891    25
    48       |#define _POSIX_MAX_INPUT        255                                                              | 12892    25
    49       |#define _POSIX_NAME_MAX         14                                                               | 12893    25
    50       |#define _POSIX_NGROUPS_MAX      8                                                                | 12894    25
    51       |#define _POSIX_OPEN_MAX         20                                                               | 12895    25
    52       |#define _POSIX_PATH_MAX         256                                                              | 12896    25
    53       |#define _POSIX_PIPE_BUF         512                                                              | 12897    25
    54       |#define _POSIX_SSIZE_MAX        32767                                                            | 12898    25
    55       |#define _POSIX_STREAM_MAX       8                                                                | 12899    25
    56       |#define _POSIX_TZNAME_MAX       6                                                                | 12900    25
    57       |                                                                                                 | 12901    25
    57       +                                                                                                 + 12901    25
    58       |#define BC_BASE_MAX                99   /* max ibase/obase values in bc(1) */                    | 12902    25
    59       |#define BC_DIM_MAX               2048   /* max array elements in bc(1) */                        | 12903    25
    60       |#define BC_SCALE_MAX               99   /* max scale value in bc(1) */                           | 12904    25
    61       |#define BC_STRING_MAX            1000   /* max const string length in bc(1) */                   | 12905    25
    62       |#define COLL_WEIGHTS_MAX            0   /* max weights for order keyword */                      | 12906    25
    63       |#define EXPR_NEST_MAX              32   /* max expressions nested in expr(1) */                  | 12907    25
    64       |#define LINE_MAX                 2048   /* max bytes in an input line */                         | 12908    25
    65       |#define RE_DUP_MAX                255   /* max RE's in interval notation */                      | 12909    25
    66       |                                                                                                 | 12910    25
    67       |#define _POSIX2_BC_BASE_MAX     99                                                               | 12911    25
    68       |#define _POSIX2_BC_DIM_MAX      2048                                                             | 12912    25
    69       |#define _POSIX2_BC_SCALE_MAX    99                                                               | 12913    25
    70       |#define _POSIX2_BC_STRING_MAX   1000                                                             | 12914    25
    71       |#define _POSIX2_EQUIV_CLASS_MAX 2                                                                | 12915    25
    72       |#define _POSIX2_EXPR_NEST_MAX   32                                                               | 12916    25
    73       |#define _POSIX2_LINE_MAX        2048                                                             | 12917    25
    74       |#define _POSIX2_RE_DUP_MAX      255                                                              | 12918    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   250


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    75       |#endif                                                                                           | 12919    25
    76       |                                                                                                 | 12920    25
    77       |#if __POSIX_VISIBLE >= 199309                                                                    | 12921    25
    78       |#define _POSIX_AIO_LISTIO_MAX   16                                                               | 12922    25
    79       |#define _POSIX_AIO_MAX          1                                                                | 12923    25
    80       |#define _POSIX_DELAYTIMER_MAX   32                                                               | 12924    25
    81       |#define _POSIX_MQ_OPEN_MAX      8                                                                | 12925    25
    82       |#define _POSIX_MQ_PRIO_MAX      32                                                               | 12926    25
    83       |#define _POSIX_RTSIG_MAX        8                                                                | 12927    25
    84       |#define _POSIX_SEM_NSEMS_MAX    256                                                              | 12928    25
    85       |#define _POSIX_SEM_VALUE_MAX    32767                                                            | 12929    25
    86       |#define _POSIX_SIGQUEUE_MAX     32                                                               | 12930    25
    87       |#define _POSIX_TIMER_MAX        32                                                               | 12931    25
    88       |#endif                                                                                           | 12932    25
    89       |                                                                                                 | 12933    25
    89       +                                                                                                 + 12933    25
    90       |#if __POSIX_VISIBLE >= 199506                                                                    | 12934    25
    91       |#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4                                                    | 12935    25
    92       |#define _POSIX_THREAD_KEYS_MAX  128                                                              | 12936    25
    93       |#define _POSIX_THREAD_THREADS_MAX 64                                                             | 12937    25
    94       |#endif                                                                                           | 12938    25
    95       |                                                                                                 | 12939    25
    95       +                                                                                                 + 12939    25
    96       |#if __POSIX_VISIBLE >= 200112                                                                    | 12940    25
    97       |#define _POSIX_HOST_NAME_MAX    255                                                              | 12941    25
    98       |#define _POSIX_LOGIN_NAME_MAX   9                                                                | 12942    25
    99       |#define _POSIX_SS_REPL_MAX      4                                                                | 12943    25
   100       |#define _POSIX_SYMLINK_MAX      255                                                              | 12944    25
   101       |#define _POSIX_SYMLOOP_MAX      8                                                                | 12945    25
   102       |#define _POSIX_TRACE_EVENT_NAME_MAX 30                                                           | 12946    25
   103       |#define _POSIX_TRACE_NAME_MAX   8                                                                | 12947    25
   104       |#define _POSIX_TRACE_SYS_MAX    8                                                                | 12948    25
   105       |#define _POSIX_TRACE_USER_EVENT_MAX 32                                                           | 12949    25
   106       |#define _POSIX_TTY_NAME_MAX     9                                                                | 12950    25
   107       |#define _POSIX2_CHARCLASS_NAME_MAX 14                                                            | 12951    25
   108       |#define _POSIX2_COLL_WEIGHTS_MAX 2                                                               | 12952    25
   109       |                                                                                                 | 12953    25
   109       +                                                                                                 + 12953    25
   110       |#define _POSIX_RE_DUP_MAX       _POSIX2_RE_DUP_MAX                                               | 12954    25
   111       |#endif                                                                                           | 12955    25
   112       |                                                                                                 | 12956    25
   113       |#if __XSI_VISIBLE                                                                                | 12957    25
   114       |#define _XOPEN_IOV_MAX          16                                                               | 12958    25
   115       |#define _XOPEN_NAME_MAX         255                                                              | 12959    25
   116       |#define _XOPEN_PATH_MAX         1024                                                             | 12960    25
   117       |#define PASS_MAX                128     /* _PASSWORD_LEN from <pwd.h> */                         | 12961    25
   118       |                                                                                                 | 12962    25
   118       +                                                                                                 + 12962    25
   119       |#define NL_ARGMAX               99      /* max # of position args for printf */                  | 12963    25
   120       |#define NL_LANGMAX              31      /* max LANG name length */                               | 12964    25
   121       |#define NL_MSGMAX               32767                                                            | 12965    25
   122       |#define NL_NMAX                 1                                                                | 12966    25
   123       |#define NL_SETMAX               255                                                              | 12967    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   251


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   124       |#define NL_TEXTMAX              2048                                                             | 12968    25
   125       |#endif                                                                                           | 12969    25
   126       |                                                                                                 | 12970    25
   127       |#define MB_LEN_MAX              6       /* 31-bit UTF-8 */                                       | 12971    25
   128       |                                                                                                 | 12972    25
   129       |#include <sys/limits.h>                                                                          | 12973    25
     1       |/* release 2.25.00 */                                                                            | 12974    26
     2       |#pragma pack()                                                                                   | 12975    26
     3       |/*-                                                                                              | 12976    26
     4       | * Copyright (c) 1988, 1993                                                                      | 12977    26
     5       | *      The Regents of the University of California.  All rights reserved.                       | 12978    26
     6       | *                                                                                               | 12979    26
     7       | * Redistribution and use in source and binary forms, with or without                            | 12980    26
     8       | * modification, are permitted provided that the following conditions                            | 12981    26
     9       | * are met:                                                                                      | 12982    26
    10       | * 1. Redistributions of source code must retain the above copyright                             | 12983    26
    11       | *    notice, this list of conditions and the following disclaimer.                              | 12984    26
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 12985    26
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 12986    26
    14       | *    documentation and/or other materials provided with the distribution.                       | 12987    26
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 12988    26
    16       | *    may be used to endorse or promote products derived from this software                      | 12989    26
    17       | *    without specific prior written permission.                                                 | 12990    26
    18       | *                                                                                               | 12991    26
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 12992    26
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 12993    26
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 12994    26
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 12995    26
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 12996    26
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 12997    26
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 12998    26
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 12999    26
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13000    26
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13001    26
    29       | * SUCH DAMAGE.                                                                                  | 13002    26
    30       | *                                                                                               | 13003    26
    31       | * $FreeBSD: src/sys/sys/limits.h,v 1.9 2005/01/07 02:29:23 imp Exp $                            | 13004    26
    32       | */                                                                                              | 13005    26
    33       |                                                                                                 | 13006    26
    34       |#ifndef _SYS_LIMITS_H_                                                                           | 13007    26
    35       |#define _SYS_LIMITS_H_                                                                           | 13008    26
    36       |                                                                                                 | 13009    26
    37       |#include <sys/cdefs.h>                                                                           | 13010    26
     1       |/* release 2.25.00 */                                                                            | 13011     4
     2       |#pragma pack()                                                                                   | 13012     4
     3       |/*                                                                                               | 13013     4
     4       | * Copyright (c) 1991, 1993                                                                      | 13014     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 13015     4
     6       | *                                                                                               | 13016     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 13017     4
     8       | * Berkeley Software Design, Inc.                                                                | 13018     4
     9       | *                                                                                               | 13019     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 13020     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   252


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    11       | * modification, are permitted provided that the following conditions                            | 13021     4
    12       | * are met:                                                                                      | 13022     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 13023     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 13024     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13025     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 13026     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 13027     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 13028     4
    19       | *    must display the following acknowledgement:                                                | 13029     4
    20       | *      This product includes software developed by the University of                            | 13030     4
    21       | *      California, Berkeley and its contributors.                                               | 13031     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 13032     4
    23       | *    may be used to endorse or promote products derived from this software                      | 13033     4
    24       | *    without specific prior written permission.                                                 | 13034     4
    25       | *                                                                                               | 13035     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 13036     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13037     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13038     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 13039     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13040     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13041     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13042     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13043     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13044     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13045     4
    36       | * SUCH DAMAGE.                                                                                  | 13046     4
    37       | *                                                                                               | 13047     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 13048     4
    39       | */                                                                                              | 13049     4
    40       |                                                                                                 | 13050     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 13051     4
    42       |#define _SYS_CDEFS_H_                                                                            | 13052     4
    43       |                                                                                                 | 13053     4
    44       |#if defined(__cplusplus)                                                                         | 13054     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 13055     4
    46       |#define __END_DECLS     }                                                                        | 13056     4
    47       |#else                                                                                            | 13057     4
    48       |#define __BEGIN_DECLS                                                                            | 13058     4
    49       |#define __END_DECLS                                                                              | 13059     4
    50       |#endif                                                                                           | 13060     4
    51       |                                                                                                 | 13061     4
    52       |/*                                                                                               | 13062     4
    53       | * This code has been put in place to help reduce the addition of                                | 13063     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 13064     4
    55       | * having a compiler-agnostic source tree.                                                       | 13065     4
    56       | */                                                                                              | 13066     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 13067     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 13068     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 13069     4
    60       |                                                                                                 | 13070     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 13071     4
    62       |                                                                                                 | 13072     4
    63       |                                                                                                 | 13073     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   253


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    64       |/*                                                                                               | 13074     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 13075     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 13076     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 13077     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 13078     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 13079     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 13080     4
    71       | * this only works with ANSI C.                                                                  | 13081     4
    72       | *                                                                                               | 13082     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 13083     4
    74       | * first.  It is only available with ANSI C.                                                     | 13084     4
    75       | */                                                                                              | 13085     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 13086     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 13087     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 13088     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 13089     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 13090     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 13091     4
    82       |                                                                                                 | 13092     4
    83       |#define __const         const           /* define reserved names to standard */                  | 13093     4
    84       |#define __signed        signed                                                                   | 13094     4
    85       |#define __volatile      volatile                                                                 | 13095     4
    86       |#if defined(__cplusplus)                                                                         | 13096     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 13097     4
    88       |#else                                                                                            | 13098     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 13099     4
    90       |#endif /* !__cplusplus */                                                                        | 13100     4
    91       |                                                                                                 | 13101     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 13102     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 13103     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 13104     4
    95       |#define __STRING(x)     "x"                                                                      | 13105     4
    96       |                                                                                                 | 13106     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 13107     4
    98       |#define __inline                                                                                 | 13108     4
    99       |#define __signed                                                                                 | 13109     4
   100       |#define __volatile                                                                               | 13110     4
   101       |/*                                                                                               | 13111     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 13112     4
   103       | * deleted from the program and old programs will want them left alone.                          | 13113     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 13114     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 13115     4
   106       | */                                                                                              | 13116     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 13117     4
   108       |#define const                           /* delete ANSI C keywords */                             | 13118     4
   109       |#define inline                                                                                   | 13119     4
   110       |#define signed                                                                                   | 13120     4
   111       |#define volatile                                                                                 | 13121     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 13122     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 13123     4
   114       |                                                                                                 | 13124     4
   115       |/*                                                                                               | 13125     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 13126     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   254


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   117       | * pure (no side effects) functions, and unused variables.                                       | 13127     4
   118       | */                                                                                              | 13128     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 13129     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 13130     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 13131     4
   122       |#define __unused                                                                                 | 13132     4
   123       |#define __aligned(x)                                                                             | 13133     4
   124       |#define __section(x)                                                                             | 13134     4
   125       |#define __nonnull(x)                                                                             | 13135     4
   126       |#define __used                                                                                   | 13136     4
   127       |                                                                                                 | 13137     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 13138     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 13139     4
   130       |                                                                                                 | 13140     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 13141     4
   132       |#define __func__  NULL                                                                           | 13142     4
   133       |#endif                                                                                           | 13143     4
   134       |                                                                                                 | 13144     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 13145     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 13146     4
   137       |#endif                                                                                           | 13147     4
   138       |                                                                                                 | 13148     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 13149     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 13150     4
   141       | **/                                                                                             | 13151     4
   142       |#ifndef __cplusplus                                                                              | 13152     4
   143       |#define __restrict __restrict__                                                                  | 13153     4
   144       |#else                                                                                            | 13154     4
   145       |/* Systems/C++ does not */                                                                       | 13155     4
   146       |#define __restrict                                                                               | 13156     4
   147       |#endif                                                                                           | 13157     4
   148       |                                                                                                 | 13158     4
   149       |/*                                                                                               | 13159     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 13160     4
   151       | */                                                                                              | 13161     4
   152       |#define __predict_true(exp)     (exp)                                                            | 13162     4
   153       |#define __predict_false(exp)    (exp)                                                            | 13163     4
   154       |                                                                                                 | 13164     4
   155       |                                                                                                 | 13165     4
   156       |/*                                                                                               | 13166     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 13167     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 13168     4
   159       | *                                                                                               | 13169     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 13170     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 13171     4
   162       | */                                                                                              | 13172     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 13173     4
   164       |#undef __offsetof                                                                                | 13174     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 13175     4
   166       |#endif                                                                                           | 13176     4
   167       |                                                                                                 | 13177     4
   168       |/*                                                                                               | 13178     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 13179     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   255


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   170       | * or scanf-like arguments.                                                                      | 13180     4
   171       | */                                                                                              | 13181     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 13182     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 13183     4
   174       |#define __format_arg(fmtarg)                                                                     | 13184     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 13185     4
   176       |                                                                                                 | 13186     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 13187     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 13188     4
   179       |                                                                                                 | 13189     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 13190     4
   181       |#define __weak_reference(sym,alias)                                                              | 13191     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 13192     4
   183       |#define __warn_references(sym,msg)                                                               | 13193     4
   184       |                                                                                                 | 13194     4
   185       | /* This places the string into the resulting object.  It should */                              | 13195     4
   186       | /* probably become #pragma ident */                                                             | 13196     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 13197     4
   188       |                                                                                                 | 13198     4
   189       |#ifndef __RCSID                                                                                  | 13199     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 13200     4
   191       |#endif                                                                                           | 13201     4
   192       |                                                                                                 | 13202     4
   193       |/*                                                                                               | 13203     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 13204     4
   195       | * Usage:                                                                                        | 13205     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 13206     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 13207     4
   198       | */                                                                                              | 13208     4
   199       |#ifndef __SYSCID                                                                                 | 13209     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 13210     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 13211     4
   202       |#else                                                                                            | 13212     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 13213     4
   204       |#endif                                                                                           | 13214     4
   205       |#endif                                                                                           | 13215     4
   206       |                                                                                                 | 13216     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 13217     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 13218     4
   209       |#endif                                                                                           | 13219     4
   210       |                                                                                                 | 13220     4
   211       |#ifndef __COPYRIGHT                                                                              | 13221     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 13222     4
   213       |#endif                                                                                           | 13223     4
   214       |                                                                                                 | 13224     4
   215       |                                                                                                 | 13225     4
   216       |#ifndef __DECONST                                                                                | 13226     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 13227     4
   218       |#endif                                                                                           | 13228     4
   219       |                                                                                                 | 13229     4
   220       |#ifndef __DEVOLATILE                                                                             | 13230     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 13231     4
   222       |#endif                                                                                           | 13232     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   256


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   223       |                                                                                                 | 13233     4
   224       |#ifndef __DEQUALIFY                                                                              | 13234     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 13235     4
   226       |#endif                                                                                           | 13236     4
   227       |                                                                                                 | 13237     4
   228       |                                                                                                 | 13238     4
   229       |/*-                                                                                              | 13239     4
   230       | * The following definitions are an extension of the behavior originally                         | 13240     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 13241     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 13242     4
   233       | * header file is included.                                                                      | 13243     4
   234       | *                                                                                               | 13244     4
   235       | * Here's a quick run-down of the versions:                                                      | 13245     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 13246     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 13247     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 13248     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 13249     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 13250     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 13251     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 13252     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 13253     4
   244       | *                                                                                               | 13254     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 13255     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 13256     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 13257     4
   248       | *                                                                                               | 13258     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 13259     4
   250       | */                                                                                              | 13260     4
   251       |                                                                                                 | 13261     4
   252       |/*                                                                                               | 13262     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 13263     4
   254       | * available. Also make them available when requested so.                                        | 13264     4
   255       | */                                                                                              | 13265     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 13266     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 13267     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 13268     4
   259       |#define __DF_VISIBLE    1                                                                        | 13269     4
   260       |#else                                                                                            | 13270     4
   261       |#define __DF_VISIBLE    0                                                                        | 13271     4
   262       |#endif                                                                                           | 13272     4
   263       |                                                                                                 | 13273     4
   264       |/*-                                                                                              | 13274     4
   265       | * The following definitions are an extension of the behavior originally                         | 13275     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 13276     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 13277     4
   268       | * header file is included.                                                                      | 13278     4
   269       | *                                                                                               | 13279     4
   270       | * Here's a quick run-down of the versions:                                                      | 13280     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 13281     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 13282     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 13283     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 13284     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 13285     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   257


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 13286     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 13287     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 13288     4
   279       | *                                                                                               | 13289     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 13290     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 13291     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 13292     4
   283       | *                                                                                               | 13293     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 13294     4
   285       | */                                                                                              | 13295     4
   286       |                                                                                                 | 13296     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 13297     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 13298     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 13299     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 13300     4
   291       |#endif                                                                                           | 13301     4
   292       |                                                                                                 | 13302     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 13303     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 13304     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 13305     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 13306     4
   297       |#endif                                                                                           | 13307     4
   298       |                                                                                                 | 13308     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 13309     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 13310     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 13311     4
   302       |#define __XSI_VISIBLE           700                                                              | 13312     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 13313     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 13314     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 13315     4
   306       |#define __XSI_VISIBLE           600                                                              | 13316     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 13317     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 13318     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 13319     4
   310       |#define __XSI_VISIBLE           500                                                              | 13320     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 13321     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 13322     4
   313       |#endif                                                                                           | 13323     4
   314       |#endif                                                                                           | 13324     4
   315       |                                                                                                 | 13325     4
   316       |/*                                                                                               | 13326     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 13327     4
   318       | * important.                                                                                    | 13328     4
   319       | */                                                                                              | 13329     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 13330     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 13331     4
   322       |#endif                                                                                           | 13332     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 13333     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 13334     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 13335     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 13336     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 13337     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 13338     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   258


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   329       |#define __ISO_C_VISIBLE         1999                                                             | 13339     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 13340     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 13341     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 13342     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 13343     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 13344     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 13345     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 13346     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 13347     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 13348     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 13349     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 13350     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 13351     4
   342       |#else                                                                                            | 13352     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 13353     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 13354     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 13355     4
   346       |#else                                                                                            | 13356     4
   347       |/*-                                                                                              | 13357     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 13358     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 13359     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 13360     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 13361     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 13362     4
   353       | * a test program to print out the values.                                                       | 13363     4
   354       | *                                                                                               | 13364     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 13365     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 13366     4
   357       | * environment (and in fact we will never get here).                                             | 13367     4
   358       | */                                                                                              | 13368     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 13369     4
   360       |#define __POSIX_VISIBLE         0                                                                | 13370     4
   361       |#define __XSI_VISIBLE           0                                                                | 13371     4
   362       |#define __BSD_VISIBLE           0                                                                | 13372     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 13373     4
   364       |#define __EXT1_VISIBLE          0                                                                | 13374     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 13375     4
   366       |#define __POSIX_VISIBLE         0                                                                | 13376     4
   367       |#define __XSI_VISIBLE           0                                                                | 13377     4
   368       |#define __BSD_VISIBLE           0                                                                | 13378     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 13379     4
   370       |#define __EXT1_VISIBLE          0                                                                | 13380     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 13381     4
   372       |#define __POSIX_VISIBLE         0                                                                | 13382     4
   373       |#define __XSI_VISIBLE           0                                                                | 13383     4
   374       |#define __BSD_VISIBLE           0                                                                | 13384     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 13385     4
   376       |#define __EXT1_VISIBLE          0                                                                | 13386     4
   377       |#else                           /* Default environment: show everything. */                      | 13387     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 13388     4
   379       |#define __XSI_VISIBLE           700                                                              | 13389     4
   380       |#define __BSD_VISIBLE           1                                                                | 13390     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 13391     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   259


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   382       |#define __EXT1_VISIBLE          1                                                                | 13392     4
   383       |#endif                                                                                           | 13393     4
   384       |#endif                                                                                           | 13394     4
   385       |                                                                                                 | 13395     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 13396     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 13397     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 13398     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 13399     4
   390       |#define __EXT1_VISIBLE          1                                                                | 13400     4
   391       |#else                                                                                            | 13401     4
   392       |#define __EXT1_VISIBLE          0                                                                | 13402     4
   393       |#endif                                                                                           | 13403     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 13404     4
   395       |                                                                                                 | 13405     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 13406     4
   397       |#define __NO_TLS 1                                                                               | 13407     4
   398       |#endif                                                                                           | 13408     4
   399       |                                                                                                 | 13409     4
   400       |                                                                                                 | 13410     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 13411     4
   402       |#define __FBSDID(x)                                                                              | 13412     4
   403       |                                                                                                 | 13413     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 13414     4
   405       |#pragma pack(reset)                                                                              | 13415     4
    38       |#include <machine/_limits.h>                                                                     | 13416    26
     1       |/* release 2.25.00 */                                                                            | 13417    27
     2       |#pragma pack()                                                                                   | 13418    27
     3       |/*-                                                                                              | 13419    27
     4       | * Copyright (c) 1988, 1993                                                                      | 13420    27
     5       | *      The Regents of the University of California.  All rights reserved.                       | 13421    27
     6       | *                                                                                               | 13422    27
     7       | * Redistribution and use in source and binary forms, with or without                            | 13423    27
     8       | * modification, are permitted provided that the following conditions                            | 13424    27
     9       | * are met:                                                                                      | 13425    27
    10       | * 1. Redistributions of source code must retain the above copyright                             | 13426    27
    11       | *    notice, this list of conditions and the following disclaimer.                              | 13427    27
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13428    27
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 13429    27
    14       | *    documentation and/or other materials provided with the distribution.                       | 13430    27
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 13431    27
    16       | *    may be used to endorse or promote products derived from this software                      | 13432    27
    17       | *    without specific prior written permission.                                                 | 13433    27
    18       | *                                                                                               | 13434    27
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 13435    27
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13436    27
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13437    27
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 13438    27
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13439    27
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13440    27
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13441    27
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13442    27
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13443    27
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13444    27
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   260


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    29       | * SUCH DAMAGE.                                                                                  | 13445    27
    30       | *                                                                                               | 13446    27
    31       | *      @(#)limits.h    8.3 (Berkeley) 1/4/94                                                    | 13447    27
    32       | * $FreeBSD: src/sys/i386/include/_limits.h,v 1.27 2005/01/06 22:18:15 imp Exp $                 | 13448    27
    33       | */                                                                                              | 13449    27
    34       |                                                                                                 | 13450    27
    35       |#ifndef _MACHINE__LIMITS_H_                                                                      | 13451    27
    36       |#define _MACHINE__LIMITS_H_                                                                      | 13452    27
    37       |                                                                                                 | 13453    27
    38       |/*                                                                                               | 13454    27
    39       | * According to ANSI (section 2.2.4.2), the values below must be usable by                       | 13455    27
    40       | * #if preprocessing directives.  Additionally, the expression must have the                     | 13456    27
    41       | * same type as would an expression that is an object of the corresponding                       | 13457    27
    42       | * type converted according to the integral promotions.  The subtraction for                     | 13458    27
    43       | * INT_MIN, etc., is so the value is not unsigned; e.g., 0x80000000 is an                        | 13459    27
    44       | * unsigned int for 32-bit two's complement ANSI compilers (section 3.1.3.2).                    | 13460    27
    45       | * These numbers are for the default configuration of gcc.  They work for                        | 13461    27
    46       | * some other compilers as well, but this should not be depended on.                             | 13462    27
    47       | */                                                                                              | 13463    27
    48       |                                                                                                 | 13464    27
    49       |#define __CHAR_BIT      8               /* number of bits in a char */                           | 13465    27
    50       |                                                                                                 | 13466    27
    51       |#define __SCHAR_MAX     0x7f            /* max value for a signed char */                        | 13467    27
    52       |#define __SCHAR_MIN     (-0x7f - 1)     /* min value for a signed char */                        | 13468    27
    53       |                                                                                                 | 13469    27
    54       |#define __UCHAR_MAX     0xff            /* max value for an unsigned char */                     | 13470    27
    55       |                                                                                                 | 13471    27
    56       |#define __USHRT_MAX     0xffff          /* max value for an unsigned short */                    | 13472    27
    57       |#define __SHRT_MAX      0x7fff          /* max value for a short */                              | 13473    27
    58       |#define __SHRT_MIN      (-0x7fff - 1)   /* min value for a short */                              | 13474    27
    59       |                                                                                                 | 13475    27
    60       |#define __UINT_MAX      0xffffffffU     /* max value for an unsigned int */                      | 13476    27
    61       |#define __INT_MAX       0x7fffffff      /* max value for an int */                               | 13477    27
    62       |#define __INT_MIN       (-0x7fffffff - 1)       /* min value for an int */                       | 13478    27
    63       |                                                                                                 | 13479    27
    64       |#ifdef _LP64                                                                                     | 13480    27
    65       |  /* (long) is 64-bits */                                                                        | 13481    27
    66       |#define __ULONG_MAX     0xffffffffffffffffUL                                                     | 13482    27
    67       |#define __LONG_MAX      0x7fffffffffffffffL                                                      | 13483    27
    68       |#define __LONG_MIN      (-0x7fffffffffffffffL - 1)                                               | 13484    27
    69       |#else                                                                                            | 13485    27
    70       |#define __ULONG_MAX     0xffffffffUL    /* max value for an unsigned long */                     | 13486    27
    71       |#define __LONG_MAX      0x7fffffffL     /* max value for a long */                               | 13487    27
    72       |#define __LONG_MIN      (-0x7fffffffL - 1)      /* min value for a long */                       | 13488    27
    73       |#endif                                                                                           | 13489    27
    74       |                                                                                                 | 13490    27
    75       |                        /* max value for an unsigned long long */                                | 13491    27
    76       |#define __ULLONG_MAX    0xffffffffffffffffULL                                                    | 13492    27
    77       |#define __LLONG_MAX     0x7fffffffffffffffLL    /* max value for a long long */                  | 13493    27
    78       |#define __LLONG_MIN     (-0x7fffffffffffffffLL - 1)  /* min for a long long */                   | 13494    27
    79       |                                                                                                 | 13495    27
    80       |#define __SSIZE_MAX     __INT_MAX       /* max value for a ssize_t */                            | 13496    27
    81       |                                                                                                 | 13497    27
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   261


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    82       |#define __SIZE_T_MAX    __UINT_MAX      /* max value for a size_t */                             | 13498    27
    83       |                                                                                                 | 13499    27
    84       |#define __OFF_MAX       __LLONG_MAX     /* max value for an off_t */                             | 13500    27
    85       |#define __OFF_MIN       __LLONG_MIN     /* min value for an off_t */                             | 13501    27
    86       |                                                                                                 | 13502    27
    87       |/* Quads and long longs are the same size.  Ensure they stay in sync. */                         | 13503    27
    88       |#define __UQUAD_MAX     __ULLONG_MAX    /* max value for a uquad_t */                            | 13504    27
    89       |#define __QUAD_MAX      __LLONG_MAX     /* max value for a quad_t */                             | 13505    27
    90       |#define __QUAD_MIN      __LLONG_MIN     /* min value for a quad_t */                             | 13506    27
    91       |                                                                                                 | 13507    27
    92       |#ifdef _LP64                                                                                     | 13508    27
    93       |#define __LONG_BIT      64                                                                       | 13509    27
    94       |#else                                                                                            | 13510    27
    95       |#define __LONG_BIT      32                                                                       | 13511    27
    96       |#endif                                                                                           | 13512    27
    97       |#define __WORD_BIT      32                                                                       | 13513    27
    98       |                                                                                                 | 13514    27
    99       |#endif /* !_MACHINE__LIMITS_H_ */                                                                | 13515    27
   100       |#pragma pack(reset)                                                                              | 13516    27
    39       |                                                                                                 | 13517    26
    40       |#define CHAR_BIT        __CHAR_BIT      /* number of bits in a char */                           | 13518    26
    41       |                                                                                                 | 13519    26
    42       |#define SCHAR_MAX       __SCHAR_MAX     /* max value for a signed char */                        | 13520    26
    43       |#define SCHAR_MIN       __SCHAR_MIN     /* min value for a signed char */                        | 13521    26
    44       |                                                                                                 | 13522    26
    45       |#define UCHAR_MAX       __UCHAR_MAX     /* max value for an unsigned char */                     | 13523    26
    46       |                                                                                                 | 13524    26
    47       |#ifdef __CHAR_UNSIGNED__                                                                         | 13525    26
    48       |#define CHAR_MAX        UCHAR_MAX       /* max value for a char */                               | 13526    26
    49       |#define CHAR_MIN        0               /* min value for a char */                               | 13527    26
    50       |#else                                                                                            | 13528    26
    51       |#define CHAR_MAX        SCHAR_MAX                                                                | 13529    26
    52       |#define CHAR_MIN        SCHAR_MIN                                                                | 13530    26
    53       |#endif                                                                                           | 13531    26
    54       |                                                                                                 | 13532    26
    55       |#define USHRT_MAX       __USHRT_MAX     /* max value for an unsigned short */                    | 13533    26
    56       |#define SHRT_MAX        __SHRT_MAX      /* max value for a short */                              | 13534    26
    57       |#define SHRT_MIN        __SHRT_MIN      /* min value for a short */                              | 13535    26
    58       |                                                                                                 | 13536    26
    59       |#define UINT_MAX        __UINT_MAX      /* max value for an unsigned int */                      | 13537    26
    60       |#define INT_MAX         __INT_MAX       /* max value for an int */                               | 13538    26
    61       |#define INT_MIN         __INT_MIN       /* min value for an int */                               | 13539    26
    62       |                                                                                                 | 13540    26
    63       |#define ULONG_MAX       __ULONG_MAX     /* max for an unsigned long */                           | 13541    26
    64       |#define LONG_MAX        __LONG_MAX      /* max for a long */                                     | 13542    26
    65       |#define LONG_MIN        __LONG_MIN      /* min for a long */                                     | 13543    26
    66       |                                                                                                 | 13544    26
    67       |#ifdef __LONG_LONG_SUPPORTED                                                                     | 13545    26
    68       |#define ULLONG_MAX      __ULLONG_MAX    /* max for an unsigned long long */                      | 13546    26
    69       |#define LLONG_MAX       __LLONG_MAX     /* max for a long long */                                | 13547    26
    70       |#define LLONG_MIN       __LLONG_MIN     /* min for a long long */                                | 13548    26
    71       |#endif                                                                                           | 13549    26
    72       |                                                                                                 | 13550    26
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   262


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    73       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 13551    26
    74       |#define SSIZE_MAX       __SSIZE_MAX     /* max value for an ssize_t */                           | 13552    26
    75       |#endif                                                                                           | 13553    26
    76       |                                                                                                 | 13554    26
    76       +                                                                                                 + 13554    26
    77       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 13555    26
    78       |#define SIZE_T_MAX      __SIZE_T_MAX    /* max value for a size_t */                             | 13556    26
    79       |                                                                                                 | 13557    26
    79       +                                                                                                 + 13557    26
    80       |#define OFF_MAX         __OFF_MAX       /* max value for an off_t */                             | 13558    26
    81       |#define OFF_MIN         __OFF_MIN       /* min value for an off_t */                             | 13559    26
    82       |#endif                                                                                           | 13560    26
    83       |                                                                                                 | 13561    26
    84       |#if __BSD_VISIBLE                                                                                | 13562    26
    85       |#define GID_MAX         UINT_MAX        /* max value for a gid_t */                              | 13563    26
    86       |#define UID_MAX         UINT_MAX        /* max value for a uid_t */                              | 13564    26
    87       |                                                                                                 | 13565    26
    87       +                                                                                                 + 13565    26
    88       |#define UQUAD_MAX       (__UQUAD_MAX)   /* max value for a uquad_t */                            | 13566    26
    89       |#define QUAD_MAX        (__QUAD_MAX)    /* max value for a quad_t */                             | 13567    26
    90       |#define QUAD_MIN        (__QUAD_MIN)    /* min value for a quad_t */                             | 13568    26
    91       |#endif                                                                                           | 13569    26
    92       |                                                                                                 | 13570    26
    93       |#if __XSI_VISIBLE                                                                                | 13571    26
    94       |#define LONG_BIT        __LONG_BIT                                                               | 13572    26
    95       |#define WORD_BIT        __WORD_BIT                                                               | 13573    26
    96       |#endif                                                                                           | 13574    26
    97       |                                                                                                 | 13575    26
    97       +                                                                                                 + 13575    26
    98       |#endif /* !_SYS_LIMITS_H_ */                                                                     | 13576    26
    99       |#pragma pack(reset)                                                                              | 13577    26
   130       |                                                                                                 | 13578    25
   131       |#if __POSIX_VISIBLE                                                                              | 13579    25
   132       |#include <sys/syslimits.h>                                                                       | 13580    25
     1       |/* release 2.25.00 */                                                                            | 13581    28
     1       +                                                                                                 + 13581    28
     2       |#pragma pack()                                                                                   | 13582    28
     3       |/*-                                                                                              | 13583    28
     4       | * Copyright (c) 1988, 1993                                                                      | 13584    28
     5       | *      The Regents of the University of California.  All rights reserved.                       | 13585    28
     6       | *                                                                                               | 13586    28
     7       | * Redistribution and use in source and binary forms, with or without                            | 13587    28
     8       | * modification, are permitted provided that the following conditions                            | 13588    28
     9       | * are met:                                                                                      | 13589    28
    10       | * 1. Redistributions of source code must retain the above copyright                             | 13590    28
    11       | *    notice, this list of conditions and the following disclaimer.                              | 13591    28
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13592    28
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 13593    28
    14       | *    documentation and/or other materials provided with the distribution.                       | 13594    28
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 13595    28
    16       | *    may be used to endorse or promote products derived from this software                      | 13596    28
    17       | *    without specific prior written permission.                                                 | 13597    28
    18       | *                                                                                               | 13598    28
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   263


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 13599    28
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13600    28
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13601    28
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 13602    28
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13603    28
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13604    28
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13605    28
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13606    28
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13607    28
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13608    28
    29       | * SUCH DAMAGE.                                                                                  | 13609    28
    30       | *                                                                                               | 13610    28
    31       | *      @(#)syslimits.h 8.1 (Berkeley) 6/2/93                                                    | 13611    28
    32       | * $FreeBSD: src/sys/sys/syslimits.h,v 1.21 2005/03/02 21:33:29 joerg Exp $                      | 13612    28
    33       | */                                                                                              | 13613    28
    34       |                                                                                                 | 13614    28
    35       |#ifndef _SYS_SYSLIMITS_H_                                                                        | 13615    28
    36       |#define _SYS_SYSLIMITS_H_                                                                        | 13616    28
    37       |                                                                                                 | 13617    28
    38       |#if !defined(_KERNEL) && !defined(_LIMITS_H_) && !defined(_SYS_PARAM_H_)                         | 13618    28
    39       |#ifndef _SYS_CDEFS_H_                                                                            | 13619    28
    40       |#error this file needs sys/cdefs.h as a prerequisite                                             | 13620    28
    41       |#endif                                                                                           | 13621    28
    42       |#ifdef __CC_SUPPORTS_WARNING                                                                     | 13622    28
    43       |#warning "No user-serviceable parts inside."                                                     | 13623    28
    44       |#endif                                                                                           | 13624    28
    45       |#endif                                                                                           | 13625    28
    46       |                                                                                                 | 13626    28
    47       |/*                                                                                               | 13627    28
    48       | * Do not add any new variables here.  (See the comment at the end of                            | 13628    28
    49       | * the file for why.)                                                                            | 13629    28
    50       | */                                                                                              | 13630    28
    51       |#if defined(__arm__) || defined(__powerpc__)                                                     | 13631    28
    52       |#define ARG_MAX                 65536   /* max bytes for an exec function */                     | 13632    28
    53       |#else                                                                                            | 13633    28
    54       |#define ARG_MAX                 262144  /* max bytes for an exec function */                     | 13634    28
    55       |#endif                                                                                           | 13635    28
    56       |#ifndef CHILD_MAX                                                                                | 13636    28
    57       |#define CHILD_MAX                  40   /* max simultaneous processes */                         | 13637    28
    58       |#endif                                                                                           | 13638    28
    59       |#define LINK_MAX                32767   /* max file link count */                                | 13639    28
    60       |#define MAX_CANON                 255   /* max bytes in term canon input line */                 | 13640    28
    61       |#define MAX_INPUT                 255   /* max bytes in terminal input */                        | 13641    28
    62       |#define NAME_MAX                  255   /* max bytes in a file name */                           | 13642    28
    63       |#ifdef __VM__                                                                                    | 13643    28
    64       |#define NGROUPS_MAX                32   /* max supplemental group id's */                        | 13644    28
    65       |#else                                                                                            | 13645    28
    66       |#define NGROUPS_MAX               300   /* max supplemental group id's */                        | 13646    28
    67       |#endif                                                                                           | 13647    28
    68       |#ifndef OPEN_MAX                                                                                 | 13648    28
    69       |#define OPEN_MAX                   64   /* max open files per process */                         | 13649    28
    70       |#endif                                                                                           | 13650    28
    71       |#define PATH_MAX                 1024   /* max bytes in pathname */                              | 13651    28
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   264


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    72       |#define PIPE_BUF                  512   /* max bytes for atomic pipe writes */                   | 13652    28
    73       |#define IOV_MAX                  1024   /* max elements in i/o vector */                         | 13653    28
    74       |                                                                                                 | 13654    28
    75       |#ifndef __SEM_VALUE_MAX_DEFINED                                                                  | 13655    28
    76       |#define SEM_VALUE_MAX   0x7fffffff                                                               | 13656    28
    77       |#define __SEM_VALUE_MAX_DEFINED                                                                  | 13657    28
    78       |#endif                                                                                           | 13658    28
    79       |#ifndef __SEM_NSEMS_MAX_DEFINED                                                                  | 13659    28
    80       |#define SEM_NSEMS_MAX             256                                                            | 13660    28
    81       |#define __SEM_NSEMS_MAX_DEFINED                                                                  | 13661    28
    82       |#endif                                                                                           | 13662    28
    83       |                                                                                                 | 13663    28
    84       |/*                                                                                               | 13664    28
    85       | * We leave the following values undefined to force applications to either                       | 13665    28
    86       | * assume conservative values or call sysconf() to get the current value.                        | 13666    28
    87       | *                                                                                               | 13667    28
    88       | * HOST_NAME_MAX                                                                                 | 13668    28
    89       | *                                                                                               | 13669    28
    90       | * (We should do this for most of the values currently defined here,                             | 13670    28
    91       | * but many programs are not prepared to deal with this yet.)                                    | 13671    28
    92       | */                                                                                              | 13672    28
    93       |#endif                                                                                           | 13673    28
    94       |#pragma pack(reset)                                                                              | 13674    28
   133       |#endif                                                                                           | 13675    25
   134       |                                                                                                 | 13676    25
   135       |#endif /* !_LIMITS_H_ */                                                                         | 13677    25
   136       |#pragma pack(reset)                                                                              | 13678    25
    55       |                                                                                                 | 13679    18
    56       |#include "tinycthread.h"                                                                         | 13680    18
     1       |/* -*- mode: c; tab-width: 2; indent-tabs-mode: nil; -*-                                         | 13681    29
     2       |Copyright (c) 2012 Marcus Geelnard                                                               | 13682    29
     3       |Copyright (c) 2013-2014 Evan Nemerson                                                            | 13683    29
     4       |                                                                                                 | 13684    29
     5       |This software is provided 'as-is', without any express or implied                                | 13685    29
     6       |warranty. In no event will the authors be held liable for any damages                            | 13686    29
     7       |arising from the use of this software.                                                           | 13687    29
     8       |                                                                                                 | 13688    29
     9       |Permission is granted to anyone to use this software for any purpose,                            | 13689    29
    10       |including commercial applications, and to alter it and redistribute it                           | 13690    29
    11       |freely, subject to the following restrictions:                                                   | 13691    29
    12       |                                                                                                 | 13692    29
    13       |    1. The origin of this software must not be misrepresented; you must not                      | 13693    29
    14       |    claim that you wrote the original software. If you use this software                         | 13694    29
    15       |    in a product, an acknowledgment in the product documentation would be                        | 13695    29
    16       |    appreciated but is not required.                                                             | 13696    29
    17       |                                                                                                 | 13697    29
    18       |    2. Altered source versions must be plainly marked as such, and must not be                   | 13698    29
    19       |    misrepresented as being the original software.                                               | 13699    29
    20       |                                                                                                 | 13700    29
    21       |    3. This notice may not be removed or altered from any source                                 | 13701    29
    22       |    distribution.                                                                                | 13702    29
    23       |*/                                                                                               | 13703    29
    24       |                                                                                                 | 13704    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   265


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       |#ifndef _TINYCTHREAD_H_                                                                          | 13705    29
    26       |#define _TINYCTHREAD_H_                                                                          | 13706    29
    27       |                                                                                                 | 13707    29
    28       |/* Include config to know if C11 threads are available */                                        | 13708    29
    29       |#ifdef _WIN32                                                                                    | 13709    29
    30       |#include "win32_config.h"                                                                        | 13710    29
    31       |#else                                                                                            | 13711    29
    32       |#include "../config.h"                                                                           | 13712    29
     1       |// Automatically generated by ./configure                                                        | 13713    30
     2       |#ifndef _CONFIG_H_                                                                               | 13714    30
     3       |#define _CONFIG_H_                                                                               | 13715    30
     4       |// distro                                                                                        | 13716    30
     5       |#define SOLIB_EXT ".dylib"                                                                       | 13717    30
     6       |#define ARCH "x86_64"                                                                            | 13718    30
     7       |#define CPU "generic"                                                                            | 13719    30
     8       |#define WITHOUT_OPTIMIZATION 0                                                                   | 13720    30
     9       |#define WITH_STRIP 0                                                                             | 13721    30
    10       |// #define ENABLE_ZLIB "try"                                                                     | 13722    30
    11       |// #define ENABLE_ZSTD "try"                                                                     | 13723    30
    12       |// #define ENABLE_SSL "try"                                                                      | 13724    30
    13       |// #define ENABLE_GSSAPI "try"                                                                   | 13725    30
    14       |#define ENABLE_ZLIB 0                                                                            | 13726    30
    15       |#define ENABLE_ZSTD 0                                                                            | 13727    30
    16       |#define ENABLE_SSL 0                                                                             | 13728    30
    17       |#define ENABLE_GSSAPI 0                                                                          | 13729    30
    18       |#define ENABLE_DEVEL 0                                                                           | 13730    30
    19       |#define ENABLE_VALGRIND 0                                                                        | 13731    30
    20       |#define ENABLE_REFCNT_DEBUG 0                                                                    | 13732    30
    21       |#define ENABLE_LZ4_EXT 1                                                                         | 13733    30
    22       |#define ENABLE_LZ4_EXT 1                                                                         | 13734    30
    23       |#define ENABLE_REGEX_EXT 1                                                                       | 13735    30
    24       |#define ENABLE_C11THREADS "try"                                                                  | 13736    30
    25       |#define ENABLE_SYSLOG 1                                                                          | 13737    30
    26       |#define MKL_APP_NAME "librdkafka"                                                                | 13738    30
    27       |#define MKL_APP_DESC_ONELINE "The Apache Kafka C/C++ library"                                    | 13739    30
    28       |// gcc                                                                                           | 13740    30
    29       |#define WITH_GCC 0                                                                               | 13741    30
    30       |// gxx                                                                                           | 13742    30
    31       |#define WITH_GXX 0                                                                               | 13743    30
    32       |// pkgconfig                                                                                     | 13744    30
    33       |#define WITH_PKGCONFIG 1                                                                         | 13745    30
    34       |// PIC                                                                                           | 13746    30
    35       |#define HAVE_PIC 1                                                                               | 13747    30
    36       |// osxlib                                                                                        | 13748    30
    37       |#define WITH_OSXLD 1                                                                             | 13749    30
    38       |// __atomic_32                                                                                   | 13750    30
    39       |#define HAVE_ATOMICS_32 1                                                                        | 13751    30
    40       |// __atomic_32                                                                                   | 13752    30
    41       |#define HAVE_ATOMICS_32_ATOMIC 1                                                                 | 13753    30
    42       |// atomic_32                                                                                     | 13754    30
    43       |#define ATOMIC_OP32(OP1,OP2,PTR,VAL) __atomic_ ## OP1 ## _ ## OP2(PTR, VAL, __ATOMIC_SEQ_CST)    | 13755    30
    44       |// __atomic_64                                                                                   | 13756    30
    45       |#define HAVE_ATOMICS_64 1                                                                        | 13757    30
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   266


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    46       |// __atomic_64                                                                                   | 13758    30
    47       |#define HAVE_ATOMICS_64_ATOMIC 1                                                                 | 13759    30
    48       |// atomic_64                                                                                     | 13760    30
    49       |#define ATOMIC_OP64(OP1,OP2,PTR,VAL) __atomic_ ## OP1 ## _ ## OP2(PTR, VAL, __ATOMIC_SEQ_CST)    | 13761    30
    50       |// atomic_64                                                                                     | 13762    30
    51       |#define ATOMIC_OP(OP1,OP2,PTR,VAL) __atomic_ ## OP1 ## _ ## OP2(PTR, VAL, __ATOMIC_SEQ_CST)      | 13763    30
    52       |// parseversion                                                                                  | 13764    30
    53       |#define RDKAFKA_VERSION_STR "1.6.1"                                                              | 13765    30
    54       |// parseversion                                                                                  | 13766    30
    55       |#define MKL_APP_VERSION "1.6.1"                                                                  | 13767    30
    56       |// libdl                                                                                         | 13768    30
    57       |#define WITH_LIBDL 1                                                                             | 13769    30
    58       |// WITH_PLUGINS                                                                                  | 13770    30
    59       |#define WITH_PLUGINS 1                                                                           | 13771    30
    60       |// zlib                                                                                          | 13772    30
    61       |#define WITH_ZLIB 0                                                                              | 13773    30
    62       |// libsasl2                                                                                      | 13774    30
    63       |#define WITH_SASL_CYRUS 1                                                                        | 13775    30
    64       |// WITH_HDRHISTOGRAM                                                                             | 13776    30
    65       |#define WITH_HDRHISTOGRAM 1                                                                      | 13777    30
    66       |// syslog                                                                                        | 13778    30
    67       |#define WITH_SYSLOG 1                                                                            | 13779    30
    68       |// WITH_SNAPPY                                                                                   | 13780    30
    69       |#define WITH_SNAPPY 1                                                                            | 13781    30
    70       |// WITH_SOCKEM                                                                                   | 13782    30
    71       |#define WITH_SOCKEM 1                                                                            | 13783    30
    72       |// crc32chw                                                                                      | 13784    30
    73       | /* ZLRD01 */                                                                                    | 13785    30
    74       |#define WITH_CRC32C_HW 0                                                                         | 13786    30
    75       |// regex                                                                                         | 13787    30
    76       |#define HAVE_REGEX 1                                                                             | 13788    30
    77       |// rand_r                                                                                        | 13789    30
    78       |#define HAVE_RAND_R 1                                                                            | 13790    30
    79       |// strndup                                                                                       | 13791    30
    80       |#define HAVE_STRNDUP 0                                                                           | 13792    30
    81       |// strlcpy                                                                                       | 13793    30
    82       |#define HAVE_STRLCPY 0                                                                           | 13794    30
    83       |// strerror_r                                                                                    | 13795    30
    84       |#define HAVE_STRERROR_R 0                                                                        | 13796    30
    85       |// pthread_setname_darwin                                                                        | 13797    30
    86       |#define HAVE_PTHREAD_SETNAME_DARWIN 0                                                            | 13798    30
    87       |// getrusage                                                                                     | 13799    30
    88       |#define HAVE_GETRUSAGE 1                                                                         | 13800    30
    89       |// BUILT_WITH                                                                                    | 13801    30
    90       |#define BUILT_WITH "GCC GXX PKGCONFIG OSXLD LIBDL PLUGINS SASL_CYRUS HDRHISTOGRAM SYSLOG SNAPPY S| 13802    30
    90       +OCKEM CRC32C_HW"                                                                                 + 13802    30
    91       |#endif /* _CONFIG_H_ */                                                                          | 13803    30
    33       |#endif                                                                                           | 13804    29
    34       |                                                                                                 | 13805    29
    35       |#if WITH_C11THREADS                                                                              | 13806    29
    36       |#include <threads.h>                                                                             | 13807    29
    37       |#else                                                                                            | 13808    29
    38       |                                                                                                 | 13809    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   267


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    39       |#ifdef __cplusplus                                                                               | 13810    29
    40       |extern "C" {                                                                                     | 13811    29
    41       |#endif                                                                                           | 13812    29
    42       |                                                                                                 | 13813    29
    43       |/**                                                                                              | 13814    29
    44       |* @file                                                                                          | 13815    29
    45       |* @mainpage TinyCThread API Reference                                                            | 13816    29
    46       |*                                                                                                | 13817    29
    47       |* @section intro_sec Introduction                                                                | 13818    29
    48       |* TinyCThread is a minimal, portable implementation of basic threading                           | 13819    29
    49       |* classes for C.                                                                                 | 13820    29
    50       |*                                                                                                | 13821    29
    51       |* They closely mimic the functionality and naming of the C11 standard, and                       | 13822    29
    52       |* should be easily replaceable with the corresponding standard variants.                         | 13823    29
    53       |*                                                                                                | 13824    29
    54       |* @section port_sec Portability                                                                  | 13825    29
    55       |* The Win32 variant uses the native Win32 API for implementing the thread                        | 13826    29
    56       |* classes, while for other systems, the POSIX threads API (pthread) is used.                     | 13827    29
    57       |*                                                                                                | 13828    29
    58       |* @section misc_sec Miscellaneous                                                                | 13829    29
    59       |* The following special keywords are available: #_Thread_local.                                  | 13830    29
    60       |*                                                                                                | 13831    29
    61       |* For more detailed information, browse the different sections of this                           | 13832    29
    62       |* documentation. A good place to start is:                                                       | 13833    29
    63       |* tinycthread.h.                                                                                 | 13834    29
    64       |*/                                                                                               | 13835    29
    65       |                                                                                                 | 13836    29
    66       |/* Which platform are we on? */                                                                  | 13837    29
    67       |#if !defined(_TTHREAD_PLATFORM_DEFINED_)                                                         | 13838    29
    68       |  #if defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)                              | 13839    29
    69       |    #define _TTHREAD_WIN32_                                                                      | 13840    29
    70       |  #else                                                                                          | 13841    29
    71       |    #define _TTHREAD_POSIX_                                                                      | 13842    29
    72       |  #endif                                                                                         | 13843    29
    73       |  #define _TTHREAD_PLATFORM_DEFINED_                                                             | 13844    29
    74       |#endif                                                                                           | 13845    29
    75       |                                                                                                 | 13846    29
    76       |/* Activate some POSIX functionality (e.g. clock_gettime and recursive mutexes) */               | 13847    29
    77       |#if defined(_TTHREAD_POSIX_)                                                                     | 13848    29
    78       |  #undef _FEATURES_H                                                                             | 13849    29
    79       |  #if !defined(_GNU_SOURCE)                                                                      | 13850    29
    80       |    #define _GNU_SOURCE                                                                          | 13851    29
    81       |  #endif                                                                                         | 13852    29
    82       |  #if !defined(_POSIX_C_SOURCE) || ((_POSIX_C_SOURCE - 0) < 199309L)                             | 13853    29
    83       |    #undef _POSIX_C_SOURCE                                                                       | 13854    29
    84       |    #define _POSIX_C_SOURCE 199309L                                                              | 13855    29
    85       |  #endif                                                                                         | 13856    29
    86       |  #if !defined(_XOPEN_SOURCE) || ((_XOPEN_SOURCE - 0) < 500)                                     | 13857    29
    87       |    #undef _XOPEN_SOURCE                                                                         | 13858    29
    88       |    #define _XOPEN_SOURCE 500                                                                    | 13859    29
    89       |  #endif                                                                                         | 13860    29
    90       |#endif                                                                                           | 13861    29
    91       |                                                                                                 | 13862    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   268


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    91       +                                                                                                 + 13862    29
    92       |/* Generic includes */                                                                           | 13863    29
    93       |#include <time.h>                                                                                | 13864    29
     1       |/* release 2.25.00 */                                                                            | 13865    16
     2       |#pragma pack()                                                                                   | 13866    16
     3       |/*                                                                                               | 13867    16
     4       | * Copyright (c) 1989, 1993                                                                      | 13868    16
     5       | *      The Regents of the University of California.  All rights reserved.                       | 13869    16
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 13870    16
     7       | * All or some portions of this file are derived from material licensed                          | 13871    16
     8       | * to the University of California by American Telephone and Telegraph                           | 13872    16
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 13873    16
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 13874    16
    11       | *                                                                                               | 13875    16
    12       | * Redistribution and use in source and binary forms, with or without                            | 13876    16
    13       | * modification, are permitted provided that the following conditions                            | 13877    16
    14       | * are met:                                                                                      | 13878    16
    15       | * 1. Redistributions of source code must retain the above copyright                             | 13879    16
    16       | *    notice, this list of conditions and the following disclaimer.                              | 13880    16
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 13881    16
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 13882    16
    19       | *    documentation and/or other materials provided with the distribution.                       | 13883    16
    20       | * 3. All advertising materials mentioning features or use of this software                      | 13884    16
    21       | *    must display the following acknowledgement:                                                | 13885    16
    22       | *      This product includes software developed by the University of                            | 13886    16
    23       | *      California, Berkeley and its contributors.                                               | 13887    16
    24       | * 4. Neither the name of the University nor the names of its contributors                       | 13888    16
    25       | *    may be used to endorse or promote products derived from this software                      | 13889    16
    26       | *    without specific prior written permission.                                                 | 13890    16
    27       | *                                                                                               | 13891    16
    28       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 13892    16
    29       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 13893    16
    30       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 13894    16
    31       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 13895    16
    32       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 13896    16
    33       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 13897    16
    34       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 13898    16
    35       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 13899    16
    36       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 13900    16
    37       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 13901    16
    38       | * SUCH DAMAGE.                                                                                  | 13902    16
    39       | *                                                                                               | 13903    16
    40       | *      @(#)time.h      8.3 (Berkeley) 1/21/94                                                   | 13904    16
    41       | */                                                                                              | 13905    16
    42       |                                                                                                 | 13906    16
    43       |/*                                                                                               | 13907    16
    44       | */                                                                                              | 13908    16
    45       |                                                                                                 | 13909    16
    46       |#ifndef _TIME_H_                                                                                 | 13910    16
    47       |#define _TIME_H_                                                                                 | 13911    16
    48       |                                                                                                 | 13912    16
    49       |#include <sys/cdefs.h>                                                                           | 13913    16
    50       |#include <sys/_null.h>                                                                           | 13914    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   269


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    51       |#include <sys/_types.h>                                                                          | 13915    16
    52       |                                                                                                 | 13916    16
    53       |#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE                             | 13917    16
    54       |/*                                                                                               | 13918    16
    55       | * Frequency of the clock ticks reported by times().  Deprecated - use                           | 13919    16
    56       | * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)                                      | 13920    16
    57       | *                                                                                               | 13921    16
    58       | */                                                                                              | 13922    16
    59       |#define CLK_TCK         10000                                                                    | 13923    16
    60       |#endif                                                                                           | 13924    16
    61       |                                                                                                 | 13925    16
    62       |/* Frequency of the clock ticks reported by clock().  */                                         | 13926    16
    63       |#define CLOCKS_PER_SEC  128                                                                      | 13927    16
    64       |                                                                                                 | 13928    16
    65       |#ifndef _CLOCK_T_DECLARED                                                                        | 13929    16
    66       |typedef __clock_t       clock_t;                                                                 | 13930    16
    67       |#define _CLOCK_T_DECLARED                                                                        | 13931    16
    68       |#endif                                                                                           | 13932    16
    69       |                                                                                                 | 13933    16
    70       |#ifndef _TIME_T_DECLARED                                                                         | 13934    16
    71       |typedef __time_t        time_t;                                                                  | 13935    16
    72       |#define _TIME_T_DECLARED                                                                         | 13936    16
    73       |#endif                                                                                           | 13937    16
    74       |                                                                                                 | 13938    16
    75       |#ifndef _SIZE_T_DECLARED                                                                         | 13939    16
    76       |typedef __size_t        size_t;                                                                  | 13940    16
    77       |#define _SIZE_T_DECLARED                                                                         | 13941    16
    78       |#endif                                                                                           | 13942    16
    79       |                                                                                                 | 13943    16
    80       |#if __POSIX_VISIBLE >= 199309                                                                    | 13944    16
    81       |/*                                                                                               | 13945    16
    82       | * New in POSIX 1003.1b-1993.                                                                    | 13946    16
    83       | */                                                                                              | 13947    16
    84       |#ifndef _CLOCKID_T_DECLARED                                                                      | 13948    16
    85       |typedef __clockid_t     clockid_t;                                                               | 13949    16
    86       |#define _CLOCKID_T_DECLARED                                                                      | 13950    16
    87       |#endif                                                                                           | 13951    16
    88       |                                                                                                 | 13952    16
    89       |#ifndef _TIMER_T_DECLARED                                                                        | 13953    16
    90       |typedef __timer_t       timer_t;                                                                 | 13954    16
    91       |#define _TIMER_T_DECLARED                                                                        | 13955    16
    92       |#endif                                                                                           | 13956    16
    93       |                                                                                                 | 13957    16
    94       |#include <sys/timespec.h>                                                                        | 13958    16
    95       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           | 13959    16
    96       |                                                                                                 | 13960    16
    97       |/* These macros are also in sys/time.h. */                                                       | 13961    16
    98       |#if !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112                                        | 13962    16
    99       |#define CLOCK_REALTIME  0                                                                        | 13963    16
   100       |#if 0                                                                                            | 13964    16
   101       |  /* only CLOCK_REALTIME exists in this implementation */                                        | 13965    16
   102       |#ifdef __BSD_VISIBLE                                                                             | 13966    16
   103       |#define CLOCK_VIRTUAL   1                                                                        | 13967    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   270


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   104       |#define CLOCK_PROF      2                                                                        | 13968    16
   105       |#endif                                                                                           | 13969    16
   106       |#define CLOCK_MONOTONIC 4                                                                        | 13970    16
   107       |#endif /* 0 */                                                                                   | 13971    16
   108       |#endif /* !defined(CLOCK_REALTIME) && __POSIX_VISIBLE >= 200112 */                               | 13972    16
   109       |                                                                                                 | 13973    16
   110       |#if !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112                                         | 13974    16
   111       |#if __BSD_VISIBLE                                                                                | 13975    16
   112       |#define TIMER_RELTIME   0x0     /* relative timer */                                             | 13976    16
   113       |#endif                                                                                           | 13977    16
   114       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             | 13978    16
   115       |#endif /* !defined(TIMER_ABSTIME) && __POSIX_VISIBLE >= 200112 */                                | 13979    16
   116       |                                                                                                 | 13980    16
   117       |struct tm {                                                                                      | 13981    16
   118       |        int     tm_sec;         /* seconds after the minute [0-60] */                            | 13982    16
   119       |        int     tm_min;         /* minutes after the hour [0-59] */                              | 13983    16
   120       |        int     tm_hour;        /* hours since midnight [0-23] */                                | 13984    16
   121       |        int     tm_mday;        /* day of the month [1-31] */                                    | 13985    16
   122       |        int     tm_mon;         /* months since January [0-11] */                                | 13986    16
   123       |        int     tm_year;        /* years since 1900 */                                           | 13987    16
   124       |        int     tm_wday;        /* days since Sunday [0-6] */                                    | 13988    16
   125       |        int     tm_yday;        /* days since January 1 [0-365] */                               | 13989    16
   126       |        int     tm_isdst;       /* Daylight Savings Time flag */                                 | 13990    16
   127       |        long    tm_gmtoff;      /* offset from UTC in seconds */                                 | 13991    16
   128       |        char    *tm_zone;       /* timezone abbreviation */                                      | 13992    16
   129       |};                                                                                               | 13993    16
   130       |                                                                                                 | 13994    16
   131       |#if __POSIX_VISIBLE                                                                              | 13995    16
   132       |extern char *tzname[];                                                                           | 13996    16
   133       |#endif                                                                                           | 13997    16
   134       |                                                                                                 | 13998    16
   135       |__BEGIN_DECLS                                                                                    | 13999    16
   136       |char *asctime(const struct tm *);                                                                | 14000    16
   137       |clock_t clock(void);                                                                             | 14001    16
   138       |char *ctime(const time_t *);                                                                     | 14002    16
   139       |double difftime(time_t, time_t);                                                                 | 14003    16
   140       |/* XXX missing: getdate() */                                                                     | 14004    16
   141       |struct tm *gmtime(const time_t *);                                                               | 14005    16
   142       |#pragma map (localtime, "LC@LTIME")                                                              | 14006    16
   143       |struct tm *localtime(const time_t *);                                                            | 14007    16
   144       |time_t mktime(struct tm *);                                                                      | 14008    16
   145       |size_t strftime(char * __restrict, size_t, const char * __restrict,                              | 14009    16
   146       |    const struct tm * __restrict);                                                               | 14010    16
   147       |time_t time(time_t *);                                                                           | 14011    16
   148       |                                                                                                 | 14012    16
   149       |#if __POSIX_VISIBLE                                                                              | 14013    16
   150       |void tzset(void);                                                                                | 14014    16
   151       |#endif                                                                                           | 14015    16
   152       |                                                                                                 | 14016    16
   153       |#if __POSIX_VISIBLE >= 199309                                                                    | 14017    16
   154       |#pragma map(clock_getres, "@@CLKRES")                                                            | 14018    16
   155       |int clock_getres(clockid_t, struct timespec *);                                                  | 14019    16
   156       |#pragma map(clock_gettime, "@@CLKGET")                                                           | 14020    16
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   271


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   157       |int clock_gettime(clockid_t, struct timespec *);                                                 | 14021    16
   158       |#pragma map(clock_settime, "@@CLKSET")                                                           | 14022    16
   159       |int clock_settime(clockid_t, const struct timespec *);                                           | 14023    16
   160       |#pragma map(nanosleep,"@@NNOSLP")                                                                | 14024    16
   161       |int nanosleep(const struct timespec *, struct timespec *);                                       | 14025    16
   162       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           | 14026    16
   163       |                                                                                                 | 14027    16
   164       |#if __POSIX_VISIBLE >= 199506                                                                    | 14028    16
   165       |#pragma map(asctime_r, "@@ASCT@R")                                                               | 14029    16
   166       |char *asctime_r(const struct tm *, char *);                                                      | 14030    16
   167       |#pragma map(ctime_r, "@@CTME@R")                                                                 | 14031    16
   168       |char *ctime_r(const time_t *, char *);                                                           | 14032    16
   169       |#pragma map(gmtime_r, "@@GMTM@R")                                                                | 14033    16
   170       |struct tm *gmtime_r(const time_t *, struct tm *);                                                | 14034    16
   171       |#pragma map(localtime_r, "@@LCLT@R")                                                             | 14035    16
   172       |struct tm *localtime_r(const time_t *, struct tm *);                                             | 14036    16
   173       |#endif                                                                                           | 14037    16
   174       |                                                                                                 | 14038    16
   175       |#if __XSI_VISIBLE                                                                                | 14039    16
   176       |char *strptime(const char * __restrict, const char * __restrict,                                 | 14040    16
   177       |    struct tm * __restrict);                                                                     | 14041    16
   178       |#endif                                                                                           | 14042    16
   179       |                                                                                                 | 14043    16
   180       |#if __BSD_VISIBLE                                                                                | 14044    16
   181       |char *timezone(int, int);       /* XXX XSI conflict */                                           | 14045    16
   182       |void tzsetwall(void);                                                                            | 14046    16
   183       |#pragma map (timelocal, "TIMELC@L")                                                              | 14047    16
   184       |time_t timelocal(struct tm * const);                                                             | 14048    16
   185       |time_t timegm(struct tm * const);                                                                | 14049    16
   186       |#endif /* __BSD_VISIBLE */                                                                       | 14050    16
   187       |__END_DECLS                                                                                      | 14051    16
   188       |                                                                                                 | 14052    16
   189       |#endif /* !_TIME_H_ */                                                                           | 14053    16
   190       |#pragma pack(reset)                                                                              | 14054    16
    94       |                                                                                                 | 14055    29
    95       |/* Platform specific includes */                                                                 | 14056    29
    96       |#if defined(_TTHREAD_POSIX_)                                                                     | 14057    29
    97       |  #ifndef _GNU_SOURCE                                                                            | 14058    29
    98       |   #define _GNU_SOURCE  /* for pthread_setname_np() */                                           | 14059    29
    99       |  #endif                                                                                         | 14060    29
   100       |  #include <pthread.h>                                                                           | 14061    29
     1       |/*                                                                                               | 14062    31
     2       | * Copyright (c) 1993, 1994 by Chris Provenzano, proven@mit.edu                                  | 14063    31
     3       | * Copyright (c) 1995-1998 by John Birrell <jb@cimlogic.com.au>                                  | 14064    31
     4       | * All rights reserved.                                                                          | 14065    31
     5       | *                                                                                               | 14066    31
     6       | * Redistribution and use in source and binary forms, with or without                            | 14067    31
     7       | * modification, are permitted provided that the following conditions                            | 14068    31
     8       | * are met:                                                                                      | 14069    31
     9       | * 1. Redistributions of source code must retain the above copyright                             | 14070    31
    10       | *    notice, this list of conditions and the following disclaimer.                              | 14071    31
    11       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14072    31
    12       | *    notice, this list of conditions and the following disclaimer in the                        | 14073    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   272


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    13       | *    documentation and/or other materials provided with the distribution.                       | 14074    31
    14       | * 3. All advertising materials mentioning features or use of this software                      | 14075    31
    15       | *    must display the following acknowledgement:                                                | 14076    31
    16       | *  This product includes software developed by Chris Provenzano.                                | 14077    31
    17       | * 4. The name of Chris Provenzano may not be used to endorse or promote                         | 14078    31
    18       | *        products derived from this software without specific prior written                     | 14079    31
    19       | *        permission.                                                                            | 14080    31
    20       | *                                                                                               | 14081    31
    21       | * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND                                   | 14082    31
    22       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14083    31
    23       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14084    31
    24       | * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY                         | 14085    31
    25       | * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES                    | 14086    31
    26       | * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR                            | 14087    31
    27       | * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER                    | 14088    31
    28       | * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                            | 14089    31
    29       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14090    31
    30       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14091    31
    31       | * SUCH DAMAGE.                                                                                  | 14092    31
    32       | *                                                                                               | 14093    31
    33       | * $FreeBSD: src/include/pthread.h,v 1.36.2.1 2005/12/15 06:50:39 davidxu Exp $                  | 14094    31
    34       | */                                                                                              | 14095    31
    35       |#ifndef _PTHREAD_H_                                                                              | 14096    31
    36       |#define _PTHREAD_H_                                                                              | 14097    31
    37       |                                                                                                 | 14098    31
    38       |/*                                                                                               | 14099    31
    39       | * Header files.                                                                                 | 14100    31
    40       | */                                                                                              | 14101    31
    41       |#include <sys/cdefs.h>                                                                           | 14102    31
     1       |/* release 2.25.00 */                                                                            | 14103     4
     2       |#pragma pack()                                                                                   | 14104     4
     3       |/*                                                                                               | 14105     4
     4       | * Copyright (c) 1991, 1993                                                                      | 14106     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14107     4
     6       | *                                                                                               | 14108     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 14109     4
     8       | * Berkeley Software Design, Inc.                                                                | 14110     4
     9       | *                                                                                               | 14111     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 14112     4
    11       | * modification, are permitted provided that the following conditions                            | 14113     4
    12       | * are met:                                                                                      | 14114     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 14115     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 14116     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14117     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 14118     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 14119     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 14120     4
    19       | *    must display the following acknowledgement:                                                | 14121     4
    20       | *      This product includes software developed by the University of                            | 14122     4
    21       | *      California, Berkeley and its contributors.                                               | 14123     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 14124     4
    23       | *    may be used to endorse or promote products derived from this software                      | 14125     4
    24       | *    without specific prior written permission.                                                 | 14126     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   273


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       | *                                                                                               | 14127     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14128     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14129     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14130     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14131     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14132     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14133     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14134     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14135     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14136     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14137     4
    36       | * SUCH DAMAGE.                                                                                  | 14138     4
    37       | *                                                                                               | 14139     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 14140     4
    39       | */                                                                                              | 14141     4
    40       |                                                                                                 | 14142     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 14143     4
    42       |#define _SYS_CDEFS_H_                                                                            | 14144     4
    43       |                                                                                                 | 14145     4
    44       |#if defined(__cplusplus)                                                                         | 14146     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 14147     4
    46       |#define __END_DECLS     }                                                                        | 14148     4
    47       |#else                                                                                            | 14149     4
    48       |#define __BEGIN_DECLS                                                                            | 14150     4
    49       |#define __END_DECLS                                                                              | 14151     4
    50       |#endif                                                                                           | 14152     4
    51       |                                                                                                 | 14153     4
    52       |/*                                                                                               | 14154     4
    53       | * This code has been put in place to help reduce the addition of                                | 14155     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 14156     4
    55       | * having a compiler-agnostic source tree.                                                       | 14157     4
    56       | */                                                                                              | 14158     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 14159     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 14160     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 14161     4
    60       |                                                                                                 | 14162     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 14163     4
    62       |                                                                                                 | 14164     4
    63       |                                                                                                 | 14165     4
    64       |/*                                                                                               | 14166     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 14167     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 14168     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 14169     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 14170     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 14171     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 14172     4
    71       | * this only works with ANSI C.                                                                  | 14173     4
    72       | *                                                                                               | 14174     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 14175     4
    74       | * first.  It is only available with ANSI C.                                                     | 14176     4
    75       | */                                                                                              | 14177     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 14178     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 14179     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   274


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 14180     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 14181     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 14182     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 14183     4
    82       |                                                                                                 | 14184     4
    83       |#define __const         const           /* define reserved names to standard */                  | 14185     4
    84       |#define __signed        signed                                                                   | 14186     4
    85       |#define __volatile      volatile                                                                 | 14187     4
    86       |#if defined(__cplusplus)                                                                         | 14188     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 14189     4
    88       |#else                                                                                            | 14190     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 14191     4
    90       |#endif /* !__cplusplus */                                                                        | 14192     4
    91       |                                                                                                 | 14193     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 14194     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 14195     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 14196     4
    95       |#define __STRING(x)     "x"                                                                      | 14197     4
    96       |                                                                                                 | 14198     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 14199     4
    98       |#define __inline                                                                                 | 14200     4
    99       |#define __signed                                                                                 | 14201     4
   100       |#define __volatile                                                                               | 14202     4
   101       |/*                                                                                               | 14203     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 14204     4
   103       | * deleted from the program and old programs will want them left alone.                          | 14205     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 14206     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 14207     4
   106       | */                                                                                              | 14208     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 14209     4
   108       |#define const                           /* delete ANSI C keywords */                             | 14210     4
   109       |#define inline                                                                                   | 14211     4
   110       |#define signed                                                                                   | 14212     4
   111       |#define volatile                                                                                 | 14213     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 14214     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 14215     4
   114       |                                                                                                 | 14216     4
   115       |/*                                                                                               | 14217     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 14218     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 14219     4
   118       | */                                                                                              | 14220     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 14221     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 14222     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 14223     4
   122       |#define __unused                                                                                 | 14224     4
   123       |#define __aligned(x)                                                                             | 14225     4
   124       |#define __section(x)                                                                             | 14226     4
   125       |#define __nonnull(x)                                                                             | 14227     4
   126       |#define __used                                                                                   | 14228     4
   127       |                                                                                                 | 14229     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 14230     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 14231     4
   130       |                                                                                                 | 14232     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   275


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   131       |#if __STDC_VERSION__ < 199901                                                                    | 14233     4
   132       |#define __func__  NULL                                                                           | 14234     4
   133       |#endif                                                                                           | 14235     4
   134       |                                                                                                 | 14236     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 14237     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 14238     4
   137       |#endif                                                                                           | 14239     4
   138       |                                                                                                 | 14240     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 14241     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 14242     4
   141       | **/                                                                                             | 14243     4
   142       |#ifndef __cplusplus                                                                              | 14244     4
   143       |#define __restrict __restrict__                                                                  | 14245     4
   144       |#else                                                                                            | 14246     4
   145       |/* Systems/C++ does not */                                                                       | 14247     4
   146       |#define __restrict                                                                               | 14248     4
   147       |#endif                                                                                           | 14249     4
   148       |                                                                                                 | 14250     4
   149       |/*                                                                                               | 14251     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 14252     4
   151       | */                                                                                              | 14253     4
   152       |#define __predict_true(exp)     (exp)                                                            | 14254     4
   153       |#define __predict_false(exp)    (exp)                                                            | 14255     4
   154       |                                                                                                 | 14256     4
   155       |                                                                                                 | 14257     4
   156       |/*                                                                                               | 14258     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 14259     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 14260     4
   159       | *                                                                                               | 14261     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 14262     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 14263     4
   162       | */                                                                                              | 14264     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 14265     4
   164       |#undef __offsetof                                                                                | 14266     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 14267     4
   166       |#endif                                                                                           | 14268     4
   167       |                                                                                                 | 14269     4
   168       |/*                                                                                               | 14270     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 14271     4
   170       | * or scanf-like arguments.                                                                      | 14272     4
   171       | */                                                                                              | 14273     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 14274     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 14275     4
   174       |#define __format_arg(fmtarg)                                                                     | 14276     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 14277     4
   176       |                                                                                                 | 14278     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 14279     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 14280     4
   179       |                                                                                                 | 14281     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 14282     4
   181       |#define __weak_reference(sym,alias)                                                              | 14283     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 14284     4
   183       |#define __warn_references(sym,msg)                                                               | 14285     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   276


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   184       |                                                                                                 | 14286     4
   185       | /* This places the string into the resulting object.  It should */                              | 14287     4
   186       | /* probably become #pragma ident */                                                             | 14288     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 14289     4
   188       |                                                                                                 | 14290     4
   189       |#ifndef __RCSID                                                                                  | 14291     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 14292     4
   191       |#endif                                                                                           | 14293     4
   192       |                                                                                                 | 14294     4
   193       |/*                                                                                               | 14295     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 14296     4
   195       | * Usage:                                                                                        | 14297     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 14298     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 14299     4
   198       | */                                                                                              | 14300     4
   199       |#ifndef __SYSCID                                                                                 | 14301     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 14302     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 14303     4
   202       |#else                                                                                            | 14304     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 14305     4
   204       |#endif                                                                                           | 14306     4
   205       |#endif                                                                                           | 14307     4
   206       |                                                                                                 | 14308     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 14309     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 14310     4
   209       |#endif                                                                                           | 14311     4
   210       |                                                                                                 | 14312     4
   211       |#ifndef __COPYRIGHT                                                                              | 14313     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 14314     4
   213       |#endif                                                                                           | 14315     4
   214       |                                                                                                 | 14316     4
   215       |                                                                                                 | 14317     4
   216       |#ifndef __DECONST                                                                                | 14318     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 14319     4
   218       |#endif                                                                                           | 14320     4
   219       |                                                                                                 | 14321     4
   220       |#ifndef __DEVOLATILE                                                                             | 14322     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 14323     4
   222       |#endif                                                                                           | 14324     4
   223       |                                                                                                 | 14325     4
   224       |#ifndef __DEQUALIFY                                                                              | 14326     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 14327     4
   226       |#endif                                                                                           | 14328     4
   227       |                                                                                                 | 14329     4
   228       |                                                                                                 | 14330     4
   229       |/*-                                                                                              | 14331     4
   230       | * The following definitions are an extension of the behavior originally                         | 14332     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 14333     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 14334     4
   233       | * header file is included.                                                                      | 14335     4
   234       | *                                                                                               | 14336     4
   235       | * Here's a quick run-down of the versions:                                                      | 14337     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 14338     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   277


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 14339     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 14340     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 14341     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 14342     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 14343     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 14344     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 14345     4
   244       | *                                                                                               | 14346     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 14347     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 14348     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 14349     4
   248       | *                                                                                               | 14350     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 14351     4
   250       | */                                                                                              | 14352     4
   251       |                                                                                                 | 14353     4
   252       |/*                                                                                               | 14354     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 14355     4
   254       | * available. Also make them available when requested so.                                        | 14356     4
   255       | */                                                                                              | 14357     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 14358     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 14359     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 14360     4
   259       |#define __DF_VISIBLE    1                                                                        | 14361     4
   260       |#else                                                                                            | 14362     4
   261       |#define __DF_VISIBLE    0                                                                        | 14363     4
   262       |#endif                                                                                           | 14364     4
   263       |                                                                                                 | 14365     4
   264       |/*-                                                                                              | 14366     4
   265       | * The following definitions are an extension of the behavior originally                         | 14367     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 14368     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 14369     4
   268       | * header file is included.                                                                      | 14370     4
   269       | *                                                                                               | 14371     4
   270       | * Here's a quick run-down of the versions:                                                      | 14372     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 14373     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 14374     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 14375     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 14376     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 14377     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 14378     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 14379     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 14380     4
   279       | *                                                                                               | 14381     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 14382     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 14383     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 14384     4
   283       | *                                                                                               | 14385     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 14386     4
   285       | */                                                                                              | 14387     4
   286       |                                                                                                 | 14388     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 14389     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 14390     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 14391     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   278


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   290       |#define _POSIX_C_SOURCE         199009                                                           | 14392     4
   291       |#endif                                                                                           | 14393     4
   292       |                                                                                                 | 14394     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 14395     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 14396     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 14397     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 14398     4
   297       |#endif                                                                                           | 14399     4
   298       |                                                                                                 | 14400     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 14401     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 14402     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 14403     4
   302       |#define __XSI_VISIBLE           700                                                              | 14404     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 14405     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 14406     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 14407     4
   306       |#define __XSI_VISIBLE           600                                                              | 14408     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 14409     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 14410     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 14411     4
   310       |#define __XSI_VISIBLE           500                                                              | 14412     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 14413     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 14414     4
   313       |#endif                                                                                           | 14415     4
   314       |#endif                                                                                           | 14416     4
   315       |                                                                                                 | 14417     4
   316       |/*                                                                                               | 14418     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 14419     4
   318       | * important.                                                                                    | 14420     4
   319       | */                                                                                              | 14421     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 14422     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 14423     4
   322       |#endif                                                                                           | 14424     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 14425     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 14426     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 14427     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 14428     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 14429     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 14430     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 14431     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 14432     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 14433     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 14434     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 14435     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 14436     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 14437     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 14438     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 14439     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 14440     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 14441     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 14442     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 14443     4
   342       |#else                                                                                            | 14444     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   279


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   343       |#define __POSIX_VISIBLE         198808                                                           | 14445     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 14446     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 14447     4
   346       |#else                                                                                            | 14448     4
   347       |/*-                                                                                              | 14449     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 14450     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 14451     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 14452     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 14453     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 14454     4
   353       | * a test program to print out the values.                                                       | 14455     4
   354       | *                                                                                               | 14456     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 14457     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 14458     4
   357       | * environment (and in fact we will never get here).                                             | 14459     4
   358       | */                                                                                              | 14460     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 14461     4
   360       |#define __POSIX_VISIBLE         0                                                                | 14462     4
   361       |#define __XSI_VISIBLE           0                                                                | 14463     4
   362       |#define __BSD_VISIBLE           0                                                                | 14464     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 14465     4
   364       |#define __EXT1_VISIBLE          0                                                                | 14466     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 14467     4
   366       |#define __POSIX_VISIBLE         0                                                                | 14468     4
   367       |#define __XSI_VISIBLE           0                                                                | 14469     4
   368       |#define __BSD_VISIBLE           0                                                                | 14470     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 14471     4
   370       |#define __EXT1_VISIBLE          0                                                                | 14472     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 14473     4
   372       |#define __POSIX_VISIBLE         0                                                                | 14474     4
   373       |#define __XSI_VISIBLE           0                                                                | 14475     4
   374       |#define __BSD_VISIBLE           0                                                                | 14476     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 14477     4
   376       |#define __EXT1_VISIBLE          0                                                                | 14478     4
   377       |#else                           /* Default environment: show everything. */                      | 14479     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 14480     4
   379       |#define __XSI_VISIBLE           700                                                              | 14481     4
   380       |#define __BSD_VISIBLE           1                                                                | 14482     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 14483     4
   382       |#define __EXT1_VISIBLE          1                                                                | 14484     4
   383       |#endif                                                                                           | 14485     4
   384       |#endif                                                                                           | 14486     4
   385       |                                                                                                 | 14487     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 14488     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 14489     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 14490     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 14491     4
   390       |#define __EXT1_VISIBLE          1                                                                | 14492     4
   391       |#else                                                                                            | 14493     4
   392       |#define __EXT1_VISIBLE          0                                                                | 14494     4
   393       |#endif                                                                                           | 14495     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 14496     4
   395       |                                                                                                 | 14497     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   280


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 14498     4
   397       |#define __NO_TLS 1                                                                               | 14499     4
   398       |#endif                                                                                           | 14500     4
   399       |                                                                                                 | 14501     4
   400       |                                                                                                 | 14502     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 14503     4
   402       |#define __FBSDID(x)                                                                              | 14504     4
   403       |                                                                                                 | 14505     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 14506     4
   405       |#pragma pack(reset)                                                                              | 14507     4
    42       |#include <sys/types.h>                                                                           | 14508    31
     1       |/* release 2.25.00 */                                                                            | 14509     3
     2       |#pragma pack()                                                                                   | 14510     3
     3       |/*-                                                                                              | 14511     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    | 14512     3
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14513     3
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 14514     3
     7       | * All or some portions of this file are derived from material licensed                          | 14515     3
     8       | * to the University of California by American Telephone and Telegraph                           | 14516     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 14517     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 14518     3
    11       | *                                                                                               | 14519     3
    12       | * Redistribution and use in source and binary forms, with or without                            | 14520     3
    13       | * modification, are permitted provided that the following conditions                            | 14521     3
    14       | * are met:                                                                                      | 14522     3
    15       | * 1. Redistributions of source code must retain the above copyright                             | 14523     3
    16       | *    notice, this list of conditions and the following disclaimer.                              | 14524     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14525     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 14526     3
    19       | *    documentation and/or other materials provided with the distribution.                       | 14527     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 14528     3
    21       | *    may be used to endorse or promote products derived from this software                      | 14529     3
    22       | *    without specific prior written permission.                                                 | 14530     3
    23       | *                                                                                               | 14531     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14532     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14533     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14534     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14535     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14536     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14537     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14538     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14539     3
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14540     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14541     3
    34       | * SUCH DAMAGE.                                                                                  | 14542     3
    35       | *                                                                                               | 14543     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   | 14544     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        | 14545     3
    38       | */                                                                                              | 14546     3
    39       |                                                                                                 | 14547     3
    40       |#ifndef _SYS_TYPES_H_                                                                            | 14548     3
    41       |#define _SYS_TYPES_H_                                                                            | 14549     3
    42       |                                                                                                 | 14550     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   281


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    43       |#include <sys/cdefs.h>                                                                           | 14551     3
    44       |                                                                                                 | 14552     3
    45       |/* Machine type dependent parameters. */                                                         | 14553     3
    46       |#include <machine/endian.h>                                                                      | 14554     3
    47       |#include <sys/_types.h>                                                                          | 14555     3
    48       |                                                                                                 | 14556     3
    49       |#include <sys/_pthreadtypes.h>                                                                   | 14557     3
    50       |                                                                                                 | 14558     3
    51       |#if __BSD_VISIBLE                                                                                | 14559     3
    52       |typedef unsigned char   u_char;                                                                  | 14560     3
    53       |typedef unsigned short  u_short;                                                                 | 14561     3
    54       |typedef unsigned int    u_int;                                                                   | 14562     3
    55       |typedef unsigned long   u_long;                                                                  | 14563     3
    56       |#ifndef _KERNEL                                                                                  | 14564     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                | 14565     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                | 14566     3
    59       |#endif                                                                                           | 14567     3
    60       |#endif                                                                                           | 14568     3
    61       |                                                                                                 | 14569     3
    62       |/*                                                                                               | 14570     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          | 14571     3
    64       | */                                                                                              | 14572     3
    65       |#ifndef _INT8_T_DECLARED                                                                         | 14573     3
    66       |typedef __int8_t        int8_t;                                                                  | 14574     3
    67       |#define _INT8_T_DECLARED                                                                         | 14575     3
    68       |#endif                                                                                           | 14576     3
    69       |                                                                                                 | 14577     3
    70       |#ifndef _INT16_T_DECLARED                                                                        | 14578     3
    71       |typedef __int16_t       int16_t;                                                                 | 14579     3
    72       |#define _INT16_T_DECLARED                                                                        | 14580     3
    73       |#endif                                                                                           | 14581     3
    74       |                                                                                                 | 14582     3
    75       |#ifndef _INT32_T_DECLARED                                                                        | 14583     3
    76       |typedef __int32_t       int32_t;                                                                 | 14584     3
    77       |#define _INT32_T_DECLARED                                                                        | 14585     3
    78       |#endif                                                                                           | 14586     3
    79       |                                                                                                 | 14587     3
    80       |#ifndef _INT64_T_DECLARED                                                                        | 14588     3
    81       |typedef __int64_t       int64_t;                                                                 | 14589     3
    82       |#define _INT64_T_DECLARED                                                                        | 14590     3
    83       |#endif                                                                                           | 14591     3
    84       |                                                                                                 | 14592     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        | 14593     3
    86       |typedef __uint8_t       uint8_t;                                                                 | 14594     3
    87       |#define _UINT8_T_DECLARED                                                                        | 14595     3
    88       |#endif                                                                                           | 14596     3
    89       |                                                                                                 | 14597     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       | 14598     3
    91       |typedef __uint16_t      uint16_t;                                                                | 14599     3
    92       |#define _UINT16_T_DECLARED                                                                       | 14600     3
    93       |#endif                                                                                           | 14601     3
    94       |                                                                                                 | 14602     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       | 14603     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   282


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    96       |typedef __uint32_t      uint32_t;                                                                | 14604     3
    97       |#define _UINT32_T_DECLARED                                                                       | 14605     3
    98       |#endif                                                                                           | 14606     3
    99       |                                                                                                 | 14607     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       | 14608     3
   101       |typedef __uint64_t      uint64_t;                                                                | 14609     3
   102       |#define _UINT64_T_DECLARED                                                                       | 14610     3
   103       |#endif                                                                                           | 14611     3
   104       |                                                                                                 | 14612     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       | 14613     3
   106       |typedef __intptr_t      intptr_t;                                                                | 14614     3
   107       |typedef __uintptr_t     uintptr_t;                                                               | 14615     3
   108       |#define _INTPTR_T_DECLARED                                                                       | 14616     3
   109       |#endif                                                                                           | 14617     3
   110       |                                                                                                 | 14618     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    | 14619     3
   112       |typedef __uint16_t      u_int16_t;                                                               | 14620     3
   113       |typedef __uint32_t      u_int32_t;                                                               | 14621     3
   114       |typedef __uint64_t      u_int64_t;                                                               | 14622     3
   115       |                                                                                                 | 14623     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 | 14624     3
   117       |typedef __int64_t       quad_t;                                                                  | 14625     3
   118       |typedef quad_t *        qaddr_t;                                                                 | 14626     3
   119       |                                                                                                 | 14627     3
   120       |typedef char *          caddr_t;        /* core address */                                       | 14628     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     | 14629     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  | 14630     3
   123       |                                                                                                 | 14631     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      | 14632     3
   125       |typedef __blksize_t     blksize_t;                                                               | 14633     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      | 14634     3
   127       |#endif                                                                                           | 14635     3
   128       |                                                                                                 | 14636     3
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       | 14637     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                | 14638     3
   131       |#define _BLKCNT_T_DECLARED                                                                       | 14639     3
   132       |#endif                                                                                           | 14640     3
   133       |                                                                                                 | 14641     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        | 14642     3
   135       |typedef __clock_t       clock_t;                                                                 | 14643     3
   136       |#define _CLOCK_T_DECLARED                                                                        | 14644     3
   137       |#endif                                                                                           | 14645     3
   138       |                                                                                                 | 14646     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      | 14647     3
   140       |typedef __clockid_t     clockid_t;                                                               | 14648     3
   141       |#define _CLOCKID_T_DECLARED                                                                      | 14649     3
   142       |#endif                                                                                           | 14650     3
   143       |                                                                                                 | 14651     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             | 14652     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       | 14653     3
   146       |                                                                                                 | 14654     3
   147       |#ifndef _DEV_T_DECLARED                                                                          | 14655     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       | 14656     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   283


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   149       |#define _DEV_T_DECLARED                                                                          | 14657     3
   150       |#endif                                                                                           | 14658     3
   151       |                                                                                                 | 14659     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       | 14660     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         | 14661     3
   154       |#define _FFLAGS_T_DECLARED                                                                       | 14662     3
   155       |#endif                                                                                           | 14663     3
   156       |                                                                                                 | 14664     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 | 14665     3
   158       |                                                                                                 | 14666     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      | 14667     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              | 14668     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              | 14669     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     | 14670     3
   163       |#endif                                                                                           | 14671     3
   164       |                                                                                                 | 14672     3
   165       |#ifndef _GID_T_DECLARED                                                                          | 14673     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           | 14674     3
   167       |#define _GID_T_DECLARED                                                                          | 14675     3
   168       |#endif                                                                                           | 14676     3
   169       |                                                                                                 | 14677     3
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      | 14678     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     | 14679     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      | 14680     3
   173       |#endif                                                                                           | 14681     3
   174       |                                                                                                 | 14682     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      | 14683     3
   176       |typedef __uint16_t      in_port_t;                                                               | 14684     3
   177       |#define _IN_PORT_T_DECLARED                                                                      | 14685     3
   178       |#endif                                                                                           | 14686     3
   179       |                                                                                                 | 14687     3
   180       |#ifndef _ID_T_DECLARED                                                                           | 14688     3
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          | 14689     3
   182       |#define _ID_T_DECLARED                                                                           | 14690     3
   183       |#endif                                                                                           | 14691     3
   184       |                                                                                                 | 14692     3
   185       |#ifndef _INO_T_DECLARED                                                                          | 14693     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       | 14694     3
   187       |#define _INO_T_DECLARED                                                                          | 14695     3
   188       |#endif                                                                                           | 14696     3
   189       |                                                                                                 | 14697     3
   190       |#ifndef _KEY_T_DECLARED                                                                          | 14698     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            | 14699     3
   192       |#define _KEY_T_DECLARED                                                                          | 14700     3
   193       |#endif                                                                                           | 14701     3
   194       |                                                                                                 | 14702     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        | 14703     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             | 14704     3
   197       |#define _LWPID_T_DECLARED                                                                        | 14705     3
   198       |#endif                                                                                           | 14706     3
   199       |                                                                                                 | 14707     3
   200       |#ifndef _MODE_T_DECLARED                                                                         | 14708     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        | 14709     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   284


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   202       |#define _MODE_T_DECLARED                                                                         | 14710     3
   203       |#endif                                                                                           | 14711     3
   204       |                                                                                                 | 14712     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        | 14713     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         | 14714     3
   207       |#define _NLINK_T_DECLARED                                                                        | 14715     3
   208       |#endif                                                                                           | 14716     3
   209       |                                                                                                 | 14717     3
   210       |#ifndef _OFF_T_DECLARED                                                                          | 14718     3
   211       |typedef __off_t         off_t;          /* file offset */                                        | 14719     3
   212       |#define _OFF_T_DECLARED                                                                          | 14720     3
   213       |#endif                                                                                           | 14721     3
   214       |                                                                                                 | 14722     3
   215       |#ifndef _PID_T_DECLARED                                                                          | 14723     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         | 14724     3
   217       |#define _PID_T_DECLARED                                                                          | 14725     3
   218       |#endif                                                                                           | 14726     3
   219       |                                                                                                 | 14727     3
   220       |typedef __register_t    register_t;                                                              | 14728     3
   221       |                                                                                                 | 14729     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         | 14730     3
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     | 14731     3
   224       |#define _RLIM_T_DECLARED                                                                         | 14732     3
   225       |#endif                                                                                           | 14733     3
   226       |                                                                                                 | 14734     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            | 14735     3
   228       |                                                                                                 | 14736     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         | 14737     3
   230       |typedef __size_t        size_t;                                                                  | 14738     3
   231       |#define _SIZE_T_DECLARED                                                                         | 14739     3
   232       |#endif                                                                                           | 14740     3
   233       |                                                                                                 | 14741     3
   234       |#ifndef _SSIZE_T_DECLARED                                                                        | 14742     3
   235       |typedef __ssize_t       ssize_t;                                                                 | 14743     3
   236       |#define _SSIZE_T_DECLARED                                                                        | 14744     3
   237       |#endif                                                                                           | 14745     3
   238       |                                                                                                 | 14746     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    | 14747     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              | 14748     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    | 14749     3
   242       |#endif                                                                                           | 14750     3
   243       |                                                                                                 | 14751     3
   244       |#ifndef _TIME_T_DECLARED                                                                         | 14752     3
   245       |typedef __time_t        time_t;                                                                  | 14753     3
   246       |#define _TIME_T_DECLARED                                                                         | 14754     3
   247       |#endif                                                                                           | 14755     3
   248       |                                                                                                 | 14756     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        | 14757     3
   250       |typedef __timer_t       timer_t;                                                                 | 14758     3
   251       |#define _TIMER_T_DECLARED                                                                        | 14759     3
   252       |#endif                                                                                           | 14760     3
   253       |                                                                                                 | 14761     3
   254       |typedef __u_register_t  u_register_t;                                                            | 14762     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   285


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   255       |                                                                                                 | 14763     3
   256       |#ifndef _UID_T_DECLARED                                                                          | 14764     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            | 14765     3
   258       |#define _UID_T_DECLARED                                                                          | 14766     3
   259       |#endif                                                                                           | 14767     3
   260       |                                                                                                 | 14768     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     | 14769     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            | 14770     3
   263       |#define _USECONDS_T_DECLARED                                                                     | 14771     3
   264       |#endif                                                                                           | 14772     3
   265       |                                                                                                 | 14773     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             | 14774     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            | 14775     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              | 14776     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             | 14777     3
   270       |typedef __vm_size_t     vm_size_t;                                                               | 14778     3
   271       |                                                                                                 | 14779     3
   272       |#ifdef _KERNEL                                                                                   | 14780     3
   273       |typedef int             boolean_t;                                                               | 14781     3
   274       |typedef __cpumask_t     cpumask_t;                                                               | 14782     3
   275       |typedef __intfptr_t     intfptr_t;                                                               | 14783     3
   276       |                                                                                                 | 14784     3
   277       |/*-                                                                                              | 14785     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      | 14786     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           | 14787     3
   280       | * compatibility is essential.  Least-width types should be used even less                       | 14788     3
   281       | * since they provide smaller benefits.                                                          | 14789     3
   282       | * XXX should be MD.                                                                             | 14790     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     | 14791     3
   284       | */                                                                                              | 14792     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 | 14793     3
   286       |                                                                                                 | 14794     3
   287       |typedef __uintfptr_t    uintfptr_t;                                                              | 14795     3
   288       |typedef __uint64_t      uoff_t;                                                                  | 14796     3
   289       |typedef struct vm_page  *vm_page_t;                                                              | 14797     3
   290       |                                                                                                 | 14798     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            | 14799     3
   292       |                                                                                                 | 14800     3
   293       |#endif /* !_KERNEL */                                                                            | 14801     3
   294       |                                                                                                 | 14802     3
   295       |/*                                                                                               | 14803     3
   296       | * The following are all things that really shouldn't exist in this header,                      | 14804     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          | 14805     3
   298       | */                                                                                              | 14806     3
   299       |#if __BSD_VISIBLE                                                                                | 14807     3
   300       |                                                                                                 | 14808     3
   301       |#include <sys/select.h>                                                                          | 14809     3
   302       |                                                                                                 | 14810     3
   303       |#ifndef _KERNEL                                                                                  | 14811     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    | 14812     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    | 14813     3
   306       |#endif /* !_KERNEL */                                                                            | 14814     3
   307       |                                                                                                 | 14815     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   286


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    | 14816     3
   309       |                                                                                                 | 14817     3
   310       |/*                                                                                               | 14818     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             | 14819     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             | 14820     3
   313       | * 64-bit off_t's.                                                                               | 14821     3
   314       | */                                                                                              | 14822     3
   315       |#ifndef _KERNEL                                                                                  | 14823     3
   316       |__BEGIN_DECLS                                                                                    | 14824     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      | 14825     3
   318       |#define _FTRUNCATE_DECLARED                                                                      | 14826     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              | 14827     3
   320       |int      ftruncate(int, off_t);                                                                  | 14828     3
   321       |#endif                                                                                           | 14829     3
   322       |#ifndef _LSEEK_DECLARED                                                                          | 14830     3
   323       |#define _LSEEK_DECLARED                                                                          | 14831     3
   324       |off_t    lseek(int, off_t, int);                                                                 | 14832     3
   325       |#endif                                                                                           | 14833     3
   326       |#ifndef _MMAP_DECLARED                                                                           | 14834     3
   327       |#define _MMAP_DECLARED                                                                           | 14835     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             | 14836     3
   329       |#endif                                                                                           | 14837     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       | 14838     3
   331       |#define _TRUNCATE_DECLARED                                                                       | 14839     3
   332       |int      truncate(const char *, off_t);                                                          | 14840     3
   333       |#endif                                                                                           | 14841     3
   334       |__END_DECLS                                                                                      | 14842     3
   335       |#endif /* !_KERNEL */                                                                            | 14843     3
   336       |                                                                                                 | 14844     3
   337       |#endif /* __BSD_VISIBLE */                                                                       | 14845     3
   338       |                                                                                                 | 14846     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      | 14847     3
   340       |#pragma pack(reset)                                                                              | 14848     3
    43       |#include <sys/_pthreadtypes.h>                                                                   | 14849    31
     1       |/* release 2.25.00 */                                                                            | 14850     8
     2       |#pragma pack()                                                                                   | 14851     8
     3       |/*                                                                                               | 14852     8
     4       | * Copyright (c) 1993, 1994 by Chris Provenzano, proven@mit.edu                                  | 14853     8
     5       | * Copyright (c) 1995-1998 by John Birrell <jb@cimlogic.com.au>                                  | 14854     8
     6       | * All rights reserved.                                                                          | 14855     8
     7       | *                                                                                               | 14856     8
     8       | * Redistribution and use in source and binary forms, with or without                            | 14857     8
     9       | * modification, are permitted provided that the following conditions                            | 14858     8
    10       | * are met:                                                                                      | 14859     8
    11       | * 1. Redistributions of source code must retain the above copyright                             | 14860     8
    12       | *    notice, this list of conditions and the following disclaimer.                              | 14861     8
    13       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14862     8
    14       | *    notice, this list of conditions and the following disclaimer in the                        | 14863     8
    15       | *    documentation and/or other materials provided with the distribution.                       | 14864     8
    16       | * 3. All advertising materials mentioning features or use of this software                      | 14865     8
    17       | *    must display the following acknowledgement:                                                | 14866     8
    18       | *  This product includes software developed by Chris Provenzano.                                | 14867     8
    19       | * 4. The name of Chris Provenzano may not be used to endorse or promote                         | 14868     8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   287


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    20       | *        products derived from this software without specific prior written                     | 14869     8
    21       | *        permission.                                                                            | 14870     8
    22       | *                                                                                               | 14871     8
    23       | * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND                                   | 14872     8
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14873     8
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14874     8
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY                         | 14875     8
    27       | * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES                    | 14876     8
    28       | * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR                            | 14877     8
    29       | * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER                    | 14878     8
    30       | * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                            | 14879     8
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14880     8
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14881     8
    33       | * SUCH DAMAGE.                                                                                  | 14882     8
    34       | *                                                                                               | 14883     8
    35       | * $FreeBSD: src/sys/sys/_pthreadtypes.h,v 1.1 2005/05/31 15:18:17 rodrigc Exp $                 | 14884     8
    36       | */                                                                                              | 14885     8
    37       |                                                                                                 | 14886     8
    38       |#ifndef _SYS__PTHREADTYPES_H_                                                                    | 14887     8
    39       |#define _SYS__PTHREADTYPES_H_                                                                    | 14888     8
    40       |                                                                                                 | 14889     8
    41       |/*                                                                                               | 14890     8
    42       | * Forward structure definitions.                                                                | 14891     8
    43       | *                                                                                               | 14892     8
    44       | * These are mostly opaque to the user.                                                          | 14893     8
    45       | */                                                                                              | 14894     8
    46       |struct __pthread;                                                                                | 14895     8
    47       |struct pthread;                                                                                  | 14896     8
    48       |struct pthread_cond_attr;                                                                        | 14897     8
    49       |struct pthread_mutex_attr;                                                                       | 14898     8
    50       |struct pthread_once;                                                                             | 14899     8
    51       |struct pthread_rwlockattr;                                                                       | 14900     8
    52       |struct pthread_barrier_attr;                                                                     | 14901     8
    53       |struct pthread_spinlock;                                                                         | 14902     8
    54       |struct pthread_attr { union { int __i[16]; volatile int __vi[16];                                | 14903     8
    55       |                              unsigned long __s[8]; } __u; };                                    | 14904     8
    56       |struct pthread_mutex { union { int __i[10]; volatile int __vi[10];                               | 14905     8
    57       |                               volatile void *volatile __p[5]; } __u; };                         | 14906     8
    58       |struct pthread_cond { union { int __i[12]; volatile int __vi[12];                                | 14907     8
    59       |                              void *__p[6]; } __u; };                                            | 14908     8
    60       |struct pthread_rwlock { union { int __i[14]; volatile int __vi[14];                              | 14909     8
    61       |                                void *__p[7]; } __u; };                                          | 14910     8
    62       |struct pthread_barrier { union { int __i[8]; volatile int __vi[8];                               | 14911     8
    63       |                                 void *__p[4]; } __u; };                                         | 14912     8
    64       |                                                                                                 | 14913     8
    65       |                                                                                                 | 14914     8
    66       |/*                                                                                               | 14915     8
    67       | * Primitive system data type definitions required by P1003.1c.                                  | 14916     8
    68       | *                                                                                               | 14917     8
    69       | * Note that P1003.1c specifies that there are no defined comparison                             | 14918     8
    70       | * or assignment operators for the types pthread_attr_t, pthread_cond_t,                         | 14919     8
    71       | * pthread_condattr_t, pthread_mutex_t, pthread_mutexattr_t.                                     | 14920     8
    72       | */                                                                                              | 14921     8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   288


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    73       |#ifndef _PTHREAD_T_DECLARED                                                                      | 14922     8
    74       |typedef struct __pthread                        *pthread_t;                                      | 14923     8
    75       |#define _PTHREAD_T_DECLARED                                                                      | 14924     8
    76       |#endif                                                                                           | 14925     8
    77       |typedef struct  pthread_attr            pthread_attr_t;                                          | 14926     8
    78       |typedef struct  pthread_mutex           pthread_mutex_t;                                         | 14927     8
    79       |typedef struct { unsigned __attr; }     pthread_mutexattr_t;                                     | 14928     8
    80       |typedef struct  pthread_cond            pthread_cond_t;                                          | 14929     8
    81       |typedef struct { unsigned __attr; }     pthread_condattr_t;                                      | 14930     8
    82       |typedef unsigned int                    pthread_key_t;                                           | 14931     8
    83       |typedef int                             pthread_once_t;                                          | 14932     8
    84       |typedef struct { union { int __i[14]; volatile int __vi[14];                                     | 14933     8
    85       |                         void *__p[7]; } __u; } pthread_rwlock_t;                                | 14934     8
    86       |typedef struct { unsigned __attr[2]; }  pthread_rwlockattr_t;                                    | 14935     8
    87       |typedef struct pthread_barrier          pthread_barrier_t;                                       | 14936     8
    88       |typedef struct { unsigned __attr; }     pthread_barrierattr_t;                                   | 14937     8
    89       |typedef int                             pthread_spinlock_t;                                      | 14938     8
    90       |                                                                                                 | 14939     8
    91       |/*                                                                                               | 14940     8
    92       | * Additional type definitions:                                                                  | 14941     8
    93       | *                                                                                               | 14942     8
    94       | * Note that P1003.1c reserves the prefixes pthread_ and PTHREAD_ for                            | 14943     8
    95       | * use in header symbols.                                                                        | 14944     8
    96       | */                                                                                              | 14945     8
    97       |typedef void    *pthread_addr_t;                                                                 | 14946     8
    98       |typedef void    *(*pthread_startroutine_t)(void *);                                              | 14947     8
    99       |                                                                                                 | 14948     8
   100       |#endif /* ! _SYS__PTHREADTYPES_H_ */                                                             | 14949     8
   101       |#pragma pack(reset)                                                                              | 14950     8
    44       |#include <sys/time.h>                                                                            | 14951    31
     1       |/* release 2.25.00 */                                                                            | 14952    17
     2       |#pragma pack()                                                                                   | 14953    17
     3       |/*-                                                                                              | 14954    17
     4       | * Copyright (c) 1982, 1986, 1993                                                                | 14955    17
     5       | *      The Regents of the University of California.  All rights reserved.                       | 14956    17
     6       | *                                                                                               | 14957    17
     7       | * Redistribution and use in source and binary forms, with or without                            | 14958    17
     8       | * modification, are permitted provided that the following conditions                            | 14959    17
     9       | * are met:                                                                                      | 14960    17
    10       | * 1. Redistributions of source code must retain the above copyright                             | 14961    17
    11       | *    notice, this list of conditions and the following disclaimer.                              | 14962    17
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 14963    17
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 14964    17
    14       | *    documentation and/or other materials provided with the distribution.                       | 14965    17
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 14966    17
    16       | *    may be used to endorse or promote products derived from this software                      | 14967    17
    17       | *    without specific prior written permission.                                                 | 14968    17
    18       | *                                                                                               | 14969    17
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 14970    17
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 14971    17
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 14972    17
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 14973    17
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 14974    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   289


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 14975    17
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 14976    17
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 14977    17
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 14978    17
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 14979    17
    29       | * SUCH DAMAGE.                                                                                  | 14980    17
    30       | *                                                                                               | 14981    17
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    | 14982    17
    32       | * $FreeBSD: src/sys/sys/time.h,v 1.69 2005/04/02 12:33:27 das Exp $                             | 14983    17
    33       | */                                                                                              | 14984    17
    34       |                                                                                                 | 14985    17
    35       |#ifndef _SYS_TIME_H_                                                                             | 14986    17
    36       |#define _SYS_TIME_H_                                                                             | 14987    17
    37       |                                                                                                 | 14988    17
    38       |#include <sys/_timeval.h>                                                                        | 14989    17
    39       |#include <sys/types.h>                                                                           | 14990    17
    40       |#include <sys/timespec.h>                                                                        | 14991    17
    41       |                                                                                                 | 14992    17
    42       |struct timezone {                                                                                | 14993    17
    43       |        int     tz_minuteswest; /* minutes west of Greenwich */                                  | 14994    17
    44       |        int     tz_dsttime;     /* type of dst correction */                                     | 14995    17
    45       |};                                                                                               | 14996    17
    46       |#define DST_NONE        0       /* not on dst */                                                 | 14997    17
    47       |#define DST_USA         1       /* USA style dst */                                              | 14998    17
    48       |#define DST_AUST        2       /* Australian style dst */                                       | 14999    17
    49       |#define DST_WET         3       /* Western European dst */                                       | 15000    17
    50       |#define DST_MET         4       /* Middle European dst */                                        | 15001    17
    51       |#define DST_EET         5       /* Eastern European dst */                                       | 15002    17
    52       |#define DST_CAN         6       /* Canada */                                                     | 15003    17
    53       |                                                                                                 | 15004    17
    54       |#if __BSD_VISIBLE                                                                                | 15005    17
    55       |struct bintime {                                                                                 | 15006    17
    56       |        time_t  sec;                                                                             | 15007    17
    57       |        uint64_t frac;                                                                           | 15008    17
    58       |};                                                                                               | 15009    17
    59       |                                                                                                 | 15010    17
    60       |static __inline void                                                                             | 15011    17
    61       |bintime_addx(struct bintime *bt, uint64_t x)                                                     | 15012    17
    62       |{                                                                                                | 15013    17
    63       |        uint64_t u;                                                                              | 15014    17
    64       |                                                                                                 | 15015    17
    65       |        u = bt->frac;                                                                            | 15016    17
    66       |        bt->frac += x;                                                                           | 15017    17
    67       |        if (u > bt->frac)                                                                        | 15018    17
    68       |                bt->sec++;                                                                       | 15019    17
    69       |}                                                                                                | 15020    17
    70       |                                                                                                 | 15021    17
    71       |static __inline void                                                                             | 15022    17
    72       |bintime_add(struct bintime *bt, const struct bintime *bt2)                                       | 15023    17
    73       |{                                                                                                | 15024    17
    74       |        uint64_t u;                                                                              | 15025    17
    75       |                                                                                                 | 15026    17
    76       |        u = bt->frac;                                                                            | 15027    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   290


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    77       |        bt->frac += bt2->frac;                                                                   | 15028    17
    78       |        if (u > bt->frac)                                                                        | 15029    17
    79       |                bt->sec++;                                                                       | 15030    17
    80       |        bt->sec += bt2->sec;                                                                     | 15031    17
    81       |}                                                                                                | 15032    17
    82       |                                                                                                 | 15033    17
    83       |static __inline void                                                                             | 15034    17
    84       |bintime_sub(struct bintime *bt, const struct bintime *bt2)                                       | 15035    17
    85       |{                                                                                                | 15036    17
    86       |        uint64_t u;                                                                              | 15037    17
    87       |                                                                                                 | 15038    17
    88       |        u = bt->frac;                                                                            | 15039    17
    89       |        bt->frac -= bt2->frac;                                                                   | 15040    17
    90       |        if (u < bt->frac)                                                                        | 15041    17
    91       |                bt->sec--;                                                                       | 15042    17
    92       |        bt->sec -= bt2->sec;                                                                     | 15043    17
    93       |}                                                                                                | 15044    17
    94       |                                                                                                 | 15045    17
    95       |/*-                                                                                              | 15046    17
    96       | * Background information:                                                                       | 15047    17
    97       | *                                                                                               | 15048    17
    98       | * When converting between timestamps on parallel timescales of differing                        | 15049    17
    99       | * resolutions it is historical and scientific practice to round down rather                     | 15050    17
   100       | * than doing 4/5 rounding.                                                                      | 15051    17
   101       | *                                                                                               | 15052    17
   102       | *   The date changes at midnight, not at noon.                                                  | 15053    17
   103       | *                                                                                               | 15054    17
   104       | *   Even at 15:59:59.999999999 it's not four'o'clock.                                           | 15055    17
   105       | *                                                                                               | 15056    17
   106       | *   time_second ticks after N.999999999 not after N.4999999999                                  | 15057    17
   107       | */                                                                                              | 15058    17
   108       |                                                                                                 | 15059    17
   109       |static __inline void                                                                             | 15060    17
   110       |bintime2timespec(const struct bintime *bt, struct timespec *ts)                                  | 15061    17
   111       |{                                                                                                | 15062    17
   112       |                                                                                                 | 15063    17
   113       |        ts->tv_sec = bt->sec;                                                                    | 15064    17
   114       |        ts->tv_nsec = ((uint64_t)1000000000 * (uint32_t)(bt->frac >> 32)) >> 32;                 | 15065    17
   115       |}                                                                                                | 15066    17
   116       |                                                                                                 | 15067    17
   117       |static __inline void                                                                             | 15068    17
   118       |timespec2bintime(const struct timespec *ts, struct bintime *bt)                                  | 15069    17
   119       |{                                                                                                | 15070    17
   120       |                                                                                                 | 15071    17
   121       |        bt->sec = ts->tv_sec;                                                                    | 15072    17
   122       |        /* 18446744073 = int(2^64 / 1000000000) */                                               | 15073    17
   123       |        bt->frac = ts->tv_nsec * (uint64_t)18446744073LL;                                        | 15074    17
   124       |}                                                                                                | 15075    17
   125       |                                                                                                 | 15076    17
   126       |static __inline void                                                                             | 15077    17
   127       |bintime2timeval(const struct bintime *bt, struct timeval *tv)                                    | 15078    17
   128       |{                                                                                                | 15079    17
   129       |                                                                                                 | 15080    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   291


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   130       |        tv->tv_sec = bt->sec;                                                                    | 15081    17
   131       |        tv->tv_usec = ((uint64_t)1000000 * (uint32_t)(bt->frac >> 32)) >> 32;                    | 15082    17
   132       |}                                                                                                | 15083    17
   133       |                                                                                                 | 15084    17
   134       |static __inline void                                                                             | 15085    17
   135       |timeval2bintime(const struct timeval *tv, struct bintime *bt)                                    | 15086    17
   136       |{                                                                                                | 15087    17
   137       |                                                                                                 | 15088    17
   138       |        bt->sec = tv->tv_sec;                                                                    | 15089    17
   139       |        /* 18446744073709 = int(2^64 / 1000000) */                                               | 15090    17
   140       |        bt->frac = tv->tv_usec * (uint64_t)18446744073709LL;                                     | 15091    17
   141       |}                                                                                                | 15092    17
   142       |#endif /* __BSD_VISIBLE */                                                                       | 15093    17
   143       |                                                                                                 | 15094    17
   144       |#ifdef _KERNEL                                                                                   | 15095    17
   145       |                                                                                                 | 15096    17
   146       |/* Operations on timespecs */                                                                    | 15097    17
   147       |#define timespecclear(tvp)      ((tvp)->tv_sec = (tvp)->tv_nsec = 0)                             | 15098    17
   148       |#define timespecisset(tvp)      ((tvp)->tv_sec || (tvp)->tv_nsec)                                | 15099    17
   149       |#define timespeccmp(tvp, uvp, cmp)                                      \                        | 15100    17
   150       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        | 15101    17
   151       |            ((tvp)->tv_nsec cmp (uvp)->tv_nsec) :                       \                        | 15102    17
   152       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   | 15103    17
   153       |#define timespecadd(vvp, uvp)                                           \                        | 15104    17
   154       |        do {                                                            \                        | 15105    17
   155       |                (vvp)->tv_sec += (uvp)->tv_sec;                         \                        | 15106    17
   156       |                (vvp)->tv_nsec += (uvp)->tv_nsec;                       \                        | 15107    17
   157       |                if ((vvp)->tv_nsec >= 1000000000) {                     \                        | 15108    17
   158       |                        (vvp)->tv_sec++;                                \                        | 15109    17
   159       |                        (vvp)->tv_nsec -= 1000000000;                   \                        | 15110    17
   160       |                }                                                       \                        | 15111    17
   161       |        } while (0)                                                                              | 15112    17
   162       |#define timespecsub(vvp, uvp)                                           \                        | 15113    17
   163       |        do {                                                            \                        | 15114    17
   164       |                (vvp)->tv_sec -= (uvp)->tv_sec;                         \                        | 15115    17
   165       |                (vvp)->tv_nsec -= (uvp)->tv_nsec;                       \                        | 15116    17
   166       |                if ((vvp)->tv_nsec < 0) {                               \                        | 15117    17
   167       |                        (vvp)->tv_sec--;                                \                        | 15118    17
   168       |                        (vvp)->tv_nsec += 1000000000;                   \                        | 15119    17
   169       |                }                                                       \                        | 15120    17
   170       |        } while (0)                                                                              | 15121    17
   171       |                                                                                                 | 15122    17
   172       |/* Operations on timevals. */                                                                    | 15123    17
   173       |                                                                                                 | 15124    17
   174       |#define timevalclear(tvp)               ((tvp)->tv_sec = (tvp)->tv_usec = 0)                     | 15125    17
   175       |#define timevalisset(tvp)               ((tvp)->tv_sec || (tvp)->tv_usec)                        | 15126    17
   176       |#define timevalcmp(tvp, uvp, cmp)                                       \                        | 15127    17
   177       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        | 15128    17
   178       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        | 15129    17
   179       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   | 15130    17
   180       |                                                                                                 | 15131    17
   181       |/* timevaladd and timevalsub are not inlined */                                                  | 15132    17
   182       |                                                                                                 | 15133    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   292


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   183       |#endif /* _KERNEL */                                                                             | 15134    17
   184       |                                                                                                 | 15135    17
   185       |#ifndef _KERNEL                 /* NetBSD/OpenBSD compatible interfaces */                       | 15136    17
   186       |                                                                                                 | 15137    17
   187       |#define timerclear(tvp)         ((tvp)->tv_sec = (tvp)->tv_usec = 0)                             | 15138    17
   188       |#define timerisset(tvp)         ((tvp)->tv_sec || (tvp)->tv_usec)                                | 15139    17
   189       |#define timercmp(tvp, uvp, cmp)                                 \                                | 15140    17
   190       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        | 15141    17
   191       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        | 15142    17
   192       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   | 15143    17
   193       |#define timeradd(tvp, uvp, vvp)                                         \                        | 15144    17
   194       |        do {                                                            \                        | 15145    17
   195       |                (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec;          \                        | 15146    17
   196       |                (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec;       \                        | 15147    17
   197       |                if ((vvp)->tv_usec >= 1000000) {                        \                        | 15148    17
   198       |                        (vvp)->tv_sec++;                                \                        | 15149    17
   199       |                        (vvp)->tv_usec -= 1000000;                      \                        | 15150    17
   200       |                }                                                       \                        | 15151    17
   201       |        } while (0)                                                                              | 15152    17
   202       |#define timersub(tvp, uvp, vvp)                                         \                        | 15153    17
   203       |        do {                                                            \                        | 15154    17
   204       |                (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec;          \                        | 15155    17
   205       |                (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec;       \                        | 15156    17
   206       |                if ((vvp)->tv_usec < 0) {                               \                        | 15157    17
   207       |                        (vvp)->tv_sec--;                                \                        | 15158    17
   208       |                        (vvp)->tv_usec += 1000000;                      \                        | 15159    17
   209       |                }                                                       \                        | 15160    17
   210       |        } while (0)                                                                              | 15161    17
   211       |#endif                                                                                           | 15162    17
   212       |                                                                                                 | 15163    17
   213       |/*                                                                                               | 15164    17
   214       | * Names of the interval timers, and structure                                                   | 15165    17
   215       | * defining a timer setting.                                                                     | 15166    17
   216       | */                                                                                              | 15167    17
   217       |#define ITIMER_REAL     0                                                                        | 15168    17
   218       |#define ITIMER_VIRTUAL  1                                                                        | 15169    17
   219       |#define ITIMER_PROF     2                                                                        | 15170    17
   220       |                                                                                                 | 15171    17
   221       |struct itimerval {                                                                               | 15172    17
   222       |        struct  timeval it_interval;    /* timer interval */                                     | 15173    17
   223       |        struct  timeval it_value;       /* current value */                                      | 15174    17
   224       |};                                                                                               | 15175    17
   225       |                                                                                                 | 15176    17
   226       |/*                                                                                               | 15177    17
   227       | * Getkerninfo clock information structure                                                       | 15178    17
   228       | */                                                                                              | 15179    17
   229       |struct clockinfo {                                                                               | 15180    17
   230       |        int     hz;             /* clock frequency */                                            | 15181    17
   231       |        int     tick;           /* micro-seconds per hz tick */                                  | 15182    17
   232       |        int     spare;                                                                           | 15183    17
   233       |        int     stathz;         /* statistics clock frequency */                                 | 15184    17
   234       |        int     profhz;         /* profiling clock frequency */                                  | 15185    17
   235       |};                                                                                               | 15186    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   293


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   236       |                                                                                                 | 15187    17
   237       |/* These macros are also in time.h. */                                                           | 15188    17
   238       |#ifndef CLOCK_REALTIME                                                                           | 15189    17
   239       |#define CLOCK_REALTIME  0                                                                        | 15190    17
   240       |#if 0                                                                                            | 15191    17
   241       |  /* only CLOCK_REALTIME exists in this implementation */                                        | 15192    17
   242       |#define CLOCK_VIRTUAL   1                                                                        | 15193    17
   243       |#define CLOCK_PROF      2                                                                        | 15194    17
   244       |#define CLOCK_MONOTONIC 4                                                                        | 15195    17
   245       |#endif                                                                                           | 15196    17
   246       |#endif                                                                                           | 15197    17
   247       |                                                                                                 | 15198    17
   248       |#ifndef TIMER_ABSTIME                                                                            | 15199    17
   249       |#define TIMER_RELTIME   0x0     /* relative timer */                                             | 15200    17
   250       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             | 15201    17
   251       |#endif                                                                                           | 15202    17
   252       |                                                                                                 | 15203    17
   253       |#ifdef _KERNEL                                                                                   | 15204    17
   254       |extern time_t   time_second;                                                                     | 15205    17
   255       |extern time_t   time_uptime;                                                                     | 15206    17
   256       |extern struct timeval boottime;                                                                  | 15207    17
   257       |                                                                                                 | 15208    17
   258       |/*                                                                                               | 15209    17
   259       | * Functions for looking at our clock: [get]{bin,nano,micro}[up]time()                           | 15210    17
   260       | *                                                                                               | 15211    17
   261       | * Functions without the "get" prefix returns the best timestamp                                 | 15212    17
   262       | * we can produce in the given format.                                                           | 15213    17
   263       | *                                                                                               | 15214    17
   264       | * "bin"   == struct bintime  == seconds + 64 bit fraction of seconds.                           | 15215    17
   265       | * "nano"  == struct timespec == seconds + nanoseconds.                                          | 15216    17
   266       | * "micro" == struct timeval  == seconds + microseconds.                                         | 15217    17
   267       | *                                                                                               | 15218    17
   268       | * Functions containing "up" returns time relative to boot and                                   | 15219    17
   269       | * should be used for calculating time intervals.                                                | 15220    17
   270       | *                                                                                               | 15221    17
   271       | * Functions without "up" returns GMT time.                                                      | 15222    17
   272       | *                                                                                               | 15223    17
   273       | * Functions with the "get" prefix returns a less precise result                                 | 15224    17
   274       | * much faster than the functions without "get" prefix and should                                | 15225    17
   275       | * be used where a precision of 10 msec is acceptable or where                                   | 15226    17
   276       | * performance is priority. (NB: "precision", _not_ "resolution" !)                              | 15227    17
   277       | *                                                                                               | 15228    17
   278       | */                                                                                              | 15229    17
   279       |                                                                                                 | 15230    17
   280       |void    binuptime(struct bintime *bt);                                                           | 15231    17
   281       |void    nanouptime(struct timespec *tsp);                                                        | 15232    17
   282       |void    microuptime(struct timeval *tvp);                                                        | 15233    17
   283       |                                                                                                 | 15234    17
   284       |void    bintime(struct bintime *bt);                                                             | 15235    17
   285       |void    nanotime(struct timespec *tsp);                                                          | 15236    17
   286       |void    microtime(struct timeval *tvp);                                                          | 15237    17
   287       |                                                                                                 | 15238    17
   288       |void    getbinuptime(struct bintime *bt);                                                        | 15239    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   294


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   289       |void    getnanouptime(struct timespec *tsp);                                                     | 15240    17
   290       |void    getmicrouptime(struct timeval *tvp);                                                     | 15241    17
   291       |                                                                                                 | 15242    17
   292       |void    getbintime(struct bintime *bt);                                                          | 15243    17
   293       |void    getnanotime(struct timespec *tsp);                                                       | 15244    17
   294       |void    getmicrotime(struct timeval *tvp);                                                       | 15245    17
   295       |                                                                                                 | 15246    17
   296       |/* Other functions */                                                                            | 15247    17
   297       |int     itimerdecr(struct itimerval *itp, int usec);                                             | 15248    17
   298       |int     itimerfix(struct timeval *tv);                                                           | 15249    17
   299       |int     ppsratecheck(struct timeval *, int *, int);                                              | 15250    17
   300       |int     ratecheck(struct timeval *, const struct timeval *);                                     | 15251    17
   301       |void    timevaladd(struct timeval *t1, const struct timeval *t2);                                | 15252    17
   302       |void    timevalsub(struct timeval *t1, const struct timeval *t2);                                | 15253    17
   303       |int     tvtohz(struct timeval *tv);                                                              | 15254    17
   304       |#else /* !_KERNEL */                                                                             | 15255    17
   305       |#include <time.h>                                                                                | 15256    17
   306       |                                                                                                 | 15257    17
   307       |#include <sys/cdefs.h>                                                                           | 15258    17
   308       |                                                                                                 | 15259    17
   309       |__BEGIN_DECLS                                                                                    | 15260    17
   310       |int     adjtime(const struct timeval *, struct timeval *);                                       | 15261    17
   311       |int     futimes(int, const struct timeval *);                                                    | 15262    17
   312       |#pragma map (getitimer, "@@GITMR")                                                               | 15263    17
   313       |int     getitimer(int, struct itimerval *);                                                      | 15264    17
   314       |#pragma map (gettimeofday,"GETTFD@Y")                                                            | 15265    17
   315       |int     gettimeofday(struct timeval *, struct timezone *);                                       | 15266    17
   316       |int     lutimes(const char *, const struct timeval *);                                           | 15267    17
   317       |#pragma map (setitimer, "@@SITMR")                                                               | 15268    17
   318       |int     setitimer(int, const struct itimerval *, struct itimerval *);                            | 15269    17
   319       |int     settimeofday(const struct timeval *, const struct timezone *);                           | 15270    17
   320       |int     utimes(const char *, const struct timeval *);                                            | 15271    17
   321       |__END_DECLS                                                                                      | 15272    17
   322       |                                                                                                 | 15273    17
   323       |#endif /* !_KERNEL */                                                                            | 15274    17
   324       |                                                                                                 | 15275    17
   325       |#endif /* !_SYS_TIME_H_ */                                                                       | 15276    17
   326       |#pragma pack(reset)                                                                              | 15277    17
    45       |#include <sys/signal.h>                                                                          | 15278    31
     1       |/* release 2.25.00 */                                                                            | 15279    32
     2       |#pragma pack()                                                                                   | 15280    32
     3       |/*-                                                                                              | 15281    32
     4       | * Copyright (c) 1982, 1986, 1989, 1991, 1993                                                    | 15282    32
     5       | *      The Regents of the University of California.  All rights reserved.                       | 15283    32
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 15284    32
     7       | * All or some portions of this file are derived from material licensed                          | 15285    32
     8       | * to the University of California by American Telephone and Telegraph                           | 15286    32
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 15287    32
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 15288    32
    11       | *                                                                                               | 15289    32
    12       | * Redistribution and use in source and binary forms, with or without                            | 15290    32
    13       | * modification, are permitted provided that the following conditions                            | 15291    32
    14       | * are met:                                                                                      | 15292    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   295


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    15       | * 1. Redistributions of source code must retain the above copyright                             | 15293    32
    16       | *    notice, this list of conditions and the following disclaimer.                              | 15294    32
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 15295    32
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 15296    32
    19       | *    documentation and/or other materials provided with the distribution.                       | 15297    32
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 15298    32
    21       | *    may be used to endorse or promote products derived from this software                      | 15299    32
    22       | *    without specific prior written permission.                                                 | 15300    32
    23       | *                                                                                               | 15301    32
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 15302    32
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 15303    32
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 15304    32
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 15305    32
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 15306    32
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 15307    32
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 15308    32
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 15309    32
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 15310    32
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 15311    32
    34       | * SUCH DAMAGE.                                                                                  | 15312    32
    35       | *                                                                                               | 15313    32
    36       | *      @(#)signal.h    8.4 (Berkeley) 5/4/95                                                    | 15314    32
    37       | * $FreeBSD: src/sys/sys/signal.h,v 1.45.8.1 2005/11/16 12:44:10 davidxu Exp $                   | 15315    32
    38       | */                                                                                              | 15316    32
    39       |                                                                                                 | 15317    32
    40       |#ifndef _SYS_SIGNAL_H_                                                                           | 15318    32
    41       |#define _SYS_SIGNAL_H_                                                                           | 15319    32
    42       |                                                                                                 | 15320    32
    43       |#include <sys/cdefs.h>                                                                           | 15321    32
     1       |/* release 2.25.00 */                                                                            | 15322     4
     2       |#pragma pack()                                                                                   | 15323     4
     3       |/*                                                                                               | 15324     4
     4       | * Copyright (c) 1991, 1993                                                                      | 15325     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 15326     4
     6       | *                                                                                               | 15327     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 15328     4
     8       | * Berkeley Software Design, Inc.                                                                | 15329     4
     9       | *                                                                                               | 15330     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 15331     4
    11       | * modification, are permitted provided that the following conditions                            | 15332     4
    12       | * are met:                                                                                      | 15333     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 15334     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 15335     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 15336     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 15337     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 15338     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 15339     4
    19       | *    must display the following acknowledgement:                                                | 15340     4
    20       | *      This product includes software developed by the University of                            | 15341     4
    21       | *      California, Berkeley and its contributors.                                               | 15342     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 15343     4
    23       | *    may be used to endorse or promote products derived from this software                      | 15344     4
    24       | *    without specific prior written permission.                                                 | 15345     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   296


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       | *                                                                                               | 15346     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 15347     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 15348     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 15349     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 15350     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 15351     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 15352     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 15353     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 15354     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 15355     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 15356     4
    36       | * SUCH DAMAGE.                                                                                  | 15357     4
    37       | *                                                                                               | 15358     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 15359     4
    39       | */                                                                                              | 15360     4
    40       |                                                                                                 | 15361     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 15362     4
    42       |#define _SYS_CDEFS_H_                                                                            | 15363     4
    43       |                                                                                                 | 15364     4
    44       |#if defined(__cplusplus)                                                                         | 15365     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 15366     4
    46       |#define __END_DECLS     }                                                                        | 15367     4
    47       |#else                                                                                            | 15368     4
    48       |#define __BEGIN_DECLS                                                                            | 15369     4
    49       |#define __END_DECLS                                                                              | 15370     4
    50       |#endif                                                                                           | 15371     4
    51       |                                                                                                 | 15372     4
    52       |/*                                                                                               | 15373     4
    53       | * This code has been put in place to help reduce the addition of                                | 15374     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 15375     4
    55       | * having a compiler-agnostic source tree.                                                       | 15376     4
    56       | */                                                                                              | 15377     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 15378     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 15379     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 15380     4
    60       |                                                                                                 | 15381     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 15382     4
    62       |                                                                                                 | 15383     4
    63       |                                                                                                 | 15384     4
    64       |/*                                                                                               | 15385     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 15386     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 15387     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 15388     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 15389     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 15390     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 15391     4
    71       | * this only works with ANSI C.                                                                  | 15392     4
    72       | *                                                                                               | 15393     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 15394     4
    74       | * first.  It is only available with ANSI C.                                                     | 15395     4
    75       | */                                                                                              | 15396     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 15397     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 15398     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   297


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 15399     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 15400     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 15401     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 15402     4
    82       |                                                                                                 | 15403     4
    83       |#define __const         const           /* define reserved names to standard */                  | 15404     4
    84       |#define __signed        signed                                                                   | 15405     4
    85       |#define __volatile      volatile                                                                 | 15406     4
    86       |#if defined(__cplusplus)                                                                         | 15407     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 15408     4
    88       |#else                                                                                            | 15409     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 15410     4
    90       |#endif /* !__cplusplus */                                                                        | 15411     4
    91       |                                                                                                 | 15412     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 15413     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 15414     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 15415     4
    95       |#define __STRING(x)     "x"                                                                      | 15416     4
    96       |                                                                                                 | 15417     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 15418     4
    98       |#define __inline                                                                                 | 15419     4
    99       |#define __signed                                                                                 | 15420     4
   100       |#define __volatile                                                                               | 15421     4
   101       |/*                                                                                               | 15422     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 15423     4
   103       | * deleted from the program and old programs will want them left alone.                          | 15424     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 15425     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 15426     4
   106       | */                                                                                              | 15427     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 15428     4
   108       |#define const                           /* delete ANSI C keywords */                             | 15429     4
   109       |#define inline                                                                                   | 15430     4
   110       |#define signed                                                                                   | 15431     4
   111       |#define volatile                                                                                 | 15432     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 15433     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 15434     4
   114       |                                                                                                 | 15435     4
   115       |/*                                                                                               | 15436     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 15437     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 15438     4
   118       | */                                                                                              | 15439     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 15440     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 15441     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 15442     4
   122       |#define __unused                                                                                 | 15443     4
   123       |#define __aligned(x)                                                                             | 15444     4
   124       |#define __section(x)                                                                             | 15445     4
   125       |#define __nonnull(x)                                                                             | 15446     4
   126       |#define __used                                                                                   | 15447     4
   127       |                                                                                                 | 15448     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 15449     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 15450     4
   130       |                                                                                                 | 15451     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   298


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   131       |#if __STDC_VERSION__ < 199901                                                                    | 15452     4
   132       |#define __func__  NULL                                                                           | 15453     4
   133       |#endif                                                                                           | 15454     4
   134       |                                                                                                 | 15455     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 15456     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 15457     4
   137       |#endif                                                                                           | 15458     4
   138       |                                                                                                 | 15459     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 15460     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 15461     4
   141       | **/                                                                                             | 15462     4
   142       |#ifndef __cplusplus                                                                              | 15463     4
   143       |#define __restrict __restrict__                                                                  | 15464     4
   144       |#else                                                                                            | 15465     4
   145       |/* Systems/C++ does not */                                                                       | 15466     4
   146       |#define __restrict                                                                               | 15467     4
   147       |#endif                                                                                           | 15468     4
   148       |                                                                                                 | 15469     4
   149       |/*                                                                                               | 15470     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 15471     4
   151       | */                                                                                              | 15472     4
   152       |#define __predict_true(exp)     (exp)                                                            | 15473     4
   153       |#define __predict_false(exp)    (exp)                                                            | 15474     4
   154       |                                                                                                 | 15475     4
   155       |                                                                                                 | 15476     4
   156       |/*                                                                                               | 15477     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 15478     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 15479     4
   159       | *                                                                                               | 15480     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 15481     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 15482     4
   162       | */                                                                                              | 15483     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 15484     4
   164       |#undef __offsetof                                                                                | 15485     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 15486     4
   166       |#endif                                                                                           | 15487     4
   167       |                                                                                                 | 15488     4
   168       |/*                                                                                               | 15489     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 15490     4
   170       | * or scanf-like arguments.                                                                      | 15491     4
   171       | */                                                                                              | 15492     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 15493     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 15494     4
   174       |#define __format_arg(fmtarg)                                                                     | 15495     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 15496     4
   176       |                                                                                                 | 15497     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 15498     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 15499     4
   179       |                                                                                                 | 15500     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 15501     4
   181       |#define __weak_reference(sym,alias)                                                              | 15502     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 15503     4
   183       |#define __warn_references(sym,msg)                                                               | 15504     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   299


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   184       |                                                                                                 | 15505     4
   185       | /* This places the string into the resulting object.  It should */                              | 15506     4
   186       | /* probably become #pragma ident */                                                             | 15507     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 15508     4
   188       |                                                                                                 | 15509     4
   189       |#ifndef __RCSID                                                                                  | 15510     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 15511     4
   191       |#endif                                                                                           | 15512     4
   192       |                                                                                                 | 15513     4
   193       |/*                                                                                               | 15514     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 15515     4
   195       | * Usage:                                                                                        | 15516     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 15517     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 15518     4
   198       | */                                                                                              | 15519     4
   199       |#ifndef __SYSCID                                                                                 | 15520     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 15521     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 15522     4
   202       |#else                                                                                            | 15523     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 15524     4
   204       |#endif                                                                                           | 15525     4
   205       |#endif                                                                                           | 15526     4
   206       |                                                                                                 | 15527     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 15528     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 15529     4
   209       |#endif                                                                                           | 15530     4
   210       |                                                                                                 | 15531     4
   211       |#ifndef __COPYRIGHT                                                                              | 15532     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 15533     4
   213       |#endif                                                                                           | 15534     4
   214       |                                                                                                 | 15535     4
   215       |                                                                                                 | 15536     4
   216       |#ifndef __DECONST                                                                                | 15537     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 15538     4
   218       |#endif                                                                                           | 15539     4
   219       |                                                                                                 | 15540     4
   220       |#ifndef __DEVOLATILE                                                                             | 15541     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 15542     4
   222       |#endif                                                                                           | 15543     4
   223       |                                                                                                 | 15544     4
   224       |#ifndef __DEQUALIFY                                                                              | 15545     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 15546     4
   226       |#endif                                                                                           | 15547     4
   227       |                                                                                                 | 15548     4
   228       |                                                                                                 | 15549     4
   229       |/*-                                                                                              | 15550     4
   230       | * The following definitions are an extension of the behavior originally                         | 15551     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 15552     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 15553     4
   233       | * header file is included.                                                                      | 15554     4
   234       | *                                                                                               | 15555     4
   235       | * Here's a quick run-down of the versions:                                                      | 15556     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 15557     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   300


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 15558     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 15559     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 15560     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 15561     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 15562     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 15563     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 15564     4
   244       | *                                                                                               | 15565     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 15566     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 15567     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 15568     4
   248       | *                                                                                               | 15569     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 15570     4
   250       | */                                                                                              | 15571     4
   251       |                                                                                                 | 15572     4
   252       |/*                                                                                               | 15573     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 15574     4
   254       | * available. Also make them available when requested so.                                        | 15575     4
   255       | */                                                                                              | 15576     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 15577     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 15578     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 15579     4
   259       |#define __DF_VISIBLE    1                                                                        | 15580     4
   260       |#else                                                                                            | 15581     4
   261       |#define __DF_VISIBLE    0                                                                        | 15582     4
   262       |#endif                                                                                           | 15583     4
   263       |                                                                                                 | 15584     4
   264       |/*-                                                                                              | 15585     4
   265       | * The following definitions are an extension of the behavior originally                         | 15586     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 15587     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 15588     4
   268       | * header file is included.                                                                      | 15589     4
   269       | *                                                                                               | 15590     4
   270       | * Here's a quick run-down of the versions:                                                      | 15591     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 15592     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 15593     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 15594     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 15595     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 15596     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 15597     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 15598     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 15599     4
   279       | *                                                                                               | 15600     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 15601     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 15602     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 15603     4
   283       | *                                                                                               | 15604     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 15605     4
   285       | */                                                                                              | 15606     4
   286       |                                                                                                 | 15607     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 15608     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 15609     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 15610     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   301


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   290       |#define _POSIX_C_SOURCE         199009                                                           | 15611     4
   291       |#endif                                                                                           | 15612     4
   292       |                                                                                                 | 15613     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 15614     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 15615     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 15616     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 15617     4
   297       |#endif                                                                                           | 15618     4
   298       |                                                                                                 | 15619     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 15620     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 15621     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 15622     4
   302       |#define __XSI_VISIBLE           700                                                              | 15623     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 15624     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 15625     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 15626     4
   306       |#define __XSI_VISIBLE           600                                                              | 15627     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 15628     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 15629     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 15630     4
   310       |#define __XSI_VISIBLE           500                                                              | 15631     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 15632     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 15633     4
   313       |#endif                                                                                           | 15634     4
   314       |#endif                                                                                           | 15635     4
   315       |                                                                                                 | 15636     4
   316       |/*                                                                                               | 15637     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 15638     4
   318       | * important.                                                                                    | 15639     4
   319       | */                                                                                              | 15640     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 15641     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 15642     4
   322       |#endif                                                                                           | 15643     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 15644     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 15645     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 15646     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 15647     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 15648     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 15649     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 15650     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 15651     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 15652     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 15653     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 15654     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 15655     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 15656     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 15657     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 15658     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 15659     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 15660     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 15661     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 15662     4
   342       |#else                                                                                            | 15663     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   302


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   343       |#define __POSIX_VISIBLE         198808                                                           | 15664     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 15665     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 15666     4
   346       |#else                                                                                            | 15667     4
   347       |/*-                                                                                              | 15668     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 15669     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 15670     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 15671     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 15672     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 15673     4
   353       | * a test program to print out the values.                                                       | 15674     4
   354       | *                                                                                               | 15675     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 15676     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 15677     4
   357       | * environment (and in fact we will never get here).                                             | 15678     4
   358       | */                                                                                              | 15679     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 15680     4
   360       |#define __POSIX_VISIBLE         0                                                                | 15681     4
   361       |#define __XSI_VISIBLE           0                                                                | 15682     4
   362       |#define __BSD_VISIBLE           0                                                                | 15683     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 15684     4
   364       |#define __EXT1_VISIBLE          0                                                                | 15685     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 15686     4
   366       |#define __POSIX_VISIBLE         0                                                                | 15687     4
   367       |#define __XSI_VISIBLE           0                                                                | 15688     4
   368       |#define __BSD_VISIBLE           0                                                                | 15689     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 15690     4
   370       |#define __EXT1_VISIBLE          0                                                                | 15691     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 15692     4
   372       |#define __POSIX_VISIBLE         0                                                                | 15693     4
   373       |#define __XSI_VISIBLE           0                                                                | 15694     4
   374       |#define __BSD_VISIBLE           0                                                                | 15695     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 15696     4
   376       |#define __EXT1_VISIBLE          0                                                                | 15697     4
   377       |#else                           /* Default environment: show everything. */                      | 15698     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 15699     4
   379       |#define __XSI_VISIBLE           700                                                              | 15700     4
   380       |#define __BSD_VISIBLE           1                                                                | 15701     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 15702     4
   382       |#define __EXT1_VISIBLE          1                                                                | 15703     4
   383       |#endif                                                                                           | 15704     4
   384       |#endif                                                                                           | 15705     4
   385       |                                                                                                 | 15706     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 15707     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 15708     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 15709     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 15710     4
   390       |#define __EXT1_VISIBLE          1                                                                | 15711     4
   391       |#else                                                                                            | 15712     4
   392       |#define __EXT1_VISIBLE          0                                                                | 15713     4
   393       |#endif                                                                                           | 15714     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 15715     4
   395       |                                                                                                 | 15716     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   303


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 15717     4
   397       |#define __NO_TLS 1                                                                               | 15718     4
   398       |#endif                                                                                           | 15719     4
   399       |                                                                                                 | 15720     4
   400       |                                                                                                 | 15721     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 15722     4
   402       |#define __FBSDID(x)                                                                              | 15723     4
   403       |                                                                                                 | 15724     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 15725     4
   405       |#pragma pack(reset)                                                                              | 15726     4
    44       |#include <sys/_types.h>                                                                          | 15727    32
     1       |/* release 2.25.00 */                                                                            | 15728     6
     2       |#pragma pack()                                                                                   | 15729     6
     3       |/*-                                                                                              | 15730     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 15731     6
     5       | * All rights reserved.                                                                          | 15732     6
     6       | *                                                                                               | 15733     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 15734     6
     8       | * modification, are permitted provided that the following conditions                            | 15735     6
     9       | * are met:                                                                                      | 15736     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 15737     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 15738     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 15739     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 15740     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 15741     6
    15       | *                                                                                               | 15742     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 15743     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 15744     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 15745     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 15746     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 15747     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 15748     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 15749     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 15750     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 15751     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 15752     6
    26       | * SUCH DAMAGE.                                                                                  | 15753     6
    27       | *                                                                                               | 15754     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 15755     6
    29       | */                                                                                              | 15756     6
    30       |                                                                                                 | 15757     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 15758     6
    32       |#define _SYS__TYPES_H_                                                                           | 15759     6
    33       |                                                                                                 | 15760     6
    34       |#include <sys/cdefs.h>                                                                           | 15761     6
    35       |#include <machine/_types.h>                                                                      | 15762     6
    36       |                                                                                                 | 15763     6
    37       |/*                                                                                               | 15764     6
    38       | * Standard type definitions.                                                                    | 15765     6
    39       | */                                                                                              | 15766     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 15767     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 15768     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 15769     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   304


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 15770     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 15771     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 15772     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 15773     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 15774     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 15775     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 15776     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 15777     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 15778     6
    52       |typedef int             __nl_item;                                                               | 15779     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 15780     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 15781     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 15782     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 15783     6
    57       |                                        /* signed, because of legacy code */                     | 15784     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 15785     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 15786     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 15787     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 15788     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 15789     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 15790     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 15791     6
    65       |                                                                                                 | 15792     6
    66       |/*                                                                                               | 15793     6
    67       | * Unusual type definitions.                                                                     | 15794     6
    68       | */                                                                                              | 15795     6
    69       |/*                                                                                               | 15796     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 15797     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 15798     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 15799     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 15800     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 15801     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 15802     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 15803     6
    77       | *                                                                                               | 15804     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 15805     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 15806     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 15807     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 15808     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 15809     6
    83       | */                                                                                              | 15810     6
    84       |#ifdef __cplusplus                                                                               | 15811     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 15812     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 15813     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 15814     6
    88       |#else                                                                                            | 15815     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 15816     6
    90       |#endif                                                                                           | 15817     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 15818     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 15819     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 15820     6
    94       |                                                                                                 | 15821     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 15822     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   305


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 15823     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 15824     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 15825     6
    99       |#endif                                                                                           | 15826     6
   100       |                                                                                                 | 15827     6
   101       |#if !defined(__cplusplus)                                                                        | 15828     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 15829     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 15830     6
   104       |#endif                                                                                           | 15831     6
   105       |                                                                                                 | 15832     6
   106       |                                                                                                 | 15833     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 15834     6
   108       |                                                                                                 | 15835     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 15836     6
   110       |                                                                                                 | 15837     6
   111       |/*                                                                                               | 15838     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 15839     6
   113       | * stream conversions.                                                                           | 15840     6
   114       | */                                                                                              | 15841     6
   115       |typedef union {                                                                                  | 15842     6
   116       |        char            __mbstate8[128];                                                         | 15843     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 15844     6
   118       |} __mbstate_t;                                                                                   | 15845     6
   119       |                                                                                                 | 15846     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 15847     6
   121       |#pragma pack(reset)                                                                              | 15848     6
    45       |#include <sys/_sigset.h>                                                                         | 15849    32
     1       |/* release 2.25.00 */                                                                            | 15850    10
     2       |#pragma pack()                                                                                   | 15851    10
     3       |/*-                                                                                              | 15852    10
     4       | * Copyright (c) 1982, 1986, 1989, 1991, 1993                                                    | 15853    10
     5       | *      The Regents of the University of California.  All rights reserved.                       | 15854    10
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 15855    10
     7       | * All or some portions of this file are derived from material licensed                          | 15856    10
     8       | * to the University of California by American Telephone and Telegraph                           | 15857    10
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 15858    10
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 15859    10
    11       | *                                                                                               | 15860    10
    12       | * Redistribution and use in source and binary forms, with or without                            | 15861    10
    13       | * modification, are permitted provided that the following conditions                            | 15862    10
    14       | * are met:                                                                                      | 15863    10
    15       | * 1. Redistributions of source code must retain the above copyright                             | 15864    10
    16       | *    notice, this list of conditions and the following disclaimer.                              | 15865    10
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 15866    10
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 15867    10
    19       | *    documentation and/or other materials provided with the distribution.                       | 15868    10
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 15869    10
    21       | *    may be used to endorse or promote products derived from this software                      | 15870    10
    22       | *    without specific prior written permission.                                                 | 15871    10
    23       | *                                                                                               | 15872    10
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 15873    10
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 15874    10
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 15875    10
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   306


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 15876    10
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 15877    10
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 15878    10
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 15879    10
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 15880    10
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 15881    10
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 15882    10
    34       | * SUCH DAMAGE.                                                                                  | 15883    10
    35       | *                                                                                               | 15884    10
    36       | *      @(#)signal.h    8.4 (Berkeley) 5/4/95                                                    | 15885    10
    37       | * $FreeBSD: src/sys/sys/_sigset.h,v 1.36 2005/01/07 02:29:23 imp Exp $                          | 15886    10
    38       | */                                                                                              | 15887    10
    39       |                                                                                                 | 15888    10
    40       |#ifndef _SYS__SIGSET_H_                                                                          | 15889    10
    41       |#define _SYS__SIGSET_H_                                                                          | 15890    10
    42       |                                                                                                 | 15891    10
    43       |/*                                                                                               | 15892    10
    44       | * sigset_t macros.                                                                              | 15893    10
    45       | */                                                                                              | 15894    10
    46       |#define _SIG_WORDS      4                                                                        | 15895    10
    47       |#define _SIG_MAXSIG     128                                                                      | 15896    10
    48       |#define _SIG_IDX(sig)   ((sig) - 1)                                                              | 15897    10
    49       |#define _SIG_WORD(sig)  (_SIG_IDX(sig) >> 5)                                                     | 15898    10
    50       |#define _SIG_BIT(sig)   (1 << (_SIG_IDX(sig) & 31))                                              | 15899    10
    51       |#define _SIG_VALID(sig) ((sig) <= _SIG_MAXSIG && (sig) > 0)                                      | 15900    10
    52       |                                                                                                 | 15901    10
    53       |typedef struct __sigset {                                                                        | 15902    10
    54       |        __uint32_t __bits[_SIG_WORDS];                                                           | 15903    10
    55       |} __sigset_t;                                                                                    | 15904    10
    56       |                                                                                                 | 15905    10
    57       |#if defined(_KERNEL) && defined(COMPAT_43)                                                       | 15906    10
    58       |typedef unsigned int osigset_t;                                                                  | 15907    10
    59       |#endif                                                                                           | 15908    10
    60       |                                                                                                 | 15909    10
    61       |#endif /* !_SYS__SIGSET_H_ */                                                                    | 15910    10
    62       |#pragma pack(reset)                                                                              | 15911    10
    46       |                                                                                                 | 15912    32
    47       |#include <machine/signal.h>     /* sig_atomic_t; trap codes; sigcontext */                       | 15913    32
     1       |/* release 2.25.00 */                                                                            | 15914    33
     2       |#pragma pack()                                                                                   | 15915    33
     3       |/*-                                                                                              | 15916    33
     4       | * Copyright (c) 1986, 1989, 1991, 1993                                                          | 15917    33
     5       | *      The Regents of the University of California.  All rights reserved.                       | 15918    33
     6       | *                                                                                               | 15919    33
     7       | * Redistribution and use in source and binary forms, with or without                            | 15920    33
     8       | * modification, are permitted provided that the following conditions                            | 15921    33
     9       | * are met:                                                                                      | 15922    33
    10       | * 1. Redistributions of source code must retain the above copyright                             | 15923    33
    11       | *    notice, this list of conditions and the following disclaimer.                              | 15924    33
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 15925    33
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 15926    33
    14       | *    documentation and/or other materials provided with the distribution.                       | 15927    33
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 15928    33
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   307


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    16       | *    may be used to endorse or promote products derived from this software                      | 15929    33
    17       | *    without specific prior written permission.                                                 | 15930    33
    18       | *                                                                                               | 15931    33
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 15932    33
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 15933    33
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 15934    33
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 15935    33
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 15936    33
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 15937    33
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 15938    33
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 15939    33
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 15940    33
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 15941    33
    29       | * SUCH DAMAGE.                                                                                  | 15942    33
    30       | *                                                                                               | 15943    33
    31       | *      @(#)signal.h    8.1 (Berkeley) 6/11/93                                                   | 15944    33
    32       | */                                                                                              | 15945    33
    33       |                                                                                                 | 15946    33
    34       |#ifndef _MACHINE_SIGNAL_H_                                                                       | 15947    33
    35       |#define _MACHINE_SIGNAL_H_                                                                       | 15948    33
    36       |                                                                                                 | 15949    33
    37       |#include <sys/cdefs.h>                                                                           | 15950    33
     1       |/* release 2.25.00 */                                                                            | 15951     4
     2       |#pragma pack()                                                                                   | 15952     4
     3       |/*                                                                                               | 15953     4
     4       | * Copyright (c) 1991, 1993                                                                      | 15954     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 15955     4
     6       | *                                                                                               | 15956     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 15957     4
     8       | * Berkeley Software Design, Inc.                                                                | 15958     4
     9       | *                                                                                               | 15959     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 15960     4
    11       | * modification, are permitted provided that the following conditions                            | 15961     4
    12       | * are met:                                                                                      | 15962     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 15963     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 15964     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 15965     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 15966     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 15967     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 15968     4
    19       | *    must display the following acknowledgement:                                                | 15969     4
    20       | *      This product includes software developed by the University of                            | 15970     4
    21       | *      California, Berkeley and its contributors.                                               | 15971     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 15972     4
    23       | *    may be used to endorse or promote products derived from this software                      | 15973     4
    24       | *    without specific prior written permission.                                                 | 15974     4
    25       | *                                                                                               | 15975     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 15976     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 15977     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 15978     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 15979     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 15980     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 15981     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   308


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 15982     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 15983     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 15984     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 15985     4
    36       | * SUCH DAMAGE.                                                                                  | 15986     4
    37       | *                                                                                               | 15987     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 15988     4
    39       | */                                                                                              | 15989     4
    40       |                                                                                                 | 15990     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 15991     4
    42       |#define _SYS_CDEFS_H_                                                                            | 15992     4
    43       |                                                                                                 | 15993     4
    44       |#if defined(__cplusplus)                                                                         | 15994     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 15995     4
    46       |#define __END_DECLS     }                                                                        | 15996     4
    47       |#else                                                                                            | 15997     4
    48       |#define __BEGIN_DECLS                                                                            | 15998     4
    49       |#define __END_DECLS                                                                              | 15999     4
    50       |#endif                                                                                           | 16000     4
    51       |                                                                                                 | 16001     4
    52       |/*                                                                                               | 16002     4
    53       | * This code has been put in place to help reduce the addition of                                | 16003     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 16004     4
    55       | * having a compiler-agnostic source tree.                                                       | 16005     4
    56       | */                                                                                              | 16006     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 16007     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 16008     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 16009     4
    60       |                                                                                                 | 16010     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 16011     4
    62       |                                                                                                 | 16012     4
    63       |                                                                                                 | 16013     4
    64       |/*                                                                                               | 16014     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 16015     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 16016     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 16017     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 16018     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 16019     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 16020     4
    71       | * this only works with ANSI C.                                                                  | 16021     4
    72       | *                                                                                               | 16022     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 16023     4
    74       | * first.  It is only available with ANSI C.                                                     | 16024     4
    75       | */                                                                                              | 16025     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 16026     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 16027     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 16028     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 16029     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 16030     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 16031     4
    82       |                                                                                                 | 16032     4
    83       |#define __const         const           /* define reserved names to standard */                  | 16033     4
    84       |#define __signed        signed                                                                   | 16034     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   309


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    85       |#define __volatile      volatile                                                                 | 16035     4
    86       |#if defined(__cplusplus)                                                                         | 16036     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 16037     4
    88       |#else                                                                                            | 16038     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 16039     4
    90       |#endif /* !__cplusplus */                                                                        | 16040     4
    91       |                                                                                                 | 16041     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 16042     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 16043     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 16044     4
    95       |#define __STRING(x)     "x"                                                                      | 16045     4
    96       |                                                                                                 | 16046     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 16047     4
    98       |#define __inline                                                                                 | 16048     4
    99       |#define __signed                                                                                 | 16049     4
   100       |#define __volatile                                                                               | 16050     4
   101       |/*                                                                                               | 16051     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 16052     4
   103       | * deleted from the program and old programs will want them left alone.                          | 16053     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 16054     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 16055     4
   106       | */                                                                                              | 16056     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 16057     4
   108       |#define const                           /* delete ANSI C keywords */                             | 16058     4
   109       |#define inline                                                                                   | 16059     4
   110       |#define signed                                                                                   | 16060     4
   111       |#define volatile                                                                                 | 16061     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 16062     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 16063     4
   114       |                                                                                                 | 16064     4
   115       |/*                                                                                               | 16065     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 16066     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 16067     4
   118       | */                                                                                              | 16068     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 16069     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 16070     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 16071     4
   122       |#define __unused                                                                                 | 16072     4
   123       |#define __aligned(x)                                                                             | 16073     4
   124       |#define __section(x)                                                                             | 16074     4
   125       |#define __nonnull(x)                                                                             | 16075     4
   126       |#define __used                                                                                   | 16076     4
   127       |                                                                                                 | 16077     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 16078     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 16079     4
   130       |                                                                                                 | 16080     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 16081     4
   132       |#define __func__  NULL                                                                           | 16082     4
   133       |#endif                                                                                           | 16083     4
   134       |                                                                                                 | 16084     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 16085     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 16086     4
   137       |#endif                                                                                           | 16087     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   310


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   138       |                                                                                                 | 16088     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 16089     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 16090     4
   141       | **/                                                                                             | 16091     4
   142       |#ifndef __cplusplus                                                                              | 16092     4
   143       |#define __restrict __restrict__                                                                  | 16093     4
   144       |#else                                                                                            | 16094     4
   145       |/* Systems/C++ does not */                                                                       | 16095     4
   146       |#define __restrict                                                                               | 16096     4
   147       |#endif                                                                                           | 16097     4
   148       |                                                                                                 | 16098     4
   149       |/*                                                                                               | 16099     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 16100     4
   151       | */                                                                                              | 16101     4
   152       |#define __predict_true(exp)     (exp)                                                            | 16102     4
   153       |#define __predict_false(exp)    (exp)                                                            | 16103     4
   154       |                                                                                                 | 16104     4
   155       |                                                                                                 | 16105     4
   156       |/*                                                                                               | 16106     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 16107     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 16108     4
   159       | *                                                                                               | 16109     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 16110     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 16111     4
   162       | */                                                                                              | 16112     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 16113     4
   164       |#undef __offsetof                                                                                | 16114     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 16115     4
   166       |#endif                                                                                           | 16116     4
   167       |                                                                                                 | 16117     4
   168       |/*                                                                                               | 16118     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 16119     4
   170       | * or scanf-like arguments.                                                                      | 16120     4
   171       | */                                                                                              | 16121     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 16122     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 16123     4
   174       |#define __format_arg(fmtarg)                                                                     | 16124     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 16125     4
   176       |                                                                                                 | 16126     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 16127     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 16128     4
   179       |                                                                                                 | 16129     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 16130     4
   181       |#define __weak_reference(sym,alias)                                                              | 16131     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 16132     4
   183       |#define __warn_references(sym,msg)                                                               | 16133     4
   184       |                                                                                                 | 16134     4
   185       | /* This places the string into the resulting object.  It should */                              | 16135     4
   186       | /* probably become #pragma ident */                                                             | 16136     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 16137     4
   188       |                                                                                                 | 16138     4
   189       |#ifndef __RCSID                                                                                  | 16139     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 16140     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   311


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   191       |#endif                                                                                           | 16141     4
   192       |                                                                                                 | 16142     4
   193       |/*                                                                                               | 16143     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 16144     4
   195       | * Usage:                                                                                        | 16145     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 16146     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 16147     4
   198       | */                                                                                              | 16148     4
   199       |#ifndef __SYSCID                                                                                 | 16149     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 16150     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 16151     4
   202       |#else                                                                                            | 16152     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 16153     4
   204       |#endif                                                                                           | 16154     4
   205       |#endif                                                                                           | 16155     4
   206       |                                                                                                 | 16156     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 16157     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 16158     4
   209       |#endif                                                                                           | 16159     4
   210       |                                                                                                 | 16160     4
   211       |#ifndef __COPYRIGHT                                                                              | 16161     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 16162     4
   213       |#endif                                                                                           | 16163     4
   214       |                                                                                                 | 16164     4
   215       |                                                                                                 | 16165     4
   216       |#ifndef __DECONST                                                                                | 16166     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 16167     4
   218       |#endif                                                                                           | 16168     4
   219       |                                                                                                 | 16169     4
   220       |#ifndef __DEVOLATILE                                                                             | 16170     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 16171     4
   222       |#endif                                                                                           | 16172     4
   223       |                                                                                                 | 16173     4
   224       |#ifndef __DEQUALIFY                                                                              | 16174     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 16175     4
   226       |#endif                                                                                           | 16176     4
   227       |                                                                                                 | 16177     4
   228       |                                                                                                 | 16178     4
   229       |/*-                                                                                              | 16179     4
   230       | * The following definitions are an extension of the behavior originally                         | 16180     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 16181     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 16182     4
   233       | * header file is included.                                                                      | 16183     4
   234       | *                                                                                               | 16184     4
   235       | * Here's a quick run-down of the versions:                                                      | 16185     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 16186     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 16187     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 16188     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 16189     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 16190     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 16191     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 16192     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 16193     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   312


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   244       | *                                                                                               | 16194     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 16195     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 16196     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 16197     4
   248       | *                                                                                               | 16198     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 16199     4
   250       | */                                                                                              | 16200     4
   251       |                                                                                                 | 16201     4
   252       |/*                                                                                               | 16202     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 16203     4
   254       | * available. Also make them available when requested so.                                        | 16204     4
   255       | */                                                                                              | 16205     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 16206     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 16207     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 16208     4
   259       |#define __DF_VISIBLE    1                                                                        | 16209     4
   260       |#else                                                                                            | 16210     4
   261       |#define __DF_VISIBLE    0                                                                        | 16211     4
   262       |#endif                                                                                           | 16212     4
   263       |                                                                                                 | 16213     4
   264       |/*-                                                                                              | 16214     4
   265       | * The following definitions are an extension of the behavior originally                         | 16215     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 16216     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 16217     4
   268       | * header file is included.                                                                      | 16218     4
   269       | *                                                                                               | 16219     4
   270       | * Here's a quick run-down of the versions:                                                      | 16220     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 16221     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 16222     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 16223     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 16224     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 16225     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 16226     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 16227     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 16228     4
   279       | *                                                                                               | 16229     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 16230     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 16231     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 16232     4
   283       | *                                                                                               | 16233     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 16234     4
   285       | */                                                                                              | 16235     4
   286       |                                                                                                 | 16236     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 16237     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 16238     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 16239     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 16240     4
   291       |#endif                                                                                           | 16241     4
   292       |                                                                                                 | 16242     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 16243     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 16244     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 16245     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 16246     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   313


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   297       |#endif                                                                                           | 16247     4
   298       |                                                                                                 | 16248     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 16249     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 16250     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 16251     4
   302       |#define __XSI_VISIBLE           700                                                              | 16252     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 16253     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 16254     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 16255     4
   306       |#define __XSI_VISIBLE           600                                                              | 16256     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 16257     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 16258     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 16259     4
   310       |#define __XSI_VISIBLE           500                                                              | 16260     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 16261     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 16262     4
   313       |#endif                                                                                           | 16263     4
   314       |#endif                                                                                           | 16264     4
   315       |                                                                                                 | 16265     4
   316       |/*                                                                                               | 16266     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 16267     4
   318       | * important.                                                                                    | 16268     4
   319       | */                                                                                              | 16269     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 16270     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 16271     4
   322       |#endif                                                                                           | 16272     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 16273     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 16274     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 16275     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 16276     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 16277     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 16278     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 16279     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 16280     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 16281     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 16282     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 16283     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 16284     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 16285     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 16286     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 16287     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 16288     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 16289     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 16290     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 16291     4
   342       |#else                                                                                            | 16292     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 16293     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 16294     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 16295     4
   346       |#else                                                                                            | 16296     4
   347       |/*-                                                                                              | 16297     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 16298     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 16299     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   314


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 16300     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 16301     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 16302     4
   353       | * a test program to print out the values.                                                       | 16303     4
   354       | *                                                                                               | 16304     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 16305     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 16306     4
   357       | * environment (and in fact we will never get here).                                             | 16307     4
   358       | */                                                                                              | 16308     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 16309     4
   360       |#define __POSIX_VISIBLE         0                                                                | 16310     4
   361       |#define __XSI_VISIBLE           0                                                                | 16311     4
   362       |#define __BSD_VISIBLE           0                                                                | 16312     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 16313     4
   364       |#define __EXT1_VISIBLE          0                                                                | 16314     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 16315     4
   366       |#define __POSIX_VISIBLE         0                                                                | 16316     4
   367       |#define __XSI_VISIBLE           0                                                                | 16317     4
   368       |#define __BSD_VISIBLE           0                                                                | 16318     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 16319     4
   370       |#define __EXT1_VISIBLE          0                                                                | 16320     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 16321     4
   372       |#define __POSIX_VISIBLE         0                                                                | 16322     4
   373       |#define __XSI_VISIBLE           0                                                                | 16323     4
   374       |#define __BSD_VISIBLE           0                                                                | 16324     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 16325     4
   376       |#define __EXT1_VISIBLE          0                                                                | 16326     4
   377       |#else                           /* Default environment: show everything. */                      | 16327     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 16328     4
   379       |#define __XSI_VISIBLE           700                                                              | 16329     4
   380       |#define __BSD_VISIBLE           1                                                                | 16330     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 16331     4
   382       |#define __EXT1_VISIBLE          1                                                                | 16332     4
   383       |#endif                                                                                           | 16333     4
   384       |#endif                                                                                           | 16334     4
   385       |                                                                                                 | 16335     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 16336     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 16337     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 16338     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 16339     4
   390       |#define __EXT1_VISIBLE          1                                                                | 16340     4
   391       |#else                                                                                            | 16341     4
   392       |#define __EXT1_VISIBLE          0                                                                | 16342     4
   393       |#endif                                                                                           | 16343     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 16344     4
   395       |                                                                                                 | 16345     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 16346     4
   397       |#define __NO_TLS 1                                                                               | 16347     4
   398       |#endif                                                                                           | 16348     4
   399       |                                                                                                 | 16349     4
   400       |                                                                                                 | 16350     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 16351     4
   402       |#define __FBSDID(x)                                                                              | 16352     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   315


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   403       |                                                                                                 | 16353     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 16354     4
   405       |#pragma pack(reset)                                                                              | 16355     4
    38       |#include <sys/_sigset.h>                                                                         | 16356    33
     1       |/* release 2.25.00 */                                                                            | 16357    10
     2       |#pragma pack()                                                                                   | 16358    10
     3       |/*-                                                                                              | 16359    10
     4       | * Copyright (c) 1982, 1986, 1989, 1991, 1993                                                    | 16360    10
     5       | *      The Regents of the University of California.  All rights reserved.                       | 16361    10
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 16362    10
     7       | * All or some portions of this file are derived from material licensed                          | 16363    10
     8       | * to the University of California by American Telephone and Telegraph                           | 16364    10
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 16365    10
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 16366    10
    11       | *                                                                                               | 16367    10
    12       | * Redistribution and use in source and binary forms, with or without                            | 16368    10
    13       | * modification, are permitted provided that the following conditions                            | 16369    10
    14       | * are met:                                                                                      | 16370    10
    15       | * 1. Redistributions of source code must retain the above copyright                             | 16371    10
    16       | *    notice, this list of conditions and the following disclaimer.                              | 16372    10
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 16373    10
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 16374    10
    19       | *    documentation and/or other materials provided with the distribution.                       | 16375    10
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 16376    10
    21       | *    may be used to endorse or promote products derived from this software                      | 16377    10
    22       | *    without specific prior written permission.                                                 | 16378    10
    23       | *                                                                                               | 16379    10
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 16380    10
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 16381    10
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 16382    10
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 16383    10
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 16384    10
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 16385    10
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 16386    10
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 16387    10
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 16388    10
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 16389    10
    34       | * SUCH DAMAGE.                                                                                  | 16390    10
    35       | *                                                                                               | 16391    10
    36       | *      @(#)signal.h    8.4 (Berkeley) 5/4/95                                                    | 16392    10
    37       | * $FreeBSD: src/sys/sys/_sigset.h,v 1.36 2005/01/07 02:29:23 imp Exp $                          | 16393    10
    38       | */                                                                                              | 16394    10
    39       |                                                                                                 | 16395    10
    40       |#ifndef _SYS__SIGSET_H_                                                                          | 16396    10
    41       |#define _SYS__SIGSET_H_                                                                          | 16397    10
    42       |                                                                                                 | 16398    10
    43       |/*                                                                                               | 16399    10
    44       | * sigset_t macros.                                                                              | 16400    10
    45       | */                                                                                              | 16401    10
    46       |#define _SIG_WORDS      4                                                                        | 16402    10
    47       |#define _SIG_MAXSIG     128                                                                      | 16403    10
    48       |#define _SIG_IDX(sig)   ((sig) - 1)                                                              | 16404    10
    49       |#define _SIG_WORD(sig)  (_SIG_IDX(sig) >> 5)                                                     | 16405    10
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   316


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    50       |#define _SIG_BIT(sig)   (1 << (_SIG_IDX(sig) & 31))                                              | 16406    10
    51       |#define _SIG_VALID(sig) ((sig) <= _SIG_MAXSIG && (sig) > 0)                                      | 16407    10
    52       |                                                                                                 | 16408    10
    53       |typedef struct __sigset {                                                                        | 16409    10
    54       |        __uint32_t __bits[_SIG_WORDS];                                                           | 16410    10
    55       |} __sigset_t;                                                                                    | 16411    10
    56       |                                                                                                 | 16412    10
    57       |#if defined(_KERNEL) && defined(COMPAT_43)                                                       | 16413    10
    58       |typedef unsigned int osigset_t;                                                                  | 16414    10
    59       |#endif                                                                                           | 16415    10
    60       |                                                                                                 | 16416    10
    61       |#endif /* !_SYS__SIGSET_H_ */                                                                    | 16417    10
    62       |#pragma pack(reset)                                                                              | 16418    10
    39       |                                                                                                 | 16419    33
    40       |/*                                                                                               | 16420    33
    41       | * Machine-dependent signal definitions                                                          | 16421    33
    42       | */                                                                                              | 16422    33
    43       |                                                                                                 | 16423    33
    44       |typedef int sig_atomic_t;                                                                        | 16424    33
    45       |                                                                                                 | 16425    33
    46       |#if __XSI_VISIBLE                                                                                | 16426    33
    47       |/*                                                                                               | 16427    33
    48       | *  The absolute minimum stack size for a Dignus stack                                           | 16428    33
    49       | * is the size of the DSAB control block, plus the size                                          | 16429    33
    50       | * of the stack overflow area (1024) plus 4 times the                                            | 16430    33
    51       | * size of the minimum save area.   For 64 bit that                                              | 16431    33
    52       | * would be:                                                                                     | 16432    33
    53       | *   ((((0xf8 + 1024) + (0xa8*4))+7)&~7) = 1944                                                  | 16433    33
    54       | * and for 31-bit it would be:                                                                   | 16434    33
    55       | *   ((((0x80 + 1024) + (0x50*4))+7)&~7) = 1472                                                  | 16435    33
    56       | * This is generally way too small to do anything                                                | 16436    33
    57       | * beyond an empty function; so we set the smallest                                              | 16437    33
    58       | * size to 1 page (4k).                                                                          | 16438    33
    59       | */                                                                                              | 16439    33
    59       +                                                                                                 + 16439    33
    60       |#if __SYSC_64BIT__                                                                               | 16440    33
    61       |#define MINSIGSTKSZ     (4096)                                                                   | 16441    33
    62       |#else                                                                                            | 16442    33
    63       |#define MINSIGSTKSZ     (4096)                                                                   | 16443    33
    64       |#endif                                                                                           | 16444    33
    65       |#endif                                                                                           | 16445    33
    66       |                                                                                                 | 16446    33
    66       +                                                                                                 + 16446    33
    67       |#if __BSD_VISIBLE                                                                                | 16447    33
    68       |#include <machine/trap.h>       /* codes for SIGILL, SIGFPE */                                   | 16448    33
     1       |/* release 2.25.00 */                                                                            | 16449    34
     1       +                                                                                                 + 16449    34
     2       |#pragma pack()                                                                                   | 16450    34
     3       |#ifndef _MACHINE_TRAP_H_                                                                         | 16451    34
     4       |#define _MACHINE_TRAP_H_                                                                         | 16452    34
     5       |                                                                                                 | 16453    34
     6       |  /* Hardware trap codes (we have none for now) */                                               | 16454    34
     7       |                                                                                                 | 16455    34
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   317


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     8       |#endif /* !_MACHINE_TRAP_H_ */                                                                   | 16456    34
     9       |#pragma pack(reset)                                                                              | 16457    34
    69       |#endif /* __BSD_VISIBLE */                                                                       | 16458    33
    70       |                                                                                                 | 16459    33
    71       |#endif /* !_MACHINE_SIGNAL_H_ */                                                                 | 16460    33
    72       |#pragma pack(reset)                                                                              | 16461    33
    48       |                                                                                                 | 16462    32
    49       |/*                                                                                               | 16463    32
    50       | * System defined signals.                                                                       | 16464    32
    51       | */                                                                                              | 16465    32
    52       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16466    32
    53       |#define SIGHUP          1       /* hangup */                                                     | 16467    32
    54       |#endif                                                                                           | 16468    32
    55       |#define SIGINT          2       /* interrupt */                                                  | 16469    32
    56       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16470    32
    57       |#define SIGQUIT         3       /* quit */                                                       | 16471    32
    58       |#endif                                                                                           | 16472    32
    59       |#define SIGILL          4       /* illegal instr. (not reset when caught) */                     | 16473    32
    60       |#if __XSI_VISIBLE                                                                                | 16474    32
    61       |#define SIGTRAP         5       /* trace trap (not reset when caught) */                         | 16475    32
    62       |#endif                                                                                           | 16476    32
    63       |#define SIGABRT         6       /* abort() */                                                    | 16477    32
    64       |#if __BSD_VISIBLE                                                                                | 16478    32
    65       |#define SIGIOT          SIGABRT /* compatibility */                                              | 16479    32
    66       |#define SIGEMT          7       /* EMT instruction */                                            | 16480    32
    67       |#endif                                                                                           | 16481    32
    68       |#define SIGFPE          8       /* floating point exception */                                   | 16482    32
    69       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16483    32
    70       |#define SIGKILL         9       /* kill (cannot be caught or ignored) */                         | 16484    32
    71       |#endif                                                                                           | 16485    32
    72       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 16486    32
    73       |#define SIGBUS          10      /* bus error */                                                  | 16487    32
    74       |#endif                                                                                           | 16488    32
    75       |#define SIGSEGV         11      /* segmentation violation */                                     | 16489    32
    76       |#if __BSD_VISIBLE                                                                                | 16490    32
    77       |#define SIGSYS          12      /* non-existent system call invoked */                           | 16491    32
    78       |#endif                                                                                           | 16492    32
    79       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16493    32
    80       |#define SIGPIPE         13      /* write on a pipe with no one to read it */                     | 16494    32
    81       |#define SIGALRM         14      /* alarm clock */                                                | 16495    32
    82       |#endif                                                                                           | 16496    32
    83       |#define SIGTERM         15      /* software termination signal from kill */                      | 16497    32
    84       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 16498    32
    85       |#define SIGURG          16      /* urgent condition on IO channel */                             | 16499    32
    86       |#endif                                                                                           | 16500    32
    87       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16501    32
    88       |#define SIGSTOP         17      /* sendable stop signal not from tty */                          | 16502    32
    89       |#define SIGTSTP         18      /* stop signal from tty */                                       | 16503    32
    90       |#define SIGCONT         19      /* continue a stopped process */                                 | 16504    32
    91       |#define SIGCHLD         20      /* to parent on child stop or exit */                            | 16505    32
    92       |#define SIGTTIN         21      /* to readers pgrp upon background tty read */                   | 16506    32
    93       |#define SIGTTOU         22      /* like TTIN if (tp->t_local&LTOSTOP) */                         | 16507    32
    94       |#endif                                                                                           | 16508    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   318


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    95       |#if __BSD_VISIBLE                                                                                | 16509    32
    96       |#define SIGIO           23      /* input/output possible signal */                               | 16510    32
    97       |#endif                                                                                           | 16511    32
    98       |#if __XSI_VISIBLE                                                                                | 16512    32
    99       |#define SIGXCPU         24      /* exceeded CPU time limit */                                    | 16513    32
   100       |#define SIGXFSZ         25      /* exceeded file size limit */                                   | 16514    32
   101       |#define SIGVTALRM       26      /* virtual time alarm */                                         | 16515    32
   102       |#define SIGPROF         27      /* profiling time alarm */                                       | 16516    32
   103       |#endif                                                                                           | 16517    32
   104       |#if __BSD_VISIBLE                                                                                | 16518    32
   105       |#define SIGWINCH        28      /* window size changes */                                        | 16519    32
   106       |#define SIGINFO         29      /* information request */                                        | 16520    32
   107       |#endif                                                                                           | 16521    32
   108       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16522    32
   109       |#define SIGUSR1         30      /* user defined signal 1 */                                      | 16523    32
   110       |#define SIGUSR2         31      /* user defined signal 2 */                                      | 16524    32
   111       |#endif                                                                                           | 16525    32
   112       |#if __BSD_VISIBLE                                                                                | 16526    32
   113       |#define SIGTHR          32      /* reserved by thread library. */                                | 16527    32
   114       |#define SIGLWP          SIGTHR                                                                   | 16528    32
   115       |#endif                                                                                           | 16529    32
   116       |                                                                                                 | 16530    32
   116       +                                                                                                 + 16530    32
   117       |#define SIGDANGER       33                                                                       | 16531    32
   118       |#define SIGTHSTOP       34                                                                       | 16532    32
   119       |#define SIGTHCONT       35                                                                       | 16533    32
   120       |#define SIGTRACE        37                                                                       | 16534    32
   121       |#define SIGDCE          38                                                                       | 16535    32
   122       |#define SIGDUMP         39                                                                       | 16536    32
   123       |#define SIGABND         50                                                                       | 16537    32
   124       |#define SIGPOLL         51                                                                       | 16538    32
   125       |#define SIGIOERR        52                                                                       | 16539    32
   126       |                                                                                                 | 16540    32
   127       |                                                                                                 | 16541    32
   128       |/*                                                                                               | 16542    32
   129       | * XXX missing SIGRTMIN, SIGRTMAX.                                                               | 16543    32
   130       | */                                                                                              | 16544    32
   131       |                                                                                                 | 16545    32
   132       |#define SIG_MVSSIGSETUP_PTHREAD    64  /* 'special' signal value used during */                  | 16546    32
   133       |                            /* the call to __mvssigsetup() in POSIX     */                       | 16547    32
   134       |                            /* signal initialization indicating the     */                       | 16548    32
   135       |                            /* SIR is to receive pthread cancel/quiesce */                       | 16549    32
   136       |                            /* events.  We want to "reserve" this signal*/                       | 16550    32
   137       |                            /* number to avoid any accidental reuse in  */                       | 16551    32
   138       |                            /* the future.  This is not a "real" signal.*/                       | 16552    32
   139       |                                                                                                 | 16553    32
   140       |#define SIG_DFL         ((__sighandler_t *)0)                                                    | 16554    32
   141       |#define SIG_IGN         ((__sighandler_t *)1)                                                    | 16555    32
   142       |#define SIG_ERR         ((__sighandler_t *)-1)                                                   | 16556    32
   143       |/*                                                                                               | 16557    32
   144       | * XXX missing SIG_HOLD.                                                                         | 16558    32
   145       | */                                                                                              | 16559    32
   146       |                                                                                                 | 16560    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   319


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   147       |/*-                                                                                              | 16561    32
   148       | * Type of a signal handling function.                                                           | 16562    32
   149       | *                                                                                               | 16563    32
   150       | * Language spec sez signal handlers take exactly one arg, even though we                        | 16564    32
   151       | * actually supply three.  Ugh!                                                                  | 16565    32
   152       | *                                                                                               | 16566    32
   153       | * We don't try to hide the difference by leaving out the args because                           | 16567    32
   154       | * that would cause warnings about conformant programs.  Nonconformant                           | 16568    32
   155       | * programs can avoid the warnings by casting to (__sighandler_t *) or                           | 16569    32
   156       | * sig_t before calling signal() or assigning to sa_handler or sv_handler.                       | 16570    32
   157       | *                                                                                               | 16571    32
   158       | * The kernel should reverse the cast before calling the function.  It                           | 16572    32
   159       | * has no way to do this, but on most machines 1-arg and 3-arg functions                         | 16573    32
   160       | * have the same calling protocol so there is no problem in practice.                            | 16574    32
   161       | * A bit in sa_flags could be used to specify the number of args.                                | 16575    32
   162       | */                                                                                              | 16576    32
   163       |typedef void __sighandler_t(int);                                                                | 16577    32
   164       |                                                                                                 | 16578    32
   165       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16579    32
   166       |#ifndef _SIGSET_T_DECLARED                                                                       | 16580    32
   167       |#define _SIGSET_T_DECLARED                                                                       | 16581    32
   168       |typedef __sigset_t      sigset_t;                                                                | 16582    32
   169       |#endif                                                                                           | 16583    32
   170       |#endif                                                                                           | 16584    32
   171       |                                                                                                 | 16585    32
   171       +                                                                                                 + 16585    32
   172       |#if __POSIX_VISIBLE >= 199309 || __XSI_VISIBLE >= 500                                            | 16586    32
   173       |union sigval {                                                                                   | 16587    32
   173       +union sigval {                                                                                   + 16587    32
   174       |        /* Members as suggested by Annex C of POSIX 1003.1b. */                                  | 16588    32
   175       |        int     sigval_int;                                                                      | 16589    32
   176       |        void    *sigval_ptr;                                                                     | 16590    32
   177       |};                                                                                               | 16591    32
   178       |#endif                                                                                           | 16592    32
   179       |                                                                                                 | 16593    32
   180       |#if __POSIX_VISIBLE >= 199309                                                                    | 16594    32
   181       |struct sigevent {                                                                                | 16595    32
   181       +struct sigevent {                                                                                + 16595    32
   182       |        int     sigev_notify;           /* Notification type */                                  | 16596    32
   183       |        union {                                                                                  | 16597    32
   184       |                int     __sigev_signo;  /* Signal number */                                      | 16598    32
   185       |                int     __sigev_notify_kqueue;                                                   | 16599    32
   186       |        } __sigev_u;                                                                             | 16600    32
   187       |        union sigval sigev_value;       /* Signal value */                                       | 16601    32
   188       |/*                                                                                               | 16602    32
   189       | * XXX missing sigev_notify_function, sigev_notify_attributes.                                   | 16603    32
   190       | */                                                                                              | 16604    32
   191       |};                                                                                               | 16605    32
   192       |#define sigev_signo             __sigev_u.__sigev_signo                                          | 16606    32
   193       |#if __BSD_VISIBLE                                                                                | 16607    32
   194       |#define sigev_notify_kqueue     __sigev_u.__sigev_notify_kqueue                                  | 16608    32
   195       |#endif                                                                                           | 16609    32
   196       |                                                                                                 | 16610    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   320


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   196       +                                                                                                 + 16610    32
   197       |#define SIGEV_NONE      0               /* No async notification */                              | 16611    32
   198       |#define SIGEV_SIGNAL    1               /* Generate a queued signal */                           | 16612    32
   199       |#if __BSD_VISIBLE                                                                                | 16613    32
   200       |#define SIGEV_KEVENT    3               /* Generate a kevent */                                  | 16614    32
   201       |#endif                                                                                           | 16615    32
   202       |/*                                                                                               | 16616    32
   203       | * XXX missing SIGEV_THREAD.                                                                     | 16617    32
   204       | */                                                                                              | 16618    32
   204       +                                                                                                 + 16618    32
   205       |#endif /* __POSIX_VISIBLE >= 199309 */                                                           | 16619    32
   206       |                                                                                                 | 16620    32
   207       |#if __POSIX_VISIBLE >= 199309 || __XSI_VISIBLE                                                   | 16621    32
   208       |typedef struct __siginfo {                                                                       | 16622    32
   208       +typedef struct __siginfo {                                                                       + 16622    32
   209       |        int     si_signo;               /* signal number */                                      | 16623    32
   210       |        int     si_errno;               /* errno association */                                  | 16624    32
   211       |        /*                                                                                       | 16625    32
   212       |         * Cause of signal, one of the SI_ macros or signal-specific                             | 16626    32
   213       |         * values, i.e. one of the FPE_... values for SIGFPE.                                    | 16627    32
   214       |         */                                                                                      | 16628    32
   215       |        int     si_code;                /* signal code */                                        | 16629    32
   216       |        __pid_t si_pid;                 /* sending process */                                    | 16630    32
   217       |        __uid_t si_uid;                 /* sender's ruid */                                      | 16631    32
   218       |        int     si_status;              /* exit value */                                         | 16632    32
   219       |        void    *si_addr;               /* faulting instruction */                               | 16633    32
   220       |        union sigval si_value;          /* signal value */                                       | 16634    32
   221       |        long    si_band;                /* band event for SIGPOLL */                             | 16635    32
   222       |        int     __spare__[7];           /* gimme some slack */                                   | 16636    32
   223       |} siginfo_t;                                                                                     | 16637    32
   224       |                                                                                                 | 16638    32
   225       | /* si_code values */                                                                            | 16639    32
   226       |  /* Definitions for SIGILL */                                                                   | 16640    32
   227       |#define ILL_ILLOPC     11  /* Illegal opcode */                                                  | 16641    32
   228       |#define ILL_ILLOPN     12  /* Illegal operand */                                                 | 16642    32
   229       |#define ILL_ILLADR     13  /* Illegal addressing mode */                                         | 16643    32
   230       |#define ILL_ILLTRP     14  /* Illegal trap */                                                    | 16644    32
   231       |#define ILL_PRVOPC     15  /* Privileged opcode */                                               | 16645    32
   232       |#define ILL_PRVREG     16  /* Privileged register */                                             | 16646    32
   233       |#define ILL_COPROC     17  /* Coprocessor error */                                               | 16647    32
   234       |#define ILL_BADSTK     18  /* Internal stack error */                                            | 16648    32
   235       |#define ILL_EXECUTE    19  /* Execute exception */                                               | 16649    32
   236       |#define ILL_ILLSPEC    20  /* Specification exception */                                         | 16650    32
   237       |                                                                                                 | 16651    32
   238       |   /* Definitions for SIGFPE */                                                                  | 16652    32
   239       |                                                                                                 | 16653    32
   240       |   /* portable macros for SIGFPE */                                                              | 16654    32
   241       |#define FPE_INTDIV     31  /* integer divide by zero */                                          | 16655    32
   242       |#define FPE_INTOVF     32  /* integer overflow */                                                | 16656    32
   243       |#define FPE_FLTDIV     33  /* floating point divide by zero */                                   | 16657    32
   244       |#define FPE_FLTOVF     34  /* floating point overflow */                                         | 16658    32
   245       |#define FPE_FLTUND     35  /* floating point underflow */                                        | 16659    32
   246       |#define FPE_FLTRES     36  /* floating point inexact result */                                   | 16660    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   321


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   247       |#define FPE_FLTINV     37  /* invalid floating point operation */                                | 16661    32
   248       |#define FPE_FLTSUB     38  /* subscript out of range */                                          | 16662    32
   249       |                                                                                                 | 16663    32
   250       |  /* non-portable */                                                                             | 16664    32
   251       |#define FPE_FLTSIG     39  /* Significance exception */                                          | 16665    32
   252       |#define FPE_DECDATA    40  /* Data exception */                                                  | 16666    32
   253       |#define FPE_DECDIV     41  /* Decimal divide exception */                                        | 16667    32
   254       |#define FPE_DECOVF     42  /* Decimal overflow exception */                                      | 16668    32
   255       |#define FPE_UNKWN      43  /* undetermined  exception      */                                    | 16669    32
   256       |#define FPE_CTDXC      44  /* Compare-and-Trap exception */                                      | 16670    32
   257       |                                                                                                 | 16671    32
   258       |  /* SIGSEGV values */                                                                           | 16672    32
   259       |                                                                                                 | 16673    32
   260       |#define SEGV_MAPERR    51  /* address not mapping to an object */                                | 16674    32
   261       |#define SEGV_ACCERR    52  /* Invalid permissions for mapp'd objects */                          | 16675    32
   262       |#define SEGV_PROTECT   53  /* protection exception */                                            | 16676    32
   263       |#define SEGV_ADDRESS   54  /* addressing exception */                                            | 16677    32
   264       |#define _SEGV_SOFTLIMIT 10059 /* softlimit overflow */                                           | 16678    32
   265       |                                                                                                 | 16679    32
   266       |  /* SIGBUS values */                                                                            | 16680    32
   267       |                                                                                                 | 16681    32
   268       |#define BUS_ADRALN     71  /* Invalid address alignment */                                       | 16682    32
   269       |#define BUS_ADRERR     72  /* Non-existent physical address */                                   | 16683    32
   270       |#define BUS_OBJERR     73  /* Object specific hardware error */                                  | 16684    32
   271       |                                                                                                 | 16685    32
   272       |  /* SIGTRAP values */                                                                           | 16686    32
   273       |#define TRAP_BRKPT     91  /* Breakpoint */                                                      | 16687    32
   274       |#define TRAP_TRACE     92  /* Trace trap */                                                      | 16688    32
   275       |                                                                                                 | 16689    32
   276       |  /* SIGCHLD values */                                                                           | 16690    32
   277       |#define CLD_EXITED    101  /* Child process has exited */                                        | 16691    32
   278       |#define CLD_KILLED    102  /* Child was killed */                                                | 16692    32
   279       |#define CLD_DUMPED    103  /* Child terminated abnormally */                                     | 16693    32
   280       |#define CLD_TRAPPED   104  /* Traced child process encountered a trap */                         | 16694    32
   281       |#define CLD_STOPPED   105  /* Child is stopped */                                                | 16695    32
   282       |#define CLD_CONTINUED 106  /* Child is continuing */                                             | 16696    32
   283       |                                                                                                 | 16697    32
   284       |  /* SIGPOLL values */                                                                           | 16698    32
   285       |#define POLL_IN       111  /* Input data is available */                                         | 16699    32
   286       |#define POLL_OUT      112  /* Output buffers are available */                                    | 16700    32
   287       |#define POLL_MSG      113  /* Input messages are available */                                    | 16701    32
   288       |#define POLL_ERR      114  /* I/O error */                                                       | 16702    32
   289       |#define POLL_PRI      115  /* High priority input is available */                                | 16703    32
   290       |#define POLL_HUP      116  /* Device has been disconnected */                                    | 16704    32
   291       |                                                                                                 | 16705    32
   292       |  /* SIGABND values */                                                                           | 16706    32
   293       |#define _ABND_REAL    170  /* "true" ABEND, not software generated */                            | 16707    32
   294       |                           /*  via kill() */                                                     | 16708    32
   295       |#endif                                                                                           | 16709    32
   296       |                                                                                                 | 16710    32
   297       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16711    32
   298       |struct __siginfo;                                                                                | 16712    32
   298       +struct __siginfo;                                                                                + 16712    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   322


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   299       |                                                                                                 | 16713    32
   300       |/*                                                                                               | 16714    32
   301       | * Signal vector "template" used in sigaction call.                                              | 16715    32
   302       | */                                                                                              | 16716    32
   303       |struct sigaction {                                                                               | 16717    32
   304       |        union {                                                                                  | 16718    32
   305       |                void    (*__sa_handler)(int);                                                    | 16719    32
   306       |                void    (*__sa_sigaction)(int, struct __siginfo *, void *);                      | 16720    32
   307       |        } __sigaction_u;                /* signal handler */                                     | 16721    32
   308       |        int     sa_flags;               /* see signal options below */                           | 16722    32
   309       |        sigset_t sa_mask;               /* signal mask to apply */                               | 16723    32
   310       |};                                                                                               | 16724    32
   311       |                                                                                                 | 16725    32
   312       |#define sa_handler      __sigaction_u.__sa_handler                                               | 16726    32
   313       |#endif                                                                                           | 16727    32
   314       |                                                                                                 | 16728    32
   315       |#if __XSI_VISIBLE                                                                                | 16729    32
   316       |/* If SA_SIGINFO is set, sa_sigaction must be used instead of sa_handler. */                     | 16730    32
   316       +                                                                                                 + 16730    32
   317       |#define sa_sigaction    __sigaction_u.__sa_sigaction                                             | 16731    32
   318       |#endif                                                                                           | 16732    32
   319       |                                                                                                 | 16733    32
   320       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16734    32
   321       |#define SA_NOCLDSTOP    0x0008  /* do not generate SIGCHLD on child stop */                      | 16735    32
   322       |#endif /* __POSIX_VISIBLE || __XSI_VISIBLE */                                                    | 16736    32
   323       |                                                                                                 | 16737    32
   323       +                                                                                                 + 16737    32
   324       |#if __XSI_VISIBLE                                                                                | 16738    32
   325       |#define SA_ONSTACK      0x0001  /* take signal on signal stack */                                | 16739    32
   326       |#define SA_RESTART      0x0002  /* restart system call on signal return */                       | 16740    32
   327       |#define SA_RESETHAND    0x0004  /* reset to SIG_DFL when taking signal */                        | 16741    32
   328       |#define SA_NODEFER      0x0010  /* don't mask the signal we're delivering */                     | 16742    32
   329       |#define SA_NOCLDWAIT    0x0020  /* don't keep zombies around */                                  | 16743    32
   330       |#define SA_SIGINFO      0x0040  /* signal handler with SA_SIGINFO args */                        | 16744    32
   331       |#endif                                                                                           | 16745    32
   332       |                                                                                                 | 16746    32
   332       +                                                                                                 + 16746    32
   333       |#if __BSD_VISIBLE                                                                                | 16747    32
   334       |#define NSIG            32      /* number of old signals (counting 0) */                         | 16748    32
   335       |#endif                                                                                           | 16749    32
   336       |                                                                                                 | 16750    32
   336       +                                                                                                 + 16750    32
   337       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16751    32
   338       |#define SI_QUEUE        176                                                                      | 16752    32
   339       |#define SI_ASYNCIO      175                                                                      | 16753    32
   340       |#if 0                                                                                            | 16754    32
   341       |  /* IBM doesn't define these for LE */                                                          | 16755    32
   342       |  /* so for compatibility we don't   */                                                          | 16756    32
   343       |  /* either.  To avoid confusion     */                                                          | 16757    32
   344       |  /* between processes sending       */                                                          | 16758    32
   345       |  /* signals between Dignus and LE   */                                                          | 16759    32
   346       |  /* programs. (we don't want to set */                                                          | 16760    32
   347       |  /* SI_USER for a code sent to an   */                                                          | 16761    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   323


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   348       |  /* LE program, because it can't    */                                                          | 16762    32
   349       |  /* handle it - for example.)       */                                                          | 16763    32
   350       |                                                                                                 | 16764    32
   351       |  /* Also - note that the BPX signal */                                                          | 16765    32
   352       |  /* interface requires si_code      */                                                          | 16766    32
   353       |  /* values to fit in an (unsigned   */                                                          | 16767    32
   354       |  /* short) - so these BSD values    */                                                          | 16768    32
   355       |  /* don't fit. */                                                                               | 16769    32
   356       |   #define      SI_USER         0x10001                                                          | 16770    32
   357       |   #define      SI_TIMER        0x10003                                                          | 16771    32
   358       |   #define      SI_MESGQ        0x10005                                                          | 16772    32
   359       |#endif                                                                                           | 16773    32
   360       |#endif                                                                                           | 16774    32
   361       |#if __BSD_VISIBLE                                                                                | 16775    32
   362       |#define SI_UNDEFINED    0                                                                        | 16776    32
   363       |#endif                                                                                           | 16777    32
   364       |                                                                                                 | 16778    32
   364       +                                                                                                 + 16778    32
   365       |#if __BSD_VISIBLE                                                                                | 16779    32
   366       |typedef __sighandler_t  *sig_t; /* type of pointer to a signal function */                       | 16780    32
   366       +typedef __sighandler_t  *sig_t;                                                                  + 16780    32
   367       |typedef void __siginfohandler_t(int, struct __siginfo *, void *);                                | 16781    32
   368       |#endif                                                                                           | 16782    32
   369       |                                                                                                 | 16783    32
   370       |#if __XSI_VISIBLE                                                                                | 16784    32
   371       |/*                                                                                               | 16785    32
   372       | * Structure used in sigaltstack call.                                                           | 16786    32
   373       | */                                                                                              | 16787    32
   373       +                                                                                                 + 16787    32
   374       |#if __BSD_VISIBLE                                                                                | 16788    32
   375       |typedef struct sigaltstack {                                                                     | 16789    32
   375       +typedef struct sigaltstack {                                                                     + 16789    32
   376       |#else                                                                                            | 16790    32
   377       |typedef struct {                                                                                 | 16791    32
   378       |#endif                                                                                           | 16792    32
   379       |        char    *ss_sp;                 /* signal stack base */                                  | 16793    32
   380       |        __size_t ss_size;               /* signal stack length */                                | 16794    32
   381       |        int     ss_flags;               /* SS_DISABLE and/or SS_ONSTACK */                       | 16795    32
   382       |} stack_t;                                                                                       | 16796    32
   383       |                                                                                                 | 16797    32
   384       |#define SS_ONSTACK      0x0001  /* take signal on alternate stack */                             | 16798    32
   385       |#define SS_DISABLE      0x0004  /* disable taking signals on alternate stack */                  | 16799    32
   386       |#define SIGSTKSZ        (MINSIGSTKSZ + 32768)   /* recommended stack size */                     | 16800    32
   387       |#endif                                                                                           | 16801    32
   388       |                                                                                                 | 16802    32
   389       |#if __BSD_VISIBLE                                                                                | 16803    32
   390       |/*                                                                                               | 16804    32
   391       | * 4.3 compatibility:                                                                            | 16805    32
   392       | * Signal vector "template" used in sigvec call.                                                 | 16806    32
   393       | */                                                                                              | 16807    32
   393       +                                                                                                 + 16807    32
   394       |struct sigvec {                                                                                  | 16808    32
   395       |        __sighandler_t *sv_handler;     /* signal handler */                                     | 16809    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   324


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   396       |        int     sv_mask;                /* signal mask to apply */                               | 16810    32
   397       |        int     sv_flags;               /* see signal options below */                           | 16811    32
   398       |};                                                                                               | 16812    32
   399       |                                                                                                 | 16813    32
   400       |#define SV_ONSTACK      SA_ONSTACK                                                               | 16814    32
   401       |#define SV_INTERRUPT    SA_RESTART      /* same bit, opposite sense */                           | 16815    32
   402       |#define SV_RESETHAND    SA_RESETHAND                                                             | 16816    32
   403       |#define SV_NODEFER      SA_NODEFER                                                               | 16817    32
   404       |#define SV_NOCLDSTOP    SA_NOCLDSTOP                                                             | 16818    32
   405       |#define SV_SIGINFO      SA_SIGINFO                                                               | 16819    32
   406       |#define sv_onstack      sv_flags        /* isn't compatibility wonderful! */                     | 16820    32
   407       |#endif                                                                                           | 16821    32
   408       |                                                                                                 | 16822    32
   409       |/* Keep this in one place only */                                                                | 16823    32
   410       |#if defined(_KERNEL) && defined(COMPAT_43) && \                                                  | 16824    32
   411       |    !defined(__i386__) && !defined(__alpha__)                                                    | 16825    32
   412       |struct osigcontext {                                                                             | 16826    32
   413       |        int _not_used;                                                                           | 16827    32
   414       |};                                                                                               | 16828    32
   415       |#endif                                                                                           | 16829    32
   416       |                                                                                                 | 16830    32
   417       |#if __XSI_VISIBLE                                                                                | 16831    32
   418       |/*                                                                                               | 16832    32
   419       | * Structure used in sigstack call.                                                              | 16833    32
   420       | */                                                                                              | 16834    32
   420       +                                                                                                 + 16834    32
   421       |struct sigstack {                                                                                | 16835    32
   422       |        /* XXX ss_sp's type should be `void *'. */                                               | 16836    32
   423       |        char    *ss_sp;                 /* signal stack pointer */                               | 16837    32
   424       |        int     ss_onstack;             /* current status */                                     | 16838    32
   425       |};                                                                                               | 16839    32
   426       |#endif                                                                                           | 16840    32
   427       |                                                                                                 | 16841    32
   428       |#if __BSD_VISIBLE || __POSIX_VISIBLE > 0 && __POSIX_VISIBLE <= 200112                            | 16842    32
   429       |/*                                                                                               | 16843    32
   430       | * Macro for converting signal number to a mask suitable for                                     | 16844    32
   431       | * sigblock().                                                                                   | 16845    32
   432       | */                                                                                              | 16846    32
   432       +                                                                                                 + 16846    32
   433       |#define sigmask(m)      (1 << ((m)-1))                                                           | 16847    32
   434       |#endif                                                                                           | 16848    32
   435       |                                                                                                 | 16849    32
   436       |#if __BSD_VISIBLE                                                                                | 16850    32
   437       |#define BADSIG          SIG_ERR                                                                  | 16851    32
   438       |#endif                                                                                           | 16852    32
   439       |                                                                                                 | 16853    32
   439       +                                                                                                 + 16853    32
   440       |#if __POSIX_VISIBLE || __XSI_VISIBLE                                                             | 16854    32
   441       |/*                                                                                               | 16855    32
   442       | * Flags for sigprocmask:                                                                        | 16856    32
   443       | */                                                                                              | 16857    32
   443       +                                                                                                 + 16857    32
   444       |#define SIG_BLOCK       1       /* block specified signal set */                                 | 16858    32
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   325


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   445       |#define SIG_UNBLOCK     2       /* unblock specified signal set */                               | 16859    32
   446       |#define SIG_SETMASK     3       /* set specified signal set */                                   | 16860    32
   447       |#endif                                                                                           | 16861    32
   448       |                                                                                                 | 16862    32
   449       |/*                                                                                               | 16863    32
   450       | * For historical reasons; programs expect signal's return value to be                           | 16864    32
   451       | * defined by <sys/signal.h>.                                                                    | 16865    32
   452       | */                                                                                              | 16866    32
   453       |__BEGIN_DECLS                                                                                    | 16867    32
   453       +                                                                                                 + 16867    32
   454       |__sighandler_t *signal(int, __sighandler_t *);                                                   | 16868    32
   455       |  /* returns ABEND/REASON codes for SIGABND handlers */                                          | 16869    32
   456       |int __abendcode(void);                                                                           | 16870    32
   457       |int __rsncode(void);                                                                             | 16871    32
   458       |__END_DECLS                                                                                      | 16872    32
   458       +                                                                                                 + 16872    32
   459       |                                                                                                 | 16873    32
   460       |#endif /* !_SYS_SIGNAL_H_ */                                                                     | 16874    32
   461       |#pragma pack(reset)                                                                              | 16875    32
    46       |#include <limits.h>                                                                              | 16876    31
     1       |/* release 2.25.00 */                                                                            | 16877    25
     2       |#pragma pack()                                                                                   | 16878    25
     3       |/*-                                                                                              | 16879    25
     4       | * Copyright (c) 1988, 1993                                                                      | 16880    25
     5       | *      The Regents of the University of California.  All rights reserved.                       | 16881    25
     6       | *                                                                                               | 16882    25
     7       | * Redistribution and use in source and binary forms, with or without                            | 16883    25
     8       | * modification, are permitted provided that the following conditions                            | 16884    25
     9       | * are met:                                                                                      | 16885    25
    10       | * 1. Redistributions of source code must retain the above copyright                             | 16886    25
    11       | *    notice, this list of conditions and the following disclaimer.                              | 16887    25
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 16888    25
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 16889    25
    14       | *    documentation and/or other materials provided with the distribution.                       | 16890    25
    15       | * 3. All advertising materials mentioning features or use of this software                      | 16891    25
    16       | *    must display the following acknowledgement:                                                | 16892    25
    17       | *      This product includes software developed by the University of                            | 16893    25
    18       | *      California, Berkeley and its contributors.                                               | 16894    25
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 16895    25
    20       | *    may be used to endorse or promote products derived from this software                      | 16896    25
    21       | *    without specific prior written permission.                                                 | 16897    25
    22       | *                                                                                               | 16898    25
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 16899    25
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 16900    25
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 16901    25
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 16902    25
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 16903    25
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 16904    25
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 16905    25
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 16906    25
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 16907    25
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 16908    25
    33       | * SUCH DAMAGE.                                                                                  | 16909    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   326


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    34       | *                                                                                               | 16910    25
    35       | *      @(#)limits.h    8.2 (Berkeley) 1/4/94                                                    | 16911    25
    36       | */                                                                                              | 16912    25
    37       |                                                                                                 | 16913    25
    38       |#ifndef _LIMITS_H_                                                                               | 16914    25
    39       |#define _LIMITS_H_                                                                               | 16915    25
    40       |                                                                                                 | 16916    25
    41       |#include <sys/cdefs.h>                                                                           | 16917    25
    42       |                                                                                                 | 16918    25
    43       |#if __POSIX_VISIBLE                                                                              | 16919    25
    44       |#define _POSIX_ARG_MAX          4096                                                             | 16920    25
    45       |#define _POSIX_CHILD_MAX        25                                                               | 16921    25
    46       |#define _POSIX_LINK_MAX         8                                                                | 16922    25
    47       |#define _POSIX_MAX_CANON        255                                                              | 16923    25
    48       |#define _POSIX_MAX_INPUT        255                                                              | 16924    25
    49       |#define _POSIX_NAME_MAX         14                                                               | 16925    25
    50       |#define _POSIX_NGROUPS_MAX      8                                                                | 16926    25
    51       |#define _POSIX_OPEN_MAX         20                                                               | 16927    25
    52       |#define _POSIX_PATH_MAX         256                                                              | 16928    25
    53       |#define _POSIX_PIPE_BUF         512                                                              | 16929    25
    54       |#define _POSIX_SSIZE_MAX        32767                                                            | 16930    25
    55       |#define _POSIX_STREAM_MAX       8                                                                | 16931    25
    56       |#define _POSIX_TZNAME_MAX       6                                                                | 16932    25
    57       |                                                                                                 | 16933    25
    58       |#define BC_BASE_MAX                99   /* max ibase/obase values in bc(1) */                    | 16934    25
    59       |#define BC_DIM_MAX               2048   /* max array elements in bc(1) */                        | 16935    25
    60       |#define BC_SCALE_MAX               99   /* max scale value in bc(1) */                           | 16936    25
    61       |#define BC_STRING_MAX            1000   /* max const string length in bc(1) */                   | 16937    25
    62       |#define COLL_WEIGHTS_MAX            0   /* max weights for order keyword */                      | 16938    25
    63       |#define EXPR_NEST_MAX              32   /* max expressions nested in expr(1) */                  | 16939    25
    64       |#define LINE_MAX                 2048   /* max bytes in an input line */                         | 16940    25
    65       |#define RE_DUP_MAX                255   /* max RE's in interval notation */                      | 16941    25
    66       |                                                                                                 | 16942    25
    67       |#define _POSIX2_BC_BASE_MAX     99                                                               | 16943    25
    68       |#define _POSIX2_BC_DIM_MAX      2048                                                             | 16944    25
    69       |#define _POSIX2_BC_SCALE_MAX    99                                                               | 16945    25
    70       |#define _POSIX2_BC_STRING_MAX   1000                                                             | 16946    25
    71       |#define _POSIX2_EQUIV_CLASS_MAX 2                                                                | 16947    25
    72       |#define _POSIX2_EXPR_NEST_MAX   32                                                               | 16948    25
    73       |#define _POSIX2_LINE_MAX        2048                                                             | 16949    25
    74       |#define _POSIX2_RE_DUP_MAX      255                                                              | 16950    25
    75       |#endif                                                                                           | 16951    25
    76       |                                                                                                 | 16952    25
    77       |#if __POSIX_VISIBLE >= 199309                                                                    | 16953    25
    78       |#define _POSIX_AIO_LISTIO_MAX   16                                                               | 16954    25
    79       |#define _POSIX_AIO_MAX          1                                                                | 16955    25
    80       |#define _POSIX_DELAYTIMER_MAX   32                                                               | 16956    25
    81       |#define _POSIX_MQ_OPEN_MAX      8                                                                | 16957    25
    82       |#define _POSIX_MQ_PRIO_MAX      32                                                               | 16958    25
    83       |#define _POSIX_RTSIG_MAX        8                                                                | 16959    25
    84       |#define _POSIX_SEM_NSEMS_MAX    256                                                              | 16960    25
    85       |#define _POSIX_SEM_VALUE_MAX    32767                                                            | 16961    25
    86       |#define _POSIX_SIGQUEUE_MAX     32                                                               | 16962    25
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   327


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    87       |#define _POSIX_TIMER_MAX        32                                                               | 16963    25
    88       |#endif                                                                                           | 16964    25
    89       |                                                                                                 | 16965    25
    90       |#if __POSIX_VISIBLE >= 199506                                                                    | 16966    25
    91       |#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4                                                    | 16967    25
    92       |#define _POSIX_THREAD_KEYS_MAX  128                                                              | 16968    25
    93       |#define _POSIX_THREAD_THREADS_MAX 64                                                             | 16969    25
    94       |#endif                                                                                           | 16970    25
    95       |                                                                                                 | 16971    25
    96       |#if __POSIX_VISIBLE >= 200112                                                                    | 16972    25
    97       |#define _POSIX_HOST_NAME_MAX    255                                                              | 16973    25
    98       |#define _POSIX_LOGIN_NAME_MAX   9                                                                | 16974    25
    99       |#define _POSIX_SS_REPL_MAX      4                                                                | 16975    25
   100       |#define _POSIX_SYMLINK_MAX      255                                                              | 16976    25
   101       |#define _POSIX_SYMLOOP_MAX      8                                                                | 16977    25
   102       |#define _POSIX_TRACE_EVENT_NAME_MAX 30                                                           | 16978    25
   103       |#define _POSIX_TRACE_NAME_MAX   8                                                                | 16979    25
   104       |#define _POSIX_TRACE_SYS_MAX    8                                                                | 16980    25
   105       |#define _POSIX_TRACE_USER_EVENT_MAX 32                                                           | 16981    25
   106       |#define _POSIX_TTY_NAME_MAX     9                                                                | 16982    25
   107       |#define _POSIX2_CHARCLASS_NAME_MAX 14                                                            | 16983    25
   108       |#define _POSIX2_COLL_WEIGHTS_MAX 2                                                               | 16984    25
   109       |                                                                                                 | 16985    25
   110       |#define _POSIX_RE_DUP_MAX       _POSIX2_RE_DUP_MAX                                               | 16986    25
   111       |#endif                                                                                           | 16987    25
   112       |                                                                                                 | 16988    25
   113       |#if __XSI_VISIBLE                                                                                | 16989    25
   114       |#define _XOPEN_IOV_MAX          16                                                               | 16990    25
   115       |#define _XOPEN_NAME_MAX         255                                                              | 16991    25
   116       |#define _XOPEN_PATH_MAX         1024                                                             | 16992    25
   117       |#define PASS_MAX                128     /* _PASSWORD_LEN from <pwd.h> */                         | 16993    25
   118       |                                                                                                 | 16994    25
   119       |#define NL_ARGMAX               99      /* max # of position args for printf */                  | 16995    25
   120       |#define NL_LANGMAX              31      /* max LANG name length */                               | 16996    25
   121       |#define NL_MSGMAX               32767                                                            | 16997    25
   122       |#define NL_NMAX                 1                                                                | 16998    25
   123       |#define NL_SETMAX               255                                                              | 16999    25
   124       |#define NL_TEXTMAX              2048                                                             | 17000    25
   125       |#endif                                                                                           | 17001    25
   126       |                                                                                                 | 17002    25
   127       |#define MB_LEN_MAX              6       /* 31-bit UTF-8 */                                       | 17003    25
   128       |                                                                                                 | 17004    25
   129       |#include <sys/limits.h>                                                                          | 17005    25
   130       |                                                                                                 | 17006    25
   131       |#if __POSIX_VISIBLE                                                                              | 17007    25
   132       |#include <sys/syslimits.h>                                                                       | 17008    25
   133       |#endif                                                                                           | 17009    25
   134       |                                                                                                 | 17010    25
   135       |#endif /* !_LIMITS_H_ */                                                                         | 17011    25
   136       |#pragma pack(reset)                                                                              | 17012    25
    47       |#include <sched.h>                                                                               | 17013    31
     1       |/* release 2.25.00 */                                                                            | 17014    35
     2       |#pragma pack()                                                                                   | 17015    35
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   328


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     3       |/*-                                                                                              | 17016    35
     4       | * Copyright (c) 1996, 1997                                                                      | 17017    35
     5       | *      HD Associates, Inc.  All rights reserved.                                                | 17018    35
     6       | *                                                                                               | 17019    35
     7       | * Redistribution and use in source and binary forms, with or without                            | 17020    35
     8       | * modification, are permitted provided that the following conditions                            | 17021    35
     9       | * are met:                                                                                      | 17022    35
    10       | * 1. Redistributions of source code must retain the above copyright                             | 17023    35
    11       | *    notice, this list of conditions and the following disclaimer.                              | 17024    35
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 17025    35
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 17026    35
    14       | *    documentation and/or other materials provided with the distribution.                       | 17027    35
    15       | * 3. All advertising materials mentioning features or use of this software                      | 17028    35
    16       | *    must display the following acknowledgement:                                                | 17029    35
    17       | *      This product includes software developed by HD Associates, Inc                           | 17030    35
    18       | *      and Jukka Antero Ukkonen.                                                                | 17031    35
    19       | * 4. Neither the name of the author nor the names of any co-contributors                        | 17032    35
    20       | *    may be used to endorse or promote products derived from this software                      | 17033    35
    21       | *    without specific prior written permission.                                                 | 17034    35
    22       | *                                                                                               | 17035    35
    23       | * THIS SOFTWARE IS PROVIDED BY HD ASSOCIATES AND CONTRIBUTORS ``AS IS'' AND                     | 17036    35
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 17037    35
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 17038    35
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL HD ASSOCIATES OR CONTRIBUTORS BE LIABLE                    | 17039    35
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 17040    35
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 17041    35
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 17042    35
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 17043    35
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 17044    35
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 17045    35
    33       | * SUCH DAMAGE.                                                                                  | 17046    35
    34       | */                                                                                              | 17047    35
    35       |                                                                                                 | 17048    35
    36       |/*-                                                                                              | 17049    35
    37       | * Copyright (c) 2002-2008, Jeffrey Roberson <jeff@freebsd.org>                                  | 17050    35
    38       | * All rights reserved.                                                                          | 17051    35
    39       | *                                                                                               | 17052    35
    40       | * Redistribution and use in source and binary forms, with or without                            | 17053    35
    41       | * modification, are permitted provided that the following conditions                            | 17054    35
    42       | * are met:                                                                                      | 17055    35
    43       | * 1. Redistributions of source code must retain the above copyright                             | 17056    35
    44       | *    notice unmodified, this list of conditions, and the following                              | 17057    35
    45       | *    disclaimer.                                                                                | 17058    35
    46       | * 2. Redistributions in binary form must reproduce the above copyright                          | 17059    35
    47       | *    notice, this list of conditions and the following disclaimer in the                        | 17060    35
    48       | *    documentation and/or other materials provided with the distribution.                       | 17061    35
    49       | *                                                                                               | 17062    35
    50       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR                          | 17063    35
    51       | * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES                     | 17064    35
    52       | * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                       | 17065    35
    53       | * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,                              | 17066    35
    54       | * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT                      | 17067    35
    55       | * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,                     | 17068    35
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   329


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    56       | * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY                         | 17069    35
    57       | * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT                           | 17070    35
    58       | * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                      | 17071    35
    59       | * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                             | 17072    35
    60       | *                                                                                               | 17073    35
    61       | * $FreeBSD: releng/11.1/sys/sys/sched.h 301026 2016-05-31 08:07:40Z ed $                        | 17074    35
    62       | */                                                                                              | 17075    35
    63       |                                                                                                 | 17076    35
    64       |#ifndef _SCHED_H_                                                                                | 17077    35
    65       |#define _SCHED_H_                                                                                | 17078    35
    66       |                                                                                                 | 17079    35
    67       |/* POSIX 1003.1b Process Scheduling */                                                           | 17080    35
    68       |                                                                                                 | 17081    35
    69       |/*                                                                                               | 17082    35
    70       | * POSIX scheduling policies                                                                     | 17083    35
    71       | */                                                                                              | 17084    35
    72       |#define SCHED_FIFO      1                                                                        | 17085    35
    73       |#define SCHED_OTHER     2                                                                        | 17086    35
    74       |#define SCHED_RR        3                                                                        | 17087    35
    75       |                                                                                                 | 17088    35
    76       |struct sched_param {                                                                             | 17089    35
    77       |        int     sched_priority;                                                                  | 17090    35
    78       |};                                                                                               | 17091    35
    79       |                                                                                                 | 17092    35
    80       |/*                                                                                               | 17093    35
    81       | * POSIX scheduling declarations for userland.                                                   | 17094    35
    82       | */                                                                                              | 17095    35
    83       |#ifndef _KERNEL                                                                                  | 17096    35
    84       |#include <sys/cdefs.h>                                                                           | 17097    35
     1       |/* release 2.25.00 */                                                                            | 17098     4
     2       |#pragma pack()                                                                                   | 17099     4
     3       |/*                                                                                               | 17100     4
     4       | * Copyright (c) 1991, 1993                                                                      | 17101     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 17102     4
     6       | *                                                                                               | 17103     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 17104     4
     8       | * Berkeley Software Design, Inc.                                                                | 17105     4
     9       | *                                                                                               | 17106     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 17107     4
    11       | * modification, are permitted provided that the following conditions                            | 17108     4
    12       | * are met:                                                                                      | 17109     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 17110     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 17111     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 17112     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 17113     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 17114     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 17115     4
    19       | *    must display the following acknowledgement:                                                | 17116     4
    20       | *      This product includes software developed by the University of                            | 17117     4
    21       | *      California, Berkeley and its contributors.                                               | 17118     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 17119     4
    23       | *    may be used to endorse or promote products derived from this software                      | 17120     4
    24       | *    without specific prior written permission.                                                 | 17121     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   330


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       | *                                                                                               | 17122     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 17123     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 17124     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 17125     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 17126     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 17127     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 17128     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 17129     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 17130     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 17131     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 17132     4
    36       | * SUCH DAMAGE.                                                                                  | 17133     4
    37       | *                                                                                               | 17134     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 17135     4
    39       | */                                                                                              | 17136     4
    40       |                                                                                                 | 17137     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 17138     4
    42       |#define _SYS_CDEFS_H_                                                                            | 17139     4
    43       |                                                                                                 | 17140     4
    44       |#if defined(__cplusplus)                                                                         | 17141     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 17142     4
    46       |#define __END_DECLS     }                                                                        | 17143     4
    47       |#else                                                                                            | 17144     4
    48       |#define __BEGIN_DECLS                                                                            | 17145     4
    49       |#define __END_DECLS                                                                              | 17146     4
    50       |#endif                                                                                           | 17147     4
    51       |                                                                                                 | 17148     4
    52       |/*                                                                                               | 17149     4
    53       | * This code has been put in place to help reduce the addition of                                | 17150     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 17151     4
    55       | * having a compiler-agnostic source tree.                                                       | 17152     4
    56       | */                                                                                              | 17153     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 17154     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 17155     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 17156     4
    60       |                                                                                                 | 17157     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 17158     4
    62       |                                                                                                 | 17159     4
    63       |                                                                                                 | 17160     4
    64       |/*                                                                                               | 17161     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 17162     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 17163     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 17164     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 17165     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 17166     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 17167     4
    71       | * this only works with ANSI C.                                                                  | 17168     4
    72       | *                                                                                               | 17169     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 17170     4
    74       | * first.  It is only available with ANSI C.                                                     | 17171     4
    75       | */                                                                                              | 17172     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 17173     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 17174     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   331


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 17175     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 17176     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 17177     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 17178     4
    82       |                                                                                                 | 17179     4
    83       |#define __const         const           /* define reserved names to standard */                  | 17180     4
    84       |#define __signed        signed                                                                   | 17181     4
    85       |#define __volatile      volatile                                                                 | 17182     4
    86       |#if defined(__cplusplus)                                                                         | 17183     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 17184     4
    88       |#else                                                                                            | 17185     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 17186     4
    90       |#endif /* !__cplusplus */                                                                        | 17187     4
    91       |                                                                                                 | 17188     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 17189     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 17190     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 17191     4
    95       |#define __STRING(x)     "x"                                                                      | 17192     4
    96       |                                                                                                 | 17193     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 17194     4
    98       |#define __inline                                                                                 | 17195     4
    99       |#define __signed                                                                                 | 17196     4
   100       |#define __volatile                                                                               | 17197     4
   101       |/*                                                                                               | 17198     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 17199     4
   103       | * deleted from the program and old programs will want them left alone.                          | 17200     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 17201     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 17202     4
   106       | */                                                                                              | 17203     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 17204     4
   108       |#define const                           /* delete ANSI C keywords */                             | 17205     4
   109       |#define inline                                                                                   | 17206     4
   110       |#define signed                                                                                   | 17207     4
   111       |#define volatile                                                                                 | 17208     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 17209     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 17210     4
   114       |                                                                                                 | 17211     4
   115       |/*                                                                                               | 17212     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 17213     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 17214     4
   118       | */                                                                                              | 17215     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 17216     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 17217     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 17218     4
   122       |#define __unused                                                                                 | 17219     4
   123       |#define __aligned(x)                                                                             | 17220     4
   124       |#define __section(x)                                                                             | 17221     4
   125       |#define __nonnull(x)                                                                             | 17222     4
   126       |#define __used                                                                                   | 17223     4
   127       |                                                                                                 | 17224     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 17225     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 17226     4
   130       |                                                                                                 | 17227     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   332


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   131       |#if __STDC_VERSION__ < 199901                                                                    | 17228     4
   132       |#define __func__  NULL                                                                           | 17229     4
   133       |#endif                                                                                           | 17230     4
   134       |                                                                                                 | 17231     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 17232     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 17233     4
   137       |#endif                                                                                           | 17234     4
   138       |                                                                                                 | 17235     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 17236     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 17237     4
   141       | **/                                                                                             | 17238     4
   142       |#ifndef __cplusplus                                                                              | 17239     4
   143       |#define __restrict __restrict__                                                                  | 17240     4
   144       |#else                                                                                            | 17241     4
   145       |/* Systems/C++ does not */                                                                       | 17242     4
   146       |#define __restrict                                                                               | 17243     4
   147       |#endif                                                                                           | 17244     4
   148       |                                                                                                 | 17245     4
   149       |/*                                                                                               | 17246     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 17247     4
   151       | */                                                                                              | 17248     4
   152       |#define __predict_true(exp)     (exp)                                                            | 17249     4
   153       |#define __predict_false(exp)    (exp)                                                            | 17250     4
   154       |                                                                                                 | 17251     4
   155       |                                                                                                 | 17252     4
   156       |/*                                                                                               | 17253     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 17254     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 17255     4
   159       | *                                                                                               | 17256     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 17257     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 17258     4
   162       | */                                                                                              | 17259     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 17260     4
   164       |#undef __offsetof                                                                                | 17261     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 17262     4
   166       |#endif                                                                                           | 17263     4
   167       |                                                                                                 | 17264     4
   168       |/*                                                                                               | 17265     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 17266     4
   170       | * or scanf-like arguments.                                                                      | 17267     4
   171       | */                                                                                              | 17268     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 17269     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 17270     4
   174       |#define __format_arg(fmtarg)                                                                     | 17271     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 17272     4
   176       |                                                                                                 | 17273     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 17274     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 17275     4
   179       |                                                                                                 | 17276     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 17277     4
   181       |#define __weak_reference(sym,alias)                                                              | 17278     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 17279     4
   183       |#define __warn_references(sym,msg)                                                               | 17280     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   333


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   184       |                                                                                                 | 17281     4
   185       | /* This places the string into the resulting object.  It should */                              | 17282     4
   186       | /* probably become #pragma ident */                                                             | 17283     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 17284     4
   188       |                                                                                                 | 17285     4
   189       |#ifndef __RCSID                                                                                  | 17286     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 17287     4
   191       |#endif                                                                                           | 17288     4
   192       |                                                                                                 | 17289     4
   193       |/*                                                                                               | 17290     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 17291     4
   195       | * Usage:                                                                                        | 17292     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 17293     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 17294     4
   198       | */                                                                                              | 17295     4
   199       |#ifndef __SYSCID                                                                                 | 17296     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 17297     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 17298     4
   202       |#else                                                                                            | 17299     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 17300     4
   204       |#endif                                                                                           | 17301     4
   205       |#endif                                                                                           | 17302     4
   206       |                                                                                                 | 17303     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 17304     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 17305     4
   209       |#endif                                                                                           | 17306     4
   210       |                                                                                                 | 17307     4
   211       |#ifndef __COPYRIGHT                                                                              | 17308     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 17309     4
   213       |#endif                                                                                           | 17310     4
   214       |                                                                                                 | 17311     4
   215       |                                                                                                 | 17312     4
   216       |#ifndef __DECONST                                                                                | 17313     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 17314     4
   218       |#endif                                                                                           | 17315     4
   219       |                                                                                                 | 17316     4
   220       |#ifndef __DEVOLATILE                                                                             | 17317     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 17318     4
   222       |#endif                                                                                           | 17319     4
   223       |                                                                                                 | 17320     4
   224       |#ifndef __DEQUALIFY                                                                              | 17321     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 17322     4
   226       |#endif                                                                                           | 17323     4
   227       |                                                                                                 | 17324     4
   228       |                                                                                                 | 17325     4
   229       |/*-                                                                                              | 17326     4
   230       | * The following definitions are an extension of the behavior originally                         | 17327     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 17328     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 17329     4
   233       | * header file is included.                                                                      | 17330     4
   234       | *                                                                                               | 17331     4
   235       | * Here's a quick run-down of the versions:                                                      | 17332     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 17333     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   334


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 17334     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 17335     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 17336     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 17337     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 17338     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 17339     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 17340     4
   244       | *                                                                                               | 17341     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 17342     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 17343     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 17344     4
   248       | *                                                                                               | 17345     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 17346     4
   250       | */                                                                                              | 17347     4
   251       |                                                                                                 | 17348     4
   252       |/*                                                                                               | 17349     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 17350     4
   254       | * available. Also make them available when requested so.                                        | 17351     4
   255       | */                                                                                              | 17352     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 17353     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 17354     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 17355     4
   259       |#define __DF_VISIBLE    1                                                                        | 17356     4
   260       |#else                                                                                            | 17357     4
   261       |#define __DF_VISIBLE    0                                                                        | 17358     4
   262       |#endif                                                                                           | 17359     4
   263       |                                                                                                 | 17360     4
   264       |/*-                                                                                              | 17361     4
   265       | * The following definitions are an extension of the behavior originally                         | 17362     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 17363     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 17364     4
   268       | * header file is included.                                                                      | 17365     4
   269       | *                                                                                               | 17366     4
   270       | * Here's a quick run-down of the versions:                                                      | 17367     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 17368     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 17369     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 17370     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 17371     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 17372     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 17373     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 17374     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 17375     4
   279       | *                                                                                               | 17376     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 17377     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 17378     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 17379     4
   283       | *                                                                                               | 17380     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 17381     4
   285       | */                                                                                              | 17382     4
   286       |                                                                                                 | 17383     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 17384     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 17385     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 17386     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   335


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   290       |#define _POSIX_C_SOURCE         199009                                                           | 17387     4
   291       |#endif                                                                                           | 17388     4
   292       |                                                                                                 | 17389     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 17390     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 17391     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 17392     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 17393     4
   297       |#endif                                                                                           | 17394     4
   298       |                                                                                                 | 17395     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 17396     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 17397     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 17398     4
   302       |#define __XSI_VISIBLE           700                                                              | 17399     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 17400     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 17401     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 17402     4
   306       |#define __XSI_VISIBLE           600                                                              | 17403     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 17404     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 17405     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 17406     4
   310       |#define __XSI_VISIBLE           500                                                              | 17407     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 17408     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 17409     4
   313       |#endif                                                                                           | 17410     4
   314       |#endif                                                                                           | 17411     4
   315       |                                                                                                 | 17412     4
   316       |/*                                                                                               | 17413     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 17414     4
   318       | * important.                                                                                    | 17415     4
   319       | */                                                                                              | 17416     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 17417     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 17418     4
   322       |#endif                                                                                           | 17419     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 17420     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 17421     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 17422     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 17423     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 17424     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 17425     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 17426     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 17427     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 17428     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 17429     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 17430     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 17431     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 17432     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 17433     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 17434     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 17435     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 17436     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 17437     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 17438     4
   342       |#else                                                                                            | 17439     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   336


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   343       |#define __POSIX_VISIBLE         198808                                                           | 17440     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 17441     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 17442     4
   346       |#else                                                                                            | 17443     4
   347       |/*-                                                                                              | 17444     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 17445     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 17446     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 17447     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 17448     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 17449     4
   353       | * a test program to print out the values.                                                       | 17450     4
   354       | *                                                                                               | 17451     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 17452     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 17453     4
   357       | * environment (and in fact we will never get here).                                             | 17454     4
   358       | */                                                                                              | 17455     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 17456     4
   360       |#define __POSIX_VISIBLE         0                                                                | 17457     4
   361       |#define __XSI_VISIBLE           0                                                                | 17458     4
   362       |#define __BSD_VISIBLE           0                                                                | 17459     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 17460     4
   364       |#define __EXT1_VISIBLE          0                                                                | 17461     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 17462     4
   366       |#define __POSIX_VISIBLE         0                                                                | 17463     4
   367       |#define __XSI_VISIBLE           0                                                                | 17464     4
   368       |#define __BSD_VISIBLE           0                                                                | 17465     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 17466     4
   370       |#define __EXT1_VISIBLE          0                                                                | 17467     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 17468     4
   372       |#define __POSIX_VISIBLE         0                                                                | 17469     4
   373       |#define __XSI_VISIBLE           0                                                                | 17470     4
   374       |#define __BSD_VISIBLE           0                                                                | 17471     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 17472     4
   376       |#define __EXT1_VISIBLE          0                                                                | 17473     4
   377       |#else                           /* Default environment: show everything. */                      | 17474     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 17475     4
   379       |#define __XSI_VISIBLE           700                                                              | 17476     4
   380       |#define __BSD_VISIBLE           1                                                                | 17477     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 17478     4
   382       |#define __EXT1_VISIBLE          1                                                                | 17479     4
   383       |#endif                                                                                           | 17480     4
   384       |#endif                                                                                           | 17481     4
   385       |                                                                                                 | 17482     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 17483     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 17484     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 17485     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 17486     4
   390       |#define __EXT1_VISIBLE          1                                                                | 17487     4
   391       |#else                                                                                            | 17488     4
   392       |#define __EXT1_VISIBLE          0                                                                | 17489     4
   393       |#endif                                                                                           | 17490     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 17491     4
   395       |                                                                                                 | 17492     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   337


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 17493     4
   397       |#define __NO_TLS 1                                                                               | 17494     4
   398       |#endif                                                                                           | 17495     4
   399       |                                                                                                 | 17496     4
   400       |                                                                                                 | 17497     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 17498     4
   402       |#define __FBSDID(x)                                                                              | 17499     4
   403       |                                                                                                 | 17500     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 17501     4
   405       |#pragma pack(reset)                                                                              | 17502     4
    85       |#include <sys/timespec.h>                                                                        | 17503    35
     1       |/* release 2.25.00 */                                                                            | 17504    12
     2       |#pragma pack()                                                                                   | 17505    12
     3       |/*-                                                                                              | 17506    12
     4       | * Copyright (c) 1982, 1986, 1993                                                                | 17507    12
     5       | *      The Regents of the University of California.  All rights reserved.                       | 17508    12
     6       | *                                                                                               | 17509    12
     7       | * Redistribution and use in source and binary forms, with or without                            | 17510    12
     8       | * modification, are permitted provided that the following conditions                            | 17511    12
     9       | * are met:                                                                                      | 17512    12
    10       | * 1. Redistributions of source code must retain the above copyright                             | 17513    12
    11       | *    notice, this list of conditions and the following disclaimer.                              | 17514    12
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 17515    12
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 17516    12
    14       | *    documentation and/or other materials provided with the distribution.                       | 17517    12
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 17518    12
    16       | *    may be used to endorse or promote products derived from this software                      | 17519    12
    17       | *    without specific prior written permission.                                                 | 17520    12
    18       | *                                                                                               | 17521    12
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 17522    12
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 17523    12
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 17524    12
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 17525    12
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 17526    12
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 17527    12
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 17528    12
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 17529    12
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 17530    12
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 17531    12
    29       | * SUCH DAMAGE.                                                                                  | 17532    12
    30       | *                                                                                               | 17533    12
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    | 17534    12
    32       | * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp                          | 17535    12
    33       | *      $FreeBSD: src/sys/sys/timespec.h,v 1.4 2005/01/07 02:29:24 imp Exp $                     | 17536    12
    34       | */                                                                                              | 17537    12
    35       |                                                                                                 | 17538    12
    36       |/*                                                                                               | 17539    12
    37       | * Prerequisites: <sys/cdefs.h>, <sys/_types.h>                                                  | 17540    12
    38       | */                                                                                              | 17541    12
    39       |                                                                                                 | 17542    12
    40       |#ifndef _SYS_TIMESPEC_H_                                                                         | 17543    12
    41       |#define _SYS_TIMESPEC_H_                                                                         | 17544    12
    42       |                                                                                                 | 17545    12
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   338


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    43       |#include <sys/_types.h>                                                                          | 17546    12
    44       |                                                                                                 | 17547    12
    45       |#ifndef _TIME_T_DECLARED                                                                         | 17548    12
    46       |typedef __time_t        time_t;                                                                  | 17549    12
    47       |#define _TIME_T_DECLARED                                                                         | 17550    12
    48       |#endif                                                                                           | 17551    12
    49       |                                                                                                 | 17552    12
    50       |struct timespec {                                                                                | 17553    12
    51       |        time_t  tv_sec;         /* seconds */                                                    | 17554    12
    52       |        long    tv_nsec;        /* and nanoseconds */                                            | 17555    12
    53       |};                                                                                               | 17556    12
    54       |                                                                                                 | 17557    12
    55       |#if __BSD_VISIBLE                                                                                | 17558    12
    56       |#define TIMEVAL_TO_TIMESPEC(tv, ts)                                     \                        | 17559    12
    57       |        do {                                                            \                        | 17560    12
    58       |                (ts)->tv_sec = (tv)->tv_sec;                            \                        | 17561    12
    59       |                (ts)->tv_nsec = (tv)->tv_usec * 1000;                   \                        | 17562    12
    60       |        } while (0)                                                                              | 17563    12
    61       |#define TIMESPEC_TO_TIMEVAL(tv, ts)                                     \                        | 17564    12
    62       |        do {                                                            \                        | 17565    12
    63       |                (tv)->tv_sec = (ts)->tv_sec;                            \                        | 17566    12
    64       |                (tv)->tv_usec = (ts)->tv_nsec / 1000;                   \                        | 17567    12
    65       |        } while (0)                                                                              | 17568    12
    66       |                                                                                                 | 17569    12
    67       |#endif /* __BSD_VISIBLE */                                                                       | 17570    12
    68       |                                                                                                 | 17571    12
    69       |#endif /* _SYS_TIMESPEC_H_ */                                                                    | 17572    12
    70       |#pragma pack(reset)                                                                              | 17573    12
    86       |#include <sys/_types.h>                                                                          | 17574    35
     1       |/* release 2.25.00 */                                                                            | 17575     6
     2       |#pragma pack()                                                                                   | 17576     6
     3       |/*-                                                                                              | 17577     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 17578     6
     5       | * All rights reserved.                                                                          | 17579     6
     6       | *                                                                                               | 17580     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 17581     6
     8       | * modification, are permitted provided that the following conditions                            | 17582     6
     9       | * are met:                                                                                      | 17583     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 17584     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 17585     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 17586     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 17587     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 17588     6
    15       | *                                                                                               | 17589     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 17590     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 17591     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 17592     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 17593     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 17594     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 17595     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 17596     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 17597     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 17598     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   339


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 17599     6
    26       | * SUCH DAMAGE.                                                                                  | 17600     6
    27       | *                                                                                               | 17601     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 17602     6
    29       | */                                                                                              | 17603     6
    30       |                                                                                                 | 17604     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 17605     6
    32       |#define _SYS__TYPES_H_                                                                           | 17606     6
    33       |                                                                                                 | 17607     6
    34       |#include <sys/cdefs.h>                                                                           | 17608     6
    35       |#include <machine/_types.h>                                                                      | 17609     6
    36       |                                                                                                 | 17610     6
    37       |/*                                                                                               | 17611     6
    38       | * Standard type definitions.                                                                    | 17612     6
    39       | */                                                                                              | 17613     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 17614     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 17615     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 17616     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 17617     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 17618     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 17619     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 17620     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 17621     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 17622     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 17623     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 17624     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 17625     6
    52       |typedef int             __nl_item;                                                               | 17626     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 17627     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 17628     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 17629     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 17630     6
    57       |                                        /* signed, because of legacy code */                     | 17631     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 17632     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 17633     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 17634     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 17635     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 17636     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 17637     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 17638     6
    65       |                                                                                                 | 17639     6
    66       |/*                                                                                               | 17640     6
    67       | * Unusual type definitions.                                                                     | 17641     6
    68       | */                                                                                              | 17642     6
    69       |/*                                                                                               | 17643     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 17644     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 17645     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 17646     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 17647     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 17648     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 17649     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 17650     6
    77       | *                                                                                               | 17651     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   340


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 17652     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 17653     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 17654     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 17655     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 17656     6
    83       | */                                                                                              | 17657     6
    84       |#ifdef __cplusplus                                                                               | 17658     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 17659     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 17660     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 17661     6
    88       |#else                                                                                            | 17662     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 17663     6
    90       |#endif                                                                                           | 17664     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 17665     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 17666     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 17667     6
    94       |                                                                                                 | 17668     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 17669     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 17670     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 17671     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 17672     6
    99       |#endif                                                                                           | 17673     6
   100       |                                                                                                 | 17674     6
   101       |#if !defined(__cplusplus)                                                                        | 17675     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 17676     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 17677     6
   104       |#endif                                                                                           | 17678     6
   105       |                                                                                                 | 17679     6
   106       |                                                                                                 | 17680     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 17681     6
   108       |                                                                                                 | 17682     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 17683     6
   110       |                                                                                                 | 17684     6
   111       |/*                                                                                               | 17685     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 17686     6
   113       | * stream conversions.                                                                           | 17687     6
   114       | */                                                                                              | 17688     6
   115       |typedef union {                                                                                  | 17689     6
   116       |        char            __mbstate8[128];                                                         | 17690     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 17691     6
   118       |} __mbstate_t;                                                                                   | 17692     6
   119       |                                                                                                 | 17693     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 17694     6
   121       |#pragma pack(reset)                                                                              | 17695     6
    87       |                                                                                                 | 17696    35
    88       |#ifndef _PID_T_DECLARED                                                                          | 17697    35
    89       |typedef __pid_t         pid_t;                                                                   | 17698    35
    90       |#define _PID_T_DECLARED                                                                          | 17699    35
    91       |#endif                                                                                           | 17700    35
    92       |                                                                                                 | 17701    35
    93       |__BEGIN_DECLS                                                                                    | 17702    35
    93       +                                                                                                 + 17702    35
    94       |#if 0                                                                                            | 17703    35
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   341


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    95       | /* These aren't available on z/OS, they are part of the */                                      | 17704    35
    96       | /* posix REALTIME extensions. */                                                                | 17705    35
    97       |int     sched_get_priority_max(int);                                                             | 17706    35
    98       |int     sched_get_priority_min(int);                                                             | 17707    35
    99       |int     sched_getparam(pid_t, struct sched_param *);                                             | 17708    35
   100       |int     sched_getscheduler(pid_t);                                                               | 17709    35
   101       |int     sched_rr_get_interval(pid_t, struct timespec *);                                         | 17710    35
   102       |int     sched_setparam(pid_t, const struct sched_param *);                                       | 17711    35
   103       |int     sched_setscheduler(pid_t, int, const struct sched_param *);                              | 17712    35
   104       |#endif                                                                                           | 17713    35
   105       |#pragma map(sched_yield, "@@SCHD@Y")                                                             | 17714    35
   106       |int     sched_yield(void);                                                                       | 17715    35
   107       |__END_DECLS                                                                                      | 17716    35
   107       +                                                                                                 + 17716    35
   108       |                                                                                                 | 17717    35
   109       |#endif                                                                                           | 17718    35
   110       |#endif /* !_SCHED_H_ */                                                                          | 17719    35
   111       |#pragma pack(reset)                                                                              | 17720    35
    48       |                                                                                                 | 17721    31
    49       |/*                                                                                               | 17722    31
    50       | * Run-time invariant values:                                                                    | 17723    31
    51       | */                                                                                              | 17724    31
    52       |#define PTHREAD_DESTRUCTOR_ITERATIONS           4                                                | 17725    31
    53       |#define PTHREAD_KEYS_MAX                        256                                              | 17726    31
    54       |#define PTHREAD_STACK_MIN                       MINSIGSTKSZ                                      | 17727    31
    55       |#define PTHREAD_THREADS_MAX                     ULONG_MAX                                        | 17728    31
    56       |#define PTHREAD_BARRIER_SERIAL_THREAD           -1                                               | 17729    31
    57       |                                                                                                 | 17730    31
    58       |/*                                                                                               | 17731    31
    59       | * Flags for threads and thread attributes.                                                      | 17732    31
    60       | */                                                                                              | 17733    31
    61       |#define PTHREAD_DETACHED            0x1                                                          | 17734    31
    62       |#define PTHREAD_SCOPE_SYSTEM        0x2                                                          | 17735    31
    63       |#define PTHREAD_INHERIT_SCHED       0x4                                                          | 17736    31
    64       |#define PTHREAD_NOFLOAT             0x8                                                          | 17737    31
    65       |                                                                                                 | 17738    31
    66       |#define PTHREAD_CREATE_DETACHED     PTHREAD_DETACHED                                             | 17739    31
    67       |#define PTHREAD_CREATE_JOINABLE     0                                                            | 17740    31
    68       |#define PTHREAD_SCOPE_PROCESS       0                                                            | 17741    31
    69       |#define PTHREAD_EXPLICIT_SCHED      0                                                            | 17742    31
    70       |                                                                                                 | 17743    31
    71       |      /* BPX thread weights */                                                                   | 17744    31
    72       |#define __HEAVY_WEIGHT              0 /* default */                                              | 17745    31
    73       |#define __MEDIUM_WEIGHT             1                                                            | 17746    31
    74       |                                                                                                 | 17747    31
    75       |      /* BPX thread synctypes */                                                                 | 17748    31
    76       |#define __PTATSYNCHRONOUS           0 /* default */                                              | 17749    31
    77       |#define __PTATASYNCHRONOUS          1                                                            | 17750    31
    78       |                                                                                                 | 17751    31
    79       |      /* pthread_set_limit_np action */                                                          | 17752    31
    80       |#define __STL_MAX_TASKS             1                                                            | 17753    31
    81       |#define __STL_MAX_THREADS           2                                                            | 17754    31
    82       |#define __STL_SET_BOTH              3                                                            | 17755    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   342


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    83       |                                                                                                 | 17756    31
    84       |/*                                                                                               | 17757    31
    85       | * Flags for read/write lock attributes                                                          | 17758    31
    86       | */                                                                                              | 17759    31
    87       |#define PTHREAD_PROCESS_PRIVATE     0                                                            | 17760    31
    88       |#define PTHREAD_PROCESS_SHARED      1                                                            | 17761    31
    89       |                                                                                                 | 17762    31
    90       |/*                                                                                               | 17763    31
    91       | * Flags for cancelling threads                                                                  | 17764    31
    92       | */                                                                                              | 17765    31
    93       |#define PTHREAD_CANCEL_ENABLE 0                                                                  | 17766    31
    94       |#define PTHREAD_CANCEL_DISABLE 1                                                                 | 17767    31
    95       |#define PTHREAD_CANCEL_MASKED 2                                                                  | 17768    31
    96       |                                                                                                 | 17769    31
    97       |#define PTHREAD_CANCEL_DEFERRED 0                                                                | 17770    31
    98       |#define PTHREAD_CANCEL_ASYNCHRONOUS 1                                                            | 17771    31
    99       |                                                                                                 | 17772    31
   100       |#define PTHREAD_CANCELED ((void *)-1L)                                                           | 17773    31
   101       |                                                                                                 | 17774    31
   102       |                                                                                                 | 17775    31
   103       |/*                                                                                               | 17776    31
   104       | * Flags for once initialization.                                                                | 17777    31
   105       | */                                                                                              | 17778    31
   106       |#define PTHREAD_NEEDS_INIT  0                                                                    | 17779    31
   107       |#define PTHREAD_DONE_INIT   1                                                                    | 17780    31
   108       |                                                                                                 | 17781    31
   109       |/*                                                                                               | 17782    31
   110       | * Static once initialization values.                                                            | 17783    31
   111       | */                                                                                              | 17784    31
   112       |#define PTHREAD_ONCE_INIT   ( 0 )                                                                | 17785    31
   113       |                                                                                                 | 17786    31
   114       |/*                                                                                               | 17787    31
   115       | * Static initialization values.                                                                 | 17788    31
   116       | */                                                                                              | 17789    31
   117       |#define PTHREAD_MUTEX_INITIALIZER {{{0}}}                                                        | 17790    31
   118       |#define PTHREAD_RWLOCK_INITIALIZER {{{0}}}                                                       | 17791    31
   119       |#define PTHREAD_COND_INITIALIZER {{{0}}}                                                         | 17792    31
   120       |                                                                                                 | 17793    31
   121       |/*                                                                                               | 17794    31
   122       | * Default attribute arguments (draft 4, deprecated).                                            | 17795    31
   123       | */                                                                                              | 17796    31
   124       |#ifndef PTHREAD_KERNEL                                                                           | 17797    31
   125       |#define pthread_condattr_default    NULL                                                         | 17798    31
   126       |#define pthread_mutexattr_default   NULL                                                         | 17799    31
   127       |#define pthread_attr_default        NULL                                                         | 17800    31
   128       |#endif                                                                                           | 17801    31
   129       |                                                                                                 | 17802    31
   130       |#define PTHREAD_PRIO_NONE       0                                                                | 17803    31
   131       |#define PTHREAD_PRIO_INHERIT    1                                                                | 17804    31
   132       |#define PTHREAD_PRIO_PROTECT    2                                                                | 17805    31
   133       |                                                                                                 | 17806    31
   134       |/*                                                                                               | 17807    31
   135       | * Mutex types (Single UNIX Specification, Version 2, 1997).                                     | 17808    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   343


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   136       | *                                                                                               | 17809    31
   137       | * Note that a mutex attribute with one of the following types:                                  | 17810    31
   138       | *                                                                                               | 17811    31
   139       | *      PTHREAD_MUTEX_NORMAL                                                                     | 17812    31
   140       | *      PTHREAD_MUTEX_RECURSIVE                                                                  | 17813    31
   141       | *      MUTEX_TYPE_FAST (deprecated)                                                             | 17814    31
   142       | *      MUTEX_TYPE_COUNTING_FAST (deprecated)                                                    | 17815    31
   143       | *                                                                                               | 17816    31
   144       | * will deviate from POSIX specified semantics.                                                  | 17817    31
   145       | */                                                                                              | 17818    31
   146       |enum pthread_mutextype {                                                                         | 17819    31
   147       |        PTHREAD_MUTEX_NORMAL            = 0,    /* No error checking */                          | 17820    31
   148       |        PTHREAD_MUTEX_RECURSIVE         = 1,    /* Recursive mutex */                            | 17821    31
   149       |        PTHREAD_MUTEX_ERRORCHECK        = 2,    /* Default POSIX mutex */                        | 17822    31
   150       |        MUTEX_TYPE_MAX                                                                           | 17823    31
   151       |};                                                                                               | 17824    31
   152       |                                                                                                 | 17825    31
   153       |#define PTHREAD_MUTEX_DEFAULT           PTHREAD_MUTEX_ERRORCHECK                                 | 17826    31
   154       |#define MUTEX_TYPE_FAST                 PTHREAD_MUTEX_NORMAL                                     | 17827    31
   155       |#define MUTEX_TYPE_COUNTING_FAST        PTHREAD_MUTEX_RECURSIVE                                  | 17828    31
   156       |                                                                                                 | 17829    31
   157       |/*                                                                                               | 17830    31
   158       | * Thread function prototype definitions:                                                        | 17831    31
   159       | */                                                                                              | 17832    31
   160       |__BEGIN_DECLS                                                                                    | 17833    31
   160       +                                                                                                 + 17833    31
   161       |#pragma map (pthread_atfork, "@@PT@AF")                                                          | 17834    31
   162       |int             pthread_atfork(void (*prepare)(void), void (*parent)(void),                      | 17835    31
   163       |                        void (*child)(void));                                                    | 17836    31
   164       |#pragma map (pthread_attr_destroy, "@@PT3AD")                                                    | 17837    31
   165       |int             pthread_attr_destroy(pthread_attr_t *);                                          | 17838    31
   166       |#pragma map (pthread_attr_getstack, "@@PT@AGK")                                                  | 17839    31
   167       |int             pthread_attr_getstack(const pthread_attr_t * __restrict,                         | 17840    31
   167       +int             pthread_attr_getstack(const pthread_attr_t * __restrict__,                       + 17840    31
   168       |                        void ** __restrict stackaddr,                                            | 17841    31
   168       +                                                void ** __restrict__ stackaddr,                  + 17841    31
   169       |                        size_t * __restrict stacksize);                                          | 17842    31
   169       +                                                size_t * __restrict__ stacksize);                + 17842    31
   170       |#pragma map (pthread_attr_getstacksize, "@@PT3AGS")                                              | 17843    31
   171       |int             pthread_attr_getstacksize(const pthread_attr_t *, size_t *);                     | 17844    31
   172       |#pragma map (pthread_attr_getguardsize, "@@PT@AGG")                                              | 17845    31
   173       |int             pthread_attr_getguardsize(const pthread_attr_t *, size_t *);                     | 17846    31
   174       |#pragma map (pthread_attr_getstackaddr, "@@PT@GSA")                                              | 17847    31
   175       |int             pthread_attr_getstackaddr(const pthread_attr_t *, void **);                      | 17848    31
   176       |#pragma map (pthread_attr_getdetachstate, "@@PT3AGD")                                            | 17849    31
   177       |int             pthread_attr_getdetachstate(const pthread_attr_t *, int *);                      | 17850    31
   178       |#pragma map (pthread_attr_init, "@@PT3AI")                                                       | 17851    31
   179       |int             pthread_attr_init(pthread_attr_t *);                                             | 17852    31
   180       |#pragma map (pthread_attr_setstacksize, "@@PT3ASS")                                              | 17853    31
   181       |int             pthread_attr_setstacksize(pthread_attr_t *, size_t);                             | 17854    31
   182       |#pragma map (pthread_attr_setguardsize, "@@PT@ASG")                                              | 17855    31
   183       |int             pthread_attr_setguardsize(pthread_attr_t *, size_t);                             | 17856    31
   184       |#pragma map (pthread_attr_setstack, "@@PT@ASK")                                                  | 17857    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   344


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   185       |int             pthread_attr_setstack(pthread_attr_t *, void *, size_t);                         | 17858    31
   186       |#pragma map (pthread_attr_setstackaddr, "@@PT@SSA")                                              | 17859    31
   187       |int             pthread_attr_setstackaddr(pthread_attr_t *, void *);                             | 17860    31
   188       |#pragma map (pthread_attr_setdetachstate, "@@PT3ASD")                                            | 17861    31
   189       |int             pthread_attr_setdetachstate(pthread_attr_t *, int);                              | 17862    31
   190       |#pragma map (pthread_attr_getweight_np, "@@PT@AGW")                                              | 17863    31
   191       |int             pthread_attr_getweight_np(const pthread_attr_t *__restrict,                      | 17864    31
   191       +int             pthread_attr_getweight_np(const pthread_attr_t *__restrict__,                    + 17864    31
   192       |                                          int *__restrict);                                      | 17865    31
   192       +                                                                                    int *__restri+ 17865    31
   192       +ct__);                                                                                           + 17865    31
   193       |#pragma map (pthread_attr_setweight_np, "@@PT@ASW")                                              | 17866    31
   194       |int             pthread_attr_setweight_np(pthread_attr_t *, int );                               | 17867    31
   195       |#pragma map (pthread_attr_getsynctype_np, "@@PT@AGT")                                            | 17868    31
   196       |int             pthread_attr_getsynctype_np(const pthread_attr_t *__restrict,                    | 17869    31
   196       +int             pthread_attr_getsynctype_np(const pthread_attr_t *__restrict__,                  + 17869    31
   197       |                                            int *__restrict);                                    | 17870    31
   197       +                                                                                        int *__re+ 17870    31
   197       +strict__);                                                                                       + 17870    31
   198       |#pragma map (pthread_attr_setsynctype_np, "@@PT@AST")                                            | 17871    31
   199       |int             pthread_attr_setsynctype_np(pthread_attr_t *, int );                             | 17872    31
   200       |#pragma map (pthread_barrier_destroy, "@@PT6@BD")                                                | 17873    31
   201       |int             pthread_barrier_destroy(pthread_barrier_t *);                                    | 17874    31
   202       |#pragma map (pthread_barrier_init, "@@PT6@BI")                                                   | 17875    31
   203       |int             pthread_barrier_init(pthread_barrier_t *,                                        | 17876    31
   204       |                        const pthread_barrierattr_t *, unsigned);                                | 17877    31
   205       |#pragma map (pthread_barrier_wait, "@@PT6@BW")                                                   | 17878    31
   206       |int             pthread_barrier_wait(pthread_barrier_t *);                                       | 17879    31
   207       |#pragma map (pthread_barrierattr_destroy, "@@PT6BAD")                                            | 17880    31
   208       |int             pthread_barrierattr_destroy(pthread_barrierattr_t *);                            | 17881    31
   209       |#if 0                                                                                            | 17882    31
   210       |#pragma map (pthread_barrierattr_getpshared, "@@PT6BAG")                                         | 17883    31
   211       |int             pthread_barrierattr_getpshared(const pthread_barrierattr_t *,                    | 17884    31
   212       |                        int *);                                                                  | 17885    31
   213       |#endif                                                                                           | 17886    31
   214       |#pragma map (pthread_barrierattr_init, "@@PT6BAI")                                               | 17887    31
   215       |int             pthread_barrierattr_init(pthread_barrierattr_t *);                               | 17888    31
   216       |#if 0                                                                                            | 17889    31
   217       |#pragma map (pthread_barrierattr_setpshared, "@@PT6BAS")                                         | 17890    31
   218       |int             pthread_barrierattr_setpshared(pthread_barrierattr_t *, int);                    | 17891    31
   219       |#endif                                                                                           | 17892    31
   220       |                                                                                                 | 17893    31
   221       |                                                                                                 | 17894    31
   222       |struct __ptcb {                                                                                  | 17895    31
   223       |        void (*__f)(void *);                                                                     | 17896    31
   224       |        void *__x;                                                                               | 17897    31
   225       |        struct __ptcb *__next;                                                                   | 17898    31
   226       |};                                                                                               | 17899    31
   227       |                                                                                                 | 17900    31
   228       |#pragma map (_pthread_cleanup_push, "@@PT@CPU")                                                  | 17901    31
   229       |void _pthread_cleanup_push(struct __ptcb *, void (*)(void *), void *);                           | 17902    31
   230       |#pragma map (_pthread_cleanup_pop, "@@PT@CPO")                                                   | 17903    31
   231       |void _pthread_cleanup_pop(struct __ptcb *, int);                                                 | 17904    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   345


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   232       |                                                                                                 | 17905    31
   233       | /* OpenGroup definition of pthread_cleanup_push()/pthread_cleanup_pop()                         | 17906    31
   234       |  * says these can be macros the open and close a new lexical scope.  So,                        | 17907    31
   235       |  * that's what we do, and this avoids any memory allocation questions.                          | 17908    31
   236       |  */                                                                                             | 17909    31
   237       |#define pthread_cleanup_push(f, x) \                                                             | 17910    31
   238       |        do { struct __ptcb __cb; _pthread_cleanup_push(&__cb, f, x); {                           | 17911    31
   239       |#define pthread_cleanup_pop(r) } _pthread_cleanup_pop(&__cb, (r)); } while(0)                    | 17912    31
   240       |#pragma map (pthread_condattr_destroy, "@@PT3DD")                                                | 17913    31
   241       |int             pthread_condattr_destroy(pthread_condattr_t *);                                  | 17914    31
   242       |#pragma map (pthread_condattr_init, "@@PT3DI")                                                   | 17915    31
   243       |int             pthread_condattr_init(pthread_condattr_t *);                                     | 17916    31
   244       |#if 0                                                                                            | 17917    31
   245       |#pragma map (pthread_condattr_getpshared, "@@PT3CGP")                                            | 17918    31
   246       |int             pthread_condattr_getpshared(const pthread_condattr_t *, int *);                  | 17919    31
   247       |#endif                                                                                           | 17920    31
   248       |#pragma map (pthread_condattr_getclock, "@@PT3CGC")                                              | 17921    31
   249       |int             pthread_condattr_getclock(const pthread_condattr_t *,                            | 17922    31
   250       |                        clockid_t *);                                                            | 17923    31
   251       |#pragma map (pthread_condattr_setclock, "@@PT3CSC")                                              | 17924    31
   252       |int             pthread_condattr_setclock(pthread_condattr_t *,                                  | 17925    31
   253       |                        clockid_t);                                                              | 17926    31
   254       |#if 0                                                                                            | 17927    31
   255       |#pragma map (pthread_condattr_setpshared, "@@PT3CSP")                                            | 17928    31
   256       |int             pthread_condattr_setpshared(pthread_condattr_t *, int);                          | 17929    31
   257       |#endif                                                                                           | 17930    31
   258       |#pragma map (pthread_cond_broadcast, "@@PT3CB")                                                  | 17931    31
   259       |int             pthread_cond_broadcast(pthread_cond_t *);                                        | 17932    31
   260       |#pragma map (pthread_cond_destroy, "@@PT3CD")                                                    | 17933    31
   261       |int             pthread_cond_destroy(pthread_cond_t *);                                          | 17934    31
   262       |#pragma map (pthread_cond_init, "@@PT3CI")                                                       | 17935    31
   263       |int             pthread_cond_init(pthread_cond_t *,                                              | 17936    31
   264       |                        const pthread_condattr_t *);                                             | 17937    31
   265       |#pragma map (pthread_cond_signal,  "@@PT3CS")                                                    | 17938    31
   266       |int             pthread_cond_signal(pthread_cond_t *);                                           | 17939    31
   267       |#pragma map (pthread_cond_timedwait, "@@PT3CT")                                                  | 17940    31
   268       |int             pthread_cond_timedwait(pthread_cond_t *,                                         | 17941    31
   269       |                        pthread_mutex_t *, const struct timespec *);                             | 17942    31
   270       |#pragma map (pthread_cond_wait, "@@PT3CW")                                                       | 17943    31
   271       |int             pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);                          | 17944    31
   272       |#pragma map (pthread_create, "@@PT3C")                                                           | 17945    31
   273       |int             pthread_create(pthread_t *, const pthread_attr_t *,                              | 17946    31
   274       |                        void *(*) (void *), void *);                                             | 17947    31
   275       |#pragma map (pthread_detach, "@@PT3D")                                                           | 17948    31
   276       |int             pthread_detach(pthread_t);                                                       | 17949    31
   277       |#pragma map (pthread_equal, "@@PT@EQ")                                                           | 17950    31
   278       |int             pthread_equal(pthread_t, pthread_t);                                             | 17951    31
   279       |#pragma map (pthread_exit,  "@@PT@EXI")                                                          | 17952    31
   280       |void            pthread_exit(void *) __dead2;                                                    | 17953    31
   280       +void            pthread_exit(void *) __attribute__((__noreturn__));                              + 17953    31
   281       |#pragma map (pthread_getspecific, "@@PT8GS")                                                     | 17954    31
   282       |void            *pthread_getspecific(pthread_key_t);                                             | 17955    31
   283       |#pragma map (pthread_join, "@@PT3J")                                                             | 17956    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   346


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   284       |int             pthread_join(pthread_t, void **);                                                | 17957    31
   285       |#pragma map (pthread_key_create, "@@PT3KC")                                                      | 17958    31
   286       |int             pthread_key_create(pthread_key_t *,                                              | 17959    31
   287       |                        void (*) (void *));                                                      | 17960    31
   288       |#pragma map (pthread_key_delete, "@@PT@KD")                                                      | 17961    31
   289       |int             pthread_key_delete(pthread_key_t);                                               | 17962    31
   290       |#pragma map (pthread_mutexattr_init, "@@PT3XI")                                                  | 17963    31
   291       |int             pthread_mutexattr_init(pthread_mutexattr_t *);                                   | 17964    31
   292       |#pragma map (pthread_mutexattr_destroy, "@@PT3XS")                                               | 17965    31
   293       |int             pthread_mutexattr_destroy(pthread_mutexattr_t *);                                | 17966    31
   294       |#pragma map (pthread_mutexattr_getprotocol, "@@PT3MGP")                                          | 17967    31
   295       |int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr,                               | 17968    31
   296       |    int *protocol);                                                                              | 17969    31
   297       |#pragma map (pthread_mutexattr_getrobust, "@@PT3MGR")                                            | 17970    31
   298       |int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__restrict,                           | 17971    31
   298       +int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__restrict__,                         + 17971    31
   299       |                                 int *__restrict );                                              | 17972    31
   299       +                                                                  int *__restrict__ );           + 17972    31
   300       |#pragma map (pthread_mutexattr_gettype, "@@PT3TG")                                               | 17973    31
   301       |int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict,                             | 17974    31
   301       +int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__,                           + 17974    31
   302       |        int *__restrict);                                                                        | 17975    31
   302       +                int *__restrict__);                                                              + 17975    31
   303       |#if 0                                                                                            | 17976    31
   304       |#pragma map (pthread_mutexattr_getpshared, "@@P3MPG")                                            | 17977    31
   305       |int     pthread_mutexattr_getpshared(const pthread_mutexattr_t *, int *);                        | 17978    31
   306       |#endif                                                                                           | 17979    31
   307       |#pragma map(pthread_mutexattr_setprotocol, "@@PT3MSP")                                           | 17980    31
   308       |int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr,                                     | 17981    31
   309       |    int protocol);                                                                               | 17982    31
   310       |#pragma map (pthread_mutexattr_setrobust, "@@PT3MSR")                                            | 17983    31
   311       |int pthread_mutexattr_setrobust(pthread_mutexattr_t *attr, int robust);                          | 17984    31
   312       |#pragma map (pthread_mutexattr_settype, "@@PT3TS")                                               | 17985    31
   313       |int             pthread_mutexattr_settype(pthread_mutexattr_t *, int);                           | 17986    31
   314       |#if 0                                                                                            | 17987    31
   315       |#pragma map (pthread_mutexattr_setpshared, "@@P3MPS")                                            | 17988    31
   316       |int             pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);                        | 17989    31
   317       |#endif                                                                                           | 17990    31
   318       |#pragma map (pthread_mutex_consistent, "@@PT7MC")                                                | 17991    31
   319       |int pthread_mutex_consistent(pthread_mutex_t *mutex);                                            | 17992    31
   320       |#pragma map (pthread_mutex_destroy, "@@PT3MD")                                                   | 17993    31
   321       |int             pthread_mutex_destroy(pthread_mutex_t *);                                        | 17994    31
   322       |#pragma map (pthread_mutex_init, "@@PT3MI")                                                      | 17995    31
   323       |int             pthread_mutex_init(pthread_mutex_t *,                                            | 17996    31
   324       |                        const pthread_mutexattr_t *);                                            | 17997    31
   325       |#pragma map (pthread_mutex_lock, "@@PT3ML")                                                      | 17998    31
   326       |int             pthread_mutex_lock(pthread_mutex_t *);                                           | 17999    31
   327       |#pragma map (pthread_mutex_trylock, "@@PT3MT")                                                   | 18000    31
   328       |int             pthread_mutex_trylock(pthread_mutex_t *);                                        | 18001    31
   329       |#pragma map (pthread_mutex_timedlock, "@@PT3MTM")                                                | 18002    31
   330       |int             pthread_mutex_timedlock(pthread_mutex_t *,                                       | 18003    31
   331       |                        const struct timespec *);                                                | 18004    31
   332       |#pragma map (pthread_mutex_unlock, "@@PT3MU")                                                    | 18005    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   347


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   333       |int             pthread_mutex_unlock(pthread_mutex_t *);                                         | 18006    31
   334       |#pragma map (pthread_once, "@@PT3O")                                                             | 18007    31
   335       |int             pthread_once(pthread_once_t *, void (*) (void));                                 | 18008    31
   336       |#pragma map (pthread_rwlock_destroy, "@@P3R@D")                                                  | 18009    31
   337       |int             pthread_rwlock_destroy(pthread_rwlock_t *);                                      | 18010    31
   338       |#pragma map (pthread_rwlock_init, "@@P3R@I")                                                     | 18011    31
   339       |int             pthread_rwlock_init(pthread_rwlock_t *,                                          | 18012    31
   340       |                        const pthread_rwlockattr_t *);                                           | 18013    31
   341       |#pragma map (pthread_rwlock_rdlock, "@@P3RRL")                                                   | 18014    31
   342       |int             pthread_rwlock_rdlock(pthread_rwlock_t *);                                       | 18015    31
   343       |#pragma map (pthread_rwlock_timedrdlock, "@@P3RTRL")                                             | 18016    31
   344       |int             pthread_rwlock_timedrdlock(pthread_rwlock_t *,                                   | 18017    31
   345       |                        const struct timespec *);                                                | 18018    31
   346       |#pragma map (pthread_rwlock_timedwrlock, "@@P3RTWL")                                             | 18019    31
   347       |int             pthread_rwlock_timedwrlock(pthread_rwlock_t *,                                   | 18020    31
   348       |                        const struct timespec *);                                                | 18021    31
   349       |#pragma map (pthread_rwlock_tryrdlock, "@@P3RTR")                                                | 18022    31
   350       |int             pthread_rwlock_tryrdlock(pthread_rwlock_t *);                                    | 18023    31
   351       |#pragma map (pthread_rwlock_trywrlock,"@@P3RTW")                                                 | 18024    31
   352       |int             pthread_rwlock_trywrlock(pthread_rwlock_t *);                                    | 18025    31
   353       |#pragma map (pthread_rwlock_unlock, "@@P3R@U")                                                   | 18026    31
   354       |int             pthread_rwlock_unlock(pthread_rwlock_t *);                                       | 18027    31
   355       |#pragma map (pthread_rwlock_wrlock, "@@P3RWL")                                                   | 18028    31
   356       |int             pthread_rwlock_wrlock(pthread_rwlock_t *);                                       | 18029    31
   357       |#pragma map (pthread_rwlockattr_init, "@@P3RAI")                                                 | 18030    31
   358       |int             pthread_rwlockattr_init(pthread_rwlockattr_t *);                                 | 18031    31
   359       |#if 0                                                                                            | 18032    31
   360       |#pragma map (pthread_rwlockattr_getpshared, "@@P3RAG")                                           | 18033    31
   361       |int             pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *,                      | 18034    31
   362       |                        int *);                                                                  | 18035    31
   363       |#pragma map (pthread_rwlockattr_setpshared,  "@@P3RAS")                                          | 18036    31
   364       |int             pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);                      | 18037    31
   365       |#endif                                                                                           | 18038    31
   366       |#pragma map (pthread_rwlockattr_destroy,     "@@P3RAD")                                          | 18039    31
   367       |int             pthread_rwlockattr_destroy(pthread_rwlockattr_t *);                              | 18040    31
   368       |#pragma map (pthread_self, "@@PT@S")                                                             | 18041    31
   369       |pthread_t       pthread_self(void);                                                              | 18042    31
   370       |#pragma map (pthread_setspecific, "@@PT3SS")                                                     | 18043    31
   371       |int             pthread_setspecific(pthread_key_t, const void *);                                | 18044    31
   372       |                                                                                                 | 18045    31
   373       |#pragma map(pthread_spin_init, "@@P3@SPI")                                                       | 18046    31
   374       |int             pthread_spin_init(pthread_spinlock_t *, int);                                    | 18047    31
   375       |#pragma map(pthread_spin_destroy, "@@P3@SPD")                                                    | 18048    31
   376       |int             pthread_spin_destroy(pthread_spinlock_t *);                                      | 18049    31
   377       |#pragma map(pthread_spin_lock, "@@P3@SPL")                                                       | 18050    31
   378       |int             pthread_spin_lock(pthread_spinlock_t *);                                         | 18051    31
   379       |#pragma map(pthread_spin_trylock, "@@P3@SPT")                                                    | 18052    31
   380       |int             pthread_spin_trylock(pthread_spinlock_t *);                                      | 18053    31
   381       |#pragma map(pthread_spin_unlock, "@@P3@SPU")                                                     | 18054    31
   382       |int             pthread_spin_unlock(pthread_spinlock_t *);                                       | 18055    31
   383       |                                                                                                 | 18056    31
   384       |#pragma map (pthread_cancel, "@@PT3CAN")                                                         | 18057    31
   385       |int             pthread_cancel(pthread_t);                                                       | 18058    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   348


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   386       |#pragma map (pthread_setcancelstate, "@@PT@SCS")                                                 | 18059    31
   387       |int             pthread_setcancelstate(int, int *);                                              | 18060    31
   388       |#pragma map (pthread_setcanceltype, "@@PT@SCT")                                                  | 18061    31
   389       |int             pthread_setcanceltype(int, int *);                                               | 18062    31
   390       |#pragma map (pthread_testcancel,           "@@PT@TC")                                            | 18063    31
   391       |void            pthread_testcancel(void);                                                        | 18064    31
   392       |#pragma map (pthread_yield,           "@PT@Y")                                                   | 18065    31
   393       |void            pthread_yield(void);                                                             | 18066    31
   394       |                                                                                                 | 18067    31
   395       |#if 0                                                                                            | 18068    31
   396       |int             pthread_getprio(pthread_t);                                                      | 18069    31
   397       |int             pthread_setprio(pthread_t, int);                                                 | 18070    31
   398       |                                                                                                 | 18071    31
   399       |int             pthread_mutexattr_getprioceiling(pthread_mutexattr_t *,                          | 18072    31
   400       |                        int *);                                                                  | 18073    31
   401       |int             pthread_mutexattr_setprioceiling(pthread_mutexattr_t *,                          | 18074    31
   402       |                        int);                                                                    | 18075    31
   403       |#endif                                                                                           | 18076    31
   404       |#pragma map(pthread_mutex_getprioceiling, "@@PT5GPC")                                            | 18077    31
   405       |int   pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict,                            | 18078    31
   405       +int   pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__,                          + 18078    31
   406       |                        int *__restrict);                                                        | 18079    31
   406       +                                                int *__restrict__);                              + 18079    31
   407       |#pragma map(pthread_mutex_setprioceiling, "@@PT5SPC")                                            | 18080    31
   408       |int   pthread_mutex_setprioceiling(pthread_mutex_t *__restrict,                                  | 18081    31
   408       +int   pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__,                                + 18081    31
   409       |                        int ceiling, int * __restrict);                                          | 18082    31
   409       +                                                int ceiling, int * __restrict__);                + 18082    31
   410       |                                                                                                 | 18083    31
   411       |#pragma map (pthread_attr_getinheritsched, "@@PT@GIS")                                           | 18084    31
   412       |int             pthread_attr_getinheritsched(const pthread_attr_t *, int *);                     | 18085    31
   413       |#pragma map (pthread_attr_getschedparam, "@@PT@GSP")                                             | 18086    31
   414       |int             pthread_attr_getschedparam(const pthread_attr_t *,                               | 18087    31
   415       |                        struct sched_param *);                                                   | 18088    31
   416       |#pragma map (pthread_attr_getschedpolicy, "@@PT@GSO")                                            | 18089    31
   417       |int             pthread_attr_getschedpolicy(const pthread_attr_t *, int *);                      | 18090    31
   418       |#pragma map (pthread_attr_getscope, "@@PT@GSC")                                                  | 18091    31
   419       |int             pthread_attr_getscope(const pthread_attr_t *, int *);                            | 18092    31
   420       |#pragma map (pthread_attr_setinheritsched, "@@PT@SIS")                                           | 18093    31
   421       |int             pthread_attr_setinheritsched(pthread_attr_t *, int);                             | 18094    31
   422       |#pragma map (pthread_attr_setschedparam, "@@PT@SSP")                                             | 18095    31
   423       |int             pthread_attr_setschedparam(pthread_attr_t *,                                     | 18096    31
   424       |                        const struct sched_param *);                                             | 18097    31
   425       |#pragma map (pthread_attr_setscope, "@@PT3ASC")                                                  | 18098    31
   426       |int             pthread_attr_setscope(pthread_attr_t *, int);                                    | 18099    31
   427       |#pragma map (pthread_attr_setschedpolicy, "@@PT3ASP")                                            | 18100    31
   428       |int             pthread_attr_setschedpolicy(pthread_attr_t *, int);                              | 18101    31
   429       |#if 0                                                                                            | 18102    31
   430       |int             pthread_getschedparam(pthread_t pthread, int *,                                  | 18103    31
   431       |                        struct sched_param *);                                                   | 18104    31
   432       |int             pthread_setschedparam(pthread_t, int,                                            | 18105    31
   433       |                        const struct sched_param *);                                             | 18106    31
   434       |#endif                                                                                           | 18107    31
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   349


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   435       |#pragma map (pthread_getconcurrency,       "@@PT@GC")                                            | 18108    31
   436       |int             pthread_getconcurrency(void);                                                    | 18109    31
   437       |#pragma map (pthread_setconcurrency,       "@@PT@SC")                                            | 18110    31
   438       |int             pthread_setconcurrency(int);                                                     | 18111    31
   439       |                                                                                                 | 18112    31
   440       |                                                                                                 | 18113    31
   441       |#pragma map (pthread_set_limit_np, "@@PT@STL")                                                   | 18114    31
   442       |int             pthread_set_limit_np(int, int, int);                                             | 18115    31
   443       |__END_DECLS                                                                                      | 18116    31
   443       +                                                                                                 + 18116    31
   444       |                                                                                                 | 18117    31
   445       |#endif                                                                                           | 18118    31
   101       |#elif defined(_TTHREAD_WIN32_)                                                                   | 18119    29
   102       |  #ifndef WIN32_LEAN_AND_MEAN                                                                    | 18120    29
   103       |    #define WIN32_LEAN_AND_MEAN                                                                  | 18121    29
   104       |    #define __UNDEF_LEAN_AND_MEAN                                                                | 18122    29
   105       |  #endif                                                                                         | 18123    29
   106       |  #include <windows.h>                                                                           | 18124    29
   107       |  #ifdef __UNDEF_LEAN_AND_MEAN                                                                   | 18125    29
   108       |    #undef WIN32_LEAN_AND_MEAN                                                                   | 18126    29
   109       |    #undef __UNDEF_LEAN_AND_MEAN                                                                 | 18127    29
   110       |  #endif                                                                                         | 18128    29
   111       |#endif                                                                                           | 18129    29
   112       |                                                                                                 | 18130    29
   113       |/* Compiler-specific information */                                                              | 18131    29
   114       |#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L                                     | 18132    29
   115       |  #define TTHREAD_NORETURN _Noreturn                                                             | 18133    29
   116       |#elif defined(__GNUC__)                                                                          | 18134    29
   117       |  #define TTHREAD_NORETURN __attribute__((__noreturn__))                                         | 18135    29
   118       |#else                                                                                            | 18136    29
   119       |  #define TTHREAD_NORETURN                                                                       | 18137    29
   120       |#endif                                                                                           | 18138    29
   121       |                                                                                                 | 18139    29
   121       +                                                                                                 + 18139    29
   122       |/* If TIME_UTC is missing, provide it and provide a wrapper for                                  | 18140    29
   123       |   timespec_get. */                                                                              | 18141    29
   124       |#ifndef TIME_UTC                                                                                 | 18142    29
   125       |#define TIME_UTC 1                                                                               | 18143    29
   126       |#define _TTHREAD_EMULATE_TIMESPEC_GET_                                                           | 18144    29
   127       |                                                                                                 | 18145    29
   128       |#if defined(_TTHREAD_WIN32_)                                                                     | 18146    29
   129       |struct _tthread_timespec {                                                                       | 18147    29
   130       |  time_t tv_sec;                                                                                 | 18148    29
   131       |  long   tv_nsec;                                                                                | 18149    29
   132       |};                                                                                               | 18150    29
   133       |#define timespec _tthread_timespec                                                               | 18151    29
   134       |#endif                                                                                           | 18152    29
   135       |                                                                                                 | 18153    29
   136       |int _tthread_timespec_get(struct timespec *ts, int base);                                        | 18154    29
   137       |#define timespec_get _tthread_timespec_get                                                       | 18155    29
   138       |#endif                                                                                           | 18156    29
   139       |                                                                                                 | 18157    29
   140       |/** TinyCThread version (major number). */                                                       | 18158    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   350


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   141       |#define TINYCTHREAD_VERSION_MAJOR 1                                                              | 18159    29
   142       |/** TinyCThread version (minor number). */                                                       | 18160    29
   143       |#define TINYCTHREAD_VERSION_MINOR 2                                                              | 18161    29
   144       |/** TinyCThread version (full version). */                                                       | 18162    29
   145       |#define TINYCTHREAD_VERSION (TINYCTHREAD_VERSION_MAJOR * 100 + TINYCTHREAD_VERSION_MINOR)        | 18163    29
   146       |                                                                                                 | 18164    29
   147       |/**                                                                                              | 18165    29
   148       |* @def _Thread_local                                                                             | 18166    29
   149       |* Thread local storage keyword.                                                                  | 18167    29
   150       |* A variable that is declared with the @c _Thread_local keyword makes the                        | 18168    29
   151       |* value of the variable local to each thread (known as thread-local storage,                     | 18169    29
   152       |* or TLS). Example usage:                                                                        | 18170    29
   153       |* @code                                                                                          | 18171    29
   154       |* // This variable is local to each thread.                                                      | 18172    29
   155       |* _Thread_local int variable;                                                                    | 18173    29
   156       |* @endcode                                                                                       | 18174    29
   157       |* @note The @c _Thread_local keyword is a macro that maps to the corresponding                   | 18175    29
   158       |* compiler directive (e.g. @c __declspec(thread)).                                               | 18176    29
   159       |* @note This directive is currently not supported on Mac OS X (it will give                      | 18177    29
   160       |* a compiler error), since compile-time TLS is not supported in the Mac OS X                     | 18178    29
   161       |* executable format. Also, some older versions of MinGW (before GCC 4.x) do                      | 18179    29
   162       |* not support this directive, nor does the Tiny C Compiler.                                      | 18180    29
   163       |* @hideinitializer                                                                               | 18181    29
   164       |*/                                                                                               | 18182    29
   165       |                                                                                                 | 18183    29
   166       |#if !(defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201102L)) && !defined(_Thread_local)     | 18184    29
   167       | #if defined(__GNUC__) || defined(__INTEL_COMPILER) || defined(__SUNPRO_CC) || defined(__IBMCPP__| 18185    29
   167       +)                                                                                                + 18185    29
   168       |  #define _Thread_local __thread                                                                 | 18186    29
   169       | #else                                                                                           | 18187    29
   170       |  #define _Thread_local __declspec(thread)                                                       | 18188    29
   171       | #endif                                                                                          | 18189    29
   172       |#elif defined(__GNUC__) && defined(__GNUC_MINOR__) && (((__GNUC__ << 8) | __GNUC_MINOR__) < ((4 <| 18190    29
   172       +< 8) | 9))                                                                                       + 18190    29
   173       | #define _Thread_local __thread                                                                  | 18191    29
   174       |#endif                                                                                           | 18192    29
   175       |                                                                                                 | 18193    29
   175       +                                                                                                 + 18193    29
   176       |/* Macros */                                                                                     | 18194    29
   177       |#if defined(_TTHREAD_WIN32_)                                                                     | 18195    29
   178       |#define TSS_DTOR_ITERATIONS (4)                                                                  | 18196    29
   179       |#else                                                                                            | 18197    29
   180       |#define TSS_DTOR_ITERATIONS PTHREAD_DESTRUCTOR_ITERATIONS                                        | 18198    29
   181       |#endif                                                                                           | 18199    29
   182       |                                                                                                 | 18200    29
   183       |/* Function return values */                                                                     | 18201    29
   184       |/* Note: The values are unspecified by C11 but match glibc and musl to make                      | 18202    29
   185       | * sure they're compatible for the case where librdkafka was built with                          | 18203    29
   186       | * tinycthreads but the runtime libc also provides C11 threads.                                  | 18204    29
   187       | * The *BSD values are notably different. */                                                     | 18205    29
   188       |#define thrd_success  0 /**< The requested operation succeeded */                                | 18206    29
   189       |#define thrd_busy     1 /**< The requested operation failed because a tesource requested by a tes| 18207    29
   189       +t and return function is already in use */                                                       + 18207    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   351


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   190       |#define thrd_error    2 /**< The requested operation failed */                                   | 18208    29
   191       |#define thrd_nomem    3 /**< The requested operation failed because it was unable to allocate mem| 18209    29
   191       +ory */                                                                                           + 18209    29
   192       |#define thrd_timedout 4 /**< The time specified in the call was reached without acquiring the req| 18210    29
   192       +uested resource */                                                                               + 18210    29
   193       |                                                                                                 | 18211    29
   194       |/* Mutex types */                                                                                | 18212    29
   195       |#define mtx_plain     0                                                                          | 18213    29
   196       |#define mtx_recursive 1                                                                          | 18214    29
   197       |#define mtx_timed     2                                                                          | 18215    29
   198       |                                                                                                 | 18216    29
   199       |/* Mutex */                                                                                      | 18217    29
   200       |#if defined(_TTHREAD_WIN32_)                                                                     | 18218    29
   201       |typedef struct {                                                                                 | 18219    29
   202       |  union {                                                                                        | 18220    29
   203       |    CRITICAL_SECTION cs;      /* Critical section handle (used for non-timed mutexes) */         | 18221    29
   204       |    HANDLE mut;               /* Mutex handle (used for timed mutex) */                          | 18222    29
   205       |  } mHandle;                  /* Mutex handle */                                                 | 18223    29
   206       |  int mAlreadyLocked;         /* TRUE if the mutex is already locked */                          | 18224    29
   207       |  int mRecursive;             /* TRUE if the mutex is recursive */                               | 18225    29
   208       |  int mTimed;                 /* TRUE if the mutex is timed */                                   | 18226    29
   209       |} mtx_t;                                                                                         | 18227    29
   210       |#else                                                                                            | 18228    29
   211       |typedef pthread_mutex_t mtx_t;                                                                   | 18229    29
   212       |#endif                                                                                           | 18230    29
   213       |                                                                                                 | 18231    29
   214       |/** Create a mutex object.                                                                       | 18232    29
   215       |* @param mtx A mutex object.                                                                     | 18233    29
   216       |* @param type Bit-mask that must have one of the following six values:                           | 18234    29
   217       |*   @li @c mtx_plain for a simple non-recursive mutex                                            | 18235    29
   218       |*   @li @c mtx_timed for a non-recursive mutex that supports timeout                             | 18236    29
   219       |*   @li @c mtx_plain | @c mtx_recursive (same as @c mtx_plain, but recursive)                    | 18237    29
   220       |*   @li @c mtx_timed | @c mtx_recursive (same as @c mtx_timed, but recursive)                    | 18238    29
   221       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18239    29
   222       |* not be honored.                                                                                | 18240    29
   223       |*/                                                                                               | 18241    29
   224       |int mtx_init(mtx_t *mtx, int type);                                                              | 18242    29
   225       |                                                                                                 | 18243    29
   226       |/** Release any resources used by the given mutex.                                               | 18244    29
   227       |* @param mtx A mutex object.                                                                     | 18245    29
   228       |*/                                                                                               | 18246    29
   229       |void mtx_destroy(mtx_t *mtx);                                                                    | 18247    29
   230       |                                                                                                 | 18248    29
   231       |/** Lock the given mutex.                                                                        | 18249    29
   232       |* Blocks until the given mutex can be locked. If the mutex is non-recursive, and                 | 18250    29
   233       |* the calling thread already has a lock on the mutex, this call will block                       | 18251    29
   234       |* forever.                                                                                       | 18252    29
   235       |* @param mtx A mutex object.                                                                     | 18253    29
   236       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18254    29
   237       |* not be honored.                                                                                | 18255    29
   238       |*/                                                                                               | 18256    29
   239       |int mtx_lock(mtx_t *mtx);                                                                        | 18257    29
   240       |                                                                                                 | 18258    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   352


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   241       |/** NOT YET IMPLEMENTED.                                                                         | 18259    29
   242       |*/                                                                                               | 18260    29
   243       |int mtx_timedlock(mtx_t *mtx, const struct timespec *ts);                                        | 18261    29
   244       |                                                                                                 | 18262    29
   245       |/** Try to lock the given mutex.                                                                 | 18263    29
   246       |* The specified mutex shall support either test and return or timeout. If the                    | 18264    29
   247       |* mutex is already locked, the function returns without blocking.                                | 18265    29
   248       |* @param mtx A mutex object.                                                                     | 18266    29
   249       |* @return @ref thrd_success on success, or @ref thrd_busy if the resource                        | 18267    29
   250       |* requested is already in use, or @ref thrd_error if the request could not be                    | 18268    29
   251       |* honored.                                                                                       | 18269    29
   252       |*/                                                                                               | 18270    29
   253       |int mtx_trylock(mtx_t *mtx);                                                                     | 18271    29
   254       |                                                                                                 | 18272    29
   255       |/** Unlock the given mutex.                                                                      | 18273    29
   256       |* @param mtx A mutex object.                                                                     | 18274    29
   257       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18275    29
   258       |* not be honored.                                                                                | 18276    29
   259       |*/                                                                                               | 18277    29
   260       |int mtx_unlock(mtx_t *mtx);                                                                      | 18278    29
   261       |                                                                                                 | 18279    29
   262       |/* Condition variable */                                                                         | 18280    29
   263       |#if defined(_TTHREAD_WIN32_)                                                                     | 18281    29
   264       |typedef struct {                                                                                 | 18282    29
   265       |  HANDLE mEvents[2];                  /* Signal and broadcast event HANDLEs. */                  | 18283    29
   266       |  unsigned int mWaitersCount;         /* Count of the number of waiters. */                      | 18284    29
   267       |  CRITICAL_SECTION mWaitersCountLock; /* Serialize access to mWaitersCount. */                   | 18285    29
   268       |} cnd_t;                                                                                         | 18286    29
   269       |#else                                                                                            | 18287    29
   270       |typedef pthread_cond_t cnd_t;                                                                    | 18288    29
   271       |#endif                                                                                           | 18289    29
   272       |                                                                                                 | 18290    29
   273       |/** Create a condition variable object.                                                          | 18291    29
   274       |* @param cond A condition variable object.                                                       | 18292    29
   275       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18293    29
   276       |* not be honored.                                                                                | 18294    29
   277       |*/                                                                                               | 18295    29
   278       |int cnd_init(cnd_t *cond);                                                                       | 18296    29
   279       |                                                                                                 | 18297    29
   280       |/** Release any resources used by the given condition variable.                                  | 18298    29
   281       |* @param cond A condition variable object.                                                       | 18299    29
   282       |*/                                                                                               | 18300    29
   283       |void cnd_destroy(cnd_t *cond);                                                                   | 18301    29
   284       |                                                                                                 | 18302    29
   285       |/** Signal a condition variable.                                                                 | 18303    29
   286       |* Unblocks one of the threads that are blocked on the given condition variable                   | 18304    29
   287       |* at the time of the call. If no threads are blocked on the condition variable                   | 18305    29
   288       |* at the time of the call, the function does nothing and return success.                         | 18306    29
   289       |* @param cond A condition variable object.                                                       | 18307    29
   290       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18308    29
   291       |* not be honored.                                                                                | 18309    29
   292       |*/                                                                                               | 18310    29
   293       |int cnd_signal(cnd_t *cond);                                                                     | 18311    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   353


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   294       |                                                                                                 | 18312    29
   295       |/** Broadcast a condition variable.                                                              | 18313    29
   296       |* Unblocks all of the threads that are blocked on the given condition variable                   | 18314    29
   297       |* at the time of the call. If no threads are blocked on the condition variable                   | 18315    29
   298       |* at the time of the call, the function does nothing and return success.                         | 18316    29
   299       |* @param cond A condition variable object.                                                       | 18317    29
   300       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18318    29
   301       |* not be honored.                                                                                | 18319    29
   302       |*/                                                                                               | 18320    29
   303       |int cnd_broadcast(cnd_t *cond);                                                                  | 18321    29
   304       |                                                                                                 | 18322    29
   305       |/** Wait for a condition variable to become signaled.                                            | 18323    29
   306       |* The function atomically unlocks the given mutex and endeavors to block until                   | 18324    29
   307       |* the given condition variable is signaled by a call to cnd_signal or to                         | 18325    29
   308       |* cnd_broadcast. When the calling thread becomes unblocked it locks the mutex                    | 18326    29
   309       |* before it returns.                                                                             | 18327    29
   310       |* @param cond A condition variable object.                                                       | 18328    29
   311       |* @param mtx A mutex object.                                                                     | 18329    29
   312       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18330    29
   313       |* not be honored.                                                                                | 18331    29
   314       |*/                                                                                               | 18332    29
   315       |int cnd_wait(cnd_t *cond, mtx_t *mtx);                                                           | 18333    29
   316       |                                                                                                 | 18334    29
   317       |/** Wait for a condition variable to become signaled.                                            | 18335    29
   318       |* The function atomically unlocks the given mutex and endeavors to block until                   | 18336    29
   319       |* the given condition variable is signaled by a call to cnd_signal or to                         | 18337    29
   320       |* cnd_broadcast, or until after the specified time. When the calling thread                      | 18338    29
   321       |* becomes unblocked it locks the mutex before it returns.                                        | 18339    29
   322       |* @param cond A condition variable object.                                                       | 18340    29
   323       |* @param mtx A mutex object.                                                                     | 18341    29
   324       |* @param xt A point in time at which the request will time out (absolute time).                  | 18342    29
   325       |* @return @ref thrd_success upon success, or @ref thrd_timeout if the time                       | 18343    29
   326       |* specified in the call was reached without acquiring the requested resource, or                 | 18344    29
   327       |* @ref thrd_error if the request could not be honored.                                           | 18345    29
   328       |*/                                                                                               | 18346    29
   329       |int cnd_timedwait(cnd_t *cond, mtx_t *mtx, const struct timespec *ts);                           | 18347    29
   330       |                                                                                                 | 18348    29
   331       |#if defined(_TTHREAD_WIN32_)                                                                     | 18349    29
   332       |int _cnd_timedwait_win32(cnd_t *cond, mtx_t *mtx, DWORD timeout);                                | 18350    29
   333       |#endif                                                                                           | 18351    29
   334       |                                                                                                 | 18352    29
   335       |/* Thread */                                                                                     | 18353    29
   336       |#if defined(_TTHREAD_WIN32_)                                                                     | 18354    29
   337       |typedef HANDLE thrd_t;                                                                           | 18355    29
   338       |#else                                                                                            | 18356    29
   339       |typedef pthread_t thrd_t;                                                                        | 18357    29
   340       |#endif                                                                                           | 18358    29
   341       |                                                                                                 | 18359    29
   342       |/** Thread start function.                                                                       | 18360    29
   343       |* Any thread that is started with the @ref thrd_create() function must be                        | 18361    29
   344       |* started through a function of this type.                                                       | 18362    29
   345       |* @param arg The thread argument (the @c arg argument of the corresponding                       | 18363    29
   346       |*        @ref thrd_create() call).                                                               | 18364    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   354


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   347       |* @return The thread return value, which can be obtained by another thread                       | 18365    29
   348       |* by using the @ref thrd_join() function.                                                        | 18366    29
   349       |*/                                                                                               | 18367    29
   350       |typedef int (*thrd_start_t)(void *arg);                                                          | 18368    29
   351       |                                                                                                 | 18369    29
   352       |/** Create a new thread.                                                                         | 18370    29
   353       |* @param thr Identifier of the newly created thread.                                             | 18371    29
   354       |* @param func A function pointer to the function that will be executed in                        | 18372    29
   355       |*        the new thread.                                                                         | 18373    29
   356       |* @param arg An argument to the thread function.                                                 | 18374    29
   357       |* @return @ref thrd_success on success, or @ref thrd_nomem if no memory could                    | 18375    29
   358       |* be allocated for the thread requested, or @ref thrd_error if the request                       | 18376    29
   359       |* could not be honored.                                                                          | 18377    29
   360       |* @note A threadâs identifier may be reused for a different thread once the                    | 18378    29
   361       |* original thread has exited and either been detached or joined to another                       | 18379    29
   362       |* thread.                                                                                        | 18380    29
   363       |*/                                                                                               | 18381    29
   364       |int thrd_create(thrd_t *thr, thrd_start_t func, void *arg);                                      | 18382    29
   365       |                                                                                                 | 18383    29
   366       |/** Identify the calling thread.                                                                 | 18384    29
   367       |* @return The identifier of the calling thread.                                                  | 18385    29
   368       |*/                                                                                               | 18386    29
   369       |thrd_t thrd_current(void);                                                                       | 18387    29
   370       |                                                                                                 | 18388    29
   371       |                                                                                                 | 18389    29
   372       |/** Dispose of any resources allocated to the thread when that thread exits.                     | 18390    29
   373       | * @return thrd_success, or thrd_error on error                                                  | 18391    29
   374       |*/                                                                                               | 18392    29
   375       |int thrd_detach(thrd_t thr);                                                                     | 18393    29
   376       |                                                                                                 | 18394    29
   377       |/** Compare two thread identifiers.                                                              | 18395    29
   378       |* The function determines if two thread identifiers refer to the same thread.                    | 18396    29
   379       |* @return Zero if the two thread identifiers refer to different threads.                         | 18397    29
   380       |* Otherwise a nonzero value is returned.                                                         | 18398    29
   381       |*/                                                                                               | 18399    29
   382       |int thrd_equal(thrd_t thr0, thrd_t thr1);                                                        | 18400    29
   383       |                                                                                                 | 18401    29
   384       |/** Terminate execution of the calling thread.                                                   | 18402    29
   385       |* @param res Result code of the calling thread.                                                  | 18403    29
   386       |*/                                                                                               | 18404    29
   387       |TTHREAD_NORETURN void thrd_exit(int res);                                                        | 18405    29
   387       + void thrd_exit(int res);                                                                        + 18405    29
   388       |                                                                                                 | 18406    29
   389       |/** Wait for a thread to terminate.                                                              | 18407    29
   390       |* The function joins the given thread with the current thread by blocking                        | 18408    29
   391       |* until the other thread has terminated.                                                         | 18409    29
   392       |* @param thr The thread to join with.                                                            | 18410    29
   393       |* @param res If this pointer is not NULL, the function will store the result                     | 18411    29
   394       |*        code of the given thread in the integer pointed to by @c res.                           | 18412    29
   395       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18413    29
   396       |* not be honored.                                                                                | 18414    29
   397       |*/                                                                                               | 18415    29
   398       |int thrd_join(thrd_t thr, int *res);                                                             | 18416    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   355


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   399       |                                                                                                 | 18417    29
   400       |/** Put the calling thread to sleep.                                                             | 18418    29
   401       |* Suspend execution of the calling thread.                                                       | 18419    29
   402       |* @param duration  Interval to sleep for                                                         | 18420    29
   403       |* @param remaining If non-NULL, this parameter will hold the remaining                           | 18421    29
   404       |*                  time until time_point upon return. This will                                  | 18422    29
   405       |*                  typically be zero, but if the thread was woken up                             | 18423    29
   406       |*                  by a signal that is not ignored before duration was                           | 18424    29
   407       |*                  reached @c remaining will hold a positive time.                               | 18425    29
   408       |* @return 0 (zero) on successful sleep, -1 if an interrupt occurred,                             | 18426    29
   409       |*         or a negative value if the operation fails.                                            | 18427    29
   410       |*/                                                                                               | 18428    29
   411       |int thrd_sleep(const struct timespec *duration, struct timespec *remaining);                     | 18429    29
   412       |                                                                                                 | 18430    29
   413       |/** Yield execution to another thread.                                                           | 18431    29
   414       |* Permit other threads to run, even if the current thread would ordinarily                       | 18432    29
   415       |* continue to run.                                                                               | 18433    29
   416       |*/                                                                                               | 18434    29
   417       |void thrd_yield(void);                                                                           | 18435    29
   418       |                                                                                                 | 18436    29
   419       |/* Thread local storage */                                                                       | 18437    29
   420       |#if defined(_TTHREAD_WIN32_)                                                                     | 18438    29
   421       |typedef DWORD tss_t;                                                                             | 18439    29
   422       |#else                                                                                            | 18440    29
   423       |typedef pthread_key_t tss_t;                                                                     | 18441    29
   424       |#endif                                                                                           | 18442    29
   425       |                                                                                                 | 18443    29
   426       |/** Destructor function for a thread-specific storage.                                           | 18444    29
   427       |* @param val The value of the destructed thread-specific storage.                                | 18445    29
   428       |*/                                                                                               | 18446    29
   429       |typedef void (*tss_dtor_t)(void *val);                                                           | 18447    29
   430       |                                                                                                 | 18448    29
   431       |/** Create a thread-specific storage.                                                            | 18449    29
   432       |* @param key The unique key identifier that will be set if the function is                       | 18450    29
   433       |*        successful.                                                                             | 18451    29
   434       |* @param dtor Destructor function. This can be NULL.                                             | 18452    29
   435       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18453    29
   436       |* not be honored.                                                                                | 18454    29
   437       |* @note On Windows, the @c dtor will definitely be called when                                   | 18455    29
   438       |* appropriate for threads created with @ref thrd_create.  It will be                             | 18456    29
   439       |* called for other threads in most cases, the possible exception being                           | 18457    29
   440       |* for DLLs loaded with LoadLibraryEx.  In order to be certain, you                               | 18458    29
   441       |* should use @ref thrd_create whenever possible.                                                 | 18459    29
   442       |*/                                                                                               | 18460    29
   443       |int tss_create(tss_t *key, tss_dtor_t dtor);                                                     | 18461    29
   444       |                                                                                                 | 18462    29
   445       |/** Delete a thread-specific storage.                                                            | 18463    29
   446       |* The function releases any resources used by the given thread-specific                          | 18464    29
   447       |* storage.                                                                                       | 18465    29
   448       |* @param key The key that shall be deleted.                                                      | 18466    29
   449       |*/                                                                                               | 18467    29
   450       |void tss_delete(tss_t key);                                                                      | 18468    29
   451       |                                                                                                 | 18469    29
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   356


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   452       |/** Get the value for a thread-specific storage.                                                 | 18470    29
   453       |* @param key The thread-specific storage identifier.                                             | 18471    29
   454       |* @return The value for the current thread held in the given thread-specific                     | 18472    29
   455       |* storage.                                                                                       | 18473    29
   456       |*/                                                                                               | 18474    29
   457       |void *tss_get(tss_t key);                                                                        | 18475    29
   458       |                                                                                                 | 18476    29
   459       |/** Set the value for a thread-specific storage.                                                 | 18477    29
   460       |* @param key The thread-specific storage identifier.                                             | 18478    29
   461       |* @param val The value of the thread-specific storage to set for the current                     | 18479    29
   462       |*        thread.                                                                                 | 18480    29
   463       |* @return @ref thrd_success on success, or @ref thrd_error if the request could                  | 18481    29
   464       |* not be honored.                                                                                | 18482    29
   465       |*/                                                                                               | 18483    29
   466       |int tss_set(tss_t key, void *val);                                                               | 18484    29
   467       |                                                                                                 | 18485    29
   468       |#if defined(_TTHREAD_WIN32_)                                                                     | 18486    29
   469       |  typedef struct {                                                                               | 18487    29
   470       |    LONG volatile status;                                                                        | 18488    29
   471       |    CRITICAL_SECTION lock;                                                                       | 18489    29
   472       |  } once_flag;                                                                                   | 18490    29
   473       |  #define ONCE_FLAG_INIT {0,}                                                                    | 18491    29
   474       |#else                                                                                            | 18492    29
   475       |  #define once_flag pthread_once_t                                                               | 18493    29
   476       |  #define ONCE_FLAG_INIT PTHREAD_ONCE_INIT                                                       | 18494    29
   477       |#endif                                                                                           | 18495    29
   478       |                                                                                                 | 18496    29
   479       |/** Invoke a callback exactly once                                                               | 18497    29
   480       | * @param flag Flag used to ensure the callback is invoked exactly                               | 18498    29
   481       | *        once.                                                                                  | 18499    29
   482       | * @param func Callback to invoke.                                                               | 18500    29
   483       | */                                                                                              | 18501    29
   484       |#if defined(_TTHREAD_WIN32_)                                                                     | 18502    29
   485       |  void call_once(once_flag *flag, void (*func)(void));                                           | 18503    29
   486       |#else                                                                                            | 18504    29
   487       |  #define call_once(flag,func) pthread_once(flag,func)                                           | 18505    29
   488       |#endif                                                                                           | 18506    29
   489       |                                                                                                 | 18507    29
   490       |                                                                                                 | 18508    29
   491       |                                                                                                 | 18509    29
   492       |#ifdef __cplusplus                                                                               | 18510    29
   493       |}                                                                                                | 18511    29
   494       |#endif                                                                                           | 18512    29
   495       |                                                                                                 | 18513    29
   496       |#endif /* !WITH_C11THREADS */                                                                    | 18514    29
   497       |                                                                                                 | 18515    29
   498       |/**                                                                                              | 18516    29
   499       | * @brief librdkafka extensions to c11threads                                                    | 18517    29
   500       | */                                                                                              | 18518    29
   501       |#include "tinycthread_extra.h"                                                                   | 18519    29
     1       |/*                                                                                               | 18520    36
     2       | * librdkafka - Apache Kafka C library                                                           | 18521    36
     3       | *                                                                                               | 18522    36
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   357


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     4       | * Copyright (c) 2018 Magnus Edenhill                                                            | 18523    36
     5       | * All rights reserved.                                                                          | 18524    36
     6       | *                                                                                               | 18525    36
     7       | * Redistribution and use in source and binary forms, with or without                            | 18526    36
     8       | * modification, are permitted provided that the following conditions are met:                   | 18527    36
     9       | *                                                                                               | 18528    36
    10       | * 1. Redistributions of source code must retain the above copyright notice,                     | 18529    36
    11       | *    this list of conditions and the following disclaimer.                                      | 18530    36
    12       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  | 18531    36
    13       | *    this list of conditions and the following disclaimer in the documentation                  | 18532    36
    14       | *    and/or other materials provided with the distribution.                                     | 18533    36
    15       | *                                                                                               | 18534    36
    16       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   | 18535    36
    17       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     | 18536    36
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 18537    36
    19       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      | 18538    36
    20       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           | 18539    36
    21       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 18540    36
    22       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 18541    36
    23       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 18542    36
    24       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 18543    36
    25       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 18544    36
    26       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 18545    36
    27       | */                                                                                              | 18546    36
    28       |                                                                                                 | 18547    36
    29       |                                                                                                 | 18548    36
    30       |/**                                                                                              | 18549    36
    31       | * @brief Extra methods added to tinychtread/c11threads                                          | 18550    36
    32       | */                                                                                              | 18551    36
    33       |                                                                                                 | 18552    36
    34       |                                                                                                 | 18553    36
    35       |#ifndef _TINYCTHREAD_EXTRA_H_                                                                    | 18554    36
    36       |#define _TINYCTHREAD_EXTRA_H_                                                                    | 18555    36
    37       |                                                                                                 | 18556    36
    38       |                                                                                                 | 18557    36
    39       |#ifndef _WIN32                                                                                   | 18558    36
    40       |#include <pthread.h> /* needed for rwlock_t */                                                   | 18559    36
    41       |#endif                                                                                           | 18560    36
    42       |                                                                                                 | 18561    36
    43       |                                                                                                 | 18562    36
    44       |/**                                                                                              | 18563    36
    45       | * @brief Set thread system name if platform supports it (pthreads)                              | 18564    36
    46       | * @return thrd_success or thrd_error                                                            | 18565    36
    47       | */                                                                                              | 18566    36
    48       |int thrd_setname (const char *name);                                                             | 18567    36
    49       |                                                                                                 | 18568    36
    50       |/**                                                                                              | 18569    36
    51       | * @brief Checks if passed thread is the current thread.                                         | 18570    36
    52       | * @return non-zero if same thread, else 0.                                                      | 18571    36
    53       | */                                                                                              | 18572    36
    54       |int thrd_is_current(thrd_t thr);                                                                 | 18573    36
    55       |                                                                                                 | 18574    36
    56       |                                                                                                 | 18575    36
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   358


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    57       |                                                                                                 | 18576    36
    58       |                                                                                                 | 18577    36
    59       |/**                                                                                              | 18578    36
    60       | * @brief Same as cnd_timedwait() but takes a relative timeout in milliseconds.                  | 18579    36
    61       | */                                                                                              | 18580    36
    62       |int cnd_timedwait_ms(cnd_t *cnd, mtx_t *mtx, int timeout_ms);                                    | 18581    36
    63       |                                                                                                 | 18582    36
    64       |/**                                                                                              | 18583    36
    65       | * @brief Same as cnd_timedwait_ms() but updates the remaining time.                             | 18584    36
    66       |*/                                                                                               | 18585    36
    67       |int cnd_timedwait_msp (cnd_t *cnd, mtx_t *mtx, int *timeout_msp);                                | 18586    36
    68       |                                                                                                 | 18587    36
    69       |/**                                                                                              | 18588    36
    70       | * @brief Same as cnd_timedwait() but honours                                                    | 18589    36
    71       | *        RD_POLL_INFINITE (uses cnd_wait()),                                                    | 18590    36
    72       | *        and RD_POLL_NOWAIT (return thrd_timedout immediately).                                 | 18591    36
    73       | *                                                                                               | 18592    36
    74       | *  @remark Set up \p tspec with rd_timeout_init_timespec().                                     | 18593    36
    75       | */                                                                                              | 18594    36
    76       |int cnd_timedwait_abs (cnd_t *cnd, mtx_t *mtx, const struct timespec *tspec);                    | 18595    36
    77       |                                                                                                 | 18596    36
    78       |                                                                                                 | 18597    36
    79       |                                                                                                 | 18598    36
    80       |                                                                                                 | 18599    36
    81       |/**                                                                                              | 18600    36
    82       | * @brief Read-write locks                                                                       | 18601    36
    83       | */                                                                                              | 18602    36
    84       |                                                                                                 | 18603    36
    85       |#if defined(_TTHREAD_WIN32_)                                                                     | 18604    36
    86       |typedef struct rwlock_t {                                                                        | 18605    36
    87       |        SRWLOCK  lock;                                                                           | 18606    36
    88       |        LONG     rcnt;                                                                           | 18607    36
    89       |        LONG     wcnt;                                                                           | 18608    36
    90       |} rwlock_t;                                                                                      | 18609    36
    91       |#define rwlock_init(rwl)    do { (rwl)->rcnt = (rwl)->wcnt = 0; InitializeSRWLock(&(rwl)->lock); | 18610    36
    91       +} while (0)                                                                                      + 18610    36
    92       |#define rwlock_destroy(rwl)                                                                      | 18611    36
    93       |#define rwlock_rdlock(rwl)   do { if (0) printf("Thr %i: at %i:   RDLOCK %p   %s (%i, %i)\n", Get| 18612    36
    93       +CurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >= + 18612    36
    93       +0 && (rwl)->wcnt >= 0); AcquireSRWLockShared(&(rwl)->lock); InterlockedIncrement(&(rwl)->rcnt); }+ 18612    36
    93       + while (0)                                                                                       + 18612    36
    94       |#define rwlock_wrlock(rwl)   do { if (0) printf("Thr %i: at %i:   WRLOCK %p   %s (%i, %i)\n", Get| 18613    36
    94       +CurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >= + 18613    36
    94       +0 && (rwl)->wcnt >= 0); AcquireSRWLockExclusive(&(rwl)->lock); InterlockedIncrement(&(rwl)->wcnt)+ 18613    36
    94       +; } while (0)                                                                                    + 18613    36
    95       |#define rwlock_rdunlock(rwl) do { if (0) printf("Thr %i: at %i: RDUNLOCK %p   %s (%i, %i)\n", Get| 18614    36
    95       +CurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt > 0+ 18614    36
    95       + && (rwl)->wcnt >= 0); ReleaseSRWLockShared(&(rwl)->lock); InterlockedDecrement(&(rwl)->rcnt); } + 18614    36
    95       +while (0)                                                                                        + 18614    36
    96       |#define rwlock_wrunlock(rwl) do { if (0) printf("Thr %i: at %i: RWUNLOCK %p   %s (%i, %i)\n", Get| 18615    36
    96       +CurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >= + 18615    36
    96       +0 && (rwl)->wcnt > 0); ReleaseSRWLockExclusive(&(rwl)->lock); InterlockedDecrement(&(rwl)->wcnt);+ 18615    36
    96       + } while (0)                                                                                     + 18615    36
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   359


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    97       |                                                                                                 | 18616    36
    98       |#define rwlock_rdlock_d(rwl)   do { if (1) printf("Thr %i: at %i:   RDLOCK %p   %s (%i, %i)\n", G| 18617    36
    98       +etCurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >+ 18617    36
    98       += 0 && (rwl)->wcnt >= 0); AcquireSRWLockShared(&(rwl)->lock); InterlockedIncrement(&(rwl)->rcnt);+ 18617    36
    98       + } while (0)                                                                                     + 18617    36
    99       |#define rwlock_wrlock_d(rwl)   do { if (1) printf("Thr %i: at %i:   WRLOCK %p   %s (%i, %i)\n", G| 18618    36
    99       +etCurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >+ 18618    36
    99       += 0 && (rwl)->wcnt >= 0); AcquireSRWLockExclusive(&(rwl)->lock); InterlockedIncrement(&(rwl)->wcn+ 18618    36
    99       +t); } while (0)                                                                                  + 18618    36
   100       |#define rwlock_rdunlock_d(rwl) do { if (1) printf("Thr %i: at %i: RDUNLOCK %p   %s (%i, %i)\n", G| 18619    36
   100       +etCurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >+ 18619    36
   100       + 0 && (rwl)->wcnt >= 0); ReleaseSRWLockShared(&(rwl)->lock); InterlockedDecrement(&(rwl)->rcnt); + 18619    36
   100       +} while (0)                                                                                      + 18619    36
   101       |#define rwlock_wrunlock_d(rwl) do { if (1) printf("Thr %i: at %i: RWUNLOCK %p   %s (%i, %i)\n", G| 18620    36
   101       +etCurrentThreadId(), __LINE__, rwl, __FUNCTION__, (rwl)->rcnt, (rwl)->wcnt); assert((rwl)->rcnt >+ 18620    36
   101       += 0 && (rwl)->wcnt > 0); ReleaseSRWLockExclusive(&(rwl)->lock); InterlockedDecrement(&(rwl)->wcnt+ 18620    36
   101       +); } while (0)                                                                                   + 18620    36
   102       |                                                                                                 | 18621    36
   103       |                                                                                                 | 18622    36
   104       |#else                                                                                            | 18623    36
   105       |typedef pthread_rwlock_t rwlock_t;                                                               | 18624    36
   106       |                                                                                                 | 18625    36
   107       |int rwlock_init (rwlock_t *rwl);                                                                 | 18626    36
   108       |int rwlock_destroy (rwlock_t *rwl);                                                              | 18627    36
   109       |int rwlock_rdlock (rwlock_t *rwl);                                                               | 18628    36
   110       |int rwlock_wrlock (rwlock_t *rwl);                                                               | 18629    36
   111       |int rwlock_rdunlock (rwlock_t *rwl);                                                             | 18630    36
   112       |int rwlock_wrunlock (rwlock_t *rwl);                                                             | 18631    36
   113       |                                                                                                 | 18632    36
   114       |#endif                                                                                           | 18633    36
   115       |                                                                                                 | 18634    36
   116       |                                                                                                 | 18635    36
   117       |#endif /* _TINYCTHREAD_EXTRA_H_ */                                                               | 18636    36
   502       |                                                                                                 | 18637    29
   503       |#endif /* _TINYTHREAD_H_ */                                                                      | 18638    29
    57       |#include "rdsysqueue.h"                                                                          | 18639    18
     1       |/*                                                                                               | 18640    37
     2       | * librd - Rapid Development C library                                                           | 18641    37
     3       | *                                                                                               | 18642    37
     4       | * Copyright (c) 2012-2013, Magnus Edenhill                                                      | 18643    37
     5       | * Copyright (c) 2012-2013, Andreas Ãman                                                        | 18644    37
     6       | * All rights reserved.                                                                          | 18645    37
     7       | *                                                                                               | 18646    37
     8       | * Redistribution and use in source and binary forms, with or without                            | 18647    37
     9       | * modification, are permitted provided that the following conditions are met:                   | 18648    37
    10       | *                                                                                               | 18649    37
    11       | * 1. Redistributions of source code must retain the above copyright notice,                     | 18650    37
    12       | *    this list of conditions and the following disclaimer.                                      | 18651    37
    13       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  | 18652    37
    14       | *    this list of conditions and the following disclaimer in the documentation                  | 18653    37
    15       | *    and/or other materials provided with the distribution.                                     | 18654    37
    16       | *                                                                                               | 18655    37
    17       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   | 18656    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   360


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     | 18657    37
    19       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 18658    37
    20       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      | 18659    37
    21       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           | 18660    37
    22       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 18661    37
    23       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 18662    37
    24       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 18663    37
    25       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 18664    37
    26       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 18665    37
    27       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 18666    37
    28       | */                                                                                              | 18667    37
    29       |                                                                                                 | 18668    37
    30       |                                                                                                 | 18669    37
    31       |/*                                                                                               | 18670    37
    32       |                                                                                                 | 18671    37
    33       | *                                                                                               | 18672    37
    34       | * Redistribution and use in source and binary forms, with or without                            | 18673    37
    35       | * modification, are permitted provided that the following conditions                            | 18674    37
    36       | * are met:                                                                                      | 18675    37
    37       | * 1. Redistributions of source code must retain the above copyright                             | 18676    37
    38       | *    notice, this list of conditions and the following disclaimer.                              | 18677    37
    39       | * 2. Redistributions in binary form must reproduce the above copyright                          | 18678    37
    40       | *    notice, this list of conditions and the following disclaimer in the                        | 18679    37
    41       | *    documentation and/or other materials provided with the distribution.                       | 18680    37
    42       | *                                                                                               | 18681    37
    43       | * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS                     | 18682    37
    44       | * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED                   | 18683    37
    45       | * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                    | 18684    37
    46       | * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS                     | 18685    37
    47       | * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                        | 18686    37
    48       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 18687    37
    49       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 18688    37
    50       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 18689    37
    51       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 18690    37
    52       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 18691    37
    53       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 18692    37
    54       | */                                                                                              | 18693    37
    55       |                                                                                                 | 18694    37
    56       |#ifndef _RDSYSQUEUE_H_                                                                           | 18695    37
    57       |#define _RDSYSQUEUE_H_                                                                           | 18696    37
    58       |                                                                                                 | 18697    37
    59       |#include "queue.h"                                                                               | 18698    37
     1       |/*      $NetBSD: queue.h,v 1.68 2014/11/19 08:10:01 uebayasi Exp $      */                       | 18699    38
     2       |                                                                                                 | 18700    38
     3       |/*                                                                                               | 18701    38
     4       | * Copyright (c) 1991, 1993                                                                      | 18702    38
     5       | *      The Regents of the University of California.  All rights reserved.                       | 18703    38
     6       | *                                                                                               | 18704    38
     7       | * Redistribution and use in source and binary forms, with or without                            | 18705    38
     8       | * modification, are permitted provided that the following conditions                            | 18706    38
     9       | * are met:                                                                                      | 18707    38
    10       | * 1. Redistributions of source code must retain the above copyright                             | 18708    38
    11       | *    notice, this list of conditions and the following disclaimer.                              | 18709    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   361


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 18710    38
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 18711    38
    14       | *    documentation and/or other materials provided with the distribution.                       | 18712    38
    15       | * 3. Neither the name of the University nor the names of its contributors                       | 18713    38
    16       | *    may be used to endorse or promote products derived from this software                      | 18714    38
    17       | *    without specific prior written permission.                                                 | 18715    38
    18       | *                                                                                               | 18716    38
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 18717    38
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 18718    38
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 18719    38
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 18720    38
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 18721    38
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 18722    38
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 18723    38
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 18724    38
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 18725    38
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 18726    38
    29       | * SUCH DAMAGE.                                                                                  | 18727    38
    30       | *                                                                                               | 18728    38
    31       | *      @(#)queue.h     8.5 (Berkeley) 8/20/94                                                   | 18729    38
    32       | */                                                                                              | 18730    38
    33       |                                                                                                 | 18731    38
    34       | /*                                                                                              | 18732    38
    35       |  * ASG_LK: MODIFICATION HISTORY                                                                 | 18733    38
    36       |  * ==================================================================================           | 18734    38
    37       |  * TAG          |   DATE (DD/MM/YYYY)    |   JIRA    |   DESCRIPTION                            | 18735    38
    38       |  * ==================================================================================           | 18736    38
    39       |  * ASG_LK01         22/04/2021              -           SYSTEM-C Equivalent                     | 18737    38
    40       |  * ==================================================================================           | 18738    38
    41       | */                                                                                              | 18739    38
    42       |                                                                                                 | 18740    38
    43       |#ifndef _SYS_QUEUE_H_                                                                            | 18741    38
    44       |#define _SYS_QUEUE_H_                                                                            | 18742    38
    45       |                                                                                                 | 18743    38
    46       |/*                                                                                               | 18744    38
    47       | * This file defines five types of data structures: singly-linked lists,                         | 18745    38
    48       | * lists, simple queues, tail queues, and circular queues.                                       | 18746    38
    49       | *                                                                                               | 18747    38
    50       | * A singly-linked list is headed by a single forward pointer. The                               | 18748    38
    51       | * elements are singly linked for minimum space and pointer manipulation                         | 18749    38
    52       | * overhead at the expense of O(n) removal for arbitrary elements. New                           | 18750    38
    53       | * elements can be added to the list after an existing element or at the                         | 18751    38
    54       | * head of the list.  Elements being removed from the head of the list                           | 18752    38
    55       | * should use the explicit macro for this purpose for optimum                                    | 18753    38
    56       | * efficiency. A singly-linked list may only be traversed in the forward                         | 18754    38
    57       | * direction.  Singly-linked lists are ideal for applications with large                         | 18755    38
    58       | * datasets and few or no removals or for implementing a LIFO queue.                             | 18756    38
    59       | *                                                                                               | 18757    38
    60       | * A list is headed by a single forward pointer (or an array of forward                          | 18758    38
    61       | * pointers for a hash table header). The elements are doubly linked                             | 18759    38
    62       | * so that an arbitrary element can be removed without a need to                                 | 18760    38
    63       | * traverse the list. New elements can be added to the list before                               | 18761    38
    64       | * or after an existing element or at the head of the list. A list                               | 18762    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   362


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    65       | * may only be traversed in the forward direction.                                               | 18763    38
    66       | *                                                                                               | 18764    38
    67       | * A simple queue is headed by a pair of pointers, one the head of the                           | 18765    38
    68       | * list and the other to the tail of the list. The elements are singly                           | 18766    38
    69       | * linked to save space, so elements can only be removed from the                                | 18767    38
    70       | * head of the list. New elements can be added to the list after                                 | 18768    38
    71       | * an existing element, at the head of the list, or at the end of the                            | 18769    38
    72       | * list. A simple queue may only be traversed in the forward direction.                          | 18770    38
    73       | *                                                                                               | 18771    38
    74       | * A tail queue is headed by a pair of pointers, one to the head of the                          | 18772    38
    75       | * list and the other to the tail of the list. The elements are doubly                           | 18773    38
    76       | * linked so that an arbitrary element can be removed without a need to                          | 18774    38
    77       | * traverse the list. New elements can be added to the list before or                            | 18775    38
    78       | * after an existing element, at the head of the list, or at the end of                          | 18776    38
    79       | * the list. A tail queue may be traversed in either direction.                                  | 18777    38
    80       | *                                                                                               | 18778    38
    81       | * A circle queue is headed by a pair of pointers, one to the head of the                        | 18779    38
    82       | * list and the other to the tail of the list. The elements are doubly                           | 18780    38
    83       | * linked so that an arbitrary element can be removed without a need to                          | 18781    38
    84       | * traverse the list. New elements can be added to the list before or after                      | 18782    38
    85       | * an existing element, at the head of the list, or at the end of the list.                      | 18783    38
    86       | * A circle queue may be traversed in either direction, but has a more                           | 18784    38
    87       | * complex end of list detection.                                                                | 18785    38
    88       | *                                                                                               | 18786    38
    89       | * For details on the use of these macros, see the queue(3) manual page.                         | 18787    38
    90       | */                                                                                              | 18788    38
    91       |                                                                                                 | 18789    38
    92       |/*                                                                                               | 18790    38
    93       | * Include the definition of NULL only on NetBSD because sys/null.h                              | 18791    38
    94       | * is not available elsewhere.  This conditional makes the header                                | 18792    38
    95       | * portable and it can simply be dropped verbatim into any system.                               | 18793    38
    96       | * The caveat is that on other systems some other header                                         | 18794    38
    97       | * must provide NULL before the macros can be used.                                              | 18795    38
    98       | */                                                                                              | 18796    38
    99       |#ifdef __NetBSD__                                                                                | 18797    38
   100       |#include <sys/null.h>                                                                            | 18798    38
   101       |#endif                                                                                           | 18799    38
   102       |                                                                                                 | 18800    38
   103       |#if defined(QUEUEDEBUG)                                                                          | 18801    38
   104       |# if defined(_KERNEL)                                                                            | 18802    38
   105       |#  define QUEUEDEBUG_ABORT(...) panic(__VA_ARGS__)                                               | 18803    38
   106       |# else                                                                                           | 18804    38
   107       |#  include <err.h>                                                                               | 18805    38
   108       |#  define QUEUEDEBUG_ABORT(...) err(1, __VA_ARGS__)                                              | 18806    38
   109       |# endif                                                                                          | 18807    38
   110       |#endif                                                                                           | 18808    38
   111       |                                                                                                 | 18809    38
   112       |/*                                                                                               | 18810    38
   113       | * Singly-linked List definitions.                                                               | 18811    38
   114       | */                                                                                              | 18812    38
   115       |#define SLIST_HEAD(name, type)                                          \                        | 18813    38
   116       |struct name {                                                           \                        | 18814    38
   117       |        struct type *slh_first; /* first element */                     \                        | 18815    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   363


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   118       |}                                                                                                | 18816    38
   119       |                                                                                                 | 18817    38
   120       |#define SLIST_HEAD_INITIALIZER(head)                                    \                        | 18818    38
   121       |        { NULL }                                                                                 | 18819    38
   122       |                                                                                                 | 18820    38
   123       |#define SLIST_ENTRY(type)                                               \                        | 18821    38
   124       |struct {                                                                \                        | 18822    38
   125       |        struct type *sle_next;  /* next element */                      \                        | 18823    38
   126       |}                                                                                                | 18824    38
   127       |                                                                                                 | 18825    38
   128       |/*                                                                                               | 18826    38
   129       | * Singly-linked List access methods.                                                            | 18827    38
   130       | */                                                                                              | 18828    38
   131       |#define SLIST_FIRST(head)       ((head)->slh_first)                                              | 18829    38
   132       |#define SLIST_END(head)         NULL                                                             | 18830    38
   133       |#define SLIST_EMPTY(head)       ((head)->slh_first == NULL)                                      | 18831    38
   134       |#define SLIST_NEXT(elm, field)  ((elm)->field.sle_next)                                          | 18832    38
   135       |                                                                                                 | 18833    38
   136       |#define SLIST_FOREACH(var, head, field)                                 \                        | 18834    38
   137       |        for((var) = (head)->slh_first;                                  \                        | 18835    38
   138       |            (var) != SLIST_END(head);                                   \                        | 18836    38
   139       |            (var) = (var)->field.sle_next)                                                       | 18837    38
   140       |                                                                                                 | 18838    38
   141       |#define SLIST_FOREACH_SAFE(var, head, field, tvar)                      \                        | 18839    38
   142       |        for ((var) = SLIST_FIRST((head));                               \                        | 18840    38
   143       |            (var) != SLIST_END(head) &&                                 \                        | 18841    38
   144       |            ((tvar) = SLIST_NEXT((var), field), 1);                     \                        | 18842    38
   145       |            (var) = (tvar))                                                                      | 18843    38
   146       |                                                                                                 | 18844    38
   147       |/*                                                                                               | 18845    38
   148       | * Singly-linked List functions.                                                                 | 18846    38
   149       | */                                                                                              | 18847    38
   150       |#define SLIST_INIT(head) do {                                           \                        | 18848    38
   151       |        (head)->slh_first = SLIST_END(head);                            \                        | 18849    38
   152       |} while (/*CONSTCOND*/0)                                                                         | 18850    38
   153       |                                                                                                 | 18851    38
   154       |#define SLIST_INSERT_AFTER(slistelm, elm, field) do {                   \                        | 18852    38
   155       |        (elm)->field.sle_next = (slistelm)->field.sle_next;             \                        | 18853    38
   156       |        (slistelm)->field.sle_next = (elm);                             \                        | 18854    38
   157       |} while (/*CONSTCOND*/0)                                                                         | 18855    38
   158       |                                                                                                 | 18856    38
   159       |#define SLIST_INSERT_HEAD(head, elm, field) do {                        \                        | 18857    38
   160       |        (elm)->field.sle_next = (head)->slh_first;                      \                        | 18858    38
   161       |        (head)->slh_first = (elm);                                      \                        | 18859    38
   162       |} while (/*CONSTCOND*/0)                                                                         | 18860    38
   163       |                                                                                                 | 18861    38
   164       |#define SLIST_REMOVE_AFTER(slistelm, field) do {                        \                        | 18862    38
   165       |        (slistelm)->field.sle_next =                                    \                        | 18863    38
   166       |            SLIST_NEXT(SLIST_NEXT((slistelm), field), field);           \                        | 18864    38
   167       |} while (/*CONSTCOND*/0)                                                                         | 18865    38
   168       |                                                                                                 | 18866    38
   169       |#define SLIST_REMOVE_HEAD(head, field) do {                             \                        | 18867    38
   170       |        (head)->slh_first = (head)->slh_first->field.sle_next;          \                        | 18868    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   364


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   171       |} while (/*CONSTCOND*/0)                                                                         | 18869    38
   172       |                                                                                                 | 18870    38
   173       |#define SLIST_REMOVE(head, elm, type, field) do {                       \                        | 18871    38
   174       |        if ((head)->slh_first == (elm)) {                               \                        | 18872    38
   175       |                SLIST_REMOVE_HEAD((head), field);                       \                        | 18873    38
   176       |        }                                                               \                        | 18874    38
   177       |        else {                                                          \                        | 18875    38
   178       |                struct type *curelm = (head)->slh_first;                \                        | 18876    38
   179       |                while(curelm->field.sle_next != (elm))                  \                        | 18877    38
   180       |                        curelm = curelm->field.sle_next;                \                        | 18878    38
   181       |                curelm->field.sle_next =                                \                        | 18879    38
   182       |                    curelm->field.sle_next->field.sle_next;             \                        | 18880    38
   183       |        }                                                               \                        | 18881    38
   184       |} while (/*CONSTCOND*/0)                                                                         | 18882    38
   185       |                                                                                                 | 18883    38
   186       |                                                                                                 | 18884    38
   187       |/*                                                                                               | 18885    38
   188       | * List definitions.                                                                             | 18886    38
   189       | */                                                                                              | 18887    38
   190       |#define LIST_HEAD(name, type)                                           \                        | 18888    38
   191       |struct name {                                                           \                        | 18889    38
   192       |        struct type *lh_first;  /* first element */                     \                        | 18890    38
   193       |}                                                                                                | 18891    38
   194       |                                                                                                 | 18892    38
   195       |#define LIST_HEAD_INITIALIZER(head)                                     \                        | 18893    38
   196       |        { NULL }                                                                                 | 18894    38
   197       |                                                                                                 | 18895    38
   198       |#define LIST_ENTRY(type)                                                \                        | 18896    38
   199       |struct {                                                                \                        | 18897    38
   200       |        struct type *le_next;   /* next element */                      \                        | 18898    38
   201       |        struct type **le_prev;  /* address of previous next element */  \                        | 18899    38
   202       |}                                                                                                | 18900    38
   203       |                                                                                                 | 18901    38
   204       |/*                                                                                               | 18902    38
   205       | * List access methods.                                                                          | 18903    38
   206       | */                                                                                              | 18904    38
   207       |#define LIST_FIRST(head)                ((head)->lh_first)                                       | 18905    38
   208       |#define LIST_END(head)                  NULL                                                     | 18906    38
   209       |#define LIST_EMPTY(head)                ((head)->lh_first == LIST_END(head))                     | 18907    38
   210       |#define LIST_NEXT(elm, field)           ((elm)->field.le_next)                                   | 18908    38
   211       |                                                                                                 | 18909    38
   212       |#define LIST_FOREACH(var, head, field)                                  \                        | 18910    38
   213       |        for ((var) = ((head)->lh_first);                                \                        | 18911    38
   214       |            (var) != LIST_END(head);                                    \                        | 18912    38
   215       |            (var) = ((var)->field.le_next))                                                      | 18913    38
   216       |                                                                                                 | 18914    38
   217       |#define LIST_FOREACH_SAFE(var, head, field, tvar)                       \                        | 18915    38
   218       |        for ((var) = LIST_FIRST((head));                                \                        | 18916    38
   219       |            (var) != LIST_END(head) &&                                  \                        | 18917    38
   220       |            ((tvar) = LIST_NEXT((var), field), 1);                      \                        | 18918    38
   221       |            (var) = (tvar))                                                                      | 18919    38
   222       |                                                                                                 | 18920    38
   223       |#define LIST_MOVE(head1, head2) do {                                    \                        | 18921    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   365


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   224       |        LIST_INIT((head2));                                             \                        | 18922    38
   225       |        if (!LIST_EMPTY((head1))) {                                     \                        | 18923    38
   226       |                (head2)->lh_first = (head1)->lh_first;                  \                        | 18924    38
   227       |                LIST_INIT((head1));                                     \                        | 18925    38
   228       |        }                                                               \                        | 18926    38
   229       |} while (/*CONSTCOND*/0)                                                                         | 18927    38
   230       |                                                                                                 | 18928    38
   231       |/*                                                                                               | 18929    38
   232       | * List functions.                                                                               | 18930    38
   233       | */                                                                                              | 18931    38
   234       |#if defined(QUEUEDEBUG)                                                                          | 18932    38
   235       |#define QUEUEDEBUG_LIST_INSERT_HEAD(head, elm, field)                   \                        | 18933    38
   236       |        if ((head)->lh_first &&                                         \                        | 18934    38
   237       |            (head)->lh_first->field.le_prev != &(head)->lh_first)       \                        | 18935    38
   238       |                QUEUEDEBUG_ABORT("LIST_INSERT_HEAD %p %s:%d", (head),   \                        | 18936    38
   239       |                    __FILE__, __LINE__);                                                         | 18937    38
   240       |#define QUEUEDEBUG_LIST_OP(elm, field)                                  \                        | 18938    38
   241       |        if ((elm)->field.le_next &&                                     \                        | 18939    38
   242       |            (elm)->field.le_next->field.le_prev !=                      \                        | 18940    38
   243       |            &(elm)->field.le_next)                                      \                        | 18941    38
   244       |                QUEUEDEBUG_ABORT("LIST_* forw %p %s:%d", (elm),         \                        | 18942    38
   245       |                    __FILE__, __LINE__);                                \                        | 18943    38
   246       |        if (*(elm)->field.le_prev != (elm))                             \                        | 18944    38
   247       |                QUEUEDEBUG_ABORT("LIST_* back %p %s:%d", (elm),         \                        | 18945    38
   248       |                    __FILE__, __LINE__);                                                         | 18946    38
   249       |#define QUEUEDEBUG_LIST_POSTREMOVE(elm, field)                          \                        | 18947    38
   250       |        (elm)->field.le_next = (void *)1L;                              \                        | 18948    38
   251       |        (elm)->field.le_prev = (void *)1L;                                                       | 18949    38
   252       |#else                                                                                            | 18950    38
   253       |#define QUEUEDEBUG_LIST_INSERT_HEAD(head, elm, field)                                            | 18951    38
   254       |#define QUEUEDEBUG_LIST_OP(elm, field)                                                           | 18952    38
   255       |#define QUEUEDEBUG_LIST_POSTREMOVE(elm, field)                                                   | 18953    38
   256       |#endif                                                                                           | 18954    38
   257       |                                                                                                 | 18955    38
   258       |#define LIST_INIT(head) do {                                            \                        | 18956    38
   259       |        (head)->lh_first = LIST_END(head);                              \                        | 18957    38
   260       |} while (/*CONSTCOND*/0)                                                                         | 18958    38
   261       |                                                                                                 | 18959    38
   262       |#define LIST_INSERT_AFTER(listelm, elm, field) do {                     \                        | 18960    38
   263       |        QUEUEDEBUG_LIST_OP((listelm), field)                            \                        | 18961    38
   264       |        if (((elm)->field.le_next = (listelm)->field.le_next) !=        \                        | 18962    38
   265       |            LIST_END(head))                                             \                        | 18963    38
   266       |                (listelm)->field.le_next->field.le_prev =               \                        | 18964    38
   267       |                    &(elm)->field.le_next;                              \                        | 18965    38
   268       |        (listelm)->field.le_next = (elm);                               \                        | 18966    38
   269       |        (elm)->field.le_prev = &(listelm)->field.le_next;               \                        | 18967    38
   270       |} while (/*CONSTCOND*/0)                                                                         | 18968    38
   271       |                                                                                                 | 18969    38
   272       |#define LIST_INSERT_BEFORE(listelm, elm, field) do {                    \                        | 18970    38
   273       |        QUEUEDEBUG_LIST_OP((listelm), field)                            \                        | 18971    38
   274       |        (elm)->field.le_prev = (listelm)->field.le_prev;                \                        | 18972    38
   275       |        (elm)->field.le_next = (listelm);                               \                        | 18973    38
   276       |        *(listelm)->field.le_prev = (elm);                              \                        | 18974    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   366


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   277       |        (listelm)->field.le_prev = &(elm)->field.le_next;               \                        | 18975    38
   278       |} while (/*CONSTCOND*/0)                                                                         | 18976    38
   279       |                                                                                                 | 18977    38
   280       |#define LIST_INSERT_HEAD(head, elm, field) do {                         \                        | 18978    38
   281       |        QUEUEDEBUG_LIST_INSERT_HEAD((head), (elm), field)               \                        | 18979    38
   282       |        if (((elm)->field.le_next = (head)->lh_first) != LIST_END(head))\                        | 18980    38
   283       |                (head)->lh_first->field.le_prev = &(elm)->field.le_next;\                        | 18981    38
   284       |        (head)->lh_first = (elm);                                       \                        | 18982    38
   285       |        (elm)->field.le_prev = &(head)->lh_first;                       \                        | 18983    38
   286       |} while (/*CONSTCOND*/0)                                                                         | 18984    38
   287       |                                                                                                 | 18985    38
   288       |#define LIST_REMOVE(elm, field) do {                                    \                        | 18986    38
   289       |        QUEUEDEBUG_LIST_OP((elm), field)                                \                        | 18987    38
   290       |        if ((elm)->field.le_next != NULL)                               \                        | 18988    38
   291       |                (elm)->field.le_next->field.le_prev =                   \                        | 18989    38
   292       |                    (elm)->field.le_prev;                               \                        | 18990    38
   293       |        *(elm)->field.le_prev = (elm)->field.le_next;                   \                        | 18991    38
   294       |        QUEUEDEBUG_LIST_POSTREMOVE((elm), field)                        \                        | 18992    38
   295       |} while (/*CONSTCOND*/0)                                                                         | 18993    38
   296       |                                                                                                 | 18994    38
   297       |#define LIST_REPLACE(elm, elm2, field) do {                             \                        | 18995    38
   298       |        if (((elm2)->field.le_next = (elm)->field.le_next) != NULL)     \                        | 18996    38
   299       |                (elm2)->field.le_next->field.le_prev =                  \                        | 18997    38
   300       |                    &(elm2)->field.le_next;                             \                        | 18998    38
   301       |        (elm2)->field.le_prev = (elm)->field.le_prev;                   \                        | 18999    38
   302       |        *(elm2)->field.le_prev = (elm2);                                \                        | 19000    38
   303       |        QUEUEDEBUG_LIST_POSTREMOVE((elm), field)                        \                        | 19001    38
   304       |} while (/*CONSTCOND*/0)                                                                         | 19002    38
   305       |                                                                                                 | 19003    38
   306       |/*                                                                                               | 19004    38
   307       | * Simple queue definitions.                                                                     | 19005    38
   308       | */                                                                                              | 19006    38
   309       |#define SIMPLEQ_HEAD(name, type)                                        \                        | 19007    38
   310       |struct name {                                                           \                        | 19008    38
   311       |        struct type *sqh_first; /* first element */                     \                        | 19009    38
   312       |        struct type **sqh_last; /* addr of last next element */         \                        | 19010    38
   313       |}                                                                                                | 19011    38
   314       |                                                                                                 | 19012    38
   315       |#define SIMPLEQ_HEAD_INITIALIZER(head)                                  \                        | 19013    38
   316       |        { NULL, &(head).sqh_first }                                                              | 19014    38
   317       |                                                                                                 | 19015    38
   318       |#define SIMPLEQ_ENTRY(type)                                             \                        | 19016    38
   319       |struct {                                                                \                        | 19017    38
   320       |        struct type *sqe_next;  /* next element */                      \                        | 19018    38
   321       |}                                                                                                | 19019    38
   322       |                                                                                                 | 19020    38
   323       |/*                                                                                               | 19021    38
   324       | * Simple queue access methods.                                                                  | 19022    38
   325       | */                                                                                              | 19023    38
   326       |#define SIMPLEQ_FIRST(head)             ((head)->sqh_first)                                      | 19024    38
   327       |#define SIMPLEQ_END(head)               NULL                                                     | 19025    38
   328       |#define SIMPLEQ_EMPTY(head)             ((head)->sqh_first == SIMPLEQ_END(head))                 | 19026    38
   329       |#define SIMPLEQ_NEXT(elm, field)        ((elm)->field.sqe_next)                                  | 19027    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   367


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   330       |                                                                                                 | 19028    38
   331       |#define SIMPLEQ_FOREACH(var, head, field)                               \                        | 19029    38
   332       |        for ((var) = ((head)->sqh_first);                               \                        | 19030    38
   333       |            (var) != SIMPLEQ_END(head);                                 \                        | 19031    38
   334       |            (var) = ((var)->field.sqe_next))                                                     | 19032    38
   335       |                                                                                                 | 19033    38
   336       |#define SIMPLEQ_FOREACH_SAFE(var, head, field, next)                    \                        | 19034    38
   337       |        for ((var) = ((head)->sqh_first);                               \                        | 19035    38
   338       |            (var) != SIMPLEQ_END(head) &&                               \                        | 19036    38
   339       |            ((next = ((var)->field.sqe_next)), 1);                      \                        | 19037    38
   340       |            (var) = (next))                                                                      | 19038    38
   341       |                                                                                                 | 19039    38
   342       |/*                                                                                               | 19040    38
   343       | * Simple queue functions.                                                                       | 19041    38
   344       | */                                                                                              | 19042    38
   345       |#define SIMPLEQ_INIT(head) do {                                         \                        | 19043    38
   346       |        (head)->sqh_first = NULL;                                       \                        | 19044    38
   347       |        (head)->sqh_last = &(head)->sqh_first;                          \                        | 19045    38
   348       |} while (/*CONSTCOND*/0)                                                                         | 19046    38
   349       |                                                                                                 | 19047    38
   350       |#define SIMPLEQ_INSERT_HEAD(head, elm, field) do {                      \                        | 19048    38
   351       |        if (((elm)->field.sqe_next = (head)->sqh_first) == NULL)        \                        | 19049    38
   352       |                (head)->sqh_last = &(elm)->field.sqe_next;              \                        | 19050    38
   353       |        (head)->sqh_first = (elm);                                      \                        | 19051    38
   354       |} while (/*CONSTCOND*/0)                                                                         | 19052    38
   355       |                                                                                                 | 19053    38
   356       |#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {                      \                        | 19054    38
   357       |        (elm)->field.sqe_next = NULL;                                   \                        | 19055    38
   358       |        *(head)->sqh_last = (elm);                                      \                        | 19056    38
   359       |        (head)->sqh_last = &(elm)->field.sqe_next;                      \                        | 19057    38
   360       |} while (/*CONSTCOND*/0)                                                                         | 19058    38
   361       |                                                                                                 | 19059    38
   362       |#define SIMPLEQ_INSERT_AFTER(head, listelm, elm, field) do {            \                        | 19060    38
   363       |        if (((elm)->field.sqe_next = (listelm)->field.sqe_next) == NULL)\                        | 19061    38
   364       |                (head)->sqh_last = &(elm)->field.sqe_next;              \                        | 19062    38
   365       |        (listelm)->field.sqe_next = (elm);                              \                        | 19063    38
   366       |} while (/*CONSTCOND*/0)                                                                         | 19064    38
   367       |                                                                                                 | 19065    38
   368       |#define SIMPLEQ_REMOVE_HEAD(head, field) do {                           \                        | 19066    38
   369       |        if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \                   | 19067    38
   370       |                (head)->sqh_last = &(head)->sqh_first;                  \                        | 19068    38
   371       |} while (/*CONSTCOND*/0)                                                                         | 19069    38
   372       |                                                                                                 | 19070    38
   373       |#define SIMPLEQ_REMOVE_AFTER(head, elm, field) do {                     \                        | 19071    38
   374       |        if (((elm)->field.sqe_next = (elm)->field.sqe_next->field.sqe_next) \                    | 19072    38
   375       |            == NULL)                                                    \                        | 19073    38
   376       |                (head)->sqh_last = &(elm)->field.sqe_next;              \                        | 19074    38
   377       |} while (/*CONSTCOND*/0)                                                                         | 19075    38
   378       |                                                                                                 | 19076    38
   379       |#define SIMPLEQ_REMOVE(head, elm, type, field) do {                     \                        | 19077    38
   380       |        if ((head)->sqh_first == (elm)) {                               \                        | 19078    38
   381       |                SIMPLEQ_REMOVE_HEAD((head), field);                     \                        | 19079    38
   382       |        } else {                                                        \                        | 19080    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   368


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   383       |                struct type *curelm = (head)->sqh_first;                \                        | 19081    38
   384       |                while (curelm->field.sqe_next != (elm))                 \                        | 19082    38
   385       |                        curelm = curelm->field.sqe_next;                \                        | 19083    38
   386       |                if ((curelm->field.sqe_next =                           \                        | 19084    38
   387       |                        curelm->field.sqe_next->field.sqe_next) == NULL) \                       | 19085    38
   388       |                            (head)->sqh_last = &(curelm)->field.sqe_next; \                      | 19086    38
   389       |        }                                                               \                        | 19087    38
   390       |} while (/*CONSTCOND*/0)                                                                         | 19088    38
   391       |                                                                                                 | 19089    38
   392       |#define SIMPLEQ_CONCAT(head1, head2) do {                               \                        | 19090    38
   393       |        if (!SIMPLEQ_EMPTY((head2))) {                                  \                        | 19091    38
   394       |                *(head1)->sqh_last = (head2)->sqh_first;                \                        | 19092    38
   395       |                (head1)->sqh_last = (head2)->sqh_last;          \                                | 19093    38
   396       |                SIMPLEQ_INIT((head2));                                  \                        | 19094    38
   397       |        }                                                               \                        | 19095    38
   398       |} while (/*CONSTCOND*/0)                                                                         | 19096    38
   399       |                                                                                                 | 19097    38
   400       |#define SIMPLEQ_LAST(head, type, field)                                 \                        | 19098    38
   401       |        (SIMPLEQ_EMPTY((head)) ?                                                \                | 19099    38
   402       |                NULL :                                                  \                        | 19100    38
   403       |                ((struct type *)(void *)                                \                        | 19101    38
   404       |                ((char *)((head)->sqh_last) - offsetof(struct type, field))))                    | 19102    38
   405       |                                                                                                 | 19103    38
   406       |/*                                                                                               | 19104    38
   407       | * Tail queue definitions.                                                                       | 19105    38
   408       | */                                                                                              | 19106    38
   409       |#define _TAILQ_HEAD(name, type, qual)                                   \                        | 19107    38
   410       |struct name {                                                           \                        | 19108    38
   411       |        qual type *tqh_first;           /* first element */             \                        | 19109    38
   412       |        qual type *qual *tqh_last;      /* addr of last next element */ \                        | 19110    38
   413       |}                                                                                                | 19111    38
   414       |#define TAILQ_HEAD(name, type)  _TAILQ_HEAD(name, struct type,)                                  | 19112    38
   415       |                                                                                                 | 19113    38
   416       |#define TAILQ_HEAD_INITIALIZER(head)                                    \                        | 19114    38
   417       |        { TAILQ_END(head), &(head).tqh_first }                                                   | 19115    38
   418       |                                                                                                 | 19116    38
   419       |#define _TAILQ_ENTRY(type, qual)                                        \                        | 19117    38
   420       |struct {                                                                \                        | 19118    38
   421       |        qual type *tqe_next;            /* next element */              \                        | 19119    38
   422       |        qual type *qual *tqe_prev;      /* address of previous next element */\                  | 19120    38
   423       |}                                                                                                | 19121    38
   424       |#define TAILQ_ENTRY(type)       _TAILQ_ENTRY(struct type,)                                       | 19122    38
   425       |                                                                                                 | 19123    38
   426       |/*                                                                                               | 19124    38
   427       | * Tail queue access methods.                                                                    | 19125    38
   428       | */                                                                                              | 19126    38
   429       |#define TAILQ_FIRST(head)               ((head)->tqh_first)                                      | 19127    38
   430       |#define TAILQ_END(head)                 (NULL)                                                   | 19128    38
   431       |#define TAILQ_NEXT(elm, field)          ((elm)->field.tqe_next)                                  | 19129    38
   432       |#define TAILQ_LAST(head, headname) \                                                             | 19130    38
   433       |        (*(((struct headname *)((head)->tqh_last))->tqh_last))                                   | 19131    38
   434       |#define TAILQ_PREV(elm, headname, field) \                                                       | 19132    38
   435       |        (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))                              | 19133    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   369


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   436       |#define TAILQ_EMPTY(head)               (TAILQ_FIRST(head) == TAILQ_END(head))                   | 19134    38
   437       |                                                                                                 | 19135    38
   438       |                                                                                                 | 19136    38
   439       |#define TAILQ_FOREACH(var, head, field)                                 \                        | 19137    38
   440       |        for ((var) = ((head)->tqh_first);                               \                        | 19138    38
   441       |            (var) != TAILQ_END(head);                                   \                        | 19139    38
   442       |            (var) = ((var)->field.tqe_next))                                                     | 19140    38
   443       |                                                                                                 | 19141    38
   444       |#define TAILQ_FOREACH_SAFE(var, head, field, next)                      \                        | 19142    38
   445       |        for ((var) = ((head)->tqh_first);                               \                        | 19143    38
   446       |            (var) != TAILQ_END(head) &&                                 \                        | 19144    38
   447       |            ((next) = TAILQ_NEXT(var, field), 1); (var) = (next))                                | 19145    38
   448       |                                                                                                 | 19146    38
   449       |#define TAILQ_FOREACH_REVERSE(var, head, headname, field)               \                        | 19147    38
   450       |        for ((var) = (*(((struct headname *)((head)->tqh_last))->tqh_last));\                    | 19148    38
   451       |            (var) != TAILQ_END(head);                                   \                        | 19149    38
   452       |            (var) = (*(((struct headname *)((var)->field.tqe_prev))->tqh_last)))                 | 19150    38
   453       |                                                                                                 | 19151    38
   454       |#define TAILQ_FOREACH_REVERSE_SAFE(var, head, headname, field, prev)    \                        | 19152    38
   455       |        for ((var) = TAILQ_LAST((head), headname);                      \                        | 19153    38
   456       |            (var) != TAILQ_END(head) &&                                 \                        | 19154    38
   457       |            ((prev) = TAILQ_PREV((var), headname, field), 1); (var) = (prev))                    | 19155    38
   458       |                                                                                                 | 19156    38
   459       |/*                                                                                               | 19157    38
   460       | * Tail queue functions.                                                                         | 19158    38
   461       | */                                                                                              | 19159    38
   462       |#if defined(QUEUEDEBUG)                                                                          | 19160    38
   463       |#define QUEUEDEBUG_TAILQ_INSERT_HEAD(head, elm, field)                  \                        | 19161    38
   464       |        if ((head)->tqh_first &&                                        \                        | 19162    38
   465       |            (head)->tqh_first->field.tqe_prev != &(head)->tqh_first)    \                        | 19163    38
   466       |                QUEUEDEBUG_ABORT("TAILQ_INSERT_HEAD %p %s:%d", (head),  \                        | 19164    38
   467       |                    __FILE__, __LINE__);                                                         | 19165    38
   468       |#define QUEUEDEBUG_TAILQ_INSERT_TAIL(head, elm, field)                  \                        | 19166    38
   469       |        if (*(head)->tqh_last != NULL)                                  \                        | 19167    38
   470       |                QUEUEDEBUG_ABORT("TAILQ_INSERT_TAIL %p %s:%d", (head),  \                        | 19168    38
   471       |                    __FILE__, __LINE__);                                                         | 19169    38
   472       |#define QUEUEDEBUG_TAILQ_OP(elm, field)                                 \                        | 19170    38
   473       |        if ((elm)->field.tqe_next &&                                    \                        | 19171    38
   474       |            (elm)->field.tqe_next->field.tqe_prev !=                    \                        | 19172    38
   475       |            &(elm)->field.tqe_next)                                     \                        | 19173    38
   476       |                QUEUEDEBUG_ABORT("TAILQ_* forw %p %s:%d", (elm),        \                        | 19174    38
   477       |                    __FILE__, __LINE__);                                \                        | 19175    38
   478       |        if (*(elm)->field.tqe_prev != (elm))                            \                        | 19176    38
   479       |                QUEUEDEBUG_ABORT("TAILQ_* back %p %s:%d", (elm),        \                        | 19177    38
   480       |                    __FILE__, __LINE__);                                                         | 19178    38
   481       |#define QUEUEDEBUG_TAILQ_PREREMOVE(head, elm, field)                    \                        | 19179    38
   482       |        if ((elm)->field.tqe_next == NULL &&                            \                        | 19180    38
   483       |            (head)->tqh_last != &(elm)->field.tqe_next)                 \                        | 19181    38
   484       |                QUEUEDEBUG_ABORT("TAILQ_PREREMOVE head %p elm %p %s:%d",\                        | 19182    38
   485       |                    (head), (elm), __FILE__, __LINE__);                                          | 19183    38
   486       |#define QUEUEDEBUG_TAILQ_POSTREMOVE(elm, field)                         \                        | 19184    38
   487       |        (elm)->field.tqe_next = (void *)1L;                             \                        | 19185    38
   488       |        (elm)->field.tqe_prev = (void *)1L;                                                      | 19186    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   370


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   489       |#else                                                                                            | 19187    38
   490       |#define QUEUEDEBUG_TAILQ_INSERT_HEAD(head, elm, field)                                           | 19188    38
   491       |#define QUEUEDEBUG_TAILQ_INSERT_TAIL(head, elm, field)                                           | 19189    38
   492       |#define QUEUEDEBUG_TAILQ_OP(elm, field)                                                          | 19190    38
   493       |#define QUEUEDEBUG_TAILQ_PREREMOVE(head, elm, field)                                             | 19191    38
   494       |#define QUEUEDEBUG_TAILQ_POSTREMOVE(elm, field)                                                  | 19192    38
   495       |#endif                                                                                           | 19193    38
   496       |                                                                                                 | 19194    38
   497       |#define TAILQ_INIT(head) do {                                           \                        | 19195    38
   498       |        (head)->tqh_first = TAILQ_END(head);                            \                        | 19196    38
   499       |        (head)->tqh_last = &(head)->tqh_first;                          \                        | 19197    38
   500       |} while (/*CONSTCOND*/0)                                                                         | 19198    38
   501       |                                                                                                 | 19199    38
   502       |#define TAILQ_INSERT_HEAD(head, elm, field) do {                        \                        | 19200    38
   503       |        QUEUEDEBUG_TAILQ_INSERT_HEAD((head), (elm), field)              \                        | 19201    38
   504       |        if (((elm)->field.tqe_next = (head)->tqh_first) != TAILQ_END(head))\                     | 19202    38
   505       |                (head)->tqh_first->field.tqe_prev =                     \                        | 19203    38
   506       |                    &(elm)->field.tqe_next;                             \                        | 19204    38
   507       |        else                                                            \                        | 19205    38
   508       |                (head)->tqh_last = &(elm)->field.tqe_next;              \                        | 19206    38
   509       |        (head)->tqh_first = (elm);                                      \                        | 19207    38
   510       |        (elm)->field.tqe_prev = &(head)->tqh_first;                     \                        | 19208    38
   511       |} while (/*CONSTCOND*/0)                                                                         | 19209    38
   512       |                                                                                                 | 19210    38
   513       |#define TAILQ_INSERT_TAIL(head, elm, field) do {                        \                        | 19211    38
   514       |        QUEUEDEBUG_TAILQ_INSERT_TAIL((head), (elm), field)              \                        | 19212    38
   515       |        (elm)->field.tqe_next = TAILQ_END(head);                        \                        | 19213    38
   516       |        (elm)->field.tqe_prev = (head)->tqh_last;                       \                        | 19214    38
   517       |        *(head)->tqh_last = (elm);                                      \                        | 19215    38
   518       |        (head)->tqh_last = &(elm)->field.tqe_next;                      \                        | 19216    38
   519       |} while (/*CONSTCOND*/0)                                                                         | 19217    38
   520       |                                                                                                 | 19218    38
   521       |#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {              \                        | 19219    38
   522       |        QUEUEDEBUG_TAILQ_OP((listelm), field)                           \                        | 19220    38
   523       |        if (((elm)->field.tqe_next = (listelm)->field.tqe_next) !=      \                        | 19221    38
   524       |            TAILQ_END(head))                                            \                        | 19222    38
   525       |                (elm)->field.tqe_next->field.tqe_prev =                 \                        | 19223    38
   526       |                    &(elm)->field.tqe_next;                             \                        | 19224    38
   527       |        else                                                            \                        | 19225    38
   528       |                (head)->tqh_last = &(elm)->field.tqe_next;              \                        | 19226    38
   529       |        (listelm)->field.tqe_next = (elm);                              \                        | 19227    38
   530       |        (elm)->field.tqe_prev = &(listelm)->field.tqe_next;             \                        | 19228    38
   531       |} while (/*CONSTCOND*/0)                                                                         | 19229    38
   532       |                                                                                                 | 19230    38
   533       |#define TAILQ_INSERT_BEFORE(listelm, elm, field) do {                   \                        | 19231    38
   534       |        QUEUEDEBUG_TAILQ_OP((listelm), field)                           \                        | 19232    38
   535       |        (elm)->field.tqe_prev = (listelm)->field.tqe_prev;              \                        | 19233    38
   536       |        (elm)->field.tqe_next = (listelm);                              \                        | 19234    38
   537       |        *(listelm)->field.tqe_prev = (elm);                             \                        | 19235    38
   538       |        (listelm)->field.tqe_prev = &(elm)->field.tqe_next;             \                        | 19236    38
   539       |} while (/*CONSTCOND*/0)                                                                         | 19237    38
   540       |                                                                                                 | 19238    38
   541       |#define TAILQ_REMOVE(head, elm, field) do {                             \                        | 19239    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   371


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   542       |        QUEUEDEBUG_TAILQ_PREREMOVE((head), (elm), field)                \                        | 19240    38
   543       |        QUEUEDEBUG_TAILQ_OP((elm), field)                               \                        | 19241    38
   544       |        if (((elm)->field.tqe_next) != TAILQ_END(head))                 \                        | 19242    38
   545       |                (elm)->field.tqe_next->field.tqe_prev =                 \                        | 19243    38
   546       |                    (elm)->field.tqe_prev;                              \                        | 19244    38
   547       |        else                                                            \                        | 19245    38
   548       |                (head)->tqh_last = (elm)->field.tqe_prev;               \                        | 19246    38
   549       |        *(elm)->field.tqe_prev = (elm)->field.tqe_next;                 \                        | 19247    38
   550       |        QUEUEDEBUG_TAILQ_POSTREMOVE((elm), field);                      \                        | 19248    38
   551       |} while (/*CONSTCOND*/0)                                                                         | 19249    38
   552       |                                                                                                 | 19250    38
   553       |#define TAILQ_REPLACE(head, elm, elm2, field) do {                      \                        | 19251    38
   554       |        if (((elm2)->field.tqe_next = (elm)->field.tqe_next) !=         \                        | 19252    38
   555       |            TAILQ_END(head))                                            \                        | 19253    38
   556       |                (elm2)->field.tqe_next->field.tqe_prev =                \                        | 19254    38
   557       |                    &(elm2)->field.tqe_next;                            \                        | 19255    38
   558       |        else                                                            \                        | 19256    38
   559       |                (head)->tqh_last = &(elm2)->field.tqe_next;             \                        | 19257    38
   560       |        (elm2)->field.tqe_prev = (elm)->field.tqe_prev;                 \                        | 19258    38
   561       |        *(elm2)->field.tqe_prev = (elm2);                               \                        | 19259    38
   562       |        QUEUEDEBUG_TAILQ_POSTREMOVE((elm), field);                      \                        | 19260    38
   563       |} while (/*CONSTCOND*/0)                                                                         | 19261    38
   564       |                                                                                                 | 19262    38
   565       |#define TAILQ_CONCAT(head1, head2, field) do {                          \                        | 19263    38
   566       |        if (!TAILQ_EMPTY(head2)) {                                      \                        | 19264    38
   567       |                *(head1)->tqh_last = (head2)->tqh_first;                \                        | 19265    38
   568       |                (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last; \                        | 19266    38
   569       |                (head1)->tqh_last = (head2)->tqh_last;                  \                        | 19267    38
   570       |                TAILQ_INIT((head2));                                    \                        | 19268    38
   571       |        }                                                               \                        | 19269    38
   572       |} while (/*CONSTCOND*/0)                                                                         | 19270    38
   573       |                                                                                                 | 19271    38
   574       |/*                                                                                               | 19272    38
   575       | * Singly-linked Tail queue declarations.                                                        | 19273    38
   576       | */                                                                                              | 19274    38
   577       |#define STAILQ_HEAD(name, type)                                         \                        | 19275    38
   578       |struct name {                                                           \                        | 19276    38
   579       |        struct type *stqh_first;        /* first element */             \                        | 19277    38
   580       |        struct type **stqh_last;        /* addr of last next element */ \                        | 19278    38
   581       |}                                                                                                | 19279    38
   582       |                                                                                                 | 19280    38
   583       |#define STAILQ_HEAD_INITIALIZER(head)                                   \                        | 19281    38
   584       |        { NULL, &(head).stqh_first }                                                             | 19282    38
   585       |                                                                                                 | 19283    38
   586       |#define STAILQ_ENTRY(type)                                              \                        | 19284    38
   587       |struct {                                                                \                        | 19285    38
   588       |        struct type *stqe_next; /* next element */                      \                        | 19286    38
   589       |}                                                                                                | 19287    38
   590       |                                                                                                 | 19288    38
   591       |/*                                                                                               | 19289    38
   592       | * Singly-linked Tail queue access methods.                                                      | 19290    38
   593       | */                                                                                              | 19291    38
   594       |#define STAILQ_FIRST(head)      ((head)->stqh_first)                                             | 19292    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   372


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   595       |#define STAILQ_END(head)        NULL                                                             | 19293    38
   596       |#define STAILQ_NEXT(elm, field) ((elm)->field.stqe_next)                                         | 19294    38
   597       |#define STAILQ_EMPTY(head)      (STAILQ_FIRST(head) == STAILQ_END(head))                         | 19295    38
   598       |                                                                                                 | 19296    38
   599       |/*                                                                                               | 19297    38
   600       | * Singly-linked Tail queue functions.                                                           | 19298    38
   601       | */                                                                                              | 19299    38
   602       |#define STAILQ_INIT(head) do {                                          \                        | 19300    38
   603       |        (head)->stqh_first = NULL;                                      \                        | 19301    38
   604       |        (head)->stqh_last = &(head)->stqh_first;                                \                | 19302    38
   605       |} while (/*CONSTCOND*/0)                                                                         | 19303    38
   606       |                                                                                                 | 19304    38
   607       |#define STAILQ_INSERT_HEAD(head, elm, field) do {                       \                        | 19305    38
   608       |        if (((elm)->field.stqe_next = (head)->stqh_first) == NULL)      \                        | 19306    38
   609       |                (head)->stqh_last = &(elm)->field.stqe_next;            \                        | 19307    38
   610       |        (head)->stqh_first = (elm);                                     \                        | 19308    38
   611       |} while (/*CONSTCOND*/0)                                                                         | 19309    38
   612       |                                                                                                 | 19310    38
   613       |#define STAILQ_INSERT_TAIL(head, elm, field) do {                       \                        | 19311    38
   614       |        (elm)->field.stqe_next = NULL;                                  \                        | 19312    38
   615       |        *(head)->stqh_last = (elm);                                     \                        | 19313    38
   616       |        (head)->stqh_last = &(elm)->field.stqe_next;                    \                        | 19314    38
   617       |} while (/*CONSTCOND*/0)                                                                         | 19315    38
   618       |                                                                                                 | 19316    38
   619       |#define STAILQ_INSERT_AFTER(head, listelm, elm, field) do {             \                        | 19317    38
   620       |        if (((elm)->field.stqe_next = (listelm)->field.stqe_next) == NULL)\                      | 19318    38
   621       |                (head)->stqh_last = &(elm)->field.stqe_next;            \                        | 19319    38
   622       |        (listelm)->field.stqe_next = (elm);                             \                        | 19320    38
   623       |} while (/*CONSTCOND*/0)                                                                         | 19321    38
   624       |                                                                                                 | 19322    38
   625       |#define STAILQ_REMOVE_HEAD(head, field) do {                            \                        | 19323    38
   626       |        if (((head)->stqh_first = (head)->stqh_first->field.stqe_next) == NULL) \                | 19324    38
   627       |                (head)->stqh_last = &(head)->stqh_first;                        \                | 19325    38
   628       |} while (/*CONSTCOND*/0)                                                                         | 19326    38
   629       |                                                                                                 | 19327    38
   630       |#define STAILQ_REMOVE(head, elm, type, field) do {                      \                        | 19328    38
   631       |        if ((head)->stqh_first == (elm)) {                              \                        | 19329    38
   632       |                STAILQ_REMOVE_HEAD((head), field);                      \                        | 19330    38
   633       |        } else {                                                        \                        | 19331    38
   634       |                struct type *curelm = (head)->stqh_first;               \                        | 19332    38
   635       |                while (curelm->field.stqe_next != (elm))                        \                | 19333    38
   636       |                        curelm = curelm->field.stqe_next;               \                        | 19334    38
   637       |                if ((curelm->field.stqe_next =                          \                        | 19335    38
   638       |                        curelm->field.stqe_next->field.stqe_next) == NULL) \                     | 19336    38
   639       |                            (head)->stqh_last = &(curelm)->field.stqe_next; \                    | 19337    38
   640       |        }                                                               \                        | 19338    38
   641       |} while (/*CONSTCOND*/0)                                                                         | 19339    38
   642       |                                                                                                 | 19340    38
   643       |#define STAILQ_FOREACH(var, head, field)                                \                        | 19341    38
   644       |        for ((var) = ((head)->stqh_first);                              \                        | 19342    38
   645       |                (var);                                                  \                        | 19343    38
   646       |                (var) = ((var)->field.stqe_next))                                                | 19344    38
   647       |                                                                                                 | 19345    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   373


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   648       |#define STAILQ_FOREACH_SAFE(var, head, field, tvar)                     \                        | 19346    38
   649       |        for ((var) = STAILQ_FIRST((head));                              \                        | 19347    38
   650       |            (var) && ((tvar) = STAILQ_NEXT((var), field), 1);           \                        | 19348    38
   651       |            (var) = (tvar))                                                                      | 19349    38
   652       |                                                                                                 | 19350    38
   653       |#define STAILQ_CONCAT(head1, head2) do {                                \                        | 19351    38
   654       |        if (!STAILQ_EMPTY((head2))) {                                   \                        | 19352    38
   655       |                *(head1)->stqh_last = (head2)->stqh_first;              \                        | 19353    38
   656       |                (head1)->stqh_last = (head2)->stqh_last;                \                        | 19354    38
   657       |                STAILQ_INIT((head2));                                   \                        | 19355    38
   658       |        }                                                               \                        | 19356    38
   659       |} while (/*CONSTCOND*/0)                                                                         | 19357    38
   660       |                                                                                                 | 19358    38
   661       |#define STAILQ_LAST(head, type, field)                                  \                        | 19359    38
   662       |        (STAILQ_EMPTY((head)) ?                                         \                        | 19360    38
   663       |                NULL :                                                  \                        | 19361    38
   664       |                ((struct type *)(void *)                                \                        | 19362    38
   665       |                ((char *)((head)->stqh_last) - offsetof(struct type, field))))                   | 19363    38
   666       |                                                                                                 | 19364    38
   667       |                                                                                                 | 19365    38
   668       |#ifndef _KERNEL                                                                                  | 19366    38
   669       |/*                                                                                               | 19367    38
   670       | * Circular queue definitions. Do not use. We still keep the macros                              | 19368    38
   671       | * for compatibility but because of pointer aliasing issues their use                            | 19369    38
   672       | * is discouraged!                                                                               | 19370    38
   673       | */                                                                                              | 19371    38
   674       |                                                                                                 | 19372    38
   675       |/*                                                                                               | 19373    38
   676       | * __launder_type():  We use this ugly hack to work around the the compiler                      | 19374    38
   677       | * noticing that two types may not alias each other and elide tests in code.                     | 19375    38
   678       | * We hit this in the CIRCLEQ macros when comparing 'struct name *' and                          | 19376    38
   679       | * 'struct type *' (see CIRCLEQ_HEAD()).  Modern compilers (such as GCC                          | 19377    38
   680       | * 4.8) declare these comparisons as always false, causing the code to                           | 19378    38
   681       | * not run as designed.                                                                          | 19379    38
   682       | *                                                                                               | 19380    38
   683       | * This hack is only to be used for comparisons and thus can be fully const.                     | 19381    38
   684       | * Do not use for assignment.                                                                    | 19382    38
   685       | *                                                                                               | 19383    38
   686       | * If we ever choose to change the ABI of the CIRCLEQ macros, we could fix                       | 19384    38
   687       | * this by changing the head/tail sentinal values, but see the note above                        | 19385    38
   688       | * this one.                                                                                     | 19386    38
   689       | */                                                                                              | 19387    38
   690       |#ifdef _MSC_VER                                                                                  | 19388    38
   691       |#define __launder_type(x)  ((const void *)(x))                                                   | 19389    38
   692       |#else                                                                                            | 19390    38
   693       |static inline const void * __launder_type(const void *);                                         | 19391    38
   694       |static inline const void *                                                                       | 19392    38
   695       |__launder_type(const void *__x)                                                                  | 19393    38
   696       |{                                                                                                | 19394    38
   697       |#ifdef SYSC                                                     /* ASG_LK01: SYSTEM-C Equivalent | 19395    38
   697       +*/                                                                                               + 19395    38
   698       |        __asm ("" : "+r" (__x));                                                                 | 19396    38
   699       |#else                                                           /* ASG_LK01: SYSTEM-C Equivalent | 19397    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   374


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   699       +*/                                                                                               + 19397    38
   700       |        __asm __volatile("" : "+r" (__x));                                                       | 19398    38
   701       |#endif                                                          /* ASG_LK01: SYSTEM-C Equivalent | 19399    38
   701       +*/                                                                                               + 19399    38
   702       |        return __x;                                                                              | 19400    38
   703       |}                                                                                                | 19401    38
   704       |#endif                                                                                           | 19402    38
   705       |                                                                                                 | 19403    38
   706       |#if defined(QUEUEDEBUG)                                                                          | 19404    38
   707       |#define QUEUEDEBUG_CIRCLEQ_HEAD(head, field)                            \                        | 19405    38
   708       |        if ((head)->cqh_first != CIRCLEQ_ENDC(head) &&                  \                        | 19406    38
   709       |            (head)->cqh_first->field.cqe_prev != CIRCLEQ_ENDC(head))    \                        | 19407    38
   710       |                QUEUEDEBUG_ABORT("CIRCLEQ head forw %p %s:%d", (head),  \                        | 19408    38
   711       |                      __FILE__, __LINE__);                              \                        | 19409    38
   712       |        if ((head)->cqh_last != CIRCLEQ_ENDC(head) &&                   \                        | 19410    38
   713       |            (head)->cqh_last->field.cqe_next != CIRCLEQ_ENDC(head))     \                        | 19411    38
   714       |                QUEUEDEBUG_ABORT("CIRCLEQ head back %p %s:%d", (head),  \                        | 19412    38
   715       |                      __FILE__, __LINE__);                                                       | 19413    38
   716       |#define QUEUEDEBUG_CIRCLEQ_ELM(head, elm, field)                        \                        | 19414    38
   717       |        if ((elm)->field.cqe_next == CIRCLEQ_ENDC(head)) {              \                        | 19415    38
   718       |                if ((head)->cqh_last != (elm))                          \                        | 19416    38
   719       |                        QUEUEDEBUG_ABORT("CIRCLEQ elm last %p %s:%d",   \                        | 19417    38
   720       |                            (elm), __FILE__, __LINE__);                 \                        | 19418    38
   721       |        } else {                                                        \                        | 19419    38
   722       |                if ((elm)->field.cqe_next->field.cqe_prev != (elm))     \                        | 19420    38
   723       |                        QUEUEDEBUG_ABORT("CIRCLEQ elm forw %p %s:%d",   \                        | 19421    38
   724       |                            (elm), __FILE__, __LINE__);                 \                        | 19422    38
   725       |        }                                                               \                        | 19423    38
   726       |        if ((elm)->field.cqe_prev == CIRCLEQ_ENDC(head)) {              \                        | 19424    38
   727       |                if ((head)->cqh_first != (elm))                         \                        | 19425    38
   728       |                        QUEUEDEBUG_ABORT("CIRCLEQ elm first %p %s:%d",  \                        | 19426    38
   729       |                            (elm), __FILE__, __LINE__);                 \                        | 19427    38
   730       |        } else {                                                        \                        | 19428    38
   731       |                if ((elm)->field.cqe_prev->field.cqe_next != (elm))     \                        | 19429    38
   732       |                        QUEUEDEBUG_ABORT("CIRCLEQ elm prev %p %s:%d",   \                        | 19430    38
   733       |                            (elm), __FILE__, __LINE__);                 \                        | 19431    38
   734       |        }                                                                                        | 19432    38
   735       |#define QUEUEDEBUG_CIRCLEQ_POSTREMOVE(elm, field)                       \                        | 19433    38
   736       |        (elm)->field.cqe_next = (void *)1L;                             \                        | 19434    38
   737       |        (elm)->field.cqe_prev = (void *)1L;                                                      | 19435    38
   738       |#else                                                                                            | 19436    38
   739       |#define QUEUEDEBUG_CIRCLEQ_HEAD(head, field)                                                     | 19437    38
   740       |#define QUEUEDEBUG_CIRCLEQ_ELM(head, elm, field)                                                 | 19438    38
   741       |#define QUEUEDEBUG_CIRCLEQ_POSTREMOVE(elm, field)                                                | 19439    38
   742       |#endif                                                                                           | 19440    38
   743       |                                                                                                 | 19441    38
   744       |#define CIRCLEQ_HEAD(name, type)                                        \                        | 19442    38
   745       |struct name {                                                           \                        | 19443    38
   746       |        struct type *cqh_first;         /* first element */             \                        | 19444    38
   747       |        struct type *cqh_last;          /* last element */              \                        | 19445    38
   748       |}                                                                                                | 19446    38
   749       |                                                                                                 | 19447    38
   750       |#define CIRCLEQ_HEAD_INITIALIZER(head)                                  \                        | 19448    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   375


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   751       |        { CIRCLEQ_END(&head), CIRCLEQ_END(&head) }                                               | 19449    38
   752       |                                                                                                 | 19450    38
   753       |#define CIRCLEQ_ENTRY(type)                                             \                        | 19451    38
   754       |struct {                                                                \                        | 19452    38
   755       |        struct type *cqe_next;          /* next element */              \                        | 19453    38
   756       |        struct type *cqe_prev;          /* previous element */          \                        | 19454    38
   757       |}                                                                                                | 19455    38
   758       |                                                                                                 | 19456    38
   759       |/*                                                                                               | 19457    38
   760       | * Circular queue functions.                                                                     | 19458    38
   761       | */                                                                                              | 19459    38
   762       |#define CIRCLEQ_INIT(head) do {                                         \                        | 19460    38
   763       |        (head)->cqh_first = CIRCLEQ_END(head);                          \                        | 19461    38
   764       |        (head)->cqh_last = CIRCLEQ_END(head);                           \                        | 19462    38
   765       |} while (/*CONSTCOND*/0)                                                                         | 19463    38
   766       |                                                                                                 | 19464    38
   767       |#define CIRCLEQ_INSERT_AFTER(head, listelm, elm, field) do {            \                        | 19465    38
   768       |        QUEUEDEBUG_CIRCLEQ_HEAD((head), field)                          \                        | 19466    38
   769       |        QUEUEDEBUG_CIRCLEQ_ELM((head), (listelm), field)                \                        | 19467    38
   770       |        (elm)->field.cqe_next = (listelm)->field.cqe_next;              \                        | 19468    38
   771       |        (elm)->field.cqe_prev = (listelm);                              \                        | 19469    38
   772       |        if ((listelm)->field.cqe_next == CIRCLEQ_ENDC(head))            \                        | 19470    38
   773       |                (head)->cqh_last = (elm);                               \                        | 19471    38
   774       |        else                                                            \                        | 19472    38
   775       |                (listelm)->field.cqe_next->field.cqe_prev = (elm);      \                        | 19473    38
   776       |        (listelm)->field.cqe_next = (elm);                              \                        | 19474    38
   777       |} while (/*CONSTCOND*/0)                                                                         | 19475    38
   778       |                                                                                                 | 19476    38
   779       |#define CIRCLEQ_INSERT_BEFORE(head, listelm, elm, field) do {           \                        | 19477    38
   780       |        QUEUEDEBUG_CIRCLEQ_HEAD((head), field)                          \                        | 19478    38
   781       |        QUEUEDEBUG_CIRCLEQ_ELM((head), (listelm), field)                \                        | 19479    38
   782       |        (elm)->field.cqe_next = (listelm);                              \                        | 19480    38
   783       |        (elm)->field.cqe_prev = (listelm)->field.cqe_prev;              \                        | 19481    38
   784       |        if ((listelm)->field.cqe_prev == CIRCLEQ_ENDC(head))            \                        | 19482    38
   785       |                (head)->cqh_first = (elm);                              \                        | 19483    38
   786       |        else                                                            \                        | 19484    38
   787       |                (listelm)->field.cqe_prev->field.cqe_next = (elm);      \                        | 19485    38
   788       |        (listelm)->field.cqe_prev = (elm);                              \                        | 19486    38
   789       |} while (/*CONSTCOND*/0)                                                                         | 19487    38
   790       |                                                                                                 | 19488    38
   791       |#define CIRCLEQ_INSERT_HEAD(head, elm, field) do {                      \                        | 19489    38
   792       |        QUEUEDEBUG_CIRCLEQ_HEAD((head), field)                          \                        | 19490    38
   793       |        (elm)->field.cqe_next = (head)->cqh_first;                      \                        | 19491    38
   794       |        (elm)->field.cqe_prev = CIRCLEQ_END(head);                      \                        | 19492    38
   795       |        if ((head)->cqh_last == CIRCLEQ_ENDC(head))                     \                        | 19493    38
   796       |                (head)->cqh_last = (elm);                               \                        | 19494    38
   797       |        else                                                            \                        | 19495    38
   798       |                (head)->cqh_first->field.cqe_prev = (elm);              \                        | 19496    38
   799       |        (head)->cqh_first = (elm);                                      \                        | 19497    38
   800       |} while (/*CONSTCOND*/0)                                                                         | 19498    38
   801       |                                                                                                 | 19499    38
   802       |#define CIRCLEQ_INSERT_TAIL(head, elm, field) do {                      \                        | 19500    38
   803       |        QUEUEDEBUG_CIRCLEQ_HEAD((head), field)                          \                        | 19501    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   376


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   804       |        (elm)->field.cqe_next = CIRCLEQ_END(head);                      \                        | 19502    38
   805       |        (elm)->field.cqe_prev = (head)->cqh_last;                       \                        | 19503    38
   806       |        if ((head)->cqh_first == CIRCLEQ_ENDC(head))                    \                        | 19504    38
   807       |                (head)->cqh_first = (elm);                              \                        | 19505    38
   808       |        else                                                            \                        | 19506    38
   809       |                (head)->cqh_last->field.cqe_next = (elm);               \                        | 19507    38
   810       |        (head)->cqh_last = (elm);                                       \                        | 19508    38
   811       |} while (/*CONSTCOND*/0)                                                                         | 19509    38
   812       |                                                                                                 | 19510    38
   813       |#define CIRCLEQ_REMOVE(head, elm, field) do {                           \                        | 19511    38
   814       |        QUEUEDEBUG_CIRCLEQ_HEAD((head), field)                          \                        | 19512    38
   815       |        QUEUEDEBUG_CIRCLEQ_ELM((head), (elm), field)                    \                        | 19513    38
   816       |        if ((elm)->field.cqe_next == CIRCLEQ_ENDC(head))                \                        | 19514    38
   817       |                (head)->cqh_last = (elm)->field.cqe_prev;               \                        | 19515    38
   818       |        else                                                            \                        | 19516    38
   819       |                (elm)->field.cqe_next->field.cqe_prev =                 \                        | 19517    38
   820       |                    (elm)->field.cqe_prev;                              \                        | 19518    38
   821       |        if ((elm)->field.cqe_prev == CIRCLEQ_ENDC(head))                \                        | 19519    38
   822       |                (head)->cqh_first = (elm)->field.cqe_next;              \                        | 19520    38
   823       |        else                                                            \                        | 19521    38
   824       |                (elm)->field.cqe_prev->field.cqe_next =                 \                        | 19522    38
   825       |                    (elm)->field.cqe_next;                              \                        | 19523    38
   826       |        QUEUEDEBUG_CIRCLEQ_POSTREMOVE((elm), field)                     \                        | 19524    38
   827       |} while (/*CONSTCOND*/0)                                                                         | 19525    38
   828       |                                                                                                 | 19526    38
   829       |#define CIRCLEQ_FOREACH(var, head, field)                               \                        | 19527    38
   830       |        for ((var) = ((head)->cqh_first);                               \                        | 19528    38
   831       |                (var) != CIRCLEQ_ENDC(head);                            \                        | 19529    38
   832       |                (var) = ((var)->field.cqe_next))                                                 | 19530    38
   833       |                                                                                                 | 19531    38
   834       |#define CIRCLEQ_FOREACH_REVERSE(var, head, field)                       \                        | 19532    38
   835       |        for ((var) = ((head)->cqh_last);                                \                        | 19533    38
   836       |                (var) != CIRCLEQ_ENDC(head);                            \                        | 19534    38
   837       |                (var) = ((var)->field.cqe_prev))                                                 | 19535    38
   838       |                                                                                                 | 19536    38
   839       |/*                                                                                               | 19537    38
   840       | * Circular queue access methods.                                                                | 19538    38
   841       | */                                                                                              | 19539    38
   842       |#define CIRCLEQ_FIRST(head)             ((head)->cqh_first)                                      | 19540    38
   843       |#define CIRCLEQ_LAST(head)              ((head)->cqh_last)                                       | 19541    38
   844       |/* For comparisons */                                                                            | 19542    38
   845       |#define CIRCLEQ_ENDC(head)              (__launder_type(head))                                   | 19543    38
   846       |/* For assignments */                                                                            | 19544    38
   847       |#define CIRCLEQ_END(head)               ((void *)(head))                                         | 19545    38
   848       |#define CIRCLEQ_NEXT(elm, field)        ((elm)->field.cqe_next)                                  | 19546    38
   849       |#define CIRCLEQ_PREV(elm, field)        ((elm)->field.cqe_prev)                                  | 19547    38
   850       |#define CIRCLEQ_EMPTY(head)                                             \                        | 19548    38
   851       |    (CIRCLEQ_FIRST(head) == CIRCLEQ_ENDC(head))                                                  | 19549    38
   852       |                                                                                                 | 19550    38
   853       |#define CIRCLEQ_LOOP_NEXT(head, elm, field)                             \                        | 19551    38
   854       |        (((elm)->field.cqe_next == CIRCLEQ_ENDC(head))                  \                        | 19552    38
   855       |            ? ((head)->cqh_first)                                       \                        | 19553    38
   856       |            : (elm->field.cqe_next))                                                             | 19554    38
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   377


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   857       |#define CIRCLEQ_LOOP_PREV(head, elm, field)                             \                        | 19555    38
   858       |        (((elm)->field.cqe_prev == CIRCLEQ_ENDC(head))                  \                        | 19556    38
   859       |            ? ((head)->cqh_last)                                        \                        | 19557    38
   860       |            : (elm->field.cqe_prev))                                                             | 19558    38
   861       |#endif /* !_KERNEL */                                                                            | 19559    38
   862       |                                                                                                 | 19560    38
   863       |#endif  /* !_SYS_QUEUE_H_ */                                                                     | 19561    38
    60       |                                                                                                 | 19562    37
    61       |/*                                                                                               | 19563    37
    62       | * Complete missing LIST-ops                                                                     | 19564    37
    63       | */                                                                                              | 19565    37
    64       |                                                                                                 | 19566    37
    65       |#ifndef LIST_FOREACH                                                                             | 19567    37
    66       |#define LIST_FOREACH(var, head, field)                                  \                        | 19568    37
    67       |        for ((var) = ((head)->lh_first);                                \                        | 19569    37
    68       |                (var);                                                  \                        | 19570    37
    69       |                (var) = ((var)->field.le_next))                                                  | 19571    37
    70       |#endif                                                                                           | 19572    37
    71       |                                                                                                 | 19573    37
    72       |#ifndef LIST_EMPTY                                                                               | 19574    37
    73       |#define LIST_EMPTY(head)                ((head)->lh_first == NULL)                               | 19575    37
    74       |#endif                                                                                           | 19576    37
    75       |                                                                                                 | 19577    37
    76       |#ifndef LIST_FIRST                                                                               | 19578    37
    77       |#define LIST_FIRST(head)                ((head)->lh_first)                                       | 19579    37
    78       |#endif                                                                                           | 19580    37
    79       |                                                                                                 | 19581    37
    80       |#ifndef LIST_NEXT                                                                                | 19582    37
    81       |#define LIST_NEXT(elm, field)           ((elm)->field.le_next)                                   | 19583    37
    82       |#endif                                                                                           | 19584    37
    83       |                                                                                                 | 19585    37
    84       |#ifndef LIST_INSERT_BEFORE                                                                       | 19586    37
    85       |#define LIST_INSERT_BEFORE(listelm, elm, field) do {                    \                        | 19587    37
    86       |        (elm)->field.le_prev = (listelm)->field.le_prev;                \                        | 19588    37
    87       |        (elm)->field.le_next = (listelm);                               \                        | 19589    37
    88       |        *(listelm)->field.le_prev = (elm);                              \                        | 19590    37
    89       |        (listelm)->field.le_prev = &(elm)->field.le_next;               \                        | 19591    37
    90       |} while (/*CONSTCOND*/0)                                                                         | 19592    37
    91       |#endif                                                                                           | 19593    37
    92       |                                                                                                 | 19594    37
    93       |/*                                                                                               | 19595    37
    94       | * Complete missing TAILQ-ops                                                                    | 19596    37
    95       | */                                                                                              | 19597    37
    96       |                                                                                                 | 19598    37
    97       |#ifndef TAILQ_HEAD_INITIALIZER                                                                   | 19599    37
    98       |#define TAILQ_HEAD_INITIALIZER(head)                                    \                        | 19600    37
    99       |        { NULL, &(head).tqh_first }                                                              | 19601    37
   100       |#endif                                                                                           | 19602    37
   101       |                                                                                                 | 19603    37
   102       |#ifndef TAILQ_INSERT_BEFORE                                                                      | 19604    37
   103       |#define TAILQ_INSERT_BEFORE(listelm, elm, field) do {                   \                        | 19605    37
   104       |        (elm)->field.tqe_prev = (listelm)->field.tqe_prev;              \                        | 19606    37
   105       |        (elm)->field.tqe_next = (listelm);                              \                        | 19607    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   378


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   106       |        *(listelm)->field.tqe_prev = (elm);                             \                        | 19608    37
   107       |        (listelm)->field.tqe_prev = &(elm)->field.tqe_next;             \                        | 19609    37
   108       |} while (0)                                                                                      | 19610    37
   109       |#endif                                                                                           | 19611    37
   110       |                                                                                                 | 19612    37
   111       |#ifndef TAILQ_FOREACH                                                                            | 19613    37
   112       |#define TAILQ_FOREACH(var, head, field)                                     \                    | 19614    37
   113       | for ((var) = ((head)->tqh_first); (var); (var) = ((var)->field.tqe_next))                       | 19615    37
   114       |#endif                                                                                           | 19616    37
   115       |                                                                                                 | 19617    37
   116       |#ifndef TAILQ_EMPTY                                                                              | 19618    37
   117       |#define TAILQ_EMPTY(head)               ((head)->tqh_first == NULL)                              | 19619    37
   118       |#endif                                                                                           | 19620    37
   119       |                                                                                                 | 19621    37
   120       |#ifndef TAILQ_FIRST                                                                              | 19622    37
   121       |#define TAILQ_FIRST(head)               ((head)->tqh_first)                                      | 19623    37
   122       |#endif                                                                                           | 19624    37
   123       |                                                                                                 | 19625    37
   124       |#ifndef TAILQ_NEXT                                                                               | 19626    37
   125       |#define TAILQ_NEXT(elm, field)          ((elm)->field.tqe_next)                                  | 19627    37
   126       |#endif                                                                                           | 19628    37
   127       |                                                                                                 | 19629    37
   128       |#ifndef TAILQ_LAST                                                                               | 19630    37
   129       |#define TAILQ_LAST(head, headname) \                                                             | 19631    37
   130       |        (*(((struct headname *)((head)->tqh_last))->tqh_last))                                   | 19632    37
   131       |#endif                                                                                           | 19633    37
   132       |                                                                                                 | 19634    37
   133       |#ifndef TAILQ_PREV                                                                               | 19635    37
   134       |#define TAILQ_PREV(elm, headname, field) \                                                       | 19636    37
   135       |        (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))                              | 19637    37
   136       |#endif                                                                                           | 19638    37
   137       |                                                                                                 | 19639    37
   138       |#ifndef TAILQ_FOREACH_SAFE                                                                       | 19640    37
   139       |/*                                                                                               | 19641    37
   140       | * TAILQ_FOREACH_SAFE() provides a traversal where the current iterated element                  | 19642    37
   141       | * may be freed or unlinked.                                                                     | 19643    37
   142       | * It does not allow freeing or modifying any other element in the list,                         | 19644    37
   143       | * at least not the next element.                                                                | 19645    37
   144       | */                                                                                              | 19646    37
   145       |#define TAILQ_FOREACH_SAFE(elm,head,field,tmpelm)                       \                        | 19647    37
   146       |        for ((elm) = TAILQ_FIRST(head) ;                                \                        | 19648    37
   147       |             (elm) && ((tmpelm) = TAILQ_NEXT((elm), field), 1) ;        \                        | 19649    37
   148       |             (elm) = (tmpelm))                                                                   | 19650    37
   149       |#endif                                                                                           | 19651    37
   150       |                                                                                                 | 19652    37
   151       |/*                                                                                               | 19653    37
   152       | * In Mac OS 10.4 and earlier TAILQ_FOREACH_REVERSE was defined                                  | 19654    37
   153       | * differently, redefined it.                                                                    | 19655    37
   154       | */                                                                                              | 19656    37
   155       |#ifdef __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__                                             | 19657    37
   156       |#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1050                                         | 19658    37
   157       |#undef TAILQ_FOREACH_REVERSE                                                                     | 19659    37
   158       |#endif                                                                                           | 19660    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   379


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   159       |#endif                                                                                           | 19661    37
   160       |                                                                                                 | 19662    37
   161       |#ifndef TAILQ_FOREACH_REVERSE                                                                    | 19663    37
   162       |#define TAILQ_FOREACH_REVERSE(var, head, headname, field)               \                        | 19664    37
   163       |        for ((var) = (*(((struct headname *)((head)->tqh_last))->tqh_last));    \                | 19665    37
   164       |                (var);                                                  \                        | 19666    37
   165       |                (var) = (*(((struct headname *)((var)->field.tqe_prev))->tqh_last)))             | 19667    37
   166       |#endif                                                                                           | 19668    37
   167       |                                                                                                 | 19669    37
   168       |                                                                                                 | 19670    37
   169       |/**                                                                                              | 19671    37
   170       | * Treat the TAILQ as a circular list and return the previous/next entry,                        | 19672    37
   171       | * possibly wrapping to the end/beginning.                                                       | 19673    37
   172       | */                                                                                              | 19674    37
   173       |#define TAILQ_CIRC_PREV(var, head, headname, field)     \                                        | 19675    37
   174       |        ((var) != TAILQ_FIRST(head) ?                   \                                        | 19676    37
   175       |         TAILQ_PREV(var, headname, field) :             \                                        | 19677    37
   176       |         TAILQ_LAST(head, headname))                                                             | 19678    37
   177       |                                                                                                 | 19679    37
   178       |#define TAILQ_CIRC_NEXT(var, head, headname, field)     \                                        | 19680    37
   179       |        ((var) != TAILQ_LAST(head, headname) ?          \                                        | 19681    37
   180       |         TAILQ_NEXT(var, field) :                       \                                        | 19682    37
   181       |         TAILQ_FIRST(head))                                                                      | 19683    37
   182       |                                                                                                 | 19684    37
   183       |/*                                                                                               | 19685    37
   184       | * Some extra functions for LIST manipulation                                                    | 19686    37
   185       | */                                                                                              | 19687    37
   186       |                                                                                                 | 19688    37
   187       |#define LIST_INSERT_SORTED(head, elm, elmtype, field, cmpfunc) do {     \                        | 19689    37
   188       |        if(LIST_EMPTY(head)) {                                  \                                | 19690    37
   189       |           LIST_INSERT_HEAD(head, elm, field);                  \                                | 19691    37
   190       |        } else {                                                \                                | 19692    37
   191       |           elmtype _tmp;                                        \                                | 19693    37
   192       |           LIST_FOREACH(_tmp,head,field) {                      \                                | 19694    37
   193       |              if(cmpfunc(elm,_tmp) < 0) {                       \                                | 19695    37
   194       |                LIST_INSERT_BEFORE(_tmp,elm,field);             \                                | 19696    37
   195       |                break;                                          \                                | 19697    37
   196       |              }                                                 \                                | 19698    37
   197       |              if(!LIST_NEXT(_tmp,field)) {                      \                                | 19699    37
   198       |                 LIST_INSERT_AFTER(_tmp,elm,field);             \                                | 19700    37
   199       |                 break;                                         \                                | 19701    37
   200       |              }                                                 \                                | 19702    37
   201       |           }                                                    \                                | 19703    37
   202       |        }                                                       \                                | 19704    37
   203       |} while(0)                                                                                       | 19705    37
   204       |                                                                                                 | 19706    37
   205       |#ifndef TAILQ_INSERT_SORTED                                                                      | 19707    37
   206       |#define TAILQ_INSERT_SORTED(head, elm, elmtype, field, cmpfunc) do {    \                        | 19708    37
   207       |        if(TAILQ_FIRST(head) == NULL) {                         \                                | 19709    37
   208       |           TAILQ_INSERT_HEAD(head, elm, field);                 \                                | 19710    37
   209       |        } else {                                                \                                | 19711    37
   210       |           elmtype _tmp;                                        \                                | 19712    37
   211       |           TAILQ_FOREACH(_tmp,head,field) {                     \                                | 19713    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   380


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   212       |              if(cmpfunc(elm,_tmp) < 0) {                       \                                | 19714    37
   213       |                TAILQ_INSERT_BEFORE(_tmp,elm,field);            \                                | 19715    37
   214       |                break;                                          \                                | 19716    37
   215       |              }                                                 \                                | 19717    37
   216       |              if(!TAILQ_NEXT(_tmp,field)) {                     \                                | 19718    37
   217       |                 TAILQ_INSERT_AFTER(head,_tmp,elm,field);       \                                | 19719    37
   218       |                 break;                                         \                                | 19720    37
   219       |              }                                                 \                                | 19721    37
   220       |           }                                                    \                                | 19722    37
   221       |        }                                                       \                                | 19723    37
   222       |} while(0)                                                                                       | 19724    37
   223       |#endif                                                                                           | 19725    37
   224       |                                                                                                 | 19726    37
   225       |/**                                                                                              | 19727    37
   226       | * @brief Add all elements from \p srchead to \p dsthead using sort                              | 19728    37
   227       | *        comparator \p cmpfunc.                                                                 | 19729    37
   228       | *        \p src will be re-initialized on completion.                                           | 19730    37
   229       | */                                                                                              | 19731    37
   230       |#define TAILQ_CONCAT_SORTED(dsthead,srchead,elmtype,field,cmpfunc) do { \                        | 19732    37
   231       |        elmtype _cstmp;                                                 \                        | 19733    37
   232       |        elmtype _cstmp2;                                                \                        | 19734    37
   233       |        if (TAILQ_EMPTY(dsthead)) {                                     \                        | 19735    37
   234       |                TAILQ_CONCAT(dsthead, srchead,field);                   \                        | 19736    37
   235       |                break;                                                  \                        | 19737    37
   236       |        }                                                               \                        | 19738    37
   237       |        TAILQ_FOREACH_SAFE(_cstmp, srchead, field, _cstmp2) {           \                        | 19739    37
   238       |                TAILQ_INSERT_SORTED(dsthead, _cstmp, elmtype,           \                        | 19740    37
   239       |                                    field, cmpfunc);                    \                        | 19741    37
   240       |        }                                                               \                        | 19742    37
   241       |        TAILQ_INIT(srchead);                                            \                        | 19743    37
   242       |        } while (0)                                                                              | 19744    37
   243       |                                                                                                 | 19745    37
   244       |#define TAILQ_MOVE(newhead, oldhead, field) do { \                                               | 19746    37
   245       |        if(TAILQ_FIRST(oldhead)) { \                                                             | 19747    37
   246       |           TAILQ_FIRST(oldhead)->field.tqe_prev = &(newhead)->tqh_first;  \                      | 19748    37
   247       |           (newhead)->tqh_first = (oldhead)->tqh_first;                 \                        | 19749    37
   248       |           (newhead)->tqh_last = (oldhead)->tqh_last;                   \                        | 19750    37
   249       |           TAILQ_INIT(oldhead);                                         \                        | 19751    37
   250       |        } else                                                          \                        | 19752    37
   251       |                TAILQ_INIT(newhead);                                    \                        | 19753    37
   252       |        } while (/*CONSTCOND*/0)                                                                 | 19754    37
   253       |                                                                                                 | 19755    37
   254       |                                                                                                 | 19756    37
   255       |/* @brief Prepend \p shead to \p dhead */                                                        | 19757    37
   256       |#define TAILQ_PREPEND(dhead,shead,headname,field) do {                  \                        | 19758    37
   257       |        if (unlikely(TAILQ_EMPTY(dhead))) {                             \                        | 19759    37
   258       |                TAILQ_MOVE(dhead, shead, field);                        \                        | 19760    37
   259       |        } else if (likely(!TAILQ_EMPTY(shead))) {                       \                        | 19761    37
   260       |                TAILQ_LAST(shead,headname)->field.tqe_next =            \                        | 19762    37
   261       |                        TAILQ_FIRST(dhead);                             \                        | 19763    37
   262       |                TAILQ_FIRST(dhead)->field.tqe_prev =                    \                        | 19764    37
   263       |                        &TAILQ_LAST(shead,headname)->field.tqe_next;    \                        | 19765    37
   264       |                TAILQ_FIRST(shead)->field.tqe_prev = &(dhead)->tqh_first; \                      | 19766    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   381


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   265       |                TAILQ_FIRST(dhead) = TAILQ_FIRST(shead);                \                        | 19767    37
   266       |                TAILQ_INIT(shead);                                      \                        | 19768    37
   267       |        }                                                               \                        | 19769    37
   268       |        } while (0)                                                                              | 19770    37
   269       |                                                                                                 | 19771    37
   270       |/* @brief Insert \p shead after element \p listelm in \p dhead */                                | 19772    37
   271       |#define TAILQ_INSERT_LIST(dhead,listelm,shead,headname,elmtype,field) do { \                     | 19773    37
   272       |        if (TAILQ_LAST(dhead, headname) == listelm) {                   \                        | 19774    37
   273       |                TAILQ_CONCAT(dhead, shead, field);                      \                        | 19775    37
   274       |        } else {                                                        \                        | 19776    37
   275       |                elmtype _elm = TAILQ_FIRST(shead);                      \                        | 19777    37
   276       |                elmtype _last = TAILQ_LAST(shead, headname);            \                        | 19778    37
   277       |                elmtype _aft = TAILQ_NEXT(listelm, field);              \                        | 19779    37
   278       |                (listelm)->field.tqe_next = _elm;                       \                        | 19780    37
   279       |                _elm->field.tqe_prev  = &(listelm)->field.tqe_next;     \                        | 19781    37
   280       |                _last->field.tqe_next = _aft;                           \                        | 19782    37
   281       |                _aft->field.tqe_prev  = &_last->field.tqe_next;         \                        | 19783    37
   282       |                TAILQ_INIT((shead));                                    \                        | 19784    37
   283       |        }                                                               \                        | 19785    37
   284       |        } while (0)                                                                              | 19786    37
   285       |                                                                                                 | 19787    37
   286       |/* @brief Insert \p shead before element \p listelm in \p dhead */                               | 19788    37
   287       |#define TAILQ_INSERT_LIST_BEFORE(dhead,insert_before,shead,headname,elmtype,field) \             | 19789    37
   288       |        do {                                                            \                        | 19790    37
   289       |                if (TAILQ_FIRST(dhead) == insert_before) {              \                        | 19791    37
   290       |                        TAILQ_PREPEND(dhead, shead, headname, field);   \                        | 19792    37
   291       |                } else {                                                \                        | 19793    37
   292       |                        elmtype _first = TAILQ_FIRST(shead);            \                        | 19794    37
   293       |                        elmtype _last = TAILQ_LAST(shead, headname);    \                        | 19795    37
   294       |                        elmtype _dprev =                                \                        | 19796    37
   295       |                                TAILQ_PREV(insert_before, headname, field); \                    | 19797    37
   296       |                        _last->field.tqe_next = insert_before;          \                        | 19798    37
   297       |                        _dprev->field.tqe_next = _first;                \                        | 19799    37
   298       |                        (insert_before)->field.tqe_prev =               \                        | 19800    37
   299       |                                &_last->field.tqe_next;                 \                        | 19801    37
   300       |                        _first->field.tqe_prev = &(_dprev)->field.tqe_next; \                    | 19802    37
   301       |                        TAILQ_INIT((shead));                            \                        | 19803    37
   302       |                }                                                       \                        | 19804    37
   303       |        } while (0)                                                                              | 19805    37
   304       |                                                                                                 | 19806    37
   305       |#ifndef SIMPLEQ_HEAD                                                                             | 19807    37
   306       |#define SIMPLEQ_HEAD(name, type)                                        \                        | 19808    37
   307       |struct name {                                                           \                        | 19809    37
   308       |struct type *sqh_first;                                                 \                        | 19810    37
   309       |struct type **sqh_last;                                                 \                        | 19811    37
   310       |}                                                                                                | 19812    37
   311       |#endif                                                                                           | 19813    37
   312       |                                                                                                 | 19814    37
   313       |#ifndef SIMPLEQ_ENTRY                                                                            | 19815    37
   314       |#define SIMPLEQ_ENTRY(type)                                             \                        | 19816    37
   315       |struct {                                                                \                        | 19817    37
   316       |struct type *sqe_next;                                                  \                        | 19818    37
   317       |}                                                                                                | 19819    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   382


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   318       |#endif                                                                                           | 19820    37
   319       |                                                                                                 | 19821    37
   320       |#ifndef SIMPLEQ_FIRST                                                                            | 19822    37
   321       |#define SIMPLEQ_FIRST(head)         ((head)->sqh_first)                                          | 19823    37
   322       |#endif                                                                                           | 19824    37
   323       |                                                                                                 | 19825    37
   324       |#ifndef SIMPLEQ_REMOVE_HEAD                                                                      | 19826    37
   325       |#define SIMPLEQ_REMOVE_HEAD(head, field) do {                           \                        | 19827    37
   326       |if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL)    \                        | 19828    37
   327       |(head)->sqh_last = &(head)->sqh_first;                                  \                        | 19829    37
   328       |} while (0)                                                                                      | 19830    37
   329       |#endif                                                                                           | 19831    37
   330       |                                                                                                 | 19832    37
   331       |#ifndef SIMPLEQ_INSERT_TAIL                                                                      | 19833    37
   332       |#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {                      \                        | 19834    37
   333       |(elm)->field.sqe_next = NULL;                                           \                        | 19835    37
   334       |*(head)->sqh_last = (elm);                                              \                        | 19836    37
   335       |(head)->sqh_last = &(elm)->field.sqe_next;                              \                        | 19837    37
   336       |} while (0)                                                                                      | 19838    37
   337       |#endif                                                                                           | 19839    37
   338       |                                                                                                 | 19840    37
   339       |#ifndef SIMPLEQ_INIT                                                                             | 19841    37
   340       |#define SIMPLEQ_INIT(head) do {                                         \                        | 19842    37
   341       |(head)->sqh_first = NULL;                                               \                        | 19843    37
   342       |(head)->sqh_last = &(head)->sqh_first;                                  \                        | 19844    37
   343       |} while (0)                                                                                      | 19845    37
   344       |#endif                                                                                           | 19846    37
   345       |                                                                                                 | 19847    37
   346       |#ifndef SIMPLEQ_INSERT_HEAD                                                                      | 19848    37
   347       |#define SIMPLEQ_INSERT_HEAD(head, elm, field) do {                      \                        | 19849    37
   348       |if (((elm)->field.sqe_next = (head)->sqh_first) == NULL)                \                        | 19850    37
   349       |(head)->sqh_last = &(elm)->field.sqe_next;                              \                        | 19851    37
   350       |(head)->sqh_first = (elm);                                              \                        | 19852    37
   351       |} while (0)                                                                                      | 19853    37
   352       |#endif                                                                                           | 19854    37
   353       |                                                                                                 | 19855    37
   354       |#ifndef SIMPLEQ_FOREACH                                                                          | 19856    37
   355       |#define SIMPLEQ_FOREACH(var, head, field)                               \                        | 19857    37
   356       |for((var) = SIMPLEQ_FIRST(head);                                        \                        | 19858    37
   357       |(var) != SIMPLEQ_END(head);                                             \                        | 19859    37
   358       |(var) = SIMPLEQ_NEXT(var, field))                                                                | 19860    37
   359       |#endif                                                                                           | 19861    37
   360       |                                                                                                 | 19862    37
   361       |#ifndef SIMPLEQ_INSERT_AFTER                                                                     | 19863    37
   362       |#define SIMPLEQ_INSERT_AFTER(head, listelm, elm, field) do {            \                        | 19864    37
   363       |if (((elm)->field.sqe_next = (listelm)->field.sqe_next) == NULL)        \                        | 19865    37
   364       |(head)->sqh_last = &(elm)->field.sqe_next;                              \                        | 19866    37
   365       |(listelm)->field.sqe_next = (elm);                                      \                        | 19867    37
   366       |} while (0)                                                                                      | 19868    37
   367       |#endif                                                                                           | 19869    37
   368       |                                                                                                 | 19870    37
   369       |#ifndef SIMPLEQ_END                                                                              | 19871    37
   370       |#define SIMPLEQ_END(head)           NULL                                                         | 19872    37
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   383


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   371       |#endif                                                                                           | 19873    37
   372       |                                                                                                 | 19874    37
   373       |#ifndef SIMPLEQ_NEXT                                                                             | 19875    37
   374       |#define SIMPLEQ_NEXT(elm, field)    ((elm)->field.sqe_next)                                      | 19876    37
   375       |#endif                                                                                           | 19877    37
   376       |                                                                                                 | 19878    37
   377       |#ifndef SIMPLEQ_HEAD_INITIALIZER                                                                 | 19879    37
   378       |#define SIMPLEQ_HEAD_INITIALIZER(head)                                  \                        | 19880    37
   379       |{ NULL, &(head).sqh_first }                                                                      | 19881    37
   380       |#endif                                                                                           | 19882    37
   381       |                                                                                                 | 19883    37
   382       |#ifndef SIMPLEQ_EMPTY                                                                            | 19884    37
   383       |#define SIMPLEQ_EMPTY(head)         (SIMPLEQ_FIRST(head) == SIMPLEQ_END(head))                   | 19885    37
   384       |#endif                                                                                           | 19886    37
   385       |                                                                                                 | 19887    37
   386       |                                                                                                 | 19888    37
   387       |                                                                                                 | 19889    37
   388       |                                                                                                 | 19890    37
   389       |                                                                                                 | 19891    37
   390       |#endif /* _RDSYSQUEUE_H_ */                                                                      | 19892    37
    58       |                                                                                                 | 19893    18
    59       |#ifdef _WIN32                                                                                    | 19894    18
    60       |/* Visual Studio */                                                                              | 19895    18
    61       |#include "win32_config.h"                                                                        | 19896    18
    62       |#else                                                                                            | 19897    18
    63       |/* POSIX / UNIX based systems */                                                                 | 19898    18
    64       |#include "../config.h" /* mklove output */                                                       | 19899    18
    65       |#endif                                                                                           | 19900    18
    66       |                                                                                                 | 19901    18
    67       |#ifdef _WIN32                                                                                    | 19902    18
    68       |/* Win32/Visual Studio */                                                                        | 19903    18
    69       |#include "rdwin32.h"                                                                             | 19904    18
    70       |                                                                                                 | 19905    18
    71       |#else                                                                                            | 19906    18
    72       |/* POSIX / UNIX based systems */                                                                 | 19907    18
    73       |#include "rdposix.h"                                                                             | 19908    18
     1       |/*                                                                                               | 19909    39
     2       |* librdkafka - Apache Kafka C library                                                            | 19910    39
     3       |*                                                                                                | 19911    39
     4       |* Copyright (c) 2012-2015 Magnus Edenhill                                                        | 19912    39
     5       |* All rights reserved.                                                                           | 19913    39
     6       |*                                                                                                | 19914    39
     7       |* Redistribution and use in source and binary forms, with or without                             | 19915    39
     8       |* modification, are permitted provided that the following conditions are met:                    | 19916    39
     9       |*                                                                                                | 19917    39
    10       |* 1. Redistributions of source code must retain the above copyright notice,                      | 19918    39
    11       |*    this list of conditions and the following disclaimer.                                       | 19919    39
    12       |* 2. Redistributions in binary form must reproduce the above copyright notice,                   | 19920    39
    13       |*    this list of conditions and the following disclaimer in the documentation                   | 19921    39
    14       |*    and/or other materials provided with the distribution.                                      | 19922    39
    15       |*                                                                                                | 19923    39
    16       |* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                    | 19924    39
    17       |* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                      | 19925    39
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   384


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       |* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                     | 19926    39
    19       |* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                       | 19927    39
    20       |* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                            | 19928    39
    21       |* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                           | 19929    39
    22       |* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                       | 19930    39
    23       |* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                        | 19931    39
    24       |* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                        | 19932    39
    25       |* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                     | 19933    39
    26       |* POSSIBILITY OF SUCH DAMAGE.                                                                    | 19934    39
    27       |*/                                                                                               | 19935    39
    28       |                                                                                                 | 19936    39
    29       |/*                                                                                               | 19937    39
    30       | * ASG_LK: MODIFICATION HISTORY                                                                  | 19938    39
    31       | * ==================================================================================            | 19939    39
    32       | * TAG          |   DATE (DD/MM/YYYY)    |   JIRA    |   DESCRIPTION                             | 19940    39
    33       | * ==================================================================================            | 19941    39
    34       | * ASG_LK01         22/04/2021              -           SYSTEM-C                                 | 19942    39
    35       | * ==================================================================================            | 19943    39
    36       |*/                                                                                               | 19944    39
    37       |                                                                                                 | 19945    39
    38       |/**                                                                                              | 19946    39
    39       | * POSIX system support                                                                          | 19947    39
    40       | */                                                                                              | 19948    39
    41       |#ifndef _RDPOSIX_H_                                                                              | 19949    39
    42       |#define _RDPOSIX_H_                                                                              | 19950    39
    43       |                                                                                                 | 19951    39
    44       |#include <unistd.h>                                                                              | 19952    39
     1       |/* release 2.25.00 */                                                                            | 19953    13
     2       |#pragma pack()                                                                                   | 19954    13
     3       |/*-                                                                                              | 19955    13
     4       | * Copyright (c) 1991, 1993, 1994                                                                | 19956    13
     5       | *      The Regents of the University of California.  All rights reserved.                       | 19957    13
     6       | *                                                                                               | 19958    13
     7       | * Redistribution and use in source and binary forms, with or without                            | 19959    13
     8       | * modification, are permitted provided that the following conditions                            | 19960    13
     9       | * are met:                                                                                      | 19961    13
    10       | * 1. Redistributions of source code must retain the above copyright                             | 19962    13
    11       | *    notice, this list of conditions and the following disclaimer.                              | 19963    13
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 19964    13
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 19965    13
    14       | *    documentation and/or other materials provided with the distribution.                       | 19966    13
    15       | * 3. All advertising materials mentioning features or use of this software                      | 19967    13
    16       | *    must display the following acknowledgement:                                                | 19968    13
    17       | *      This product includes software developed by the University of                            | 19969    13
    18       | *      California, Berkeley and its contributors.                                               | 19970    13
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 19971    13
    20       | *    may be used to endorse or promote products derived from this software                      | 19972    13
    21       | *    without specific prior written permission.                                                 | 19973    13
    22       | *                                                                                               | 19974    13
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 19975    13
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 19976    13
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 19977    13
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 19978    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   385


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 19979    13
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 19980    13
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 19981    13
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 19982    13
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 19983    13
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 19984    13
    33       | * SUCH DAMAGE.                                                                                  | 19985    13
    34       | *                                                                                               | 19986    13
    35       | *      @(#)unistd.h    8.12 (Berkeley) 4/27/95                                                  | 19987    13
    36       | */                                                                                              | 19988    13
    37       |                                                                                                 | 19989    13
    38       |#ifndef _UNISTD_H_                                                                               | 19990    13
    39       |#define _UNISTD_H_                                                                               | 19991    13
    40       |                                                                                                 | 19992    13
    41       |#include <sys/cdefs.h>                                                                           | 19993    13
    42       |#include <sys/types.h>                  /* XXX adds too much pollution. */                       | 19994    13
    43       |#include <sys/unistd.h>                                                                          | 19995    13
    44       |#include <sys/_null.h>                                                                           | 19996    13
    45       |#include <sys/_types.h>                                                                          | 19997    13
    46       |                                                                                                 | 19998    13
    47       |#ifndef _GID_T_DECLARED                                                                          | 19999    13
    48       |typedef __gid_t         gid_t;                                                                   | 20000    13
    49       |#define _GID_T_DECLARED                                                                          | 20001    13
    50       |#endif                                                                                           | 20002    13
    51       |                                                                                                 | 20003    13
    52       |#ifndef _OFF_T_DECLARED                                                                          | 20004    13
    53       |typedef __off_t         off_t;                                                                   | 20005    13
    54       |#define _OFF_T_DECLARED                                                                          | 20006    13
    55       |#endif                                                                                           | 20007    13
    56       |                                                                                                 | 20008    13
    57       |#ifndef _PID_T_DECLARED                                                                          | 20009    13
    58       |typedef __pid_t         pid_t;                                                                   | 20010    13
    59       |#define _PID_T_DECLARED                                                                          | 20011    13
    60       |#endif                                                                                           | 20012    13
    61       |                                                                                                 | 20013    13
    62       |#ifndef _SIZE_T_DECLARED                                                                         | 20014    13
    63       |typedef __size_t        size_t;                                                                  | 20015    13
    64       |#define _SIZE_T_DECLARED                                                                         | 20016    13
    65       |#endif                                                                                           | 20017    13
    66       |                                                                                                 | 20018    13
    67       |#ifndef _SSIZE_T_DECLARED                                                                        | 20019    13
    68       |typedef __ssize_t       ssize_t;                                                                 | 20020    13
    69       |#define _SSIZE_T_DECLARED                                                                        | 20021    13
    70       |#endif                                                                                           | 20022    13
    71       |                                                                                                 | 20023    13
    72       |#ifndef _UID_T_DECLARED                                                                          | 20024    13
    73       |typedef __uid_t         uid_t;                                                                   | 20025    13
    74       |#define _UID_T_DECLARED                                                                          | 20026    13
    75       |#endif                                                                                           | 20027    13
    76       |                                                                                                 | 20028    13
    77       |#ifndef _USECONDS_T_DECLARED                                                                     | 20029    13
    78       |typedef __useconds_t    useconds_t;                                                              | 20030    13
    79       |#define _USECONDS_T_DECLARED                                                                     | 20031    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   386


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    80       |#endif                                                                                           | 20032    13
    81       |                                                                                                 | 20033    13
    82       |#define  STDIN_FILENO   0       /* standard input file descriptor */                             | 20034    13
    83       |#define STDOUT_FILENO   1       /* standard output file descriptor */                            | 20035    13
    84       |#define STDERR_FILENO   2       /* standard error file descriptor */                             | 20036    13
    85       |                                                                                                 | 20037    13
    86       |#if __XSI_VISIBLE || __POSIX_VISIBLE >= 200112                                                   | 20038    13
    87       |#define F_ULOCK         0       /* unlock locked section */                                      | 20039    13
    88       |#define F_LOCK          1       /* lock a section for exclusive use */                           | 20040    13
    89       |#define F_TLOCK         2       /* test and lock a section for exclusive use */                  | 20041    13
    90       |#define F_TEST          3       /* test a section for locks by other procs */                    | 20042    13
    91       |#endif                                                                                           | 20043    13
    92       |                                                                                                 | 20044    13
    93       |/*                                                                                               | 20045    13
    94       | * POSIX options and option groups we unconditionally do or don't                                | 20046    13
    95       | * implement.  This list includes those options which are exclusively                            | 20047    13
    96       | * implemented (or not) in user mode.  Please keep this list in                                  | 20048    13
    97       | * alphabetical order.                                                                           | 20049    13
    98       | *                                                                                               | 20050    13
    99       | * Anything which is defined as zero below **must** have an                                      | 20051    13
   100       | * implementation for the corresponding sysconf() which is able to                               | 20052    13
   101       | * determine conclusively whether or not the feature is supported.                               | 20053    13
   102       | * Anything which is defined as other than -1 below **must** have                                | 20054    13
   103       | * complete headers, types, and function declarations as specified by                            | 20055    13
   104       | * the POSIX standard; however, if the relevant sysconf() function                               | 20056    13
   105       | * returns -1, the functions may be stubbed out.                                                 | 20057    13
   106       | */                                                                                              | 20058    13
   107       |#define _POSIX_BARRIERS                 -1                                                       | 20059    13
   108       |#define _POSIX_READER_WRITER_LOCKS      200112L                                                  | 20060    13
   109       |#define _POSIX_REGEXP                   1                                                        | 20061    13
   110       |#define _POSIX_SHELL                    1                                                        | 20062    13
   111       |#define _POSIX_SPAWN                    -1                                                       | 20063    13
   112       |#define _POSIX_SPIN_LOCKS               -1                                                       | 20064    13
   113       |#define _POSIX_THREAD_ATTR_STACKADDR    200112L                                                  | 20065    13
   114       |#define _POSIX_THREAD_ATTR_STACKSIZE    200112L                                                  | 20066    13
   115       |#define _POSIX_THREAD_CPUTIME           -1                                                       | 20067    13
   116       |#define _POSIX_THREAD_PRIO_INHERIT      200112L                                                  | 20068    13
   117       |#define _POSIX_THREAD_PRIO_PROTECT      200112L                                                  | 20069    13
   118       |#if 0                                                                                            | 20070    13
   119       |  /* z/OS doesn't support THREAD_PRIORITY_SCHEDULING */                                          | 20071    13
   120       |#define _POSIX_THREAD_PRIORITY_SCHEDULING 200112L                                                | 20072    13
   121       |#endif                                                                                           | 20073    13
   122       |#define _POSIX_THREAD_PROCESS_SHARED    -1                                                       | 20074    13
   123       |#define _POSIX_THREAD_SAFE_FUNCTIONS    -1                                                       | 20075    13
   124       |#define _POSIX_THREAD_SPORADIC_SERVER   -1                                                       | 20076    13
   125       |#define _POSIX_THREADS                  200112L                                                  | 20077    13
   126       |#define _POSIX_TRACE                    -1                                                       | 20078    13
   127       |#define _POSIX_TRACE_EVENT_FILTER       -1                                                       | 20079    13
   128       |#define _POSIX_TRACE_INHERIT            -1                                                       | 20080    13
   129       |#define _POSIX_TRACE_LOG                -1                                                       | 20081    13
   130       |#define _POSIX2_C_BIND                  200112L /* mandatory */                                  | 20082    13
   131       |#define _POSIX2_C_DEV                   -1 /* need c99 utility */                                | 20083    13
   132       |#define _POSIX2_CHAR_TERM               1                                                        | 20084    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   387


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   133       |#define _POSIX2_FORT_DEV                -1 /* need fort77 utility */                             | 20085    13
   134       |#define _POSIX2_FORT_RUN                200112L                                                  | 20086    13
   135       |#define _POSIX2_LOCALEDEF               -1                                                       | 20087    13
   136       |#define _POSIX2_PBS                     -1                                                       | 20088    13
   137       |#define _POSIX2_PBS_ACCOUNTING          -1                                                       | 20089    13
   138       |#define _POSIX2_PBS_CHECKPOINT          -1                                                       | 20090    13
   139       |#define _POSIX2_PBS_LOCATE              -1                                                       | 20091    13
   140       |#define _POSIX2_PBS_MESSAGE             -1                                                       | 20092    13
   141       |#define _POSIX2_PBS_TRACK               -1                                                       | 20093    13
   142       |#define _POSIX2_SW_DEV                  -1 /* XXX ??? */                                         | 20094    13
   143       |#define _POSIX2_UPE                     200112L                                                  | 20095    13
   144       |#define _V6_ILP32_OFF32                 -1                                                       | 20096    13
   145       |#define _V6_ILP32_OFFBIG                0                                                        | 20097    13
   146       |#define _V6_LP64_OFF64                  0                                                        | 20098    13
   147       |#define _V6_LPBIG_OFFBIG                -1                                                       | 20099    13
   148       |                                                                                                 | 20100    13
   149       |#if __XSI_VISIBLE                                                                                | 20101    13
   150       |#define _XOPEN_CRYPT                    -1 /* XXX ??? */                                         | 20102    13
   151       |#define _XOPEN_ENH_I18N                 -1 /* mandatory in XSI */                                | 20103    13
   152       |#define _XOPEN_LEGACY                   -1                                                       | 20104    13
   153       |#define _XOPEN_REALTIME                 -1                                                       | 20105    13
   154       |#define _XOPEN_REALTIME_THREADS         -1                                                       | 20106    13
   155       |#define _XOPEN_UNIX                     -1                                                       | 20107    13
   156       |#endif                                                                                           | 20108    13
   157       |                                                                                                 | 20109    13
   158       |/* Define the POSIX.2 version we target for compliance. */                                       | 20110    13
   159       |#define _POSIX2_VERSION         199212L                                                          | 20111    13
   160       |                                                                                                 | 20112    13
   161       |/*                                                                                               | 20113    13
   162       | * POSIX-style system configuration variable accessors (for the                                  | 20114    13
   163       | * sysconf function).  If these are -1 then they aren't supported                                | 20115    13
   164       | * by the sysconf function (sysconf will dutifully return -1.)                                   | 20116    13
   165       | *                                                                                               | 20117    13
   166       | * The sysconf() function on MVS is the BPX version, so only                                     | 20118    13
   167       | * the ones supported there are defined.                                                         | 20119    13
   168       | */                                                                                              | 20120    13
   169       |                                                                                                 | 20121    13
   170       |#define _SC_ARG_MAX              1                                                               | 20122    13
   171       |#define _SC_CHILD_MAX            2                                                               | 20123    13
   172       |#define _SC_CLK_TCK              3                                                               | 20124    13
   173       |#define _SC_JOB_CONTROL          4                                                               | 20125    13
   174       |#define _SC_NGROUPS_MAX          5                                                               | 20126    13
   175       |#define _SC_OPEN_MAX             6                                                               | 20127    13
   176       |#define _SC_SAVED_IDS            7                                                               | 20128    13
   177       |#define _SC_TZNAME_MAX           9                                                               | 20129    13
   178       |#define _SC_VERSION             10                                                               | 20130    13
   179       |#define _SC_THREAD_TASKS_MAX_NP 11                                                               | 20131    13
   180       |#define _SC_2_CHAR_TERM         12                                                               | 20132    13
   181       |#define _SC_THREADS_MAX_NP      13                                                               | 20133    13
   182       |#define _SC_MMAP_MEM_MAX_NP     14                                                               | 20134    13
   183       |#define _SC_BC_BASE_MAX          -1                                                              | 20135    13
   184       |#define _SC_BC_DIM_MAX          -1                                                               | 20136    13
   185       |#define _SC_BC_SCALE_MAX        -1                                                               | 20137    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   388


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   186       |#define _SC_BC_STRING_MAX       -1                                                               | 20138    13
   187       |#define _SC_COLL_WEIGHTS_MAX    -1                                                               | 20139    13
   188       |#define _SC_EXPR_NEST_MAX       -1                                                               | 20140    13
   189       |#define _SC_LINE_MAX            -1                                                               | 20141    13
   190       |#define _SC_RE_DUP_MAX          -1                                                               | 20142    13
   191       |#define _SC_2_VERSION           -1                                                               | 20143    13
   192       |#define _SC_2_C_BIND            -1                                                               | 20144    13
   193       |#define _SC_2_C_DEV             -1                                                               | 20145    13
   194       |#define _SC_2_FORT_DEV          -1                                                               | 20146    13
   195       |#define _SC_2_FORT_RUN          -1                                                               | 20147    13
   196       |#define _SC_2_LOCALEDEF         -1                                                               | 20148    13
   197       |#define _SC_2_SW_DEV            -1                                                               | 20149    13
   198       |#define _SC_2_UPE               -1                                                               | 20150    13
   199       |#define _SC_STREAM_MAX          118                                                              | 20151    13
   200       |                                                                                                 | 20152    13
   201       |#if __POSIX_VISIBLE >= 199309                                                                    | 20153    13
   202       |#define _SC_ASYNCHRONOUS_IO     -1                                                               | 20154    13
   203       |#define _SC_MAPPED_FILES        -1                                                               | 20155    13
   204       |#define _SC_MEMLOCK             -1                                                               | 20156    13
   205       |#define _SC_MEMLOCK_RANGE       -1                                                               | 20157    13
   206       |#define _SC_MEMORY_PROTECTION   -1                                                               | 20158    13
   207       |#define _SC_MESSAGE_PASSING     -1                                                               | 20159    13
   208       |#define _SC_PRIORITIZED_IO      -1                                                               | 20160    13
   209       |#define _SC_PRIORITY_SCHEDULING -1                                                               | 20161    13
   210       |#define _SC_REALTIME_SIGNALS    -1                                                               | 20162    13
   211       |#define _SC_SEMAPHORES          -1                                                               | 20163    13
   212       |#define _SC_FSYNC               -1                                                               | 20164    13
   213       |#define _SC_SHARED_MEMORY_OBJECTS -1                                                             | 20165    13
   214       |#define _SC_SYNCHRONIZED_IO     -1                                                               | 20166    13
   215       |#define _SC_TIMERS              -1                                                               | 20167    13
   216       |#define _SC_AIO_LISTIO_MAX      -1                                                               | 20168    13
   217       |#define _SC_AIO_MAX             -1                                                               | 20169    13
   218       |#define _SC_AIO_PRIO_DELTA_MAX  -1                                                               | 20170    13
   219       |#define _SC_DELAYTIMER_MAX      -1                                                               | 20171    13
   220       |#define _SC_MQ_OPEN_MAX         -1                                                               | 20172    13
   221       |#define _SC_PAGESIZE            16                                                               | 20173    13
   222       |#define _SC_RTSIG_MAX           -1                                                               | 20174    13
   223       |#define _SC_SEM_NSEMS_MAX      210                                                               | 20175    13
   224       |#define _SC_SEM_VALUE_MAX      211                                                               | 20176    13
   225       |#define _SC_SIGQUEUE_MAX        -1                                                               | 20177    13
   226       |#define _SC_TIMER_MAX           -1                                                               | 20178    13
   227       |#endif                                                                                           | 20179    13
   228       |                                                                                                 | 20180    13
   229       |#if __POSIX_VISIBLE >= 200112                                                                    | 20181    13
   230       |#define _SC_2_PBS               -1                                                               | 20182    13
   231       |#define _SC_2_PBS_ACCOUNTING    -1                                                               | 20183    13
   232       |#define _SC_2_PBS_CHECKPOINT    -1                                                               | 20184    13
   233       |#define _SC_2_PBS_LOCATE        -1                                                               | 20185    13
   234       |#define _SC_2_PBS_MESSAGE       -1                                                               | 20186    13
   235       |#define _SC_2_PBS_TRACK         -1                                                               | 20187    13
   236       |#define _SC_ADVISORY_INFO       -1                                                               | 20188    13
   237       |#define _SC_BARRIERS            -1                                                               | 20189    13
   238       |#define _SC_CLOCK_SELECTION     -1                                                               | 20190    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   389


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   239       |#define _SC_CPUTIME             -1                                                               | 20191    13
   240       |#define _SC_FILE_LOCKING        -1                                                               | 20192    13
   241       |#define _SC_GETGR_R_SIZE_MAX    -1                                                               | 20193    13
   242       |#define _SC_GETPW_R_SIZE_MAX    -1                                                               | 20194    13
   243       |#define _SC_HOST_NAME_MAX       -1                                                               | 20195    13
   244       |#define _SC_LOGIN_NAME_MAX      -1                                                               | 20196    13
   245       |#define _SC_MONOTONIC_CLOCK     -1                                                               | 20197    13
   246       |#define _SC_MQ_PRIO_MAX         -1                                                               | 20198    13
   247       |#define _SC_READER_WRITER_LOCKS -1                                                               | 20199    13
   248       |#define _SC_REGEXP              -1                                                               | 20200    13
   249       |#define _SC_SHELL               -1                                                               | 20201    13
   250       |#define _SC_SPAWN               -1                                                               | 20202    13
   251       |#define _SC_SPIN_LOCKS          171                                                              | 20203    13
   252       |#define _SC_SPORADIC_SERVER     172                                                              | 20204    13
   253       |#define _SC_THREAD_ATTR_STACKADDR 175                                                            | 20205    13
   254       |#define _SC_THREAD_ATTR_STACKSIZE 176                                                            | 20206    13
   255       |#define _SC_THREAD_CPUTIME        177                                                            | 20207    13
   256       |#define _SC_THREAD_DESTRUCTOR_ITERATIONS -1                                                      | 20208    13
   257       |#define _SC_THREAD_KEYS_MAX     207                                                              | 20209    13
   258       |#define _SC_THREAD_PRIO_INHERIT 178                                                              | 20210    13
   259       |#define _SC_THREAD_PRIO_PROTECT 179                                                              | 20211    13
   260       |#define _SC_THREAD_PRIORITY_SCHEDULING 180                                                       | 20212    13
   261       |#define _SC_THREAD_PROCESS_SHARED 181                                                            | 20213    13
   262       |#define _SC_THREAD_SAFE_FUNCTIONS 182                                                            | 20214    13
   263       |#define _SC_THREAD_SPORADIC_SERVER 183                                                           | 20215    13
   264       |#define _SC_THREAD_STACK_MIN    208                                                              | 20216    13
   265       |#define _SC_THREAD_THREADS_MAX  _SC_THREADS_MAX_NP                                               | 20217    13
   266       |#define _SC_THREADS             184                                                              | 20218    13
   267       |#define _SC_TIMEOUTS            185                                                              | 20219    13
   268       |#define _SC_TRACE               -1                                                               | 20220    13
   269       |#define _SC_TRACE_EVENT_FILTER  -1                                                               | 20221    13
   270       |#define _SC_TRACE_INHERIT       -1                                                               | 20222    13
   271       |#define _SC_TRACE_LOG           -1                                                               | 20223    13
   272       |#define _SC_TTY_NAME_MAX        -1                                                               | 20224    13
   273       |#define _SC_TYPED_MEMORY_OBJECTS -1                                                              | 20225    13
   274       |#define _SC_V6_ILP32_OFF32      -1                                                               | 20226    13
   275       |#define _SC_V6_ILP32_OFFBIG     -1                                                               | 20227    13
   276       |#define _SC_V6_LP64_OFF64       -1                                                               | 20228    13
   277       |#define _SC_V6_LPBIG_OFFBIG     -1                                                               | 20229    13
   278       |#define _SC_IPV6                -1                                                               | 20230    13
   279       |#define _SC_RAW_SOCKETS         -1                                                               | 20231    13
   280       |#define _SC_SYMLOOP_MAX         -1                                                               | 20232    13
   281       |#endif                                                                                           | 20233    13
   282       |                                                                                                 | 20234    13
   283       |#if __XSI_VISIBLE                                                                                | 20235    13
   284       |#define _SC_ATEXIT_MAX          -1                                                               | 20236    13
   285       |#define _SC_IOV_MAX             -1                                                               | 20237    13
   286       |#define _SC_PAGE_SIZE           _SC_PAGESIZE                                                     | 20238    13
   287       |#define _SC_XOPEN_CRYPT         -1                                                               | 20239    13
   288       |#define _SC_XOPEN_ENH_I18N      -1                                                               | 20240    13
   289       |#define _SC_XOPEN_LEGACY        -1                                                               | 20241    13
   290       |#define _SC_XOPEN_REALTIME      -1                                                               | 20242    13
   291       |#define _SC_XOPEN_REALTIME_THREADS -1                                                            | 20243    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   390


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   292       |#define _SC_XOPEN_SHM           -1                                                               | 20244    13
   293       |#define _SC_XOPEN_STREAMS       -1                                                               | 20245    13
   294       |#define _SC_XOPEN_UNIX          -1                                                               | 20246    13
   295       |#define _SC_XOPEN_VERSION       -1                                                               | 20247    13
   296       |#define _SC_XOPEN_XCU_VERSION   -1                                                               | 20248    13
   297       |#endif                                                                                           | 20249    13
   298       |                                                                                                 | 20250    13
   299       |#if ( defined(_LP64) || defined(__U98) )                                                         | 20251    13
   300       |#define _XBS5_ILP32_OFF32        1                                                               | 20252    13
   301       |#define _XBS5_ILP32_OFFBIG      -1                                                               | 20253    13
   302       |#define _XBS5_LP64_OFF64        -1                                                               | 20254    13
   303       |#define _XBS5_LPBIG_OFFBIG      -1                                                               | 20255    13
   304       |#endif  /*  _LP64  ||  __U98  */                                                                 | 20256    13
   305       |                                                                                                 | 20257    13
   306       |#if __BSD_VISIBLE                                                                                | 20258    13
   307       |#define _SC_NPROCESSORS_CONF    -1                                                               | 20259    13
   308       |#define _SC_NPROCESSORS_ONLN    -1                                                               | 20260    13
   309       |#endif                                                                                           | 20261    13
   310       |                                                                                                 | 20262    13
   311       |/* Keys for the confstr(3) function. */                                                          | 20263    13
   312       |#if __POSIX_VISIBLE >= 199209                                                                    | 20264    13
   313       |#define _CS_PATH                1       /* default value of PATH */                              | 20265    13
   314       |#endif                                                                                           | 20266    13
   315       |                                                                                                 | 20267    13
   316       |#if __POSIX_VISIBLE >= 200112                                                                    | 20268    13
   317       |#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS         2                                                | 20269    13
   318       |#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS        3                                                | 20270    13
   319       |#define _CS_POSIX_V6_ILP32_OFF32_LIBS           4                                                | 20271    13
   320       |#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS        5                                                | 20272    13
   321       |#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS       6                                                | 20273    13
   322       |#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS          7                                                | 20274    13
   323       |#define _CS_POSIX_V6_LP64_OFF64_CFLAGS          8                                                | 20275    13
   324       |#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS         9                                                | 20276    13
   325       |#define _CS_POSIX_V6_LP64_OFF64_LIBS            10                                               | 20277    13
   326       |#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS        11                                               | 20278    13
   327       |#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS       12                                               | 20279    13
   328       |#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS          13                                               | 20280    13
   329       |#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS      14                                               | 20281    13
   330       |#endif                                                                                           | 20282    13
   331       |                                                                                                 | 20283    13
   332       |                                                                                                 | 20284    13
   333       |#ifndef _POSIX_SOURCE                                                                            | 20285    13
   334       |#define       F_ULOCK     0    /* unlock locked section */                                       | 20286    13
   335       |#define       F_LOCK      1    /* lock a section for exclusive use */                            | 20287    13
   336       |#define       F_TLOCK     2    /* test and lock a section for exclusive use */                   | 20288    13
   337       |#define       F_TEST      3    /* test a section for locks by other procs */                     | 20289    13
   338       |#endif                                                                                           | 20290    13
   339       |                                                                                                 | 20291    13
   340       |/* For z/OS BPX (posix-y) interface, we also have the */                                         | 20292    13
   341       |/* __querydub() function that determines if a task has */                                        | 20293    13
   342       |/* been "dub'd" into the POSIX system */                                                         | 20294    13
   343       |#define _QDB_DUBBED_FIRST    (1) /* The task has already been dubbed.  */                        | 20295    13
   344       |                                 /* This task and this RB caused the dub. */                     | 20296    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   391


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   345       |#define _QDB_DUBBED          (2) /* The task has already been dubbed.  */                        | 20297    13
   346       |                                 /* Another task or another RB caused it */                      | 20298    13
   347       |#define _QDB_DUB_MAY_FAIL    (4) /* The task has not been dubbed; an attempt */                  | 20299    13
   348       |                                 /* to dub the task may fail. */                                 | 20300    13
   349       |#define _QDB_DUB_OKAY        (8) /* The task has not beed dubbed; an attempt */                  | 20301    13
   350       |                                 /* to dub will probably succeed. */                             | 20302    13
   351       |#define _QDB_DUB_AS_PROCESS (16) /* The task has not been dubbed; but its */                     | 20303    13
   352       |                                 /* address space has. If dubbed, if will */                     | 20304    13
   353       |                                 /* become another process. */                                   | 20305    13
   354       |#define _QDB_DUB_AS_THREAD  (32) /* The task has not been dubbed; but its */                     | 20306    13
   355       |                                 /* address space has. If dubbed, it will */                     | 20307    13
   356       |                                 /* become a thread within the process. */                       | 20308    13
   357       |                                                                                                 | 20309    13
   358       |__BEGIN_DECLS                                                                                    | 20310    13
   359       |#pragma map(__querydub,"@@QDUB")                                                                 | 20311    13
   360       |int __querydub(void);                                                                            | 20312    13
   361       |                                                                                                 | 20313    13
   362       |/* 1003.1-1990 */                                                                                | 20314    13
   363       |#pragma map (_exit, "@@EXIT")                                                                    | 20315    13
   364       |void     _exit(int) __dead2;                                                                     | 20316    13
   365       |int      access(const char *, int);                                                              | 20317    13
   366       |unsigned int     alarm(unsigned int);                                                            | 20318    13
   367       |int      chdir(const char *);                                                                    | 20319    13
   368       |int      chown(const char *, uid_t, gid_t);                                                      | 20320    13
   369       |int      close(int);                                                                             | 20321    13
   370       |int      dup(int);                                                                               | 20322    13
   371       |int      dup2(int, int);                                                                         | 20323    13
   372       |int      eaccess(const char *, int);                                                             | 20324    13
   373       |int      execl(const char *, const char *, ...);                                                 | 20325    13
   374       |int      execle(const char *, const char *, ...);                                                | 20326    13
   375       |int      execlp(const char *, const char *, ...);                                                | 20327    13
   376       |int      execv(const char *, char * const *);                                                    | 20328    13
   377       |int      execve(const char *, char * const *, char * const *);                                   | 20329    13
   378       |int      execvp(const char *, char * const *);                                                   | 20330    13
   379       |pid_t    fork(void);                                                                             | 20331    13
   380       |#pragma map(fpathconf, "@@FPATHC")                                                               | 20332    13
   381       |long     fpathconf(int, int);                                                                    | 20333    13
   382       |char    *getcwd(char *, size_t);                                                                 | 20334    13
   383       |gid_t    getegid(void);                                                                          | 20335    13
   384       |uid_t    geteuid(void);                                                                          | 20336    13
   385       |gid_t    getgid(void);                                                                           | 20337    13
   386       |#pragma map(getgroups, "@@GETGRO")                                                               | 20338    13
   387       |int      getgroups(int, gid_t []);                                                               | 20339    13
   388       |char    *getlogin(void);                                                                         | 20340    13
   389       |pid_t    getpgrp(void);                                                                          | 20341    13
   390       |pid_t    getpid(void);                                                                           | 20342    13
   391       |pid_t    getppid(void);                                                                          | 20343    13
   392       |uid_t    getuid(void);                                                                           | 20344    13
   393       |int      isatty(int);                                                                            | 20345    13
   394       |int      link(const char *, const char *);                                                       | 20346    13
   395       |#ifndef _LSEEK_DECLARED                                                                          | 20347    13
   396       |#define _LSEEK_DECLARED                                                                          | 20348    13
   397       |off_t    lseek(int, off_t, int);                                                                 | 20349    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   392


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   398       |#endif                                                                                           | 20350    13
   399       |long     pathconf(const char *, int);                                                            | 20351    13
   400       |int      pause(void);                                                                            | 20352    13
   401       |int      pipe(int *);                                                                            | 20353    13
   402       |ssize_t  read(int, void *, size_t);                                                              | 20354    13
   403       |int      rmdir(const char *);                                                                    | 20355    13
   404       |int      setgid(gid_t);                                                                          | 20356    13
   405       |int      setpgid(pid_t, pid_t);                                                                  | 20357    13
   406       |void     setproctitle(const char *_fmt, ...) __printf0like(1, 2);                                | 20358    13
   407       |pid_t    setsid(void);                                                                           | 20359    13
   408       |int      setuid(uid_t);                                                                          | 20360    13
   409       |unsigned int     sleep(unsigned int);                                                            | 20361    13
   410       |long     sysconf(int);                                                                           | 20362    13
   411       |#pragma map(tcgetpgrp, "@@TCGPGR")                                                               | 20363    13
   412       |pid_t    tcgetpgrp(int);                                                                         | 20364    13
   413       |#pragma map(tcsetpgrp, "@@TCSPGR")                                                               | 20365    13
   414       |int      tcsetpgrp(int, pid_t);                                                                  | 20366    13
   415       |char    *ttyname(int);                                                                           | 20367    13
   416       |int     ttyname_r(int, char *, size_t);                                                          | 20368    13
   417       |int      unlink(const char *);                                                                   | 20369    13
   418       |ssize_t  write(int, const void *, size_t);                                                       | 20370    13
   419       |                                                                                                 | 20371    13
   420       |/* 1003.2-1992 */                                                                                | 20372    13
   421       |#if __POSIX_VISIBLE >= 199209 || __XSI_VISIBLE                                                   | 20373    13
   422       |size_t   confstr(int, char *, size_t);                                                           | 20374    13
   423       |#ifndef _GETOPT_DECLARED                                                                         | 20375    13
   424       |#define _GETOPT_DECLARED                                                                         | 20376    13
   425       |int      getopt(int, char * const [], const char *);                                             | 20377    13
   426       |                                                                                                 | 20378    13
   427       |extern char *optarg;                    /* getopt(3) external variables */                       | 20379    13
   428       |extern int optind, opterr, optopt;                                                               | 20380    13
   429       |#endif /* _GETOPT_DECLARED */                                                                    | 20381    13
   430       |#endif                                                                                           | 20382    13
   431       |                                                                                                 | 20383    13
   432       |/* ISO/IEC 9945-1: 1996 */                                                                       | 20384    13
   433       |#if __POSIX_VISIBLE >= 199506 || __XSI_VISIBLE                                                   | 20385    13
   434       |int      fsync(int);                                                                             | 20386    13
   435       |                                                                                                 | 20387    13
   436       |/*                                                                                               | 20388    13
   437       | * ftruncate() was in the POSIX Realtime Extension (it's used for shared                         | 20389    13
   438       | * memory), but truncate() was not.                                                              | 20390    13
   439       | */                                                                                              | 20391    13
   440       |#ifndef _FTRUNCATE_DECLARED                                                                      | 20392    13
   441       |#define _FTRUNCATE_DECLARED                                                                      | 20393    13
   442       |#pragma map (ftruncate, "@@FTRUNC")                                                              | 20394    13
   443       |int      ftruncate(int, off_t);                                                                  | 20395    13
   444       |#endif                                                                                           | 20396    13
   445       |#endif                                                                                           | 20397    13
   446       |                                                                                                 | 20398    13
   447       |#if __POSIX_VISIBLE >= 199506                                                                    | 20399    13
   448       |int      getlogin_r(char *, int);                                                                | 20400    13
   449       |#endif                                                                                           | 20401    13
   450       |                                                                                                 | 20402    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   393


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   451       |/* 1003.1-2001 */                                                                                | 20403    13
   452       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 20404    13
   453       |int      fchown(int, uid_t, gid_t);                                                              | 20405    13
   454       |int      readlink(const char *, char *, int);                                                    | 20406    13
   455       |#endif                                                                                           | 20407    13
   456       |#if __POSIX_VISIBLE >= 200112                                                                    | 20408    13
   457       |#pragma map (gethostname,"@@GHNAM")                                                              | 20409    13
   458       |int      gethostname(char *, size_t);                                                            | 20410    13
   459       |int      setegid(gid_t);                                                                         | 20411    13
   460       |int      seteuid(uid_t);                                                                         | 20412    13
   461       |int    getpeereid(int, uid_t *, gid_t *);                                                        | 20413    13
   462       |int    getpgid(pid_t _pid);                                                                      | 20414    13
   463       |int    getresgid(gid_t *, gid_t *, gid_t *);                                                     | 20415    13
   464       |int    getresuid(uid_t *, uid_t *, uid_t *);                                                     | 20416    13
   465       |int    getsid(pid_t _pid);                                                                       | 20417    13
   466       |#endif                                                                                           | 20418    13
   467       |                                                                                                 | 20419    13
   468       |/*                                                                                               | 20420    13
   469       | * symlink() was originally in POSIX.1a, which was withdrawn after                               | 20421    13
   470       | * being overtaken by events (1003.1-2001).  It was in XPG4.2, and of                            | 20422    13
   471       | * course has been in BSD since 4.2.                                                             | 20423    13
   472       | */                                                                                              | 20424    13
   473       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE >= 402 || __BSD_VISIBLE                           | 20425    13
   474       |int      symlink(const char * __restrict, const char * __restrict);                              | 20426    13
   475       |#endif                                                                                           | 20427    13
   476       |                                                                                                 | 20428    13
   477       |/* X/Open System Interfaces */                                                                   | 20429    13
   478       |#if __XSI_VISIBLE                                                                                | 20430    13
   479       |char    *crypt(const char *, const char *);                                                      | 20431    13
   480       |/* char *ctermid(char *); */            /* XXX ??? */                                            | 20432    13
   481       |int      encrypt(char *, int);                                                                   | 20433    13
   482       |int      fchdir(int);                                                                            | 20434    13
   483       |#pragma map (gethostid,"@@GHTID")                                                                | 20435    13
   484       |long     gethostid(void);                                                                        | 20436    13
   485       |int      getpgid(pid_t _pid);                                                                    | 20437    13
   486       |int      getsid(pid_t _pid);                                                                     | 20438    13
   487       |char    *getwd(char *);                 /* LEGACY: obsoleted by getcwd() */                      | 20439    13
   488       |int      lchown(const char *, uid_t, gid_t);                                                     | 20440    13
   489       |int      lockf(int, int, off_t);                                                                 | 20441    13
   490       |int      nice(int);                                                                              | 20442    13
   491       |ssize_t  pread(int, void *, size_t, off_t);                                                      | 20443    13
   492       |ssize_t  pwrite(int, const void *, size_t, off_t);                                               | 20444    13
   493       |int      setpgrp(pid_t _pid, pid_t _pgrp); /* obsoleted by setpgid() */                          | 20445    13
   494       |int      setregid(gid_t, gid_t);                                                                 | 20446    13
   495       |int      setreuid(uid_t, uid_t);                                                                 | 20447    13
   496       |                                                                                                 | 20448    13
   497       |#ifndef _SWAB_DECLARED                                                                           | 20449    13
   498       |#define _SWAB_DECLARED                                                                           | 20450    13
   499       |void     swab(const void * __restrict, void * __restrict, ssize_t);                              | 20451    13
   500       |#endif /* _SWAB_DECLARED */                                                                      | 20452    13
   501       |                                                                                                 | 20453    13
   502       |void     sync(void);                                                                             | 20454    13
   503       |useconds_t       ualarm(useconds_t, useconds_t);                                                 | 20455    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   394


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   504       |int      usleep(useconds_t);                                                                     | 20456    13
   505       |pid_t    vfork(void);                                                                            | 20457    13
   506       |                                                                                                 | 20458    13
   507       |/* See comment at ftruncate() above. */                                                          | 20459    13
   508       |#ifndef _TRUNCATE_DECLARED                                                                       | 20460    13
   509       |#define _TRUNCATE_DECLARED                                                                       | 20461    13
   510       |int      truncate(const char *, off_t);                                                          | 20462    13
   511       |#endif                                                                                           | 20463    13
   512       |#endif /* __XSI_VISIBLE */                                                                       | 20464    13
   513       |                                                                                                 | 20465    13
   514       |#if __XSI_VISIBLE <= 500 || __BSD_VISIBLE                                                        | 20466    13
   515       |/* int   brk(const void *); */                                                                   | 20467    13
   516       |int      chroot(const char *);                                                                   | 20468    13
   517       |#pragma map (getdtablesize, "@GDTBLSZ")                                                          | 20469    13
   518       |int      getdtablesize(void);                                                                    | 20470    13
   519       |int      getpagesize(void) __pure2;                                                              | 20471    13
   520       |char    *getpass(const char *);                                                                  | 20472    13
   521       |void    *sbrk(intptr_t);                                                                         | 20473    13
   522       |#endif                                                                                           | 20474    13
   523       |                                                                                                 | 20475    13
   524       |#pragma map(__isPosixOn, "@@ISPOSI")                                                             | 20476    13
   525       |int      __isPosixOn(void);                                                                      | 20477    13
   526       |                                                                                                 | 20478    13
   527       |#if __BSD_VISIBLE                                                                                | 20479    13
   528       |struct timeval;                         /* select(2) */                                          | 20480    13
   529       |int      acct(const char *);                                                                     | 20481    13
   530       |int      async_daemon(void);                                                                     | 20482    13
   531       |int      check_utility_compat(const char *);                                                     | 20483    13
   532       |const char *                                                                                     | 20484    13
   533       |         crypt_get_format(void);                                                                 | 20485    13
   534       |int      crypt_set_format(const char *);                                                         | 20486    13
   535       |int      des_cipher(const char *, char *, long, int);                                            | 20487    13
   536       |int      des_setkey(const char *key);                                                            | 20488    13
   537       |void     endusershell(void);                                                                     | 20489    13
   538       |int      exect(const char *, char * const *, char * const *);                                    | 20490    13
   539       |int      execvP(const char *, const char *, char * const *);                                     | 20491    13
   540       |char    *fflagstostr(u_long);                                                                    | 20492    13
   541       |int      getdomainname(char *, int);                                                             | 20493    13
   542       |int      getgrouplist(const char *, gid_t, gid_t *, int *);                                      | 20494    13
   543       |mode_t   getmode(const void *, mode_t);                                                          | 20495    13
   544       |int      getpeereid(int, uid_t *, gid_t *);                                                      | 20496    13
   545       |int      getresgid(gid_t *, gid_t *, gid_t *);                                                   | 20497    13
   546       |int      getresuid(uid_t *, uid_t *, uid_t *);                                                   | 20498    13
   547       |char    *getusershell(void);                                                                     | 20499    13
   548       |int      initgroups(const char *, gid_t);                                                        | 20500    13
   549       |int      iruserok(unsigned long, int, const char *, const char *);                               | 20501    13
   550       |int      iruserok_sa(const void *, int, int, const char *, const char *);                        | 20502    13
   551       |#pragma map(issetugid, "ISSETUGI")                                                               | 20503    13
   552       |int      issetugid(void);                                                                        | 20504    13
   553       |char    *mkdtemp(char *);                                                                        | 20505    13
   554       |#ifndef _MKNOD_DECLARED                                                                          | 20506    13
   555       |int      mknod(const char *, mode_t, dev_t);                                                     | 20507    13
   556       |#define _MKNOD_DECLARED                                                                          | 20508    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   395


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   557       |#endif                                                                                           | 20509    13
   558       |#ifndef _MKSTEMP_DECLARED                                                                        | 20510    13
   559       |int      mkstemp(char *);                                                                        | 20511    13
   560       |#define _MKSTEMP_DECLARED                                                                        | 20512    13
   561       |#endif                                                                                           | 20513    13
   562       |int      mkstemps(char *, int);                                                                  | 20514    13
   563       |#ifndef _MKTEMP_DECLARED                                                                         | 20515    13
   564       |char    *mktemp(char *);                                                                         | 20516    13
   565       |#define _MKTEMP_DECLARED                                                                         | 20517    13
   566       |#endif                                                                                           | 20518    13
   567       |int      nfssvc(int, void *);                                                                    | 20519    13
   568       |int      profil(char *, size_t, vm_offset_t, int);                                               | 20520    13
   569       |int      rcmd(char **, int, const char *, const char *, const char *, int *);                    | 20521    13
   570       |int      rcmd_af(char **, int, const char *,                                                     | 20522    13
   571       |                const char *, const char *, int *, int);                                         | 20523    13
   572       |int      rcmdsh(char **, int, const char *,                                                      | 20524    13
   573       |                const char *, const char *, const char *);                                       | 20525    13
   574       |char    *re_comp(const char *);                                                                  | 20526    13
   575       |int      re_exec(const char *);                                                                  | 20527    13
   576       |int      reboot(int);                                                                            | 20528    13
   577       |int      revoke(const char *);                                                                   | 20529    13
   578       |pid_t    rfork(int);                                                                             | 20530    13
   579       |pid_t    rfork_thread(int, void *, int (*)(void *), void *);                                     | 20531    13
   580       |int      rresvport(int *);                                                                       | 20532    13
   581       |int      rresvport_af(int *, int);                                                               | 20533    13
   582       |int      ruserok(const char *, int, const char *, const char *);                                 | 20534    13
   583       |#if __BSD_VISIBLE                                                                                | 20535    13
   584       |#ifndef _SELECT_DECLARED                                                                         | 20536    13
   585       |#define _SELECT_DECLARED                                                                         | 20537    13
   586       |int      select(int, fd_set *, fd_set *, fd_set *, struct timeval *);                            | 20538    13
   587       |int      selectex(int, fd_set *, fd_set *, fd_set *, struct timeval *,                           | 20539    13
   588       |                       int *ecbptr);                                                             | 20540    13
   589       |                                                                                                 | 20541    13
   590       |#endif                                                                                           | 20542    13
   591       |#endif                                                                                           | 20543    13
   592       |int      setdomainname(const char *, int);                                                       | 20544    13
   593       |#pragma map(setgroups, "@@SETGRP")                                                               | 20545    13
   594       |int      setgroups(int, const gid_t *);                                                          | 20546    13
   595       |void     sethostid(long);                                                                        | 20547    13
   596       |int      sethostname(const char *, int);                                                         | 20548    13
   597       |#ifndef _SETKEY_DECLARED                                                                         | 20549    13
   598       |int      setkey(const char *);                                                                   | 20550    13
   599       |#define _SETKEY_DECLARED                                                                         | 20551    13
   600       |#endif                                                                                           | 20552    13
   601       |int      setlogin(const char *);                                                                 | 20553    13
   602       |void    *setmode(const char *);                                                                  | 20554    13
   603       |int      setresgid(gid_t, gid_t, gid_t);                                                         | 20555    13
   604       |int      setresuid(uid_t, uid_t, uid_t);                                                         | 20556    13
   605       |int      setrgid(gid_t);                                                                         | 20557    13
   606       |int      setruid(uid_t);                                                                         | 20558    13
   607       |void     setusershell(void);                                                                     | 20559    13
   608       |int      strtofflags(char **, u_long *, u_long *);                                               | 20560    13
   609       |int      swapon(const char *);                                                                   | 20561    13
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   396


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   610       |int      swapoff(const char *);                                                                  | 20562    13
   611       |int      syscall(int, ...);                                                                      | 20563    13
   612       |off_t    __syscall(quad_t, ...);                                                                 | 20564    13
   613       |int      ttyslot(void);                                                                          | 20565    13
   614       |int      undelete(const char *);                                                                 | 20566    13
   615       |int      unwhiteout(const char *);                                                               | 20567    13
   616       |void    *valloc(size_t);                        /* obsoleted by malloc() */                      | 20568    13
   617       |                                                                                                 | 20569    13
   618       |#ifndef _OPTRESET_DECLARED                                                                       | 20570    13
   619       |#define _OPTRESET_DECLARED                                                                       | 20571    13
   620       |extern int optreset;                    /* getopt(3) external variable */                        | 20572    13
   621       |#endif                                                                                           | 20573    13
   622       |#endif /* __BSD_VISIBLE */                                                                       | 20574    13
   623       |__END_DECLS                                                                                      | 20575    13
   624       |                                                                                                 | 20576    13
   625       |#endif /* !_UNISTD_H_ */                                                                         | 20577    13
   626       |#pragma pack(reset)                                                                              | 20578    13
    45       |#include <stdio.h>                                                                               | 20579    39
     1       |/* release 2.25.00 */                                                                            | 20580    19
     2       |#pragma pack()                                                                                   | 20581    19
     3       |/*-                                                                                              | 20582    19
     4       | * Copyright (c) 1990, 1993                                                                      | 20583    19
     5       | *      The Regents of the University of California.  All rights reserved.                       | 20584    19
     6       | *                                                                                               | 20585    19
     7       | * This code is derived from software contributed to Berkeley by                                 | 20586    19
     8       | * Chris Torek.                                                                                  | 20587    19
     9       | *                                                                                               | 20588    19
    10       | * Redistribution and use in source and binary forms, with or without                            | 20589    19
    11       | * modification, are permitted provided that the following conditions                            | 20590    19
    12       | * are met:                                                                                      | 20591    19
    13       | * 1. Redistributions of source code must retain the above copyright                             | 20592    19
    14       | *    notice, this list of conditions and the following disclaimer.                              | 20593    19
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 20594    19
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 20595    19
    17       | *    documentation and/or other materials provided with the distribution.                       | 20596    19
    18       | * 3. All advertising materials mentioning features or use of this software                      | 20597    19
    19       | *    must display the following acknowledgement:                                                | 20598    19
    20       | *      This product includes software developed by the University of                            | 20599    19
    21       | *      California, Berkeley and its contributors.                                               | 20600    19
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 20601    19
    23       | *    may be used to endorse or promote products derived from this software                      | 20602    19
    24       | *    without specific prior written permission.                                                 | 20603    19
    25       | *                                                                                               | 20604    19
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 20605    19
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 20606    19
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 20607    19
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 20608    19
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 20609    19
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 20610    19
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 20611    19
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 20612    19
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 20613    19
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 20614    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   397


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       | * SUCH DAMAGE.                                                                                  | 20615    19
    37       | *                                                                                               | 20616    19
    38       | *      @(#)stdio.h     8.5 (Berkeley) 4/29/95                                                   | 20617    19
    39       | */                                                                                              | 20618    19
    40       |                                                                                                 | 20619    19
    41       |#ifndef _STDIO_H_                                                                                | 20620    19
    42       |#define _STDIO_H_                                                                                | 20621    19
    43       |                                                                                                 | 20622    19
    44       |#include <sys/cdefs.h>                                                                           | 20623    19
    45       |#include <sys/_null.h>                                                                           | 20624    19
    46       |#include <sys/_types.h>                                                                          | 20625    19
    47       |                                                                                                 | 20626    19
    48       |typedef __off_t         fpos_t;                                                                  | 20627    19
    49       |                                                                                                 | 20628    19
    50       |#ifndef _SIZE_T_DECLARED                                                                         | 20629    19
    51       |typedef __size_t        size_t;                                                                  | 20630    19
    52       |#define _SIZE_T_DECLARED                                                                         | 20631    19
    53       |#endif                                                                                           | 20632    19
    54       |                                                                                                 | 20633    19
    55       |#if __POSIX_VISIBLE >= 200809                                                                    | 20634    19
    56       |#ifndef _OFF_T_DECLARED                                                                          | 20635    19
    57       |#define _OFF_T_DECLARED                                                                          | 20636    19
    58       |typedef __off_t         off_t;                                                                   | 20637    19
    59       |#endif                                                                                           | 20638    19
    60       |#ifndef _SSIZE_T_DECLARED                                                                        | 20639    19
    61       |#define _SSIZE_T_DECLARED                                                                        | 20640    19
    62       |typedef __ssize_t       ssize_t;                                                                 | 20641    19
    63       |#endif                                                                                           | 20642    19
    64       |#endif                                                                                           | 20643    19
    65       |                                                                                                 | 20644    19
    66       |#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                  | 20645    19
    67       |#ifndef _VA_LIST_DECLARED                                                                        | 20646    19
    68       |typedef __va_list       va_list;                                                                 | 20647    19
    69       |#define _VA_LIST_DECLARED                                                                        | 20648    19
    70       |#endif                                                                                           | 20649    19
    71       |#endif                                                                                           | 20650    19
    72       |                                                                                                 | 20651    19
    73       |#define _FSTDIO                 /* Define for new stdio with functions. */                       | 20652    19
    74       |                                                                                                 | 20653    19
    75       |/*                                                                                               | 20654    19
    76       | * NB: to fit things in six character monocase externals, the stdio                              | 20655    19
    77       | * code uses the prefix `__s' for stdio objects, typically followed                              | 20656    19
    78       | * by a three-character attempt at a mnemonic.                                                   | 20657    19
    79       | */                                                                                              | 20658    19
    80       |                                                                                                 | 20659    19
    81       |/* stdio buffers */                                                                              | 20660    19
    82       |struct __sbuf {                                                                                  | 20661    19
    83       |        unsigned char *_base;                                                                    | 20662    19
    84       |        int     _size;                                                                           | 20663    19
    85       |};                                                                                               | 20664    19
    86       |                                                                                                 | 20665    19
    87       |/* hold a buncha junk that would grow the ABI */                                                 | 20666    19
    88       |struct __sFILEX;                                                                                 | 20667    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   398


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    89       |                                                                                                 | 20668    19
    90       |/*                                                                                               | 20669    19
    91       | * stdio state variables.                                                                        | 20670    19
    92       | *                                                                                               | 20671    19
    93       | * The following always hold:                                                                    | 20672    19
    94       | *                                                                                               | 20673    19
    95       | *      if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),                                            | 20674    19
    96       | *              _lbfsize is -_bf._size, else _lbfsize is 0                                       | 20675    19
    97       | *      if _flags&__SRD, _w is 0                                                                 | 20676    19
    98       | *      if _flags&__SWR, _r is 0                                                                 | 20677    19
    99       | *                                                                                               | 20678    19
   100       | * This ensures that the getc and putc macros (or inline functions) never                        | 20679    19
   101       | * try to write or read from a file that is in `read' or `write' mode.                           | 20680    19
   102       | * (Moreover, they can, and do, automatically switch from read mode to                           | 20681    19
   103       | * write mode, and back, on "r+" and "w+" files.)                                                | 20682    19
   104       | *                                                                                               | 20683    19
   105       | * _lbfsize is used only to make the inline line-buffered output stream                          | 20684    19
   106       | * code as compact as possible.                                                                  | 20685    19
   107       | *                                                                                               | 20686    19
   108       | * _ub, _up, and _ur are used when ungetc() pushes back more characters                          | 20687    19
   109       | * than fit in the current _bf, or when ungetc() pushes back a character                         | 20688    19
   110       | * that does not match the previous one in _bf.  When this happens,                              | 20689    19
   111       | * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff                               | 20690    19
   112       | * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.                        | 20691    19
   113       | */                                                                                              | 20692    19
   114       |typedef struct __sFILE {                                                                         | 20693    19
   115       |        unsigned char *_p;      /* current position in (some) buffer */                          | 20694    19
   116       |        int     _r;             /* read space left for getc() */                                 | 20695    19
   117       |        int     _w;             /* write space left for putc() */                                | 20696    19
   118       |        int     _flags;         /* flags, below; this FILE is free if 0 */                       | 20697    19
   119       |        short   _file;          /* fileno, if Unix descriptor, else -1 */                        | 20698    19
   120       |        struct  __sbuf _bf;     /* the buffer (at least 1 byte, if !NULL) */                     | 20699    19
   121       |        int     _lbfsize;       /* 0 or -_bf._size, for inline putc */                           | 20700    19
   122       |                                                                                                 | 20701    19
   123       |        /* operations */                                                                         | 20702    19
   124       |        void    *_cookie;       /* cookie passed to io functions */                              | 20703    19
   125       |        int     (*_close)(void *);                                                               | 20704    19
   126       |        int     (*_read)(void *, char *, int);                                                   | 20705    19
   127       |        fpos_t  (*_seek)(void *, fpos_t, int);                                                   | 20706    19
   128       |        int     (*_write)(void *, const char *, int);                                            | 20707    19
   129       |                                                                                                 | 20708    19
   130       |        /* separate buffer for long sequences of ungetc() */                                     | 20709    19
   131       |        struct  __sbuf _ub;     /* ungetc buffer */                                              | 20710    19
   132       |        struct __sFILEX *_extra; /* additions to FILE to not break ABI */                        | 20711    19
   133       |        int     _ur;            /* saved _r when _r is counting ungetc data */                   | 20712    19
   134       |                                                                                                 | 20713    19
   135       |        /* tricks to meet minimum requirements even when malloc() fails */                       | 20714    19
   136       |        unsigned char _ubuf[3]; /* guarantee an ungetc() buffer */                               | 20715    19
   137       |        unsigned char _nbuf[1]; /* guarantee a getc() buffer */                                  | 20716    19
   138       |                                                                                                 | 20717    19
   139       |        /* separate buffer for fgetln() when line crosses buffer boundary */                     | 20718    19
   140       |        struct  __sbuf _lb;     /* buffer for fgetln() */                                        | 20719    19
   141       |                                                                                                 | 20720    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   399


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   142       |        /* Unix stdio files get aligned to block boundaries on fseek() */                        | 20721    19
   143       |        int     _blksize;       /* stat.st_blksize (may be != _bf._size) */                      | 20722    19
   144       |        fpos_t  _offset;        /* current lseek offset */                                       | 20723    19
   145       |} FILE;                                                                                          | 20724    19
   146       |                                                                                                 | 20725    19
   147       |#ifndef _STDSTREAM_DECLARED                                                                      | 20726    19
   148       |__BEGIN_DECLS                                                                                    | 20727    19
   149       |#pragma map(__stdinp, "@@STDINP")                                                                | 20728    19
   150       |#pragma map(__stdoutp, "@@STDOUP")                                                               | 20729    19
   151       |#pragma map(__stderrp, "@@STDERP")                                                               | 20730    19
   152       |extern FILE *__stdinp;                                                                           | 20731    19
   153       |extern FILE *__stdoutp;                                                                          | 20732    19
   154       |extern FILE *__stderrp;                                                                          | 20733    19
   155       |__END_DECLS                                                                                      | 20734    19
   156       |#define _STDSTREAM_DECLARED                                                                      | 20735    19
   157       |#endif                                                                                           | 20736    19
   158       |                                                                                                 | 20737    19
   159       |#define __SLBF  0x0001          /* line buffered */                                              | 20738    19
   160       |#define __SNBF  0x0002          /* unbuffered */                                                 | 20739    19
   161       |#define __SRD   0x0004          /* OK to read */                                                 | 20740    19
   162       |#define __SWR   0x0008          /* OK to write */                                                | 20741    19
   163       |        /* RD and WR are never simultaneously asserted */                                        | 20742    19
   164       |#define __SRW   0x0010          /* open for reading & writing */                                 | 20743    19
   165       |#define __SEOF  0x0020          /* found EOF */                                                  | 20744    19
   166       |#define __SERR  0x0040          /* found error */                                                | 20745    19
   167       |#define __SMBF  0x0080          /* _buf is from malloc */                                        | 20746    19
   168       |#define __SAPP  0x0100          /* fdopen()ed in append mode */                                  | 20747    19
   169       |#define __SSTR  0x0200          /* this is an sprintf/snprintf string */                         | 20748    19
   170       |#define __SOPT  0x0400          /* do fseek() optimization */                                    | 20749    19
   171       |#define __SNPT  0x0800          /* do not do fseek() optimization */                             | 20750    19
   172       |#define __SOFF  0x1000          /* set iff _offset is in fact correct */                         | 20751    19
   173       |#define __SMOD  0x2000          /* true => fgetln modified _p text */                            | 20752    19
   174       |#define __SREC  0x4000          /* Systems/C record I/O extension */                             | 20753    19
   175       |#define __SALC  0x8000          /* allocate string space dynamically */                          | 20754    19
   176       |#define __SIGN  0x10000         /* ignore this file in _fwalk */                                 | 20755    19
   177       |                                                                                                 | 20756    19
   178       |/*                                                                                               | 20757    19
   179       | * The following three definitions are for ANSI C, which took them                               | 20758    19
   180       | * from System V, which brilliantly took internal interface macros and                           | 20759    19
   181       | * made them official arguments to setvbuf(), without renaming them.                             | 20760    19
   182       | * Hence, these ugly _IOxxx names are *supposed* to appear in user code.                         | 20761    19
   183       | *                                                                                               | 20762    19
   184       | * Although numbered as their counterparts above, the implementation                             | 20763    19
   185       | * does not rely on this.                                                                        | 20764    19
   186       | */                                                                                              | 20765    19
   187       |#define _IOFBF  0               /* setvbuf should set fully buffered */                          | 20766    19
   188       |#define _IOLBF  1               /* setvbuf should set line buffered */                           | 20767    19
   189       |#define _IONBF  2               /* setvbuf should set unbuffered */                              | 20768    19
   190       |                                                                                                 | 20769    19
   191       |#define BUFSIZ  1024            /* size of buffer used by setbuf */                              | 20770    19
   192       |#define EOF     (-1)                                                                             | 20771    19
   193       |                                                                                                 | 20772    19
   194       |/*                                                                                               | 20773    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   400


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   195       | * FOPEN_MAX is a minimum maximum, and is the number of streams that                             | 20774    19
   196       | * stdio can provide without attempting to allocate further resources                            | 20775    19
   197       | * (which could fail).  Do not use this for anything.                                            | 20776    19
   198       | */                                                                                              | 20777    19
   199       |                                /* must be == _POSIX_STREAM_MAX <limits.h> */                    | 20778    19
   200       |#define FOPEN_MAX       20      /* must be <= OPEN_MAX <sys/syslimits.h> */                      | 20779    19
   201       |#define FILENAME_MAX    1024    /* must be <= PATH_MAX <sys/syslimits.h> */                      | 20780    19
   202       |                                                                                                 | 20781    19
   203       |/* System V/ANSI C; this is the wrong way to do this, do *not* use these. */                     | 20782    19
   204       |#if __XSI_VISIBLE                                                                                | 20783    19
   205       |#define P_tmpdir        "/tmp/"                                                                  | 20784    19
   206       |#endif                                                                                           | 20785    19
   207       |#define L_tmpnam        1024    /* XXX must be == PATH_MAX */                                    | 20786    19
   208       |#define TMP_MAX         308915776                                                                | 20787    19
   209       |                                                                                                 | 20788    19
   210       |#ifndef SEEK_SET                                                                                 | 20789    19
   211       |#define SEEK_SET        0       /* set file offset to offset */                                  | 20790    19
   212       |#endif                                                                                           | 20791    19
   213       |#ifndef SEEK_CUR                                                                                 | 20792    19
   214       |#define SEEK_CUR        1       /* set file offset to current plus offset */                     | 20793    19
   215       |#endif                                                                                           | 20794    19
   216       |#ifndef SEEK_END                                                                                 | 20795    19
   217       |#define SEEK_END        2       /* set file offset to EOF plus offset */                         | 20796    19
   218       |#endif                                                                                           | 20797    19
   219       |                                                                                                 | 20798    19
   220       |#define stdin   __stdinp                                                                         | 20799    19
   221       |#define stdout  __stdoutp                                                                        | 20800    19
   222       |#define stderr  __stderrp                                                                        | 20801    19
   223       |                                                                                                 | 20802    19
   224       |/* Map some of the longer names to shorter versions for linking on */                            | 20803    19
   225       |/*  the mainframe. */                                                                            | 20804    19
   226       |#pragma map (setbuffer, "STB@FFER")                                                              | 20805    19
   227       |#pragma map (vasprintf, "V@SPRNTF")                                                              | 20806    19
   228       |#pragma map (vsnprintf, "VSNPRNT@")                                                              | 20807    19
   229       |                                                                                                 | 20808    19
   230       |__BEGIN_DECLS                                                                                    | 20809    19
   231       |/*                                                                                               | 20810    19
   232       | * Functions defined in ANSI C standard.                                                         | 20811    19
   233       | */                                                                                              | 20812    19
   234       |void     clearerr(FILE *);                                                                       | 20813    19
   235       |int      fclose(FILE *);                                                                         | 20814    19
   236       |int      feof(FILE *);                                                                           | 20815    19
   237       |int      ferror(FILE *);                                                                         | 20816    19
   238       |int      fflush(FILE *);                                                                         | 20817    19
   239       |int      fgetc(FILE *);                                                                          | 20818    19
   240       |int      fgetpos(FILE * __restrict, fpos_t * __restrict);                                        | 20819    19
   241       |char    *fgets(char * __restrict, int, FILE * __restrict);                                       | 20820    19
   242       |FILE    *fopen(const char * __restrict, const char * __restrict);                                | 20821    19
   243       |int      fprintf(FILE * __restrict, const char * __restrict, ...);                               | 20822    19
   244       |int      fputc(int, FILE *);                                                                     | 20823    19
   245       |int      fputs(const char * __restrict, FILE * __restrict);                                      | 20824    19
   246       |size_t   fread(void * __restrict, size_t, size_t, FILE * __restrict);                            | 20825    19
   247       |FILE    *freopen(const char * __restrict, const char * __restrict,                               | 20826    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   401


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   248       |                 FILE * __restrict);                                                             | 20827    19
   249       |int      fscanf(FILE * __restrict, const char * __restrict, ...);                                | 20828    19
   250       |int      fseek(FILE *, long, int);                                                               | 20829    19
   251       |int      fsetpos(FILE *, const fpos_t *);                                                        | 20830    19
   252       |long     ftell(FILE *);                                                                          | 20831    19
   253       |size_t   fwrite(const void * __restrict, size_t, size_t, FILE * __restrict);                     | 20832    19
   254       |int      getc(FILE *);                                                                           | 20833    19
   255       |int      getchar(void);                                                                          | 20834    19
   256       |char    *gets(char *);                                                                           | 20835    19
   257       |void     perror(const char *);                                                                   | 20836    19
   258       |int      printf(const char * __restrict, ...);                                                   | 20837    19
   259       |int      putc(int, FILE *);                                                                      | 20838    19
   260       |int      putchar(int);                                                                           | 20839    19
   261       |int      puts(const char *);                                                                     | 20840    19
   262       |int      remove(const char *);                                                                   | 20841    19
   263       |int      rename(const char *, const char *);                                                     | 20842    19
   264       |void     rewind(FILE *);                                                                         | 20843    19
   265       |int      scanf(const char * __restrict, ...);                                                    | 20844    19
   266       |void     setbuf(FILE * __restrict, char * __restrict);                                           | 20845    19
   267       |int      setvbuf(FILE * __restrict, char * __restrict, int, size_t);                             | 20846    19
   268       |int      sprintf(char * __restrict, const char * __restrict, ...);                               | 20847    19
   269       |int      sscanf(const char * __restrict, const char * __restrict, ...);                          | 20848    19
   270       |FILE    *tmpfile(void);                                                                          | 20849    19
   271       |char    *tmpnam(char *);                                                                         | 20850    19
   272       |int      ungetc(int, FILE *);                                                                    | 20851    19
   273       |int      vfprintf(FILE * __restrict, const char * __restrict,                                    | 20852    19
   274       |            __va_list);                                                                          | 20853    19
   275       |int      vprintf(const char * __restrict, __va_list);                                            | 20854    19
   276       |int      vsprintf(char * __restrict, const char * __restrict,                                    | 20855    19
   277       |            __va_list);                                                                          | 20856    19
   278       |                                                                                                 | 20857    19
   279       |#if __ISO_C_VISIBLE >= 1999                                                                      | 20858    19
   280       |int      snprintf(char * __restrict, size_t, const char * __restrict,                            | 20859    19
   281       |            ...) __printflike(3, 4);                                                             | 20860    19
   282       |int      vfscanf(FILE * __restrict, const char * __restrict, __va_list)                          | 20861    19
   283       |            __scanflike(2, 0);                                                                   | 20862    19
   284       |int      vscanf(const char * __restrict, __va_list) __scanflike(1, 0);                           | 20863    19
   285       |int      vsnprintf(char * __restrict, size_t, const char * __restrict,                           | 20864    19
   286       |            __va_list) __printflike(3, 0);                                                       | 20865    19
   287       |int      vsscanf(const char * __restrict, const char * __restrict, __va_list)                    | 20866    19
   288       |            __scanflike(2, 0);                                                                   | 20867    19
   289       |#endif                                                                                           | 20868    19
   290       |                                                                                                 | 20869    19
   291       |/*                                                                                               | 20870    19
   292       | * Functions defined in all versions of POSIX 1003.1.                                            | 20871    19
   293       | */                                                                                              | 20872    19
   294       |#if __BSD_VISIBLE || __POSIX_VISIBLE <= 199506                                                   | 20873    19
   295       |/* size for cuserid(3); UT_NAMESIZE + 1, see <utmp.h> */                                         | 20874    19
   296       |#define L_cuserid       17      /* legacy */                                                     | 20875    19
   297       |#endif                                                                                           | 20876    19
   298       |                                                                                                 | 20877    19
   299       |#if __POSIX_VISIBLE                                                                              | 20878    19
   300       |#define L_ctermid       1024    /* size for ctermid(3); PATH_MAX */                              | 20879    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   402


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   301       |                                                                                                 | 20880    19
   302       |char    *ctermid(char *);                                                                        | 20881    19
   303       |FILE    *fdopen(int, const char *);                                                              | 20882    19
   304       |int      fileno(FILE *);                                                                         | 20883    19
   305       |#endif /* __POSIX_VISIBLE */                                                                     | 20884    19
   306       |                                                                                                 | 20885    19
   307       |#if __POSIX_VISIBLE >= 199209                                                                    | 20886    19
   308       |int      pclose(FILE *);                                                                         | 20887    19
   309       |FILE    *popen(const char *, const char *);                                                      | 20888    19
   310       |#endif                                                                                           | 20889    19
   311       |                                                                                                 | 20890    19
   312       |#if __POSIX_VISIBLE >= 199506                                                                    | 20891    19
   313       |int      ftrylockfile(FILE *);                                                                   | 20892    19
   314       |#pragma map (flockfile, "@@FLCKFL")                                                              | 20893    19
   315       |void     flockfile(FILE *);                                                                      | 20894    19
   316       |void     funlockfile(FILE *);                                                                    | 20895    19
   317       |                                                                                                 | 20896    19
   318       |/*                                                                                               | 20897    19
   319       | * These are normally used through macros as defined below, but POSIX                            | 20898    19
   320       | * requires functions as well.                                                                   | 20899    19
   321       | */                                                                                              | 20900    19
   322       |int      getc_unlocked(FILE *);                                                                  | 20901    19
   323       |int      getchar_unlocked(void);                                                                 | 20902    19
   324       |int      putc_unlocked(int, FILE *);                                                             | 20903    19
   325       |int      putchar_unlocked(int);                                                                  | 20904    19
   326       |#endif                                                                                           | 20905    19
   327       |#if __BSD_VISIBLE                                                                                | 20906    19
   328       |void    clearerr_unlocked(FILE *);                                                               | 20907    19
   329       |int     feof_unlocked(FILE *);                                                                   | 20908    19
   330       |int     ferror_unlocked(FILE *);                                                                 | 20909    19
   331       |int     fileno_unlocked(FILE *);                                                                 | 20910    19
   332       |#endif                                                                                           | 20911    19
   333       |                                                                                                 | 20912    19
   334       |#if __POSIX_VISIBLE >= 200112                                                                    | 20913    19
   335       |int      fseeko(FILE *, __off_t, int);                                                           | 20914    19
   336       |__off_t  ftello(FILE *);                                                                         | 20915    19
   337       |#endif                                                                                           | 20916    19
   338       |                                                                                                 | 20917    19
   339       |#if __BSD_VISIBLE || __XSI_VISIBLE > 0 && __XSI_VISIBLE < 600                                    | 20918    19
   340       |int      getw(FILE *);                                                                           | 20919    19
   341       |int      putw(int, FILE *);                                                                      | 20920    19
   342       |#endif /* BSD or X/Open before issue 6 */                                                        | 20921    19
   343       |                                                                                                 | 20922    19
   344       |#if __XSI_VISIBLE                                                                                | 20923    19
   345       |char    *tempnam(const char *, const char *);                                                    | 20924    19
   346       |#endif                                                                                           | 20925    19
   347       |                                                                                                 | 20926    19
   348       |#if __POSIX_VISIBLE >= 200809                                                                    | 20927    19
   349       |/* FILE *fmemopen(void * __restrict, size_t, const char * __restrict); */                        | 20928    19
   350       |#pragma map(getdelim, "@@GETDLM")                                                                | 20929    19
   351       |ssize_t  getdelim(char ** __restrict, size_t * __restrict, int,                                  | 20930    19
   352       |            FILE * __restrict);                                                                  | 20931    19
   353       |/* FILE *open_memstream(char **, size_t *); */                                                   | 20932    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   403


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   354       |/* int   renameat(int, const char *, int, const char *); */                                      | 20933    19
   355       |/* int   vdprintf(int, const char * __restrict, __va_list) __printflike(2, 0); */                | 20934    19
   356       |                                                                                                 | 20935    19
   357       |/*                                                                                               | 20936    19
   358       | * Every programmer and his dog wrote functions called getline() and dprintf()                   | 20937    19
   359       | * before POSIX.1-2008 came along and decided to usurp the names, so we                          | 20938    19
   360       | * don't prototype them by default unless one of the following is true:                          | 20939    19
   361       | *   a) the app has requested them specifically by defining _WITH_GETLINE or                     | 20940    19
   362       | *      _WITH_DPRINTF, respectively                                                              | 20941    19
   363       | *   b) the app has requested a POSIX.1-2008 environment via _POSIX_C_SOURCE                     | 20942    19
   364       | *   c) the app defines a GNUism such as _BSD_SOURCE or _GNU_SOURCE                              | 20943    19
   365       | */                                                                                              | 20944    19
   366       |#ifndef _WITH_GETLINE                                                                            | 20945    19
   367       |#if defined(_BSD_SOURCE) || defined(_GNU_SOURCE)                                                 | 20946    19
   368       |#define _WITH_GETLINE                                                                            | 20947    19
   369       |#elif defined(_POSIX_C_SOURCE)                                                                   | 20948    19
   370       |#if _POSIX_C_SOURCE >= 200809                                                                    | 20949    19
   371       |#define _WITH_GETLINE                                                                            | 20950    19
   372       |#endif                                                                                           | 20951    19
   373       |#endif                                                                                           | 20952    19
   374       |#endif                                                                                           | 20953    19
   375       |                                                                                                 | 20954    19
   376       |#ifdef _WITH_GETLINE                                                                             | 20955    19
   377       |#pragma map(getline, "@@GETLNE")                                                                 | 20956    19
   378       |ssize_t  getline(char ** __restrict, size_t * __restrict, FILE * __restrict);                    | 20957    19
   379       |#endif                                                                                           | 20958    19
   380       |                                                                                                 | 20959    19
   381       |#endif /* __POSIX_VISIBLE >= 200809 */                                                           | 20960    19
   382       |/*                                                                                               | 20961    19
   383       | * Routines that are purely local.                                                               | 20962    19
   384       | */                                                                                              | 20963    19
   385       |#if __BSD_VISIBLE                                                                                | 20964    19
   386       |int      asprintf(char **, const char *, ...) __printflike(2, 3);                                | 20965    19
   387       |char    *ctermid_r(char *);                                                                      | 20966    19
   388       |char    *fgetln(FILE *, size_t *);                                                               | 20967    19
   389       |__const char *fmtcheck(const char *, const char *) __format_arg(2);                              | 20968    19
   390       |int      fpurge(FILE *);                                                                         | 20969    19
   391       |void     setbuffer(FILE *, char *, int);                                                         | 20970    19
   392       |int      setlinebuf(FILE *);                                                                     | 20971    19
   393       |int      vasprintf(char **, const char *, __va_list)                                             | 20972    19
   394       |            __printflike(2, 0);                                                                  | 20973    19
   395       |                                                                                                 | 20974    19
   396       |/*                                                                                               | 20975    19
   397       | * The system error table contains messages for the first sys_nerr                               | 20976    19
   398       | * positive errno values.  Use strerror() or strerror_r() from <string.h>                        | 20977    19
   399       | * instead.                                                                                      | 20978    19
   400       | */                                                                                              | 20979    19
   401       |extern __const int sys_nerr;                                                                     | 20980    19
   402       |extern __const char *__const sys_errlist[];                                                      | 20981    19
   403       |#pragma map(sys_errlist, "@@serrls")                                                             | 20982    19
   404       |                                                                                                 | 20983    19
   405       |/*                                                                                               | 20984    19
   406       | * Stdio function-access interface.                                                              | 20985    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   404


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   407       | */                                                                                              | 20986    19
   408       |FILE    *funopen(const void *,                                                                   | 20987    19
   409       |            int (*)(void *, char *, int),                                                        | 20988    19
   410       |            int (*)(void *, const char *, int),                                                  | 20989    19
   411       |            fpos_t (*)(void *, fpos_t, int),                                                     | 20990    19
   412       |            int (*)(void *));                                                                    | 20991    19
   413       |#define fropen(cookie, fn) funopen(cookie, fn, 0, 0, 0)                                          | 20992    19
   414       |#define fwopen(cookie, fn) funopen(cookie, 0, fn, 0, 0)                                          | 20993    19
   415       |                                                                                                 | 20994    19
   416       |/*                                                                                               | 20995    19
   417       | * Portability hacks.  See <sys/types.h>.                                                        | 20996    19
   418       | */                                                                                              | 20997    19
   419       |#ifndef _FTRUNCATE_DECLARED                                                                      | 20998    19
   420       |#define _FTRUNCATE_DECLARED                                                                      | 20999    19
   421       |#pragma map (ftruncate, "@@FTRUNC")                                                              | 21000    19
   422       |int      ftruncate(int, __off_t);                                                                | 21001    19
   423       |#endif                                                                                           | 21002    19
   424       |#ifndef _LSEEK_DECLARED                                                                          | 21003    19
   425       |#define _LSEEK_DECLARED                                                                          | 21004    19
   426       |__off_t  lseek(int, __off_t, int);                                                               | 21005    19
   427       |#endif                                                                                           | 21006    19
   428       |#ifndef _MMAP_DECLARED                                                                           | 21007    19
   429       |#define _MMAP_DECLARED                                                                           | 21008    19
   430       |void    *mmap(void *, size_t, int, int, int, __off_t);                                           | 21009    19
   431       |#endif                                                                                           | 21010    19
   432       |#ifndef _TRUNCATE_DECLARED                                                                       | 21011    19
   433       |#define _TRUNCATE_DECLARED                                                                       | 21012    19
   434       |int      truncate(const char *, __off_t);                                                        | 21013    19
   435       |#endif                                                                                           | 21014    19
   436       |#endif /* __BSD_VISIBLE */                                                                       | 21015    19
   437       |                                                                                                 | 21016    19
   438       |/*                                                                                               | 21017    19
   439       | * Functions internal to the implementation.                                                     | 21018    19
   440       | */                                                                                              | 21019    19
   441       |#pragma map (__srget, "@@SRGET")                                                                 | 21020    19
   442       |int     __srget(FILE *);                                                                         | 21021    19
   443       |#pragma map (__swbuf,"@@SWBUF")                                                                  | 21022    19
   444       |int     __swbuf(int, FILE *);                                                                    | 21023    19
   445       |                                                                                                 | 21024    19
   446       |/*                                                                                               | 21025    19
   447       | * The __sfoo macros are here so that we can                                                     | 21026    19
   448       | * define function versions in the C library.                                                    | 21027    19
   449       | */                                                                                              | 21028    19
   450       |#define __sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))                              | 21029    19
   451       |#if (defined(__GNUC__) || (defined(__SYSC__) && __SYSC_VER__ >= 16500)) && \                     | 21030    19
   452       |    defined(__STDC__)                                                                            | 21031    19
   453       |static __inline int __sputc(int _c, FILE *_p) {                                                  | 21032    19
   454       |        if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))                       | 21033    19
   455       |                return (*_p->_p++ = _c);                                                         | 21034    19
   456       |        else                                                                                     | 21035    19
   457       |                return (__swbuf(_c, _p));                                                        | 21036    19
   458       |}                                                                                                | 21037    19
   459       |#else                                                                                            | 21038    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   405


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   460       |/*                                                                                               | 21039    19
   461       | * This has been tuned to generate reasonable code on the vax using pcc.                         | 21040    19
   462       | */                                                                                              | 21041    19
   463       |#define __sputc(c, p) \                                                                          | 21042    19
   464       |        (--(p)->_w < 0 ? \                                                                       | 21043    19
   465       |                (p)->_w >= (p)->_lbfsize ? \                                                     | 21044    19
   466       |                        (*(p)->_p = (c)), *(p)->_p != '\n' ? \                                   | 21045    19
   467       |                                (int)*(p)->_p++ : \                                              | 21046    19
   468       |                                __swbuf('\n', p) : \                                             | 21047    19
   469       |                        __swbuf((int)(c), p) : \                                                 | 21048    19
   470       |                (*(p)->_p = (c), (int)*(p)->_p++))                                               | 21049    19
   471       |#endif                                                                                           | 21050    19
   472       |                                                                                                 | 21051    19
   473       |#define __sfeof(p)      (((p)->_flags & __SEOF) != 0)                                            | 21052    19
   474       |#define __sferror(p)    (((p)->_flags & __SERR) != 0)                                            | 21053    19
   475       |#define __sclearerr(p)  ((void)((p)->_flags &= ~(__SERR|__SEOF)))                                | 21054    19
   476       |#define __sfileno(p)    ((p)->_file)                                                             | 21055    19
   477       |                                                                                                 | 21056    19
   478       |extern int __isthreaded;                                                                         | 21057    19
   479       |                                                                                                 | 21058    19
   480       |#define feof(p)         (!__isthreaded ? __sfeof(p) : (feof)(p))                                 | 21059    19
   481       |#define ferror(p)       (!__isthreaded ? __sferror(p) : (ferror)(p))                             | 21060    19
   482       |#define clearerr(p)     (!__isthreaded ? __sclearerr(p) : (clearerr)(p))                         | 21061    19
   483       |                                                                                                 | 21062    19
   484       |#if __POSIX_VISIBLE                                                                              | 21063    19
   485       |#define fileno(p)       (!__isthreaded ? __sfileno(p) : (fileno)(p))                             | 21064    19
   486       |#endif                                                                                           | 21065    19
   487       |                                                                                                 | 21066    19
   488       |#define getc(fp)        (!__isthreaded ? __sgetc(fp) : (getc)(fp))                               | 21067    19
   489       |#define putc(x, fp)     (!__isthreaded ? __sputc(x, fp) : (putc)(x, fp))                         | 21068    19
   490       |                                                                                                 | 21069    19
   491       |#define getchar()       getc(stdin)                                                              | 21070    19
   492       |#define putchar(x)      putc(x, stdout)                                                          | 21071    19
   493       |                                                                                                 | 21072    19
   494       |#if __BSD_VISIBLE                                                                                | 21073    19
   495       |/*                                                                                               | 21074    19
   496       | * See ISO/IEC 9945-1 ANSI/IEEE Std 1003.1 Second Edition 1996-07-12                             | 21075    19
   497       | * B.8.2.7 for the rationale behind the *_unlocked() macros.                                     | 21076    19
   498       | */                                                                                              | 21077    19
   499       |#define feof_unlocked(p)        __sfeof(p)                                                       | 21078    19
   500       |#define ferror_unlocked(p)      __sferror(p)                                                     | 21079    19
   501       |#define clearerr_unlocked(p)    __sclearerr(p)                                                   | 21080    19
   502       |#define fileno_unlocked(p)      __sfileno(p)                                                     | 21081    19
   503       |#endif                                                                                           | 21082    19
   504       |#if __POSIX_VISIBLE >= 199506                                                                    | 21083    19
   505       |#define getc_unlocked(fp)       __sgetc(fp)                                                      | 21084    19
   506       |#define putc_unlocked(x, fp)    __sputc(x, fp)                                                   | 21085    19
   507       |                                                                                                 | 21086    19
   508       |#define getchar_unlocked()      getc_unlocked(stdin)                                             | 21087    19
   509       |#define putchar_unlocked(x)     putc_unlocked(x, stdout)                                         | 21088    19
   510       |#endif                                                                                           | 21089    19
   511       |                                                                                                 | 21090    19
   512       |__END_DECLS                                                                                      | 21091    19
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   406


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   513       |#endif /* !_STDIO_H_ */                                                                          | 21092    19
   514       |#pragma pack(reset)                                                                              | 21093    19
    46       |#include <sys/time.h>                                                                            | 21094    39
     1       |/* release 2.25.00 */                                                                            | 21095    17
     2       |#pragma pack()                                                                                   | 21096    17
     3       |/*-                                                                                              | 21097    17
     4       | * Copyright (c) 1982, 1986, 1993                                                                | 21098    17
     5       | *      The Regents of the University of California.  All rights reserved.                       | 21099    17
     6       | *                                                                                               | 21100    17
     7       | * Redistribution and use in source and binary forms, with or without                            | 21101    17
     8       | * modification, are permitted provided that the following conditions                            | 21102    17
     9       | * are met:                                                                                      | 21103    17
    10       | * 1. Redistributions of source code must retain the above copyright                             | 21104    17
    11       | *    notice, this list of conditions and the following disclaimer.                              | 21105    17
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 21106    17
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 21107    17
    14       | *    documentation and/or other materials provided with the distribution.                       | 21108    17
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 21109    17
    16       | *    may be used to endorse or promote products derived from this software                      | 21110    17
    17       | *    without specific prior written permission.                                                 | 21111    17
    18       | *                                                                                               | 21112    17
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 21113    17
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 21114    17
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 21115    17
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 21116    17
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 21117    17
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 21118    17
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 21119    17
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 21120    17
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 21121    17
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 21122    17
    29       | * SUCH DAMAGE.                                                                                  | 21123    17
    30       | *                                                                                               | 21124    17
    31       | *      @(#)time.h      8.5 (Berkeley) 5/4/95                                                    | 21125    17
    32       | * $FreeBSD: src/sys/sys/time.h,v 1.69 2005/04/02 12:33:27 das Exp $                             | 21126    17
    33       | */                                                                                              | 21127    17
    34       |                                                                                                 | 21128    17
    35       |#ifndef _SYS_TIME_H_                                                                             | 21129    17
    36       |#define _SYS_TIME_H_                                                                             | 21130    17
    37       |                                                                                                 | 21131    17
    38       |#include <sys/_timeval.h>                                                                        | 21132    17
    39       |#include <sys/types.h>                                                                           | 21133    17
    40       |#include <sys/timespec.h>                                                                        | 21134    17
    41       |                                                                                                 | 21135    17
    42       |struct timezone {                                                                                | 21136    17
    43       |        int     tz_minuteswest; /* minutes west of Greenwich */                                  | 21137    17
    44       |        int     tz_dsttime;     /* type of dst correction */                                     | 21138    17
    45       |};                                                                                               | 21139    17
    46       |#define DST_NONE        0       /* not on dst */                                                 | 21140    17
    47       |#define DST_USA         1       /* USA style dst */                                              | 21141    17
    48       |#define DST_AUST        2       /* Australian style dst */                                       | 21142    17
    49       |#define DST_WET         3       /* Western European dst */                                       | 21143    17
    50       |#define DST_MET         4       /* Middle European dst */                                        | 21144    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   407


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    51       |#define DST_EET         5       /* Eastern European dst */                                       | 21145    17
    52       |#define DST_CAN         6       /* Canada */                                                     | 21146    17
    53       |                                                                                                 | 21147    17
    54       |#if __BSD_VISIBLE                                                                                | 21148    17
    55       |struct bintime {                                                                                 | 21149    17
    56       |        time_t  sec;                                                                             | 21150    17
    57       |        uint64_t frac;                                                                           | 21151    17
    58       |};                                                                                               | 21152    17
    59       |                                                                                                 | 21153    17
    60       |static __inline void                                                                             | 21154    17
    61       |bintime_addx(struct bintime *bt, uint64_t x)                                                     | 21155    17
    62       |{                                                                                                | 21156    17
    63       |        uint64_t u;                                                                              | 21157    17
    64       |                                                                                                 | 21158    17
    65       |        u = bt->frac;                                                                            | 21159    17
    66       |        bt->frac += x;                                                                           | 21160    17
    67       |        if (u > bt->frac)                                                                        | 21161    17
    68       |                bt->sec++;                                                                       | 21162    17
    69       |}                                                                                                | 21163    17
    70       |                                                                                                 | 21164    17
    71       |static __inline void                                                                             | 21165    17
    72       |bintime_add(struct bintime *bt, const struct bintime *bt2)                                       | 21166    17
    73       |{                                                                                                | 21167    17
    74       |        uint64_t u;                                                                              | 21168    17
    75       |                                                                                                 | 21169    17
    76       |        u = bt->frac;                                                                            | 21170    17
    77       |        bt->frac += bt2->frac;                                                                   | 21171    17
    78       |        if (u > bt->frac)                                                                        | 21172    17
    79       |                bt->sec++;                                                                       | 21173    17
    80       |        bt->sec += bt2->sec;                                                                     | 21174    17
    81       |}                                                                                                | 21175    17
    82       |                                                                                                 | 21176    17
    83       |static __inline void                                                                             | 21177    17
    84       |bintime_sub(struct bintime *bt, const struct bintime *bt2)                                       | 21178    17
    85       |{                                                                                                | 21179    17
    86       |        uint64_t u;                                                                              | 21180    17
    87       |                                                                                                 | 21181    17
    88       |        u = bt->frac;                                                                            | 21182    17
    89       |        bt->frac -= bt2->frac;                                                                   | 21183    17
    90       |        if (u < bt->frac)                                                                        | 21184    17
    91       |                bt->sec--;                                                                       | 21185    17
    92       |        bt->sec -= bt2->sec;                                                                     | 21186    17
    93       |}                                                                                                | 21187    17
    94       |                                                                                                 | 21188    17
    95       |/*-                                                                                              | 21189    17
    96       | * Background information:                                                                       | 21190    17
    97       | *                                                                                               | 21191    17
    98       | * When converting between timestamps on parallel timescales of differing                        | 21192    17
    99       | * resolutions it is historical and scientific practice to round down rather                     | 21193    17
   100       | * than doing 4/5 rounding.                                                                      | 21194    17
   101       | *                                                                                               | 21195    17
   102       | *   The date changes at midnight, not at noon.                                                  | 21196    17
   103       | *                                                                                               | 21197    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   408


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   104       | *   Even at 15:59:59.999999999 it's not four'o'clock.                                           | 21198    17
   105       | *                                                                                               | 21199    17
   106       | *   time_second ticks after N.999999999 not after N.4999999999                                  | 21200    17
   107       | */                                                                                              | 21201    17
   108       |                                                                                                 | 21202    17
   109       |static __inline void                                                                             | 21203    17
   110       |bintime2timespec(const struct bintime *bt, struct timespec *ts)                                  | 21204    17
   111       |{                                                                                                | 21205    17
   112       |                                                                                                 | 21206    17
   113       |        ts->tv_sec = bt->sec;                                                                    | 21207    17
   114       |        ts->tv_nsec = ((uint64_t)1000000000 * (uint32_t)(bt->frac >> 32)) >> 32;                 | 21208    17
   115       |}                                                                                                | 21209    17
   116       |                                                                                                 | 21210    17
   117       |static __inline void                                                                             | 21211    17
   118       |timespec2bintime(const struct timespec *ts, struct bintime *bt)                                  | 21212    17
   119       |{                                                                                                | 21213    17
   120       |                                                                                                 | 21214    17
   121       |        bt->sec = ts->tv_sec;                                                                    | 21215    17
   122       |        /* 18446744073 = int(2^64 / 1000000000) */                                               | 21216    17
   123       |        bt->frac = ts->tv_nsec * (uint64_t)18446744073LL;                                        | 21217    17
   124       |}                                                                                                | 21218    17
   125       |                                                                                                 | 21219    17
   126       |static __inline void                                                                             | 21220    17
   127       |bintime2timeval(const struct bintime *bt, struct timeval *tv)                                    | 21221    17
   128       |{                                                                                                | 21222    17
   129       |                                                                                                 | 21223    17
   130       |        tv->tv_sec = bt->sec;                                                                    | 21224    17
   131       |        tv->tv_usec = ((uint64_t)1000000 * (uint32_t)(bt->frac >> 32)) >> 32;                    | 21225    17
   132       |}                                                                                                | 21226    17
   133       |                                                                                                 | 21227    17
   134       |static __inline void                                                                             | 21228    17
   135       |timeval2bintime(const struct timeval *tv, struct bintime *bt)                                    | 21229    17
   136       |{                                                                                                | 21230    17
   137       |                                                                                                 | 21231    17
   138       |        bt->sec = tv->tv_sec;                                                                    | 21232    17
   139       |        /* 18446744073709 = int(2^64 / 1000000) */                                               | 21233    17
   140       |        bt->frac = tv->tv_usec * (uint64_t)18446744073709LL;                                     | 21234    17
   141       |}                                                                                                | 21235    17
   142       |#endif /* __BSD_VISIBLE */                                                                       | 21236    17
   143       |                                                                                                 | 21237    17
   144       |#ifdef _KERNEL                                                                                   | 21238    17
   145       |                                                                                                 | 21239    17
   146       |/* Operations on timespecs */                                                                    | 21240    17
   147       |#define timespecclear(tvp)      ((tvp)->tv_sec = (tvp)->tv_nsec = 0)                             | 21241    17
   148       |#define timespecisset(tvp)      ((tvp)->tv_sec || (tvp)->tv_nsec)                                | 21242    17
   149       |#define timespeccmp(tvp, uvp, cmp)                                      \                        | 21243    17
   150       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        | 21244    17
   151       |            ((tvp)->tv_nsec cmp (uvp)->tv_nsec) :                       \                        | 21245    17
   152       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   | 21246    17
   153       |#define timespecadd(vvp, uvp)                                           \                        | 21247    17
   154       |        do {                                                            \                        | 21248    17
   155       |                (vvp)->tv_sec += (uvp)->tv_sec;                         \                        | 21249    17
   156       |                (vvp)->tv_nsec += (uvp)->tv_nsec;                       \                        | 21250    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   409


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   157       |                if ((vvp)->tv_nsec >= 1000000000) {                     \                        | 21251    17
   158       |                        (vvp)->tv_sec++;                                \                        | 21252    17
   159       |                        (vvp)->tv_nsec -= 1000000000;                   \                        | 21253    17
   160       |                }                                                       \                        | 21254    17
   161       |        } while (0)                                                                              | 21255    17
   162       |#define timespecsub(vvp, uvp)                                           \                        | 21256    17
   163       |        do {                                                            \                        | 21257    17
   164       |                (vvp)->tv_sec -= (uvp)->tv_sec;                         \                        | 21258    17
   165       |                (vvp)->tv_nsec -= (uvp)->tv_nsec;                       \                        | 21259    17
   166       |                if ((vvp)->tv_nsec < 0) {                               \                        | 21260    17
   167       |                        (vvp)->tv_sec--;                                \                        | 21261    17
   168       |                        (vvp)->tv_nsec += 1000000000;                   \                        | 21262    17
   169       |                }                                                       \                        | 21263    17
   170       |        } while (0)                                                                              | 21264    17
   171       |                                                                                                 | 21265    17
   172       |/* Operations on timevals. */                                                                    | 21266    17
   173       |                                                                                                 | 21267    17
   174       |#define timevalclear(tvp)               ((tvp)->tv_sec = (tvp)->tv_usec = 0)                     | 21268    17
   175       |#define timevalisset(tvp)               ((tvp)->tv_sec || (tvp)->tv_usec)                        | 21269    17
   176       |#define timevalcmp(tvp, uvp, cmp)                                       \                        | 21270    17
   177       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        | 21271    17
   178       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        | 21272    17
   179       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   | 21273    17
   180       |                                                                                                 | 21274    17
   181       |/* timevaladd and timevalsub are not inlined */                                                  | 21275    17
   182       |                                                                                                 | 21276    17
   183       |#endif /* _KERNEL */                                                                             | 21277    17
   184       |                                                                                                 | 21278    17
   185       |#ifndef _KERNEL                 /* NetBSD/OpenBSD compatible interfaces */                       | 21279    17
   186       |                                                                                                 | 21280    17
   187       |#define timerclear(tvp)         ((tvp)->tv_sec = (tvp)->tv_usec = 0)                             | 21281    17
   188       |#define timerisset(tvp)         ((tvp)->tv_sec || (tvp)->tv_usec)                                | 21282    17
   189       |#define timercmp(tvp, uvp, cmp)                                 \                                | 21283    17
   190       |        (((tvp)->tv_sec == (uvp)->tv_sec) ?                             \                        | 21284    17
   191       |            ((tvp)->tv_usec cmp (uvp)->tv_usec) :                       \                        | 21285    17
   192       |            ((tvp)->tv_sec cmp (uvp)->tv_sec))                                                   | 21286    17
   193       |#define timeradd(tvp, uvp, vvp)                                         \                        | 21287    17
   194       |        do {                                                            \                        | 21288    17
   195       |                (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec;          \                        | 21289    17
   196       |                (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec;       \                        | 21290    17
   197       |                if ((vvp)->tv_usec >= 1000000) {                        \                        | 21291    17
   198       |                        (vvp)->tv_sec++;                                \                        | 21292    17
   199       |                        (vvp)->tv_usec -= 1000000;                      \                        | 21293    17
   200       |                }                                                       \                        | 21294    17
   201       |        } while (0)                                                                              | 21295    17
   202       |#define timersub(tvp, uvp, vvp)                                         \                        | 21296    17
   203       |        do {                                                            \                        | 21297    17
   204       |                (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec;          \                        | 21298    17
   205       |                (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec;       \                        | 21299    17
   206       |                if ((vvp)->tv_usec < 0) {                               \                        | 21300    17
   207       |                        (vvp)->tv_sec--;                                \                        | 21301    17
   208       |                        (vvp)->tv_usec += 1000000;                      \                        | 21302    17
   209       |                }                                                       \                        | 21303    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   410


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   210       |        } while (0)                                                                              | 21304    17
   211       |#endif                                                                                           | 21305    17
   212       |                                                                                                 | 21306    17
   213       |/*                                                                                               | 21307    17
   214       | * Names of the interval timers, and structure                                                   | 21308    17
   215       | * defining a timer setting.                                                                     | 21309    17
   216       | */                                                                                              | 21310    17
   217       |#define ITIMER_REAL     0                                                                        | 21311    17
   218       |#define ITIMER_VIRTUAL  1                                                                        | 21312    17
   219       |#define ITIMER_PROF     2                                                                        | 21313    17
   220       |                                                                                                 | 21314    17
   221       |struct itimerval {                                                                               | 21315    17
   222       |        struct  timeval it_interval;    /* timer interval */                                     | 21316    17
   223       |        struct  timeval it_value;       /* current value */                                      | 21317    17
   224       |};                                                                                               | 21318    17
   225       |                                                                                                 | 21319    17
   226       |/*                                                                                               | 21320    17
   227       | * Getkerninfo clock information structure                                                       | 21321    17
   228       | */                                                                                              | 21322    17
   229       |struct clockinfo {                                                                               | 21323    17
   230       |        int     hz;             /* clock frequency */                                            | 21324    17
   231       |        int     tick;           /* micro-seconds per hz tick */                                  | 21325    17
   232       |        int     spare;                                                                           | 21326    17
   233       |        int     stathz;         /* statistics clock frequency */                                 | 21327    17
   234       |        int     profhz;         /* profiling clock frequency */                                  | 21328    17
   235       |};                                                                                               | 21329    17
   236       |                                                                                                 | 21330    17
   237       |/* These macros are also in time.h. */                                                           | 21331    17
   238       |#ifndef CLOCK_REALTIME                                                                           | 21332    17
   239       |#define CLOCK_REALTIME  0                                                                        | 21333    17
   240       |#if 0                                                                                            | 21334    17
   241       |  /* only CLOCK_REALTIME exists in this implementation */                                        | 21335    17
   242       |#define CLOCK_VIRTUAL   1                                                                        | 21336    17
   243       |#define CLOCK_PROF      2                                                                        | 21337    17
   244       |#define CLOCK_MONOTONIC 4                                                                        | 21338    17
   245       |#endif                                                                                           | 21339    17
   246       |#endif                                                                                           | 21340    17
   247       |                                                                                                 | 21341    17
   248       |#ifndef TIMER_ABSTIME                                                                            | 21342    17
   249       |#define TIMER_RELTIME   0x0     /* relative timer */                                             | 21343    17
   250       |#define TIMER_ABSTIME   0x1     /* absolute timer */                                             | 21344    17
   251       |#endif                                                                                           | 21345    17
   252       |                                                                                                 | 21346    17
   253       |#ifdef _KERNEL                                                                                   | 21347    17
   254       |extern time_t   time_second;                                                                     | 21348    17
   255       |extern time_t   time_uptime;                                                                     | 21349    17
   256       |extern struct timeval boottime;                                                                  | 21350    17
   257       |                                                                                                 | 21351    17
   258       |/*                                                                                               | 21352    17
   259       | * Functions for looking at our clock: [get]{bin,nano,micro}[up]time()                           | 21353    17
   260       | *                                                                                               | 21354    17
   261       | * Functions without the "get" prefix returns the best timestamp                                 | 21355    17
   262       | * we can produce in the given format.                                                           | 21356    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   411


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   263       | *                                                                                               | 21357    17
   264       | * "bin"   == struct bintime  == seconds + 64 bit fraction of seconds.                           | 21358    17
   265       | * "nano"  == struct timespec == seconds + nanoseconds.                                          | 21359    17
   266       | * "micro" == struct timeval  == seconds + microseconds.                                         | 21360    17
   267       | *                                                                                               | 21361    17
   268       | * Functions containing "up" returns time relative to boot and                                   | 21362    17
   269       | * should be used for calculating time intervals.                                                | 21363    17
   270       | *                                                                                               | 21364    17
   271       | * Functions without "up" returns GMT time.                                                      | 21365    17
   272       | *                                                                                               | 21366    17
   273       | * Functions with the "get" prefix returns a less precise result                                 | 21367    17
   274       | * much faster than the functions without "get" prefix and should                                | 21368    17
   275       | * be used where a precision of 10 msec is acceptable or where                                   | 21369    17
   276       | * performance is priority. (NB: "precision", _not_ "resolution" !)                              | 21370    17
   277       | *                                                                                               | 21371    17
   278       | */                                                                                              | 21372    17
   279       |                                                                                                 | 21373    17
   280       |void    binuptime(struct bintime *bt);                                                           | 21374    17
   281       |void    nanouptime(struct timespec *tsp);                                                        | 21375    17
   282       |void    microuptime(struct timeval *tvp);                                                        | 21376    17
   283       |                                                                                                 | 21377    17
   284       |void    bintime(struct bintime *bt);                                                             | 21378    17
   285       |void    nanotime(struct timespec *tsp);                                                          | 21379    17
   286       |void    microtime(struct timeval *tvp);                                                          | 21380    17
   287       |                                                                                                 | 21381    17
   288       |void    getbinuptime(struct bintime *bt);                                                        | 21382    17
   289       |void    getnanouptime(struct timespec *tsp);                                                     | 21383    17
   290       |void    getmicrouptime(struct timeval *tvp);                                                     | 21384    17
   291       |                                                                                                 | 21385    17
   292       |void    getbintime(struct bintime *bt);                                                          | 21386    17
   293       |void    getnanotime(struct timespec *tsp);                                                       | 21387    17
   294       |void    getmicrotime(struct timeval *tvp);                                                       | 21388    17
   295       |                                                                                                 | 21389    17
   296       |/* Other functions */                                                                            | 21390    17
   297       |int     itimerdecr(struct itimerval *itp, int usec);                                             | 21391    17
   298       |int     itimerfix(struct timeval *tv);                                                           | 21392    17
   299       |int     ppsratecheck(struct timeval *, int *, int);                                              | 21393    17
   300       |int     ratecheck(struct timeval *, const struct timeval *);                                     | 21394    17
   301       |void    timevaladd(struct timeval *t1, const struct timeval *t2);                                | 21395    17
   302       |void    timevalsub(struct timeval *t1, const struct timeval *t2);                                | 21396    17
   303       |int     tvtohz(struct timeval *tv);                                                              | 21397    17
   304       |#else /* !_KERNEL */                                                                             | 21398    17
   305       |#include <time.h>                                                                                | 21399    17
   306       |                                                                                                 | 21400    17
   307       |#include <sys/cdefs.h>                                                                           | 21401    17
   308       |                                                                                                 | 21402    17
   309       |__BEGIN_DECLS                                                                                    | 21403    17
   310       |int     adjtime(const struct timeval *, struct timeval *);                                       | 21404    17
   311       |int     futimes(int, const struct timeval *);                                                    | 21405    17
   312       |#pragma map (getitimer, "@@GITMR")                                                               | 21406    17
   313       |int     getitimer(int, struct itimerval *);                                                      | 21407    17
   314       |#pragma map (gettimeofday,"GETTFD@Y")                                                            | 21408    17
   315       |int     gettimeofday(struct timeval *, struct timezone *);                                       | 21409    17
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   412


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   316       |int     lutimes(const char *, const struct timeval *);                                           | 21410    17
   317       |#pragma map (setitimer, "@@SITMR")                                                               | 21411    17
   318       |int     setitimer(int, const struct itimerval *, struct itimerval *);                            | 21412    17
   319       |int     settimeofday(const struct timeval *, const struct timezone *);                           | 21413    17
   320       |int     utimes(const char *, const struct timeval *);                                            | 21414    17
   321       |__END_DECLS                                                                                      | 21415    17
   322       |                                                                                                 | 21416    17
   323       |#endif /* !_KERNEL */                                                                            | 21417    17
   324       |                                                                                                 | 21418    17
   325       |#endif /* !_SYS_TIME_H_ */                                                                       | 21419    17
   326       |#pragma pack(reset)                                                                              | 21420    17
    47       |#include <inttypes.h>                                                                            | 21421    39
     1       |/* release 2.25.00 */                                                                            | 21422    40
     2       |#pragma pack()                                                                                   | 21423    40
     3       |/*-                                                                                              | 21424    40
     4       | * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>                                           | 21425    40
     5       | * All rights reserved.                                                                          | 21426    40
     6       | *                                                                                               | 21427    40
     7       | * Redistribution and use in source and binary forms, with or without                            | 21428    40
     8       | * modification, are permitted provided that the following conditions                            | 21429    40
     9       | * are met:                                                                                      | 21430    40
    10       | * 1. Redistributions of source code must retain the above copyright                             | 21431    40
    11       | *    notice, this list of conditions and the following disclaimer.                              | 21432    40
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 21433    40
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 21434    40
    14       | *    documentation and/or other materials provided with the distribution.                       | 21435    40
    15       | *                                                                                               | 21436    40
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 21437    40
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 21438    40
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 21439    40
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 21440    40
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 21441    40
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 21442    40
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 21443    40
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 21444    40
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 21445    40
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 21446    40
    26       | * SUCH DAMAGE.                                                                                  | 21447    40
    27       | *                                                                                               | 21448    40
    28       | */                                                                                              | 21449    40
    29       |                                                                                                 | 21450    40
    30       |#ifndef _INTTYPES_H_                                                                             | 21451    40
    31       |#define _INTTYPES_H_                                                                             | 21452    40
    32       |                                                                                                 | 21453    40
    33       |#include <machine/_inttypes.h>                                                                   | 21454    40
     1       |/* release 2.25.00 */                                                                            | 21455    41
     2       |#pragma pack()                                                                                   | 21456    41
     3       |/*-                                                                                              | 21457    41
     4       | * Copyright (c) 2001 The NetBSD Foundation, Inc.                                                | 21458    41
     5       | * All rights reserved.                                                                          | 21459    41
     6       | *                                                                                               | 21460    41
     7       | * This code is derived from software contributed to The NetBSD Foundation                       | 21461    41
     8       | * by Klaus Klein.                                                                               | 21462    41
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   413


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     9       | *                                                                                               | 21463    41
    10       | * Redistribution and use in source and binary forms, with or without                            | 21464    41
    11       | * modification, are permitted provided that the following conditions                            | 21465    41
    12       | * are met:                                                                                      | 21466    41
    13       | * 1. Redistributions of source code must retain the above copyright                             | 21467    41
    14       | *    notice, this list of conditions and the following disclaimer.                              | 21468    41
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 21469    41
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 21470    41
    17       | *    documentation and/or other materials provided with the distribution.                       | 21471    41
    18       | * 3. All advertising materials mentioning features or use of this software                      | 21472    41
    19       | *    must display the following acknowledgement:                                                | 21473    41
    20       | *        This product includes software developed by the NetBSD                                 | 21474    41
    21       | *        Foundation, Inc. and its contributors.                                                 | 21475    41
    22       | * 4. Neither the name of The NetBSD Foundation nor the names of its                             | 21476    41
    23       | *    contributors may be used to endorse or promote products derived                            | 21477    41
    24       | *    from this software without specific prior written permission.                              | 21478    41
    25       | *                                                                                               | 21479    41
    26       | * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS                     | 21480    41
    27       | * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED                   | 21481    41
    28       | * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                    | 21482    41
    29       | * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS                     | 21483    41
    30       | * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                        | 21484    41
    31       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 21485    41
    32       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 21486    41
    33       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 21487    41
    34       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 21488    41
    35       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 21489    41
    36       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 21490    41
    37       | *                                                                                               | 21491    41
    38       | */                                                                                              | 21492    41
    39       |                                                                                                 | 21493    41
    40       |#ifndef _MACHINE_INTTYPES_H_                                                                     | 21494    41
    41       |#define _MACHINE_INTTYPES_H_                                                                     | 21495    41
    42       |                                                                                                 | 21496    41
    43       |/*                                                                                               | 21497    41
    44       | * Macros for format specifiers.                                                                 | 21498    41
    45       | */                                                                                              | 21499    41
    46       |                                                                                                 | 21500    41
    47       |/* fprintf(3) macros for signed integers. */                                                     | 21501    41
    48       |                                                                                                 | 21502    41
    49       |#define PRId8           "d"     /* int8_t */                                                     | 21503    41
    50       |#define PRId16          "d"     /* int16_t */                                                    | 21504    41
    51       |#define PRId32          "d"     /* int32_t */                                                    | 21505    41
    52       |#define PRId64          "lld"   /* int64_t */                                                    | 21506    41
    53       |#define PRIdLEAST8      "d"     /* int_least8_t */                                               | 21507    41
    54       |#define PRIdLEAST16     "d"     /* int_least16_t */                                              | 21508    41
    55       |#define PRIdLEAST32     "d"     /* int_least32_t */                                              | 21509    41
    56       |#define PRIdLEAST64     "lld"   /* int_least64_t */                                              | 21510    41
    57       |#define PRIdFAST8       "d"     /* int_fast8_t */                                                | 21511    41
    58       |#define PRIdFAST16      "d"     /* int_fast16_t */                                               | 21512    41
    59       |#define PRIdFAST32      "d"     /* int_fast32_t */                                               | 21513    41
    60       |#define PRIdFAST64      "lld"   /* int_fast64_t */                                               | 21514    41
    61       |#define PRIdMAX         "jd"    /* intmax_t */                                                   | 21515    41
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   414


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    62       |#define PRIdPTR         "d"     /* intptr_t */                                                   | 21516    41
    63       |                                                                                                 | 21517    41
    64       |#define PRIi8           "i"     /* int8_t */                                                     | 21518    41
    65       |#define PRIi16          "i"     /* int16_t */                                                    | 21519    41
    66       |#define PRIi32          "i"     /* int32_t */                                                    | 21520    41
    67       |#define PRIi64          "lli"   /* int64_t */                                                    | 21521    41
    68       |#define PRIiLEAST8      "i"     /* int_least8_t  */                                              | 21522    41
    69       |#define PRIiLEAST16     "i"     /* int_least16_t */                                              | 21523    41
    70       |#define PRIiLEAST32     "i"     /* int_least32_t */                                              | 21524    41
    71       |#define PRIiLEAST64     "lli"   /* int_least64_t */                                              | 21525    41
    72       |#define PRIiFAST8       "i"     /* int_fast8_t */                                                | 21526    41
    73       |#define PRIiFAST16      "i"     /* int_fast16_t */                                               | 21527    41
    74       |#define PRIiFAST32      "i"     /* int_fast32_t */                                               | 21528    41
    75       |#define PRIiFAST64      "lli"   /* int_fast64_t */                                               | 21529    41
    76       |#define PRIiMAX         "ji"    /* intmax_t */                                                   | 21530    41
    77       |#define PRIiPTR         "i"     /* intptr_t */                                                   | 21531    41
    78       |                                                                                                 | 21532    41
    79       |/* fprintf(3) macros for unsigned integers. */                                                   | 21533    41
    80       |                                                                                                 | 21534    41
    81       |#define PRIo8           "o"     /* uint8_t */                                                    | 21535    41
    82       |#define PRIo16          "o"     /* uint16_t */                                                   | 21536    41
    83       |#define PRIo32          "o"     /* uint32_t */                                                   | 21537    41
    84       |#define PRIo64          "llo"   /* uint64_t */                                                   | 21538    41
    85       |#define PRIoLEAST8      "o"     /* uint_least8_t */                                              | 21539    41
    86       |#define PRIoLEAST16     "o"     /* uint_least16_t */                                             | 21540    41
    87       |#define PRIoLEAST32     "o"     /* uint_least32_t */                                             | 21541    41
    88       |#define PRIoLEAST64     "llo"   /* uint_least64_t */                                             | 21542    41
    89       |#define PRIoFAST8       "o"     /* uint_fast8_t */                                               | 21543    41
    90       |#define PRIoFAST16      "o"     /* uint_fast16_t */                                              | 21544    41
    91       |#define PRIoFAST32      "o"     /* uint_fast32_t */                                              | 21545    41
    92       |#define PRIoFAST64      "llo"   /* uint_fast64_t */                                              | 21546    41
    93       |#define PRIoMAX         "jo"    /* uintmax_t */                                                  | 21547    41
    94       |#define PRIoPTR         "o"     /* uintptr_t */                                                  | 21548    41
    95       |                                                                                                 | 21549    41
    96       |#define PRIu8           "u"     /* uint8_t */                                                    | 21550    41
    97       |#define PRIu16          "u"     /* uint16_t */                                                   | 21551    41
    98       |#define PRIu32          "u"     /* uint32_t */                                                   | 21552    41
    99       |#define PRIu64          "llu"   /* uint64_t */                                                   | 21553    41
   100       |#define PRIuLEAST8      "u"     /* uint_least8_t */                                              | 21554    41
   101       |#define PRIuLEAST16     "u"     /* uint_least16_t */                                             | 21555    41
   102       |#define PRIuLEAST32     "u"     /* uint_least32_t */                                             | 21556    41
   103       |#define PRIuLEAST64     "llu"   /* uint_least64_t */                                             | 21557    41
   104       |#define PRIuFAST8       "u"     /* uint_fast8_t */                                               | 21558    41
   105       |#define PRIuFAST16      "u"     /* uint_fast16_t */                                              | 21559    41
   106       |#define PRIuFAST32      "u"     /* uint_fast32_t */                                              | 21560    41
   107       |#define PRIuFAST64      "llu"   /* uint_fast64_t */                                              | 21561    41
   108       |#define PRIuMAX         "ju"    /* uintmax_t */                                                  | 21562    41
   109       |#define PRIuPTR         "u"     /* uintptr_t */                                                  | 21563    41
   110       |                                                                                                 | 21564    41
   111       |#define PRIx8           "x"     /* uint8_t */                                                    | 21565    41
   112       |#define PRIx16          "x"     /* uint16_t */                                                   | 21566    41
   113       |#define PRIx32          "x"     /* uint32_t */                                                   | 21567    41
   114       |#define PRIx64          "llx"   /* uint64_t */                                                   | 21568    41
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   415


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   115       |#define PRIxLEAST8      "x"     /* uint_least8_t */                                              | 21569    41
   116       |#define PRIxLEAST16     "x"     /* uint_least16_t */                                             | 21570    41
   117       |#define PRIxLEAST32     "x"     /* uint_least32_t */                                             | 21571    41
   118       |#define PRIxLEAST64     "llx"   /* uint_least64_t */                                             | 21572    41
   119       |#define PRIxFAST8       "x"     /* uint_fast8_t */                                               | 21573    41
   120       |#define PRIxFAST16      "x"     /* uint_fast16_t */                                              | 21574    41
   121       |#define PRIxFAST32      "x"     /* uint_fast32_t */                                              | 21575    41
   122       |#define PRIxFAST64      "llx"   /* uint_fast64_t */                                              | 21576    41
   123       |#define PRIxMAX         "jx"    /* uintmax_t */                                                  | 21577    41
   124       |#define PRIxPTR         "x"     /* uintptr_t */                                                  | 21578    41
   125       |                                                                                                 | 21579    41
   126       |#define PRIX8           "X"     /* uint8_t */                                                    | 21580    41
   127       |#define PRIX16          "X"     /* uint16_t */                                                   | 21581    41
   128       |#define PRIX32          "X"     /* uint32_t */                                                   | 21582    41
   129       |#define PRIX64          "llX"   /* uint64_t */                                                   | 21583    41
   130       |#define PRIXLEAST8      "X"     /* uint_least8_t */                                              | 21584    41
   131       |#define PRIXLEAST16     "X"     /* uint_least16_t */                                             | 21585    41
   132       |#define PRIXLEAST32     "X"     /* uint_least32_t */                                             | 21586    41
   133       |#define PRIXLEAST64     "llX"   /* uint_least64_t */                                             | 21587    41
   134       |#define PRIXFAST8       "X"     /* uint_fast8_t */                                               | 21588    41
   135       |#define PRIXFAST16      "X"     /* uint_fast16_t */                                              | 21589    41
   136       |#define PRIXFAST32      "X"     /* uint_fast32_t */                                              | 21590    41
   137       |#define PRIXFAST64      "llX"   /* uint_fast64_t */                                              | 21591    41
   138       |#define PRIXMAX         "jX"    /* uintmax_t */                                                  | 21592    41
   139       |#define PRIXPTR         "X"     /* uintptr_t */                                                  | 21593    41
   140       |                                                                                                 | 21594    41
   141       |/* fscanf(3) macros for signed integers. */                                                      | 21595    41
   142       |                                                                                                 | 21596    41
   143       |#define SCNd8           "hhd"   /* int8_t */                                                     | 21597    41
   144       |#define SCNd16          "hd"    /* int16_t */                                                    | 21598    41
   145       |#define SCNd32          "d"     /* int32_t */                                                    | 21599    41
   146       |#define SCNd64          "lld"   /* int64_t */                                                    | 21600    41
   147       |#define SCNdLEAST8      "hhd"   /* int_least8_t */                                               | 21601    41
   148       |#define SCNdLEAST16     "hd"    /* int_least16_t */                                              | 21602    41
   149       |#define SCNdLEAST32     "d"     /* int_least32_t */                                              | 21603    41
   150       |#define SCNdLEAST64     "lld"   /* int_least64_t */                                              | 21604    41
   151       |#define SCNdFAST8       "d"     /* int_fast8_t */                                                | 21605    41
   152       |#define SCNdFAST16      "d"     /* int_fast16_t */                                               | 21606    41
   153       |#define SCNdFAST32      "d"     /* int_fast32_t */                                               | 21607    41
   154       |#define SCNdFAST64      "lld"   /* int_fast64_t */                                               | 21608    41
   155       |#define SCNdMAX         "jd"    /* intmax_t */                                                   | 21609    41
   156       |#define SCNdPTR         "d"     /* intptr_t */                                                   | 21610    41
   157       |                                                                                                 | 21611    41
   158       |#define SCNi8           "hhi"   /* int8_t */                                                     | 21612    41
   159       |#define SCNi16          "hi"    /* int16_t */                                                    | 21613    41
   160       |#define SCNi32          "i"     /* int32_t */                                                    | 21614    41
   161       |#define SCNi64          "lli"   /* int64_t */                                                    | 21615    41
   162       |#define SCNiLEAST8      "hhi"   /* int_least8_t */                                               | 21616    41
   163       |#define SCNiLEAST16     "hi"    /* int_least16_t */                                              | 21617    41
   164       |#define SCNiLEAST32     "i"     /* int_least32_t */                                              | 21618    41
   165       |#define SCNiLEAST64     "lli"   /* int_least64_t */                                              | 21619    41
   166       |#define SCNiFAST8       "i"     /* int_fast8_t */                                                | 21620    41
   167       |#define SCNiFAST16      "i"     /* int_fast16_t */                                               | 21621    41
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   416


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   168       |#define SCNiFAST32      "i"     /* int_fast32_t */                                               | 21622    41
   169       |#define SCNiFAST64      "lli"   /* int_fast64_t */                                               | 21623    41
   170       |#define SCNiMAX         "ji"    /* intmax_t */                                                   | 21624    41
   171       |#define SCNiPTR         "i"     /* intptr_t */                                                   | 21625    41
   172       |                                                                                                 | 21626    41
   173       |/* fscanf(3) macros for unsigned integers. */                                                    | 21627    41
   174       |                                                                                                 | 21628    41
   175       |#define SCNo8           "hho"   /* uint8_t */                                                    | 21629    41
   176       |#define SCNo16          "ho"    /* uint16_t */                                                   | 21630    41
   177       |#define SCNo32          "o"     /* uint32_t */                                                   | 21631    41
   178       |#define SCNo64          "llo"   /* uint64_t */                                                   | 21632    41
   179       |#define SCNoLEAST8      "hho"   /* uint_least8_t */                                              | 21633    41
   180       |#define SCNoLEAST16     "ho"    /* uint_least16_t */                                             | 21634    41
   181       |#define SCNoLEAST32     "o"     /* uint_least32_t */                                             | 21635    41
   182       |#define SCNoLEAST64     "llo"   /* uint_least64_t */                                             | 21636    41
   183       |#define SCNoFAST8       "o"     /* uint_fast8_t */                                               | 21637    41
   184       |#define SCNoFAST16      "o"     /* uint_fast16_t */                                              | 21638    41
   185       |#define SCNoFAST32      "o"     /* uint_fast32_t */                                              | 21639    41
   186       |#define SCNoFAST64      "llo"   /* uint_fast64_t */                                              | 21640    41
   187       |#define SCNoMAX         "jo"    /* uintmax_t */                                                  | 21641    41
   188       |#define SCNoPTR         "o"     /* uintptr_t */                                                  | 21642    41
   189       |                                                                                                 | 21643    41
   190       |#define SCNu8           "hhu"   /* uint8_t */                                                    | 21644    41
   191       |#define SCNu16          "hu"    /* uint16_t */                                                   | 21645    41
   192       |#define SCNu32          "u"     /* uint32_t */                                                   | 21646    41
   193       |#define SCNu64          "llu"   /* uint64_t */                                                   | 21647    41
   194       |#define SCNuLEAST8      "hhu"   /* uint_least8_t */                                              | 21648    41
   195       |#define SCNuLEAST16     "hu"    /* uint_least16_t */                                             | 21649    41
   196       |#define SCNuLEAST32     "u"     /* uint_least32_t */                                             | 21650    41
   197       |#define SCNuLEAST64     "llu"   /* uint_least64_t */                                             | 21651    41
   198       |#define SCNuFAST8       "u"     /* uint_fast8_t */                                               | 21652    41
   199       |#define SCNuFAST16      "u"     /* uint_fast16_t */                                              | 21653    41
   200       |#define SCNuFAST32      "u"     /* uint_fast32_t */                                              | 21654    41
   201       |#define SCNuFAST64      "llu"   /* uint_fast64_t */                                              | 21655    41
   202       |#define SCNuMAX         "ju"    /* uintmax_t */                                                  | 21656    41
   203       |#define SCNuPTR         "u"     /* uintptr_t */                                                  | 21657    41
   204       |                                                                                                 | 21658    41
   205       |#define SCNx8           "hhx"   /* uint8_t */                                                    | 21659    41
   206       |#define SCNx16          "hx"    /* uint16_t */                                                   | 21660    41
   207       |#define SCNx32          "x"     /* uint32_t */                                                   | 21661    41
   208       |#define SCNx64          "llx"   /* uint64_t */                                                   | 21662    41
   209       |#define SCNxLEAST8      "hhx"   /* uint_least8_t */                                              | 21663    41
   210       |#define SCNxLEAST16     "hx"    /* uint_least16_t */                                             | 21664    41
   211       |#define SCNxLEAST32     "x"     /* uint_least32_t */                                             | 21665    41
   212       |#define SCNxLEAST64     "llx"   /* uint_least64_t */                                             | 21666    41
   213       |#define SCNxFAST8       "x"     /* uint_fast8_t */                                               | 21667    41
   214       |#define SCNxFAST16      "x"     /* uint_fast16_t */                                              | 21668    41
   215       |#define SCNxFAST32      "x"     /* uint_fast32_t */                                              | 21669    41
   216       |#define SCNxFAST64      "llx"   /* uint_fast64_t */                                              | 21670    41
   217       |#define SCNxMAX         "jx"    /* uintmax_t */                                                  | 21671    41
   218       |#define SCNxPTR         "x"     /* uintptr_t */                                                  | 21672    41
   219       |                                                                                                 | 21673    41
   220       |#endif /* !_MACHINE_INTTYPES_H_ */                                                               | 21674    41
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   417


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   221       |#pragma pack(reset)                                                                              | 21675    41
    34       |#include <sys/stdint.h>                                                                          | 21676    40
     1       |/* release 2.25.00 */                                                                            | 21677    42
     2       |#pragma pack()                                                                                   | 21678    42
     3       |/*-                                                                                              | 21679    42
     4       | * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>                                           | 21680    42
     5       | * All rights reserved.                                                                          | 21681    42
     6       | *                                                                                               | 21682    42
     7       | * Redistribution and use in source and binary forms, with or without                            | 21683    42
     8       | * modification, are permitted provided that the following conditions                            | 21684    42
     9       | * are met:                                                                                      | 21685    42
    10       | * 1. Redistributions of source code must retain the above copyright                             | 21686    42
    11       | *    notice, this list of conditions and the following disclaimer.                              | 21687    42
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 21688    42
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 21689    42
    14       | *    documentation and/or other materials provided with the distribution.                       | 21690    42
    15       | *                                                                                               | 21691    42
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 21692    42
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 21693    42
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 21694    42
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 21695    42
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 21696    42
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 21697    42
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 21698    42
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 21699    42
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 21700    42
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 21701    42
    26       | * SUCH DAMAGE.                                                                                  | 21702    42
    27       | *                                                                                               | 21703    42
    28       | * $FreeBSD: src/sys/sys/stdint.h,v 1.4 2002/08/21 16:20:01 mike Exp $                           | 21704    42
    29       | */                                                                                              | 21705    42
    30       |                                                                                                 | 21706    42
    31       |#ifndef _SYS_STDINT_H_                                                                           | 21707    42
    32       |#define _SYS_STDINT_H_                                                                           | 21708    42
    33       |                                                                                                 | 21709    42
    34       |#include <sys/cdefs.h>                                                                           | 21710    42
     1       |/* release 2.25.00 */                                                                            | 21711     4
     2       |#pragma pack()                                                                                   | 21712     4
     3       |/*                                                                                               | 21713     4
     4       | * Copyright (c) 1991, 1993                                                                      | 21714     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 21715     4
     6       | *                                                                                               | 21716     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 21717     4
     8       | * Berkeley Software Design, Inc.                                                                | 21718     4
     9       | *                                                                                               | 21719     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 21720     4
    11       | * modification, are permitted provided that the following conditions                            | 21721     4
    12       | * are met:                                                                                      | 21722     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 21723     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 21724     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 21725     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 21726     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 21727     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   418


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       | * 3. All advertising materials mentioning features or use of this software                      | 21728     4
    19       | *    must display the following acknowledgement:                                                | 21729     4
    20       | *      This product includes software developed by the University of                            | 21730     4
    21       | *      California, Berkeley and its contributors.                                               | 21731     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 21732     4
    23       | *    may be used to endorse or promote products derived from this software                      | 21733     4
    24       | *    without specific prior written permission.                                                 | 21734     4
    25       | *                                                                                               | 21735     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 21736     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 21737     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 21738     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 21739     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 21740     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 21741     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 21742     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 21743     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 21744     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 21745     4
    36       | * SUCH DAMAGE.                                                                                  | 21746     4
    37       | *                                                                                               | 21747     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 21748     4
    39       | */                                                                                              | 21749     4
    40       |                                                                                                 | 21750     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 21751     4
    42       |#define _SYS_CDEFS_H_                                                                            | 21752     4
    43       |                                                                                                 | 21753     4
    44       |#if defined(__cplusplus)                                                                         | 21754     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 21755     4
    46       |#define __END_DECLS     }                                                                        | 21756     4
    47       |#else                                                                                            | 21757     4
    48       |#define __BEGIN_DECLS                                                                            | 21758     4
    49       |#define __END_DECLS                                                                              | 21759     4
    50       |#endif                                                                                           | 21760     4
    51       |                                                                                                 | 21761     4
    52       |/*                                                                                               | 21762     4
    53       | * This code has been put in place to help reduce the addition of                                | 21763     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 21764     4
    55       | * having a compiler-agnostic source tree.                                                       | 21765     4
    56       | */                                                                                              | 21766     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 21767     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 21768     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 21769     4
    60       |                                                                                                 | 21770     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 21771     4
    62       |                                                                                                 | 21772     4
    63       |                                                                                                 | 21773     4
    64       |/*                                                                                               | 21774     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 21775     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 21776     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 21777     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 21778     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 21779     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 21780     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   419


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    71       | * this only works with ANSI C.                                                                  | 21781     4
    72       | *                                                                                               | 21782     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 21783     4
    74       | * first.  It is only available with ANSI C.                                                     | 21784     4
    75       | */                                                                                              | 21785     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 21786     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 21787     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 21788     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 21789     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 21790     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 21791     4
    82       |                                                                                                 | 21792     4
    83       |#define __const         const           /* define reserved names to standard */                  | 21793     4
    84       |#define __signed        signed                                                                   | 21794     4
    85       |#define __volatile      volatile                                                                 | 21795     4
    86       |#if defined(__cplusplus)                                                                         | 21796     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 21797     4
    88       |#else                                                                                            | 21798     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 21799     4
    90       |#endif /* !__cplusplus */                                                                        | 21800     4
    91       |                                                                                                 | 21801     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 21802     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 21803     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 21804     4
    95       |#define __STRING(x)     "x"                                                                      | 21805     4
    96       |                                                                                                 | 21806     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 21807     4
    98       |#define __inline                                                                                 | 21808     4
    99       |#define __signed                                                                                 | 21809     4
   100       |#define __volatile                                                                               | 21810     4
   101       |/*                                                                                               | 21811     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 21812     4
   103       | * deleted from the program and old programs will want them left alone.                          | 21813     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 21814     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 21815     4
   106       | */                                                                                              | 21816     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 21817     4
   108       |#define const                           /* delete ANSI C keywords */                             | 21818     4
   109       |#define inline                                                                                   | 21819     4
   110       |#define signed                                                                                   | 21820     4
   111       |#define volatile                                                                                 | 21821     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 21822     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 21823     4
   114       |                                                                                                 | 21824     4
   115       |/*                                                                                               | 21825     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 21826     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 21827     4
   118       | */                                                                                              | 21828     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 21829     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 21830     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 21831     4
   122       |#define __unused                                                                                 | 21832     4
   123       |#define __aligned(x)                                                                             | 21833     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   420


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   124       |#define __section(x)                                                                             | 21834     4
   125       |#define __nonnull(x)                                                                             | 21835     4
   126       |#define __used                                                                                   | 21836     4
   127       |                                                                                                 | 21837     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 21838     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 21839     4
   130       |                                                                                                 | 21840     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 21841     4
   132       |#define __func__  NULL                                                                           | 21842     4
   133       |#endif                                                                                           | 21843     4
   134       |                                                                                                 | 21844     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 21845     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 21846     4
   137       |#endif                                                                                           | 21847     4
   138       |                                                                                                 | 21848     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 21849     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 21850     4
   141       | **/                                                                                             | 21851     4
   142       |#ifndef __cplusplus                                                                              | 21852     4
   143       |#define __restrict __restrict__                                                                  | 21853     4
   144       |#else                                                                                            | 21854     4
   145       |/* Systems/C++ does not */                                                                       | 21855     4
   146       |#define __restrict                                                                               | 21856     4
   147       |#endif                                                                                           | 21857     4
   148       |                                                                                                 | 21858     4
   149       |/*                                                                                               | 21859     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 21860     4
   151       | */                                                                                              | 21861     4
   152       |#define __predict_true(exp)     (exp)                                                            | 21862     4
   153       |#define __predict_false(exp)    (exp)                                                            | 21863     4
   154       |                                                                                                 | 21864     4
   155       |                                                                                                 | 21865     4
   156       |/*                                                                                               | 21866     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 21867     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 21868     4
   159       | *                                                                                               | 21869     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 21870     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 21871     4
   162       | */                                                                                              | 21872     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 21873     4
   164       |#undef __offsetof                                                                                | 21874     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 21875     4
   166       |#endif                                                                                           | 21876     4
   167       |                                                                                                 | 21877     4
   168       |/*                                                                                               | 21878     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 21879     4
   170       | * or scanf-like arguments.                                                                      | 21880     4
   171       | */                                                                                              | 21881     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 21882     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 21883     4
   174       |#define __format_arg(fmtarg)                                                                     | 21884     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 21885     4
   176       |                                                                                                 | 21886     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   421


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 21887     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 21888     4
   179       |                                                                                                 | 21889     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 21890     4
   181       |#define __weak_reference(sym,alias)                                                              | 21891     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 21892     4
   183       |#define __warn_references(sym,msg)                                                               | 21893     4
   184       |                                                                                                 | 21894     4
   185       | /* This places the string into the resulting object.  It should */                              | 21895     4
   186       | /* probably become #pragma ident */                                                             | 21896     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 21897     4
   188       |                                                                                                 | 21898     4
   189       |#ifndef __RCSID                                                                                  | 21899     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 21900     4
   191       |#endif                                                                                           | 21901     4
   192       |                                                                                                 | 21902     4
   193       |/*                                                                                               | 21903     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 21904     4
   195       | * Usage:                                                                                        | 21905     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 21906     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 21907     4
   198       | */                                                                                              | 21908     4
   199       |#ifndef __SYSCID                                                                                 | 21909     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 21910     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 21911     4
   202       |#else                                                                                            | 21912     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 21913     4
   204       |#endif                                                                                           | 21914     4
   205       |#endif                                                                                           | 21915     4
   206       |                                                                                                 | 21916     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 21917     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 21918     4
   209       |#endif                                                                                           | 21919     4
   210       |                                                                                                 | 21920     4
   211       |#ifndef __COPYRIGHT                                                                              | 21921     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 21922     4
   213       |#endif                                                                                           | 21923     4
   214       |                                                                                                 | 21924     4
   215       |                                                                                                 | 21925     4
   216       |#ifndef __DECONST                                                                                | 21926     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 21927     4
   218       |#endif                                                                                           | 21928     4
   219       |                                                                                                 | 21929     4
   220       |#ifndef __DEVOLATILE                                                                             | 21930     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 21931     4
   222       |#endif                                                                                           | 21932     4
   223       |                                                                                                 | 21933     4
   224       |#ifndef __DEQUALIFY                                                                              | 21934     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 21935     4
   226       |#endif                                                                                           | 21936     4
   227       |                                                                                                 | 21937     4
   228       |                                                                                                 | 21938     4
   229       |/*-                                                                                              | 21939     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   422


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   230       | * The following definitions are an extension of the behavior originally                         | 21940     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 21941     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 21942     4
   233       | * header file is included.                                                                      | 21943     4
   234       | *                                                                                               | 21944     4
   235       | * Here's a quick run-down of the versions:                                                      | 21945     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 21946     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 21947     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 21948     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 21949     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 21950     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 21951     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 21952     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 21953     4
   244       | *                                                                                               | 21954     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 21955     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 21956     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 21957     4
   248       | *                                                                                               | 21958     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 21959     4
   250       | */                                                                                              | 21960     4
   251       |                                                                                                 | 21961     4
   252       |/*                                                                                               | 21962     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 21963     4
   254       | * available. Also make them available when requested so.                                        | 21964     4
   255       | */                                                                                              | 21965     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 21966     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 21967     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 21968     4
   259       |#define __DF_VISIBLE    1                                                                        | 21969     4
   260       |#else                                                                                            | 21970     4
   261       |#define __DF_VISIBLE    0                                                                        | 21971     4
   262       |#endif                                                                                           | 21972     4
   263       |                                                                                                 | 21973     4
   264       |/*-                                                                                              | 21974     4
   265       | * The following definitions are an extension of the behavior originally                         | 21975     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 21976     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 21977     4
   268       | * header file is included.                                                                      | 21978     4
   269       | *                                                                                               | 21979     4
   270       | * Here's a quick run-down of the versions:                                                      | 21980     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 21981     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 21982     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 21983     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 21984     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 21985     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 21986     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 21987     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 21988     4
   279       | *                                                                                               | 21989     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 21990     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 21991     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 21992     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   423


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   283       | *                                                                                               | 21993     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 21994     4
   285       | */                                                                                              | 21995     4
   286       |                                                                                                 | 21996     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 21997     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 21998     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 21999     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 22000     4
   291       |#endif                                                                                           | 22001     4
   292       |                                                                                                 | 22002     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 22003     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 22004     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 22005     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 22006     4
   297       |#endif                                                                                           | 22007     4
   298       |                                                                                                 | 22008     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 22009     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 22010     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 22011     4
   302       |#define __XSI_VISIBLE           700                                                              | 22012     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 22013     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 22014     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 22015     4
   306       |#define __XSI_VISIBLE           600                                                              | 22016     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 22017     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 22018     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 22019     4
   310       |#define __XSI_VISIBLE           500                                                              | 22020     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 22021     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 22022     4
   313       |#endif                                                                                           | 22023     4
   314       |#endif                                                                                           | 22024     4
   315       |                                                                                                 | 22025     4
   316       |/*                                                                                               | 22026     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 22027     4
   318       | * important.                                                                                    | 22028     4
   319       | */                                                                                              | 22029     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 22030     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 22031     4
   322       |#endif                                                                                           | 22032     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 22033     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 22034     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 22035     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 22036     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 22037     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 22038     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 22039     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 22040     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 22041     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 22042     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 22043     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 22044     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 22045     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   424


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 22046     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 22047     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 22048     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 22049     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 22050     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 22051     4
   342       |#else                                                                                            | 22052     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 22053     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 22054     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 22055     4
   346       |#else                                                                                            | 22056     4
   347       |/*-                                                                                              | 22057     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 22058     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 22059     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 22060     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 22061     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 22062     4
   353       | * a test program to print out the values.                                                       | 22063     4
   354       | *                                                                                               | 22064     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 22065     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 22066     4
   357       | * environment (and in fact we will never get here).                                             | 22067     4
   358       | */                                                                                              | 22068     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 22069     4
   360       |#define __POSIX_VISIBLE         0                                                                | 22070     4
   361       |#define __XSI_VISIBLE           0                                                                | 22071     4
   362       |#define __BSD_VISIBLE           0                                                                | 22072     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 22073     4
   364       |#define __EXT1_VISIBLE          0                                                                | 22074     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 22075     4
   366       |#define __POSIX_VISIBLE         0                                                                | 22076     4
   367       |#define __XSI_VISIBLE           0                                                                | 22077     4
   368       |#define __BSD_VISIBLE           0                                                                | 22078     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 22079     4
   370       |#define __EXT1_VISIBLE          0                                                                | 22080     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 22081     4
   372       |#define __POSIX_VISIBLE         0                                                                | 22082     4
   373       |#define __XSI_VISIBLE           0                                                                | 22083     4
   374       |#define __BSD_VISIBLE           0                                                                | 22084     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 22085     4
   376       |#define __EXT1_VISIBLE          0                                                                | 22086     4
   377       |#else                           /* Default environment: show everything. */                      | 22087     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 22088     4
   379       |#define __XSI_VISIBLE           700                                                              | 22089     4
   380       |#define __BSD_VISIBLE           1                                                                | 22090     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 22091     4
   382       |#define __EXT1_VISIBLE          1                                                                | 22092     4
   383       |#endif                                                                                           | 22093     4
   384       |#endif                                                                                           | 22094     4
   385       |                                                                                                 | 22095     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 22096     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 22097     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 22098     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   425


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 22099     4
   390       |#define __EXT1_VISIBLE          1                                                                | 22100     4
   391       |#else                                                                                            | 22101     4
   392       |#define __EXT1_VISIBLE          0                                                                | 22102     4
   393       |#endif                                                                                           | 22103     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 22104     4
   395       |                                                                                                 | 22105     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 22106     4
   397       |#define __NO_TLS 1                                                                               | 22107     4
   398       |#endif                                                                                           | 22108     4
   399       |                                                                                                 | 22109     4
   400       |                                                                                                 | 22110     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 22111     4
   402       |#define __FBSDID(x)                                                                              | 22112     4
   403       |                                                                                                 | 22113     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 22114     4
   405       |#pragma pack(reset)                                                                              | 22115     4
    35       |#include <sys/_types.h>                                                                          | 22116    42
     1       |/* release 2.25.00 */                                                                            | 22117     6
     2       |#pragma pack()                                                                                   | 22118     6
     3       |/*-                                                                                              | 22119     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 22120     6
     5       | * All rights reserved.                                                                          | 22121     6
     6       | *                                                                                               | 22122     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 22123     6
     8       | * modification, are permitted provided that the following conditions                            | 22124     6
     9       | * are met:                                                                                      | 22125     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 22126     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 22127     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 22128     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 22129     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 22130     6
    15       | *                                                                                               | 22131     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 22132     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 22133     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 22134     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 22135     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 22136     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 22137     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 22138     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 22139     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 22140     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 22141     6
    26       | * SUCH DAMAGE.                                                                                  | 22142     6
    27       | *                                                                                               | 22143     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 22144     6
    29       | */                                                                                              | 22145     6
    30       |                                                                                                 | 22146     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 22147     6
    32       |#define _SYS__TYPES_H_                                                                           | 22148     6
    33       |                                                                                                 | 22149     6
    34       |#include <sys/cdefs.h>                                                                           | 22150     6
    35       |#include <machine/_types.h>                                                                      | 22151     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   426


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    36       |                                                                                                 | 22152     6
    37       |/*                                                                                               | 22153     6
    38       | * Standard type definitions.                                                                    | 22154     6
    39       | */                                                                                              | 22155     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 22156     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 22157     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 22158     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 22159     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 22160     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 22161     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 22162     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 22163     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 22164     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 22165     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 22166     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 22167     6
    52       |typedef int             __nl_item;                                                               | 22168     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 22169     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 22170     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 22171     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 22172     6
    57       |                                        /* signed, because of legacy code */                     | 22173     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 22174     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 22175     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 22176     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 22177     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 22178     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 22179     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 22180     6
    65       |                                                                                                 | 22181     6
    66       |/*                                                                                               | 22182     6
    67       | * Unusual type definitions.                                                                     | 22183     6
    68       | */                                                                                              | 22184     6
    69       |/*                                                                                               | 22185     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 22186     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 22187     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 22188     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 22189     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 22190     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 22191     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 22192     6
    77       | *                                                                                               | 22193     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 22194     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 22195     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 22196     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 22197     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 22198     6
    83       | */                                                                                              | 22199     6
    84       |#ifdef __cplusplus                                                                               | 22200     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 22201     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 22202     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 22203     6
    88       |#else                                                                                            | 22204     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   427


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 22205     6
    90       |#endif                                                                                           | 22206     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 22207     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 22208     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 22209     6
    94       |                                                                                                 | 22210     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 22211     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 22212     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 22213     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 22214     6
    99       |#endif                                                                                           | 22215     6
   100       |                                                                                                 | 22216     6
   101       |#if !defined(__cplusplus)                                                                        | 22217     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 22218     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 22219     6
   104       |#endif                                                                                           | 22220     6
   105       |                                                                                                 | 22221     6
   106       |                                                                                                 | 22222     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 22223     6
   108       |                                                                                                 | 22224     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 22225     6
   110       |                                                                                                 | 22226     6
   111       |/*                                                                                               | 22227     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 22228     6
   113       | * stream conversions.                                                                           | 22229     6
   114       | */                                                                                              | 22230     6
   115       |typedef union {                                                                                  | 22231     6
   116       |        char            __mbstate8[128];                                                         | 22232     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 22233     6
   118       |} __mbstate_t;                                                                                   | 22234     6
   119       |                                                                                                 | 22235     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 22236     6
   121       |#pragma pack(reset)                                                                              | 22237     6
    36       |                                                                                                 | 22238    42
    37       |#include <machine/_stdint.h>                                                                     | 22239    42
     1       |/* release 2.25.00 */                                                                            | 22240    43
     2       |#pragma pack()                                                                                   | 22241    43
     3       |/*-                                                                                              | 22242    43
     4       | * Copyright (c) 2001, 2002 Mike Barcroft <mike@FreeBSD.org>                                     | 22243    43
     5       | * Copyright (c) 2001 The NetBSD Foundation, Inc.                                                | 22244    43
     6       | * All rights reserved.                                                                          | 22245    43
     7       | *                                                                                               | 22246    43
     8       | * This code is derived from software contributed to The NetBSD Foundation                       | 22247    43
     9       | * by Klaus Klein.                                                                               | 22248    43
    10       | *                                                                                               | 22249    43
    11       | * Redistribution and use in source and binary forms, with or without                            | 22250    43
    12       | * modification, are permitted provided that the following conditions                            | 22251    43
    13       | * are met:                                                                                      | 22252    43
    14       | * 1. Redistributions of source code must retain the above copyright                             | 22253    43
    15       | *    notice, this list of conditions and the following disclaimer.                              | 22254    43
    16       | * 2. Redistributions in binary form must reproduce the above copyright                          | 22255    43
    17       | *    notice, this list of conditions and the following disclaimer in the                        | 22256    43
    18       | *    documentation and/or other materials provided with the distribution.                       | 22257    43
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   428


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * 3. All advertising materials mentioning features or use of this software                      | 22258    43
    20       | *    must display the following acknowledgement:                                                | 22259    43
    21       | *        This product includes software developed by the NetBSD                                 | 22260    43
    22       | *        Foundation, Inc. and its contributors.                                                 | 22261    43
    23       | * 4. Neither the name of The NetBSD Foundation nor the names of its                             | 22262    43
    24       | *    contributors may be used to endorse or promote products derived                            | 22263    43
    25       | *    from this software without specific prior written permission.                              | 22264    43
    26       | *                                                                                               | 22265    43
    27       | * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS                     | 22266    43
    28       | * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED                   | 22267    43
    29       | * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                    | 22268    43
    30       | * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS                     | 22269    43
    31       | * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                        | 22270    43
    32       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 22271    43
    33       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 22272    43
    34       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 22273    43
    35       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 22274    43
    36       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 22275    43
    37       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 22276    43
    38       | *                                                                                               | 22277    43
    39       | * $FreeBSD: src/sys/i386/include/_stdint.h,v 1.2 2004/05/18 16:04:57                            | 22278    43
    40       | *  stefanf Exp $                                                                                | 22279    43
    41       | */                                                                                              | 22280    43
    42       |                                                                                                 | 22281    43
    43       |#ifndef _MACHINE__STDINT_H_                                                                      | 22282    43
    44       |#define _MACHINE__STDINT_H_                                                                      | 22283    43
    45       |                                                                                                 | 22284    43
    46       |#if 1 /* !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) */                             | 22285    43
    47       |                                                                                                 | 22286    43
    48       |#define INT8_C(c)               (c)                                                              | 22287    43
    49       |#define INT16_C(c)              (c)                                                              | 22288    43
    50       |#define INT32_C(c)              (c)                                                              | 22289    43
    51       |#define INT64_C(c)              (c ## LL)                                                        | 22290    43
    52       |                                                                                                 | 22291    43
    53       |#define UINT8_C(c)              (c)                                                              | 22292    43
    54       |#define UINT16_C(c)             (c)                                                              | 22293    43
    55       |#define UINT32_C(c)             (c ## U)                                                         | 22294    43
    56       |#define UINT64_C(c)             (c ## ULL)                                                       | 22295    43
    57       |                                                                                                 | 22296    43
    58       |#define INTMAX_C(c)             (c ## LL)                                                        | 22297    43
    59       |#define UINTMAX_C(c)            (c ## ULL)                                                       | 22298    43
    60       |                                                                                                 | 22299    43
    61       |#endif /* !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) */                            | 22300    43
    62       |                                                                                                 | 22301    43
    63       |#if 1 /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */                                | 22302    43
    64       |                                                                                                 | 22303    43
    65       |/*                                                                                               | 22304    43
    66       | * ISO/IEC 9899:1999                                                                             | 22305    43
    67       | * 7.18.2.1 Limits of exact-width integer types                                                  | 22306    43
    68       | */                                                                                              | 22307    43
    69       |/* Minimum values of exact-width signed integer types. */                                        | 22308    43
    70       |#define INT8_MIN        (-0x7f-1)                                                                | 22309    43
    71       |#define INT16_MIN       (-0x7fff-1)                                                              | 22310    43
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   429


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    72       |#define INT32_MIN       (-0x7fffffff-1)                                                          | 22311    43
    73       |#define INT64_MIN       (-0x7fffffffffffffffLL-1)                                                | 22312    43
    74       |                                                                                                 | 22313    43
    75       |/* Maximum values of exact-width signed integer types. */                                        | 22314    43
    76       |#define INT8_MAX        0x7f                                                                     | 22315    43
    77       |#define INT16_MAX       0x7fff                                                                   | 22316    43
    78       |#define INT32_MAX       0x7fffffff                                                               | 22317    43
    79       |#define INT64_MAX       0x7fffffffffffffffLL                                                     | 22318    43
    80       |                                                                                                 | 22319    43
    81       |/* Maximum values of exact-width unsigned integer types. */                                      | 22320    43
    82       |#define UINT8_MAX       0xff                                                                     | 22321    43
    83       |#define UINT16_MAX      0xffff                                                                   | 22322    43
    84       |#define UINT32_MAX      0xffffffffU                                                              | 22323    43
    85       |#define UINT64_MAX      0xffffffffffffffffULL                                                    | 22324    43
    86       |                                                                                                 | 22325    43
    87       |/*                                                                                               | 22326    43
    88       | * ISO/IEC 9899:1999                                                                             | 22327    43
    89       | * 7.18.2.2  Limits of minimum-width integer types                                               | 22328    43
    90       | */                                                                                              | 22329    43
    91       |/* Minimum values of minimum-width signed integer types. */                                      | 22330    43
    92       |#define INT_LEAST8_MIN  INT8_MIN                                                                 | 22331    43
    93       |#define INT_LEAST16_MIN INT16_MIN                                                                | 22332    43
    94       |#define INT_LEAST32_MIN INT32_MIN                                                                | 22333    43
    95       |#define INT_LEAST64_MIN INT64_MIN                                                                | 22334    43
    96       |                                                                                                 | 22335    43
    97       |/* Maximum values of minimum-width signed integer types. */                                      | 22336    43
    98       |#define INT_LEAST8_MAX  INT8_MAX                                                                 | 22337    43
    99       |#define INT_LEAST16_MAX INT16_MAX                                                                | 22338    43
   100       |#define INT_LEAST32_MAX INT32_MAX                                                                | 22339    43
   101       |#define INT_LEAST64_MAX INT64_MAX                                                                | 22340    43
   102       |                                                                                                 | 22341    43
   103       |/* Maximum values of minimum-width unsigned integer types. */                                    | 22342    43
   104       |#define UINT_LEAST8_MAX  UINT8_MAX                                                               | 22343    43
   105       |#define UINT_LEAST16_MAX UINT16_MAX                                                              | 22344    43
   106       |#define UINT_LEAST32_MAX UINT32_MAX                                                              | 22345    43
   107       |#define UINT_LEAST64_MAX UINT64_MAX                                                              | 22346    43
   108       |                                                                                                 | 22347    43
   109       |/*                                                                                               | 22348    43
   110       | * ISO/IEC 9899:1999                                                                             | 22349    43
   111       | * 7.18.2.3  Limits of fastest minimum-width integer types                                       | 22350    43
   112       | */                                                                                              | 22351    43
   113       |/* Minimum values of fastest minimum-width signed integer types. */                              | 22352    43
   114       |#define INT_FAST8_MIN   INT32_MIN                                                                | 22353    43
   115       |#define INT_FAST16_MIN  INT32_MIN                                                                | 22354    43
   116       |#define INT_FAST32_MIN  INT32_MIN                                                                | 22355    43
   117       |#define INT_FAST64_MIN  INT64_MIN                                                                | 22356    43
   118       |                                                                                                 | 22357    43
   119       |/* Maximum values of fastest minimum-width signed integer types. */                              | 22358    43
   120       |#define INT_FAST8_MAX   INT32_MAX                                                                | 22359    43
   121       |#define INT_FAST16_MAX  INT32_MAX                                                                | 22360    43
   122       |#define INT_FAST32_MAX  INT32_MAX                                                                | 22361    43
   123       |#define INT_FAST64_MAX  INT64_MAX                                                                | 22362    43
   124       |                                                                                                 | 22363    43
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   430


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   125       |/* Maximum values of fastest minimum-width unsigned integer types. */                            | 22364    43
   126       |#define UINT_FAST8_MAX  UINT32_MAX                                                               | 22365    43
   127       |#define UINT_FAST16_MAX UINT32_MAX                                                               | 22366    43
   128       |#define UINT_FAST32_MAX UINT32_MAX                                                               | 22367    43
   129       |#define UINT_FAST64_MAX UINT64_MAX                                                               | 22368    43
   130       |                                                                                                 | 22369    43
   131       |/*                                                                                               | 22370    43
   132       | * ISO/IEC 9899:1999                                                                             | 22371    43
   133       | * 7.18.2.4  Limits of integer types capable of holding object pointers                          | 22372    43
   134       | */                                                                                              | 22373    43
   135       |#if __SYSC_64BIT__                                                                               | 22374    43
   136       |#define INTPTR_MIN      INT64_MIN                                                                | 22375    43
   137       |#define INTPTR_MAX      INT64_MAX                                                                | 22376    43
   138       |#define UINTPTR_MAX     UINT64_MAX                                                               | 22377    43
   139       |#else                                                                                            | 22378    43
   140       |#define INTPTR_MIN      INT32_MIN                                                                | 22379    43
   141       |#define INTPTR_MAX      INT32_MAX                                                                | 22380    43
   142       |#define UINTPTR_MAX     UINT32_MAX                                                               | 22381    43
   143       |#endif                                                                                           | 22382    43
   144       |                                                                                                 | 22383    43
   144       +                                                                                                 + 22383    43
   145       |/*                                                                                               | 22384    43
   146       | * ISO/IEC 9899:1999                                                                             | 22385    43
   147       | * 7.18.2.5  Limits of greatest-width integer types                                              | 22386    43
   148       | */                                                                                              | 22387    43
   149       |#define INTMAX_MIN      INT64_MIN                                                                | 22388    43
   150       |#define INTMAX_MAX      INT64_MAX                                                                | 22389    43
   151       |#define UINTMAX_MAX     UINT64_MAX                                                               | 22390    43
   152       |                                                                                                 | 22391    43
   153       |/*                                                                                               | 22392    43
   154       | * ISO/IEC 9899:1999                                                                             | 22393    43
   155       | * 7.18.3  Limits of other integer types                                                         | 22394    43
   156       | */                                                                                              | 22395    43
   157       |/* Limits of ptrdiff_t. */                                                                       | 22396    43
   158       |#define PTRDIFF_MIN     INTPTR_MIN                                                               | 22397    43
   159       |#define PTRDIFF_MAX     INTPTR_MAX                                                               | 22398    43
   160       |                                                                                                 | 22399    43
   161       |/* Limits of sig_atomic_t. */                                                                    | 22400    43
   162       |#define SIG_ATOMIC_MIN  INT32_MIN                                                                | 22401    43
   163       |#define SIG_ATOMIC_MAX  INT32_MAX                                                                | 22402    43
   164       |                                                                                                 | 22403    43
   165       |/* Limit of size_t. */                                                                           | 22404    43
   166       |#define SIZE_MAX        UINTPTR_MAX                                                              | 22405    43
   167       |                                                                                                 | 22406    43
   168       |#ifndef WCHAR_MIN /* Also possibly defined in <wchar.h> */                                       | 22407    43
   169       |/* Limits of wchar_t. */                                                                         | 22408    43
   170       |#define WCHAR_MIN       INT32_MIN                                                                | 22409    43
   171       |#define WCHAR_MAX       INT32_MAX                                                                | 22410    43
   172       |#endif                                                                                           | 22411    43
   173       |                                                                                                 | 22412    43
   174       |/* Limits of wint_t. */                                                                          | 22413    43
   175       |#define WINT_MIN        INT32_MIN                                                                | 22414    43
   176       |#define WINT_MAX        INT32_MAX                                                                | 22415    43
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   431


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   177       |                                                                                                 | 22416    43
   178       |#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */                               | 22417    43
   179       |                                                                                                 | 22418    43
   180       |#endif /* !_MACHINE__STDINT_H_ */                                                                | 22419    43
   181       |#pragma pack(reset)                                                                              | 22420    43
    38       |                                                                                                 | 22421    42
    39       |#ifndef _INT8_T_DECLARED                                                                         | 22422    42
    40       |typedef __int8_t                int8_t;                                                          | 22423    42
    41       |#define _INT8_T_DECLARED                                                                         | 22424    42
    42       |#endif                                                                                           | 22425    42
    43       |                                                                                                 | 22426    42
    44       |#ifndef _INT16_T_DECLARED                                                                        | 22427    42
    45       |typedef __int16_t               int16_t;                                                         | 22428    42
    46       |#define _INT16_T_DECLARED                                                                        | 22429    42
    47       |#endif                                                                                           | 22430    42
    48       |                                                                                                 | 22431    42
    49       |#ifndef _INT32_T_DECLARED                                                                        | 22432    42
    50       |typedef __int32_t               int32_t;                                                         | 22433    42
    51       |#define _INT32_T_DECLARED                                                                        | 22434    42
    52       |#endif                                                                                           | 22435    42
    53       |                                                                                                 | 22436    42
    54       |#ifndef _INT64_T_DECLARED                                                                        | 22437    42
    55       |typedef __int64_t               int64_t;                                                         | 22438    42
    56       |#define _INT64_T_DECLARED                                                                        | 22439    42
    57       |#endif                                                                                           | 22440    42
    58       |                                                                                                 | 22441    42
    59       |#ifndef _UINT8_T_DECLARED                                                                        | 22442    42
    60       |typedef __uint8_t               uint8_t;                                                         | 22443    42
    61       |#define _UINT8_T_DECLARED                                                                        | 22444    42
    62       |#endif                                                                                           | 22445    42
    63       |                                                                                                 | 22446    42
    64       |#ifndef _UINT16_T_DECLARED                                                                       | 22447    42
    65       |typedef __uint16_t              uint16_t;                                                        | 22448    42
    66       |#define _UINT16_T_DECLARED                                                                       | 22449    42
    67       |#endif                                                                                           | 22450    42
    68       |                                                                                                 | 22451    42
    69       |#ifndef _UINT32_T_DECLARED                                                                       | 22452    42
    70       |typedef __uint32_t              uint32_t;                                                        | 22453    42
    71       |#define _UINT32_T_DECLARED                                                                       | 22454    42
    72       |#endif                                                                                           | 22455    42
    73       |                                                                                                 | 22456    42
    74       |#ifndef _UINT64_T_DECLARED                                                                       | 22457    42
    75       |typedef __uint64_t              uint64_t;                                                        | 22458    42
    76       |#define _UINT64_T_DECLARED                                                                       | 22459    42
    77       |#endif                                                                                           | 22460    42
    78       |                                                                                                 | 22461    42
    79       |typedef __int_least8_t          int_least8_t;                                                    | 22462    42
    80       |typedef __int_least16_t         int_least16_t;                                                   | 22463    42
    81       |typedef __int_least32_t         int_least32_t;                                                   | 22464    42
    82       |typedef __int_least64_t         int_least64_t;                                                   | 22465    42
    83       |                                                                                                 | 22466    42
    84       |typedef __uint_least8_t         uint_least8_t;                                                   | 22467    42
    85       |typedef __uint_least16_t        uint_least16_t;                                                  | 22468    42
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   432


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    86       |typedef __uint_least32_t        uint_least32_t;                                                  | 22469    42
    87       |typedef __uint_least64_t        uint_least64_t;                                                  | 22470    42
    88       |                                                                                                 | 22471    42
    89       |typedef __int_fast8_t           int_fast8_t;                                                     | 22472    42
    90       |typedef __int_fast16_t          int_fast16_t;                                                    | 22473    42
    91       |typedef __int_fast32_t          int_fast32_t;                                                    | 22474    42
    92       |typedef __int_fast64_t          int_fast64_t;                                                    | 22475    42
    93       |                                                                                                 | 22476    42
    94       |typedef __uint_fast8_t          uint_fast8_t;                                                    | 22477    42
    95       |typedef __uint_fast16_t         uint_fast16_t;                                                   | 22478    42
    96       |typedef __uint_fast32_t         uint_fast32_t;                                                   | 22479    42
    97       |typedef __uint_fast64_t         uint_fast64_t;                                                   | 22480    42
    98       |                                                                                                 | 22481    42
    99       |typedef __intmax_t              intmax_t;                                                        | 22482    42
   100       |typedef __uintmax_t             uintmax_t;                                                       | 22483    42
   101       |                                                                                                 | 22484    42
   102       |#ifndef _INTPTR_T_DECLARED                                                                       | 22485    42
   103       |typedef __intptr_t              intptr_t;                                                        | 22486    42
   104       |typedef __uintptr_t             uintptr_t;                                                       | 22487    42
   105       |#define _INTPTR_T_DECLARED                                                                       | 22488    42
   106       |#endif                                                                                           | 22489    42
   107       |                                                                                                 | 22490    42
   108       |#endif /* !_SYS_STDINT_H_ */                                                                     | 22491    42
   109       |#pragma pack(reset)                                                                              | 22492    42
    35       |                                                                                                 | 22493    40
    36       |typedef struct {                                                                                 | 22494    40
    37       |        intmax_t        quot;           /* Quotient. */                                          | 22495    40
    38       |        intmax_t        rem;            /* Remainder. */                                         | 22496    40
    39       |} imaxdiv_t;                                                                                     | 22497    40
    40       |                                                                                                 | 22498    40
    41       |__BEGIN_DECLS                                                                                    | 22499    40
    41       +                                                                                                 + 22499    40
    42       |intmax_t        imaxabs(intmax_t) __pure2;                                                       | 22500    40
    42       +intmax_t        imaxabs(intmax_t) __attribute__((__const__));                                    + 22500    40
    43       |imaxdiv_t       imaxdiv(intmax_t, intmax_t) __pure2;                                             | 22501    40
    43       +imaxdiv_t       imaxdiv(intmax_t, intmax_t) __attribute__((__const__));                          + 22501    40
    44       |                                                                                                 | 22502    40
    45       |#pragma map(strtoimax, "@@S2IMAX")                                                               | 22503    40
    46       |intmax_t        strtoimax(const char * __restrict, char ** __restrict, int);                     | 22504    40
    46       +intmax_t        strtoimax(const char * __restrict__, char ** __restrict__, int);                 + 22504    40
    47       |#pragma map(strtoumax, "@@S2UMAX")                                                               | 22505    40
    48       |uintmax_t       strtoumax(const char * __restrict, char ** __restrict, int);                     | 22506    40
    48       +uintmax_t       strtoumax(const char * __restrict__, char ** __restrict__, int);                 + 22506    40
    49       |#pragma map(wcstoimax, "@@WCSIMX")                                                               | 22507    40
    50       |intmax_t        wcstoimax(const __wchar_t * __restrict,                                          | 22508    40
    50       +intmax_t        wcstoimax(const __wchar_t * __restrict__,                                        + 22508    40
    51       |                    __wchar_t ** __restrict, int);                                               | 22509    40
    51       +                                    __wchar_t ** __restrict__, int);                             + 22509    40
    52       |#pragma map(wcstoumax, "@@WCSUMX")                                                               | 22510    40
    53       |uintmax_t       wcstoumax(const __wchar_t * __restrict,                                          | 22511    40
    53       +uintmax_t       wcstoumax(const __wchar_t * __restrict__,                                        + 22511    40
    54       |                    __wchar_t ** __restrict, int);                                               | 22512    40
    54       +                                    __wchar_t ** __restrict__, int);                             + 22512    40
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   433


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    55       |__END_DECLS                                                                                      | 22513    40
    55       +                                                                                                 + 22513    40
    56       |                                                                                                 | 22514    40
    57       |#endif /* !_INTTYPES_H_ */                                                                       | 22515    40
    58       |#pragma pack(reset)                                                                              | 22516    40
    48       |#include <fcntl.h>                                                                               | 22517    39
     1       |/* release 2.25.00 */                                                                            | 22518    44
     2       |#pragma pack()                                                                                   | 22519    44
     3       |/*-                                                                                              | 22520    44
     4       | * Copyright (c) 1983, 1990, 1993                                                                | 22521    44
     5       | *      The Regents of the University of California.  All rights reserved.                       | 22522    44
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 22523    44
     7       | * All or some portions of this file are derived from material licensed                          | 22524    44
     8       | * to the University of California by American Telephone and Telegraph                           | 22525    44
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 22526    44
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 22527    44
    11       | *                                                                                               | 22528    44
    12       | * Redistribution and use in source and binary forms, with or without                            | 22529    44
    13       | * modification, are permitted provided that the following conditions                            | 22530    44
    14       | * are met:                                                                                      | 22531    44
    15       | * 1. Redistributions of source code must retain the above copyright                             | 22532    44
    16       | *    notice, this list of conditions and the following disclaimer.                              | 22533    44
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 22534    44
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 22535    44
    19       | *    documentation and/or other materials provided with the distribution.                       | 22536    44
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 22537    44
    21       | *    may be used to endorse or promote products derived from this software                      | 22538    44
    22       | *    without specific prior written permission.                                                 | 22539    44
    23       | *                                                                                               | 22540    44
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 22541    44
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 22542    44
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 22543    44
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 22544    44
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 22545    44
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 22546    44
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 22547    44
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 22548    44
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 22549    44
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 22550    44
    34       | * SUCH DAMAGE.                                                                                  | 22551    44
    35       | *                                                                                               | 22552    44
    36       | *      @(#)fcntl.h     8.3 (Berkeley) 1/21/94                                                   | 22553    44
    37       | */                                                                                              | 22554    44
    38       |                                                                                                 | 22555    44
    39       |#ifndef _SYS_FCNTL_H_                                                                            | 22556    44
    40       |#define _SYS_FCNTL_H_                                                                            | 22557    44
    41       |                                                                                                 | 22558    44
    42       |/*                                                                                               | 22559    44
    43       | * This file includes the definitions for open and fcntl                                         | 22560    44
    44       | * described by POSIX for <fcntl.h>; it also includes                                            | 22561    44
    45       | * related kernel definitions.                                                                   | 22562    44
    46       | */                                                                                              | 22563    44
    47       |                                                                                                 | 22564    44
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   434


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    48       |#include <sys/cdefs.h>                                                                           | 22565    44
     1       |/* release 2.25.00 */                                                                            | 22566     4
     2       |#pragma pack()                                                                                   | 22567     4
     3       |/*                                                                                               | 22568     4
     4       | * Copyright (c) 1991, 1993                                                                      | 22569     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 22570     4
     6       | *                                                                                               | 22571     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 22572     4
     8       | * Berkeley Software Design, Inc.                                                                | 22573     4
     9       | *                                                                                               | 22574     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 22575     4
    11       | * modification, are permitted provided that the following conditions                            | 22576     4
    12       | * are met:                                                                                      | 22577     4
    13       | * 1. Redistributions of source code must retain the above copyright                             | 22578     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 22579     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 22580     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 22581     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 22582     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 22583     4
    19       | *    must display the following acknowledgement:                                                | 22584     4
    20       | *      This product includes software developed by the University of                            | 22585     4
    21       | *      California, Berkeley and its contributors.                                               | 22586     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 22587     4
    23       | *    may be used to endorse or promote products derived from this software                      | 22588     4
    24       | *    without specific prior written permission.                                                 | 22589     4
    25       | *                                                                                               | 22590     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 22591     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 22592     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 22593     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 22594     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 22595     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 22596     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 22597     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 22598     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 22599     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 22600     4
    36       | * SUCH DAMAGE.                                                                                  | 22601     4
    37       | *                                                                                               | 22602     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 22603     4
    39       | */                                                                                              | 22604     4
    40       |                                                                                                 | 22605     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 22606     4
    42       |#define _SYS_CDEFS_H_                                                                            | 22607     4
    43       |                                                                                                 | 22608     4
    44       |#if defined(__cplusplus)                                                                         | 22609     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 22610     4
    46       |#define __END_DECLS     }                                                                        | 22611     4
    47       |#else                                                                                            | 22612     4
    48       |#define __BEGIN_DECLS                                                                            | 22613     4
    49       |#define __END_DECLS                                                                              | 22614     4
    50       |#endif                                                                                           | 22615     4
    51       |                                                                                                 | 22616     4
    52       |/*                                                                                               | 22617     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   435


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    53       | * This code has been put in place to help reduce the addition of                                | 22618     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 22619     4
    55       | * having a compiler-agnostic source tree.                                                       | 22620     4
    56       | */                                                                                              | 22621     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 22622     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 22623     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 22624     4
    60       |                                                                                                 | 22625     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 22626     4
    62       |                                                                                                 | 22627     4
    63       |                                                                                                 | 22628     4
    64       |/*                                                                                               | 22629     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 22630     4
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 22631     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 22632     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 22633     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 22634     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 22635     4
    71       | * this only works with ANSI C.                                                                  | 22636     4
    72       | *                                                                                               | 22637     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 22638     4
    74       | * first.  It is only available with ANSI C.                                                     | 22639     4
    75       | */                                                                                              | 22640     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 22641     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 22642     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 22643     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 22644     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 22645     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 22646     4
    82       |                                                                                                 | 22647     4
    83       |#define __const         const           /* define reserved names to standard */                  | 22648     4
    84       |#define __signed        signed                                                                   | 22649     4
    85       |#define __volatile      volatile                                                                 | 22650     4
    86       |#if defined(__cplusplus)                                                                         | 22651     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 22652     4
    88       |#else                                                                                            | 22653     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 22654     4
    90       |#endif /* !__cplusplus */                                                                        | 22655     4
    91       |                                                                                                 | 22656     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 22657     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 22658     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 22659     4
    95       |#define __STRING(x)     "x"                                                                      | 22660     4
    96       |                                                                                                 | 22661     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 22662     4
    98       |#define __inline                                                                                 | 22663     4
    99       |#define __signed                                                                                 | 22664     4
   100       |#define __volatile                                                                               | 22665     4
   101       |/*                                                                                               | 22666     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 22667     4
   103       | * deleted from the program and old programs will want them left alone.                          | 22668     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 22669     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 22670     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   436


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   106       | */                                                                                              | 22671     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 22672     4
   108       |#define const                           /* delete ANSI C keywords */                             | 22673     4
   109       |#define inline                                                                                   | 22674     4
   110       |#define signed                                                                                   | 22675     4
   111       |#define volatile                                                                                 | 22676     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 22677     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 22678     4
   114       |                                                                                                 | 22679     4
   115       |/*                                                                                               | 22680     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 22681     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 22682     4
   118       | */                                                                                              | 22683     4
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 22684     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 22685     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 22686     4
   122       |#define __unused                                                                                 | 22687     4
   123       |#define __aligned(x)                                                                             | 22688     4
   124       |#define __section(x)                                                                             | 22689     4
   125       |#define __nonnull(x)                                                                             | 22690     4
   126       |#define __used                                                                                   | 22691     4
   127       |                                                                                                 | 22692     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 22693     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 22694     4
   130       |                                                                                                 | 22695     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 22696     4
   132       |#define __func__  NULL                                                                           | 22697     4
   133       |#endif                                                                                           | 22698     4
   134       |                                                                                                 | 22699     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 22700     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 22701     4
   137       |#endif                                                                                           | 22702     4
   138       |                                                                                                 | 22703     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 22704     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 22705     4
   141       | **/                                                                                             | 22706     4
   142       |#ifndef __cplusplus                                                                              | 22707     4
   143       |#define __restrict __restrict__                                                                  | 22708     4
   144       |#else                                                                                            | 22709     4
   145       |/* Systems/C++ does not */                                                                       | 22710     4
   146       |#define __restrict                                                                               | 22711     4
   147       |#endif                                                                                           | 22712     4
   148       |                                                                                                 | 22713     4
   149       |/*                                                                                               | 22714     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 22715     4
   151       | */                                                                                              | 22716     4
   152       |#define __predict_true(exp)     (exp)                                                            | 22717     4
   153       |#define __predict_false(exp)    (exp)                                                            | 22718     4
   154       |                                                                                                 | 22719     4
   155       |                                                                                                 | 22720     4
   156       |/*                                                                                               | 22721     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 22722     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 22723     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   437


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   159       | *                                                                                               | 22724     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 22725     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 22726     4
   162       | */                                                                                              | 22727     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 22728     4
   164       |#undef __offsetof                                                                                | 22729     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 22730     4
   166       |#endif                                                                                           | 22731     4
   167       |                                                                                                 | 22732     4
   168       |/*                                                                                               | 22733     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 22734     4
   170       | * or scanf-like arguments.                                                                      | 22735     4
   171       | */                                                                                              | 22736     4
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 22737     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 22738     4
   174       |#define __format_arg(fmtarg)                                                                     | 22739     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 22740     4
   176       |                                                                                                 | 22741     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 22742     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 22743     4
   179       |                                                                                                 | 22744     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 22745     4
   181       |#define __weak_reference(sym,alias)                                                              | 22746     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 22747     4
   183       |#define __warn_references(sym,msg)                                                               | 22748     4
   184       |                                                                                                 | 22749     4
   185       | /* This places the string into the resulting object.  It should */                              | 22750     4
   186       | /* probably become #pragma ident */                                                             | 22751     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 22752     4
   188       |                                                                                                 | 22753     4
   189       |#ifndef __RCSID                                                                                  | 22754     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 22755     4
   191       |#endif                                                                                           | 22756     4
   192       |                                                                                                 | 22757     4
   193       |/*                                                                                               | 22758     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 22759     4
   195       | * Usage:                                                                                        | 22760     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 22761     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 22762     4
   198       | */                                                                                              | 22763     4
   199       |#ifndef __SYSCID                                                                                 | 22764     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 22765     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 22766     4
   202       |#else                                                                                            | 22767     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 22768     4
   204       |#endif                                                                                           | 22769     4
   205       |#endif                                                                                           | 22770     4
   206       |                                                                                                 | 22771     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 22772     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 22773     4
   209       |#endif                                                                                           | 22774     4
   210       |                                                                                                 | 22775     4
   211       |#ifndef __COPYRIGHT                                                                              | 22776     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   438


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 22777     4
   213       |#endif                                                                                           | 22778     4
   214       |                                                                                                 | 22779     4
   215       |                                                                                                 | 22780     4
   216       |#ifndef __DECONST                                                                                | 22781     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 22782     4
   218       |#endif                                                                                           | 22783     4
   219       |                                                                                                 | 22784     4
   220       |#ifndef __DEVOLATILE                                                                             | 22785     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 22786     4
   222       |#endif                                                                                           | 22787     4
   223       |                                                                                                 | 22788     4
   224       |#ifndef __DEQUALIFY                                                                              | 22789     4
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 22790     4
   226       |#endif                                                                                           | 22791     4
   227       |                                                                                                 | 22792     4
   228       |                                                                                                 | 22793     4
   229       |/*-                                                                                              | 22794     4
   230       | * The following definitions are an extension of the behavior originally                         | 22795     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 22796     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 22797     4
   233       | * header file is included.                                                                      | 22798     4
   234       | *                                                                                               | 22799     4
   235       | * Here's a quick run-down of the versions:                                                      | 22800     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 22801     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 22802     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 22803     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 22804     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 22805     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 22806     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 22807     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 22808     4
   244       | *                                                                                               | 22809     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 22810     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 22811     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 22812     4
   248       | *                                                                                               | 22813     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 22814     4
   250       | */                                                                                              | 22815     4
   251       |                                                                                                 | 22816     4
   252       |/*                                                                                               | 22817     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 22818     4
   254       | * available. Also make them available when requested so.                                        | 22819     4
   255       | */                                                                                              | 22820     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 22821     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 22822     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 22823     4
   259       |#define __DF_VISIBLE    1                                                                        | 22824     4
   260       |#else                                                                                            | 22825     4
   261       |#define __DF_VISIBLE    0                                                                        | 22826     4
   262       |#endif                                                                                           | 22827     4
   263       |                                                                                                 | 22828     4
   264       |/*-                                                                                              | 22829     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   439


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   265       | * The following definitions are an extension of the behavior originally                         | 22830     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 22831     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 22832     4
   268       | * header file is included.                                                                      | 22833     4
   269       | *                                                                                               | 22834     4
   270       | * Here's a quick run-down of the versions:                                                      | 22835     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 22836     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 22837     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 22838     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 22839     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 22840     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 22841     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 22842     4
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 22843     4
   279       | *                                                                                               | 22844     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 22845     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 22846     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 22847     4
   283       | *                                                                                               | 22848     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 22849     4
   285       | */                                                                                              | 22850     4
   286       |                                                                                                 | 22851     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 22852     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 22853     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 22854     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 22855     4
   291       |#endif                                                                                           | 22856     4
   292       |                                                                                                 | 22857     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 22858     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 22859     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 22860     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 22861     4
   297       |#endif                                                                                           | 22862     4
   298       |                                                                                                 | 22863     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 22864     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 22865     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 22866     4
   302       |#define __XSI_VISIBLE           700                                                              | 22867     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 22868     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 22869     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 22870     4
   306       |#define __XSI_VISIBLE           600                                                              | 22871     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 22872     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 22873     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 22874     4
   310       |#define __XSI_VISIBLE           500                                                              | 22875     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 22876     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 22877     4
   313       |#endif                                                                                           | 22878     4
   314       |#endif                                                                                           | 22879     4
   315       |                                                                                                 | 22880     4
   316       |/*                                                                                               | 22881     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 22882     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   440


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   318       | * important.                                                                                    | 22883     4
   319       | */                                                                                              | 22884     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 22885     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 22886     4
   322       |#endif                                                                                           | 22887     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 22888     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 22889     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 22890     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 22891     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 22892     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 22893     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 22894     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 22895     4
   331       |#define __POSIX_VISIBLE         199506                                                           | 22896     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 22897     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 22898     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 22899     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 22900     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 22901     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 22902     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 22903     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 22904     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 22905     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 22906     4
   342       |#else                                                                                            | 22907     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 22908     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 22909     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 22910     4
   346       |#else                                                                                            | 22911     4
   347       |/*-                                                                                              | 22912     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 22913     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 22914     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 22915     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 22916     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 22917     4
   353       | * a test program to print out the values.                                                       | 22918     4
   354       | *                                                                                               | 22919     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 22920     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 22921     4
   357       | * environment (and in fact we will never get here).                                             | 22922     4
   358       | */                                                                                              | 22923     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 22924     4
   360       |#define __POSIX_VISIBLE         0                                                                | 22925     4
   361       |#define __XSI_VISIBLE           0                                                                | 22926     4
   362       |#define __BSD_VISIBLE           0                                                                | 22927     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 22928     4
   364       |#define __EXT1_VISIBLE          0                                                                | 22929     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 22930     4
   366       |#define __POSIX_VISIBLE         0                                                                | 22931     4
   367       |#define __XSI_VISIBLE           0                                                                | 22932     4
   368       |#define __BSD_VISIBLE           0                                                                | 22933     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 22934     4
   370       |#define __EXT1_VISIBLE          0                                                                | 22935     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   441


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 22936     4
   372       |#define __POSIX_VISIBLE         0                                                                | 22937     4
   373       |#define __XSI_VISIBLE           0                                                                | 22938     4
   374       |#define __BSD_VISIBLE           0                                                                | 22939     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 22940     4
   376       |#define __EXT1_VISIBLE          0                                                                | 22941     4
   377       |#else                           /* Default environment: show everything. */                      | 22942     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 22943     4
   379       |#define __XSI_VISIBLE           700                                                              | 22944     4
   380       |#define __BSD_VISIBLE           1                                                                | 22945     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 22946     4
   382       |#define __EXT1_VISIBLE          1                                                                | 22947     4
   383       |#endif                                                                                           | 22948     4
   384       |#endif                                                                                           | 22949     4
   385       |                                                                                                 | 22950     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 22951     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 22952     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 22953     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 22954     4
   390       |#define __EXT1_VISIBLE          1                                                                | 22955     4
   391       |#else                                                                                            | 22956     4
   392       |#define __EXT1_VISIBLE          0                                                                | 22957     4
   393       |#endif                                                                                           | 22958     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 22959     4
   395       |                                                                                                 | 22960     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 22961     4
   397       |#define __NO_TLS 1                                                                               | 22962     4
   398       |#endif                                                                                           | 22963     4
   399       |                                                                                                 | 22964     4
   400       |                                                                                                 | 22965     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 22966     4
   402       |#define __FBSDID(x)                                                                              | 22967     4
   403       |                                                                                                 | 22968     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 22969     4
   405       |#pragma pack(reset)                                                                              | 22970     4
    49       |#include <sys/_types.h>                                                                          | 22971    44
     1       |/* release 2.25.00 */                                                                            | 22972     6
     2       |#pragma pack()                                                                                   | 22973     6
     3       |/*-                                                                                              | 22974     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 22975     6
     5       | * All rights reserved.                                                                          | 22976     6
     6       | *                                                                                               | 22977     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 22978     6
     8       | * modification, are permitted provided that the following conditions                            | 22979     6
     9       | * are met:                                                                                      | 22980     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 22981     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 22982     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 22983     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 22984     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 22985     6
    15       | *                                                                                               | 22986     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 22987     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 22988     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   442


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 22989     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 22990     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 22991     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 22992     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 22993     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 22994     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 22995     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 22996     6
    26       | * SUCH DAMAGE.                                                                                  | 22997     6
    27       | *                                                                                               | 22998     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 22999     6
    29       | */                                                                                              | 23000     6
    30       |                                                                                                 | 23001     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 23002     6
    32       |#define _SYS__TYPES_H_                                                                           | 23003     6
    33       |                                                                                                 | 23004     6
    34       |#include <sys/cdefs.h>                                                                           | 23005     6
    35       |#include <machine/_types.h>                                                                      | 23006     6
    36       |                                                                                                 | 23007     6
    37       |/*                                                                                               | 23008     6
    38       | * Standard type definitions.                                                                    | 23009     6
    39       | */                                                                                              | 23010     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 23011     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 23012     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 23013     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 23014     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 23015     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 23016     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 23017     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 23018     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 23019     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 23020     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 23021     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 23022     6
    52       |typedef int             __nl_item;                                                               | 23023     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 23024     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 23025     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 23026     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 23027     6
    57       |                                        /* signed, because of legacy code */                     | 23028     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 23029     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 23030     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 23031     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 23032     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 23033     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 23034     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 23035     6
    65       |                                                                                                 | 23036     6
    66       |/*                                                                                               | 23037     6
    67       | * Unusual type definitions.                                                                     | 23038     6
    68       | */                                                                                              | 23039     6
    69       |/*                                                                                               | 23040     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 23041     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   443


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 23042     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 23043     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 23044     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 23045     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 23046     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 23047     6
    77       | *                                                                                               | 23048     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 23049     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 23050     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 23051     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 23052     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 23053     6
    83       | */                                                                                              | 23054     6
    84       |#ifdef __cplusplus                                                                               | 23055     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 23056     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 23057     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 23058     6
    88       |#else                                                                                            | 23059     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 23060     6
    90       |#endif                                                                                           | 23061     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 23062     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 23063     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 23064     6
    94       |                                                                                                 | 23065     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 23066     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 23067     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 23068     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 23069     6
    99       |#endif                                                                                           | 23070     6
   100       |                                                                                                 | 23071     6
   101       |#if !defined(__cplusplus)                                                                        | 23072     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 23073     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 23074     6
   104       |#endif                                                                                           | 23075     6
   105       |                                                                                                 | 23076     6
   106       |                                                                                                 | 23077     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 23078     6
   108       |                                                                                                 | 23079     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 23080     6
   110       |                                                                                                 | 23081     6
   111       |/*                                                                                               | 23082     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 23083     6
   113       | * stream conversions.                                                                           | 23084     6
   114       | */                                                                                              | 23085     6
   115       |typedef union {                                                                                  | 23086     6
   116       |        char            __mbstate8[128];                                                         | 23087     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 23088     6
   118       |} __mbstate_t;                                                                                   | 23089     6
   119       |                                                                                                 | 23090     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 23091     6
   121       |#pragma pack(reset)                                                                              | 23092     6
    50       |                                                                                                 | 23093    44
    51       |#ifndef _MODE_T_DECLARED                                                                         | 23094    44
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   444


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    52       |typedef __mode_t        mode_t;                                                                  | 23095    44
    53       |#define _MODE_T_DECLARED                                                                         | 23096    44
    54       |#endif                                                                                           | 23097    44
    55       |                                                                                                 | 23098    44
    56       |#ifndef _OFF_T_DECLARED                                                                          | 23099    44
    57       |typedef __off_t         off_t;                                                                   | 23100    44
    58       |#define _OFF_T_DECLARED                                                                          | 23101    44
    59       |#endif                                                                                           | 23102    44
    60       |                                                                                                 | 23103    44
    61       |#ifndef _PID_T_DECLARED                                                                          | 23104    44
    62       |typedef __pid_t         pid_t;                                                                   | 23105    44
    63       |#define _PID_T_DECLARED                                                                          | 23106    44
    64       |#endif                                                                                           | 23107    44
    65       |                                                                                                 | 23108    44
    66       |/*                                                                                               | 23109    44
    67       | * File status flags: these are used by open(2), fcntl(2).                                       | 23110    44
    68       | * They are also used (indirectly) in the kernel file structure f_flags,                         | 23111    44
    69       | * which is a superset of the open/fcntl flags.  Open flags and f_flags                          | 23112    44
    70       | * are inter-convertible using OFLAGS(fflags) and FFLAGS(oflags).                                | 23113    44
    71       | * Open/fcntl flags begin with O_; kernel-internal flags begin with F.                           | 23114    44
    72       | */                                                                                              | 23115    44
    73       |/* open-only flags */                                                                            | 23116    44
    74       |#define O_RDONLY        0x0000          /* open for reading only */                              | 23117    44
    75       |#define O_WRONLY        0x0001          /* open for writing only */                              | 23118    44
    76       |#define O_RDWR          0x0002          /* open for reading and writing */                       | 23119    44
    77       |#define O_ACCMODE       0x0003          /* mask for above modes */                               | 23120    44
    78       |                                                                                                 | 23121    44
    79       |/*                                                                                               | 23122    44
    80       | * Kernel encoding of open mode; separate read and write bits that are                           | 23123    44
    81       | * independently testable: 1 greater than the above.                                             | 23124    44
    82       | *                                                                                               | 23125    44
    83       | * XXX                                                                                           | 23126    44
    84       | * FREAD and FWRITE are excluded from the #ifdef _KERNEL so that TIOCFLUSH,                      | 23127    44
    85       | * which was documented to use FREAD/FWRITE, continues to work.                                  | 23128    44
    86       | */                                                                                              | 23129    44
    87       |#if __BSD_VISIBLE                                                                                | 23130    44
    88       |#define FREAD           0x0001                                                                   | 23131    44
    89       |#define FWRITE          0x0002                                                                   | 23132    44
    90       |#endif                                                                                           | 23133    44
    91       |#define O_NONBLOCK      0x0004          /* no delay */                                           | 23134    44
    92       |#define O_APPEND        0x0008          /* set append mode */                                    | 23135    44
    93       |#if __BSD_VISIBLE                                                                                | 23136    44
    94       |#define O_SHLOCK        0x0010          /* open with shared file lock */                         | 23137    44
    95       |#define O_EXLOCK        0x0020          /* open with exclusive file lock */                      | 23138    44
    96       |#define O_ASYNC         0x0040          /* signal pgrp when data ready */                        | 23139    44
    97       |#define O_FSYNC         0x0080          /* synchronous writes */                                 | 23140    44
    98       |#endif                                                                                           | 23141    44
    99       |#define O_SYNC          0x0080          /* POSIX synonym for O_FSYNC */                          | 23142    44
   100       |#if __BSD_VISIBLE                                                                                | 23143    44
   101       |#define O_NOFOLLOW      0x0100          /* don't follow symlinks */                              | 23144    44
   102       |#endif                                                                                           | 23145    44
   103       |#define O_CREAT         0x0200          /* create if nonexistent */                              | 23146    44
   104       |#define O_TRUNC         0x0400          /* truncate to zero length */                            | 23147    44
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   445


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   105       |#define O_EXCL          0x0800          /* error if already exists */                            | 23148    44
   106       |#ifdef _KERNEL                                                                                   | 23149    44
   107       |#define FHASLOCK        0x4000          /* descriptor holds advisory lock */                     | 23150    44
   108       |#endif                                                                                           | 23151    44
   109       |#define _O_TEXT         0x1000          /* I/O is in text mode */                                | 23152    44
   110       |#define _O_BINARY       0x2000          /* I/O is in binary mode */                              | 23153    44
   111       |#define _O_ATTR         0x4000          /* open() has extra attributes */                        | 23154    44
   112       |                                                                                                 | 23155    44
   112       +                                                                                                 + 23155    44
   113       |                                                                                                 | 23156    44
   114       |/* Defined by POSIX 1003.1; BSD default, but must be distinct from O_RDONLY. */                  | 23157    44
   115       |#define O_NOCTTY        0x8000          /* don't assign controlling terminal */                  | 23158    44
   116       |                                                                                                 | 23159    44
   117       |#define _O_RECIO        0x10000         /* Record I/O */                                         | 23160    44
   118       |                                                                                                 | 23161    44
   119       |#if __BSD_VISIBLE                                                                                | 23162    44
   120       |/* Attempt to bypass buffer cache */                                                             | 23163    44
   120       +                                                                                                 + 23163    44
   121       |#define O_DIRECT        0x00020000                                                               | 23164    44
   122       |#endif                                                                                           | 23165    44
   123       |                                                                                                 | 23166    44
   124       | /* IBM HFS flags */                                                                             | 23167    44
   125       |#define O_ASYNCSIG      0x00040000                                                               | 23168    44
   126       |#define O_LARGEFILE     0x00080000                                                               | 23169    44
   127       |                                                                                                 | 23170    44
   128       |/* Defined by POSIX 1003.1-2008 */                                                               | 23171    44
   129       |#define O_TTY_INIT      0x00100000      /* Restore default termios attributes */                 | 23172    44
   130       |                                                                                                 | 23173    44
   131       |#define O_CLOEXEC       0x00200000                                                               | 23174    44
   132       |                                                                                                 | 23175    44
   133       |/*                                                                                               | 23176    44
   134       | * XXX missing O_DSYNC, O_RSYNC.                                                                 | 23177    44
   135       | */                                                                                              | 23178    44
   136       |                                                                                                 | 23179    44
   137       |#ifdef _KERNEL                                                                                   | 23180    44
   138       |/* convert from open() flags to/from fflags; convert O_RD/WR to FREAD/FWRITE */                  | 23181    44
   139       |#define FFLAGS(oflags)  ((oflags) + 1)                                                           | 23182    44
   140       |#define OFLAGS(fflags)  ((fflags) - 1)                                                           | 23183    44
   141       |                                                                                                 | 23184    44
   142       |/* bits to save after open */                                                                    | 23185    44
   143       |#define FMASK           (FREAD|FWRITE|FAPPEND|FASYNC|FFSYNC|FNONBLOCK|O_DIRECT)                  | 23186    44
   144       |/* bits settable by fcntl(F_SETFL, ...) */                                                       | 23187    44
   145       |#define FCNTLFLAGS      (FAPPEND|FASYNC|FFSYNC|FNONBLOCK|FPOSIXSHM|O_DIRECT)                     | 23188    44
   146       |#endif                                                                                           | 23189    44
   147       |                                                                                                 | 23190    44
   148       |/*                                                                                               | 23191    44
   149       | * The O_* flags used to have only F* names, which were used in the kernel                       | 23192    44
   150       | * and by fcntl.  We retain the F* names for the kernel f_flag field                             | 23193    44
   151       | * and for backward compatibility for fcntl.  These flags are deprecated.                        | 23194    44
   152       | */                                                                                              | 23195    44
   153       |#if __BSD_VISIBLE                                                                                | 23196    44
   154       |#define FAPPEND         O_APPEND        /* kernel/compat */                                      | 23197    44
   155       |#define FASYNC          O_ASYNC         /* kernel/compat */                                      | 23198    44
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   446


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   156       |#define FFSYNC          O_FSYNC         /* kernel */                                             | 23199    44
   157       |#define FNONBLOCK       O_NONBLOCK      /* kernel */                                             | 23200    44
   158       |#define FNDELAY         O_NONBLOCK      /* compat */                                             | 23201    44
   159       |#define O_NDELAY        O_NONBLOCK      /* compat */                                             | 23202    44
   160       |#endif                                                                                           | 23203    44
   161       |                                                                                                 | 23204    44
   161       +                                                                                                 + 23204    44
   162       |/*                                                                                               | 23205    44
   163       | * We are out of bits in f_flag (which is a short).  However,                                    | 23206    44
   164       | * the flag bits not set in FMASK are only meaningful in the                                     | 23207    44
   165       | * initial open syscall.  Those bits can thus be given a                                         | 23208    44
   166       | * different meaning for fcntl(2).                                                               | 23209    44
   167       | */                                                                                              | 23210    44
   168       |#if __BSD_VISIBLE                                                                                | 23211    44
   169       |                                                                                                 | 23212    44
   169       +                                                                                                 + 23212    44
   170       |/*                                                                                               | 23213    44
   171       | * Set by shm_open(3) to get automatic MAP_ASYNC behavior                                        | 23214    44
   172       | * for POSIX shared memory objects (which are otherwise                                          | 23215    44
   173       | * implemented as plain files).                                                                  | 23216    44
   174       | */                                                                                              | 23217    44
   175       |#define FPOSIXSHM       O_NOFOLLOW                                                               | 23218    44
   176       |#endif                                                                                           | 23219    44
   177       |                                                                                                 | 23220    44
   178       |/*                                                                                               | 23221    44
   179       | * Constants used for fcntl(2)                                                                   | 23222    44
   180       | */                                                                                              | 23223    44
   181       |                                                                                                 | 23224    44
   182       |/* command values */                                                                             | 23225    44
   183       |#define F_DUPFD         0               /* duplicate file descriptor */                          | 23226    44
   184       |#define F_GETFD         1               /* get file descriptor flags */                          | 23227    44
   185       |#define F_SETFD         2               /* set file descriptor flags */                          | 23228    44
   186       |#define F_GETFL         3               /* get file status flags */                              | 23229    44
   187       |#define F_SETFL         4               /* set file status flags */                              | 23230    44
   188       |#if __BSD_VISIBLE || __XSI_VISIBLE || __POSIX_VISIBLE >= 200112                                  | 23231    44
   189       |#define F_GETOWN        5               /* get SIGIO/SIGURG proc/pgrp */                         | 23232    44
   190       |#define F_SETOWN        6               /* set SIGIO/SIGURG proc/pgrp */                         | 23233    44
   191       |#endif                                                                                           | 23234    44
   192       |#define F_GETLK         7               /* get record locking information */                     | 23235    44
   193       |#define F_SETLK         8               /* set record locking information */                     | 23236    44
   194       |#define F_SETLKW        9               /* F_SETLK; wait if blocked */                           | 23237    44
   195       |                                                                                                 | 23238    44
   195       +                                                                                                 + 23238    44
   196       |#ifdef _OPEN_SYS_FILE_EXT                                                                        | 23239    44
   197       | /* Support IBM's file tag'ing controls */                                                       | 23240    44
   198       |#define F_SETTAG        12                                                                       | 23241    44
   199       |#define F_CONTROL_CVT   13                                                                       | 23242    44
   200       | /* The tag structure */                                                                         | 23243    44
   201       |struct f_cnvrt {                                                                                 | 23244    44
   202       |   int   cvtcmd; /* Sub-command */                                                               | 23245    44
   203       |#define SETCVTOFF       0       /* Set off */                                                    | 23246    44
   204       |#define SETCVTON        1       /* Set On Unconditionally */                                     | 23247    44
   205       |#define SETAUTOCVTON    2       /* Set ON if _BPX_AUTOCVT or */                                  | 23248    44
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   447


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   206       |                                /*  AUTOCVT(YES) in BPX parms */                                 | 23249    44
   207       |#define QUERYCVT        3       /* Query current mode */                                         | 23250    44
   208       |#define SETCVTALL       4       /* Unicode Services enabled */                                   | 23251    44
   209       |#define SETCVTAUTOALL   5       /* Unicode Services enabled if AUTOCVT(ALL) */                   | 23252    44
   210       |   short pccsid; /* Program CCSID */                                                             | 23253    44
   211       |   short fccsid; /* File CCSID */                                                                | 23254    44
   212       |};                                                                                               | 23255    44
   213       |#endif                                                                                           | 23256    44
   214       |                                                                                                 | 23257    44
   215       |/* file descriptor flags (F_GETFD, F_SETFD) */                                                   | 23258    44
   216       |#define FD_CLOEXEC      1               /* close-on-exec flag */                                 | 23259    44
   217       |#define FD_CLOFORK      2               /* close-on-fork flag */                                 | 23260    44
   218       |#define FD_LEAVEONCLOSE 0x40000000      /* leave-on-close flag */                                | 23261    44
   219       |#define FD_FREEONCLOSE  0x20000000      /* free-on-close flag  */                                | 23262    44
   220       |                                                                                                 | 23263    44
   221       |/* record locking flags (F_GETLK, F_SETLK, F_SETLKW) */                                          | 23264    44
   222       |#define F_RDLCK         1               /* shared or read lock */                                | 23265    44
   223       |#define F_UNLCK         2               /* unlock */                                             | 23266    44
   224       |#define F_WRLCK         3               /* exclusive or write lock */                            | 23267    44
   225       |#ifdef _KERNEL                                                                                   | 23268    44
   226       |#define F_WAIT          0x010           /* Wait until lock is granted */                         | 23269    44
   227       |#define F_FLOCK         0x020           /* Use flock(2) semantics for lock */                    | 23270    44
   228       |#define F_POSIX         0x040           /* Use POSIX semantics for lock */                       | 23271    44
   229       |#endif                                                                                           | 23272    44
   230       |                                                                                                 | 23273    44
   231       |/*                                                                                               | 23274    44
   232       | * Advisory file segment locking data type -                                                     | 23275    44
   233       | * information passed to system by user                                                          | 23276    44
   234       | */                                                                                              | 23277    44
   235       |struct flock {                                                                                   | 23278    44
   236       |        off_t   l_start;        /* starting offset */                                            | 23279    44
   237       |        off_t   l_len;          /* len = 0 means until end of file */                            | 23280    44
   238       |        pid_t   l_pid;          /* lock owner */                                                 | 23281    44
   239       |        short   l_type;         /* lock type: read/write, etc. */                                | 23282    44
   240       |        short   l_whence;       /* type of l_start */                                            | 23283    44
   241       |};                                                                                               | 23284    44
   242       |                                                                                                 | 23285    44
   243       |                                                                                                 | 23286    44
   244       |#if __BSD_VISIBLE                                                                                | 23287    44
   245       |/* lock operations for flock(2) */                                                               | 23288    44
   245       +                                                                                                 + 23288    44
   246       |#define LOCK_SH         0x01            /* shared file lock */                                   | 23289    44
   247       |#define LOCK_EX         0x02            /* exclusive file lock */                                | 23290    44
   248       |#define LOCK_NB         0x04            /* don't block when locking */                           | 23291    44
   249       |#define LOCK_UN         0x08            /* unlock file */                                        | 23292    44
   250       |#endif                                                                                           | 23293    44
   251       |                                                                                                 | 23294    44
   252       |/*                                                                                               | 23295    44
   253       | * XXX missing posix_fadvise() and posix_fallocate(), and POSIX_FADV_* macros.                   | 23296    44
   254       | */                                                                                              | 23297    44
   255       |                                                                                                 | 23298    44
   256       |#ifndef _KERNEL                                                                                  | 23299    44
   257       |__BEGIN_DECLS                                                                                    | 23300    44
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   448


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   257       +                                                                                                 + 23300    44
   258       |int     open(const char *, int, ...);                                                            | 23301    44
   259       |int     creat(const char *, mode_t);                                                             | 23302    44
   260       |int     fcntl(int, int, ...);                                                                    | 23303    44
   261       |#pragma map (_setmode, "@@SETMOD")                                                               | 23304    44
   262       |int     _setmode(int, int);                                                                      | 23305    44
   263       |#if __BSD_VISIBLE                                                                                | 23306    44
   264       |int     flock(int, int);                                                                         | 23307    44
   264       +int     flock(int, int);                                                                         + 23307    44
   265       |#endif                                                                                           | 23308    44
   266       |__END_DECLS                                                                                      | 23309    44
   266       +                                                                                                 + 23309    44
   267       |#endif                                                                                           | 23310    44
   268       |                                                                                                 | 23311    44
   269       |#endif /* !_SYS_FCNTL_H_ */                                                                      | 23312    44
   270       |#pragma pack(reset)                                                                              | 23313    44
    49       |#include <errno.h>                                                                               | 23314    39
     1       |/* release 2.25.00 */                                                                            | 23315    23
     2       |#pragma pack()                                                                                   | 23316    23
     3       |/*                                                                                               | 23317    23
     4       | * Copyright (c) 1982, 1986, 1989, 1993                                                          | 23318    23
     5       | *      The Regents of the University of California.  All rights reserved.                       | 23319    23
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 23320    23
     7       | * All or some portions of this file are derived from material licensed                          | 23321    23
     8       | * to the University of California by American Telephone and Telegraph                           | 23322    23
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 23323    23
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 23324    23
    11       | *                                                                                               | 23325    23
    12       | * Redistribution and use in source and binary forms, with or without                            | 23326    23
    13       | * modification, are permitted provided that the following conditions                            | 23327    23
    14       | * are met:                                                                                      | 23328    23
    15       | * 1. Redistributions of source code must retain the above copyright                             | 23329    23
    16       | *    notice, this list of conditions and the following disclaimer.                              | 23330    23
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 23331    23
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 23332    23
    19       | *    documentation and/or other materials provided with the distribution.                       | 23333    23
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 23334    23
    21       | *    may be used to endorse or promote products derived from this software                      | 23335    23
    22       | *    without specific prior written permission.                                                 | 23336    23
    23       | *                                                                                               | 23337    23
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 23338    23
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 23339    23
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 23340    23
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 23341    23
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 23342    23
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 23343    23
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 23344    23
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 23345    23
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 23346    23
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 23347    23
    34       | * SUCH DAMAGE.                                                                                  | 23348    23
    35       | *                                                                                               | 23349    23
    36       | *      @(#)errno.h     8.5 (Berkeley) 1/21/94                                                   | 23350    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   449


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    37       | */                                                                                              | 23351    23
    38       |                                                                                                 | 23352    23
    39       |#ifndef _SYS_ERRNO_H_                                                                            | 23353    23
    40       |#define _SYS_ERRNO_H_                                                                            | 23354    23
    41       |                                                                                                 | 23355    23
    42       |#ifndef _KERNEL                                                                                  | 23356    23
    43       |#include <sys/cdefs.h>                                                                           | 23357    23
    44       |                                                                                                 | 23358    23
    45       |#pragma map(__error, "##ERROR")                                                                  | 23359    23
    46       |                                                                                                 | 23360    23
    47       |__BEGIN_DECLS                                                                                    | 23361    23
    48       |int *   __error __P((void));                                                                     | 23362    23
    49       |__END_DECLS                                                                                      | 23363    23
    50       |#define errno           (* __error())                                                            | 23364    23
    51       |#endif                                                                                           | 23365    23
    52       |                                                                                                 | 23366    23
    53       |#define EPERM           1               /* Operation not permitted */                            | 23367    23
    54       |#define ENOENT          2               /* No such file or directory */                          | 23368    23
    55       |#define ESRCH           3               /* No such process */                                    | 23369    23
    56       |#define EINTR           4               /* Interrupted system call */                            | 23370    23
    57       |#define EIO             5               /* Input/output error */                                 | 23371    23
    58       |#define ENXIO           6               /* Device not configured */                              | 23372    23
    59       |#define E2BIG           7               /* Argument list too long */                             | 23373    23
    60       |#define ENOEXEC         8               /* Exec format error */                                  | 23374    23
    61       |#define EBADF           9               /* Bad file descriptor */                                | 23375    23
    62       |#define ECHILD          10              /* No child processes */                                 | 23376    23
    63       |#define EDEADLK         11              /* Resource deadlock avoided */                          | 23377    23
    64       |                                        /* 11 was EAGAIN */                                      | 23378    23
    65       |#define ENOMEM          12              /* Cannot allocate memory */                             | 23379    23
    66       |#define EACCES          13              /* Permission denied */                                  | 23380    23
    67       |#define EFAULT          14              /* Bad address */                                        | 23381    23
    68       |#ifndef _POSIX_SOURCE                                                                            | 23382    23
    69       |#define ENOTBLK         15              /* Block device required */                              | 23383    23
    70       |#endif                                                                                           | 23384    23
    71       |#define EBUSY           16              /* Device busy */                                        | 23385    23
    72       |#define EEXIST          17              /* File exists */                                        | 23386    23
    73       |#define EXDEV           18              /* Cross-device link */                                  | 23387    23
    74       |#define ENODEV          19              /* Operation not supported by device */                  | 23388    23
    75       |#define ENOTDIR         20              /* Not a directory */                                    | 23389    23
    76       |#define EISDIR          21              /* Is a directory */                                     | 23390    23
    77       |#define EINVAL          22              /* Invalid argument */                                   | 23391    23
    78       |#define ENFILE          23              /* Too many open files in system */                      | 23392    23
    79       |#define EMFILE          24              /* Too many open files */                                | 23393    23
    80       |#define ENOTTY          25              /* Inappropriate ioctl for device */                     | 23394    23
    81       |#ifndef _POSIX_SOURCE                                                                            | 23395    23
    82       |#define ETXTBSY         26              /* Text file busy */                                     | 23396    23
    83       |#endif                                                                                           | 23397    23
    84       |#define EFBIG           27              /* File too large */                                     | 23398    23
    85       |#define ENOSPC          28              /* No space left on device */                            | 23399    23
    86       |#define ESPIPE          29              /* Illegal seek */                                       | 23400    23
    87       |#define EROFS           30              /* Read-only filesystem */                               | 23401    23
    88       |#define EMLINK          31              /* Too many links */                                     | 23402    23
    89       |#define EPIPE           32              /* Broken pipe */                                        | 23403    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   450


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    90       |                                                                                                 | 23404    23
    91       |/* math software */                                                                              | 23405    23
    92       |#define EDOM            33              /* Numerical argument out of domain */                   | 23406    23
    93       |#define ERANGE          34              /* Result too large */                                   | 23407    23
    94       |                                                                                                 | 23408    23
    95       |/* non-blocking and interrupt i/o */                                                             | 23409    23
    96       |#define EAGAIN          35              /* Resource temporarily unavailable */                   | 23410    23
    97       |#ifndef _POSIX_SOURCE                                                                            | 23411    23
    98       |#define EWOULDBLOCK     EAGAIN          /* Operation would block */                              | 23412    23
    99       |#define EINPROGRESS     36              /* Operation now in progress */                          | 23413    23
   100       |#define EALREADY        37              /* Operation already in progress */                      | 23414    23
   101       |                                                                                                 | 23415    23
   102       |/* ipc/network software -- argument errors */                                                    | 23416    23
   103       |#define ENOTSOCK        38              /* Socket operation on non-socket */                     | 23417    23
   104       |#define EDESTADDRREQ    39              /* Destination address required */                       | 23418    23
   105       |#define EMSGSIZE        40              /* Message too long */                                   | 23419    23
   106       |#define EPROTOTYPE      41              /* Protocol wrong type for socket */                     | 23420    23
   107       |#define ENOPROTOOPT     42              /* Protocol not available */                             | 23421    23
   108       |#define EPROTONOSUPPORT 43              /* Protocol not supported */                             | 23422    23
   109       |#define ESOCKTNOSUPPORT 44              /* Socket type not supported */                          | 23423    23
   110       |#define EOPNOTSUPP      45              /* Operation not supported */                            | 23424    23
   111       |#define ENOTSUP         EOPNOTSUPP      /* Operation not supported */                            | 23425    23
   112       |#define EPFNOSUPPORT    46              /* Protocol family not supported */                      | 23426    23
   113       |#define EAFNOSUPPORT    47              /* Address family not supported by protocol family */    | 23427    23
   114       |#define EADDRINUSE      48              /* Address already in use */                             | 23428    23
   115       |#define EADDRNOTAVAIL   49              /* Can't assign requested address */                     | 23429    23
   116       |                                                                                                 | 23430    23
   117       |/* ipc/network software -- operational errors */                                                 | 23431    23
   118       |#define ENETDOWN        50              /* Network is down */                                    | 23432    23
   119       |#define ENETUNREACH     51              /* Network is unreachable */                             | 23433    23
   120       |#define ENETRESET       52              /* Network dropped connection on reset */                | 23434    23
   121       |#define ECONNABORTED    53              /* Software caused connection abort */                   | 23435    23
   122       |#define ECONNRESET      54              /* Connection reset by peer */                           | 23436    23
   123       |#define ENOBUFS         55              /* No buffer space available */                          | 23437    23
   124       |#define EISCONN         56              /* Socket is already connected */                        | 23438    23
   125       |#define ENOTCONN        57              /* Socket is not connected */                            | 23439    23
   126       |#define ESHUTDOWN       58              /* Can't send after socket shutdown */                   | 23440    23
   127       |#define ETOOMANYREFS    59              /* Too many references: can't splice */                  | 23441    23
   128       |#define ETIMEDOUT       60              /* Operation timed out */                                | 23442    23
   129       |#define ECONNREFUSED    61              /* Connection refused */                                 | 23443    23
   130       |                                                                                                 | 23444    23
   131       |#define ELOOP           62              /* Too many levels of symbolic links */                  | 23445    23
   132       |#endif /* _POSIX_SOURCE */                                                                       | 23446    23
   133       |#define ENAMETOOLONG    63              /* File name too long */                                 | 23447    23
   134       |                                                                                                 | 23448    23
   135       |/* should be rearranged */                                                                       | 23449    23
   136       |#ifndef _POSIX_SOURCE                                                                            | 23450    23
   137       |#define EHOSTDOWN       64              /* Host is down */                                       | 23451    23
   138       |#define EHOSTUNREACH    65              /* No route to host */                                   | 23452    23
   139       |#endif /* _POSIX_SOURCE */                                                                       | 23453    23
   140       |#define ENOTEMPTY       66              /* Directory not empty */                                | 23454    23
   141       |                                                                                                 | 23455    23
   142       |/* quotas & mush */                                                                              | 23456    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   451


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   143       |#ifndef _POSIX_SOURCE                                                                            | 23457    23
   144       |#define EPROCLIM        67              /* Too many processes */                                 | 23458    23
   145       |#define EUSERS          68              /* Too many users */                                     | 23459    23
   146       |#define EDQUOT          69              /* Disc quota exceeded */                                | 23460    23
   147       |                                                                                                 | 23461    23
   148       |/* Network File System */                                                                        | 23462    23
   149       |#define ESTALE          70              /* Stale NFS file handle */                              | 23463    23
   150       |#define EREMOTE         71              /* Too many levels of remote in path */                  | 23464    23
   151       |#define EBADRPC         72              /* RPC struct is bad */                                  | 23465    23
   152       |#define ERPCMISMATCH    73              /* RPC version wrong */                                  | 23466    23
   153       |#define EPROGUNAVAIL    74              /* RPC prog. not avail */                                | 23467    23
   154       |#define EPROGMISMATCH   75              /* Program version wrong */                              | 23468    23
   155       |#define EPROCUNAVAIL    76              /* Bad procedure for program */                          | 23469    23
   156       |#endif /* _POSIX_SOURCE */                                                                       | 23470    23
   157       |                                                                                                 | 23471    23
   158       |#define ENOLCK          77              /* No locks available */                                 | 23472    23
   159       |#define ENOSYS          78              /* Function not implemented */                           | 23473    23
   160       |                                                                                                 | 23474    23
   161       |#ifndef _POSIX_SOURCE                                                                            | 23475    23
   162       |#define EFTYPE          79              /* Inappropriate file type or format */                  | 23476    23
   163       |#define EAUTH           80              /* Authentication error */                               | 23477    23
   164       |#define ENEEDAUTH       81              /* Need authenticator */                                 | 23478    23
   165       |#define EIDRM           82              /* Identifier removed */                                 | 23479    23
   166       |#define ENOMSG          83              /* No message of desired type */                         | 23480    23
   167       |#define EOVERFLOW       84              /* Value too large to be stored in data type */          | 23481    23
   168       |#define ECANCELED       85              /* Operation canceled */                                 | 23482    23
   169       |#define EILSEQ          86              /* Illegal byte sequence */                              | 23483    23
   170       |#define ENOATTR         87              /* Attribute not found */                                | 23484    23
   171       |                                                                                                 | 23485    23
   172       |#define EDOOFUS         88              /* Programming error */                                  | 23486    23
   173       |#endif /* _POSIX_SOURCE */                                                                       | 23487    23
   174       |                                                                                                 | 23488    23
   175       |#define EBADMSG         89              /* Bad message */                                        | 23489    23
   176       |#define EMULTIHOP       90              /* Multihop attempted */                                 | 23490    23
   177       |#define ENOLINK         91              /* Link has been severed */                              | 23491    23
   178       |#define EPROTO          92              /* Protocol error */                                     | 23492    23
   179       |                                                                                                 | 23493    23
   180       |#ifndef _POSIX_SOURCE                                                                            | 23494    23
   181       |#define ENOTCAPABLE     93              /* Capabilities insufficient */                          | 23495    23
   182       |#define ECAPMODE        94              /* Not permitted in capability mode */                   | 23496    23
   183       |#define ENOTRECOVERABLE 95              /* State not recoverable */                              | 23497    23
   184       |#define EOWNERDEAD      96              /* Previous owner died */                                | 23498    23
   185       |                                                                                                 | 23499    23
   186       |#define EMVSERR         97              /* An MVS environmental or internal */                   | 23500    23
   187       |                                        /* error */                                              | 23501    23
   188       |#endif /* _POSIX_SOURCE */                                                                       | 23502    23
   189       |                                                                                                 | 23503    23
   190       |#ifndef _POSIX_SOURCE                                                                            | 23504    23
   191       |#define ELAST           97              /* Must be equal largest errno */                        | 23505    23
   192       |#endif /* _POSIX_SOURCE */                                                                       | 23506    23
   193       |                                                                                                 | 23507    23
   194       |#ifdef _KERNEL                                                                                   | 23508    23
   195       |/* pseudo-errors returned inside kernel to modify return to process */                           | 23509    23
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   452


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   196       |#define ERESTART        (-1)            /* restart syscall */                                    | 23510    23
   197       |#define EJUSTRETURN     (-2)            /* don't modify regs, just return */                     | 23511    23
   198       |#define ENOIOCTL        (-3)            /* ioctl not handled by this layer */                    | 23512    23
   199       |#endif                                                                                           | 23513    23
   200       |                                                                                                 | 23514    23
   201       |#endif                                                                                           | 23515    23
   202       |#pragma pack(reset)                                                                              | 23516    23
    50       |#include <string.h>                                                                              | 23517    39
     1       |/* release 2.25.00 */                                                                            | 23518    21
     2       |#pragma pack()                                                                                   | 23519    21
     3       |/*-                                                                                              | 23520    21
     4       | * Copyright (c) 1990, 1993                                                                      | 23521    21
     5       | *      The Regents of the University of California.  All rights reserved.                       | 23522    21
     6       | *                                                                                               | 23523    21
     7       | * Redistribution and use in source and binary forms, with or without                            | 23524    21
     8       | * modification, are permitted provided that the following conditions                            | 23525    21
     9       | * are met:                                                                                      | 23526    21
    10       | * 1. Redistributions of source code must retain the above copyright                             | 23527    21
    11       | *    notice, this list of conditions and the following disclaimer.                              | 23528    21
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 23529    21
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 23530    21
    14       | *    documentation and/or other materials provided with the distribution.                       | 23531    21
    15       | * 3. All advertising materials mentioning features or use of this software                      | 23532    21
    16       | *    must display the following acknowledgement:                                                | 23533    21
    17       | *      This product includes software developed by the University of                            | 23534    21
    18       | *      California, Berkeley and its contributors.                                               | 23535    21
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 23536    21
    20       | *    may be used to endorse or promote products derived from this software                      | 23537    21
    21       | *    without specific prior written permission.                                                 | 23538    21
    22       | *                                                                                               | 23539    21
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 23540    21
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 23541    21
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 23542    21
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 23543    21
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 23544    21
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 23545    21
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 23546    21
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 23547    21
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 23548    21
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 23549    21
    33       | * SUCH DAMAGE.                                                                                  | 23550    21
    34       | *                                                                                               | 23551    21
    35       | *      @(#)string.h    8.1 (Berkeley) 6/2/93                                                    | 23552    21
    36       | */                                                                                              | 23553    21
    37       |                                                                                                 | 23554    21
    38       |#ifndef _STRING_H_                                                                               | 23555    21
    39       |#define _STRING_H_                                                                               | 23556    21
    40       |                                                                                                 | 23557    21
    41       |#include <sys/cdefs.h>                                                                           | 23558    21
    42       |#include <sys/_null.h>                                                                           | 23559    21
    43       |#include <sys/_types.h>                                                                          | 23560    21
    44       |                                                                                                 | 23561    21
    45       |/*                                                                                               | 23562    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   453


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    46       | * Prototype functions which were historically defined in <string.h>, but                        | 23563    21
    47       | * are required by POSIX to be prototyped in <strings.h>.                                        | 23564    21
    48       | */                                                                                              | 23565    21
    49       |#if __BSD_VISIBLE                                                                                | 23566    21
    50       |#include <strings.h>                                                                             | 23567    21
    51       |#endif                                                                                           | 23568    21
    52       |                                                                                                 | 23569    21
    53       |#ifndef _SIZE_T_DECLARED                                                                         | 23570    21
    54       |typedef __size_t        size_t;                                                                  | 23571    21
    55       |#define _SIZE_T_DECLARED                                                                         | 23572    21
    56       |#endif                                                                                           | 23573    21
    57       |                                                                                                 | 23574    21
    58       |                                                                                                 | 23575    21
    59       |__BEGIN_DECLS                                                                                    | 23576    21
    60       |                                                                                                 | 23577    21
    61       |/* Compiler-defined builtin's */                                                                 | 23578    21
    62       |                                                                                                 | 23579    21
    63       |#ifdef __cplusplus                                                                               | 23580    21
    64       |extern "builtin" {                                                                               | 23581    21
    65       |#else                                                                                            | 23582    21
    66       |#pragma linkage(__memcpy, builtin)                                                               | 23583    21
    67       |#pragma linkage(__memset, builtin)                                                               | 23584    21
    68       |#pragma linkage(__memcmp, builtin)                                                               | 23585    21
    69       |#pragma linkage(__memchr, builtin)                                                               | 23586    21
    70       |#pragma linkage(__strcpy, builtin)                                                               | 23587    21
    71       |#pragma linkage(__strlen, builtin)                                                               | 23588    21
    72       |#pragma linkage(__strcmp, builtin)                                                               | 23589    21
    73       |#pragma linkage(__strcat, builtin)                                                               | 23590    21
    74       |#pragma linkage(__strchr, builtin)                                                               | 23591    21
    75       |#pragma linkage(__strrchr, builtin)                                                              | 23592    21
    76       |#pragma linkage(__strncat, builtin)                                                              | 23593    21
    77       |#pragma linkage(__strncpy, builtin)                                                              | 23594    21
    78       |#pragma linkage(__strncmp, builtin)                                                              | 23595    21
    79       |#pragma linkage(__strpbrk, builtin)                                                              | 23596    21
    80       |#endif                                                                                           | 23597    21
    81       |                                                                                                 | 23598    21
    82       |void    *__memcpy (void * __restrict, const void * __restrict, size_t);                          | 23599    21
    83       |void    *__memset (void *, int, size_t);                                                         | 23600    21
    84       |int      __memcmp (const void *, const void *, size_t);                                          | 23601    21
    85       |void    *__memchr (const void *, int, size_t);                                                   | 23602    21
    86       |                                                                                                 | 23603    21
    87       |char    *__strcpy (char * __restrict, const char * __restrict);                                  | 23604    21
    88       |size_t   __strlen (const char *);                                                                | 23605    21
    89       |int      __strcmp (const char *, const char *);                                                  | 23606    21
    90       |char    *__strcat (char * __restrict, const char * __restrict);                                  | 23607    21
    91       |char    *__strchr (const char *, int);                                                           | 23608    21
    92       |char    *__strrchr (const char *, int);                                                          | 23609    21
    93       |                                                                                                 | 23610    21
    94       |char    *__strncat (char * __restrict, const char * __restrict, size_t);                         | 23611    21
    95       |int      __strncmp (const char *, const char *, size_t);                                         | 23612    21
    96       |char    *__strncpy (char * __restrict, const char * __restrict, size_t);                         | 23613    21
    97       |char    *__strpbrk (const char *, const char *);                                                 | 23614    21
    98       |#ifdef __cplusplus                                                                               | 23615    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   454


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    99       |}                                                                                                | 23616    21
   100       |#endif                                                                                           | 23617    21
   101       |                                                                                                 | 23618    21
   102       |/* Define the functions that have builtin equivalents, so the */                                 | 23619    21
   103       |/*  builtins will be used when appropriate. */                                                   | 23620    21
   104       |#ifdef __cplusplus                                                                               | 23621    21
   105       |  /* For C++ - define inline functions which invoke the appropriate */                           | 23622    21
   106       |  /*  compiler builtin functions */                                                              | 23623    21
   107       |inline void * memchr (const void *x, int y, size_t z)                                            | 23624    21
   108       |       { return __memchr(x, y, z); }                                                             | 23625    21
   109       |inline void * memcpy (void *x, const void *y, size_t z)                                          | 23626    21
   110       |       { return __memcpy(x, y, z); }                                                             | 23627    21
   111       |inline int    memcmp (const void *x, const void *y, size_t z)                                    | 23628    21
   112       |       { return __memcmp(x, y, z); }                                                             | 23629    21
   113       |inline void * memset (void *x, int y, size_t z)                                                  | 23630    21
   114       |       { return __memset(x, y, z); }                                                             | 23631    21
   115       |                                                                                                 | 23632    21
   116       |inline size_t strlen (const char *x)                                                             | 23633    21
   117       |       { return __strlen(x);       }                                                             | 23634    21
   118       |inline char * strcat (char *x, const char *y)                                                    | 23635    21
   119       |       { return __strcat(x, y);    }                                                             | 23636    21
   120       |inline char * strcpy (char *x, const char *y)                                                    | 23637    21
   121       |       { return __strcpy(x, y);    }                                                             | 23638    21
   122       |inline int    strcmp (const char *x, const char *y)                                              | 23639    21
   123       |       { return __strcmp(x, y);    }                                                             | 23640    21
   124       |inline char * strchr (const char *s, int c)                                                      | 23641    21
   125       |       { return __strchr(s, c);    }                                                             | 23642    21
   126       |inline char * strrchr(const char *s, int c)                                                      | 23643    21
   127       |       { return __strrchr(s, c);   }                                                             | 23644    21
   128       |inline char * strpbrk (const char *s, const char *charset)                                       | 23645    21
   129       |       { return __strpbrk(s, charset); }                                                         | 23646    21
   130       |                                                                                                 | 23647    21
   131       |inline char * strncat (char *s, const char *x, size_t z)                                         | 23648    21
   132       |       { return __strncat(s, x, z); }                                                            | 23649    21
   133       |inline int strncmp (const char *x, const char *y, size_t z)                                      | 23650    21
   134       |       { return __strncmp(x, y, z); }                                                            | 23651    21
   135       |inline char * strncpy (char *s, const char *x, size_t z)                                         | 23652    21
   136       |       { return __strncpy(s, x, z); }                                                            | 23653    21
   137       |#else                                                                                            | 23654    21
   138       |                                                                                                 | 23655    21
   139       |void    *memchr(const void *, int, size_t) __pure;                                               | 23656    21
   140       |int      memcmp(const void *, const void *, size_t) __pure;                                      | 23657    21
   141       |void    *memcpy(void * __restrict, const void * __restrict, size_t);                             | 23658    21
   142       |void    *memset(void *, int, size_t);                                                            | 23659    21
   143       |char    *strcat(char * __restrict, const char * __restrict);                                     | 23660    21
   144       |char    *strchr(const char *, int) __pure;                                                       | 23661    21
   145       |int      strcmp(const char *, const char *) __pure;                                              | 23662    21
   146       |char    *strcpy(char * __restrict, const char * __restrict);                                     | 23663    21
   147       |size_t   strlen(const char *) __pure;                                                            | 23664    21
   148       |char    *strncat(char * __restrict, const char * __restrict, size_t);                            | 23665    21
   149       |int      strncmp(const char *, const char *, size_t) __pure;                                     | 23666    21
   150       |char    *strncpy(char * __restrict, const char * __restrict, size_t);                            | 23667    21
   151       |char    *strpbrk(const char *, const char *) __pure;                                             | 23668    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   455


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   152       |char    *strrchr(const char *, int) __pure;                                                      | 23669    21
   153       |                                                                                                 | 23670    21
   154       |                                                                                                 | 23671    21
   155       | /* For `C' - use #define macros to handle this */                                               | 23672    21
   156       |#define memset(a,b,c) __memset(a,b,c)                                                            | 23673    21
   157       |#define memcpy(a,b,c) __memcpy(a,b,c)                                                            | 23674    21
   158       |#define memchr(a,b,c) __memchr(a,b,c)                                                            | 23675    21
   159       |#define memcmp(a,b,c) __memcmp(a,b,c)                                                            | 23676    21
   160       |                                                                                                 | 23677    21
   161       |#define strlen(a)     __strlen(a)                                                                | 23678    21
   162       |#define strcat(a,b)   __strcat(a,b)                                                              | 23679    21
   163       |#define strcpy(a,b)   __strcpy(a,b)                                                              | 23680    21
   164       |#define strcmp(a,b)   __strcmp(a,b)                                                              | 23681    21
   165       |#define strchr(a,b)   __strchr(a,b)                                                              | 23682    21
   166       |#define strrchr(a,b)  __strrchr(a,b)                                                             | 23683    21
   167       |#define strpbrk(a,b)  __strpbrk(a,b)                                                             | 23684    21
   168       |                                                                                                 | 23685    21
   169       |#define strncat(a,b,c) __strncat(a,b,c)                                                          | 23686    21
   170       |#define strncmp(a,b,c) __strncmp(a,b,c)                                                          | 23687    21
   171       |#define strncpy(a,b,c) __strncpy(a,b,c)                                                          | 23688    21
   172       |#endif                                                                                           | 23689    21
   173       |                                                                                                 | 23690    21
   174       |#if __BSD_VISIBLE                                                                                | 23691    21
   175       |#pragma map(strchrnul,"STRCHR@L")                                                                | 23692    21
   176       |char    *strchrnul(const char*, int) __pure;                                                     | 23693    21
   177       |#endif                                                                                           | 23694    21
   178       |                                                                                                 | 23695    21
   179       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 23696    21
   180       |void    *memccpy(void * __restrict, const void * __restrict, int, size_t);                       | 23697    21
   181       |#endif                                                                                           | 23698    21
   182       |#if __BSD_VISIBLE                                                                                | 23699    21
   183       |void    *memmem(const void *, size_t, const void *, size_t);                                     | 23700    21
   184       |#endif                                                                                           | 23701    21
   185       |void    *memmove(void *, const void *, size_t);                                                  | 23702    21
   186       |#if __BSD_VISIBLE                                                                                | 23703    21
   187       |char    *stpcpy(char *, const char *);                                                           | 23704    21
   188       |#pragma map(strcasestr, "STRC@STR")                                                              | 23705    21
   189       |char    *strcasestr(const char *, const char *) __pure;                                          | 23706    21
   190       |#endif                                                                                           | 23707    21
   191       |int      strcoll(const char *, const char *);                                                    | 23708    21
   192       |size_t   strcspn(const char *, const char *) __pure;                                             | 23709    21
   193       |#if __POSIX_VISIBLE >= 200112 || __XSI_VISIBLE                                                   | 23710    21
   194       |char    *strdup(const char *);                                                                   | 23711    21
   195       |#endif                                                                                           | 23712    21
   196       |char    *strerror(int);                                                                          | 23713    21
   197       |#if __POSIX_VISIBLE >= 200112                                                                    | 23714    21
   198       |#pragma map(strerror_r, "STRERR@R")                                                              | 23715    21
   199       |int      strerror_r(int, char *, size_t);                                                        | 23716    21
   200       |#endif                                                                                           | 23717    21
   201       |#if __BSD_VISIBLE                                                                                | 23718    21
   202       |size_t   strlcat(char *, const char *, size_t);                                                  | 23719    21
   203       |size_t   strlcpy(char *, const char *, size_t);                                                  | 23720    21
   204       |#endif                                                                                           | 23721    21
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   456


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   205       |#if __BSD_VISIBLE                                                                                | 23722    21
   206       |void     strmode(int, char *);                                                                   | 23723    21
   207       |#endif                                                                                           | 23724    21
   208       |#if __BSD_VISIBLE                                                                                | 23725    21
   209       |char    *strnstr(const char *, const char *, size_t) __pure;                                     | 23726    21
   210       |#endif                                                                                           | 23727    21
   211       |                                                                                                 | 23728    21
   212       |#if __BSD_VISIBLE                                                                                | 23729    21
   213       |char    *strsep(char **, const char *);                                                          | 23730    21
   214       |char    *strsignal(int);                                                                         | 23731    21
   215       |#endif                                                                                           | 23732    21
   216       |size_t   strspn(const char *, const char *) __pure;                                              | 23733    21
   217       |char    *strstr(const char *, const char *) __pure;                                              | 23734    21
   218       |char    *strtok(char * __restrict, const char * __restrict);                                     | 23735    21
   219       |#if __POSIX_VISIBLE >= 199506 || __XSI_VISIBLE >= 500                                            | 23736    21
   220       |char    *strtok_r(char *, const char *, char **);                                                | 23737    21
   221       |#pragma map(strtok_r,"STRTOK@R")                                                                 | 23738    21
   222       |#endif                                                                                           | 23739    21
   223       |size_t   strxfrm(char * __restrict, const char * __restrict, size_t);                            | 23740    21
   224       |                                                                                                 | 23741    21
   225       |                                                                                                 | 23742    21
   226       |                                                                                                 | 23743    21
   227       |#if __BSD_VISIBLE                                                                                | 23744    21
   228       |                                                                                                 | 23745    21
   229       |#ifndef _SWAB_DECLARED                                                                           | 23746    21
   230       |#define _SWAB_DECLARED                                                                           | 23747    21
   231       |                                                                                                 | 23748    21
   232       |#ifndef _SSIZE_T_DECLARED                                                                        | 23749    21
   233       |typedef __ssize_t       ssize_t;                                                                 | 23750    21
   234       |#define _SSIZE_T_DECLARED                                                                        | 23751    21
   235       |#endif /* _SIZE_T_DECLARED */                                                                    | 23752    21
   236       |                                                                                                 | 23753    21
   237       |void     swab(const void * __restrict, void * __restrict, ssize_t);                              | 23754    21
   238       |#endif /* _SWAB_DECLARED */                                                                      | 23755    21
   239       |                                                                                                 | 23756    21
   240       |#endif /* __BSD_VISIBLE */                                                                       | 23757    21
   241       |                                                                                                 | 23758    21
   242       |__END_DECLS                                                                                      | 23759    21
   243       |                                                                                                 | 23760    21
   244       |#endif /* _STRING_H_ */                                                                          | 23761    21
   245       |#pragma pack(reset)                                                                              | 23762    21
    51       |                                                                                                 | 23763    39
    52       |/**                                                                                              | 23764    39
    53       |* Types                                                                                          | 23765    39
    54       |*/                                                                                               | 23766    39
    55       |                                                                                                 | 23767    39
    56       |                                                                                                 | 23768    39
    57       |/**                                                                                              | 23769    39
    58       | * Annotations, attributes, optimizers                                                           | 23770    39
    59       | */                                                                                              | 23771    39
    60       |#ifndef likely                                                                                   | 23772    39
    61       |#define likely(x)   __builtin_expect((x),1)                                                      | 23773    39
    62       |#endif                                                                                           | 23774    39
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   457


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    63       |#ifndef unlikely                                                                                 | 23775    39
    64       |#define unlikely(x) __builtin_expect((x),0)                                                      | 23776    39
    65       |#endif                                                                                           | 23777    39
    66       |                                                                                                 | 23778    39
    67       |#define RD_UNUSED   __attribute__((unused))                                                      | 23779    39
    68       |#define RD_INLINE   inline                                                                       | 23780    39
    69       |#define RD_WARN_UNUSED_RESULT __attribute__((warn_unused_result))                                | 23781    39
    70       |#define RD_NORETURN __attribute__((noreturn))                                                    | 23782    39
    71       |#define RD_IS_CONSTANT(p)  __builtin_constant_p((p))                                             | 23783    39
    72       |#ifdef SYSC     /* ASG_LK01: SYSTEM-C */                                                         | 23784    39
    73       |#define RD_TLS  /* ASG_LK01: SYSTEM-C */                                                         | 23785    39
    74       |#else           /* ASG_LK01: SYSTEM-C */                                                         | 23786    39
    75       |#define RD_TLS      __thread                                                                     | 23787    39
    76       |#endif          /* ASG_LK01: SYSTEM-C */                                                         | 23788    39
    77       |                                                                                                 | 23789    39
    78       |/**                                                                                              | 23790    39
    79       |* Allocation                                                                                     | 23791    39
    80       |*/                                                                                               | 23792    39
    81       |#if !defined(__FreeBSD__) && !defined(__OpenBSD__)                                               | 23793    39
    82       |#if !defined(SYSC) /* ASG_LK01: SYSTEM-C */                                                      | 23794    39
    83       |/* alloca(3) is in stdlib on FreeBSD */                                                          | 23795    39
    84       |#include <alloca.h>                                                                              | 23796    39
    85       |#endif             /* ASG_LK01: SYSTEM-C */                                                      | 23797    39
    86       |#endif                                                                                           | 23798    39
    87       |                                                                                                 | 23799    39
    88       |#define rd_alloca(N)  alloca(N)                                                                  | 23800    39
    89       |                                                                                                 | 23801    39
    90       |                                                                                                 | 23802    39
    91       |/**                                                                                              | 23803    39
    92       |* Strings, formatting, printf, ..                                                                | 23804    39
    93       |*/                                                                                               | 23805    39
    94       |                                                                                                 | 23806    39
    95       |/* size_t and ssize_t format strings */                                                          | 23807    39
    96       |#define PRIusz  "zu"                                                                             | 23808    39
    97       |#define PRIdsz  "zd"                                                                             | 23809    39
    98       |                                                                                                 | 23810    39
    99       |#ifndef RD_FORMAT                                                                                | 23811    39
   100       |#define RD_FORMAT(...) __attribute__((format (__VA_ARGS__)))                                     | 23812    39
   101       |#endif                                                                                           | 23813    39
   102       |#define rd_snprintf(...)  snprintf(__VA_ARGS__)                                                  | 23814    39
   103       |#define rd_vsnprintf(...) vsnprintf(__VA_ARGS__)                                                 | 23815    39
   104       |                                                                                                 | 23816    39
   105       |#define rd_strcasecmp(A,B) strcasecmp(A,B)                                                       | 23817    39
   106       |#define rd_strncasecmp(A,B,N) strncasecmp(A,B,N)                                                 | 23818    39
   107       |                                                                                                 | 23819    39
   108       |                                                                                                 | 23820    39
   109       |#ifdef HAVE_STRCASESTR                                                                           | 23821    39
   110       |#define rd_strcasestr(HAYSTACK,NEEDLE) strcasestr(HAYSTACK,NEEDLE)                               | 23822    39
   111       |#else                                                                                            | 23823    39
   112       |#define rd_strcasestr(HAYSTACK,NEEDLE) _rd_strcasestr(HAYSTACK,NEEDLE)                           | 23824    39
   113       |#endif                                                                                           | 23825    39
   114       |                                                                                                 | 23826    39
   115       |                                                                                                 | 23827    39
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   458


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   116       |/**                                                                                              | 23828    39
   117       | * Errors                                                                                        | 23829    39
   118       | */                                                                                              | 23830    39
   119       |                                                                                                 | 23831    39
   120       |                                                                                                 | 23832    39
   121       |#define rd_set_errno(err) (errno = (err))                                                        | 23833    39
   122       |                                                                                                 | 23834    39
   123       |#if HAVE_STRERROR_R                                                                              | 23835    39
   124       |static RD_INLINE RD_UNUSED const char *rd_strerror(int err) {                                    | 23836    39
   125       |        static RD_TLS char ret[128];                                                             | 23837    39
   126       |                                                                                                 | 23838    39
   127       |#if defined(__GLIBC__) && defined(_GNU_SOURCE)                                                   | 23839    39
   128       |        return strerror_r(err, ret, sizeof(ret));                                                | 23840    39
   129       |#else /* XSI version */                                                                          | 23841    39
   130       |        int r;                                                                                   | 23842    39
   131       |        /* The r assignment is to catch the case where                                           | 23843    39
   132       |         * _GNU_SOURCE is not defined but the GNU version is                                     | 23844    39
   133       |         * picked up anyway. */                                                                  | 23845    39
   134       |        r = strerror_r(err, ret, sizeof(ret));                                                   | 23846    39
   135       |        if (unlikely(r))                                                                         | 23847    39
   136       |                rd_snprintf(ret, sizeof(ret),                                                    | 23848    39
   137       |                            "strerror_r(%d) failed (ret %d)", err, r);                           | 23849    39
   138       |        return ret;                                                                              | 23850    39
   139       |#endif                                                                                           | 23851    39
   140       |}                                                                                                | 23852    39
   141       |#else                                                                                            | 23853    39
   142       |#define rd_strerror(err) strerror(err)                                                           | 23854    39
   143       |#endif                                                                                           | 23855    39
   144       |                                                                                                 | 23856    39
   144       +                                                                                                 + 23856    39
   145       |                                                                                                 | 23857    39
   146       |/**                                                                                              | 23858    39
   147       | * Atomics                                                                                       | 23859    39
   148       | */                                                                                              | 23860    39
   149       |#include "rdatomic.h"                                                                            | 23861    39
     1       |/*                                                                                               | 23862    45
     2       | * librdkafka - The Apache Kafka C/C++ library                                                   | 23863    45
     3       | *                                                                                               | 23864    45
     4       | * Copyright (c) 2014-2016 Magnus Edenhill                                                       | 23865    45
     5       | * All rights reserved.                                                                          | 23866    45
     6       | *                                                                                               | 23867    45
     7       | * Redistribution and use in source and binary forms, with or without                            | 23868    45
     8       | * modification, are permitted provided that the following conditions are met:                   | 23869    45
     9       | *                                                                                               | 23870    45
    10       | * 1. Redistributions of source code must retain the above copyright notice,                     | 23871    45
    11       | *    this list of conditions and the following disclaimer.                                      | 23872    45
    12       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  | 23873    45
    13       | *    this list of conditions and the following disclaimer in the documentation                  | 23874    45
    14       | *    and/or other materials provided with the distribution.                                     | 23875    45
    15       | *                                                                                               | 23876    45
    16       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   | 23877    45
    17       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     | 23878    45
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 23879    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   459


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    19       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      | 23880    45
    20       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           | 23881    45
    21       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 23882    45
    22       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 23883    45
    23       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 23884    45
    24       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 23885    45
    25       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 23886    45
    26       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 23887    45
    27       | */                                                                                              | 23888    45
    28       |                                                                                                 | 23889    45
    29       | /*                                                                                              | 23890    45
    30       |  * ASG_LK: MODIFICATION HISTORY                                                                 | 23891    45
    31       |  * ==================================================================================           | 23892    45
    32       |  * TAG          |   DATE (DD/MM/YYYY)    |   JIRA    |   DESCRIPTION                            | 23893    45
    33       |  * ==================================================================================           | 23894    45
    34       |  * ASG_LK01         22/04/2021              -           SYSTEM-C                                | 23895    45
    35       |  * ==================================================================================           | 23896    45
    36       | */                                                                                              | 23897    45
    37       |                                                                                                 | 23898    45
    38       |#ifndef _RDATOMIC_H_                                                                             | 23899    45
    39       |#define _RDATOMIC_H_                                                                             | 23900    45
    40       |                                                                                                 | 23901    45
    41       |#include "tinycthread.h"                                                                         | 23902    45
    42       |                                                                                                 | 23903    45
    43       |#ifdef SYSC                             /* ASG_LK01: SYSTEM-C */                                 | 23904    45
    44       |#include <pthread.h>                                                                             | 23905    45
    45       |#endif                                  /* ASG_LK01: SYSTEM-C */                                 | 23906    45
    46       |                                                                                                 | 23907    45
    47       |typedef struct {                                                                                 | 23908    45
    48       |        int32_t val;                                                                             | 23909    45
    49       |#ifdef SYSC                             /* ASG_LK01: SYSTEM-C */                                 | 23910    45
    50       |        mtx_t lock;                     /* ASG_LK01: SYSTEM-C */                                 | 23911    45
    51       |#else                                   /* ASG_LK01: SYSTEM-C */                                 | 23912    45
    52       |#if !defined(_WIN32) && !HAVE_ATOMICS_32                                                         | 23913    45
    53       |        mtx_t lock;                                                                              | 23914    45
    54       |#endif                                                                                           | 23915    45
    55       |#endif                                  /* ASG_LK01: SYSTEM-C */                                 | 23916    45
    56       |} rd_atomic32_t;                                                                                 | 23917    45
    57       |                                                                                                 | 23918    45
    58       |typedef struct {                                                                                 | 23919    45
    59       |        int64_t val;                                                                             | 23920    45
    60       |#ifdef SYSC                             /* ASG_LK01: SYSTEM-C */                                 | 23921    45
    61       |        mtx_t lock;                     /* ASG_LK01: SYSTEM-C */                                 | 23922    45
    62       |#else                                   /* ASG_LK01: SYSTEM-C */                                 | 23923    45
    63       |#if !defined(_WIN32) && !HAVE_ATOMICS_64                                                         | 23924    45
    64       |        mtx_t lock;                                                                              | 23925    45
    65       |#endif                                                                                           | 23926    45
    66       |#endif                                  /* ASG_LK01: SYSTEM-C */                                 | 23927    45
    67       |} rd_atomic64_t;                                                                                 | 23928    45
    68       |                                                                                                 | 23929    45
    69       |                                                                                                 | 23930    45
    70       |static RD_INLINE RD_UNUSED void rd_atomic32_init (rd_atomic32_t *ra, int32_t v) {                | 23931    45
    70       +static inline __attribute__((unused)) void rd_atomic32_init (rd_atomic32_t *ra, int32_t v) {     + 23931    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   460


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    71       |        ra->val = v;                                                                             | 23932    45
    72       |#ifdef SYSC                             /* ASG_LK01: SYSTEM-C */                                 | 23933    45
    73       |        pthread_mutex_init(&ra->lock, mtx_plain);               /* ASG_LK01: SYSTEM-C */         | 23934    45
    73       +                pthread_mutex_init(&ra->lock, 0);                                                + 23934    45
    74       |#else                                   /* ASG_LK01: SYSTEM-C */                                 | 23935    45
    75       |#if !defined(_WIN32) && !HAVE_ATOMICS_32                                                         | 23936    45
    76       |        mtx_init(&ra->lock, mtx_plain);                                                          | 23937    45
    77       |#endif                                                                                           | 23938    45
    78       |#endif                                  /* ASG_LK01: SYSTEM-C */                                 | 23939    45
    79       |}                                                                                                | 23940    45
    80       |                                                                                                 | 23941    45
    81       |                                                                                                 | 23942    45
    82       |static RD_INLINE int32_t RD_UNUSED rd_atomic32_add (rd_atomic32_t *ra, int32_t v) {              | 23943    45
    82       +static inline int32_t __attribute__((unused)) rd_atomic32_add (rd_atomic32_t *ra, int32_t v) {   + 23943    45
    83       |#ifdef SYSC                                                             /* ASG_LK01: SYSTEM-C */ | 23944    45
    84       |        int32_t r;                                                      /* ASG_LK01: SYSTEM-C */ | 23945    45
    85       |        pthread_mutex_lock(&ra->lock);          /* ASG_LK01: SYSTEM-C */                         | 23946    45
    86       |        ra->val += v;                                           /* ASG_LK01: SYSTEM-C */         | 23947    45
    87       |        r = ra->val;                                            /* ASG_LK01: SYSTEM-C */         | 23948    45
    88       |        pthread_mutex_unlock(&ra->lock);        /* ASG_LK01: SYSTEM-C */                         | 23949    45
    89       |        return r;                                                       /* ASG_LK01: SYSTEM-C */ | 23950    45
    90       |#endif                                                                  /* ASG_LK01: SYSTEM-C */ | 23951    45
    91       |#ifdef __SUNPRO_C                                                                                | 23952    45
    92       |        return atomic_add_32_nv(&ra->val, v);                                                    | 23953    45
    93       |#elif defined(_WIN32)                                                                            | 23954    45
    94       |        return InterlockedAdd((LONG *)&ra->val, v);                                              | 23955    45
    95       |#elif !HAVE_ATOMICS_32                                                                           | 23956    45
    96       |        int32_t r;                                                                               | 23957    45
    97       |        mtx_lock(&ra->lock);                                                                     | 23958    45
    98       |        ra->val += v;                                                                            | 23959    45
    99       |        r = ra->val;                                                                             | 23960    45
   100       |        mtx_unlock(&ra->lock);                                                                   | 23961    45
   101       |        return r;                                                                                | 23962    45
   102       |#else                                                                                            | 23963    45
   103       |        return ATOMIC_OP32(add, fetch, &ra->val, v);                                             | 23964    45
   103       +                return __atomic_add_fetch(&ra->val, v, 6);                                       + 23964    45
   104       |#endif                                                                                           | 23965    45
   105       |}                                                                                                | 23966    45
   106       |                                                                                                 | 23967    45
   107       |static RD_INLINE int32_t RD_UNUSED rd_atomic32_sub(rd_atomic32_t *ra, int32_t v) {               | 23968    45
   107       +static inline int32_t __attribute__((unused)) rd_atomic32_sub(rd_atomic32_t *ra, int32_t v) {    + 23968    45
   108       |#ifdef SYSC                                                        /* ASG_LK01: SYSTEM-C */      | 23969    45
   109       |        int32_t r;                                                 /* ASG_LK01: SYSTEM-C */      | 23970    45
   110       |        pthread_mutex_lock(&ra->lock);     /* ASG_LK01: SYSTEM-C */                              | 23971    45
   111       |        ra->val -= v;                                      /* ASG_LK01: SYSTEM-C */              | 23972    45
   112       |        r = ra->val;                                       /* ASG_LK01: SYSTEM-C */              | 23973    45
   113       |        pthread_mutex_unlock(&ra->lock);   /* ASG_LK01: SYSTEM-C */                              | 23974    45
   114       |        return r;                                                  /* ASG_LK01: SYSTEM-C */      | 23975    45
   115       |#endif                                                             /* ASG_LK01: SYSTEM-C */      | 23976    45
   116       |#ifdef __SUNPRO_C                                                                                | 23977    45
   117       |        return atomic_add_32_nv(&ra->val, -v);                                                   | 23978    45
   118       |#elif defined(_WIN32)                                                                            | 23979    45
   119       |        return InterlockedAdd((LONG *)&ra->val, -v);                                             | 23980    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   461


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   120       |#elif !HAVE_ATOMICS_32                                                                           | 23981    45
   121       |        int32_t r;                                                                               | 23982    45
   122       |        mtx_lock(&ra->lock);                                                                     | 23983    45
   123       |        ra->val -= v;                                                                            | 23984    45
   124       |        r = ra->val;                                                                             | 23985    45
   125       |        mtx_unlock(&ra->lock);                                                                   | 23986    45
   126       |        return r;                                                                                | 23987    45
   127       |#else                                                                                            | 23988    45
   128       |        return ATOMIC_OP32(sub, fetch, &ra->val, v);                                             | 23989    45
   128       +                return __atomic_sub_fetch(&ra->val, v, 6);                                       + 23989    45
   129       |#endif                                                                                           | 23990    45
   130       |}                                                                                                | 23991    45
   131       |                                                                                                 | 23992    45
   132       |/**                                                                                              | 23993    45
   133       | * @warning The returned value is the nominal value and will be outdated                         | 23994    45
   134       | *          by the time the application reads it.                                                | 23995    45
   135       | *          It should not be used for exact arithmetics, any correlation                         | 23996    45
   136       | *          with other data is unsynchronized, meaning that two atomics,                         | 23997    45
   137       | *          or one atomic and a mutex-protected piece of data have no                            | 23998    45
   138       | *          common synchronization and can't be relied on.                                       | 23999    45
   139       | */                                                                                              | 24000    45
   140       |static RD_INLINE int32_t RD_UNUSED rd_atomic32_get(rd_atomic32_t *ra) {                          | 24001    45
   140       +static inline int32_t __attribute__((unused)) rd_atomic32_get(rd_atomic32_t *ra) {               + 24001    45
   141       |#ifdef SYSC                                                        /* ASG_LK01: SYSTEM-C */      | 24002    45
   142       |        int32_t r;                                                 /* ASG_LK01: SYSTEM-C */      | 24003    45
   143       |        pthread_mutex_lock(&ra->lock);     /* ASG_LK01: SYSTEM-C */                              | 24004    45
   144       |        r = ra->val;                                       /* ASG_LK01: SYSTEM-C */              | 24005    45
   145       |        pthread_mutex_unlock(&ra->lock);   /* ASG_LK01: SYSTEM-C */                              | 24006    45
   146       |        return r;                                                  /* ASG_LK01: SYSTEM-C */      | 24007    45
   147       |#endif                                                             /* ASG_LK01: SYSTEM-C */      | 24008    45
   148       |#if defined(_WIN32) || defined(__SUNPRO_C)                                                       | 24009    45
   149       |        return ra->val;                                                                          | 24010    45
   150       |#elif !HAVE_ATOMICS_32                                                                           | 24011    45
   151       |        int32_t r;                                                                               | 24012    45
   152       |        mtx_lock(&ra->lock);                                                                     | 24013    45
   153       |        r = ra->val;                                                                             | 24014    45
   154       |        mtx_unlock(&ra->lock);                                                                   | 24015    45
   155       |        return r;                                                                                | 24016    45
   156       |#else                                                                                            | 24017    45
   157       |        return ATOMIC_OP32(fetch, add, &ra->val, 0);                                             | 24018    45
   157       +                return __atomic_fetch_add(&ra->val, 0, 6);                                       + 24018    45
   158       |#endif                                                                                           | 24019    45
   159       |}                                                                                                | 24020    45
   160       |                                                                                                 | 24021    45
   161       |static RD_INLINE int32_t RD_UNUSED rd_atomic32_set(rd_atomic32_t *ra, int32_t v) {               | 24022    45
   161       +static inline int32_t __attribute__((unused)) rd_atomic32_set(rd_atomic32_t *ra, int32_t v) {    + 24022    45
   162       |#ifdef SYSC                                                        /* ASG_LK01: SYSTEM-C */      | 24023    45
   163       |        int32_t r;                                                 /* ASG_LK01: SYSTEM-C */      | 24024    45
   164       |        pthread_mutex_lock(&ra->lock);     /* ASG_LK01: SYSTEM-C */                              | 24025    45
   165       |        r = ra->val = v;                                   /* ASG_LK01: SYSTEM-C */              | 24026    45
   166       |        pthread_mutex_unlock(&ra->lock);   /* ASG_LK01: SYSTEM-C */                              | 24027    45
   167       |        return r;                                                  /* ASG_LK01: SYSTEM-C */      | 24028    45
   168       |#endif                                                             /* ASG_LK01: SYSTEM-C */      | 24029    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   462


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   169       |#ifdef _WIN32                                                                                    | 24030    45
   170       |        return InterlockedExchange((LONG *)&ra->val, v);                                         | 24031    45
   171       |#elif !HAVE_ATOMICS_32                                                                           | 24032    45
   172       |        int32_t r;                                                                               | 24033    45
   173       |        mtx_lock(&ra->lock);                                                                     | 24034    45
   174       |        r = ra->val = v;                                                                         | 24035    45
   175       |        mtx_unlock(&ra->lock);                                                                   | 24036    45
   176       |        return r;                                                                                | 24037    45
   177       |#elif HAVE_ATOMICS_32_ATOMIC                                                                     | 24038    45
   178       |        __atomic_store_n(&ra->val, v, __ATOMIC_SEQ_CST);                                         | 24039    45
   178       +                __atomic_store_n(&ra->val, v, 6);                                                + 24039    45
   179       |        return v;                                                                                | 24040    45
   180       |#elif HAVE_ATOMICS_32_SYNC                                                                       | 24041    45
   181       |        (void)__sync_lock_test_and_set(&ra->val, v);                                             | 24042    45
   182       |        return v;                                                                                | 24043    45
   183       |#else                                                                                            | 24044    45
   184       |        return ra->val = v; // FIXME                                                             | 24045    45
   185       |#endif                                                                                           | 24046    45
   186       |}                                                                                                | 24047    45
   187       |                                                                                                 | 24048    45
   188       |                                                                                                 | 24049    45
   189       |                                                                                                 | 24050    45
   190       |static RD_INLINE RD_UNUSED void rd_atomic64_init (rd_atomic64_t *ra, int64_t v) {                | 24051    45
   190       +static inline __attribute__((unused)) void rd_atomic64_init (rd_atomic64_t *ra, int64_t v) {     + 24051    45
   191       |        ra->val = v;                                                                             | 24052    45
   192       |#ifdef SYSC                                                                             /* ASG_LK| 24053    45
   192       +01: SYSTEM-C */                                                                                  + 24053    45
   193       |        pthread_mutex_init(&ra->lock, mtx_plain);       /* ASG_LK01: SYSTEM-C */                 | 24054    45
   193       +                pthread_mutex_init(&ra->lock, 0);                                                + 24054    45
   194       |#else                                                                                   /* ASG_LK| 24055    45
   194       +01: SYSTEM-C */                                                                                  + 24055    45
   195       |#if !defined(_WIN32) && !HAVE_ATOMICS_64                                                         | 24056    45
   196       |        mtx_init(&ra->lock, mtx_plain);                                                          | 24057    45
   197       |#endif                                                                                           | 24058    45
   198       |#endif                                                                                  /* ASG_LK| 24059    45
   198       +01: SYSTEM-C */                                                                                  + 24059    45
   199       |}                                                                                                | 24060    45
   200       |                                                                                                 | 24061    45
   201       |static RD_INLINE int64_t RD_UNUSED rd_atomic64_add (rd_atomic64_t *ra, int64_t v) {              | 24062    45
   201       +static inline int64_t __attribute__((unused)) rd_atomic64_add (rd_atomic64_t *ra, int64_t v) {   + 24062    45
   202       |#ifdef SYSC                                                               /* ASG_LK01: SYSTEM-C *| 24063    45
   202       +/                                                                                                + 24063    45
   203       |        int64_t r;                                                        /* ASG_LK01: SYSTEM-C *| 24064    45
   203       +/                                                                                                + 24064    45
   204       |        pthread_mutex_lock(&ra->lock);            /* ASG_LK01: SYSTEM-C */                       | 24065    45
   205       |        ra->val += v;                                             /* ASG_LK01: SYSTEM-C */       | 24066    45
   206       |        r = ra->val;                                              /* ASG_LK01: SYSTEM-C */       | 24067    45
   207       |        pthread_mutex_unlock(&ra->lock);          /* ASG_LK01: SYSTEM-C */                       | 24068    45
   208       |        return r;                                                         /* ASG_LK01: SYSTEM-C *| 24069    45
   208       +/                                                                                                + 24069    45
   209       |#endif                                                                    /* ASG_LK01: SYSTEM-C *| 24070    45
   209       +/                                                                                                + 24070    45
   210       |#ifdef __SUNPRO_C                                                                                | 24071    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   463


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   211       |        return atomic_add_64_nv(&ra->val, v);                                                    | 24072    45
   212       |#elif defined(_WIN32)                                                                            | 24073    45
   213       |        return InterlockedAdd64(&ra->val, v);                                                    | 24074    45
   214       |#elif !HAVE_ATOMICS_64                                                                           | 24075    45
   215       |        int64_t r;                                                                               | 24076    45
   216       |        mtx_lock(&ra->lock);                                                                     | 24077    45
   217       |        ra->val += v;                                                                            | 24078    45
   218       |        r = ra->val;                                                                             | 24079    45
   219       |        mtx_unlock(&ra->lock);                                                                   | 24080    45
   220       |        return r;                                                                                | 24081    45
   221       |#else                                                                                            | 24082    45
   222       |        return ATOMIC_OP64(add, fetch, &ra->val, v);                                             | 24083    45
   222       +                return __atomic_add_fetch(&ra->val, v, 6);                                       + 24083    45
   223       |#endif                                                                                           | 24084    45
   224       |}                                                                                                | 24085    45
   225       |                                                                                                 | 24086    45
   226       |static RD_INLINE int64_t RD_UNUSED rd_atomic64_sub(rd_atomic64_t *ra, int64_t v) {               | 24087    45
   226       +static inline int64_t __attribute__((unused)) rd_atomic64_sub(rd_atomic64_t *ra, int64_t v) {    + 24087    45
   227       |#ifdef SYSC                                                           /* ASG_LK01: SYSTEM-C */   | 24088    45
   228       |        int64_t r;                                                    /* ASG_LK01: SYSTEM-C */   | 24089    45
   229       |        pthread_mutex_lock(&ra->lock);        /* ASG_LK01: SYSTEM-C */                           | 24090    45
   230       |        ra->val -= v;                                         /* ASG_LK01: SYSTEM-C */           | 24091    45
   231       |        r = ra->val;                                          /* ASG_LK01: SYSTEM-C */           | 24092    45
   232       |        pthread_mutex_unlock(&ra->lock);      /* ASG_LK01: SYSTEM-C */                           | 24093    45
   233       |        return r;                                                     /* ASG_LK01: SYSTEM-C */   | 24094    45
   234       |#endif                                                                /* ASG_LK01: SYSTEM-C */   | 24095    45
   235       |#ifdef __SUNPRO_C                                                                                | 24096    45
   236       |        return atomic_add_64_nv(&ra->val, -v);                                                   | 24097    45
   237       |#elif defined(_WIN32)                                                                            | 24098    45
   238       |        return InterlockedAdd64(&ra->val, -v);                                                   | 24099    45
   239       |#elif !HAVE_ATOMICS_64                                                                           | 24100    45
   240       |        int64_t r;                                                                               | 24101    45
   241       |        mtx_lock(&ra->lock);                                                                     | 24102    45
   242       |        ra->val -= v;                                                                            | 24103    45
   243       |        r = ra->val;                                                                             | 24104    45
   244       |        mtx_unlock(&ra->lock);                                                                   | 24105    45
   245       |        return r;                                                                                | 24106    45
   246       |#else                                                                                            | 24107    45
   247       |        return ATOMIC_OP64(sub, fetch, &ra->val, v);                                             | 24108    45
   247       +                return __atomic_sub_fetch(&ra->val, v, 6);                                       + 24108    45
   248       |#endif                                                                                           | 24109    45
   249       |}                                                                                                | 24110    45
   250       |                                                                                                 | 24111    45
   251       |/**                                                                                              | 24112    45
   252       | * @warning The returned value is the nominal value and will be outdated                         | 24113    45
   253       | *          by the time the application reads it.                                                | 24114    45
   254       | *          It should not be used for exact arithmetics, any correlation                         | 24115    45
   255       | *          with other data is unsynchronized, meaning that two atomics,                         | 24116    45
   256       | *          or one atomic and a mutex-protected piece of data have no                            | 24117    45
   257       | *          common synchronization and can't be relied on.                                       | 24118    45
   258       | *          Use with care.                                                                       | 24119    45
   259       | */                                                                                              | 24120    45
   260       |static RD_INLINE int64_t RD_UNUSED rd_atomic64_get(rd_atomic64_t *ra) {                          | 24121    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   464


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   260       +static inline int64_t __attribute__((unused)) rd_atomic64_get(rd_atomic64_t *ra) {               + 24121    45
   261       |#ifdef SYSC                                                         /* ASG_LK01: SYSTEM-C */     | 24122    45
   262       |        int64_t r;                                                  /* ASG_LK01: SYSTEM-C */     | 24123    45
   263       |        pthread_mutex_lock(&ra->lock);      /* ASG_LK01: SYSTEM-C */                             | 24124    45
   264       |        r = ra->val;                                        /* ASG_LK01: SYSTEM-C */             | 24125    45
   265       |        pthread_mutex_unlock(&ra->lock);    /* ASG_LK01: SYSTEM-C */                             | 24126    45
   266       |        return r;                                                   /* ASG_LK01: SYSTEM-C */     | 24127    45
   267       |#endif                                                              /* ASG_LK01: SYSTEM-C */     | 24128    45
   268       |#if defined(_WIN32) || defined(__SUNPRO_C)                                                       | 24129    45
   269       |        return ra->val;                                                                          | 24130    45
   270       |#elif !HAVE_ATOMICS_64                                                                           | 24131    45
   271       |        int64_t r;                                                                               | 24132    45
   272       |        mtx_lock(&ra->lock);                                                                     | 24133    45
   273       |        r = ra->val;                                                                             | 24134    45
   274       |        mtx_unlock(&ra->lock);                                                                   | 24135    45
   275       |        return r;                                                                                | 24136    45
   276       |#else                                                                                            | 24137    45
   277       |        return ATOMIC_OP64(fetch, add, &ra->val, 0);                                             | 24138    45
   277       +                return __atomic_fetch_add(&ra->val, 0, 6);                                       + 24138    45
   278       |#endif                                                                                           | 24139    45
   279       |}                                                                                                | 24140    45
   280       |                                                                                                 | 24141    45
   281       |                                                                                                 | 24142    45
   282       |static RD_INLINE int64_t RD_UNUSED rd_atomic64_set(rd_atomic64_t *ra, int64_t v) {               | 24143    45
   282       +static inline int64_t __attribute__((unused)) rd_atomic64_set(rd_atomic64_t *ra, int64_t v) {    + 24143    45
   283       |#ifdef SYSC                                                              /* ASG_LK01: SYSTEM-C */| 24144    45
   284       |        int64_t r;                                                       /* ASG_LK01: SYSTEM-C */| 24145    45
   285       |        pthread_mutex_lock(&ra->lock);           /* ASG_LK01: SYSTEM-C */                        | 24146    45
   286       |        ra->val = v;                                             /* ASG_LK01: SYSTEM-C */        | 24147    45
   287       |        r = ra->val;                                             /* ASG_LK01: SYSTEM-C */        | 24148    45
   288       |        pthread_mutex_unlock(&ra->lock);         /* ASG_LK01: SYSTEM-C */                        | 24149    45
   289       |        return r;                                                        /* ASG_LK01: SYSTEM-C */| 24150    45
   290       |#endif                                                                   /* ASG_LK01: SYSTEM-C */| 24151    45
   291       |#ifdef _WIN32                                                                                    | 24152    45
   292       |        return InterlockedExchange64(&ra->val, v);                                               | 24153    45
   293       |#elif !HAVE_ATOMICS_64                                                                           | 24154    45
   294       |        int64_t r;                                                                               | 24155    45
   295       |        mtx_lock(&ra->lock);                                                                     | 24156    45
   296       |        ra->val = v;                                                                             | 24157    45
   297       |        r = ra->val;                                                                             | 24158    45
   298       |        mtx_unlock(&ra->lock);                                                                   | 24159    45
   299       |        return r;                                                                                | 24160    45
   300       |#elif HAVE_ATOMICS_64_ATOMIC                                                                     | 24161    45
   301       |        __atomic_store_n(&ra->val, v, __ATOMIC_SEQ_CST);                                         | 24162    45
   301       +                __atomic_store_n(&ra->val, v, 6);                                                + 24162    45
   302       |        return v;                                                                                | 24163    45
   303       |#elif HAVE_ATOMICS_64_SYNC                                                                       | 24164    45
   304       |        (void)__sync_lock_test_and_set(&ra->val, v);                                             | 24165    45
   305       |        return v;                                                                                | 24166    45
   306       |#else                                                                                            | 24167    45
   307       |        return ra->val = v; // FIXME                                                             | 24168    45
   308       |#endif                                                                                           | 24169    45
   309       |}                                                                                                | 24170    45
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   465


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   310       |                                                                                                 | 24171    45
   311       |#endif /* _RDATOMIC_H_ */                                                                        | 24172    45
   150       |                                                                                                 | 24173    39
   151       |/**                                                                                              | 24174    39
   152       |* Misc                                                                                           | 24175    39
   153       |*/                                                                                               | 24176    39
   154       |                                                                                                 | 24177    39
   155       |/**                                                                                              | 24178    39
   156       | * Microsecond sleep.                                                                            | 24179    39
   157       | * Will retry on signal interrupt unless *terminate is true.                                     | 24180    39
   158       | */                                                                                              | 24181    39
   159       |static RD_INLINE RD_UNUSED                                                                       | 24182    39
   159       +static inline __attribute__((unused))                                                            + 24182    39
   160       |void rd_usleep (int usec, rd_atomic32_t *terminate) {                                            | 24183    39
   161       |        struct timespec req = {usec / 1000000, (long)(usec % 1000000) * 1000};                   | 24184    39
   162       |                                                                                                 | 24185    39
   163       |        /* Retry until complete (issue #272), unless terminating. */                             | 24186    39
   164       |        while (nanosleep(&req, &req) == -1 &&                                                    | 24187    39
   165       |               (errno == EINTR && (!terminate || !rd_atomic32_get(terminate))))                  | 24188    39
   165       +                              ((* __error()) == 4 && (!terminate || !rd_atomic32_get(terminate)))+ 24188    39
   165       +)                                                                                                + 24188    39
   166       |                ;                                                                                | 24189    39
   167       |}                                                                                                | 24190    39
   168       |                                                                                                 | 24191    39
   169       |                                                                                                 | 24192    39
   170       |                                                                                                 | 24193    39
   171       |                                                                                                 | 24194    39
   172       |#define rd_gettimeofday(tv,tz)  gettimeofday(tv,tz)                                              | 24195    39
   173       |                                                                                                 | 24196    39
   174       |                                                                                                 | 24197    39
   175       |#ifndef __COVERITY__                                                                             | 24198    39
   176       |#define rd_assert(EXPR)  assert(EXPR)                                                            | 24199    39
   177       |#else                                                                                            | 24200    39
   178       |extern void __coverity_panic__(void);                                                            | 24201    39
   179       |#define rd_assert(EXPR) do {                    \                                                | 24202    39
   180       |                if (!(EXPR))                    \                                                | 24203    39
   181       |                        __coverity_panic__();   \                                                | 24204    39
   182       |        } while (0)                                                                              | 24205    39
   183       |#endif                                                                                           | 24206    39
   184       |                                                                                                 | 24207    39
   185       |                                                                                                 | 24208    39
   186       |static RD_INLINE RD_UNUSED                                                                       | 24209    39
   186       +static inline __attribute__((unused))                                                            + 24209    39
   187       |const char *rd_getenv (const char *env, const char *def) {                                       | 24210    39
   188       |        const char *tmp;                                                                         | 24211    39
   189       |        tmp = getenv(env);                                                                       | 24212    39
   190       |        if (tmp && *tmp)                                                                         | 24213    39
   191       |                return tmp;                                                                      | 24214    39
   192       |        return def;                                                                              | 24215    39
   193       |}                                                                                                | 24216    39
   194       |                                                                                                 | 24217    39
   195       |                                                                                                 | 24218    39
   196       |/**                                                                                              | 24219    39
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   466


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   197       | * Empty struct initializer                                                                      | 24220    39
   198       | */                                                                                              | 24221    39
   199       |#define RD_ZERO_INIT  {}                                                                         | 24222    39
   200       |                                                                                                 | 24223    39
   201       |/**                                                                                              | 24224    39
   202       | * Sockets, IO                                                                                   | 24225    39
   203       | */                                                                                              | 24226    39
   204       |                                                                                                 | 24227    39
   205       | /** @brief Socket type */                                                                       | 24228    39
   206       |typedef int rd_socket_t;                                                                         | 24229    39
   207       |                                                                                                 | 24230    39
   208       |/** @brief Socket API error return value */                                                      | 24231    39
   209       |#define RD_SOCKET_ERROR (-1)                                                                     | 24232    39
   210       |                                                                                                 | 24233    39
   211       |/** @brief Last socket error */                                                                  | 24234    39
   212       |#define rd_socket_errno errno                                                                    | 24235    39
   213       |                                                                                                 | 24236    39
   214       |                                                                                                 | 24237    39
   215       |/** @brief String representation of socket error */                                              | 24238    39
   216       |#define rd_socket_strerror(ERR) rd_strerror(ERR)                                                 | 24239    39
   217       |                                                                                                 | 24240    39
   218       |/** @brief poll() struct type */                                                                 | 24241    39
   219       |typedef struct pollfd rd_pollfd_t;                                                               | 24242    39
   220       |                                                                                                 | 24243    39
   221       |/** @brief poll(2) */                                                                            | 24244    39
   222       |#define rd_socket_poll(POLLFD,FDCNT,TIMEOUT_MS) poll(POLLFD,FDCNT,TIMEOUT_MS)                    | 24245    39
   223       |                                                                                                 | 24246    39
   224       |/**                                                                                              | 24247    39
   225       | * @brief Set socket to non-blocking                                                             | 24248    39
   226       | * @returns 0 on success or errno on failure.                                                    | 24249    39
   227       | */                                                                                              | 24250    39
   228       |static RD_UNUSED int rd_fd_set_nonblocking (int fd) {                                            | 24251    39
   228       +static __attribute__((unused)) int rd_fd_set_nonblocking (int fd) {                              + 24251    39
   229       |        int fl = fcntl(fd, F_GETFL, 0);                                                          | 24252    39
   229       +                int fl = fcntl(fd, 3, 0);                                                        + 24252    39
   230       |        if (fl == -1 ||                                                                          | 24253    39
   231       |            fcntl(fd, F_SETFL, fl | O_NONBLOCK) == -1)                                           | 24254    39
   231       +                        fcntl(fd, 4, fl | 0x0004) == -1)                                         + 24254    39
   232       |                return errno;                                                                    | 24255    39
   232       +                                return (* __error());                                            + 24255    39
   233       |        return 0;                                                                                | 24256    39
   234       |}                                                                                                | 24257    39
   235       |                                                                                                 | 24258    39
   236       |/**                                                                                              | 24259    39
   237       | * @brief Create non-blocking pipe                                                               | 24260    39
   238       | * @returns 0 on success or errno on failure                                                     | 24261    39
   239       | */                                                                                              | 24262    39
   240       |static RD_UNUSED int rd_pipe_nonblocking (rd_socket_t *fds) {                                    | 24263    39
   240       +static __attribute__((unused)) int rd_pipe_nonblocking (rd_socket_t *fds) {                      + 24263    39
   241       |        if (pipe(fds) == -1 ||                                                                   | 24264    39
   242       |            rd_fd_set_nonblocking(fds[0]) == -1 ||                                               | 24265    39
   243       |            rd_fd_set_nonblocking(fds[1]))                                                       | 24266    39
   244       |                return errno;                                                                    | 24267    39
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   467


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   244       +                                return (* __error());                                            + 24267    39
   245       |                                                                                                 | 24268    39
   246       |        /* Minimize buffer sizes to avoid a large number                                         | 24269    39
   247       |         * of signaling bytes to accumulate when                                                 | 24270    39
   248       |         * io-signalled queue is not being served for a while. */                                | 24271    39
   249       |#ifdef F_SETPIPE_SZ                                                                              | 24272    39
   250       |        /* Linux automatically rounds the pipe size up                                           | 24273    39
   251       |         * to the minimum size. */                                                               | 24274    39
   252       |        fcntl(fds[0], F_SETPIPE_SZ, 100);                                                        | 24275    39
   253       |        fcntl(fds[1], F_SETPIPE_SZ, 100);                                                        | 24276    39
   254       |#endif                                                                                           | 24277    39
   255       |        return 0;                                                                                | 24278    39
   256       |}                                                                                                | 24279    39
   257       |#define rd_pipe(fds) pipe(fds)                                                                   | 24280    39
   258       |#define rd_read(fd,buf,sz) read(fd,buf,sz)                                                       | 24281    39
   259       |#define rd_write(fd,buf,sz) write(fd,buf,sz)                                                     | 24282    39
   260       |#define rd_close(fd) close(fd)                                                                   | 24283    39
   261       |                                                                                                 | 24284    39
   262       |#endif /* _RDPOSIX_H_ */                                                                         | 24285    39
    74       |#endif                                                                                           | 24286    18
    75       |                                                                                                 | 24287    18
    76       |#include "rdtypes.h"                                                                             | 24288    18
     1       |/*                                                                                               | 24289    46
     2       | * librd - Rapid Development C library                                                           | 24290    46
     3       | *                                                                                               | 24291    46
     4       | * Copyright (c) 2012, Magnus Edenhill                                                           | 24292    46
     5       | * All rights reserved.                                                                          | 24293    46
     6       | *                                                                                               | 24294    46
     7       | * Redistribution and use in source and binary forms, with or without                            | 24295    46
     8       | * modification, are permitted provided that the following conditions are met:                   | 24296    46
     9       | *                                                                                               | 24297    46
    10       | * 1. Redistributions of source code must retain the above copyright notice,                     | 24298    46
    11       | *    this list of conditions and the following disclaimer.                                      | 24299    46
    12       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  | 24300    46
    13       | *    this list of conditions and the following disclaimer in the documentation                  | 24301    46
    14       | *    and/or other materials provided with the distribution.                                     | 24302    46
    15       | *                                                                                               | 24303    46
    16       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   | 24304    46
    17       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     | 24305    46
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 24306    46
    19       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      | 24307    46
    20       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           | 24308    46
    21       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 24309    46
    22       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 24310    46
    23       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 24311    46
    24       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 24312    46
    25       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 24313    46
    26       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 24314    46
    27       | */                                                                                              | 24315    46
    28       |                                                                                                 | 24316    46
    29       |#ifndef _RDTYPES_H_                                                                              | 24317    46
    30       |#define _RDTYPES_H_                                                                              | 24318    46
    31       |                                                                                                 | 24319    46
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   468


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    32       |#include <inttypes.h>                                                                            | 24320    46
     1       |/* release 2.25.00 */                                                                            | 24321    40
     2       |#pragma pack()                                                                                   | 24322    40
     3       |/*-                                                                                              | 24323    40
     4       | * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>                                           | 24324    40
     5       | * All rights reserved.                                                                          | 24325    40
     6       | *                                                                                               | 24326    40
     7       | * Redistribution and use in source and binary forms, with or without                            | 24327    40
     8       | * modification, are permitted provided that the following conditions                            | 24328    40
     9       | * are met:                                                                                      | 24329    40
    10       | * 1. Redistributions of source code must retain the above copyright                             | 24330    40
    11       | *    notice, this list of conditions and the following disclaimer.                              | 24331    40
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 24332    40
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 24333    40
    14       | *    documentation and/or other materials provided with the distribution.                       | 24334    40
    15       | *                                                                                               | 24335    40
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 24336    40
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 24337    40
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 24338    40
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 24339    40
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 24340    40
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 24341    40
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 24342    40
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 24343    40
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 24344    40
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 24345    40
    26       | * SUCH DAMAGE.                                                                                  | 24346    40
    27       | *                                                                                               | 24347    40
    28       | */                                                                                              | 24348    40
    29       |                                                                                                 | 24349    40
    30       |#ifndef _INTTYPES_H_                                                                             | 24350    40
    31       |#define _INTTYPES_H_                                                                             | 24351    40
    32       |                                                                                                 | 24352    40
    33       |#include <machine/_inttypes.h>                                                                   | 24353    40
    34       |#include <sys/stdint.h>                                                                          | 24354    40
    35       |                                                                                                 | 24355    40
    36       |typedef struct {                                                                                 | 24356    40
    37       |        intmax_t        quot;           /* Quotient. */                                          | 24357    40
    38       |        intmax_t        rem;            /* Remainder. */                                         | 24358    40
    39       |} imaxdiv_t;                                                                                     | 24359    40
    40       |                                                                                                 | 24360    40
    41       |__BEGIN_DECLS                                                                                    | 24361    40
    42       |intmax_t        imaxabs(intmax_t) __pure2;                                                       | 24362    40
    43       |imaxdiv_t       imaxdiv(intmax_t, intmax_t) __pure2;                                             | 24363    40
    44       |                                                                                                 | 24364    40
    45       |#pragma map(strtoimax, "@@S2IMAX")                                                               | 24365    40
    46       |intmax_t        strtoimax(const char * __restrict, char ** __restrict, int);                     | 24366    40
    47       |#pragma map(strtoumax, "@@S2UMAX")                                                               | 24367    40
    48       |uintmax_t       strtoumax(const char * __restrict, char ** __restrict, int);                     | 24368    40
    49       |#pragma map(wcstoimax, "@@WCSIMX")                                                               | 24369    40
    50       |intmax_t        wcstoimax(const __wchar_t * __restrict,                                          | 24370    40
    51       |                    __wchar_t ** __restrict, int);                                               | 24371    40
    52       |#pragma map(wcstoumax, "@@WCSUMX")                                                               | 24372    40
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   469


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    53       |uintmax_t       wcstoumax(const __wchar_t * __restrict,                                          | 24373    40
    54       |                    __wchar_t ** __restrict, int);                                               | 24374    40
    55       |__END_DECLS                                                                                      | 24375    40
    56       |                                                                                                 | 24376    40
    57       |#endif /* !_INTTYPES_H_ */                                                                       | 24377    40
    58       |#pragma pack(reset)                                                                              | 24378    40
    33       |                                                                                                 | 24379    46
    34       |                                                                                                 | 24380    46
    35       |/*                                                                                               | 24381    46
    36       | * Fundamental types                                                                             | 24382    46
    37       | */                                                                                              | 24383    46
    38       |                                                                                                 | 24384    46
    39       |                                                                                                 | 24385    46
    40       |/* Timestamp (microseconds).                                                                     | 24386    46
    41       | * Struct members with this type usually have the "ts_" prefix for                               | 24387    46
    42       | * the internal monotonic clock timestamp, or "wts_" for wall clock timestamp.                   | 24388    46
    43       | */                                                                                              | 24389    46
    44       |typedef int64_t rd_ts_t;                                                                         | 24390    46
    45       |                                                                                                 | 24391    46
    46       |#define RD_TS_MAX  INT64_MAX                                                                     | 24392    46
    47       |                                                                                                 | 24393    46
    48       |                                                                                                 | 24394    46
    49       |typedef uint8_t rd_bool_t;                                                                       | 24395    46
    50       |#define rd_true   1                                                                              | 24396    46
    51       |#define rd_false  0                                                                              | 24397    46
    52       |                                                                                                 | 24398    46
    53       |                                                                                                 | 24399    46
    54       |/**                                                                                              | 24400    46
    55       | * @enum Denotes an async or sync operation                                                      | 24401    46
    56       | */                                                                                              | 24402    46
    57       |typedef enum {                                                                                   | 24403    46
    58       |        RD_SYNC = 0, /**< Synchronous/blocking */                                                | 24404    46
    59       |        RD_ASYNC,    /**< Asynchronous/non-blocking */                                           | 24405    46
    60       |} rd_async_t;                                                                                    | 24406    46
    61       |                                                                                                 | 24407    46
    62       |                                                                                                 | 24408    46
    63       |/**                                                                                              | 24409    46
    64       | * @enum Instruct function to acquire or not to acquire a lock                                   | 24410    46
    65       | */                                                                                              | 24411    46
    66       |typedef enum {                                                                                   | 24412    46
    67       |        RD_DONT_LOCK = 0,  /**< Do not acquire lock */                                           | 24413    46
    68       |        RD_DO_LOCK = 1,    /**< Do acquire lock */                                               | 24414    46
    69       |} rd_dolock_t;                                                                                   | 24415    46
    70       |                                                                                                 | 24416    46
    71       |                                                                                                 | 24417    46
    72       |/*                                                                                               | 24418    46
    73       | * Helpers                                                                                       | 24419    46
    74       | */                                                                                              | 24420    46
    75       |                                                                                                 | 24421    46
    76       |/**                                                                                              | 24422    46
    77       | * @brief Overflow-safe type-agnostic compare for use in cmp functions.                          | 24423    46
    78       | *                                                                                               | 24424    46
    79       | * @warning A and B may be evaluated multiple times.                                             | 24425    46
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   470


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    80       | *                                                                                               | 24426    46
    81       | * @returns -1, 0 or 1.                                                                          | 24427    46
    82       | */                                                                                              | 24428    46
    83       |#define RD_CMP(A,B)  (int)((A) < (B) ? -1 : ((A) > (B)))                                         | 24429    46
    84       |                                                                                                 | 24430    46
    85       |                                                                                                 | 24431    46
    86       |#endif /* _RDTYPES_H_ */                                                                         | 24432    46
    77       |                                                                                                 | 24433    18
    78       |#if WITH_SYSLOG                                                                                  | 24434    18
    79       |#include <syslog.h>                                                                              | 24435    18
     1       |/* release 2.25.00 */                                                                            | 24436    47
     1       +                                                                                                 + 24436    47
     2       |#pragma pack()                                                                                   | 24437    47
     3       |/*-                                                                                              | 24438    47
     4       | * Copyright (c) 1982, 1986, 1988, 1993                                                          | 24439    47
     5       | *      The Regents of the University of California.  All rights reserved.                       | 24440    47
     6       | *                                                                                               | 24441    47
     7       | * Redistribution and use in source and binary forms, with or without                            | 24442    47
     8       | * modification, are permitted provided that the following conditions                            | 24443    47
     9       | * are met:                                                                                      | 24444    47
    10       | * 1. Redistributions of source code must retain the above copyright                             | 24445    47
    11       | *    notice, this list of conditions and the following disclaimer.                              | 24446    47
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 24447    47
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 24448    47
    14       | *    documentation and/or other materials provided with the distribution.                       | 24449    47
    15       | * 4. Neither the name of the University nor the names of its contributors                       | 24450    47
    16       | *    may be used to endorse or promote products derived from this software                      | 24451    47
    17       | *    without specific prior written permission.                                                 | 24452    47
    18       | *                                                                                               | 24453    47
    19       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 24454    47
    20       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 24455    47
    21       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 24456    47
    22       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 24457    47
    23       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 24458    47
    24       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 24459    47
    25       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 24460    47
    26       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 24461    47
    27       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 24462    47
    28       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 24463    47
    29       | * SUCH DAMAGE.                                                                                  | 24464    47
    30       | *                                                                                               | 24465    47
    31       | *      @(#)syslog.h    8.1 (Berkeley) 6/2/93                                                    | 24466    47
    32       | */                                                                                              | 24467    47
    33       |                                                                                                 | 24468    47
    34       |#ifndef _SYS_SYSLOG_H_                                                                           | 24469    47
    35       |#define _SYS_SYSLOG_H_                                                                           | 24470    47
    36       |                                                                                                 | 24471    47
    37       |#define _PATH_LOG       "/var/run/log"                                                           | 24472    47
    38       |#define _PATH_LOG_PRIV  "/var/run/logpriv"                                                       | 24473    47
    39       |#define _PATH_OLDLOG    "/dev/log"      /* backward compatibility */                             | 24474    47
    40       |                                                                                                 | 24475    47
    41       |/*                                                                                               | 24476    47
    42       | * priorities/facilities are encoded into a single 32-bit quantity, where the                    | 24477    47
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   471


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    43       | * bottom 3 bits are the priority (0-7) and the top 28 bits are the facility                     | 24478    47
    44       | * (0-big number).  Both the priorities and the facilities map roughly                           | 24479    47
    45       | * one-to-one to strings in the syslogd(8) source code.  This mapping is                         | 24480    47
    46       | * included in this file.                                                                        | 24481    47
    47       | *                                                                                               | 24482    47
    48       | * priorities (these are ordered)                                                                | 24483    47
    49       | */                                                                                              | 24484    47
    50       |#define LOG_EMERG       0       /* system is unusable */                                         | 24485    47
    51       |#define LOG_ALERT       1       /* action must be taken immediately */                           | 24486    47
    52       |#define LOG_CRIT        2       /* critical conditions */                                        | 24487    47
    53       |#define LOG_ERR         3       /* error conditions */                                           | 24488    47
    54       |#define LOG_WARNING     4       /* warning conditions */                                         | 24489    47
    55       |#define LOG_NOTICE      5       /* normal but significant condition */                           | 24490    47
    56       |#define LOG_INFO        6       /* informational */                                              | 24491    47
    57       |#define LOG_DEBUG       7       /* debug-level messages */                                       | 24492    47
    58       |                                                                                                 | 24493    47
    59       |#define LOG_PRIMASK     0x07    /* mask to extract priority part (internal) */                   | 24494    47
    60       |                                /* extract priority */                                           | 24495    47
    61       |#define LOG_PRI(p)      ((p) & LOG_PRIMASK)                                                      | 24496    47
    62       |#define LOG_MAKEPRI(fac, pri)   ((fac) | (pri))                                                  | 24497    47
    63       |                                                                                                 | 24498    47
    64       |#ifdef SYSLOG_NAMES                                                                              | 24499    47
    65       |#define INTERNAL_NOPRI  0x10    /* the "no priority" priority */                                 | 24500    47
    66       |                                /* mark "facility" */                                            | 24501    47
    67       |#define INTERNAL_MARK   LOG_MAKEPRI((LOG_NFACILITIES<<3), 0)                                     | 24502    47
    68       |typedef struct _code {                                                                           | 24503    47
    69       |        const char      *c_name;                                                                 | 24504    47
    70       |        int             c_val;                                                                   | 24505    47
    71       |} CODE;                                                                                          | 24506    47
    72       |                                                                                                 | 24507    47
    73       |CODE prioritynames[] = {                                                                         | 24508    47
    74       |        { "alert",      LOG_ALERT,      },                                                       | 24509    47
    75       |        { "crit",       LOG_CRIT,       },                                                       | 24510    47
    76       |        { "debug",      LOG_DEBUG,      },                                                       | 24511    47
    77       |        { "emerg",      LOG_EMERG,      },                                                       | 24512    47
    78       |        { "err",        LOG_ERR,        },                                                       | 24513    47
    79       |        { "error",      LOG_ERR,        },      /* DEPRECATED */                                 | 24514    47
    80       |        { "info",       LOG_INFO,       },                                                       | 24515    47
    81       |        { "none",       INTERNAL_NOPRI, },      /* INTERNAL */                                   | 24516    47
    82       |        { "notice",     LOG_NOTICE,     },                                                       | 24517    47
    83       |        { "panic",      LOG_EMERG,      },      /* DEPRECATED */                                 | 24518    47
    84       |        { "warn",       LOG_WARNING,    },      /* DEPRECATED */                                 | 24519    47
    85       |        { "warning",    LOG_WARNING,    },                                                       | 24520    47
    86       |        { NULL,         -1,             }                                                        | 24521    47
    87       |};                                                                                               | 24522    47
    88       |#endif                                                                                           | 24523    47
    89       |                                                                                                 | 24524    47
    90       |/* facility codes */                                                                             | 24525    47
    91       |#define LOG_KERN        (0<<3)  /* kernel messages */                                            | 24526    47
    92       |#define LOG_USER        (1<<3)  /* random user-level messages */                                 | 24527    47
    93       |#define LOG_MAIL        (2<<3)  /* mail system */                                                | 24528    47
    94       |#define LOG_DAEMON      (3<<3)  /* system daemons */                                             | 24529    47
    95       |#define LOG_AUTH        (4<<3)  /* authorization messages */                                     | 24530    47
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   472


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    96       |#define LOG_SYSLOG      (5<<3)  /* messages generated internally by syslogd */                   | 24531    47
    97       |#define LOG_LPR         (6<<3)  /* line printer subsystem */                                     | 24532    47
    98       |#define LOG_NEWS        (7<<3)  /* network news subsystem */                                     | 24533    47
    99       |#define LOG_UUCP        (8<<3)  /* UUCP subsystem */                                             | 24534    47
   100       |#define LOG_CRON        (9<<3)  /* clock daemon */                                               | 24535    47
   101       |#define LOG_AUTHPRIV    (10<<3) /* authorization messages (private) */                           | 24536    47
   102       |                                /* Facility #10 clashes in DEC UNIX, where */                    | 24537    47
   103       |                                /* it's defined as LOG_MEGASAFE for AdvFS  */                    | 24538    47
   104       |                                /* event logging.                          */                    | 24539    47
   105       |#define LOG_FTP         (11<<3) /* ftp daemon */                                                 | 24540    47
   106       |#define LOG_NTP         (12<<3) /* NTP subsystem */                                              | 24541    47
   107       |#define LOG_SECURITY    (13<<3) /* security subsystems (firewalling, etc.) */                    | 24542    47
   108       |#define LOG_CONSOLE     (14<<3) /* /dev/console output */                                        | 24543    47
   109       |                                                                                                 | 24544    47
   110       |        /* other codes through 15 reserved for system use */                                     | 24545    47
   111       |#define LOG_LOCAL0      (16<<3) /* reserved for local use */                                     | 24546    47
   112       |#define LOG_LOCAL1      (17<<3) /* reserved for local use */                                     | 24547    47
   113       |#define LOG_LOCAL2      (18<<3) /* reserved for local use */                                     | 24548    47
   114       |#define LOG_LOCAL3      (19<<3) /* reserved for local use */                                     | 24549    47
   115       |#define LOG_LOCAL4      (20<<3) /* reserved for local use */                                     | 24550    47
   116       |#define LOG_LOCAL5      (21<<3) /* reserved for local use */                                     | 24551    47
   117       |#define LOG_LOCAL6      (22<<3) /* reserved for local use */                                     | 24552    47
   118       |#define LOG_LOCAL7      (23<<3) /* reserved for local use */                                     | 24553    47
   119       |                                                                                                 | 24554    47
   120       |#define LOG_NFACILITIES 24      /* current number of facilities */                               | 24555    47
   121       |#define LOG_FACMASK     0x03f8  /* mask to extract facility part */                              | 24556    47
   122       |                                /* facility of pri */                                            | 24557    47
   123       |#define LOG_FAC(p)      (((p) & LOG_FACMASK) >> 3)                                               | 24558    47
   124       |                                                                                                 | 24559    47
   125       |#ifdef SYSLOG_NAMES                                                                              | 24560    47
   126       |CODE facilitynames[] = {                                                                         | 24561    47
   127       |        { "auth",       LOG_AUTH,       },                                                       | 24562    47
   128       |        { "authpriv",   LOG_AUTHPRIV,   },                                                       | 24563    47
   129       |        { "console",    LOG_CONSOLE,    },                                                       | 24564    47
   130       |        { "cron",       LOG_CRON,       },                                                       | 24565    47
   131       |        { "daemon",     LOG_DAEMON,     },                                                       | 24566    47
   132       |        { "ftp",        LOG_FTP,        },                                                       | 24567    47
   133       |        { "kern",       LOG_KERN,       },                                                       | 24568    47
   134       |        { "lpr",        LOG_LPR,        },                                                       | 24569    47
   135       |        { "mail",       LOG_MAIL,       },                                                       | 24570    47
   136       |        { "mark",       INTERNAL_MARK,  },      /* INTERNAL */                                   | 24571    47
   137       |        { "news",       LOG_NEWS,       },                                                       | 24572    47
   138       |        { "ntp",        LOG_NTP,        },                                                       | 24573    47
   139       |        { "security",   LOG_SECURITY,   },                                                       | 24574    47
   140       |        { "syslog",     LOG_SYSLOG,     },                                                       | 24575    47
   141       |        { "user",       LOG_USER,       },                                                       | 24576    47
   142       |        { "uucp",       LOG_UUCP,       },                                                       | 24577    47
   143       |        { "local0",     LOG_LOCAL0,     },                                                       | 24578    47
   144       |        { "local1",     LOG_LOCAL1,     },                                                       | 24579    47
   145       |        { "local2",     LOG_LOCAL2,     },                                                       | 24580    47
   146       |        { "local3",     LOG_LOCAL3,     },                                                       | 24581    47
   147       |        { "local4",     LOG_LOCAL4,     },                                                       | 24582    47
   148       |        { "local5",     LOG_LOCAL5,     },                                                       | 24583    47
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   473


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   149       |        { "local6",     LOG_LOCAL6,     },                                                       | 24584    47
   150       |        { "local7",     LOG_LOCAL7,     },                                                       | 24585    47
   151       |        { NULL,         -1,             }                                                        | 24586    47
   152       |};                                                                                               | 24587    47
   153       |#endif                                                                                           | 24588    47
   154       |                                                                                                 | 24589    47
   155       |#ifdef _KERNEL                                                                                   | 24590    47
   156       |#define LOG_PRINTF      -1      /* pseudo-priority to indicate use of printf */                  | 24591    47
   157       |#endif                                                                                           | 24592    47
   158       |                                                                                                 | 24593    47
   159       |/*                                                                                               | 24594    47
   160       | * arguments to setlogmask.                                                                      | 24595    47
   161       | */                                                                                              | 24596    47
   162       |#define LOG_MASK(pri)   (1 << (pri))            /* mask for one priority */                      | 24597    47
   163       |#define LOG_UPTO(pri)   ((1 << ((pri)+1)) - 1)  /* all priorities through pri */                 | 24598    47
   164       |                                                                                                 | 24599    47
   165       |/*                                                                                               | 24600    47
   166       | * Option flags for openlog.                                                                     | 24601    47
   167       | *                                                                                               | 24602    47
   168       | * LOG_ODELAY no longer does anything.                                                           | 24603    47
   169       | * LOG_NDELAY is the inverse of what it used to be.                                              | 24604    47
   170       | */                                                                                              | 24605    47
   171       |#define LOG_PID         0x01    /* log the pid with each message */                              | 24606    47
   172       |#define LOG_CONS        0x02    /* log on the console if errors in sending */                    | 24607    47
   173       |#define LOG_ODELAY      0x04    /* delay open until first syslog() (default) */                  | 24608    47
   174       |#define LOG_NDELAY      0x08    /* don't delay open */                                           | 24609    47
   175       |#define LOG_NOWAIT      0x10    /* don't wait for console forks: DEPRECATED */                   | 24610    47
   176       |#define LOG_PERROR      0x20    /* log to stderr as well */                                      | 24611    47
   177       |                                                                                                 | 24612    47
   178       |#ifdef _KERNEL                                                                                   | 24613    47
   179       |                                                                                                 | 24614    47
   180       |#else /* not _KERNEL */                                                                          | 24615    47
   181       |                                                                                                 | 24616    47
   182       |/*                                                                                               | 24617    47
   183       | * Don't use va_list in the vsyslog() prototype.   Va_list is typedef'd in two                   | 24618    47
   184       | * places (<machine/varargs.h> and <machine/stdarg.h>), so if we include one                     | 24619    47
   185       | * of them here we may collide with the utility's includes.  It's unreasonable                   | 24620    47
   186       | * for utilities to have to include one of them to include syslog.h, so we get                   | 24621    47
   187       | * __va_list from <sys/_types.h> and use it.                                                     | 24622    47
   188       | */                                                                                              | 24623    47
   189       |#include <sys/cdefs.h>                                                                           | 24624    47
     1       |/* release 2.25.00 */                                                                            | 24625     4
     2       |#pragma pack()                                                                                   | 24626     4
     3       |/*                                                                                               | 24627     4
     4       | * Copyright (c) 1991, 1993                                                                      | 24628     4
     5       | *      The Regents of the University of California.  All rights reserved.                       | 24629     4
     6       | *                                                                                               | 24630     4
     7       | * This code is derived from software contributed to Berkeley by                                 | 24631     4
     8       | * Berkeley Software Design, Inc.                                                                | 24632     4
     9       | *                                                                                               | 24633     4
    10       | * Redistribution and use in source and binary forms, with or without                            | 24634     4
    11       | * modification, are permitted provided that the following conditions                            | 24635     4
    12       | * are met:                                                                                      | 24636     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   474


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    13       | * 1. Redistributions of source code must retain the above copyright                             | 24637     4
    14       | *    notice, this list of conditions and the following disclaimer.                              | 24638     4
    15       | * 2. Redistributions in binary form must reproduce the above copyright                          | 24639     4
    16       | *    notice, this list of conditions and the following disclaimer in the                        | 24640     4
    17       | *    documentation and/or other materials provided with the distribution.                       | 24641     4
    18       | * 3. All advertising materials mentioning features or use of this software                      | 24642     4
    19       | *    must display the following acknowledgement:                                                | 24643     4
    20       | *      This product includes software developed by the University of                            | 24644     4
    21       | *      California, Berkeley and its contributors.                                               | 24645     4
    22       | * 4. Neither the name of the University nor the names of its contributors                       | 24646     4
    23       | *    may be used to endorse or promote products derived from this software                      | 24647     4
    24       | *    without specific prior written permission.                                                 | 24648     4
    25       | *                                                                                               | 24649     4
    26       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 24650     4
    27       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 24651     4
    28       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 24652     4
    29       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 24653     4
    30       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 24654     4
    31       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 24655     4
    32       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 24656     4
    33       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 24657     4
    34       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 24658     4
    35       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 24659     4
    36       | * SUCH DAMAGE.                                                                                  | 24660     4
    37       | *                                                                                               | 24661     4
    38       | *      @(#)cdefs.h     8.8 (Berkeley) 1/9/95                                                    | 24662     4
    39       | */                                                                                              | 24663     4
    40       |                                                                                                 | 24664     4
    41       |#ifndef _SYS_CDEFS_H_                                                                            | 24665     4
    42       |#define _SYS_CDEFS_H_                                                                            | 24666     4
    43       |                                                                                                 | 24667     4
    44       |#if defined(__cplusplus)                                                                         | 24668     4
    45       |#define __BEGIN_DECLS   extern "C" {                                                             | 24669     4
    46       |#define __END_DECLS     }                                                                        | 24670     4
    47       |#else                                                                                            | 24671     4
    48       |#define __BEGIN_DECLS                                                                            | 24672     4
    49       |#define __END_DECLS                                                                              | 24673     4
    50       |#endif                                                                                           | 24674     4
    51       |                                                                                                 | 24675     4
    52       |/*                                                                                               | 24676     4
    53       | * This code has been put in place to help reduce the addition of                                | 24677     4
    54       | * compiler specific defines in the code.  It helps to aid in                                    | 24678     4
    55       | * having a compiler-agnostic source tree.                                                       | 24679     4
    56       | */                                                                                              | 24680     4
    57       |#define __CC_SUPPORTS_INLINE 1                                                                   | 24681     4
    58       |#define __CC_SUPPORTS___INLINE 1                                                                 | 24682     4
    59       |#define __CC_SUPPORTS___INLINE__ 1                                                               | 24683     4
    60       |                                                                                                 | 24684     4
    61       |#define __CC_SUPPORTS___FUNC__ 1                                                                 | 24685     4
    62       |                                                                                                 | 24686     4
    63       |                                                                                                 | 24687     4
    64       |/*                                                                                               | 24688     4
    65       | * The __CONCAT macro is used to concatenate parts of symbol names, e.g.                         | 24689     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   475


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    66       | * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.                          | 24690     4
    67       | * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI                         | 24691     4
    68       | * mode -- there must be no spaces between its arguments, and for nested                         | 24692     4
    69       | * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also                        | 24693     4
    70       | * concatenate double-quoted strings produced by the __STRING macro, but                         | 24694     4
    71       | * this only works with ANSI C.                                                                  | 24695     4
    72       | *                                                                                               | 24696     4
    73       | * __XSTRING is like __STRING, but it expands any macros in its argument                         | 24697     4
    74       | * first.  It is only available with ANSI C.                                                     | 24698     4
    75       | */                                                                                              | 24699     4
    76       |#if defined(__STDC__) || defined(__cplusplus)                                                    | 24700     4
    77       |#define __P(protos)     protos          /* full-blown ANSI C */                                  | 24701     4
    78       |#define __CONCAT1(x,y)  x ## y                                                                   | 24702     4
    79       |#define __CONCAT(x,y)   __CONCAT1(x,y)                                                           | 24703     4
    80       |#define __STRING(x)     #x              /* stringify without expanding x */                      | 24704     4
    81       |#define __XSTRING(x)    __STRING(x)     /* expand x, then stringify */                           | 24705     4
    82       |                                                                                                 | 24706     4
    83       |#define __const         const           /* define reserved names to standard */                  | 24707     4
    84       |#define __signed        signed                                                                   | 24708     4
    85       |#define __volatile      volatile                                                                 | 24709     4
    86       |#if defined(__cplusplus)                                                                         | 24710     4
    87       |#define __inline        inline          /* convert to C++ keyword */                             | 24711     4
    88       |#else                                                                                            | 24712     4
    89       |#define __inline        __inline__      /* Use the Systems/C keyword */                          | 24713     4
    90       |#endif /* !__cplusplus */                                                                        | 24714     4
    91       |                                                                                                 | 24715     4
    92       |#else   /* !(__STDC__ || __cplusplus) */                                                         | 24716     4
    93       |#define __P(protos)     ()              /* traditional C preprocessor */                         | 24717     4
    94       |#define __CONCAT(x,y)   x/**/y                                                                   | 24718     4
    95       |#define __STRING(x)     "x"                                                                      | 24719     4
    96       |                                                                                                 | 24720     4
    97       |#define __const                         /* delete pseudo-ANSI C keywords */                      | 24721     4
    98       |#define __inline                                                                                 | 24722     4
    99       |#define __signed                                                                                 | 24723     4
   100       |#define __volatile                                                                               | 24724     4
   101       |/*                                                                                               | 24725     4
   102       | * In non-ANSI C environments, new programs will want ANSI-only C keywords                       | 24726     4
   103       | * deleted from the program and old programs will want them left alone.                          | 24727     4
   104       | * When using a compiler other than Dignus, programs using the ANSI C keywords                   | 24728     4
   105       | * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.                    | 24729     4
   106       | */                                                                                              | 24730     4
   107       |#ifndef NO_ANSI_KEYWORDS                                                                         | 24731     4
   108       |#define const                           /* delete ANSI C keywords */                             | 24732     4
   109       |#define inline                                                                                   | 24733     4
   110       |#define signed                                                                                   | 24734     4
   111       |#define volatile                                                                                 | 24735     4
   112       |#endif  /* !NO_ANSI_KEYWORDS */                                                                  | 24736     4
   113       |#endif  /* !(__STDC__ || __cplusplus) */                                                         | 24737     4
   114       |                                                                                                 | 24738     4
   115       |/*                                                                                               | 24739     4
   116       | * Compiler-dependent macros to help declare dead (non-returning) and                            | 24740     4
   117       | * pure (no side effects) functions, and unused variables.                                       | 24741     4
   118       | */                                                                                              | 24742     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   476


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   119       |#define __dead2 __attribute__((__noreturn__))                                                    | 24743     4
   120       |#define __pure  __attribute__((__pure__))                                                        | 24744     4
   121       |#define __pure2 __attribute__((__const__))                                                       | 24745     4
   122       |#define __unused                                                                                 | 24746     4
   123       |#define __aligned(x)                                                                             | 24747     4
   124       |#define __section(x)                                                                             | 24748     4
   125       |#define __nonnull(x)                                                                             | 24749     4
   126       |#define __used                                                                                   | 24750     4
   127       |                                                                                                 | 24751     4
   128       |#define __always_inline __attribute__((__always_inline__))                                       | 24752     4
   129       |#define __noinline      __attribute__((__noinline__))                                            | 24753     4
   130       |                                                                                                 | 24754     4
   131       |#if __STDC_VERSION__ < 199901                                                                    | 24755     4
   132       |#define __func__  NULL                                                                           | 24756     4
   133       |#endif                                                                                           | 24757     4
   134       |                                                                                                 | 24758     4
   135       |#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901                                      | 24759     4
   136       |#define __LONG_LONG_SUPPORTED                                                                    | 24760     4
   137       |#endif                                                                                           | 24761     4
   138       |                                                                                                 | 24762     4
   139       |/* Systems/C recognizes they keyword __restrict__ in both                                        | 24763     4
   140       | * ANSI and non-ANSI mode to indicate C99 restrict semantics.                                    | 24764     4
   141       | **/                                                                                             | 24765     4
   142       |#ifndef __cplusplus                                                                              | 24766     4
   143       |#define __restrict __restrict__                                                                  | 24767     4
   144       |#else                                                                                            | 24768     4
   145       |/* Systems/C++ does not */                                                                       | 24769     4
   146       |#define __restrict                                                                               | 24770     4
   147       |#endif                                                                                           | 24771     4
   148       |                                                                                                 | 24772     4
   149       |/*                                                                                               | 24773     4
   150       | * define-away GCC-specific branch-prediction markers                                            | 24774     4
   151       | */                                                                                              | 24775     4
   152       |#define __predict_true(exp)     (exp)                                                            | 24776     4
   153       |#define __predict_false(exp)    (exp)                                                            | 24777     4
   154       |                                                                                                 | 24778     4
   155       |                                                                                                 | 24779     4
   156       |/*                                                                                               | 24780     4
   157       | * provide a definition of __offsetof(), <stddef.h> and                                          | 24781     4
   158       | * <sys/types.h> reference __offsetof().                                                         | 24782     4
   159       | *                                                                                               | 24783     4
   160       | * For Systems/C, the C compiler recognizes __offsetof(),                                        | 24784     4
   161       | * but we need a definition for versions of C++ prior to 1.85.52.                                | 24785     4
   162       | */                                                                                              | 24786     4
   163       |#if defined(__cplusplus) && (__SYSC_VER__ < (18600))                                             | 24787     4
   164       |#undef __offsetof                                                                                | 24788     4
   165       |#define __offsetof(type, field)  ((size_t)(&((type *)0)->field))                                 | 24789     4
   166       |#endif                                                                                           | 24790     4
   167       |                                                                                                 | 24791     4
   168       |/*                                                                                               | 24792     4
   169       | * Compiler-dependent macros to declare that functions take printf-like                          | 24793     4
   170       | * or scanf-like arguments.                                                                      | 24794     4
   171       | */                                                                                              | 24795     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   477


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   172       |#define __printflike(fmtarg, firstvararg)                                                        | 24796     4
   173       |#define __scanflike(fmtarg, firstvararg)                                                         | 24797     4
   174       |#define __format_arg(fmtarg)                                                                     | 24798     4
   175       |#define __printf0like(fmtarg, firstvararg)                                                       | 24799     4
   176       |                                                                                                 | 24800     4
   177       |/* Compiler-dependent macros that rely on specific extensions. */                                | 24801     4
   178       |#define __printf0like(fmtarg, firstvararg)                                                       | 24802     4
   179       |                                                                                                 | 24803     4
   180       |  /* intended to generate a weak reference as an alias */                                        | 24804     4
   181       |#define __weak_reference(sym,alias)                                                              | 24805     4
   182       |  /* If this symbol is refrenced, cause the linker to emit "msg" */                              | 24806     4
   183       |#define __warn_references(sym,msg)                                                               | 24807     4
   184       |                                                                                                 | 24808     4
   185       | /* This places the string into the resulting object.  It should */                              | 24809     4
   186       | /* probably become #pragma ident */                                                             | 24810     4
   187       |#define __IDSTRING(name,string) static const char name[] __unused = string                       | 24811     4
   188       |                                                                                                 | 24812     4
   189       |#ifndef __RCSID                                                                                  | 24813     4
   190       |#define __RCSID(s)      __IDSTRING(rcsid,s)                                                      | 24814     4
   191       |#endif                                                                                           | 24815     4
   192       |                                                                                                 | 24816     4
   193       |/*                                                                                               | 24817     4
   194       | * Embed the rcs id of a source file in the resulting library.                                   | 24818     4
   195       | * Usage:                                                                                        | 24819     4
   196       | *      __SYSCID("Id: src/sys/sys/cdefs.h,v 1.28.2.8 2002/09/18                                  | 24820     4
   197       |*                                            04:05:13 mikeh Exp $");                             | 24821     4
   198       | */                                                                                              | 24822     4
   199       |#ifndef __SYSCID                                                                                 | 24823     4
   200       |#if !defined(lint) && !defined(STRIP_SYSCID)                                                     | 24824     4
   201       |#define __SYSCID(s)     __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)                                | 24825     4
   202       |#else                                                                                            | 24826     4
   203       |#define __SYSCID(s)     struct __hack                                                            | 24827     4
   204       |#endif                                                                                           | 24828     4
   205       |#endif                                                                                           | 24829     4
   206       |                                                                                                 | 24830     4
   207       |#ifndef __RCSID_SOURCE                                                                           | 24831     4
   208       |#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)                                             | 24832     4
   209       |#endif                                                                                           | 24833     4
   210       |                                                                                                 | 24834     4
   211       |#ifndef __COPYRIGHT                                                                              | 24835     4
   212       |#define __COPYRIGHT(s)  __IDSTRING(copyright,s)                                                  | 24836     4
   213       |#endif                                                                                           | 24837     4
   214       |                                                                                                 | 24838     4
   215       |                                                                                                 | 24839     4
   216       |#ifndef __DECONST                                                                                | 24840     4
   217       |#define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))                           | 24841     4
   218       |#endif                                                                                           | 24842     4
   219       |                                                                                                 | 24843     4
   220       |#ifndef __DEVOLATILE                                                                             | 24844     4
   221       |#define __DEVOLATILE(type, var) ((type)(uintptr_t)(volatile void *)(var))                        | 24845     4
   222       |#endif                                                                                           | 24846     4
   223       |                                                                                                 | 24847     4
   224       |#ifndef __DEQUALIFY                                                                              | 24848     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   478


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   225       |#define __DEQUALIFY(type, var)  ((type)(uintptr_t)(const volatile void *)(var))                  | 24849     4
   226       |#endif                                                                                           | 24850     4
   227       |                                                                                                 | 24851     4
   228       |                                                                                                 | 24852     4
   229       |/*-                                                                                              | 24853     4
   230       | * The following definitions are an extension of the behavior originally                         | 24854     4
   231       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 24855     4
   232       | * POSIX.1 requires that the macros we test be defined before any standard                       | 24856     4
   233       | * header file is included.                                                                      | 24857     4
   234       | *                                                                                               | 24858     4
   235       | * Here's a quick run-down of the versions:                                                      | 24859     4
   236       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 24860     4
   237       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 24861     4
   238       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 24862     4
   239       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 24863     4
   240       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 24864     4
   241       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 24865     4
   242       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 24866     4
   243       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 24867     4
   244       | *                                                                                               | 24868     4
   245       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 24869     4
   246       | * Specification, defines a feature-test macro which indicates the version of                    | 24870     4
   247       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 24871     4
   248       | *                                                                                               | 24872     4
   249       | * Our macros begin with two underscores to avoid namespace screwage.                            | 24873     4
   250       | */                                                                                              | 24874     4
   251       |                                                                                                 | 24875     4
   252       |/*                                                                                               | 24876     4
   253       | * If no special macro was specified, make the DragonFly extensions                              | 24877     4
   254       | * available. Also make them available when requested so.                                        | 24878     4
   255       | */                                                                                              | 24879     4
   256       |#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE) && \                                   | 24880     4
   257       |    !defined(_ANSI_SOURCE) && !defined(_C99_SOURCE)) || \                                        | 24881     4
   258       |    defined(_DRAGONFLY_SOURCE) || defined(_NETBSD_SOURCE)                                        | 24882     4
   259       |#define __DF_VISIBLE    1                                                                        | 24883     4
   260       |#else                                                                                            | 24884     4
   261       |#define __DF_VISIBLE    0                                                                        | 24885     4
   262       |#endif                                                                                           | 24886     4
   263       |                                                                                                 | 24887     4
   264       |/*-                                                                                              | 24888     4
   265       | * The following definitions are an extension of the behavior originally                         | 24889     4
   266       | * implemented in <sys/_posix.h>, but with a different level of granularity.                     | 24890     4
   267       | * POSIX.1 requires that the macros we test be defined before any standard                       | 24891     4
   268       | * header file is included.                                                                      | 24892     4
   269       | *                                                                                               | 24893     4
   270       | * Here's a quick run-down of the versions:                                                      | 24894     4
   271       | *  defined(_POSIX_SOURCE)              1003.1-1988                                              | 24895     4
   272       | *  _POSIX_C_SOURCE == 1                1003.1-1990                                              | 24896     4
   273       | *  _POSIX_C_SOURCE == 2                1003.2-1992 C Language Binding Option                    | 24897     4
   274       | *  _POSIX_C_SOURCE == 199309           1003.1b-1993                                             | 24898     4
   275       | *  _POSIX_C_SOURCE == 199506           1003.1c-1995, 1003.1i-1995,                              | 24899     4
   276       | *                                      and the omnibus ISO/IEC 9945-1: 1996                     | 24900     4
   277       | *  _POSIX_C_SOURCE == 200112           1003.1-2001                                              | 24901     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   479


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   278       | *  _POSIX_C_SOURCE == 200809           1003.1-2008                                              | 24902     4
   279       | *                                                                                               | 24903     4
   280       | * In addition, the X/Open Portability Guide, which is now the Single UNIX                       | 24904     4
   281       | * Specification, defines a feature-test macro which indicates the version of                    | 24905     4
   282       | * that specification, and which subsumes _POSIX_C_SOURCE.                                       | 24906     4
   283       | *                                                                                               | 24907     4
   284       | * Our macros begin with two underscores to avoid namespace screwage.                            | 24908     4
   285       | */                                                                                              | 24909     4
   286       |                                                                                                 | 24910     4
   287       |/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */                            | 24911     4
   288       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1                                             | 24912     4
   289       |#undef _POSIX_C_SOURCE          /* Probably illegal, but beyond caring now. */                   | 24913     4
   290       |#define _POSIX_C_SOURCE         199009                                                           | 24914     4
   291       |#endif                                                                                           | 24915     4
   292       |                                                                                                 | 24916     4
   293       |/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */                            | 24917     4
   294       |#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2                                             | 24918     4
   295       |#undef _POSIX_C_SOURCE                                                                           | 24919     4
   296       |#define _POSIX_C_SOURCE         199209                                                           | 24920     4
   297       |#endif                                                                                           | 24921     4
   298       |                                                                                                 | 24922     4
   299       |/* Deal with various X/Open Portability Guides and Single UNIX Spec. */                          | 24923     4
   300       |#ifdef _XOPEN_SOURCE                                                                             | 24924     4
   301       |#if _XOPEN_SOURCE - 0 >= 700                                                                     | 24925     4
   302       |#define __XSI_VISIBLE           700                                                              | 24926     4
   303       |#undef _POSIX_C_SOURCE                                                                           | 24927     4
   304       |#define _POSIX_C_SOURCE         200809                                                           | 24928     4
   305       |#elif _XOPEN_SOURCE - 0 >= 600                                                                   | 24929     4
   306       |#define __XSI_VISIBLE           600                                                              | 24930     4
   307       |#undef _POSIX_C_SOURCE                                                                           | 24931     4
   308       |#define _POSIX_C_SOURCE         200112                                                           | 24932     4
   309       |#elif _XOPEN_SOURCE - 0 >= 500                                                                   | 24933     4
   310       |#define __XSI_VISIBLE           500                                                              | 24934     4
   311       |#undef _POSIX_C_SOURCE                                                                           | 24935     4
   312       |#define _POSIX_C_SOURCE         199506                                                           | 24936     4
   313       |#endif                                                                                           | 24937     4
   314       |#endif                                                                                           | 24938     4
   315       |                                                                                                 | 24939     4
   316       |/*                                                                                               | 24940     4
   317       | * Deal with all versions of POSIX.  The ordering relative to the tests above is                 | 24941     4
   318       | * important.                                                                                    | 24942     4
   319       | */                                                                                              | 24943     4
   320       |#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)                                          | 24944     4
   321       |#define _POSIX_C_SOURCE         198808                                                           | 24945     4
   322       |#endif                                                                                           | 24946     4
   323       |#ifdef _POSIX_C_SOURCE                                                                           | 24947     4
   324       |#if _POSIX_C_SOURCE >= 200809                                                                    | 24948     4
   325       |#define __POSIX_VISIBLE         200809                                                           | 24949     4
   326       |#define __ISO_C_VISIBLE         1999                                                             | 24950     4
   327       |#elif _POSIX_C_SOURCE >= 200112                                                                  | 24951     4
   328       |#define __POSIX_VISIBLE         200112                                                           | 24952     4
   329       |#define __ISO_C_VISIBLE         1999                                                             | 24953     4
   330       |#elif _POSIX_C_SOURCE >= 199506                                                                  | 24954     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   480


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   331       |#define __POSIX_VISIBLE         199506                                                           | 24955     4
   332       |#define __ISO_C_VISIBLE         1990                                                             | 24956     4
   333       |#elif _POSIX_C_SOURCE >= 199309                                                                  | 24957     4
   334       |#define __POSIX_VISIBLE         199309                                                           | 24958     4
   335       |#define __ISO_C_VISIBLE         1990                                                             | 24959     4
   336       |#elif _POSIX_C_SOURCE >= 199209                                                                  | 24960     4
   337       |#define __POSIX_VISIBLE         199209                                                           | 24961     4
   338       |#define __ISO_C_VISIBLE         1990                                                             | 24962     4
   339       |#elif _POSIX_C_SOURCE >= 199009                                                                  | 24963     4
   340       |#define __POSIX_VISIBLE         199009                                                           | 24964     4
   341       |#define __ISO_C_VISIBLE         1990                                                             | 24965     4
   342       |#else                                                                                            | 24966     4
   343       |#define __POSIX_VISIBLE         198808                                                           | 24967     4
   344       |#define __ISO_C_VISIBLE         0                                                                | 24968     4
   345       |#endif /* _POSIX_C_SOURCE */                                                                     | 24969     4
   346       |#else                                                                                            | 24970     4
   347       |/*-                                                                                              | 24971     4
   348       | * Deal with _ANSI_SOURCE:                                                                       | 24972     4
   349       | * If it is defined, and no other compilation environment is explicitly                          | 24973     4
   350       | * requested, then define our internal feature-test macros to zero.  This                        | 24974     4
   351       | * makes no difference to the preprocessor (undefined symbols in preprocessing                   | 24975     4
   352       | * expressions are defined to have value zero), but makes it more convenient for                 | 24976     4
   353       | * a test program to print out the values.                                                       | 24977     4
   354       | *                                                                                               | 24978     4
   355       | * If a program mistakenly defines _ANSI_SOURCE and some other macro such as                     | 24979     4
   356       | * _POSIX_C_SOURCE, we will assume that it wants the broader compilation                         | 24980     4
   357       | * environment (and in fact we will never get here).                                             | 24981     4
   358       | */                                                                                              | 24982     4
   359       |#if defined(_ANSI_SOURCE)       /* Hide almost everything. */                                    | 24983     4
   360       |#define __POSIX_VISIBLE         0                                                                | 24984     4
   361       |#define __XSI_VISIBLE           0                                                                | 24985     4
   362       |#define __BSD_VISIBLE           0                                                                | 24986     4
   363       |#define __ISO_C_VISIBLE         1990                                                             | 24987     4
   364       |#define __EXT1_VISIBLE          0                                                                | 24988     4
   365       |#elif defined(_C99_SOURCE)      /* Localism to specify strict C99 env. */                        | 24989     4
   366       |#define __POSIX_VISIBLE         0                                                                | 24990     4
   367       |#define __XSI_VISIBLE           0                                                                | 24991     4
   368       |#define __BSD_VISIBLE           0                                                                | 24992     4
   369       |#define __ISO_C_VISIBLE         1999                                                             | 24993     4
   370       |#define __EXT1_VISIBLE          0                                                                | 24994     4
   371       |#elif defined(_C11_SOURCE)      /* Localism to specify strict C11 env. */                        | 24995     4
   372       |#define __POSIX_VISIBLE         0                                                                | 24996     4
   373       |#define __XSI_VISIBLE           0                                                                | 24997     4
   374       |#define __BSD_VISIBLE           0                                                                | 24998     4
   375       |#define __ISO_C_VISIBLE         2011                                                             | 24999     4
   376       |#define __EXT1_VISIBLE          0                                                                | 25000     4
   377       |#else                           /* Default environment: show everything. */                      | 25001     4
   378       |#define __POSIX_VISIBLE         200809                                                           | 25002     4
   379       |#define __XSI_VISIBLE           700                                                              | 25003     4
   380       |#define __BSD_VISIBLE           1                                                                | 25004     4
   381       |#define __ISO_C_VISIBLE         2011                                                             | 25005     4
   382       |#define __EXT1_VISIBLE          1                                                                | 25006     4
   383       |#endif                                                                                           | 25007     4
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   481


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   384       |#endif                                                                                           | 25008     4
   385       |                                                                                                 | 25009     4
   386       |/* User override __EXT1_VISIBLE */                                                               | 25010     4
   387       |#if defined(__STDC_WANT_LIB_EXT1__)                                                              | 25011     4
   388       |#undef  __EXT1_VISIBLE                                                                           | 25012     4
   389       |#if __STDC_WANT_LIB_EXT1__                                                                       | 25013     4
   390       |#define __EXT1_VISIBLE          1                                                                | 25014     4
   391       |#else                                                                                            | 25015     4
   392       |#define __EXT1_VISIBLE          0                                                                | 25016     4
   393       |#endif                                                                                           | 25017     4
   394       |#endif /* __STDC_WANT_LIB_EXT1__ */                                                              | 25018     4
   395       |                                                                                                 | 25019     4
   396       |#if defined(__370__) || defined(__mips) || defined(__powerpc64__)                                | 25020     4
   397       |#define __NO_TLS 1                                                                               | 25021     4
   398       |#endif                                                                                           | 25022     4
   399       |                                                                                                 | 25023     4
   400       |                                                                                                 | 25024     4
   401       |/* easier than stripping __FBSDID() from sources - Greg 2008/07/28 */                            | 25025     4
   402       |#define __FBSDID(x)                                                                              | 25026     4
   403       |                                                                                                 | 25027     4
   404       |#endif /* !_SYS_CDEFS_H_ */                                                                      | 25028     4
   405       |#pragma pack(reset)                                                                              | 25029     4
   190       |#include <sys/_types.h>                                                                          | 25030    47
     1       |/* release 2.25.00 */                                                                            | 25031     6
     2       |#pragma pack()                                                                                   | 25032     6
     3       |/*-                                                                                              | 25033     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 25034     6
     5       | * All rights reserved.                                                                          | 25035     6
     6       | *                                                                                               | 25036     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 25037     6
     8       | * modification, are permitted provided that the following conditions                            | 25038     6
     9       | * are met:                                                                                      | 25039     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 25040     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 25041     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 25042     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 25043     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 25044     6
    15       | *                                                                                               | 25045     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 25046     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 25047     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 25048     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 25049     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 25050     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 25051     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 25052     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 25053     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 25054     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 25055     6
    26       | * SUCH DAMAGE.                                                                                  | 25056     6
    27       | *                                                                                               | 25057     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 25058     6
    29       | */                                                                                              | 25059     6
    30       |                                                                                                 | 25060     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   482


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    31       |#ifndef _SYS__TYPES_H_                                                                           | 25061     6
    32       |#define _SYS__TYPES_H_                                                                           | 25062     6
    33       |                                                                                                 | 25063     6
    34       |#include <sys/cdefs.h>                                                                           | 25064     6
    35       |#include <machine/_types.h>                                                                      | 25065     6
    36       |                                                                                                 | 25066     6
    37       |/*                                                                                               | 25067     6
    38       | * Standard type definitions.                                                                    | 25068     6
    39       | */                                                                                              | 25069     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 25070     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 25071     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 25072     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 25073     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 25074     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 25075     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 25076     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 25077     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 25078     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 25079     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 25080     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 25081     6
    52       |typedef int             __nl_item;                                                               | 25082     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 25083     6
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 25084     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 25085     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 25086     6
    57       |                                        /* signed, because of legacy code */                     | 25087     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 25088     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 25089     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 25090     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 25091     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 25092     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 25093     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 25094     6
    65       |                                                                                                 | 25095     6
    66       |/*                                                                                               | 25096     6
    67       | * Unusual type definitions.                                                                     | 25097     6
    68       | */                                                                                              | 25098     6
    69       |/*                                                                                               | 25099     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 25100     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 25101     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 25102     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 25103     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 25104     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 25105     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 25106     6
    77       | *                                                                                               | 25107     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 25108     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 25109     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 25110     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 25111     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 25112     6
    83       | */                                                                                              | 25113     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   483


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    84       |#ifdef __cplusplus                                                                               | 25114     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 25115     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 25116     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 25117     6
    88       |#else                                                                                            | 25118     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 25119     6
    90       |#endif                                                                                           | 25120     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 25121     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 25122     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 25123     6
    94       |                                                                                                 | 25124     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 25125     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 25126     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 25127     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 25128     6
    99       |#endif                                                                                           | 25129     6
   100       |                                                                                                 | 25130     6
   101       |#if !defined(__cplusplus)                                                                        | 25131     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 25132     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 25133     6
   104       |#endif                                                                                           | 25134     6
   105       |                                                                                                 | 25135     6
   106       |                                                                                                 | 25136     6
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 25137     6
   108       |                                                                                                 | 25138     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 25139     6
   110       |                                                                                                 | 25140     6
   111       |/*                                                                                               | 25141     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 25142     6
   113       | * stream conversions.                                                                           | 25143     6
   114       | */                                                                                              | 25144     6
   115       |typedef union {                                                                                  | 25145     6
   116       |        char            __mbstate8[128];                                                         | 25146     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 25147     6
   118       |} __mbstate_t;                                                                                   | 25148     6
   119       |                                                                                                 | 25149     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 25150     6
   121       |#pragma pack(reset)                                                                              | 25151     6
   191       |                                                                                                 | 25152    47
   192       |__BEGIN_DECLS                                                                                    | 25153    47
   192       +                                                                                                 + 25153    47
   193       |void    closelog(void);                                                                          | 25154    47
   194       |void    openlog(const char *, int, int);                                                         | 25155    47
   195       |int     setlogmask(int);                                                                         | 25156    47
   196       |void    syslog(int, const char *, ...) __printflike(2, 3);                                       | 25157    47
   196       +void    syslog(int, const char *, ...) ;                                                         + 25157    47
   197       |void    vsyslog(int, const char *, __va_list) __printflike(2, 0);                                | 25158    47
   197       +void    vsyslog(int, const char *, __va_list) ;                                                  + 25158    47
   198       |__END_DECLS                                                                                      | 25159    47
   198       +                                                                                                 + 25159    47
   199       |                                                                                                 | 25160    47
   200       |#endif /* !_KERNEL */                                                                            | 25161    47
   201       |                                                                                                 | 25162    47
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   484


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   202       |#endif                                                                                           | 25163    47
   203       |#pragma pack(reset)                                                                              | 25164    47
    80       |#else                                                                                            | 25165    18
    81       |#define LOG_EMERG   0                                                                            | 25166    18
    82       |#define LOG_ALERT   1                                                                            | 25167    18
    83       |#define LOG_CRIT    2                                                                            | 25168    18
    84       |#define LOG_ERR     3                                                                            | 25169    18
    85       |#define LOG_WARNING 4                                                                            | 25170    18
    86       |#define LOG_NOTICE  5                                                                            | 25171    18
    87       |#define LOG_INFO    6                                                                            | 25172    18
    88       |#define LOG_DEBUG   7                                                                            | 25173    18
    89       |#endif                                                                                           | 25174    18
    90       |                                                                                                 | 25175    18
    91       |                                                                                                 | 25176    18
    92       |/* Debug assert, only enabled with --enable-devel */                                             | 25177    18
    93       |#if ENABLE_DEVEL == 1                                                                            | 25178    18
    94       |#define rd_dassert(cond) rd_assert(cond)                                                         | 25179    18
    95       |#else                                                                                            | 25180    18
    96       |#define rd_dassert(cond)  do {} while (0)                                                        | 25181    18
    97       |#endif                                                                                           | 25182    18
    98       |                                                                                                 | 25183    18
    98       +                                                                                                 + 25183    18
    99       |                                                                                                 | 25184    18
   100       |/** Assert if reached */                                                                         | 25185    18
   101       |#define RD_NOTREACHED() rd_assert(!*"/* NOTREACHED */ violated")                                 | 25186    18
   102       |                                                                                                 | 25187    18
   103       |/** Assert if reached */                                                                         | 25188    18
   104       |#define RD_BUG(...) do {                                                \                        | 25189    18
   105       |                fprintf(stderr,  "INTERNAL ERROR: librdkafka %s:%d: ",  \                        | 25190    18
   106       |                        __FUNCTION__, __LINE__);                        \                        | 25191    18
   107       |                fprintf(stderr, __VA_ARGS__);                           \                        | 25192    18
   108       |                fprintf(stderr, "\n");                                  \                        | 25193    18
   109       |                rd_assert(!*"INTERNAL ERROR IN LIBRDKAFKA");            \                        | 25194    18
   110       |        } while (0)                                                                              | 25195    18
   111       |                                                                                                 | 25196    18
   112       |                                                                                                 | 25197    18
   113       |                                                                                                 | 25198    18
   114       |/**                                                                                              | 25199    18
   115       |* Allocator wrappers.                                                                            | 25200    18
   116       |* We serve under the premise that if a (small) memory                                            | 25201    18
   117       |* allocation fails all hope is lost and the application                                          | 25202    18
   118       |* will fail anyway, so no need to handle it handsomely.                                          | 25203    18
   119       |*/                                                                                               | 25204    18
   120       |static RD_INLINE RD_UNUSED void *rd_calloc(size_t num, size_t sz) {                              | 25205    18
   120       +static inline __attribute__((unused)) void *rd_calloc(size_t num, size_t sz) {                   + 25205    18
   121       |        void *p = calloc(num, sz);                                                               | 25206    18
   122       |        rd_assert(p);                                                                            | 25207    18
   122       +                ((p) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rd.h", 122, "+ 25207    18
   122       +p"));                                                                                            + 25207    18
   123       |        return p;                                                                                | 25208    18
   124       |}                                                                                                | 25209    18
   125       |                                                                                                 | 25210    18
   126       |static RD_INLINE RD_UNUSED void *rd_malloc(size_t sz) {                                          | 25211    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   485


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   126       +static inline __attribute__((unused)) void *rd_malloc(size_t sz) {                               + 25211    18
   127       |        void *p = malloc(sz);                                                                    | 25212    18
   128       |        rd_assert(p);                                                                            | 25213    18
   128       +                ((p) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rd.h", 128, "+ 25213    18
   128       +p"));                                                                                            + 25213    18
   129       |        return p;                                                                                | 25214    18
   130       |}                                                                                                | 25215    18
   131       |                                                                                                 | 25216    18
   132       |static RD_INLINE RD_UNUSED void *rd_realloc(void *ptr, size_t sz) {                              | 25217    18
   132       +static inline __attribute__((unused)) void *rd_realloc(void *ptr, size_t sz) {                   + 25217    18
   133       |        void *p = realloc(ptr, sz);                                                              | 25218    18
   134       |        rd_assert(p);                                                                            | 25219    18
   134       +                ((p) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rd.h", 134, "+ 25219    18
   134       +p"));                                                                                            + 25219    18
   135       |        return p;                                                                                | 25220    18
   136       |}                                                                                                | 25221    18
   137       |                                                                                                 | 25222    18
   138       |static RD_INLINE RD_UNUSED void rd_free(void *ptr) {                                             | 25223    18
   138       +static inline __attribute__((unused)) void rd_free(void *ptr) {                                  + 25223    18
   139       |        free(ptr);                                                                               | 25224    18
   140       |}                                                                                                | 25225    18
   141       |                                                                                                 | 25226    18
   142       |static RD_INLINE RD_UNUSED char *rd_strdup(const char *s) {                                      | 25227    18
   142       +static inline __attribute__((unused)) char *rd_strdup(const char *s) {                           + 25227    18
   143       |#ifndef _WIN32                                                                                   | 25228    18
   144       |        char *n = strdup(s);                                                                     | 25229    18
   145       |#else                                                                                            | 25230    18
   146       |        char *n = _strdup(s);                                                                    | 25231    18
   147       |#endif                                                                                           | 25232    18
   148       |        rd_assert(n);                                                                            | 25233    18
   148       +                ((n) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rd.h", 148, "+ 25233    18
   148       +n"));                                                                                            + 25233    18
   149       |        return n;                                                                                | 25234    18
   150       |}                                                                                                | 25235    18
   151       |                                                                                                 | 25236    18
   152       |static RD_INLINE RD_UNUSED char *rd_strndup(const char *s, size_t len) {                         | 25237    18
   152       +static inline __attribute__((unused)) char *rd_strndup(const char *s, size_t len) {              + 25237    18
   153       |#if HAVE_STRNDUP                                                                                 | 25238    18
   154       |        char *n = strndup(s, len);                                                               | 25239    18
   155       |        rd_assert(n);                                                                            | 25240    18
   156       |#else                                                                                            | 25241    18
   157       |        char *n = (char *)rd_malloc(len + 1);                                                    | 25242    18
   157       +                char *n = (char *)rd_malloc(len + 1);                                            + 25242    18
   158       |        rd_assert(n);                                                                            | 25243    18
   158       +                ((n) ? (void)0 : __assert(__func__, "C:\\asgkafka\\librdkafka\\src\\rd.h", 158, "+ 25243    18
   158       +n"));                                                                                            + 25243    18
   159       |        memcpy(n, s, len);                                                                       | 25244    18
   159       +                __memcpy(n,s,len);                                                               + 25244    18
   160       |        n[len] = '\0';                                                                           | 25245    18
   161       |#endif                                                                                           | 25246    18
   162       |        return n;                                                                                | 25247    18
   163       |}                                                                                                | 25248    18
   164       |                                                                                                 | 25249    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   486


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   165       |                                                                                                 | 25250    18
   166       |                                                                                                 | 25251    18
   167       |/*                                                                                               | 25252    18
   168       | * Portability                                                                                   | 25253    18
   169       | */                                                                                              | 25254    18
   170       |                                                                                                 | 25255    18
   171       |#ifdef strndupa                                                                                  | 25256    18
   172       |#define rd_strndupa(DESTPTR,PTR,LEN)  (*(DESTPTR) = strndupa(PTR,LEN))                           | 25257    18
   173       |#else                                                                                            | 25258    18
   174       |#define rd_strndupa(DESTPTR,PTR,LEN) do {                               \                        | 25259    18
   175       |                const char *_src = (PTR);                               \                        | 25260    18
   176       |                size_t _srclen = (LEN);                                 \                        | 25261    18
   177       |                char *_dst = rd_alloca(_srclen + 1);                    \                        | 25262    18
   178       |                memcpy(_dst, _src, _srclen);                            \                        | 25263    18
   179       |                _dst[_srclen] = '\0';                                   \                        | 25264    18
   180       |                *(DESTPTR) = _dst;                                      \                        | 25265    18
   181       |        } while (0)                                                                              | 25266    18
   182       |#endif                                                                                           | 25267    18
   183       |                                                                                                 | 25268    18
   184       |#ifdef strdupa                                                                                   | 25269    18
   185       |#define rd_strdupa(DESTPTR,PTR)  (*(DESTPTR) = strdupa(PTR))                                     | 25270    18
   186       |#else                                                                                            | 25271    18
   187       |#define rd_strdupa(DESTPTR,PTR) do {                                    \                        | 25272    18
   188       |                const char *_src1 = (PTR);                              \                        | 25273    18
   189       |                size_t _srclen1 = strlen(_src1);                        \                        | 25274    18
   190       |                rd_strndupa(DESTPTR, _src1, _srclen1);                  \                        | 25275    18
   191       |        } while (0)                                                                              | 25276    18
   192       |#endif                                                                                           | 25277    18
   193       |                                                                                                 | 25278    18
   194       |#ifndef IOV_MAX                                                                                  | 25279    18
   195       |#ifdef __APPLE__                                                                                 | 25280    18
   196       |/* Some versions of MacOSX dont have IOV_MAX */                                                  | 25281    18
   197       |#define IOV_MAX 1024                                                                             | 25282    18
   198       |#elif defined(_WIN32) || defined(__GNU__)                                                        | 25283    18
   199       |/* There is no IOV_MAX on MSVC or GNU but it is used internally in librdkafka */                 | 25284    18
   200       |#define IOV_MAX 1024                                                                             | 25285    18
   201       |#else                                                                                            | 25286    18
   202       |#error "IOV_MAX not defined"                                                                     | 25287    18
   203       |#endif                                                                                           | 25288    18
   204       |#endif                                                                                           | 25289    18
   205       |                                                                                                 | 25290    18
   206       |                                                                                                 | 25291    18
   207       |/* Round/align X upwards to STRIDE, which must be power of 2. */                                 | 25292    18
   208       |#define RD_ROUNDUP(X,STRIDE) (((X) + ((STRIDE) - 1)) & ~(STRIDE-1))                              | 25293    18
   209       |                                                                                                 | 25294    18
   210       |#define RD_ARRAY_SIZE(A)          (sizeof((A)) / sizeof(*(A)))                                   | 25295    18
   211       |#define RD_ARRAYSIZE(A)           RD_ARRAY_SIZE(A)                                               | 25296    18
   212       |#define RD_SIZEOF(TYPE,MEMBER)    sizeof(((TYPE *)NULL)->MEMBER)                                 | 25297    18
   213       |#define RD_OFFSETOF(TYPE,MEMBER)  ((size_t) &(((TYPE *)NULL)->MEMBER))                           | 25298    18
   214       |                                                                                                 | 25299    18
   215       |/**                                                                                              | 25300    18
   216       | * Returns the 'I'th array element from static sized array 'A'                                   | 25301    18
   217       | * or NULL if 'I' is out of range.                                                               | 25302    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   487


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   218       | * var-args is an optional prefix to provide the correct return type.                            | 25303    18
   219       | */                                                                                              | 25304    18
   220       |#define RD_ARRAY_ELEM(A,I,...)                          \                                        | 25305    18
   221       |        ((unsigned int)(I) < RD_ARRAY_SIZE(A) ? __VA_ARGS__ (A)[(I)] : NULL)                     | 25306    18
   222       |                                                                                                 | 25307    18
   223       |                                                                                                 | 25308    18
   224       |#define RD_STRINGIFY(X)  # X                                                                     | 25309    18
   225       |                                                                                                 | 25310    18
   226       |                                                                                                 | 25311    18
   227       |                                                                                                 | 25312    18
   228       |#define RD_MIN(a,b) ((a) < (b) ? (a) : (b))                                                      | 25313    18
   229       |#define RD_MAX(a,b) ((a) > (b) ? (a) : (b))                                                      | 25314    18
   230       |                                                                                                 | 25315    18
   231       |                                                                                                 | 25316    18
   232       |/**                                                                                              | 25317    18
   233       | * Cap an integer (of any type) to reside within the defined limit.                              | 25318    18
   234       | */                                                                                              | 25319    18
   235       |#define RD_INT_CAP(val,low,hi) \                                                                 | 25320    18
   236       |        ((val) < (low) ? low : ((val) > (hi) ? (hi) : (val)))                                    | 25321    18
   237       |                                                                                                 | 25322    18
   238       |                                                                                                 | 25323    18
   239       |                                                                                                 | 25324    18
   240       |/**                                                                                              | 25325    18
   241       | * Allocate 'size' bytes, copy 'src', return pointer to new memory.                              | 25326    18
   242       | *                                                                                               | 25327    18
   243       | * Use rd_free() to free the returned pointer.                                                   | 25328    18
   244       |*/                                                                                               | 25329    18
   245       |static RD_INLINE RD_UNUSED void *rd_memdup (const void *src, size_t size) {                      | 25330    18
   245       +static inline __attribute__((unused)) void *rd_memdup (const void *src, size_t size) {           + 25330    18
   246       |        void *dst = rd_malloc(size);                                                             | 25331    18
   247       |        memcpy(dst, src, size);                                                                  | 25332    18
   247       +                __memcpy(dst,src,size);                                                          + 25332    18
   248       |        return dst;                                                                              | 25333    18
   249       |}                                                                                                | 25334    18
   250       |                                                                                                 | 25335    18
   251       |/**                                                                                              | 25336    18
   252       | * @brief Memset &OBJ to 0, does automatic sizeof(OBJ).                                          | 25337    18
   253       | */                                                                                              | 25338    18
   254       |#define RD_MEMZERO(OBJ) memset(&(OBJ), 0, sizeof(OBJ))                                           | 25339    18
   255       |                                                                                                 | 25340    18
   256       |                                                                                                 | 25341    18
   257       |/**                                                                                              | 25342    18
   258       | * Generic refcnt interface                                                                      | 25343    18
   259       | */                                                                                              | 25344    18
   260       |                                                                                                 | 25345    18
   261       |#if !HAVE_ATOMICS_32                                                                             | 25346    18
   262       |#define RD_REFCNT_USE_LOCKS 1                                                                    | 25347    18
   263       |#endif                                                                                           | 25348    18
   264       |                                                                                                 | 25349    18
   264       +                                                                                                 + 25349    18
   265       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25350    18
   266       |typedef struct rd_refcnt_t {                                                                     | 25351    18
   267       |        mtx_t lock;                                                                              | 25352    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   488


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   268       |        int v;                                                                                   | 25353    18
   269       |} rd_refcnt_t;                                                                                   | 25354    18
   270       |#else                                                                                            | 25355    18
   271       |typedef rd_atomic32_t rd_refcnt_t;                                                               | 25356    18
   272       |#endif                                                                                           | 25357    18
   273       |                                                                                                 | 25358    18
   274       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25359    18
   275       |static RD_INLINE RD_UNUSED int rd_refcnt_init (rd_refcnt_t *R, int v) {                          | 25360    18
   276       |        int r;                                                                                   | 25361    18
   277       |        mtx_init(&R->lock, mtx_plain);                                                           | 25362    18
   278       |        mtx_lock(&R->lock);                                                                      | 25363    18
   279       |        r = R->v = v;                                                                            | 25364    18
   280       |        mtx_unlock(&R->lock);                                                                    | 25365    18
   281       |        return r;                                                                                | 25366    18
   282       |}                                                                                                | 25367    18
   283       |#else                                                                                            | 25368    18
   284       |#define rd_refcnt_init(R,v)  rd_atomic32_init(R, v)                                              | 25369    18
   285       |#endif                                                                                           | 25370    18
   286       |                                                                                                 | 25371    18
   287       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25372    18
   288       |static RD_INLINE RD_UNUSED void rd_refcnt_destroy (rd_refcnt_t *R) {                             | 25373    18
   289       |        mtx_lock(&R->lock);                                                                      | 25374    18
   290       |        rd_assert(R->v == 0);                                                                    | 25375    18
   291       |        mtx_unlock(&R->lock);                                                                    | 25376    18
   292       |                                                                                                 | 25377    18
   293       |        mtx_destroy(&R->lock);                                                                   | 25378    18
   294       |}                                                                                                | 25379    18
   295       |#else                                                                                            | 25380    18
   296       |#define rd_refcnt_destroy(R) do { } while (0)                                                    | 25381    18
   297       |#endif                                                                                           | 25382    18
   298       |                                                                                                 | 25383    18
   299       |                                                                                                 | 25384    18
   300       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25385    18
   301       |static RD_INLINE RD_UNUSED int rd_refcnt_set (rd_refcnt_t *R, int v) {                           | 25386    18
   302       |        int r;                                                                                   | 25387    18
   303       |        mtx_lock(&R->lock);                                                                      | 25388    18
   304       |        r = R->v = v;                                                                            | 25389    18
   305       |        mtx_unlock(&R->lock);                                                                    | 25390    18
   306       |        return r;                                                                                | 25391    18
   307       |}                                                                                                | 25392    18
   308       |#else                                                                                            | 25393    18
   309       |#define rd_refcnt_set(R,v)  rd_atomic32_set(R, v)                                                | 25394    18
   310       |#endif                                                                                           | 25395    18
   311       |                                                                                                 | 25396    18
   312       |                                                                                                 | 25397    18
   313       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25398    18
   314       |static RD_INLINE RD_UNUSED int rd_refcnt_add0 (rd_refcnt_t *R) {                                 | 25399    18
   315       |        int r;                                                                                   | 25400    18
   316       |        mtx_lock(&R->lock);                                                                      | 25401    18
   317       |        r = ++(R->v);                                                                            | 25402    18
   318       |        mtx_unlock(&R->lock);                                                                    | 25403    18
   319       |        return r;                                                                                | 25404    18
   320       |}                                                                                                | 25405    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   489


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   321       |#else                                                                                            | 25406    18
   322       |#define rd_refcnt_add0(R)  rd_atomic32_add(R, 1)                                                 | 25407    18
   323       |#endif                                                                                           | 25408    18
   324       |                                                                                                 | 25409    18
   325       |static RD_INLINE RD_UNUSED int rd_refcnt_sub0 (rd_refcnt_t *R) {                                 | 25410    18
   325       +static inline __attribute__((unused)) int rd_refcnt_sub0 (rd_refcnt_t *R) {                      + 25410    18
   326       |        int r;                                                                                   | 25411    18
   327       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25412    18
   328       |        mtx_lock(&R->lock);                                                                      | 25413    18
   329       |        r = --(R->v);                                                                            | 25414    18
   330       |        mtx_unlock(&R->lock);                                                                    | 25415    18
   331       |#else                                                                                            | 25416    18
   332       |        r = rd_atomic32_sub(R, 1);                                                               | 25417    18
   333       |#endif                                                                                           | 25418    18
   334       |        if (r < 0)                                                                               | 25419    18
   335       |                rd_assert(!*"refcnt sub-zero");                                                  | 25420    18
   335       +                                ((!*"refcnt sub-zero") ? (void)0 : __assert(__func__, "C:\\asgkaf+ 25420    18
   335       +ka\\librdkafka\\src\\rd.h", 335, "!*\"refcnt sub-zero\""));                                      + 25420    18
   336       |        return r;                                                                                | 25421    18
   337       |}                                                                                                | 25422    18
   338       |                                                                                                 | 25423    18
   339       |#ifdef RD_REFCNT_USE_LOCKS                                                                       | 25424    18
   340       |static RD_INLINE RD_UNUSED int rd_refcnt_get (rd_refcnt_t *R) {                                  | 25425    18
   341       |        int r;                                                                                   | 25426    18
   342       |        mtx_lock(&R->lock);                                                                      | 25427    18
   343       |        r = R->v;                                                                                | 25428    18
   344       |        mtx_unlock(&R->lock);                                                                    | 25429    18
   345       |        return r;                                                                                | 25430    18
   346       |}                                                                                                | 25431    18
   347       |#else                                                                                            | 25432    18
   348       |#define rd_refcnt_get(R)   rd_atomic32_get(R)                                                    | 25433    18
   349       |#endif                                                                                           | 25434    18
   350       |                                                                                                 | 25435    18
   351       |/**                                                                                              | 25436    18
   352       | * A wrapper for decreasing refcount and calling a destroy function                              | 25437    18
   353       | * when refcnt reaches 0.                                                                        | 25438    18
   354       | */                                                                                              | 25439    18
   355       |#define rd_refcnt_destroywrapper(REFCNT,DESTROY_CALL) do {      \                                | 25440    18
   356       |                if (rd_refcnt_sub(REFCNT) > 0)                  \                                | 25441    18
   357       |                        break;                                  \                                | 25442    18
   358       |                DESTROY_CALL;                                   \                                | 25443    18
   359       |        } while (0)                                                                              | 25444    18
   360       |                                                                                                 | 25445    18
   361       |                                                                                                 | 25446    18
   362       |#define rd_refcnt_destroywrapper2(REFCNT,WHAT,DESTROY_CALL) do {        \                        | 25447    18
   363       |                if (rd_refcnt_sub2(REFCNT,WHAT) > 0)                        \                    | 25448    18
   364       |                        break;                                  \                                | 25449    18
   365       |                DESTROY_CALL;                                   \                                | 25450    18
   366       |        } while (0)                                                                              | 25451    18
   367       |                                                                                                 | 25452    18
   368       |#if ENABLE_REFCNT_DEBUG                                                                          | 25453    18
   369       |#define rd_refcnt_add_fl(FUNC,LINE,R)                                   \                        | 25454    18
   370       |        (                                                               \                        | 25455    18
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   490


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   371       |                fprintf(stderr, "REFCNT DEBUG: %-35s %d +1: %16p: %s:%d\n", \                    | 25456    18
   372       |                       #R, rd_refcnt_get(R), (R), (FUNC), (LINE)),      \                        | 25457    18
   373       |                rd_refcnt_add0(R)                                       \                        | 25458    18
   374       |                )                                                                                | 25459    18
   375       |                                                                                                 | 25460    18
   376       |#define rd_refcnt_add(R) rd_refcnt_add_fl(__FUNCTION__, __LINE__, (R))                           | 25461    18
   377       |                                                                                                 | 25462    18
   378       |#define rd_refcnt_add2(R,WHAT)  do {                                    \                        | 25463    18
   379       |                fprintf(stderr,                                         \                        | 25464    18
   380       |                        "REFCNT DEBUG: %-35s %d +1: %16p: %16s: %s:%d\n", \                      | 25465    18
   381       |                        #R, rd_refcnt_get(R), (R), WHAT,                \                        | 25466    18
   382       |                        __FUNCTION__,__LINE__),                         \                        | 25467    18
   383       |                rd_refcnt_add0(R);                                      \                        | 25468    18
   384       |        } while (0)                                                                              | 25469    18
   385       |                                                                                                 | 25470    18
   386       |#define rd_refcnt_sub2(R,WHAT) (                                        \                        | 25471    18
   387       |                fprintf(stderr,                                         \                        | 25472    18
   388       |                        "REFCNT DEBUG: %-35s %d -1: %16p: %16s: %s:%d\n", \                      | 25473    18
   389       |                        #R, rd_refcnt_get(R), (R), WHAT, \                                       | 25474    18
   390       |                        __FUNCTION__,__LINE__),          \                                       | 25475    18
   391       |                rd_refcnt_sub0(R) )                                                              | 25476    18
   392       |                                                                                                 | 25477    18
   393       |#define rd_refcnt_sub(R) (                                              \                        | 25478    18
   394       |                fprintf(stderr, "REFCNT DEBUG: %-35s %d -1: %16p: %s:%d\n", \                    | 25479    18
   395       |                        #R, rd_refcnt_get(R), (R), __FUNCTION__,__LINE__), \                     | 25480    18
   396       |                rd_refcnt_sub0(R) )                                                              | 25481    18
   397       |                                                                                                 | 25482    18
   398       |#else                                                                                            | 25483    18
   399       |#define rd_refcnt_add_fl(FUNC,LINE,R)  rd_refcnt_add0(R)                                         | 25484    18
   400       |#define rd_refcnt_add(R)  rd_refcnt_add0(R)                                                      | 25485    18
   401       |#define rd_refcnt_sub(R)  rd_refcnt_sub0(R)                                                      | 25486    18
   402       |#endif                                                                                           | 25487    18
   403       |                                                                                                 | 25488    18
   403       +                                                                                                 + 25488    18
   404       |                                                                                                 | 25489    18
   405       |                                                                                                 | 25490    18
   406       |                                                                                                 | 25491    18
   407       |                                                                                                 | 25492    18
   408       |#define RD_IF_FREE(PTR,FUNC) do { if ((PTR)) FUNC(PTR); } while (0)                              | 25493    18
   409       |                                                                                                 | 25494    18
   410       |                                                                                                 | 25495    18
   411       |/**                                                                                              | 25496    18
   412       | * @brief Utility types to hold memory,size tuple.                                               | 25497    18
   413       | */                                                                                              | 25498    18
   414       |                                                                                                 | 25499    18
   415       |typedef struct rd_chariov_s {                                                                    | 25500    18
   416       |        char  *ptr;                                                                              | 25501    18
   417       |        size_t size;                                                                             | 25502    18
   418       |} rd_chariov_t;                                                                                  | 25503    18
   419       |                                                                                                 | 25504    18
   420       |#endif /* _RD_H_ */                                                                              | 25505    18
    30       |#include "rddl.h"                                                                                | 25506     1
     1       |/*                                                                                               | 25507    48
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   491


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     2       | * librdkafka - The Apache Kafka C/C++ library                                                   | 25508    48
     3       | *                                                                                               | 25509    48
     4       | * Copyright (c) 2017 Magnus Edenhill                                                            | 25510    48
     5       | * All rights reserved.                                                                          | 25511    48
     6       | *                                                                                               | 25512    48
     7       | * Redistribution and use in source and binary forms, with or without                            | 25513    48
     8       | * modification, are permitted provided that the following conditions are met:                   | 25514    48
     9       | *                                                                                               | 25515    48
    10       | * 1. Redistributions of source code must retain the above copyright notice,                     | 25516    48
    11       | *    this list of conditions and the following disclaimer.                                      | 25517    48
    12       | * 2. Redistributions in binary form must reproduce the above copyright notice,                  | 25518    48
    13       | *    this list of conditions and the following disclaimer in the documentation                  | 25519    48
    14       | *    and/or other materials provided with the distribution.                                     | 25520    48
    15       | *                                                                                               | 25521    48
    16       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"                   | 25522    48
    17       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                     | 25523    48
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 25524    48
    19       | * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE                      | 25525    48
    20       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR                           | 25526    48
    21       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF                          | 25527    48
    22       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS                      | 25528    48
    23       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN                       | 25529    48
    24       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                       | 25530    48
    25       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                    | 25531    48
    26       | * POSSIBILITY OF SUCH DAMAGE.                                                                   | 25532    48
    27       | */                                                                                              | 25533    48
    28       |                                                                                                 | 25534    48
    29       |#ifndef _RDDL_H                                                                                  | 25535    48
    30       |#define _RDDL_H                                                                                  | 25536    48
    31       |                                                                                                 | 25537    48
    32       |#include <sys/types.h>                                                                           | 25538    48
     1       |/* release 2.25.00 */                                                                            | 25539     3
     2       |#pragma pack()                                                                                   | 25540     3
     3       |/*-                                                                                              | 25541     3
     4       | * Copyright (c) 1982, 1986, 1991, 1993, 1994                                                    | 25542     3
     5       | *      The Regents of the University of California.  All rights reserved.                       | 25543     3
     6       | * (c) UNIX System Laboratories, Inc.                                                            | 25544     3
     7       | * All or some portions of this file are derived from material licensed                          | 25545     3
     8       | * to the University of California by American Telephone and Telegraph                           | 25546     3
     9       | * Co. or Unix System Laboratories, Inc. and are reproduced herein with                          | 25547     3
    10       | * the permission of UNIX System Laboratories, Inc.                                              | 25548     3
    11       | *                                                                                               | 25549     3
    12       | * Redistribution and use in source and binary forms, with or without                            | 25550     3
    13       | * modification, are permitted provided that the following conditions                            | 25551     3
    14       | * are met:                                                                                      | 25552     3
    15       | * 1. Redistributions of source code must retain the above copyright                             | 25553     3
    16       | *    notice, this list of conditions and the following disclaimer.                              | 25554     3
    17       | * 2. Redistributions in binary form must reproduce the above copyright                          | 25555     3
    18       | *    notice, this list of conditions and the following disclaimer in the                        | 25556     3
    19       | *    documentation and/or other materials provided with the distribution.                       | 25557     3
    20       | * 4. Neither the name of the University nor the names of its contributors                       | 25558     3
    21       | *    may be used to endorse or promote products derived from this software                      | 25559     3
    22       | *    without specific prior written permission.                                                 | 25560     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   492


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    23       | *                                                                                               | 25561     3
    24       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 25562     3
    25       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 25563     3
    26       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 25564     3
    27       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 25565     3
    28       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 25566     3
    29       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 25567     3
    30       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 25568     3
    31       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 25569     3
    32       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 25570     3
    33       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 25571     3
    34       | * SUCH DAMAGE.                                                                                  | 25572     3
    35       | *                                                                                               | 25573     3
    36       | *      @(#)types.h     8.6 (Berkeley) 2/19/95                                                   | 25574     3
    37       | * $FreeBSD: src/sys/sys/types.h,v 1.92 2005/05/31 15:18:17 rodrigc Exp $                        | 25575     3
    38       | */                                                                                              | 25576     3
    39       |                                                                                                 | 25577     3
    40       |#ifndef _SYS_TYPES_H_                                                                            | 25578     3
    41       |#define _SYS_TYPES_H_                                                                            | 25579     3
    42       |                                                                                                 | 25580     3
    43       |#include <sys/cdefs.h>                                                                           | 25581     3
    44       |                                                                                                 | 25582     3
    45       |/* Machine type dependent parameters. */                                                         | 25583     3
    46       |#include <machine/endian.h>                                                                      | 25584     3
    47       |#include <sys/_types.h>                                                                          | 25585     3
    48       |                                                                                                 | 25586     3
    49       |#include <sys/_pthreadtypes.h>                                                                   | 25587     3
    50       |                                                                                                 | 25588     3
    51       |#if __BSD_VISIBLE                                                                                | 25589     3
    52       |typedef unsigned char   u_char;                                                                  | 25590     3
    53       |typedef unsigned short  u_short;                                                                 | 25591     3
    54       |typedef unsigned int    u_int;                                                                   | 25592     3
    55       |typedef unsigned long   u_long;                                                                  | 25593     3
    56       |#ifndef _KERNEL                                                                                  | 25594     3
    57       |typedef unsigned short  ushort;         /* Sys V compatibility */                                | 25595     3
    58       |typedef unsigned int    uint;           /* Sys V compatibility */                                | 25596     3
    59       |#endif                                                                                           | 25597     3
    60       |#endif                                                                                           | 25598     3
    61       |                                                                                                 | 25599     3
    62       |/*                                                                                               | 25600     3
    63       | * XXX POSIX sized integrals that should appear only in <sys/stdint.h>.                          | 25601     3
    64       | */                                                                                              | 25602     3
    65       |#ifndef _INT8_T_DECLARED                                                                         | 25603     3
    66       |typedef __int8_t        int8_t;                                                                  | 25604     3
    67       |#define _INT8_T_DECLARED                                                                         | 25605     3
    68       |#endif                                                                                           | 25606     3
    69       |                                                                                                 | 25607     3
    70       |#ifndef _INT16_T_DECLARED                                                                        | 25608     3
    71       |typedef __int16_t       int16_t;                                                                 | 25609     3
    72       |#define _INT16_T_DECLARED                                                                        | 25610     3
    73       |#endif                                                                                           | 25611     3
    74       |                                                                                                 | 25612     3
    75       |#ifndef _INT32_T_DECLARED                                                                        | 25613     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   493


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    76       |typedef __int32_t       int32_t;                                                                 | 25614     3
    77       |#define _INT32_T_DECLARED                                                                        | 25615     3
    78       |#endif                                                                                           | 25616     3
    79       |                                                                                                 | 25617     3
    80       |#ifndef _INT64_T_DECLARED                                                                        | 25618     3
    81       |typedef __int64_t       int64_t;                                                                 | 25619     3
    82       |#define _INT64_T_DECLARED                                                                        | 25620     3
    83       |#endif                                                                                           | 25621     3
    84       |                                                                                                 | 25622     3
    85       |#ifndef _UINT8_T_DECLARED                                                                        | 25623     3
    86       |typedef __uint8_t       uint8_t;                                                                 | 25624     3
    87       |#define _UINT8_T_DECLARED                                                                        | 25625     3
    88       |#endif                                                                                           | 25626     3
    89       |                                                                                                 | 25627     3
    90       |#ifndef _UINT16_T_DECLARED                                                                       | 25628     3
    91       |typedef __uint16_t      uint16_t;                                                                | 25629     3
    92       |#define _UINT16_T_DECLARED                                                                       | 25630     3
    93       |#endif                                                                                           | 25631     3
    94       |                                                                                                 | 25632     3
    95       |#ifndef _UINT32_T_DECLARED                                                                       | 25633     3
    96       |typedef __uint32_t      uint32_t;                                                                | 25634     3
    97       |#define _UINT32_T_DECLARED                                                                       | 25635     3
    98       |#endif                                                                                           | 25636     3
    99       |                                                                                                 | 25637     3
   100       |#ifndef _UINT64_T_DECLARED                                                                       | 25638     3
   101       |typedef __uint64_t      uint64_t;                                                                | 25639     3
   102       |#define _UINT64_T_DECLARED                                                                       | 25640     3
   103       |#endif                                                                                           | 25641     3
   104       |                                                                                                 | 25642     3
   105       |#ifndef _INTPTR_T_DECLARED                                                                       | 25643     3
   106       |typedef __intptr_t      intptr_t;                                                                | 25644     3
   107       |typedef __uintptr_t     uintptr_t;                                                               | 25645     3
   108       |#define _INTPTR_T_DECLARED                                                                       | 25646     3
   109       |#endif                                                                                           | 25647     3
   110       |                                                                                                 | 25648     3
   111       |typedef __uint8_t       u_int8_t;       /* unsigned integrals (deprecated) */                    | 25649     3
   112       |typedef __uint16_t      u_int16_t;                                                               | 25650     3
   113       |typedef __uint32_t      u_int32_t;                                                               | 25651     3
   114       |typedef __uint64_t      u_int64_t;                                                               | 25652     3
   115       |                                                                                                 | 25653     3
   116       |typedef __uint64_t      u_quad_t;       /* quads (deprecated) */                                 | 25654     3
   117       |typedef __int64_t       quad_t;                                                                  | 25655     3
   118       |typedef quad_t *        qaddr_t;                                                                 | 25656     3
   119       |                                                                                                 | 25657     3
   120       |typedef char *          caddr_t;        /* core address */                                       | 25658     3
   121       |typedef __const char *  c_caddr_t;      /* core address, pointer to const */                     | 25659     3
   122       |typedef __volatile char *v_caddr_t;     /* core address, pointer to volatile */                  | 25660     3
   123       |                                                                                                 | 25661     3
   124       |#ifndef _BLKSIZE_T_DECLARED                                                                      | 25662     3
   125       |typedef __blksize_t     blksize_t;                                                               | 25663     3
   126       |#define _BLKSIZE_T_DECLARED                                                                      | 25664     3
   127       |#endif                                                                                           | 25665     3
   128       |                                                                                                 | 25666     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   494


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   129       |#ifndef _BLKCNT_T_DECLARED                                                                       | 25667     3
   130       |typedef __blkcnt_t      blkcnt_t;                                                                | 25668     3
   131       |#define _BLKCNT_T_DECLARED                                                                       | 25669     3
   132       |#endif                                                                                           | 25670     3
   133       |                                                                                                 | 25671     3
   134       |#ifndef _CLOCK_T_DECLARED                                                                        | 25672     3
   135       |typedef __clock_t       clock_t;                                                                 | 25673     3
   136       |#define _CLOCK_T_DECLARED                                                                        | 25674     3
   137       |#endif                                                                                           | 25675     3
   138       |                                                                                                 | 25676     3
   139       |#ifndef _CLOCKID_T_DECLARED                                                                      | 25677     3
   140       |typedef __clockid_t     clockid_t;                                                               | 25678     3
   141       |#define _CLOCKID_T_DECLARED                                                                      | 25679     3
   142       |#endif                                                                                           | 25680     3
   143       |                                                                                                 | 25681     3
   144       |typedef __critical_t    critical_t;     /* Critical section value */                             | 25682     3
   145       |typedef __int64_t       daddr_t;        /* disk address */                                       | 25683     3
   146       |                                                                                                 | 25684     3
   147       |#ifndef _DEV_T_DECLARED                                                                          | 25685     3
   148       |typedef __dev_t         dev_t;          /* device number or struct cdev */                       | 25686     3
   149       |#define _DEV_T_DECLARED                                                                          | 25687     3
   150       |#endif                                                                                           | 25688     3
   151       |                                                                                                 | 25689     3
   152       |#ifndef _FFLAGS_T_DECLARED                                                                       | 25690     3
   153       |typedef __fflags_t      fflags_t;       /* file flags */                                         | 25691     3
   154       |#define _FFLAGS_T_DECLARED                                                                       | 25692     3
   155       |#endif                                                                                           | 25693     3
   156       |                                                                                                 | 25694     3
   157       |typedef __fixpt_t       fixpt_t;        /* fixed point number */                                 | 25695     3
   158       |                                                                                                 | 25696     3
   159       |#ifndef _FSBLKCNT_T_DECLARED            /* for statvfs() */                                      | 25697     3
   160       |typedef __fsblkcnt_t    fsblkcnt_t;                                                              | 25698     3
   161       |typedef __fsfilcnt_t    fsfilcnt_t;                                                              | 25699     3
   162       |#define _FSBLKCNT_T_DECLARED                                                                     | 25700     3
   163       |#endif                                                                                           | 25701     3
   164       |                                                                                                 | 25702     3
   165       |#ifndef _GID_T_DECLARED                                                                          | 25703     3
   166       |typedef __gid_t         gid_t;          /* group id */                                           | 25704     3
   167       |#define _GID_T_DECLARED                                                                          | 25705     3
   168       |#endif                                                                                           | 25706     3
   169       |                                                                                                 | 25707     3
   170       |#ifndef _IN_ADDR_T_DECLARED                                                                      | 25708     3
   171       |typedef __uint32_t      in_addr_t;      /* base type for internet address */                     | 25709     3
   172       |#define _IN_ADDR_T_DECLARED                                                                      | 25710     3
   173       |#endif                                                                                           | 25711     3
   174       |                                                                                                 | 25712     3
   175       |#ifndef _IN_PORT_T_DECLARED                                                                      | 25713     3
   176       |typedef __uint16_t      in_port_t;                                                               | 25714     3
   177       |#define _IN_PORT_T_DECLARED                                                                      | 25715     3
   178       |#endif                                                                                           | 25716     3
   179       |                                                                                                 | 25717     3
   180       |#ifndef _ID_T_DECLARED                                                                           | 25718     3
   181       |typedef __id_t          id_t;           /* can hold a uid_t or pid_t */                          | 25719     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   495


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   182       |#define _ID_T_DECLARED                                                                           | 25720     3
   183       |#endif                                                                                           | 25721     3
   184       |                                                                                                 | 25722     3
   185       |#ifndef _INO_T_DECLARED                                                                          | 25723     3
   186       |typedef __ino_t         ino_t;          /* inode number */                                       | 25724     3
   187       |#define _INO_T_DECLARED                                                                          | 25725     3
   188       |#endif                                                                                           | 25726     3
   189       |                                                                                                 | 25727     3
   190       |#ifndef _KEY_T_DECLARED                                                                          | 25728     3
   191       |typedef __key_t         key_t;          /* IPC key (for Sys V IPC) */                            | 25729     3
   192       |#define _KEY_T_DECLARED                                                                          | 25730     3
   193       |#endif                                                                                           | 25731     3
   194       |                                                                                                 | 25732     3
   195       |#ifndef _LWPID_T_DECLARED                                                                        | 25733     3
   196       |typedef __lwpid_t       lwpid_t;        /* Thread ID (a.k.a. LWP) */                             | 25734     3
   197       |#define _LWPID_T_DECLARED                                                                        | 25735     3
   198       |#endif                                                                                           | 25736     3
   199       |                                                                                                 | 25737     3
   200       |#ifndef _MODE_T_DECLARED                                                                         | 25738     3
   201       |typedef __mode_t        mode_t;         /* permissions */                                        | 25739     3
   202       |#define _MODE_T_DECLARED                                                                         | 25740     3
   203       |#endif                                                                                           | 25741     3
   204       |                                                                                                 | 25742     3
   205       |#ifndef _NLINK_T_DECLARED                                                                        | 25743     3
   206       |typedef __nlink_t       nlink_t;        /* link count */                                         | 25744     3
   207       |#define _NLINK_T_DECLARED                                                                        | 25745     3
   208       |#endif                                                                                           | 25746     3
   209       |                                                                                                 | 25747     3
   210       |#ifndef _OFF_T_DECLARED                                                                          | 25748     3
   211       |typedef __off_t         off_t;          /* file offset */                                        | 25749     3
   212       |#define _OFF_T_DECLARED                                                                          | 25750     3
   213       |#endif                                                                                           | 25751     3
   214       |                                                                                                 | 25752     3
   215       |#ifndef _PID_T_DECLARED                                                                          | 25753     3
   216       |typedef __pid_t         pid_t;          /* process id */                                         | 25754     3
   217       |#define _PID_T_DECLARED                                                                          | 25755     3
   218       |#endif                                                                                           | 25756     3
   219       |                                                                                                 | 25757     3
   220       |typedef __register_t    register_t;                                                              | 25758     3
   221       |                                                                                                 | 25759     3
   222       |#ifndef _RLIM_T_DECLARED                                                                         | 25760     3
   223       |typedef __rlim_t        rlim_t;         /* resource limit */                                     | 25761     3
   224       |#define _RLIM_T_DECLARED                                                                         | 25762     3
   225       |#endif                                                                                           | 25763     3
   226       |                                                                                                 | 25764     3
   227       |typedef __segsz_t       segsz_t;        /* segment size (in pages) */                            | 25765     3
   228       |                                                                                                 | 25766     3
   229       |#ifndef _SIZE_T_DECLARED                                                                         | 25767     3
   230       |typedef __size_t        size_t;                                                                  | 25768     3
   231       |#define _SIZE_T_DECLARED                                                                         | 25769     3
   232       |#endif                                                                                           | 25770     3
   233       |                                                                                                 | 25771     3
   234       |#ifndef _SSIZE_T_DECLARED                                                                        | 25772     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   496


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   235       |typedef __ssize_t       ssize_t;                                                                 | 25773     3
   236       |#define _SSIZE_T_DECLARED                                                                        | 25774     3
   237       |#endif                                                                                           | 25775     3
   238       |                                                                                                 | 25776     3
   239       |#ifndef _SUSECONDS_T_DECLARED                                                                    | 25777     3
   240       |typedef __suseconds_t   suseconds_t;    /* microseconds (signed) */                              | 25778     3
   241       |#define _SUSECONDS_T_DECLARED                                                                    | 25779     3
   242       |#endif                                                                                           | 25780     3
   243       |                                                                                                 | 25781     3
   244       |#ifndef _TIME_T_DECLARED                                                                         | 25782     3
   245       |typedef __time_t        time_t;                                                                  | 25783     3
   246       |#define _TIME_T_DECLARED                                                                         | 25784     3
   247       |#endif                                                                                           | 25785     3
   248       |                                                                                                 | 25786     3
   249       |#ifndef _TIMER_T_DECLARED                                                                        | 25787     3
   250       |typedef __timer_t       timer_t;                                                                 | 25788     3
   251       |#define _TIMER_T_DECLARED                                                                        | 25789     3
   252       |#endif                                                                                           | 25790     3
   253       |                                                                                                 | 25791     3
   254       |typedef __u_register_t  u_register_t;                                                            | 25792     3
   255       |                                                                                                 | 25793     3
   256       |#ifndef _UID_T_DECLARED                                                                          | 25794     3
   257       |typedef __uid_t         uid_t;          /* user id */                                            | 25795     3
   258       |#define _UID_T_DECLARED                                                                          | 25796     3
   259       |#endif                                                                                           | 25797     3
   260       |                                                                                                 | 25798     3
   261       |#ifndef _USECONDS_T_DECLARED                                                                     | 25799     3
   262       |typedef __useconds_t    useconds_t;     /* microseconds (unsigned) */                            | 25800     3
   263       |#define _USECONDS_T_DECLARED                                                                     | 25801     3
   264       |#endif                                                                                           | 25802     3
   265       |                                                                                                 | 25803     3
   266       |typedef __vm_offset_t   vm_offset_t;                                                             | 25804     3
   267       |typedef __vm_ooffset_t  vm_ooffset_t;                                                            | 25805     3
   268       |typedef __vm_paddr_t    vm_paddr_t;                                                              | 25806     3
   269       |typedef __vm_pindex_t   vm_pindex_t;                                                             | 25807     3
   270       |typedef __vm_size_t     vm_size_t;                                                               | 25808     3
   271       |                                                                                                 | 25809     3
   272       |#ifdef _KERNEL                                                                                   | 25810     3
   273       |typedef int             boolean_t;                                                               | 25811     3
   274       |typedef __cpumask_t     cpumask_t;                                                               | 25812     3
   275       |typedef __intfptr_t     intfptr_t;                                                               | 25813     3
   276       |                                                                                                 | 25814     3
   277       |/*-                                                                                              | 25815     3
   278       | * XXX this is fixed width for historical reasons.  It should have had type                      | 25816     3
   279       | * __int_fast32_t.  Fixed-width types should not be used unless binary                           | 25817     3
   280       | * compatibility is essential.  Least-width types should be used even less                       | 25818     3
   281       | * since they provide smaller benefits.                                                          | 25819     3
   282       | * XXX should be MD.                                                                             | 25820     3
   283       | * XXX this is bogus in -current, but still used for spl*().                                     | 25821     3
   284       | */                                                                                              | 25822     3
   285       |typedef __uint32_t      intrmask_t;     /* Interrupt mask (spl, xxx_imask...) */                 | 25823     3
   286       |                                                                                                 | 25824     3
   287       |typedef __uintfptr_t    uintfptr_t;                                                              | 25825     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   497


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   288       |typedef __uint64_t      uoff_t;                                                                  | 25826     3
   289       |typedef struct vm_page  *vm_page_t;                                                              | 25827     3
   290       |                                                                                                 | 25828     3
   291       |#define offsetof(type, field) __offsetof(type, field)                                            | 25829     3
   292       |                                                                                                 | 25830     3
   293       |#endif /* !_KERNEL */                                                                            | 25831     3
   294       |                                                                                                 | 25832     3
   295       |/*                                                                                               | 25833     3
   296       | * The following are all things that really shouldn't exist in this header,                      | 25834     3
   297       | * since its purpose is to provide typedefs, not miscellaneous doodads.                          | 25835     3
   298       | */                                                                                              | 25836     3
   299       |#if __BSD_VISIBLE                                                                                | 25837     3
   300       |                                                                                                 | 25838     3
   301       |#include <sys/select.h>                                                                          | 25839     3
   302       |                                                                                                 | 25840     3
   303       |#ifndef _KERNEL                                                                                  | 25841     3
   304       |#define major(x)     ((int)(((u_int)(x) >> 16)&0xffff))    /* major number */                    | 25842     3
   305       |#define minor(x)     ((int)((x)&0x0000ffff))               /* minor number */                    | 25843     3
   306       |#endif /* !_KERNEL */                                                                            | 25844     3
   307       |                                                                                                 | 25845     3
   308       |#define makedev(x,y) ((dev_t)(((x) << 16) | ((y)&0xffff))) /* create dev_t */                    | 25846     3
   309       |                                                                                                 | 25847     3
   310       |/*                                                                                               | 25848     3
   311       | * These declarations belong elsewhere, but are repeated here and in                             | 25849     3
   312       | * <stdio.h> to give broken programs a better chance of working with                             | 25850     3
   313       | * 64-bit off_t's.                                                                               | 25851     3
   314       | */                                                                                              | 25852     3
   315       |#ifndef _KERNEL                                                                                  | 25853     3
   316       |__BEGIN_DECLS                                                                                    | 25854     3
   317       |#ifndef _FTRUNCATE_DECLARED                                                                      | 25855     3
   318       |#define _FTRUNCATE_DECLARED                                                                      | 25856     3
   319       |#pragma map (ftruncate, "@@FTRUNC")                                                              | 25857     3
   320       |int      ftruncate(int, off_t);                                                                  | 25858     3
   321       |#endif                                                                                           | 25859     3
   322       |#ifndef _LSEEK_DECLARED                                                                          | 25860     3
   323       |#define _LSEEK_DECLARED                                                                          | 25861     3
   324       |off_t    lseek(int, off_t, int);                                                                 | 25862     3
   325       |#endif                                                                                           | 25863     3
   326       |#ifndef _MMAP_DECLARED                                                                           | 25864     3
   327       |#define _MMAP_DECLARED                                                                           | 25865     3
   328       |void *   mmap(void *, size_t, int, int, int, off_t);                                             | 25866     3
   329       |#endif                                                                                           | 25867     3
   330       |#ifndef _TRUNCATE_DECLARED                                                                       | 25868     3
   331       |#define _TRUNCATE_DECLARED                                                                       | 25869     3
   332       |int      truncate(const char *, off_t);                                                          | 25870     3
   333       |#endif                                                                                           | 25871     3
   334       |__END_DECLS                                                                                      | 25872     3
   335       |#endif /* !_KERNEL */                                                                            | 25873     3
   336       |                                                                                                 | 25874     3
   337       |#endif /* __BSD_VISIBLE */                                                                       | 25875     3
   338       |                                                                                                 | 25876     3
   339       |#endif /* !_SYS_TYPES_H_ */                                                                      | 25877     3
   340       |#pragma pack(reset)                                                                              | 25878     3
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   498


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    33       |                                                                                                 | 25879    48
    34       |typedef void rd_dl_hnd_t;                                                                        | 25880    48
    35       |                                                                                                 | 25881    48
    36       |rd_dl_hnd_t *rd_dl_open (const char *path, char *errstr, size_t errstr_size);                    | 25882    48
    37       |void rd_dl_close (rd_dl_hnd_t *handle);                                                          | 25883    48
    38       |void *rd_dl_sym (rd_dl_hnd_t *handle, const char *symbol,                                        | 25884    48
    39       |                 char *errstr, size_t errstr_size);                                              | 25885    48
    40       |                                                                                                 | 25886    48
    41       |#endif /* _RDDL_H */                                                                             | 25887    48
    31       |                                                                                                 | 25888     1
    32       |#if WITH_LIBDL                                                                                   | 25889     1
    33       |#include <dlfcn.h>                                                                               | 25890     1
     1       |/* release 2.25.00 */                                                                            | 25891    49
     1       +                                                                                                 + 25891    49
     2       |#pragma pack()                                                                                   | 25892    49
     3       |/*-                                                                                              | 25893    49
     4       | * Copyright (c) 1994                                                                            | 25894    49
     5       | *      The Regents of the University of California.  All rights reserved.                       | 25895    49
     6       | *                                                                                               | 25896    49
     7       | * Redistribution and use in source and binary forms, with or without                            | 25897    49
     8       | * modification, are permitted provided that the following conditions                            | 25898    49
     9       | * are met:                                                                                      | 25899    49
    10       | * 1. Redistributions of source code must retain the above copyright                             | 25900    49
    11       | *    notice, this list of conditions and the following disclaimer.                              | 25901    49
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 25902    49
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 25903    49
    14       | *    documentation and/or other materials provided with the distribution.                       | 25904    49
    15       | * 3. All advertising materials mentioning features or use of this software                      | 25905    49
    16       | *    must display the following acknowledgement:                                                | 25906    49
    17       | *      This product includes software developed by the University of                            | 25907    49
    18       | *      California, Berkeley and its contributors.                                               | 25908    49
    19       | * 4. Neither the name of the University nor the names of its contributors                       | 25909    49
    20       | *    may be used to endorse or promote products derived from this software                      | 25910    49
    21       | *    without specific prior written permission.                                                 | 25911    49
    22       | *                                                                                               | 25912    49
    23       | * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND                       | 25913    49
    24       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 25914    49
    25       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 25915    49
    26       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE                      | 25916    49
    27       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 25917    49
    28       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 25918    49
    29       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 25919    49
    30       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 25920    49
    31       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 25921    49
    32       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 25922    49
    33       | * SUCH DAMAGE.                                                                                  | 25923    49
    34       | *                                                                                               | 25924    49
    35       | */                                                                                              | 25925    49
    36       |                                                                                                 | 25926    49
    37       |#ifndef _DLFCN_H_                                                                                | 25927    49
    38       |#define _DLFCN_H_                                                                                | 25928    49
    39       |                                                                                                 | 25929    49
    40       |#include <sys/_types.h>                                                                          | 25930    49
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   499


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
     1       |/* release 2.25.00 */                                                                            | 25931     6
     2       |#pragma pack()                                                                                   | 25932     6
     3       |/*-                                                                                              | 25933     6
     4       | * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>                                           | 25934     6
     5       | * All rights reserved.                                                                          | 25935     6
     6       | *                                                                                               | 25936     6
     7       | * Redistribution and use in source and binary forms, with or without                            | 25937     6
     8       | * modification, are permitted provided that the following conditions                            | 25938     6
     9       | * are met:                                                                                      | 25939     6
    10       | * 1. Redistributions of source code must retain the above copyright                             | 25940     6
    11       | *    notice, this list of conditions and the following disclaimer.                              | 25941     6
    12       | * 2. Redistributions in binary form must reproduce the above copyright                          | 25942     6
    13       | *    notice, this list of conditions and the following disclaimer in the                        | 25943     6
    14       | *    documentation and/or other materials provided with the distribution.                       | 25944     6
    15       | *                                                                                               | 25945     6
    16       | * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND                        | 25946     6
    17       | * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE                         | 25947     6
    18       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE                    | 25948     6
    19       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE                       | 25949     6
    20       | * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                    | 25950     6
    21       | * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS                       | 25951     6
    22       | * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)                         | 25952     6
    23       | * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT                    | 25953     6
    24       | * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY                     | 25954     6
    25       | * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF                        | 25955     6
    26       | * SUCH DAMAGE.                                                                                  | 25956     6
    27       | *                                                                                               | 25957     6
    28       | * $FreeBSD: src/sys/sys/_types.h,v 1.21 2005/03/22 01:19:17 das Exp $                           | 25958     6
    29       | */                                                                                              | 25959     6
    30       |                                                                                                 | 25960     6
    31       |#ifndef _SYS__TYPES_H_                                                                           | 25961     6
    32       |#define _SYS__TYPES_H_                                                                           | 25962     6
    33       |                                                                                                 | 25963     6
    34       |#include <sys/cdefs.h>                                                                           | 25964     6
    35       |#include <machine/_types.h>                                                                      | 25965     6
    36       |                                                                                                 | 25966     6
    37       |/*                                                                                               | 25967     6
    38       | * Standard type definitions.                                                                    | 25968     6
    39       | */                                                                                              | 25969     6
    40       |typedef __int32_t       __blksize_t;    /* file block size */                                    | 25970     6
    41       |typedef __int64_t       __blkcnt_t;     /* file block count */                                   | 25971     6
    42       |typedef __int32_t       __clockid_t;    /* clock_gettime()... */                                 | 25972     6
    43       |typedef __uint32_t      __fflags_t;     /* file flags */                                         | 25973     6
    44       |typedef __uint64_t      __fsblkcnt_t;                                                            | 25974     6
    45       |typedef __uint64_t      __fsfilcnt_t;                                                            | 25975     6
    46       |typedef __uint32_t      __gid_t;                                                                 | 25976     6
    47       |typedef __int64_t       __id_t;         /* can hold a gid_t, pid_t, or uid_t */                  | 25977     6
    48       |typedef __uint32_t      __ino_t;        /* inode number */                                       | 25978     6
    49       |typedef long            __key_t;        /* IPC key (for Sys V IPC) */                            | 25979     6
    50       |typedef __int32_t       __lwpid_t;      /* Thread ID (a.k.a. LWP) */                             | 25980     6
    51       |typedef __uint16_t      __mode_t;       /* permissions */                                        | 25981     6
    52       |typedef int             __nl_item;                                                               | 25982     6
    53       |typedef __uint16_t      __nlink_t;      /* link count */                                         | 25983     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   500


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    54       |typedef __int64_t       __off_t;        /* file offset */                                        | 25984     6
    55       |typedef __int32_t       __pid_t;        /* process [group] */                                    | 25985     6
    56       |typedef __int64_t       __rlim_t;       /* resource limit - intentionally */                     | 25986     6
    57       |                                        /* signed, because of legacy code */                     | 25987     6
    58       |                                        /* that uses -1 for RLIM_INFINITY */                     | 25988     6
    59       |typedef __uint8_t       __sa_family_t;                                                           | 25989     6
    60       |typedef __uint32_t      __socklen_t;                                                             | 25990     6
    61       |typedef long            __suseconds_t;  /* microseconds (signed) */                              | 25991     6
    62       |typedef __int32_t       __timer_t;      /* timer_gettime()... */                                 | 25992     6
    63       |typedef __uint32_t      __uid_t;                                                                 | 25993     6
    64       |typedef unsigned int    __useconds_t;   /* microseconds (unsigned) */                            | 25994     6
    65       |                                                                                                 | 25995     6
    66       |/*                                                                                               | 25996     6
    67       | * Unusual type definitions.                                                                     | 25997     6
    68       | */                                                                                              | 25998     6
    69       |/*                                                                                               | 25999     6
    70       | * rune_t is declared to be an ``int'' instead of the more natural                               | 26000     6
    71       | * ``unsigned long'' or ``long''.  Two things are happening here.  It is not                     | 26001     6
    72       | * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,                    | 26002     6
    73       | * it looks like 10646 will be a 31 bit standard.  This means that if your                       | 26003     6
    74       | * ints cannot hold 32 bits, you will be in trouble.  The reason an int was                      | 26004     6
    75       | * chosen over a long is that the is*() and to*() routines take ints (says                       | 26005     6
    76       | * ANSI C), but they use __ct_rune_t instead of int.                                             | 26006     6
    77       | *                                                                                               | 26007     6
    78       | * NOTE: rune_t is not covered by ANSI nor other standards, and should not                       | 26008     6
    79       | * be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and                        | 26009     6
    80       | * rune_t must be the same type.  Also, wint_t must be no narrower than                          | 26010     6
    81       | * wchar_t, and should be able to hold all members of the largest                                | 26011     6
    82       | * character set plus one extra value (WEOF), and must be at least 16 bits.                      | 26012     6
    83       | */                                                                                              | 26013     6
    84       |#ifdef __cplusplus                                                                               | 26014     6
    85       |/* DCXX provides a builtin definition of wchar_t as a keyword, and it matters                    | 26015     6
    86       | * for parameter type matching even though it's the same type (4-byte signed) */                 | 26016     6
    87       |typedef wchar_t         __ct_rune_t;    /* arg type for ctype funcs */                           | 26017     6
    88       |#else                                                                                            | 26018     6
    89       |typedef int             __ct_rune_t;    /* arg type for ctype funcs */                           | 26019     6
    90       |#endif                                                                                           | 26020     6
    91       |typedef __ct_rune_t     __rune_t;       /* rune_t (see above) */                                 | 26021     6
    92       |typedef __ct_rune_t     __wchar_t;      /* wchar_t (see above) */                                | 26022     6
    93       |typedef __ct_rune_t     __wint_t;       /* wint_t (see above) */                                 | 26023     6
    94       |                                                                                                 | 26024     6
    95       |/* In C++11, char16_t and char32_t are builtin types */                                          | 26025     6
    96       |#if defined(__cplusplus) && __cplusplus >= 201103L                                               | 26026     6
    97       |#define _CHAR16_T_DECLARED                                                                       | 26027     6
    98       |#define _CHAR32_T_DECLARED                                                                       | 26028     6
    99       |#endif                                                                                           | 26029     6
   100       |                                                                                                 | 26030     6
   101       |#if !defined(__cplusplus)                                                                        | 26031     6
   102       |typedef __uint_least16_t __char16_t;                                                             | 26032     6
   103       |typedef __uint_least32_t __char32_t;                                                             | 26033     6
   104       |#endif                                                                                           | 26034     6
   105       |                                                                                                 | 26035     6
   106       |                                                                                                 | 26036     6
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   501


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   107       |typedef __uint32_t      __dev_t;        /* device number */                                      | 26037     6
   108       |                                                                                                 | 26038     6
   109       |typedef __uint32_t      __fixpt_t;      /* fixed point number */                                 | 26039     6
   110       |                                                                                                 | 26040     6
   111       |/*                                                                                               | 26041     6
   112       | * mbstate_t is an opaque object to keep conversion state during multibyte                       | 26042     6
   113       | * stream conversions.                                                                           | 26043     6
   114       | */                                                                                              | 26044     6
   115       |typedef union {                                                                                  | 26045     6
   116       |        char            __mbstate8[128];                                                         | 26046     6
   117       |        __int64_t       _mbstateL;      /* for alignment */                                      | 26047     6
   118       |} __mbstate_t;                                                                                   | 26048     6
   119       |                                                                                                 | 26049     6
   120       |#endif /* !_SYS__TYPES_H_ */                                                                     | 26050     6
   121       |#pragma pack(reset)                                                                              | 26051     6
    41       |                                                                                                 | 26052    49
    42       |/*                                                                                               | 26053    49
    43       | * Modes and flags for dlopen().                                                                 | 26054    49
    44       | */                                                                                              | 26055    49
    45       |#define RTLD_LAZY       1       /* Bind function calls lazily. */                                | 26056    49
    46       |#define RTLD_NOW        2       /* Bind function calls immediately. */                           | 26057    49
    47       |#define RTLD_MODEMASK   0x3                                                                      | 26058    49
    48       |#define RTLD_GLOBAL     0x100   /* Make symbols globally available. */                           | 26059    49
    49       |#define RTLD_LOCAL      0       /* Opposite of RTLD_GLOBAL, and the default. */                  | 26060    49
    50       |#define RTLD_TRACE      0x200   /* Trace loaded objects and exit. */                             | 26061    49
    51       |                                                                                                 | 26062    49
    52       |/*                                                                                               | 26063    49
    53       | * Request arguments for dlinfo().                                                               | 26064    49
    54       | */                                                                                              | 26065    49
    55       |#define RTLD_DI_LINKMAP         2       /* Obtain link map. */                                   | 26066    49
    56       |#define RTLD_DI_SERINFO         4       /* Obtain search path info. */                           | 26067    49
    57       |#define RTLD_DI_SERINFOSIZE     5       /*  ... query for required space. */                     | 26068    49
    58       |#define RTLD_DI_ORIGIN          6       /* Obtain object origin */                               | 26069    49
    59       |#define RTLD_DI_MAX             RTLD_DI_ORIGIN                                                   | 26070    49
    60       |                                                                                                 | 26071    49
    61       |/*                                                                                               | 26072    49
    62       | * Special handle arguments for dlsym()/dlinfo().                                                | 26073    49
    63       | */                                                                                              | 26074    49
    64       |#define RTLD_NEXT       ((void *) -1L)  /* Search subsequent objects. */                         | 26075    49
    65       |#define RTLD_DEFAULT    ((void *) -2L)  /* Use default search algorithm. */                      | 26076    49
    66       |#define RTLD_SELF       ((void *) -3L)  /* Search the caller itself. */                          | 26077    49
    67       |                                                                                                 | 26078    49
    68       |#if __BSD_VISIBLE                                                                                | 26079    49
    69       |                                                                                                 | 26080    49
    69       +                                                                                                 + 26080    49
    70       |#ifndef _SIZE_T_DECLARED                                                                         | 26081    49
    71       |typedef __size_t        size_t;                                                                  | 26082    49
    72       |#define _SIZE_T_DECLARED                                                                         | 26083    49
    73       |#endif                                                                                           | 26084    49
    74       |                                                                                                 | 26085    49
    75       |/*                                                                                               | 26086    49
    76       | * Structure filled in by dladdr() (not yet available in Systems/C)                              | 26087    49
    77       | */                                                                                              | 26088    49
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   502


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    78       |typedef struct dl_info {                                                                         | 26089    49
    79       |        const char      *dli_fname;     /* Pathname of shared object. */                         | 26090    49
    80       |        void            *dli_fbase;     /* Base address of shared object. */                     | 26091    49
    81       |        const char      *dli_sname;     /* Name of nearest symbol. */                            | 26092    49
    82       |        void            *dli_saddr;     /* Address of nearest symbol. */                         | 26093    49
    83       |} Dl_info;                                                                                       | 26094    49
    84       |                                                                                                 | 26095    49
    85       |/*-                                                                                              | 26096    49
    86       | * The actual type declared by this typedef is immaterial, provided that                         | 26097    49
    87       | * it is a function pointer.  Its purpose is to provide a return type for                        | 26098    49
    88       | * dlfunc() which can be cast to a function pointer type without depending                       | 26099    49
    89       | * on behavior undefined by the C standard, which might trigger a compiler                       | 26100    49
    90       | * diagnostic.  We intentionally declare a unique type signature to force                        | 26101    49
    91       | * a diagnostic should the application not cast the return value of dlfunc()                     | 26102    49
    92       | * appropriately.                                                                                | 26103    49
    93       | */                                                                                              | 26104    49
    94       |struct __dlfunc_arg {                                                                            | 26105    49
    95       |        int     __dlfunc_dummy;                                                                  | 26106    49
    96       |};                                                                                               | 26107    49
    97       |                                                                                                 | 26108    49
    98       |typedef void (*dlfunc_t)(struct __dlfunc_arg);                                                   | 26109    49
    99       |                                                                                                 | 26110    49
   100       |/*                                                                                               | 26111    49
   101       | * Structures, returned by the RTLD_DI_SERINFO dlinfo() request.                                 | 26112    49
   102       | */                                                                                              | 26113    49
   103       |typedef struct dl_serpath {                                                                      | 26114    49
   104       |        char *          dls_name;       /* single search path entry */                           | 26115    49
   105       |        unsigned int    dls_flags;      /* path information */                                   | 26116    49
   106       |} Dl_serpath;                                                                                    | 26117    49
   107       |                                                                                                 | 26118    49
   108       |typedef struct  dl_serinfo {                                                                     | 26119    49
   109       |        size_t          dls_size;       /* total buffer size */                                  | 26120    49
   110       |        unsigned int    dls_cnt;        /* number of path entries */                             | 26121    49
   111       |        Dl_serpath      dls_serpath[1]; /* there may be more than one */                         | 26122    49
   112       |} Dl_serinfo;                                                                                    | 26123    49
   113       |                                                                                                 | 26124    49
   114       |#endif /* __BSD_VISIBLE */                                                                       | 26125    49
   115       |                                                                                                 | 26126    49
   116       |__BEGIN_DECLS                                                                                    | 26127    49
   116       +                                                                                                 + 26127    49
   117       |/* XSI functions first. */                                                                       | 26128    49
   118       |int      dlclose(void *);                                                                        | 26129    49
   119       |const char *                                                                                     | 26130    49
   120       |         dlerror(void);                                                                          | 26131    49
   121       |void    *dlopen(const char *, int);                                                              | 26132    49
   122       |void    *dlsym(void * __restrict, const char * __restrict);                                      | 26133    49
   122       +void    *dlsym(void * __restrict__, const char * __restrict__);                                  + 26133    49
   123       |                                                                                                 | 26134    49
   124       |#if __BSD_VISIBLE                                                                                | 26135    49
   125       |int      dladdr(const void * __restrict, Dl_info * __restrict);                                  | 26136    49
   125       +int      dladdr(const void * __restrict__, Dl_info * __restrict__);                              + 26136    49
   126       |dlfunc_t dlfunc(void * __restrict, const char * __restrict);                                     | 26137    49
   126       +dlfunc_t dlfunc(void * __restrict__, const char * __restrict__);                                 + 26137    49
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   503


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   127       |int      dlinfo(void * __restrict, int, void * __restrict);                                      | 26138    49
   127       +int      dlinfo(void * __restrict__, int, void * __restrict__);                                  + 26138    49
   128       |#endif /* __BSD_VISIBLE */                                                                       | 26139    49
   129       |__END_DECLS                                                                                      | 26140    49
   129       +                                                                                                 + 26140    49
   130       |                                                                                                 | 26141    49
   131       |#endif /* !_DLFCN_H_ */                                                                          | 26142    49
   132       |#pragma pack(reset)                                                                              | 26143    49
    34       |                                                                                                 | 26144     1
    35       |#elif defined(_WIN32)                                                                            | 26145     1
    36       |                                                                                                 | 26146     1
    37       |#else                                                                                            | 26147     1
    38       |#error "Dynamic library loading not supported on this platform"                                  | 26148     1
    39       |#endif                                                                                           | 26149     1
    40       |                                                                                                 | 26150     1
    41       |                                                                                                 | 26151     1
    42       |                                                                                                 | 26152     1
    43       |/**                                                                                              | 26153     1
    44       | * @brief Latest thread-local dl error, normalized to suit our logging.                          | 26154     1
    45       | * @returns a newly allocated string that must be freed                                          | 26155     1
    46       | */                                                                                              | 26156     1
    47       |static char *rd_dl_error (void) {                                                                | 26157     1
    48       |#if WITH_LIBDL                                                                                   | 26158     1
    49       |        char *errstr;                                                                            | 26159     1
    49       +                char *errstr;                                                                    + 26159     1
    50       |        char *s;                                                                                 | 26160     1
    51       |        errstr = dlerror();                                                                      | 26161     1
    52       |        if (!errstr)                                                                             | 26162     1
    53       |                return rd_strdup("No error returned from dlerror()");                            | 26163     1
    54       |                                                                                                 | 26164     1
    55       |        errstr = rd_strdup(errstr);                                                              | 26165     1
    56       |        /* Change newlines to separators. */                                                     | 26166     1
    57       |        while ((s = strchr(errstr, '\n')))                                                       | 26167     1
    57       +                while ((s = __strchr(errstr,'\n')))                                              + 26167     1
    58       |                *s = '.';                                                                        | 26168     1
    59       |                                                                                                 | 26169     1
    60       |        return errstr;                                                                           | 26170     1
    61       |                                                                                                 | 26171     1
    62       |#elif defined(_WIN32)                                                                            | 26172     1
    63       |        char buf[1024];                                                                          | 26173     1
    64       |        rd_strerror_w32(GetLastError(), buf, sizeof(buf));                                       | 26174     1
    65       |        return rd_strdup(buf);                                                                   | 26175     1
    66       |#endif                                                                                           | 26176     1
    67       |}                                                                                                | 26177     1
    68       |                                                                                                 | 26178     1
    69       |/**                                                                                              | 26179     1
    70       | * @brief Attempt to load library \p path.                                                       | 26180     1
    71       | * @returns the library handle (platform dependent, thus opaque) on success,                     | 26181     1
    72       | *          else NULL.                                                                           | 26182     1
    73       | */                                                                                              | 26183     1
    74       |static rd_dl_hnd_t *                                                                             | 26184     1
    75       |rd_dl_open0 (const char *path, char *errstr, size_t errstr_size) {                               | 26185     1
    76       |        void *handle;                                                                            | 26186     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   504


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
    77       |        const char *loadfunc;                                                                    | 26187     1
    78       |#if WITH_LIBDL                                                                                   | 26188     1
    79       |        loadfunc = "dlopen()";                                                                   | 26189     1
    79       +                loadfunc = "dlopen()";                                                           + 26189     1
    80       |        handle = dlopen(path, RTLD_NOW | RTLD_LOCAL);                                            | 26190     1
    80       +                handle = dlopen(path, 2 | 0);                                                    + 26190     1
    81       |#elif defined(_WIN32)                                                                            | 26191     1
    82       |        loadfunc = "LoadLibrary()";                                                              | 26192     1
    83       |        handle = (void *)LoadLibraryA(path);                                                     | 26193     1
    84       |#endif                                                                                           | 26194     1
    85       |        if (!handle) {                                                                           | 26195     1
    86       |                char *dlerrstr = rd_dl_error();                                                  | 26196     1
    87       |                rd_snprintf(errstr, errstr_size, "%s failed: %s",                                | 26197     1
    88       |                            loadfunc, dlerrstr);                                                 | 26198     1
    88       +                                            snprintf(errstr, errstr_size, "%s failed: %s", loadfu+ 26198     1
    88       +nc, dlerrstr);                                                                                   + 26198     1
    89       |                rd_free(dlerrstr);                                                               | 26199     1
    90       |        }                                                                                        | 26200     1
    91       |        return (rd_dl_hnd_t *)handle;                                                            | 26201     1
    92       |}                                                                                                | 26202     1
    93       |                                                                                                 | 26203     1
    94       |                                                                                                 | 26204     1
    95       |/**                                                                                              | 26205     1
    96       | * @brief Attempt to load library \p path, possibly with a filename extension                    | 26206     1
    97       | *        which will be automatically resolved depending on platform.                            | 26207     1
    98       | * @returns the library handle (platform dependent, thus opaque) on success,                     | 26208     1
    99       | *          else NULL.                                                                           | 26209     1
   100       | */                                                                                              | 26210     1
   101       |rd_dl_hnd_t *rd_dl_open (const char *path, char *errstr, size_t errstr_size) {                   | 26211     1
   102       |        rd_dl_hnd_t *handle;                                                                     | 26212     1
   103       |        char *extpath;                                                                           | 26213     1
   104       |        size_t pathlen;                                                                          | 26214     1
   105       |        const char *td, *fname;                                                                  | 26215     1
   106       |        const char *solib_ext = SOLIB_EXT;                                                       | 26216     1
   106       +                const char *solib_ext = ".dylib";                                                + 26216     1
   107       |                                                                                                 | 26217     1
   108       |        /* Try original path first. */                                                           | 26218     1
   109       |        handle = rd_dl_open0(path, errstr, errstr_size);                                         | 26219     1
   110       |        if (handle)                                                                              | 26220     1
   111       |                return handle;                                                                   | 26221     1
   112       |                                                                                                 | 26222     1
   113       |        /* Original path not found, see if we can append the solib_ext                           | 26223     1
   114       |         * filename extension. */                                                                | 26224     1
   115       |                                                                                                 | 26225     1
   116       |        /* Get filename and filename extension.                                                  | 26226     1
   117       |         * We can't rely on basename(3) since it is not portable */                              | 26227     1
   118       |        fname = strrchr(path, '/');                                                              | 26228     1
   118       +                fname = __strrchr(path,'/');                                                     + 26228     1
   119       |#ifdef _WIN32                                                                                    | 26229     1
   120       |        td = strrchr(path, '\\');                                                                | 26230     1
   121       |        if (td > fname)                                                                          | 26231     1
   122       |                fname = td;                                                                      | 26232     1
   123       |#endif                                                                                           | 26233     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   505


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   124       |        if (!fname)                                                                              | 26234     1
   125       |                fname = path;                                                                    | 26235     1
   126       |                                                                                                 | 26236     1
   127       |        td = strrchr(fname, '.');                                                                | 26237     1
   127       +                td = __strrchr(fname,'.');                                                       + 26237     1
   128       |                                                                                                 | 26238     1
   129       |        /* If there is a filename extension ('.' within the last characters)                     | 26239     1
   130       |         * then bail out, we will not append an extension in this case. */                       | 26240     1
   131       |        if (td && td >= fname + strlen(fname) - strlen(SOLIB_EXT))                               | 26241     1
   131       +                if (td && td >= fname + __strlen(fname) - __strlen(".dylib"))                    + 26241     1
   132       |                return NULL;                                                                     | 26242     1
   132       +                                return ((void *)0);                                              + 26242     1
   133       |                                                                                                 | 26243     1
   134       |        /* Append platform-specific library extension. */                                        | 26244     1
   135       |        pathlen = strlen(path);                                                                  | 26245     1
   135       +                pathlen = __strlen(path);                                                        + 26245     1
   136       |        extpath = rd_alloca(pathlen + strlen(solib_ext) + 1);                                    | 26246     1
   136       +                extpath = __builtin_alloca(pathlen + __strlen(solib_ext) + 1);                   + 26246     1
   137       |        memcpy(extpath, path, pathlen);                                                          | 26247     1
   137       +                __memcpy(extpath,path,pathlen);                                                  + 26247     1
   138       |        memcpy(extpath+pathlen, solib_ext, strlen(solib_ext) + 1);                               | 26248     1
   138       +                __memcpy(extpath+pathlen,solib_ext,__strlen(solib_ext) + 1);                     + 26248     1
   139       |                                                                                                 | 26249     1
   140       |        /* Try again with extension */                                                           | 26250     1
   141       |        return rd_dl_open0(extpath, errstr, errstr_size);                                        | 26251     1
   142       |}                                                                                                | 26252     1
   143       |                                                                                                 | 26253     1
   144       |                                                                                                 | 26254     1
   145       |/**                                                                                              | 26255     1
   146       | * @brief Close handle previously returned by rd_dl_open()                                       | 26256     1
   147       | * @remark errors are ignored (what can we do anyway?)                                           | 26257     1
   148       | */                                                                                              | 26258     1
   149       |void rd_dl_close (rd_dl_hnd_t *handle) {                                                         | 26259     1
   150       |#if WITH_LIBDL                                                                                   | 26260     1
   151       |        dlclose((void *)handle);                                                                 | 26261     1
   151       +                dlclose((void *)handle);                                                         + 26261     1
   152       |#elif defined(_WIN32)                                                                            | 26262     1
   153       |        FreeLibrary((HMODULE)handle);                                                            | 26263     1
   154       |#endif                                                                                           | 26264     1
   155       |}                                                                                                | 26265     1
   156       |                                                                                                 | 26266     1
   157       |/**                                                                                              | 26267     1
   158       | * @brief look up address of \p symbol in library handle \p handle                               | 26268     1
   159       | * @returns the function pointer on success or NULL on error.                                    | 26269     1
   160       | */                                                                                              | 26270     1
   161       |void *                                                                                           | 26271     1
   162       |rd_dl_sym (rd_dl_hnd_t *handle, const char *symbol,                                              | 26272     1
   163       |           char *errstr, size_t errstr_size) {                                                   | 26273     1
   164       |        void *func;                                                                              | 26274     1
   165       |#if WITH_LIBDL                                                                                   | 26275     1
   166       |        func = dlsym((void *)handle, symbol);                                                    | 26276     1
   166       +                func = dlsym((void *)handle, symbol);                                            + 26276     1
   167       |#elif defined(_WIN32)                                                                            | 26277     1
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   506


                                           * * * * *   S O U R C E   * * * * *

  LINE  STMT                                                                                                       SEQNBR  FILE
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+..*
   168       |        func = GetProcAddress((HMODULE)handle, symbol);                                          | 26278     1
   169       |#endif                                                                                           | 26279     1
   170       |        if (!func) {                                                                             | 26280     1
   171       |                char *dlerrstr = rd_dl_error();                                                  | 26281     1
   172       |                rd_snprintf(errstr, errstr_size,                                                 | 26282     1
   173       |                            "Failed to load symbol \"%s\": %s",                                  | 26283     1
   174       |                            symbol, dlerrstr);                                                   | 26284     1
   174       +                                            snprintf(errstr, errstr_size, "Failed to load symbol + 26284     1
   174       +\"%s\": %s", symbol, dlerrstr);                                                                  + 26284     1
   175       |                rd_free(dlerrstr);                                                               | 26285     1
   176       |        }                                                                                        | 26286     1
   177       |        return func;                                                                             | 26287     1
   178       |}                                                                                                | 26288     1
   179       |                                                                                                 | 26289     1
                                     * * * * *   E N D   O F   S O U R C E   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   507


                         * * * * *   F I L E S   * * * * *

         FILES  ---  FILE#   NAME

                        1   C:\asgkafka\librdkafka\src\rddl.c
                        2   C:\asgkafka\librdkafka\src\sysc.h
                        3   C:\dignus\include\sys\types.h
                        4   C:\dignus\include\sys\cdefs.h
                        5   C:\dignus\include\machine\endian.h
                        6   C:\dignus\include\sys\_types.h
                        7   C:\dignus\include\machine\_types.h
                        8   C:\dignus\include\sys\_pthreadtypes.h
                        9   C:\dignus\include\sys\select.h
                       10   C:\dignus\include\sys\_sigset.h
                       11   C:\dignus\include\sys\_timeval.h
                       12   C:\dignus\include\sys\timespec.h
                       13   C:\dignus\include\unistd.h
                       14   C:\dignus\include\sys\unistd.h
                       15   C:\dignus\include\sys\_null.h
                       16   C:\dignus\include\time.h
                       17   C:\dignus\include\sys\time.h
                       18   C:\asgkafka\librdkafka\src\rd.h
                       19   C:\dignus\include\stdio.h
                       20   C:\dignus\include\stdlib.h
                       21   C:\dignus\include\string.h
                       22   C:\dignus\include\strings.h
                       23   C:\dignus\include\errno.h
                       24   C:\dignus\include\assert.h
                       25   C:\dignus\include\limits.h
                       26   C:\dignus\include\sys\limits.h
                       27   C:\dignus\include\machine\_limits.h
                       28   C:\dignus\include\sys\syslimits.h
                       29   C:\asgkafka\librdkafka\src\tinycthread.h
                       30   C:\asgkafka\librdkafka\src\..\config.h
                       31   C:\dignus\include\pthread.h
                       32   C:\dignus\include\sys\signal.h
                       33   C:\dignus\include\machine\signal.h
                       34   C:\dignus\include\machine\trap.h
                       35   C:\dignus\include\sched.h
                       36   C:\asgkafka\librdkafka\src\tinycthread_extra.h
                       37   C:\asgkafka\librdkafka\src\rdsysqueue.h
                       38   C:\asgkafka\librdkafka\src\queue.h
                       39   C:\asgkafka\librdkafka\src\rdposix.h
                       40   C:\dignus\include\inttypes.h
                       41   C:\dignus\include\machine\_inttypes.h
                       42   C:\dignus\include\sys\stdint.h
                       43   C:\dignus\include\machine\_stdint.h
                       44   C:\dignus\include\fcntl.h
                       45   C:\asgkafka\librdkafka\src\rdatomic.h
                       46   C:\asgkafka\librdkafka\src\rdtypes.h
                       47   C:\dignus\include\syslog.h
                       48   C:\asgkafka\librdkafka\src\rddl.h
                       49   C:\dignus\include\dlfcn.h

                         * * * * *   E N D   O F   F I L E S   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   508


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *


===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __mbstate8[128]                                                                         |
|       0           |       8           | _mbstateL                                                                               |
|       8           |     120           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_attr                                                         Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_attr                                                 Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __i[16]                                                                                 |
|       0           |      64           | __vi[16]                                                                                |
|       0           |      64           | __s[8]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_mutex                                                        Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      40           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_mutex                                                Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   509


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |      40           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      40           | __i[10]                                                                                 |
|       0           |      40           | __vi[10]                                                                                |
|       0           |      40           | __p[5]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_cond                                                         Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_cond                                                 Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __i[12]                                                                                 |
|       0           |      48           | __vi[12]                                                                                |
|       0           |      48           | __p[6]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_rwlock                                                       Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_rwlock                                               Total size: 56 bytes             |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   510


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __i[14]                                                                                 |
|       0           |      56           | __vi[14]                                                                                |
|       0           |      56           | __p[7]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_barrier                                                      Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_barrier                                              Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __i[8]                                                                                  |
|       0           |      32           | __vi[8]                                                                                 |
|       0           |      32           | __p[4]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   511


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *


===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __i[14]                                                                                 |
|       0           |      56           | __vi[14]                                                                                |
|       0           |      56           | __p[7]                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __attr[2]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __sigset                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   512


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __sigset                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct timeval                                                              Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_usec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct timeval                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_usec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct timespec                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_nsec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct timespec                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | tv_sec                                                                                  |
|       8           |       8           | tv_nsec                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __sigset_t                                                           Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   513


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __sigset_t                                                   Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct fd_set                                                               Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct fd_set                                                       Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct fd_set                                                               Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct fd_set                                                       Total size: 128 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |     128           | __fds_bits[16]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigset_t                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   514


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigset_t                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | __bits[4]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct tm                                                                   Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tm_sec                                                                                  |
|       4           |       4           | tm_min                                                                                  |
|       8           |       4           | tm_hour                                                                                 |
|      12           |       4           | tm_mday                                                                                 |
|      16           |       4           | tm_mon                                                                                  |
|      20           |       4           | tm_year                                                                                 |
|      24           |       4           | tm_wday                                                                                 |
|      28           |       4           | tm_yday                                                                                 |
|      32           |       4           | tm_isdst                                                                                |
|      36           |       4           | ***PADDING***                                                                           |
|      40           |       8           | tm_gmtoff                                                                               |
|      48           |       8           | tm_zone                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct tm                                                           Total size: 52 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tm_sec                                                                                  |
|       4           |       4           | tm_min                                                                                  |
|       8           |       4           | tm_hour                                                                                 |
|      12           |       4           | tm_mday                                                                                 |
|      16           |       4           | tm_mon                                                                                  |
|      20           |       4           | tm_year                                                                                 |
|      24           |       4           | tm_wday                                                                                 |
|      28           |       4           | tm_yday                                                                                 |
|      32           |       4           | tm_isdst                                                                                |
|      36           |       8           | tm_gmtoff                                                                               |
|      44           |       8           | tm_zone                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct timezone                                                             Total size: 8 bytes              |
|=================================================================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   515


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tz_minuteswest                                                                          |
|       4           |       4           | tz_dsttime                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct timezone                                                     Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | tz_minuteswest                                                                          |
|       4           |       4           | tz_dsttime                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct bintime                                                              Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | sec                                                                                     |
|       8           |       8           | frac                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct bintime                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | sec                                                                                     |
|       8           |       8           | frac                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct itimerval                                                            Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | it_interval                                                                             |
|      16           |      16           | it_value                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct itimerval                                                    Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      16           | it_interval                                                                             |
|      16           |      16           | it_value                                                                                |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   516


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct clockinfo                                                            Total size: 20 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | hz                                                                                      |
|       4           |       4           | tick                                                                                    |
|       8           |       4           | spare                                                                                   |
|      12           |       4           | stathz                                                                                  |
|      16           |       4           | profhz                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct clockinfo                                                    Total size: 20 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | hz                                                                                      |
|       4           |       4           | tick                                                                                    |
|       8           |       4           | spare                                                                                   |
|      12           |       4           | stathz                                                                                  |
|      16           |       4           | profhz                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __sbuf                                                               Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | _base                                                                                   |
|       8           |       4           | _size                                                                                   |
|      12           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __sbuf                                                       Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | _base                                                                                   |
|       8           |       4           | _size                                                                                   |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __sFILE                                                              Total size: 152 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   517


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|       0           |       8           | _p                                                                                      |
|       8           |       4           | _r                                                                                      |
|      12           |       4           | _w                                                                                      |
|      16           |       4           | _flags                                                                                  |
|      20           |       2           | _file                                                                                   |
|      22           |       2           | ***PADDING***                                                                           |
|      24           |      16           | _bf                                                                                     |
|      40           |       4           | _lbfsize                                                                                |
|      44           |       4           | ***PADDING***                                                                           |
|      48           |       8           | _cookie                                                                                 |
|      56           |       8           | _close                                                                                  |
|      64           |       8           | _read                                                                                   |
|      72           |       8           | _seek                                                                                   |
|      80           |       8           | _write                                                                                  |
|      88           |      16           | _ub                                                                                     |
|     104           |       8           | _extra                                                                                  |
|     112           |       4           | _ur                                                                                     |
|     116           |       3           | _ubuf[3]                                                                                |
|     119           |       1           | _nbuf[1]                                                                                |
|     120           |      16           | _lb                                                                                     |
|     136           |       4           | _blksize                                                                                |
|     140           |       4           | ***PADDING***                                                                           |
|     144           |       8           | _offset                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __sFILE                                                      Total size: 142 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | _p                                                                                      |
|       8           |       4           | _r                                                                                      |
|      12           |       4           | _w                                                                                      |
|      16           |       4           | _flags                                                                                  |
|      20           |       2           | _file                                                                                   |
|      22           |      16           | _bf                                                                                     |
|      38           |       4           | _lbfsize                                                                                |
|      42           |       8           | _cookie                                                                                 |
|      50           |       8           | _close                                                                                  |
|      58           |       8           | _read                                                                                   |
|      66           |       8           | _seek                                                                                   |
|      74           |       8           | _write                                                                                  |
|      82           |      16           | _ub                                                                                     |
|      98           |       8           | _extra                                                                                  |
|     106           |       4           | _ur                                                                                     |
|     110           |       3           | _ubuf[3]                                                                                |
|     113           |       1           | _nbuf[1]                                                                                |
|     114           |      16           | _lb                                                                                     |
|     130           |       4           | _blksize                                                                                |
|     134           |       8           | _offset                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct FILE                                                                 Total size: 152 bytes            |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   518


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | _p                                                                                      |
|       8           |       4           | _r                                                                                      |
|      12           |       4           | _w                                                                                      |
|      16           |       4           | _flags                                                                                  |
|      20           |       2           | _file                                                                                   |
|      22           |       2           | ***PADDING***                                                                           |
|      24           |      16           | _bf                                                                                     |
|      40           |       4           | _lbfsize                                                                                |
|      44           |       4           | ***PADDING***                                                                           |
|      48           |       8           | _cookie                                                                                 |
|      56           |       8           | _close                                                                                  |
|      64           |       8           | _read                                                                                   |
|      72           |       8           | _seek                                                                                   |
|      80           |       8           | _write                                                                                  |
|      88           |      16           | _ub                                                                                     |
|     104           |       8           | _extra                                                                                  |
|     112           |       4           | _ur                                                                                     |
|     116           |       3           | _ubuf[3]                                                                                |
|     119           |       1           | _nbuf[1]                                                                                |
|     120           |      16           | _lb                                                                                     |
|     136           |       4           | _blksize                                                                                |
|     140           |       4           | ***PADDING***                                                                           |
|     144           |       8           | _offset                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct FILE                                                         Total size: 142 bytes            |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | _p                                                                                      |
|       8           |       4           | _r                                                                                      |
|      12           |       4           | _w                                                                                      |
|      16           |       4           | _flags                                                                                  |
|      20           |       2           | _file                                                                                   |
|      22           |      16           | _bf                                                                                     |
|      38           |       4           | _lbfsize                                                                                |
|      42           |       8           | _cookie                                                                                 |
|      50           |       8           | _close                                                                                  |
|      58           |       8           | _read                                                                                   |
|      66           |       8           | _seek                                                                                   |
|      74           |       8           | _write                                                                                  |
|      82           |      16           | _ub                                                                                     |
|      98           |       8           | _extra                                                                                  |
|     106           |       4           | _ur                                                                                     |
|     110           |       3           | _ubuf[3]                                                                                |
|     113           |       1           | _nbuf[1]                                                                                |
|     114           |      16           | _lb                                                                                     |
|     130           |       4           | _blksize                                                                                |
|     134           |       8           | _offset                                                                                 |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   519


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | quot                                                                                    |
|       4           |       4           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct div_t                                                                Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | quot                                                                                    |
|       4           |       4           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct div_t                                                        Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | quot                                                                                    |
|       4           |       4           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct ldiv_t                                                               Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct ldiv_t                                                       Total size: 16 bytes             |
|=================================================================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   520


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct lldiv_t                                                              Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct lldiv_t                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union sigval                                                                Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | sigval_int                                                                              |
|       0           |       8           | sigval_ptr                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed union sigval                                                        Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | sigval_int                                                                              |
|       0           |       8           | sigval_ptr                                                                              |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   521


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigevent                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | sigev_notify                                                                            |
|       4           |       4           | __sigev_u                                                                               |
|       8           |       8           | sigev_value                                                                             |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigevent                                                     Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | sigev_notify                                                                            |
|       4           |       4           | __sigev_u                                                                               |
|       8           |       8           | sigev_value                                                                             |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __sigev_signo                                                                           |
|       0           |       4           | __sigev_notify_kqueue                                                                   |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __siginfo                                                            Total size: 80 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | si_signo                                                                                |
|       4           |       4           | si_errno                                                                                |
|       8           |       4           | si_code                                                                                 |
|      12           |       4           | si_pid                                                                                  |
|      16           |       4           | si_uid                                                                                  |
|      20           |       4           | si_status                                                                               |
|      24           |       8           | si_addr                                                                                 |
|      32           |       8           | si_value                                                                                |
|      40           |       8           | si_band                                                                                 |
|      48           |      28           | __spare__[7]                                                                            |
|      76           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __siginfo                                                    Total size: 76 bytes             |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   522


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | si_signo                                                                                |
|       4           |       4           | si_errno                                                                                |
|       8           |       4           | si_code                                                                                 |
|      12           |       4           | si_pid                                                                                  |
|      16           |       4           | si_uid                                                                                  |
|      20           |       4           | si_status                                                                               |
|      24           |       8           | si_addr                                                                                 |
|      32           |       8           | si_value                                                                                |
|      40           |       8           | si_band                                                                                 |
|      48           |      28           | __spare__[7]                                                                            |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigaction                                                            Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __sigaction_u                                                                           |
|       8           |       4           | sa_flags                                                                                |
|      12           |      16           | sa_mask                                                                                 |
|      28           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigaction                                                    Total size: 28 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __sigaction_u                                                                           |
|       8           |       4           | sa_flags                                                                                |
|      12           |      16           | sa_mask                                                                                 |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: union                                                                       Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __sa_handler                                                                            |
|       0           |       8           | __sa_sigaction                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigaltstack                                                          Total size: 24 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   523


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|       0           |       8           | ss_sp                                                                                   |
|       8           |       8           | ss_size                                                                                 |
|      16           |       4           | ss_flags                                                                                |
|      20           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigaltstack                                                  Total size: 20 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | ss_sp                                                                                   |
|       8           |       8           | ss_size                                                                                 |
|      16           |       4           | ss_flags                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigvec                                                               Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | sv_handler                                                                              |
|       8           |       4           | sv_mask                                                                                 |
|      12           |       4           | sv_flags                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigvec                                                       Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | sv_handler                                                                              |
|       8           |       4           | sv_mask                                                                                 |
|      12           |       4           | sv_flags                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sigstack                                                             Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | ss_sp                                                                                   |
|       8           |       4           | ss_onstack                                                                              |
|      12           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sigstack                                                     Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   524


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |       8           | ss_sp                                                                                   |
|       8           |       4           | ss_onstack                                                                              |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct sched_param                                                          Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | sched_priority                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct sched_param                                                  Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | sched_priority                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_attr_t                                                       Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_attr_t                                               Total size: 64 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      64           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_barrier_t                                                    Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      32           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_barrier_t                                            Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   525


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |      32           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_barrierattr_t                                                Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_barrierattr_t                                        Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __ptcb                                                               Total size: 24 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __f                                                                                     |
|       8           |       8           | __x                                                                                     |
|      16           |       8           | __next                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __ptcb                                                       Total size: 24 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __f                                                                                     |
|       8           |       8           | __x                                                                                     |
|      16           |       8           | __next                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_condattr_t                                                   Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_condattr_t                                           Total size: 4 bytes              |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   526


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_cond_t                                                       Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_cond_t                                               Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      48           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_mutex_t                                                      Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      40           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_mutex_t                                              Total size: 40 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      40           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_mutexattr_t                                                  Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_mutexattr_t                                          Total size: 4 bytes              |
|=================================================================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   527


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __attr                                                                                  |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_rwlock_t                                                     Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_rwlock_t                                             Total size: 56 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |      56           | __u                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct pthread_rwlockattr_t                                                 Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __attr[2]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct pthread_rwlockattr_t                                         Total size: 8 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | __attr[2]                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct imaxdiv_t                                                            Total size: 16 bytes             |
|=================================================================================================================================|
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   528


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct imaxdiv_t                                                    Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | quot                                                                                    |
|       8           |       8           | rem                                                                                     |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct flock                                                                Total size: 24 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | l_start                                                                                 |
|       8           |       8           | l_len                                                                                   |
|      16           |       4           | l_pid                                                                                   |
|      20           |       2           | l_type                                                                                  |
|      22           |       2           | l_whence                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct flock                                                        Total size: 24 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | l_start                                                                                 |
|       8           |       8           | l_len                                                                                   |
|      16           |       4           | l_pid                                                                                   |
|      20           |       2           | l_type                                                                                  |
|      22           |       2           | l_whence                                                                                |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct                                                                      Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | val                                                                                     |
|       4           |       4           | ***PADDING***                                                                           |
|       8           |      40           | lock                                                                                    |
===================================================================================================================================

===================================================================================================================================
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   529


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

| Aggregate map for: struct                                                                      Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | val                                                                                     |
|       8           |      40           | lock                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct rd_atomic32_t                                                        Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | val                                                                                     |
|       4           |       4           | ***PADDING***                                                                           |
|       8           |      40           | lock                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct rd_atomic32_t                                                Total size: 44 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | val                                                                                     |
|       4           |      40           | lock                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct rd_atomic64_t                                                        Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | val                                                                                     |
|       8           |      40           | lock                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct rd_atomic64_t                                                Total size: 48 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | val                                                                                     |
|       8           |      40           | lock                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct rd_chariov_s                                                         Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   530


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

|===================|===================|=========================================================================================|
|       0           |       8           | ptr                                                                                     |
|       8           |       8           | size                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct rd_chariov_s                                                 Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | ptr                                                                                     |
|       8           |       8           | size                                                                                    |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct dl_info                                                              Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dli_fname                                                                               |
|       8           |       8           | dli_fbase                                                                               |
|      16           |       8           | dli_sname                                                                               |
|      24           |       8           | dli_saddr                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct dl_info                                                      Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dli_fname                                                                               |
|       8           |       8           | dli_fbase                                                                               |
|      16           |       8           | dli_sname                                                                               |
|      24           |       8           | dli_saddr                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct __dlfunc_arg                                                         Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __dlfunc_dummy                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct __dlfunc_arg                                                 Total size: 4 bytes              |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       4           | __dlfunc_dummy                                                                          |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   531


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct dl_serpath                                                           Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dls_name                                                                                |
|       8           |       4           | dls_flags                                                                               |
|      12           |       4           | ***PADDING***                                                                           |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct dl_serpath                                                   Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dls_name                                                                                |
|       8           |       4           | dls_flags                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct dl_serinfo                                                           Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dls_size                                                                                |
|       8           |       4           | dls_cnt                                                                                 |
|      12           |       4           | ***PADDING***                                                                           |
|      16           |      16           | dls_serpath[1]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct dl_serinfo                                                   Total size: 28 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dls_size                                                                                |
|       8           |       4           | dls_cnt                                                                                 |
|      12           |      16           | dls_serpath[1]                                                                          |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct Dl_serpath                                                           Total size: 16 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dls_name                                                                                |
|       8           |       4           | dls_flags                                                                               |
|      12           |       4           | ***PADDING***                                                                           |
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   532


                                   * * * * *   S T R U C T U R E   M A P S   * * * * *

===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct Dl_serpath                                                   Total size: 12 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dls_name                                                                                |
|       8           |       4           | dls_flags                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: struct Dl_info                                                              Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dli_fname                                                                               |
|       8           |       8           | dli_fbase                                                                               |
|      16           |       8           | dli_sname                                                                               |
|      24           |       8           | dli_saddr                                                                               |
===================================================================================================================================

===================================================================================================================================
| Aggregate map for: _Packed struct Dl_info                                                      Total size: 32 bytes             |
|=================================================================================================================================|
|      Offset       |      Length       | Member Name                                                                             |
|    Bytes(Bits)    |    Bytes(Bits)    |                                                                                         |
|===================|===================|=========================================================================================|
|       0           |       8           | dli_fname                                                                               |
|       8           |       8           | dli_fbase                                                                               |
|      16           |       8           | dli_sname                                                                               |
|      24           |       8           | dli_saddr                                                                               |
===================================================================================================================================
                           * * * * *   E N D   O F   S T R U C T U R E   M A P S   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   533

                               * * * * *   S T O R A G E   O F F S E T   L I S T I N G   * * * * *

IDENTIFIER          DEFINITION      ATTRIBUTES

E2U                 7579-2:29       Class = static,              Location = 0 + WSA + Q(@STATIC),              Length = 256

U2E                 7612-2:62       Class = static,              Location = 256 + WSA + Q(@STATIC),            Length = 256

ptr                 25223-18:138    Class = parameter,           Location = 0(r1),                             Length = 8

s                   25227-18:142    Class = parameter,           Location = 0(r1),                             Length = 8

n                   25229-18:144    Class = automatic,           Location = 168(r13),                          Length = 8

errstr              26159-1:49      Class = automatic,           Location = 168(r13),                          Length = 8

s                   26160-1:50      Class = automatic,           Location = 168(r13),                          Length = 8

path                26185-1:75      Class = parameter,           Location = 0(r1),                             Length = 8

errstr              26185-1:75      Class = parameter,           Location = 8(r1),                             Length = 8

errstr_size         26185-1:75      Class = parameter,           Location = 16(r1),                            Length = 8

handle              26186-1:76      Class = automatic,           Location = 168(r13),                          Length = 8

loadfunc            26187-1:77      Class = automatic,           Location = 168(r13),                          Length = 8

dlerrstr            26196-1:86      Class = automatic,           Location = 168(r13),                          Length = 8

path                26211-1:101     Class = parameter,           Location = 0(r1),                             Length = 8

errstr              26211-1:101     Class = parameter,           Location = 8(r1),                             Length = 8

errstr_size         26211-1:101     Class = parameter,           Location = 16(r1),                            Length = 8

handle              26212-1:102     Class = automatic,           Location = 168(r13),                          Length = 8

extpath             26213-1:103     Class = automatic,           Location = 168(r13),                          Length = 8

pathlen             26214-1:104     Class = automatic,           Location = 168(r13),                          Length = 8

fname               26215-1:105     Class = automatic,           Location = 168(r13),                          Length = 8

td                  26215-1:105     Class = automatic,           Location = 168(r13),                          Length = 8

solib_ext           26216-1:106     Class = automatic,           Location = 168(r13),                          Length = 8

handle              26259-1:149     Class = parameter,           Location = 0(r1),                             Length = 8

handle              26272-1:162     Class = parameter,           Location = 0(r1),                             Length = 8

symbol              26272-1:162     Class = parameter,           Location = 8(r1),                             Length = 8

errstr              26273-1:163     Class = parameter,           Location = 16(r1),                            Length = 8

errstr_size         26273-1:163     Class = parameter,           Location = 24(r1),                            Length = 8
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   534

IDENTIFIER          DEFINITION      ATTRIBUTES


func                26274-1:164     Class = automatic,           Location = 168(r13),                          Length = 8

dlerrstr            26281-1:171     Class = automatic,           Location = 168(r13),                          Length = 8


                         * * * * *   E N D   O F   S T O R A G E   O F F S E T   L I S T I N G   * * * * *
Dignus Systems/C V2.25.07 Mar  6 2021 08:51:07            C:\asgkafka\librdkafka\src\rddl.c           04/30/2021 15:35:16 Page   535

                                           * * * * *   S T A T I C     M A P   * * * * *

OFFSET (HEX)   LENGTH (HEX)   NAME

          0            100    E2U
        100            100    U2E
                                  * * * * *   E N D     O F     S T A T I C     M A P   * * * * *

                              * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
